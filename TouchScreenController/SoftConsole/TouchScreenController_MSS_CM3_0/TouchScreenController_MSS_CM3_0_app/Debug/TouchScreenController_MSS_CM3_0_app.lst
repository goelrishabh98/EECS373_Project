
TouchScreenController_MSS_CM3_0_app:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026ac  20000000  20000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  200026ac  200026ac  0000a6ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000120  200026e0  200026e0  0000a6e0  2**2
                  ALLOC
  3 .stack        00003000  20002800  20002800  0000a6e0  2**0
                  ALLOC
  4 .comment      000001ae  00000000  00000000  0000a6e0  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000668  00000000  00000000  0000a88e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001255  00000000  00000000  0000aef6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008da6  00000000  00000000  0000c14b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000e42  00000000  00000000  00014ef1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000363e  00000000  00000000  00015d33  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001664  00000000  00000000  00019374  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003db1  00000000  00000000  0001a9d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000023f4  00000000  00000000  0001e789  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 0003a087  00000000  00000000  00020b7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000025  00000000  00000000  0005ac04  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 00000620  00000000  00000000  0005ac29  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

20000000 <__text_start>:
20000000:	20010000 	.word	0x20010000
20000004:	20000299 	.word	0x20000299
20000008:	20000309 	.word	0x20000309
2000000c:	2000030b 	.word	0x2000030b
20000010:	2000030d 	.word	0x2000030d
20000014:	2000030f 	.word	0x2000030f
20000018:	20000311 	.word	0x20000311
	...
2000002c:	20000313 	.word	0x20000313
20000030:	20000315 	.word	0x20000315
20000034:	00000000 	.word	0x00000000
20000038:	20000317 	.word	0x20000317
2000003c:	20000319 	.word	0x20000319
20000040:	2000031b 	.word	0x2000031b
20000044:	2000031d 	.word	0x2000031d
20000048:	2000031f 	.word	0x2000031f
2000004c:	20000321 	.word	0x20000321
20000050:	20000323 	.word	0x20000323
20000054:	20000325 	.word	0x20000325
20000058:	20000327 	.word	0x20000327
2000005c:	20000329 	.word	0x20000329
20000060:	2000032b 	.word	0x2000032b
20000064:	2000032d 	.word	0x2000032d
20000068:	2000032f 	.word	0x2000032f
2000006c:	20000331 	.word	0x20000331
20000070:	200013cd 	.word	0x200013cd
20000074:	200013f9 	.word	0x200013f9
20000078:	20000337 	.word	0x20000337
2000007c:	20000339 	.word	0x20000339
20000080:	2000033b 	.word	0x2000033b
20000084:	2000033d 	.word	0x2000033d
20000088:	2000033f 	.word	0x2000033f
2000008c:	20000341 	.word	0x20000341
20000090:	20000343 	.word	0x20000343
20000094:	20000345 	.word	0x20000345
20000098:	20000347 	.word	0x20000347
2000009c:	20000349 	.word	0x20000349
200000a0:	2000034b 	.word	0x2000034b
	...
200000bc:	2000034d 	.word	0x2000034d
200000c0:	2000034f 	.word	0x2000034f
200000c4:	20000351 	.word	0x20000351
200000c8:	20000353 	.word	0x20000353
200000cc:	20000355 	.word	0x20000355
200000d0:	20000357 	.word	0x20000357
200000d4:	20000359 	.word	0x20000359
200000d8:	2000035b 	.word	0x2000035b
200000dc:	2000035d 	.word	0x2000035d
200000e0:	2000035f 	.word	0x2000035f
200000e4:	20000361 	.word	0x20000361
200000e8:	20000363 	.word	0x20000363
200000ec:	20000365 	.word	0x20000365
200000f0:	20000367 	.word	0x20000367
200000f4:	20000369 	.word	0x20000369
200000f8:	2000036b 	.word	0x2000036b
200000fc:	2000036d 	.word	0x2000036d
20000100:	2000036f 	.word	0x2000036f
20000104:	20000371 	.word	0x20000371
20000108:	20000373 	.word	0x20000373
2000010c:	20000375 	.word	0x20000375
20000110:	20000377 	.word	0x20000377
20000114:	20000379 	.word	0x20000379
20000118:	2000037b 	.word	0x2000037b
2000011c:	2000037d 	.word	0x2000037d
20000120:	2000037f 	.word	0x2000037f
20000124:	20000381 	.word	0x20000381
20000128:	20000383 	.word	0x20000383
2000012c:	20000385 	.word	0x20000385
20000130:	20000387 	.word	0x20000387
20000134:	20000389 	.word	0x20000389
20000138:	2000038b 	.word	0x2000038b
2000013c:	2000038d 	.word	0x2000038d
20000140:	2000038f 	.word	0x2000038f
20000144:	20000391 	.word	0x20000391
20000148:	20000393 	.word	0x20000393
2000014c:	20000395 	.word	0x20000395
20000150:	20000397 	.word	0x20000397
20000154:	20000399 	.word	0x20000399
20000158:	2000039b 	.word	0x2000039b
2000015c:	2000039d 	.word	0x2000039d
20000160:	2000039f 	.word	0x2000039f
20000164:	200003a1 	.word	0x200003a1
20000168:	200003a3 	.word	0x200003a3
2000016c:	200003a5 	.word	0x200003a5
20000170:	200003a7 	.word	0x200003a7
20000174:	200003a9 	.word	0x200003a9
20000178:	200003ab 	.word	0x200003ab
2000017c:	200003ad 	.word	0x200003ad
20000180:	200003af 	.word	0x200003af
20000184:	200003b1 	.word	0x200003b1
20000188:	200003b3 	.word	0x200003b3
2000018c:	200003b5 	.word	0x200003b5
20000190:	200003b7 	.word	0x200003b7
20000194:	200003b9 	.word	0x200003b9
20000198:	200003bb 	.word	0x200003bb
2000019c:	200003bd 	.word	0x200003bd
200001a0:	200003bf 	.word	0x200003bf
200001a4:	200003c1 	.word	0x200003c1
200001a8:	200003c3 	.word	0x200003c3
200001ac:	200003c5 	.word	0x200003c5
200001b0:	200003c7 	.word	0x200003c7
200001b4:	200003c9 	.word	0x200003c9
200001b8:	200003cb 	.word	0x200003cb
200001bc:	200003cd 	.word	0x200003cd
200001c0:	200003cf 	.word	0x200003cf
200001c4:	200003d1 	.word	0x200003d1
200001c8:	200003d3 	.word	0x200003d3
200001cc:	200003d5 	.word	0x200003d5
200001d0:	200003d7 	.word	0x200003d7
200001d4:	200003d9 	.word	0x200003d9
200001d8:	200003db 	.word	0x200003db
200001dc:	200003dd 	.word	0x200003dd
200001e0:	200003df 	.word	0x200003df
200001e4:	200003e1 	.word	0x200003e1
200001e8:	200003e3 	.word	0x200003e3
200001ec:	200003e5 	.word	0x200003e5
200001f0:	200003e7 	.word	0x200003e7
200001f4:	200003e9 	.word	0x200003e9
200001f8:	200003eb 	.word	0x200003eb
200001fc:	200003ed 	.word	0x200003ed
20000200:	200003ef 	.word	0x200003ef
20000204:	200003f1 	.word	0x200003f1
20000208:	200003f3 	.word	0x200003f3
2000020c:	200003f5 	.word	0x200003f5
20000210:	200003f7 	.word	0x200003f7
20000214:	200003f9 	.word	0x200003f9
20000218:	20001739 	.word	0x20001739
2000021c:	20001761 	.word	0x20001761
20000220:	20001789 	.word	0x20001789
20000224:	200017b1 	.word	0x200017b1
20000228:	200017d9 	.word	0x200017d9
2000022c:	20001801 	.word	0x20001801
20000230:	20001829 	.word	0x20001829
20000234:	20001851 	.word	0x20001851
20000238:	20001879 	.word	0x20001879
2000023c:	200018a1 	.word	0x200018a1
20000240:	200018c9 	.word	0x200018c9
20000244:	200018f1 	.word	0x200018f1
20000248:	20001919 	.word	0x20001919
2000024c:	20001941 	.word	0x20001941
20000250:	20001969 	.word	0x20001969
20000254:	20001991 	.word	0x20001991
20000258:	200019b9 	.word	0x200019b9
2000025c:	200019e1 	.word	0x200019e1
20000260:	20001a09 	.word	0x20001a09
20000264:	20001a31 	.word	0x20001a31
20000268:	20001a59 	.word	0x20001a59
2000026c:	20001a81 	.word	0x20001a81
20000270:	20001aa9 	.word	0x20001aa9
20000274:	20001ad1 	.word	0x20001ad1
20000278:	20001af9 	.word	0x20001af9
2000027c:	20001b21 	.word	0x20001b21
20000280:	20001b49 	.word	0x20001b49
20000284:	20001b71 	.word	0x20001b71
20000288:	20001b99 	.word	0x20001b99
2000028c:	20001bc1 	.word	0x20001bc1
20000290:	20001be9 	.word	0x20001be9
20000294:	20001c11 	.word	0x20001c11

20000298 <Reset_Handler>:
20000298:	4868      	ldr	r0, [pc, #416]	; (2000043c <ACE_ADC2_FifoEmpty_IRQHandler+0x44>)
2000029a:	4780      	blx	r0
2000029c:	4868      	ldr	r0, [pc, #416]	; (20000440 <ACE_ADC2_FifoEmpty_IRQHandler+0x48>)
2000029e:	2800      	cmp	r0, #0
200002a0:	d10b      	bne.n	200002ba <copy_data>
200002a2:	4868      	ldr	r0, [pc, #416]	; (20000444 <ACE_ADC2_FifoEmpty_IRQHandler+0x4c>)
200002a4:	4968      	ldr	r1, [pc, #416]	; (20000448 <ACE_ADC2_FifoEmpty_IRQHandler+0x50>)
200002a6:	4a69      	ldr	r2, [pc, #420]	; (2000044c <ACE_ADC2_FifoEmpty_IRQHandler+0x54>)
200002a8:	4288      	cmp	r0, r1
200002aa:	d006      	beq.n	200002ba <copy_data>

200002ac <copy_code_loop>:
200002ac:	4291      	cmp	r1, r2
200002ae:	bf1c      	itt	ne
200002b0:	f850 3b04 	ldrne.w	r3, [r0], #4
200002b4:	f841 3b04 	strne.w	r3, [r1], #4
200002b8:	d1f8      	bne.n	200002ac <copy_code_loop>

200002ba <copy_data>:
200002ba:	4865      	ldr	r0, [pc, #404]	; (20000450 <ACE_ADC2_FifoEmpty_IRQHandler+0x58>)
200002bc:	4965      	ldr	r1, [pc, #404]	; (20000454 <ACE_ADC2_FifoEmpty_IRQHandler+0x5c>)
200002be:	4a66      	ldr	r2, [pc, #408]	; (20000458 <ACE_ADC2_FifoEmpty_IRQHandler+0x60>)
200002c0:	4288      	cmp	r0, r1
200002c2:	d006      	beq.n	200002d2 <clear_bss>

200002c4 <copy_data_loop>:
200002c4:	4291      	cmp	r1, r2
200002c6:	bf1c      	itt	ne
200002c8:	f850 3b04 	ldrne.w	r3, [r0], #4
200002cc:	f841 3b04 	strne.w	r3, [r1], #4
200002d0:	d1f8      	bne.n	200002c4 <copy_data_loop>

200002d2 <clear_bss>:
200002d2:	4862      	ldr	r0, [pc, #392]	; (2000045c <ACE_ADC2_FifoEmpty_IRQHandler+0x64>)
200002d4:	4962      	ldr	r1, [pc, #392]	; (20000460 <ACE_ADC2_FifoEmpty_IRQHandler+0x68>)
200002d6:	4a63      	ldr	r2, [pc, #396]	; (20000464 <ACE_ADC2_FifoEmpty_IRQHandler+0x6c>)

200002d8 <clear_bss_loop>:
200002d8:	4291      	cmp	r1, r2
200002da:	bf18      	it	ne
200002dc:	f841 0b04 	strne.w	r0, [r1], #4
200002e0:	d1fa      	bne.n	200002d8 <clear_bss_loop>
	...

200002f0 <call_glob_ctor>:
200002f0:	f8df 0174 	ldr.w	r0, [pc, #372]	; 20000468 <ACE_ADC2_FifoEmpty_IRQHandler+0x70>
200002f4:	f20f 0e03 	addw	lr, pc, #3
200002f8:	4700      	bx	r0

200002fa <branch_to_main>:
200002fa:	f04f 0000 	mov.w	r0, #0
200002fe:	f04f 0100 	mov.w	r1, #0
20000302:	f8df f168 	ldr.w	pc, [pc, #360]	; 2000046c <ACE_ADC2_FifoEmpty_IRQHandler+0x74>

20000306 <ExitLoop>:
20000306:	e7fe      	b.n	20000306 <ExitLoop>

20000308 <NMI_Handler>:
20000308:	e7fe      	b.n	20000308 <NMI_Handler>

2000030a <HardFault_Handler>:
2000030a:	e7fe      	b.n	2000030a <HardFault_Handler>

2000030c <MemManage_Handler>:
2000030c:	e7fe      	b.n	2000030c <MemManage_Handler>

2000030e <BusFault_Handler>:
2000030e:	e7fe      	b.n	2000030e <BusFault_Handler>

20000310 <UsageFault_Handler>:
20000310:	e7fe      	b.n	20000310 <UsageFault_Handler>

20000312 <SVC_Handler>:
20000312:	e7fe      	b.n	20000312 <SVC_Handler>

20000314 <DebugMon_Handler>:
20000314:	e7fe      	b.n	20000314 <DebugMon_Handler>

20000316 <PendSV_Handler>:
20000316:	e7fe      	b.n	20000316 <PendSV_Handler>

20000318 <SysTick_Handler>:
20000318:	e7fe      	b.n	20000318 <SysTick_Handler>

2000031a <WdogWakeup_IRQHandler>:
2000031a:	e7fe      	b.n	2000031a <WdogWakeup_IRQHandler>

2000031c <BrownOut_1_5V_IRQHandler>:
2000031c:	e7fe      	b.n	2000031c <BrownOut_1_5V_IRQHandler>

2000031e <BrownOut_3_3V_IRQHandler>:
2000031e:	e7fe      	b.n	2000031e <BrownOut_3_3V_IRQHandler>

20000320 <RTC_Match_IRQHandler>:
20000320:	e7fe      	b.n	20000320 <RTC_Match_IRQHandler>

20000322 <RTCIF_Pub_IRQHandler>:
20000322:	e7fe      	b.n	20000322 <RTCIF_Pub_IRQHandler>

20000324 <EthernetMAC_IRQHandler>:
20000324:	e7fe      	b.n	20000324 <EthernetMAC_IRQHandler>

20000326 <IAP_IRQHandler>:
20000326:	e7fe      	b.n	20000326 <IAP_IRQHandler>

20000328 <ENVM0_IRQHandler>:
20000328:	e7fe      	b.n	20000328 <ENVM0_IRQHandler>

2000032a <ENVM1_IRQHandler>:
2000032a:	e7fe      	b.n	2000032a <ENVM1_IRQHandler>

2000032c <DMA_IRQHandler>:
2000032c:	e7fe      	b.n	2000032c <DMA_IRQHandler>

2000032e <UART0_IRQHandler>:
2000032e:	e7fe      	b.n	2000032e <UART0_IRQHandler>

20000330 <UART1_IRQHandler>:
20000330:	e7fe      	b.n	20000330 <UART1_IRQHandler>
20000332:	e7fe      	b.n	20000332 <UART1_IRQHandler+0x2>
20000334:	e7fe      	b.n	20000334 <UART1_IRQHandler+0x4>

20000336 <I2C0_IRQHandler>:
20000336:	e7fe      	b.n	20000336 <I2C0_IRQHandler>

20000338 <I2C0_SMBAlert_IRQHandler>:
20000338:	e7fe      	b.n	20000338 <I2C0_SMBAlert_IRQHandler>

2000033a <I2C0_SMBus_IRQHandler>:
2000033a:	e7fe      	b.n	2000033a <I2C0_SMBus_IRQHandler>

2000033c <I2C1_IRQHandler>:
2000033c:	e7fe      	b.n	2000033c <I2C1_IRQHandler>

2000033e <I2C1_SMBAlert_IRQHandler>:
2000033e:	e7fe      	b.n	2000033e <I2C1_SMBAlert_IRQHandler>

20000340 <I2C1_SMBus_IRQHandler>:
20000340:	e7fe      	b.n	20000340 <I2C1_SMBus_IRQHandler>

20000342 <Timer1_IRQHandler>:
20000342:	e7fe      	b.n	20000342 <Timer1_IRQHandler>

20000344 <Timer2_IRQHandler>:
20000344:	e7fe      	b.n	20000344 <Timer2_IRQHandler>

20000346 <PLL_Lock_IRQHandler>:
20000346:	e7fe      	b.n	20000346 <PLL_Lock_IRQHandler>

20000348 <PLL_LockLost_IRQHandler>:
20000348:	e7fe      	b.n	20000348 <PLL_LockLost_IRQHandler>

2000034a <CommError_IRQHandler>:
2000034a:	e7fe      	b.n	2000034a <CommError_IRQHandler>

2000034c <Fabric_IRQHandler>:
2000034c:	e7fe      	b.n	2000034c <Fabric_IRQHandler>

2000034e <GPIO0_IRQHandler>:
2000034e:	e7fe      	b.n	2000034e <GPIO0_IRQHandler>

20000350 <GPIO1_IRQHandler>:
20000350:	e7fe      	b.n	20000350 <GPIO1_IRQHandler>

20000352 <GPIO2_IRQHandler>:
20000352:	e7fe      	b.n	20000352 <GPIO2_IRQHandler>

20000354 <GPIO3_IRQHandler>:
20000354:	e7fe      	b.n	20000354 <GPIO3_IRQHandler>

20000356 <GPIO4_IRQHandler>:
20000356:	e7fe      	b.n	20000356 <GPIO4_IRQHandler>

20000358 <GPIO5_IRQHandler>:
20000358:	e7fe      	b.n	20000358 <GPIO5_IRQHandler>

2000035a <GPIO6_IRQHandler>:
2000035a:	e7fe      	b.n	2000035a <GPIO6_IRQHandler>

2000035c <GPIO7_IRQHandler>:
2000035c:	e7fe      	b.n	2000035c <GPIO7_IRQHandler>

2000035e <GPIO8_IRQHandler>:
2000035e:	e7fe      	b.n	2000035e <GPIO8_IRQHandler>

20000360 <GPIO9_IRQHandler>:
20000360:	e7fe      	b.n	20000360 <GPIO9_IRQHandler>

20000362 <GPIO10_IRQHandler>:
20000362:	e7fe      	b.n	20000362 <GPIO10_IRQHandler>

20000364 <GPIO11_IRQHandler>:
20000364:	e7fe      	b.n	20000364 <GPIO11_IRQHandler>

20000366 <GPIO12_IRQHandler>:
20000366:	e7fe      	b.n	20000366 <GPIO12_IRQHandler>

20000368 <GPIO13_IRQHandler>:
20000368:	e7fe      	b.n	20000368 <GPIO13_IRQHandler>

2000036a <GPIO14_IRQHandler>:
2000036a:	e7fe      	b.n	2000036a <GPIO14_IRQHandler>

2000036c <GPIO15_IRQHandler>:
2000036c:	e7fe      	b.n	2000036c <GPIO15_IRQHandler>

2000036e <GPIO16_IRQHandler>:
2000036e:	e7fe      	b.n	2000036e <GPIO16_IRQHandler>

20000370 <GPIO17_IRQHandler>:
20000370:	e7fe      	b.n	20000370 <GPIO17_IRQHandler>

20000372 <GPIO18_IRQHandler>:
20000372:	e7fe      	b.n	20000372 <GPIO18_IRQHandler>

20000374 <GPIO19_IRQHandler>:
20000374:	e7fe      	b.n	20000374 <GPIO19_IRQHandler>

20000376 <GPIO20_IRQHandler>:
20000376:	e7fe      	b.n	20000376 <GPIO20_IRQHandler>

20000378 <GPIO21_IRQHandler>:
20000378:	e7fe      	b.n	20000378 <GPIO21_IRQHandler>

2000037a <GPIO22_IRQHandler>:
2000037a:	e7fe      	b.n	2000037a <GPIO22_IRQHandler>

2000037c <GPIO23_IRQHandler>:
2000037c:	e7fe      	b.n	2000037c <GPIO23_IRQHandler>

2000037e <GPIO24_IRQHandler>:
2000037e:	e7fe      	b.n	2000037e <GPIO24_IRQHandler>

20000380 <GPIO25_IRQHandler>:
20000380:	e7fe      	b.n	20000380 <GPIO25_IRQHandler>

20000382 <GPIO26_IRQHandler>:
20000382:	e7fe      	b.n	20000382 <GPIO26_IRQHandler>

20000384 <GPIO27_IRQHandler>:
20000384:	e7fe      	b.n	20000384 <GPIO27_IRQHandler>

20000386 <GPIO28_IRQHandler>:
20000386:	e7fe      	b.n	20000386 <GPIO28_IRQHandler>

20000388 <GPIO29_IRQHandler>:
20000388:	e7fe      	b.n	20000388 <GPIO29_IRQHandler>

2000038a <GPIO30_IRQHandler>:
2000038a:	e7fe      	b.n	2000038a <GPIO30_IRQHandler>

2000038c <GPIO31_IRQHandler>:
2000038c:	e7fe      	b.n	2000038c <GPIO31_IRQHandler>

2000038e <ACE_PC0_Flag0_IRQHandler>:
2000038e:	e7fe      	b.n	2000038e <ACE_PC0_Flag0_IRQHandler>

20000390 <ACE_PC0_Flag1_IRQHandler>:
20000390:	e7fe      	b.n	20000390 <ACE_PC0_Flag1_IRQHandler>

20000392 <ACE_PC0_Flag2_IRQHandler>:
20000392:	e7fe      	b.n	20000392 <ACE_PC0_Flag2_IRQHandler>

20000394 <ACE_PC0_Flag3_IRQHandler>:
20000394:	e7fe      	b.n	20000394 <ACE_PC0_Flag3_IRQHandler>

20000396 <ACE_PC1_Flag0_IRQHandler>:
20000396:	e7fe      	b.n	20000396 <ACE_PC1_Flag0_IRQHandler>

20000398 <ACE_PC1_Flag1_IRQHandler>:
20000398:	e7fe      	b.n	20000398 <ACE_PC1_Flag1_IRQHandler>

2000039a <ACE_PC1_Flag2_IRQHandler>:
2000039a:	e7fe      	b.n	2000039a <ACE_PC1_Flag2_IRQHandler>

2000039c <ACE_PC1_Flag3_IRQHandler>:
2000039c:	e7fe      	b.n	2000039c <ACE_PC1_Flag3_IRQHandler>

2000039e <ACE_PC2_Flag0_IRQHandler>:
2000039e:	e7fe      	b.n	2000039e <ACE_PC2_Flag0_IRQHandler>

200003a0 <ACE_PC2_Flag1_IRQHandler>:
200003a0:	e7fe      	b.n	200003a0 <ACE_PC2_Flag1_IRQHandler>

200003a2 <ACE_PC2_Flag2_IRQHandler>:
200003a2:	e7fe      	b.n	200003a2 <ACE_PC2_Flag2_IRQHandler>

200003a4 <ACE_PC2_Flag3_IRQHandler>:
200003a4:	e7fe      	b.n	200003a4 <ACE_PC2_Flag3_IRQHandler>

200003a6 <ACE_ADC0_DataValid_IRQHandler>:
200003a6:	e7fe      	b.n	200003a6 <ACE_ADC0_DataValid_IRQHandler>

200003a8 <ACE_ADC1_DataValid_IRQHandler>:
200003a8:	e7fe      	b.n	200003a8 <ACE_ADC1_DataValid_IRQHandler>

200003aa <ACE_ADC2_DataValid_IRQHandler>:
200003aa:	e7fe      	b.n	200003aa <ACE_ADC2_DataValid_IRQHandler>

200003ac <ACE_ADC0_CalDone_IRQHandler>:
200003ac:	e7fe      	b.n	200003ac <ACE_ADC0_CalDone_IRQHandler>

200003ae <ACE_ADC1_CalDone_IRQHandler>:
200003ae:	e7fe      	b.n	200003ae <ACE_ADC1_CalDone_IRQHandler>

200003b0 <ACE_ADC2_CalDone_IRQHandler>:
200003b0:	e7fe      	b.n	200003b0 <ACE_ADC2_CalDone_IRQHandler>

200003b2 <ACE_ADC0_CalStart_IRQHandler>:
200003b2:	e7fe      	b.n	200003b2 <ACE_ADC0_CalStart_IRQHandler>

200003b4 <ACE_ADC1_CalStart_IRQHandler>:
200003b4:	e7fe      	b.n	200003b4 <ACE_ADC1_CalStart_IRQHandler>

200003b6 <ACE_ADC2_CalStart_IRQHandler>:
200003b6:	e7fe      	b.n	200003b6 <ACE_ADC2_CalStart_IRQHandler>

200003b8 <ACE_Comp0_Fall_IRQHandler>:
200003b8:	e7fe      	b.n	200003b8 <ACE_Comp0_Fall_IRQHandler>

200003ba <ACE_Comp1_Fall_IRQHandler>:
200003ba:	e7fe      	b.n	200003ba <ACE_Comp1_Fall_IRQHandler>

200003bc <ACE_Comp2_Fall_IRQHandler>:
200003bc:	e7fe      	b.n	200003bc <ACE_Comp2_Fall_IRQHandler>

200003be <ACE_Comp3_Fall_IRQHandler>:
200003be:	e7fe      	b.n	200003be <ACE_Comp3_Fall_IRQHandler>

200003c0 <ACE_Comp4_Fall_IRQHandler>:
200003c0:	e7fe      	b.n	200003c0 <ACE_Comp4_Fall_IRQHandler>

200003c2 <ACE_Comp5_Fall_IRQHandler>:
200003c2:	e7fe      	b.n	200003c2 <ACE_Comp5_Fall_IRQHandler>

200003c4 <ACE_Comp6_Fall_IRQHandler>:
200003c4:	e7fe      	b.n	200003c4 <ACE_Comp6_Fall_IRQHandler>

200003c6 <ACE_Comp7_Fall_IRQHandler>:
200003c6:	e7fe      	b.n	200003c6 <ACE_Comp7_Fall_IRQHandler>

200003c8 <ACE_Comp8_Fall_IRQHandler>:
200003c8:	e7fe      	b.n	200003c8 <ACE_Comp8_Fall_IRQHandler>

200003ca <ACE_Comp9_Fall_IRQHandler>:
200003ca:	e7fe      	b.n	200003ca <ACE_Comp9_Fall_IRQHandler>

200003cc <ACE_Comp10_Fall_IRQHandler>:
200003cc:	e7fe      	b.n	200003cc <ACE_Comp10_Fall_IRQHandler>

200003ce <ACE_Comp11_Fall_IRQHandler>:
200003ce:	e7fe      	b.n	200003ce <ACE_Comp11_Fall_IRQHandler>

200003d0 <ACE_Comp0_Rise_IRQHandler>:
200003d0:	e7fe      	b.n	200003d0 <ACE_Comp0_Rise_IRQHandler>

200003d2 <ACE_Comp1_Rise_IRQHandler>:
200003d2:	e7fe      	b.n	200003d2 <ACE_Comp1_Rise_IRQHandler>

200003d4 <ACE_Comp2_Rise_IRQHandler>:
200003d4:	e7fe      	b.n	200003d4 <ACE_Comp2_Rise_IRQHandler>

200003d6 <ACE_Comp3_Rise_IRQHandler>:
200003d6:	e7fe      	b.n	200003d6 <ACE_Comp3_Rise_IRQHandler>

200003d8 <ACE_Comp4_Rise_IRQHandler>:
200003d8:	e7fe      	b.n	200003d8 <ACE_Comp4_Rise_IRQHandler>

200003da <ACE_Comp5_Rise_IRQHandler>:
200003da:	e7fe      	b.n	200003da <ACE_Comp5_Rise_IRQHandler>

200003dc <ACE_Comp6_Rise_IRQHandler>:
200003dc:	e7fe      	b.n	200003dc <ACE_Comp6_Rise_IRQHandler>

200003de <ACE_Comp7_Rise_IRQHandler>:
200003de:	e7fe      	b.n	200003de <ACE_Comp7_Rise_IRQHandler>

200003e0 <ACE_Comp8_Rise_IRQHandler>:
200003e0:	e7fe      	b.n	200003e0 <ACE_Comp8_Rise_IRQHandler>

200003e2 <ACE_Comp9_Rise_IRQHandler>:
200003e2:	e7fe      	b.n	200003e2 <ACE_Comp9_Rise_IRQHandler>

200003e4 <ACE_Comp10_Rise_IRQHandler>:
200003e4:	e7fe      	b.n	200003e4 <ACE_Comp10_Rise_IRQHandler>

200003e6 <ACE_Comp11_Rise_IRQHandler>:
200003e6:	e7fe      	b.n	200003e6 <ACE_Comp11_Rise_IRQHandler>

200003e8 <ACE_ADC0_FifoFull_IRQHandler>:
200003e8:	e7fe      	b.n	200003e8 <ACE_ADC0_FifoFull_IRQHandler>

200003ea <ACE_ADC0_FifoAFull_IRQHandler>:
200003ea:	e7fe      	b.n	200003ea <ACE_ADC0_FifoAFull_IRQHandler>

200003ec <ACE_ADC0_FifoEmpty_IRQHandler>:
200003ec:	e7fe      	b.n	200003ec <ACE_ADC0_FifoEmpty_IRQHandler>

200003ee <ACE_ADC1_FifoFull_IRQHandler>:
200003ee:	e7fe      	b.n	200003ee <ACE_ADC1_FifoFull_IRQHandler>

200003f0 <ACE_ADC1_FifoAFull_IRQHandler>:
200003f0:	e7fe      	b.n	200003f0 <ACE_ADC1_FifoAFull_IRQHandler>

200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>:
200003f2:	e7fe      	b.n	200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>

200003f4 <ACE_ADC2_FifoFull_IRQHandler>:
200003f4:	e7fe      	b.n	200003f4 <ACE_ADC2_FifoFull_IRQHandler>

200003f6 <ACE_ADC2_FifoAFull_IRQHandler>:
200003f6:	e7fe      	b.n	200003f6 <ACE_ADC2_FifoAFull_IRQHandler>

200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>:
200003f8:	e7fe      	b.n	200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>
200003fa:	e7fe      	b.n	200003fa <ACE_ADC2_FifoEmpty_IRQHandler+0x2>
200003fc:	e7fe      	b.n	200003fc <ACE_ADC2_FifoEmpty_IRQHandler+0x4>
200003fe:	e7fe      	b.n	200003fe <ACE_ADC2_FifoEmpty_IRQHandler+0x6>
20000400:	e7fe      	b.n	20000400 <ACE_ADC2_FifoEmpty_IRQHandler+0x8>
20000402:	e7fe      	b.n	20000402 <ACE_ADC2_FifoEmpty_IRQHandler+0xa>
20000404:	e7fe      	b.n	20000404 <ACE_ADC2_FifoEmpty_IRQHandler+0xc>
20000406:	e7fe      	b.n	20000406 <ACE_ADC2_FifoEmpty_IRQHandler+0xe>
20000408:	e7fe      	b.n	20000408 <ACE_ADC2_FifoEmpty_IRQHandler+0x10>
2000040a:	e7fe      	b.n	2000040a <ACE_ADC2_FifoEmpty_IRQHandler+0x12>
2000040c:	e7fe      	b.n	2000040c <ACE_ADC2_FifoEmpty_IRQHandler+0x14>
2000040e:	e7fe      	b.n	2000040e <ACE_ADC2_FifoEmpty_IRQHandler+0x16>
20000410:	e7fe      	b.n	20000410 <ACE_ADC2_FifoEmpty_IRQHandler+0x18>
20000412:	e7fe      	b.n	20000412 <ACE_ADC2_FifoEmpty_IRQHandler+0x1a>
20000414:	e7fe      	b.n	20000414 <ACE_ADC2_FifoEmpty_IRQHandler+0x1c>
20000416:	e7fe      	b.n	20000416 <ACE_ADC2_FifoEmpty_IRQHandler+0x1e>
20000418:	e7fe      	b.n	20000418 <ACE_ADC2_FifoEmpty_IRQHandler+0x20>
2000041a:	e7fe      	b.n	2000041a <ACE_ADC2_FifoEmpty_IRQHandler+0x22>
2000041c:	e7fe      	b.n	2000041c <ACE_ADC2_FifoEmpty_IRQHandler+0x24>
2000041e:	e7fe      	b.n	2000041e <ACE_ADC2_FifoEmpty_IRQHandler+0x26>
20000420:	e7fe      	b.n	20000420 <ACE_ADC2_FifoEmpty_IRQHandler+0x28>
20000422:	e7fe      	b.n	20000422 <ACE_ADC2_FifoEmpty_IRQHandler+0x2a>
20000424:	e7fe      	b.n	20000424 <ACE_ADC2_FifoEmpty_IRQHandler+0x2c>
20000426:	e7fe      	b.n	20000426 <ACE_ADC2_FifoEmpty_IRQHandler+0x2e>
20000428:	e7fe      	b.n	20000428 <ACE_ADC2_FifoEmpty_IRQHandler+0x30>
2000042a:	e7fe      	b.n	2000042a <ACE_ADC2_FifoEmpty_IRQHandler+0x32>
2000042c:	e7fe      	b.n	2000042c <ACE_ADC2_FifoEmpty_IRQHandler+0x34>
2000042e:	e7fe      	b.n	2000042e <ACE_ADC2_FifoEmpty_IRQHandler+0x36>
20000430:	e7fe      	b.n	20000430 <ACE_ADC2_FifoEmpty_IRQHandler+0x38>
20000432:	e7fe      	b.n	20000432 <ACE_ADC2_FifoEmpty_IRQHandler+0x3a>
20000434:	e7fe      	b.n	20000434 <ACE_ADC2_FifoEmpty_IRQHandler+0x3c>
20000436:	e7fe      	b.n	20000436 <ACE_ADC2_FifoEmpty_IRQHandler+0x3e>
20000438:	e7fe      	b.n	20000438 <ACE_ADC2_FifoEmpty_IRQHandler+0x40>
2000043a:	0000      	.short	0x0000
2000043c:	2000151d 	.word	0x2000151d
20000440:	00000000 	.word	0x00000000
20000444:	20000000 	.word	0x20000000
20000448:	20000000 	.word	0x20000000
2000044c:	200026ac 	.word	0x200026ac
20000450:	200026ac 	.word	0x200026ac
20000454:	200026ac 	.word	0x200026ac
20000458:	200026e0 	.word	0x200026e0
2000045c:	00000000 	.word	0x00000000
20000460:	200026e0 	.word	0x200026e0
20000464:	20002800 	.word	0x20002800
20000468:	2000241d 	.word	0x2000241d
2000046c:	200004a1 	.word	0x200004a1

20000470 <__do_global_dtors_aux>:
20000470:	f242 63e0 	movw	r3, #9952	; 0x26e0
20000474:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000478:	781a      	ldrb	r2, [r3, #0]
2000047a:	b90a      	cbnz	r2, 20000480 <__do_global_dtors_aux+0x10>
2000047c:	2001      	movs	r0, #1
2000047e:	7018      	strb	r0, [r3, #0]
20000480:	4770      	bx	lr
20000482:	bf00      	nop

20000484 <frame_dummy>:
20000484:	f242 60ac 	movw	r0, #9900	; 0x26ac
20000488:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000048c:	b508      	push	{r3, lr}
2000048e:	6803      	ldr	r3, [r0, #0]
20000490:	b12b      	cbz	r3, 2000049e <frame_dummy+0x1a>
20000492:	f240 0300 	movw	r3, #0
20000496:	f2c0 0300 	movt	r3, #0
2000049a:	b103      	cbz	r3, 2000049e <frame_dummy+0x1a>
2000049c:	4798      	blx	r3
2000049e:	bd08      	pop	{r3, pc}

200004a0 <main>:
#include "touchscreen.h"

int main()
{
200004a0:	b580      	push	{r7, lr}
200004a2:	af00      	add	r7, sp, #0
	touchscreen_begin();
200004a4:	f000 f82e 	bl	20000504 <touchscreen_begin>

	while( 1 )
	{
		drawFillScreen(ILI9341_BLUE);
200004a8:	f04f 001f 	mov.w	r0, #31
200004ac:	f000 f8be 	bl	2000062c <drawFillScreen>
	}
200004b0:	e7fa      	b.n	200004a8 <main+0x8>
200004b2:	bf00      	nop

200004b4 <MSS_TIM1_start>:
  MSS_TIM1_load_immediate() or MSS_TIM1_load_background() functions. 
  Note: The MSS_TIM1_start() function is also used to resume the down-counter
        if previously stopped using MSS_TIM1_stop() function.
 */
static __INLINE void MSS_TIM1_start( void )
{
200004b4:	b480      	push	{r7}
200004b6:	af00      	add	r7, sp, #0
    TIMER_BITBAND->TIM1ENABLE = 1U;    /* enable timer */
200004b8:	f240 0300 	movw	r3, #0
200004bc:	f2c4 230a 	movt	r3, #16906	; 0x420a
200004c0:	f04f 0201 	mov.w	r2, #1
200004c4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
200004c8:	46bd      	mov	sp, r7
200004ca:	bc80      	pop	{r7}
200004cc:	4770      	bx	lr
200004ce:	bf00      	nop

200004d0 <MSS_TIM1_stop>:
/*-------------------------------------------------------------------------*//**
  The MSS_TIM1_stop() function disables Timer 1 and stops its down-counter
  decrementing.
 */
static __INLINE void MSS_TIM1_stop( void )
{
200004d0:	b480      	push	{r7}
200004d2:	af00      	add	r7, sp, #0
    TIMER_BITBAND->TIM1ENABLE = 0U;    /* disable timer */
200004d4:	f240 0300 	movw	r3, #0
200004d8:	f2c4 230a 	movt	r3, #16906	; 0x420a
200004dc:	f04f 0200 	mov.w	r2, #0
200004e0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
200004e4:	46bd      	mov	sp, r7
200004e6:	bc80      	pop	{r7}
200004e8:	4770      	bx	lr
200004ea:	bf00      	nop

200004ec <MSS_TIM1_get_current_value>:
  
  @return
    This function returns the 32-bits current value of the Timer 1 down-counter.
 */
static __INLINE uint32_t MSS_TIM1_get_current_value( void )
{
200004ec:	b480      	push	{r7}
200004ee:	af00      	add	r7, sp, #0
    return TIMER->TIM1_VAL;
200004f0:	f245 0300 	movw	r3, #20480	; 0x5000
200004f4:	f2c4 0300 	movt	r3, #16384	; 0x4000
200004f8:	681b      	ldr	r3, [r3, #0]
}
200004fa:	4618      	mov	r0, r3
200004fc:	46bd      	mov	sp, r7
200004fe:	bc80      	pop	{r7}
20000500:	4770      	bx	lr
20000502:	bf00      	nop

20000504 <touchscreen_begin>:
  ILI9341_SLPOUT  , 0x80,                // Exit Sleep
  ILI9341_DISPON  , 0x80,                // Display on
  0x00                                   // End of list
};

void touchscreen_begin(){
20000504:	b580      	push	{r7, lr}
20000506:	b082      	sub	sp, #8
20000508:	af00      	add	r7, sp, #0

	uint8_t cmd, x, numArgs;
	const uint8_t *addr = initcmd;
2000050a:	f242 5340 	movw	r3, #9536	; 0x2540
2000050e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000512:	603b      	str	r3, [r7, #0]

	MSS_SPI_init(&g_mss_spi1);
20000514:	f242 60f4 	movw	r0, #9972	; 0x26f4
20000518:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000051c:	f000 fa1c 	bl	20000958 <MSS_SPI_init>
	MSS_GPIO_init();
20000520:	f000 ff9e 	bl	20001460 <MSS_GPIO_init>
	ACE_init();
20000524:	f000 fff2 	bl	2000150c <ACE_init>

	//ace_y = ACE_get_channel_handle((const uint8_t*)"ADCDirectInput_0");
	//ace_x = ACE_get_channel_handle((const uint8_t*)"ADCDirectInput_1");
	
	configureSPI(8);
20000528:	f04f 0008 	mov.w	r0, #8
2000052c:	f000 f968 	bl	20000800 <configureSPI>

	sendCommandOnly(ILI9341_SWRESET);
20000530:	f04f 0001 	mov.w	r0, #1
20000534:	f000 f950 	bl	200007d8 <sendCommandOnly>
	delay(150);
20000538:	f04f 0096 	mov.w	r0, #150	; 0x96
2000053c:	f000 f918 	bl	20000770 <delay>
	while((cmd = read_byte(addr++))>0){
20000540:	e01d      	b.n	2000057e <touchscreen_begin+0x7a>
		x = read_byte(addr++);
20000542:	683b      	ldr	r3, [r7, #0]
20000544:	781a      	ldrb	r2, [r3, #0]
20000546:	71ba      	strb	r2, [r7, #6]
20000548:	f103 0301 	add.w	r3, r3, #1
2000054c:	603b      	str	r3, [r7, #0]
		numArgs = x & 0x7F;
2000054e:	79bb      	ldrb	r3, [r7, #6]
20000550:	f003 037f 	and.w	r3, r3, #127	; 0x7f
20000554:	71fb      	strb	r3, [r7, #7]
		sendCommand(cmd, &addr, numArgs);
20000556:	463a      	mov	r2, r7
20000558:	7979      	ldrb	r1, [r7, #5]
2000055a:	79fb      	ldrb	r3, [r7, #7]
2000055c:	4608      	mov	r0, r1
2000055e:	4611      	mov	r1, r2
20000560:	461a      	mov	r2, r3
20000562:	f000 f8a7 	bl	200006b4 <sendCommand>
		addr += numArgs;
20000566:	683a      	ldr	r2, [r7, #0]
20000568:	79fb      	ldrb	r3, [r7, #7]
2000056a:	4413      	add	r3, r2
2000056c:	603b      	str	r3, [r7, #0]
		if(x & 0x80){
2000056e:	79bb      	ldrb	r3, [r7, #6]
20000570:	b25b      	sxtb	r3, r3
20000572:	2b00      	cmp	r3, #0
20000574:	da03      	bge.n	2000057e <touchscreen_begin+0x7a>
			delay(150);
20000576:	f04f 0096 	mov.w	r0, #150	; 0x96
2000057a:	f000 f8f9 	bl	20000770 <delay>
	
	configureSPI(8);

	sendCommandOnly(ILI9341_SWRESET);
	delay(150);
	while((cmd = read_byte(addr++))>0){
2000057e:	683b      	ldr	r3, [r7, #0]
20000580:	781a      	ldrb	r2, [r3, #0]
20000582:	717a      	strb	r2, [r7, #5]
20000584:	797a      	ldrb	r2, [r7, #5]
20000586:	2a00      	cmp	r2, #0
20000588:	bf0c      	ite	eq
2000058a:	2200      	moveq	r2, #0
2000058c:	2201      	movne	r2, #1
2000058e:	b2d2      	uxtb	r2, r2
20000590:	f103 0301 	add.w	r3, r3, #1
20000594:	603b      	str	r3, [r7, #0]
20000596:	2a00      	cmp	r2, #0
20000598:	d1d3      	bne.n	20000542 <touchscreen_begin+0x3e>
		addr += numArgs;
		if(x & 0x80){
			delay(150);
		}
	}
}
2000059a:	f107 0708 	add.w	r7, r7, #8
2000059e:	46bd      	mov	sp, r7
200005a0:	bd80      	pop	{r7, pc}
200005a2:	bf00      	nop

200005a4 <drawRectangle>:
	setAddr(x, y, x, y);
	sendCommand16(ILI9341_RAMWR, color);
}


void drawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color){
200005a4:	b580      	push	{r7, lr}
200005a6:	b082      	sub	sp, #8
200005a8:	af00      	add	r7, sp, #0
200005aa:	80f8      	strh	r0, [r7, #6]
200005ac:	80b9      	strh	r1, [r7, #4]
200005ae:	807a      	strh	r2, [r7, #2]
200005b0:	803b      	strh	r3, [r7, #0]
	setAddr(x, y, x+w-1, y+h-1);
200005b2:	88fa      	ldrh	r2, [r7, #6]
200005b4:	887b      	ldrh	r3, [r7, #2]
200005b6:	4413      	add	r3, r2
200005b8:	b29b      	uxth	r3, r3
200005ba:	f103 33ff 	add.w	r3, r3, #4294967295
200005be:	b29a      	uxth	r2, r3
200005c0:	88b9      	ldrh	r1, [r7, #4]
200005c2:	883b      	ldrh	r3, [r7, #0]
200005c4:	440b      	add	r3, r1
200005c6:	b29b      	uxth	r3, r3
200005c8:	f103 33ff 	add.w	r3, r3, #4294967295
200005cc:	b29b      	uxth	r3, r3
200005ce:	88f8      	ldrh	r0, [r7, #6]
200005d0:	88b9      	ldrh	r1, [r7, #4]
200005d2:	f000 f841 	bl	20000658 <setAddr>
	sendCommandOnly(ILI9341_RAMWR);
200005d6:	f04f 002c 	mov.w	r0, #44	; 0x2c
200005da:	f000 f8fd 	bl	200007d8 <sendCommandOnly>

	for(y=h; y>0; y--){
200005de:	883b      	ldrh	r3, [r7, #0]
200005e0:	80bb      	strh	r3, [r7, #4]
200005e2:	e01b      	b.n	2000061c <drawRectangle+0x78>
		for(x = w; x>0; x--){
200005e4:	887b      	ldrh	r3, [r7, #2]
200005e6:	80fb      	strh	r3, [r7, #6]
200005e8:	e00a      	b.n	20000600 <drawRectangle+0x5c>
			sendData(&color, 16);
200005ea:	f107 0310 	add.w	r3, r7, #16
200005ee:	4618      	mov	r0, r3
200005f0:	f04f 0110 	mov.w	r1, #16
200005f4:	f000 f890 	bl	20000718 <sendData>
void drawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color){
	setAddr(x, y, x+w-1, y+h-1);
	sendCommandOnly(ILI9341_RAMWR);

	for(y=h; y>0; y--){
		for(x = w; x>0; x--){
200005f8:	88fb      	ldrh	r3, [r7, #6]
200005fa:	f103 33ff 	add.w	r3, r3, #4294967295
200005fe:	80fb      	strh	r3, [r7, #6]
20000600:	88fb      	ldrh	r3, [r7, #6]
20000602:	2b00      	cmp	r3, #0
20000604:	d1f1      	bne.n	200005ea <drawRectangle+0x46>
			sendData(&color, 16);
		}
		sendData(&color, 16);
20000606:	f107 0310 	add.w	r3, r7, #16
2000060a:	4618      	mov	r0, r3
2000060c:	f04f 0110 	mov.w	r1, #16
20000610:	f000 f882 	bl	20000718 <sendData>

void drawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color){
	setAddr(x, y, x+w-1, y+h-1);
	sendCommandOnly(ILI9341_RAMWR);

	for(y=h; y>0; y--){
20000614:	88bb      	ldrh	r3, [r7, #4]
20000616:	f103 33ff 	add.w	r3, r3, #4294967295
2000061a:	80bb      	strh	r3, [r7, #4]
2000061c:	88bb      	ldrh	r3, [r7, #4]
2000061e:	2b00      	cmp	r3, #0
20000620:	d1e0      	bne.n	200005e4 <drawRectangle+0x40>
		for(x = w; x>0; x--){
			sendData(&color, 16);
		}
		sendData(&color, 16);
	}
}
20000622:	f107 0708 	add.w	r7, r7, #8
20000626:	46bd      	mov	sp, r7
20000628:	bd80      	pop	{r7, pc}
2000062a:	bf00      	nop

2000062c <drawFillScreen>:
			drawPixel(i, j, color);
		}
	}
}		

void drawFillScreen(uint16_t color){
2000062c:	b580      	push	{r7, lr}
2000062e:	b084      	sub	sp, #16
20000630:	af02      	add	r7, sp, #8
20000632:	4603      	mov	r3, r0
20000634:	80fb      	strh	r3, [r7, #6]
	drawRectangle(0, 0, ILI9341_TFTWIDTH-1, ILI9341_TFTHEIGHT-1, color);
20000636:	88fb      	ldrh	r3, [r7, #6]
20000638:	9300      	str	r3, [sp, #0]
2000063a:	f04f 0000 	mov.w	r0, #0
2000063e:	f04f 0100 	mov.w	r1, #0
20000642:	f04f 02ef 	mov.w	r2, #239	; 0xef
20000646:	f240 133f 	movw	r3, #319	; 0x13f
2000064a:	f7ff ffab 	bl	200005a4 <drawRectangle>
}
2000064e:	f107 0708 	add.w	r7, r7, #8
20000652:	46bd      	mov	sp, r7
20000654:	bd80      	pop	{r7, pc}
20000656:	bf00      	nop

20000658 <setAddr>:

void setAddr(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1){
20000658:	b580      	push	{r7, lr}
2000065a:	b082      	sub	sp, #8
2000065c:	af00      	add	r7, sp, #0
2000065e:	80f8      	strh	r0, [r7, #6]
20000660:	80b9      	strh	r1, [r7, #4]
20000662:	807a      	strh	r2, [r7, #2]
20000664:	803b      	strh	r3, [r7, #0]
	
	sendCommandOnly(ILI9341_CASET);
20000666:	f04f 002a 	mov.w	r0, #42	; 0x2a
2000066a:	f000 f8b5 	bl	200007d8 <sendCommandOnly>
	sendData(&x0, 8);
2000066e:	f107 0306 	add.w	r3, r7, #6
20000672:	4618      	mov	r0, r3
20000674:	f04f 0108 	mov.w	r1, #8
20000678:	f000 f84e 	bl	20000718 <sendData>
	sendData(&x1, 8);
2000067c:	f107 0302 	add.w	r3, r7, #2
20000680:	4618      	mov	r0, r3
20000682:	f04f 0108 	mov.w	r1, #8
20000686:	f000 f847 	bl	20000718 <sendData>
	sendCommandOnly(ILI9341_PASET);
2000068a:	f04f 002b 	mov.w	r0, #43	; 0x2b
2000068e:	f000 f8a3 	bl	200007d8 <sendCommandOnly>
	sendData(&y0, 8);
20000692:	f107 0304 	add.w	r3, r7, #4
20000696:	4618      	mov	r0, r3
20000698:	f04f 0108 	mov.w	r1, #8
2000069c:	f000 f83c 	bl	20000718 <sendData>
	sendData(&y1, 8);
200006a0:	463b      	mov	r3, r7
200006a2:	4618      	mov	r0, r3
200006a4:	f04f 0108 	mov.w	r1, #8
200006a8:	f000 f836 	bl	20000718 <sendData>
}
200006ac:	f107 0708 	add.w	r7, r7, #8
200006b0:	46bd      	mov	sp, r7
200006b2:	bd80      	pop	{r7, pc}

200006b4 <sendCommand>:

void sendCommand(uint8_t commandByte, uint8_t *dataBytes, uint8_t numDataBytes){
200006b4:	b580      	push	{r7, lr}
200006b6:	b086      	sub	sp, #24
200006b8:	af00      	add	r7, sp, #0
200006ba:	60b9      	str	r1, [r7, #8]
200006bc:	4613      	mov	r3, r2
200006be:	4602      	mov	r2, r0
200006c0:	73fa      	strb	r2, [r7, #15]
200006c2:	71fb      	strb	r3, [r7, #7]
//
//	sendSPI(dataBytes);
//
//	clear_SPI_CS();
	int i;
	configureSPI(8);
200006c4:	f04f 0008 	mov.w	r0, #8
200006c8:	f000 f89a 	bl	20000800 <configureSPI>
	set_SPI_CS();
200006cc:	f000 f8c0 	bl	20000850 <set_SPI_CS>
	set_DC_LOW();
200006d0:	f000 f8e0 	bl	20000894 <set_DC_LOW>
	sendSPI(commandByte);
200006d4:	7bfb      	ldrb	r3, [r7, #15]
200006d6:	4618      	mov	r0, r3
200006d8:	f000 f8aa 	bl	20000830 <sendSPI>

		set_DC_HIGH();
200006dc:	f000 f8d0 	bl	20000880 <set_DC_HIGH>
		for(i=0; i<numDataBytes; i++){
200006e0:	f04f 0300 	mov.w	r3, #0
200006e4:	617b      	str	r3, [r7, #20]
200006e6:	e00c      	b.n	20000702 <sendCommand+0x4e>
			sendSPI(*dataBytes);
200006e8:	68bb      	ldr	r3, [r7, #8]
200006ea:	781b      	ldrb	r3, [r3, #0]
200006ec:	4618      	mov	r0, r3
200006ee:	f000 f89f 	bl	20000830 <sendSPI>
			dataBytes++;
200006f2:	68bb      	ldr	r3, [r7, #8]
200006f4:	f103 0301 	add.w	r3, r3, #1
200006f8:	60bb      	str	r3, [r7, #8]
	set_SPI_CS();
	set_DC_LOW();
	sendSPI(commandByte);

		set_DC_HIGH();
		for(i=0; i<numDataBytes; i++){
200006fa:	697b      	ldr	r3, [r7, #20]
200006fc:	f103 0301 	add.w	r3, r3, #1
20000700:	617b      	str	r3, [r7, #20]
20000702:	79fa      	ldrb	r2, [r7, #7]
20000704:	697b      	ldr	r3, [r7, #20]
20000706:	429a      	cmp	r2, r3
20000708:	dcee      	bgt.n	200006e8 <sendCommand+0x34>
			sendSPI(*dataBytes);
			dataBytes++;
		}
		clear_SPI_CS();
2000070a:	f000 f8ad 	bl	20000868 <clear_SPI_CS>
}
2000070e:	f107 0718 	add.w	r7, r7, #24
20000712:	46bd      	mov	sp, r7
20000714:	bd80      	pop	{r7, pc}
20000716:	bf00      	nop

20000718 <sendData>:
	sendSPI(*dataBytes);

	clear_SPI_CS();
}

void sendData(uint8_t *dataBytes, uint8_t numDataBytes){
20000718:	b580      	push	{r7, lr}
2000071a:	b084      	sub	sp, #16
2000071c:	af00      	add	r7, sp, #0
2000071e:	6078      	str	r0, [r7, #4]
20000720:	460b      	mov	r3, r1
20000722:	70fb      	strb	r3, [r7, #3]
	int i;
	set_SPI_CS();
20000724:	f000 f894 	bl	20000850 <set_SPI_CS>
	set_DC_HIGH();
20000728:	f000 f8aa 	bl	20000880 <set_DC_HIGH>
	configureSPI(8);
2000072c:	f04f 0008 	mov.w	r0, #8
20000730:	f000 f866 	bl	20000800 <configureSPI>

	for(i=0; i<numDataBytes; i++){
20000734:	f04f 0300 	mov.w	r3, #0
20000738:	60fb      	str	r3, [r7, #12]
2000073a:	e00c      	b.n	20000756 <sendData+0x3e>
		sendSPI(*dataBytes);
2000073c:	687b      	ldr	r3, [r7, #4]
2000073e:	781b      	ldrb	r3, [r3, #0]
20000740:	4618      	mov	r0, r3
20000742:	f000 f875 	bl	20000830 <sendSPI>
		dataBytes++;
20000746:	687b      	ldr	r3, [r7, #4]
20000748:	f103 0301 	add.w	r3, r3, #1
2000074c:	607b      	str	r3, [r7, #4]
	int i;
	set_SPI_CS();
	set_DC_HIGH();
	configureSPI(8);

	for(i=0; i<numDataBytes; i++){
2000074e:	68fb      	ldr	r3, [r7, #12]
20000750:	f103 0301 	add.w	r3, r3, #1
20000754:	60fb      	str	r3, [r7, #12]
20000756:	78fa      	ldrb	r2, [r7, #3]
20000758:	68fb      	ldr	r3, [r7, #12]
2000075a:	429a      	cmp	r2, r3
2000075c:	dcee      	bgt.n	2000073c <sendData+0x24>
		sendSPI(*dataBytes);
		dataBytes++;
	}
	clear_SPI_CS();
2000075e:	f000 f883 	bl	20000868 <clear_SPI_CS>
}
20000762:	f107 0710 	add.w	r7, r7, #16
20000766:	46bd      	mov	sp, r7
20000768:	bd80      	pop	{r7, pc}
2000076a:	bf00      	nop
2000076c:	0000      	lsls	r0, r0, #0
	...

20000770 <delay>:

void delay(uint32_t time){
20000770:	b580      	push	{r7, lr}
20000772:	b084      	sub	sp, #16
20000774:	af00      	add	r7, sp, #0
20000776:	6078      	str	r0, [r7, #4]

	uint32_t start = MSS_TIM1_get_current_value();
20000778:	f7ff feb8 	bl	200004ec <MSS_TIM1_get_current_value>
2000077c:	4603      	mov	r3, r0
2000077e:	60bb      	str	r3, [r7, #8]
	uint32_t val = start - (int)(time/0.01);
20000780:	6878      	ldr	r0, [r7, #4]
20000782:	f001 fb9b 	bl	20001ebc <__aeabi_ui2d>
20000786:	4602      	mov	r2, r0
20000788:	460b      	mov	r3, r1
2000078a:	4610      	mov	r0, r2
2000078c:	4619      	mov	r1, r3
2000078e:	a310      	add	r3, pc, #64	; (adr r3, 200007d0 <delay+0x60>)
20000790:	e9d3 2300 	ldrd	r2, r3, [r3]
20000794:	f001 fd32 	bl	200021fc <__aeabi_ddiv>
20000798:	4602      	mov	r2, r0
2000079a:	460b      	mov	r3, r1
2000079c:	4610      	mov	r0, r2
2000079e:	4619      	mov	r1, r3
200007a0:	f001 fe14 	bl	200023cc <__aeabi_d2iz>
200007a4:	4603      	mov	r3, r0
200007a6:	68ba      	ldr	r2, [r7, #8]
200007a8:	ebc3 0302 	rsb	r3, r3, r2
200007ac:	60fb      	str	r3, [r7, #12]

	MSS_TIM1_start();
200007ae:	f7ff fe81 	bl	200004b4 <MSS_TIM1_start>
	while(MSS_TIM1_get_current_value()>val){
200007b2:	f7ff fe9b 	bl	200004ec <MSS_TIM1_get_current_value>
200007b6:	4602      	mov	r2, r0
200007b8:	68fb      	ldr	r3, [r7, #12]
200007ba:	429a      	cmp	r2, r3
200007bc:	d8f9      	bhi.n	200007b2 <delay+0x42>
		//do nothing
	}
	MSS_TIM1_stop();
200007be:	f7ff fe87 	bl	200004d0 <MSS_TIM1_stop>
}
200007c2:	f107 0710 	add.w	r7, r7, #16
200007c6:	46bd      	mov	sp, r7
200007c8:	bd80      	pop	{r7, pc}
200007ca:	bf00      	nop
200007cc:	f3af 8000 	nop.w
200007d0:	47ae147b 	.word	0x47ae147b
200007d4:	3f847ae1 	.word	0x3f847ae1

200007d8 <sendCommandOnly>:

void sendCommandOnly(uint8_t commandByte){
200007d8:	b580      	push	{r7, lr}
200007da:	b082      	sub	sp, #8
200007dc:	af00      	add	r7, sp, #0
200007de:	4603      	mov	r3, r0
200007e0:	71fb      	strb	r3, [r7, #7]
	set_SPI_CS();
200007e2:	f000 f835 	bl	20000850 <set_SPI_CS>
	set_DC_LOW();
200007e6:	f000 f855 	bl	20000894 <set_DC_LOW>
	sendSPI(commandByte);
200007ea:	79fb      	ldrb	r3, [r7, #7]
200007ec:	4618      	mov	r0, r3
200007ee:	f000 f81f 	bl	20000830 <sendSPI>
	clear_SPI_CS();
200007f2:	f000 f839 	bl	20000868 <clear_SPI_CS>
}
200007f6:	f107 0708 	add.w	r7, r7, #8
200007fa:	46bd      	mov	sp, r7
200007fc:	bd80      	pop	{r7, pc}
200007fe:	bf00      	nop

20000800 <configureSPI>:


void configureSPI(uint8_t frameSize){
20000800:	b580      	push	{r7, lr}
20000802:	b084      	sub	sp, #16
20000804:	af02      	add	r7, sp, #8
20000806:	4603      	mov	r3, r0
20000808:	71fb      	strb	r3, [r7, #7]
	MSS_SPI_configure_master_mode(
2000080a:	79fb      	ldrb	r3, [r7, #7]
2000080c:	9300      	str	r3, [sp, #0]
2000080e:	f242 60f4 	movw	r0, #9972	; 0x26f4
20000812:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000816:	f04f 0100 	mov.w	r1, #0
2000081a:	f04f 0200 	mov.w	r2, #0
2000081e:	f04f 0303 	mov.w	r3, #3
20000822:	f000 f9e3 	bl	20000bec <MSS_SPI_configure_master_mode>
		MSS_SPI_SLAVE_0,
		MSS_SPI_MODE0,
		MSS_SPI_PCLK_DIV_16,
		frameSize
	);
}
20000826:	f107 0708 	add.w	r7, r7, #8
2000082a:	46bd      	mov	sp, r7
2000082c:	bd80      	pop	{r7, pc}
2000082e:	bf00      	nop

20000830 <sendSPI>:

void sendSPI(uint32_t data){
20000830:	b580      	push	{r7, lr}
20000832:	b082      	sub	sp, #8
20000834:	af00      	add	r7, sp, #0
20000836:	6078      	str	r0, [r7, #4]
	
	MSS_SPI_transfer_frame( &g_mss_spi1, data);
20000838:	f242 60f4 	movw	r0, #9972	; 0x26f4
2000083c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000840:	6879      	ldr	r1, [r7, #4]
20000842:	f000 fb2f 	bl	20000ea4 <MSS_SPI_transfer_frame>
	
}
20000846:	f107 0708 	add.w	r7, r7, #8
2000084a:	46bd      	mov	sp, r7
2000084c:	bd80      	pop	{r7, pc}
2000084e:	bf00      	nop

20000850 <set_SPI_CS>:

void set_SPI_CS(){
20000850:	b580      	push	{r7, lr}
20000852:	af00      	add	r7, sp, #0
	MSS_SPI_set_slave_select(&g_mss_spi1, MSS_SPI_SLAVE_0);
20000854:	f242 60f4 	movw	r0, #9972	; 0x26f4
20000858:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000085c:	f04f 0100 	mov.w	r1, #0
20000860:	f000 fa54 	bl	20000d0c <MSS_SPI_set_slave_select>
}
20000864:	bd80      	pop	{r7, pc}
20000866:	bf00      	nop

20000868 <clear_SPI_CS>:

void clear_SPI_CS(){
20000868:	b580      	push	{r7, lr}
2000086a:	af00      	add	r7, sp, #0
	MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
2000086c:	f242 60f4 	movw	r0, #9972	; 0x26f4
20000870:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000874:	f04f 0100 	mov.w	r1, #0
20000878:	f000 facc 	bl	20000e14 <MSS_SPI_clear_slave_select>
}
2000087c:	bd80      	pop	{r7, pc}
2000087e:	bf00      	nop

20000880 <set_DC_HIGH>:

void set_DC_HIGH(){
20000880:	b580      	push	{r7, lr}
20000882:	af00      	add	r7, sp, #0
	MSS_GPIO_set_output(DC, 1);
20000884:	f04f 0000 	mov.w	r0, #0
20000888:	f04f 0101 	mov.w	r1, #1
2000088c:	f000 fe1e 	bl	200014cc <MSS_GPIO_set_output>
}
20000890:	bd80      	pop	{r7, pc}
20000892:	bf00      	nop

20000894 <set_DC_LOW>:

void set_DC_LOW(){
20000894:	b580      	push	{r7, lr}
20000896:	af00      	add	r7, sp, #0
	MSS_GPIO_set_output(DC, 0);
20000898:	f04f 0000 	mov.w	r0, #0
2000089c:	f04f 0100 	mov.w	r1, #0
200008a0:	f000 fe14 	bl	200014cc <MSS_GPIO_set_output>
}
200008a4:	bd80      	pop	{r7, pc}
200008a6:	bf00      	nop

200008a8 <NVIC_EnableIRQ>:
 *
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
200008a8:	b480      	push	{r7}
200008aa:	b083      	sub	sp, #12
200008ac:	af00      	add	r7, sp, #0
200008ae:	4603      	mov	r3, r0
200008b0:	80fb      	strh	r3, [r7, #6]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
200008b2:	f24e 1300 	movw	r3, #57600	; 0xe100
200008b6:	f2ce 0300 	movt	r3, #57344	; 0xe000
200008ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
200008be:	ea4f 1252 	mov.w	r2, r2, lsr #5
200008c2:	88f9      	ldrh	r1, [r7, #6]
200008c4:	f001 011f 	and.w	r1, r1, #31
200008c8:	f04f 0001 	mov.w	r0, #1
200008cc:	fa00 f101 	lsl.w	r1, r0, r1
200008d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
200008d4:	f107 070c 	add.w	r7, r7, #12
200008d8:	46bd      	mov	sp, r7
200008da:	bc80      	pop	{r7}
200008dc:	4770      	bx	lr
200008de:	bf00      	nop

200008e0 <NVIC_DisableIRQ>:
 * 
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
200008e0:	b480      	push	{r7}
200008e2:	b083      	sub	sp, #12
200008e4:	af00      	add	r7, sp, #0
200008e6:	4603      	mov	r3, r0
200008e8:	80fb      	strh	r3, [r7, #6]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
200008ea:	f24e 1300 	movw	r3, #57600	; 0xe100
200008ee:	f2ce 0300 	movt	r3, #57344	; 0xe000
200008f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
200008f6:	ea4f 1252 	mov.w	r2, r2, lsr #5
200008fa:	88f9      	ldrh	r1, [r7, #6]
200008fc:	f001 011f 	and.w	r1, r1, #31
20000900:	f04f 0001 	mov.w	r0, #1
20000904:	fa00 f101 	lsl.w	r1, r0, r1
20000908:	f102 0220 	add.w	r2, r2, #32
2000090c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000910:	f107 070c 	add.w	r7, r7, #12
20000914:	46bd      	mov	sp, r7
20000916:	bc80      	pop	{r7}
20000918:	4770      	bx	lr
2000091a:	bf00      	nop

2000091c <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
2000091c:	b480      	push	{r7}
2000091e:	b083      	sub	sp, #12
20000920:	af00      	add	r7, sp, #0
20000922:	4603      	mov	r3, r0
20000924:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20000926:	f24e 1300 	movw	r3, #57600	; 0xe100
2000092a:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000092e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20000932:	ea4f 1252 	mov.w	r2, r2, lsr #5
20000936:	88f9      	ldrh	r1, [r7, #6]
20000938:	f001 011f 	and.w	r1, r1, #31
2000093c:	f04f 0001 	mov.w	r0, #1
20000940:	fa00 f101 	lsl.w	r1, r0, r1
20000944:	f102 0260 	add.w	r2, r2, #96	; 0x60
20000948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
2000094c:	f107 070c 	add.w	r7, r7, #12
20000950:	46bd      	mov	sp, r7
20000952:	bc80      	pop	{r7}
20000954:	4770      	bx	lr
20000956:	bf00      	nop

20000958 <MSS_SPI_init>:
 */
void MSS_SPI_init
(
    mss_spi_instance_t * this_spi
)
{
20000958:	b580      	push	{r7, lr}
2000095a:	b084      	sub	sp, #16
2000095c:	af00      	add	r7, sp, #0
2000095e:	6078      	str	r0, [r7, #4]
    uint16_t slave;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20000960:	687a      	ldr	r2, [r7, #4]
20000962:	f242 7378 	movw	r3, #10104	; 0x2778
20000966:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000096a:	429a      	cmp	r2, r3
2000096c:	d007      	beq.n	2000097e <MSS_SPI_init+0x26>
2000096e:	687a      	ldr	r2, [r7, #4]
20000970:	f242 63f4 	movw	r3, #9972	; 0x26f4
20000974:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000978:	429a      	cmp	r2, r3
2000097a:	d000      	beq.n	2000097e <MSS_SPI_init+0x26>
2000097c:	be00      	bkpt	0x0000
     * Initialize SPI driver instance data. Relies on the majority
     * of data requiring 0 for initial state so we just need to fill
     * with 0s and finish off with a small number of non zero values.
     */
    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
2000097e:	687b      	ldr	r3, [r7, #4]
20000980:	889b      	ldrh	r3, [r3, #4]
20000982:	b21b      	sxth	r3, r3
20000984:	4618      	mov	r0, r3
20000986:	f7ff ffab 	bl	200008e0 <NVIC_DisableIRQ>

    memset(this_spi, 0, sizeof(mss_spi_instance_t));
2000098a:	6878      	ldr	r0, [r7, #4]
2000098c:	f04f 0100 	mov.w	r1, #0
20000990:	f04f 0284 	mov.w	r2, #132	; 0x84
20000994:	f001 fd6a 	bl	2000246c <memset>
    
    this_spi->cmd_done = 1u;
20000998:	687b      	ldr	r3, [r7, #4]
2000099a:	f04f 0201 	mov.w	r2, #1
2000099e:	625a      	str	r2, [r3, #36]	; 0x24

    for(slave = 0u; slave < (uint16_t)MSS_SPI_MAX_NB_OF_SLAVES; ++slave)
200009a0:	f04f 0300 	mov.w	r3, #0
200009a4:	81fb      	strh	r3, [r7, #14]
200009a6:	e00d      	b.n	200009c4 <MSS_SPI_init+0x6c>
    {
        this_spi->slaves_cfg[slave].ctrl_reg = NOT_CONFIGURED;
200009a8:	89fb      	ldrh	r3, [r7, #14]
200009aa:	687a      	ldr	r2, [r7, #4]
200009ac:	f103 0306 	add.w	r3, r3, #6
200009b0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
200009b4:	4413      	add	r3, r2
200009b6:	f04f 32ff 	mov.w	r2, #4294967295
200009ba:	605a      	str	r2, [r3, #4]

    memset(this_spi, 0, sizeof(mss_spi_instance_t));
    
    this_spi->cmd_done = 1u;

    for(slave = 0u; slave < (uint16_t)MSS_SPI_MAX_NB_OF_SLAVES; ++slave)
200009bc:	89fb      	ldrh	r3, [r7, #14]
200009be:	f103 0301 	add.w	r3, r3, #1
200009c2:	81fb      	strh	r3, [r7, #14]
200009c4:	89fb      	ldrh	r3, [r7, #14]
200009c6:	2b07      	cmp	r3, #7
200009c8:	d9ee      	bls.n	200009a8 <MSS_SPI_init+0x50>
    {
        this_spi->slaves_cfg[slave].ctrl_reg = NOT_CONFIGURED;
    }

    if(this_spi == &g_mss_spi0)
200009ca:	687a      	ldr	r2, [r7, #4]
200009cc:	f242 7378 	movw	r3, #10104	; 0x2778
200009d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200009d4:	429a      	cmp	r2, r3
200009d6:	d126      	bne.n	20000a26 <MSS_SPI_init+0xce>
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI0_BASE);
200009d8:	687a      	ldr	r2, [r7, #4]
200009da:	f241 0300 	movw	r3, #4096	; 0x1000
200009de:	f2c4 0300 	movt	r3, #16384	; 0x4000
200009e2:	6013      	str	r3, [r2, #0]
        this_spi->irqn = SPI0_IRQn;
200009e4:	687b      	ldr	r3, [r7, #4]
200009e6:	f04f 020c 	mov.w	r2, #12
200009ea:	809a      	strh	r2, [r3, #4]

        /* reset SPI0 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI0_SOFTRESET_MASK;
200009ec:	f242 0300 	movw	r3, #8192	; 0x2000
200009f0:	f2ce 0304 	movt	r3, #57348	; 0xe004
200009f4:	f242 0200 	movw	r2, #8192	; 0x2000
200009f8:	f2ce 0204 	movt	r2, #57348	; 0xe004
200009fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
200009fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
20000a02:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended SPI0 interrupt */
        NVIC_ClearPendingIRQ(SPI0_IRQn);
20000a04:	f04f 000c 	mov.w	r0, #12
20000a08:	f7ff ff88 	bl	2000091c <NVIC_ClearPendingIRQ>
        /* Take SPI0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI0_SOFTRESET_MASK;
20000a0c:	f242 0300 	movw	r3, #8192	; 0x2000
20000a10:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000a14:	f242 0200 	movw	r2, #8192	; 0x2000
20000a18:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000a1c:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000a1e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
20000a22:	631a      	str	r2, [r3, #48]	; 0x30
20000a24:	e025      	b.n	20000a72 <MSS_SPI_init+0x11a>
    }
    else
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI1_BASE);
20000a26:	687a      	ldr	r2, [r7, #4]
20000a28:	f241 0300 	movw	r3, #4096	; 0x1000
20000a2c:	f2c4 0301 	movt	r3, #16385	; 0x4001
20000a30:	6013      	str	r3, [r2, #0]
        this_spi->irqn = SPI1_IRQn;
20000a32:	687b      	ldr	r3, [r7, #4]
20000a34:	f04f 020d 	mov.w	r2, #13
20000a38:	809a      	strh	r2, [r3, #4]
        
        /* reset SPI1 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI1_SOFTRESET_MASK;
20000a3a:	f242 0300 	movw	r3, #8192	; 0x2000
20000a3e:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000a42:	f242 0200 	movw	r2, #8192	; 0x2000
20000a46:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000a4a:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000a4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
20000a50:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended SPI1 interrupt */
        NVIC_ClearPendingIRQ(SPI1_IRQn);
20000a52:	f04f 000d 	mov.w	r0, #13
20000a56:	f7ff ff61 	bl	2000091c <NVIC_ClearPendingIRQ>
        /* Take SPI1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI1_SOFTRESET_MASK;
20000a5a:	f242 0300 	movw	r3, #8192	; 0x2000
20000a5e:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000a62:	f242 0200 	movw	r2, #8192	; 0x2000
20000a66:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000a6a:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000a6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
20000a70:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* De-assert reset bit. */
    this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
20000a72:	687b      	ldr	r3, [r7, #4]
20000a74:	681b      	ldr	r3, [r3, #0]
20000a76:	687a      	ldr	r2, [r7, #4]
20000a78:	6812      	ldr	r2, [r2, #0]
20000a7a:	6812      	ldr	r2, [r2, #0]
20000a7c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
20000a80:	601a      	str	r2, [r3, #0]
}
20000a82:	f107 0710 	add.w	r7, r7, #16
20000a86:	46bd      	mov	sp, r7
20000a88:	bd80      	pop	{r7, pc}
20000a8a:	bf00      	nop

20000a8c <recover_from_rx_overflow>:
 */
static void recover_from_rx_overflow
(
    mss_spi_instance_t * this_spi
)
{
20000a8c:	b580      	push	{r7, lr}
20000a8e:	b08a      	sub	sp, #40	; 0x28
20000a90:	af00      	add	r7, sp, #0
20000a92:	6078      	str	r0, [r7, #4]
    uint32_t slave_select;
    
    /*
     * Read current SPI hardware block configuration.
     */
    control_reg = this_spi->hw_reg->CONTROL;
20000a94:	687b      	ldr	r3, [r7, #4]
20000a96:	681b      	ldr	r3, [r3, #0]
20000a98:	681b      	ldr	r3, [r3, #0]
20000a9a:	60fb      	str	r3, [r7, #12]
    clk_gen = this_spi->hw_reg->CLK_GEN;
20000a9c:	687b      	ldr	r3, [r7, #4]
20000a9e:	681b      	ldr	r3, [r3, #0]
20000aa0:	699b      	ldr	r3, [r3, #24]
20000aa2:	613b      	str	r3, [r7, #16]
    frame_size = this_spi->hw_reg->TXRXDF_SIZE;
20000aa4:	687b      	ldr	r3, [r7, #4]
20000aa6:	681b      	ldr	r3, [r3, #0]
20000aa8:	685b      	ldr	r3, [r3, #4]
20000aaa:	617b      	str	r3, [r7, #20]
    control2 = this_spi->hw_reg->CONTROL2;
20000aac:	687b      	ldr	r3, [r7, #4]
20000aae:	681b      	ldr	r3, [r3, #0]
20000ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20000ab2:	61bb      	str	r3, [r7, #24]
    packet_size = this_spi->hw_reg->PKTSIZE;
20000ab4:	687b      	ldr	r3, [r7, #4]
20000ab6:	681b      	ldr	r3, [r3, #0]
20000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000aba:	61fb      	str	r3, [r7, #28]
    cmd_size = this_spi->hw_reg->CMDSIZE;
20000abc:	687b      	ldr	r3, [r7, #4]
20000abe:	681b      	ldr	r3, [r3, #0]
20000ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20000ac2:	623b      	str	r3, [r7, #32]
    slave_select = this_spi->hw_reg->SLAVE_SELECT;
20000ac4:	687b      	ldr	r3, [r7, #4]
20000ac6:	681b      	ldr	r3, [r3, #0]
20000ac8:	69db      	ldr	r3, [r3, #28]
20000aca:	627b      	str	r3, [r7, #36]	; 0x24
     
    /*
     * Reset the SPI hardware block.
     */
    if(this_spi == &g_mss_spi0)
20000acc:	687a      	ldr	r2, [r7, #4]
20000ace:	f242 7378 	movw	r3, #10104	; 0x2778
20000ad2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ad6:	429a      	cmp	r2, r3
20000ad8:	d12e      	bne.n	20000b38 <recover_from_rx_overflow+0xac>
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI0_BASE);
20000ada:	687a      	ldr	r2, [r7, #4]
20000adc:	f241 0300 	movw	r3, #4096	; 0x1000
20000ae0:	f2c4 0300 	movt	r3, #16384	; 0x4000
20000ae4:	6013      	str	r3, [r2, #0]
        this_spi->irqn = SPI0_IRQn;
20000ae6:	687b      	ldr	r3, [r7, #4]
20000ae8:	f04f 020c 	mov.w	r2, #12
20000aec:	809a      	strh	r2, [r3, #4]

        /* reset SPI0 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI0_SOFTRESET_MASK;
20000aee:	f242 0300 	movw	r3, #8192	; 0x2000
20000af2:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000af6:	f242 0200 	movw	r2, #8192	; 0x2000
20000afa:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000afe:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000b00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
20000b04:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended SPI0 interrupt */
        NVIC_ClearPendingIRQ(SPI0_IRQn);
20000b06:	f04f 000c 	mov.w	r0, #12
20000b0a:	f7ff ff07 	bl	2000091c <NVIC_ClearPendingIRQ>
        /* Take SPI0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI0_SOFTRESET_MASK;
20000b0e:	f242 0300 	movw	r3, #8192	; 0x2000
20000b12:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000b16:	f242 0200 	movw	r2, #8192	; 0x2000
20000b1a:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000b1e:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000b20:	f422 7200 	bic.w	r2, r2, #512	; 0x200
20000b24:	631a      	str	r2, [r3, #48]	; 0x30

        this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
20000b26:	687b      	ldr	r3, [r7, #4]
20000b28:	681b      	ldr	r3, [r3, #0]
20000b2a:	687a      	ldr	r2, [r7, #4]
20000b2c:	6812      	ldr	r2, [r2, #0]
20000b2e:	6812      	ldr	r2, [r2, #0]
20000b30:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
20000b34:	601a      	str	r2, [r3, #0]
20000b36:	e02d      	b.n	20000b94 <recover_from_rx_overflow+0x108>
    }
    else
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI1_BASE);
20000b38:	687a      	ldr	r2, [r7, #4]
20000b3a:	f241 0300 	movw	r3, #4096	; 0x1000
20000b3e:	f2c4 0301 	movt	r3, #16385	; 0x4001
20000b42:	6013      	str	r3, [r2, #0]
        this_spi->irqn = SPI1_IRQn;
20000b44:	687b      	ldr	r3, [r7, #4]
20000b46:	f04f 020d 	mov.w	r2, #13
20000b4a:	809a      	strh	r2, [r3, #4]
        
        /* reset SPI1 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI1_SOFTRESET_MASK;
20000b4c:	f242 0300 	movw	r3, #8192	; 0x2000
20000b50:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000b54:	f242 0200 	movw	r2, #8192	; 0x2000
20000b58:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000b5c:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000b5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
20000b62:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended SPI1 interrupt */
        NVIC_ClearPendingIRQ(SPI1_IRQn);
20000b64:	f04f 000d 	mov.w	r0, #13
20000b68:	f7ff fed8 	bl	2000091c <NVIC_ClearPendingIRQ>
        /* Take SPI1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI1_SOFTRESET_MASK;
20000b6c:	f242 0300 	movw	r3, #8192	; 0x2000
20000b70:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000b74:	f242 0200 	movw	r2, #8192	; 0x2000
20000b78:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000b7c:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000b7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
20000b82:	631a      	str	r2, [r3, #48]	; 0x30
        
        this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
20000b84:	687b      	ldr	r3, [r7, #4]
20000b86:	681b      	ldr	r3, [r3, #0]
20000b88:	687a      	ldr	r2, [r7, #4]
20000b8a:	6812      	ldr	r2, [r2, #0]
20000b8c:	6812      	ldr	r2, [r2, #0]
20000b8e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
20000b92:	601a      	str	r2, [r3, #0]
    }
    
    /*
     * Restore SPI hardware block configuration.
     */
    control_reg &= ~(uint32_t)CTRL_ENABLE_MASK;
20000b94:	68fb      	ldr	r3, [r7, #12]
20000b96:	f023 0301 	bic.w	r3, r3, #1
20000b9a:	60fb      	str	r3, [r7, #12]
    this_spi->hw_reg->CONTROL = control_reg;
20000b9c:	687b      	ldr	r3, [r7, #4]
20000b9e:	681b      	ldr	r3, [r3, #0]
20000ba0:	68fa      	ldr	r2, [r7, #12]
20000ba2:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CLK_GEN = clk_gen;
20000ba4:	687b      	ldr	r3, [r7, #4]
20000ba6:	681b      	ldr	r3, [r3, #0]
20000ba8:	693a      	ldr	r2, [r7, #16]
20000baa:	619a      	str	r2, [r3, #24]
    this_spi->hw_reg->TXRXDF_SIZE = frame_size;
20000bac:	687b      	ldr	r3, [r7, #4]
20000bae:	681b      	ldr	r3, [r3, #0]
20000bb0:	697a      	ldr	r2, [r7, #20]
20000bb2:	605a      	str	r2, [r3, #4]
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
20000bb4:	687b      	ldr	r3, [r7, #4]
20000bb6:	681b      	ldr	r3, [r3, #0]
20000bb8:	687a      	ldr	r2, [r7, #4]
20000bba:	6812      	ldr	r2, [r2, #0]
20000bbc:	6812      	ldr	r2, [r2, #0]
20000bbe:	f042 0201 	orr.w	r2, r2, #1
20000bc2:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CONTROL2 = control2;
20000bc4:	687b      	ldr	r3, [r7, #4]
20000bc6:	681b      	ldr	r3, [r3, #0]
20000bc8:	69ba      	ldr	r2, [r7, #24]
20000bca:	629a      	str	r2, [r3, #40]	; 0x28
    this_spi->hw_reg->PKTSIZE = packet_size;
20000bcc:	687b      	ldr	r3, [r7, #4]
20000bce:	681b      	ldr	r3, [r3, #0]
20000bd0:	69fa      	ldr	r2, [r7, #28]
20000bd2:	631a      	str	r2, [r3, #48]	; 0x30
    this_spi->hw_reg->CMDSIZE = cmd_size;
20000bd4:	687b      	ldr	r3, [r7, #4]
20000bd6:	681b      	ldr	r3, [r3, #0]
20000bd8:	6a3a      	ldr	r2, [r7, #32]
20000bda:	635a      	str	r2, [r3, #52]	; 0x34
    this_spi->hw_reg->SLAVE_SELECT = slave_select;
20000bdc:	687b      	ldr	r3, [r7, #4]
20000bde:	681b      	ldr	r3, [r3, #0]
20000be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20000be2:	61da      	str	r2, [r3, #28]
}
20000be4:	f107 0728 	add.w	r7, r7, #40	; 0x28
20000be8:	46bd      	mov	sp, r7
20000bea:	bd80      	pop	{r7, pc}

20000bec <MSS_SPI_configure_master_mode>:
    mss_spi_slave_t         slave,
    mss_spi_protocol_mode_t protocol_mode,
    mss_spi_pclk_div_t      clk_rate,
    uint8_t                 frame_bit_length
)
{
20000bec:	b580      	push	{r7, lr}
20000bee:	b084      	sub	sp, #16
20000bf0:	af00      	add	r7, sp, #0
20000bf2:	60f8      	str	r0, [r7, #12]
20000bf4:	607a      	str	r2, [r7, #4]
20000bf6:	460a      	mov	r2, r1
20000bf8:	72fa      	strb	r2, [r7, #11]
20000bfa:	70fb      	strb	r3, [r7, #3]
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20000bfc:	68fa      	ldr	r2, [r7, #12]
20000bfe:	f242 7378 	movw	r3, #10104	; 0x2778
20000c02:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c06:	429a      	cmp	r2, r3
20000c08:	d007      	beq.n	20000c1a <MSS_SPI_configure_master_mode+0x2e>
20000c0a:	68fa      	ldr	r2, [r7, #12]
20000c0c:	f242 63f4 	movw	r3, #9972	; 0x26f4
20000c10:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c14:	429a      	cmp	r2, r3
20000c16:	d000      	beq.n	20000c1a <MSS_SPI_configure_master_mode+0x2e>
20000c18:	be00      	bkpt	0x0000
    ASSERT(slave < MSS_SPI_MAX_NB_OF_SLAVES);
20000c1a:	7afb      	ldrb	r3, [r7, #11]
20000c1c:	2b07      	cmp	r3, #7
20000c1e:	d900      	bls.n	20000c22 <MSS_SPI_configure_master_mode+0x36>
20000c20:	be00      	bkpt	0x0000
    ASSERT(frame_bit_length <= MAX_FRAME_LENGTH);
20000c22:	7e3b      	ldrb	r3, [r7, #24]
20000c24:	2b20      	cmp	r3, #32
20000c26:	d900      	bls.n	20000c2a <MSS_SPI_configure_master_mode+0x3e>
20000c28:	be00      	bkpt	0x0000
    
    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
20000c2a:	68fb      	ldr	r3, [r7, #12]
20000c2c:	889b      	ldrh	r3, [r3, #4]
20000c2e:	b21b      	sxth	r3, r3
20000c30:	4618      	mov	r0, r3
20000c32:	f7ff fe55 	bl	200008e0 <NVIC_DisableIRQ>

    /* Reset slave transfer mode to unknown to wipe slate clean */
    this_spi->slave_xfer_mode = MSS_SPI_SLAVE_XFER_NONE;
20000c36:	68fb      	ldr	r3, [r7, #12]
20000c38:	f04f 0200 	mov.w	r2, #0
20000c3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set the mode. */
    this_spi->hw_reg->CONTROL &= ~(uint32_t)CTRL_ENABLE_MASK;
20000c40:	68fb      	ldr	r3, [r7, #12]
20000c42:	681b      	ldr	r3, [r3, #0]
20000c44:	68fa      	ldr	r2, [r7, #12]
20000c46:	6812      	ldr	r2, [r2, #0]
20000c48:	6812      	ldr	r2, [r2, #0]
20000c4a:	f022 0201 	bic.w	r2, r2, #1
20000c4e:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CONTROL |= CTRL_MASTER_MASK;
20000c50:	68fb      	ldr	r3, [r7, #12]
20000c52:	681b      	ldr	r3, [r3, #0]
20000c54:	68fa      	ldr	r2, [r7, #12]
20000c56:	6812      	ldr	r2, [r2, #0]
20000c58:	6812      	ldr	r2, [r2, #0]
20000c5a:	f042 0202 	orr.w	r2, r2, #2
20000c5e:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
20000c60:	68fb      	ldr	r3, [r7, #12]
20000c62:	681b      	ldr	r3, [r3, #0]
20000c64:	68fa      	ldr	r2, [r7, #12]
20000c66:	6812      	ldr	r2, [r2, #0]
20000c68:	6812      	ldr	r2, [r2, #0]
20000c6a:	f042 0201 	orr.w	r2, r2, #1
20000c6e:	601a      	str	r2, [r3, #0]
    /*
     * Keep track of the required register configuration for this slave. These
     * values will be used by the MSS_SPI_set_slave_select() function to configure
     * the master to match the slave being selected.
     */
    if(slave < MSS_SPI_MAX_NB_OF_SLAVES)     
20000c70:	7afb      	ldrb	r3, [r7, #11]
20000c72:	2b07      	cmp	r3, #7
20000c74:	d83f      	bhi.n	20000cf6 <MSS_SPI_configure_master_mode+0x10a>
         *
         * We only do it for Motorola modes and if you need the slave selected
         * deselected between frames in modes 0 or 2 then remove SPS_MASK from
         * below.
         */
        if((MSS_SPI_MODE0 == protocol_mode) || (MSS_SPI_MODE1 == protocol_mode) ||
20000c76:	687b      	ldr	r3, [r7, #4]
20000c78:	2b00      	cmp	r3, #0
20000c7a:	d00b      	beq.n	20000c94 <MSS_SPI_configure_master_mode+0xa8>
20000c7c:	687b      	ldr	r3, [r7, #4]
20000c7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
20000c82:	d007      	beq.n	20000c94 <MSS_SPI_configure_master_mode+0xa8>
20000c84:	687b      	ldr	r3, [r7, #4]
20000c86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
20000c8a:	d003      	beq.n	20000c94 <MSS_SPI_configure_master_mode+0xa8>
20000c8c:	687b      	ldr	r3, [r7, #4]
20000c8e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
20000c92:	d10f      	bne.n	20000cb4 <MSS_SPI_configure_master_mode+0xc8>
           (MSS_SPI_MODE2 == protocol_mode) || (MSS_SPI_MODE3 == protocol_mode))
        {
            this_spi->slaves_cfg[slave].ctrl_reg = MASTER_MODE_MASK | SPS_MASK |
20000c94:	7afa      	ldrb	r2, [r7, #11]
20000c96:	6879      	ldr	r1, [r7, #4]
20000c98:	f240 1302 	movw	r3, #258	; 0x102
20000c9c:	f2c2 4300 	movt	r3, #9216	; 0x2400
20000ca0:	ea41 0303 	orr.w	r3, r1, r3
20000ca4:	68f9      	ldr	r1, [r7, #12]
20000ca6:	f102 0206 	add.w	r2, r2, #6
20000caa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
20000cae:	440a      	add	r2, r1
20000cb0:	6053      	str	r3, [r2, #4]
         *
         * We only do it for Motorola modes and if you need the slave selected
         * deselected between frames in modes 0 or 2 then remove SPS_MASK from
         * below.
         */
        if((MSS_SPI_MODE0 == protocol_mode) || (MSS_SPI_MODE1 == protocol_mode) ||
20000cb2:	e00e      	b.n	20000cd2 <MSS_SPI_configure_master_mode+0xe6>
                                                   (uint32_t)protocol_mode | 
                                                   ((uint32_t)1 << TXRXDFCOUNT_SHIFT);
        }
        else
        {
            this_spi->slaves_cfg[slave].ctrl_reg = MASTER_MODE_MASK |
20000cb4:	7afa      	ldrb	r2, [r7, #11]
20000cb6:	6879      	ldr	r1, [r7, #4]
20000cb8:	f240 1302 	movw	r3, #258	; 0x102
20000cbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000cc0:	ea41 0303 	orr.w	r3, r1, r3
20000cc4:	68f9      	ldr	r1, [r7, #12]
20000cc6:	f102 0206 	add.w	r2, r2, #6
20000cca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
20000cce:	440a      	add	r2, r1
20000cd0:	6053      	str	r3, [r2, #4]
                                                   BIGFIFO_MASK |
                                                   (uint32_t)protocol_mode | 
                                                   ((uint32_t)1 << TXRXDFCOUNT_SHIFT);
        }
        
        this_spi->slaves_cfg[slave].txrxdf_size_reg = frame_bit_length;
20000cd2:	7afb      	ldrb	r3, [r7, #11]
20000cd4:	68fa      	ldr	r2, [r7, #12]
20000cd6:	f103 0306 	add.w	r3, r3, #6
20000cda:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20000cde:	4413      	add	r3, r2
20000ce0:	7e3a      	ldrb	r2, [r7, #24]
20000ce2:	721a      	strb	r2, [r3, #8]
        this_spi->slaves_cfg[slave].clk_gen = (uint8_t)clk_rate;
20000ce4:	7afb      	ldrb	r3, [r7, #11]
20000ce6:	68fa      	ldr	r2, [r7, #12]
20000ce8:	f103 0306 	add.w	r3, r3, #6
20000cec:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20000cf0:	4413      	add	r3, r2
20000cf2:	78fa      	ldrb	r2, [r7, #3]
20000cf4:	725a      	strb	r2, [r3, #9]
    }
    /* Reenable interrupts */
    NVIC_EnableIRQ( this_spi->irqn );
20000cf6:	68fb      	ldr	r3, [r7, #12]
20000cf8:	889b      	ldrh	r3, [r3, #4]
20000cfa:	b21b      	sxth	r3, r3
20000cfc:	4618      	mov	r0, r3
20000cfe:	f7ff fdd3 	bl	200008a8 <NVIC_EnableIRQ>
}
20000d02:	f107 0710 	add.w	r7, r7, #16
20000d06:	46bd      	mov	sp, r7
20000d08:	bd80      	pop	{r7, pc}
20000d0a:	bf00      	nop

20000d0c <MSS_SPI_set_slave_select>:
void MSS_SPI_set_slave_select
(
    mss_spi_instance_t * this_spi,
    mss_spi_slave_t slave
)
{
20000d0c:	b580      	push	{r7, lr}
20000d0e:	b084      	sub	sp, #16
20000d10:	af00      	add	r7, sp, #0
20000d12:	6078      	str	r0, [r7, #4]
20000d14:	460b      	mov	r3, r1
20000d16:	70fb      	strb	r3, [r7, #3]
    uint32_t rx_overflow;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20000d18:	687a      	ldr	r2, [r7, #4]
20000d1a:	f242 7378 	movw	r3, #10104	; 0x2778
20000d1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d22:	429a      	cmp	r2, r3
20000d24:	d007      	beq.n	20000d36 <MSS_SPI_set_slave_select+0x2a>
20000d26:	687a      	ldr	r2, [r7, #4]
20000d28:	f242 63f4 	movw	r3, #9972	; 0x26f4
20000d2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d30:	429a      	cmp	r2, r3
20000d32:	d000      	beq.n	20000d36 <MSS_SPI_set_slave_select+0x2a>
20000d34:	be00      	bkpt	0x0000
    
    /* This function is only intended to be used with an SPI master. */
    ASSERT((this_spi->hw_reg->CONTROL & CTRL_MASTER_MASK) == CTRL_MASTER_MASK);
20000d36:	687b      	ldr	r3, [r7, #4]
20000d38:	681b      	ldr	r3, [r3, #0]
20000d3a:	681b      	ldr	r3, [r3, #0]
20000d3c:	f003 0302 	and.w	r3, r3, #2
20000d40:	2b00      	cmp	r3, #0
20000d42:	d100      	bne.n	20000d46 <MSS_SPI_set_slave_select+0x3a>
20000d44:	be00      	bkpt	0x0000
    
    ASSERT(this_spi->slaves_cfg[slave].ctrl_reg != NOT_CONFIGURED);
20000d46:	78fb      	ldrb	r3, [r7, #3]
20000d48:	687a      	ldr	r2, [r7, #4]
20000d4a:	f103 0306 	add.w	r3, r3, #6
20000d4e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20000d52:	4413      	add	r3, r2
20000d54:	685b      	ldr	r3, [r3, #4]
20000d56:	f1b3 3fff 	cmp.w	r3, #4294967295
20000d5a:	d100      	bne.n	20000d5e <MSS_SPI_set_slave_select+0x52>
20000d5c:	be00      	bkpt	0x0000

    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
20000d5e:	687b      	ldr	r3, [r7, #4]
20000d60:	889b      	ldrh	r3, [r3, #4]
20000d62:	b21b      	sxth	r3, r3
20000d64:	4618      	mov	r0, r3
20000d66:	f7ff fdbb 	bl	200008e0 <NVIC_DisableIRQ>

    /* Recover from receive overflow. */
    rx_overflow = this_spi->hw_reg->STATUS & RX_OVERFLOW_MASK;
20000d6a:	687b      	ldr	r3, [r7, #4]
20000d6c:	681b      	ldr	r3, [r3, #0]
20000d6e:	689b      	ldr	r3, [r3, #8]
20000d70:	f003 0304 	and.w	r3, r3, #4
20000d74:	60fb      	str	r3, [r7, #12]
    if(rx_overflow)
20000d76:	68fb      	ldr	r3, [r7, #12]
20000d78:	2b00      	cmp	r3, #0
20000d7a:	d002      	beq.n	20000d82 <MSS_SPI_set_slave_select+0x76>
    {
         recover_from_rx_overflow(this_spi);
20000d7c:	6878      	ldr	r0, [r7, #4]
20000d7e:	f7ff fe85 	bl	20000a8c <recover_from_rx_overflow>
    }
    
    /* Set the clock rate. */
    this_spi->hw_reg->CONTROL &= ~(uint32_t)CTRL_ENABLE_MASK;
20000d82:	687b      	ldr	r3, [r7, #4]
20000d84:	681b      	ldr	r3, [r3, #0]
20000d86:	687a      	ldr	r2, [r7, #4]
20000d88:	6812      	ldr	r2, [r2, #0]
20000d8a:	6812      	ldr	r2, [r2, #0]
20000d8c:	f022 0201 	bic.w	r2, r2, #1
20000d90:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CONTROL = this_spi->slaves_cfg[slave].ctrl_reg;
20000d92:	687b      	ldr	r3, [r7, #4]
20000d94:	681a      	ldr	r2, [r3, #0]
20000d96:	78fb      	ldrb	r3, [r7, #3]
20000d98:	6879      	ldr	r1, [r7, #4]
20000d9a:	f103 0306 	add.w	r3, r3, #6
20000d9e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20000da2:	440b      	add	r3, r1
20000da4:	685b      	ldr	r3, [r3, #4]
20000da6:	6013      	str	r3, [r2, #0]
    this_spi->hw_reg->CLK_GEN = this_spi->slaves_cfg[slave].clk_gen;
20000da8:	687b      	ldr	r3, [r7, #4]
20000daa:	681a      	ldr	r2, [r3, #0]
20000dac:	78fb      	ldrb	r3, [r7, #3]
20000dae:	6879      	ldr	r1, [r7, #4]
20000db0:	f103 0306 	add.w	r3, r3, #6
20000db4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20000db8:	440b      	add	r3, r1
20000dba:	7a5b      	ldrb	r3, [r3, #9]
20000dbc:	6193      	str	r3, [r2, #24]
    this_spi->hw_reg->TXRXDF_SIZE = this_spi->slaves_cfg[slave].txrxdf_size_reg;
20000dbe:	687b      	ldr	r3, [r7, #4]
20000dc0:	681a      	ldr	r2, [r3, #0]
20000dc2:	78fb      	ldrb	r3, [r7, #3]
20000dc4:	6879      	ldr	r1, [r7, #4]
20000dc6:	f103 0306 	add.w	r3, r3, #6
20000dca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20000dce:	440b      	add	r3, r1
20000dd0:	7a1b      	ldrb	r3, [r3, #8]
20000dd2:	6053      	str	r3, [r2, #4]
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
20000dd4:	687b      	ldr	r3, [r7, #4]
20000dd6:	681b      	ldr	r3, [r3, #0]
20000dd8:	687a      	ldr	r2, [r7, #4]
20000dda:	6812      	ldr	r2, [r2, #0]
20000ddc:	6812      	ldr	r2, [r2, #0]
20000dde:	f042 0201 	orr.w	r2, r2, #1
20000de2:	601a      	str	r2, [r3, #0]
    
    /* Set slave select */
    this_spi->hw_reg->SLAVE_SELECT |= ((uint32_t)1 << (uint32_t)slave);
20000de4:	687b      	ldr	r3, [r7, #4]
20000de6:	681b      	ldr	r3, [r3, #0]
20000de8:	687a      	ldr	r2, [r7, #4]
20000dea:	6812      	ldr	r2, [r2, #0]
20000dec:	69d1      	ldr	r1, [r2, #28]
20000dee:	78fa      	ldrb	r2, [r7, #3]
20000df0:	f04f 0001 	mov.w	r0, #1
20000df4:	fa00 f202 	lsl.w	r2, r0, r2
20000df8:	ea41 0202 	orr.w	r2, r1, r2
20000dfc:	61da      	str	r2, [r3, #28]
    /* Reenable interrupts */
    NVIC_EnableIRQ( this_spi->irqn );
20000dfe:	687b      	ldr	r3, [r7, #4]
20000e00:	889b      	ldrh	r3, [r3, #4]
20000e02:	b21b      	sxth	r3, r3
20000e04:	4618      	mov	r0, r3
20000e06:	f7ff fd4f 	bl	200008a8 <NVIC_EnableIRQ>
}
20000e0a:	f107 0710 	add.w	r7, r7, #16
20000e0e:	46bd      	mov	sp, r7
20000e10:	bd80      	pop	{r7, pc}
20000e12:	bf00      	nop

20000e14 <MSS_SPI_clear_slave_select>:
void MSS_SPI_clear_slave_select
(
    mss_spi_instance_t * this_spi,
    mss_spi_slave_t slave
)
{
20000e14:	b580      	push	{r7, lr}
20000e16:	b084      	sub	sp, #16
20000e18:	af00      	add	r7, sp, #0
20000e1a:	6078      	str	r0, [r7, #4]
20000e1c:	460b      	mov	r3, r1
20000e1e:	70fb      	strb	r3, [r7, #3]
    uint32_t rx_overflow;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20000e20:	687a      	ldr	r2, [r7, #4]
20000e22:	f242 7378 	movw	r3, #10104	; 0x2778
20000e26:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e2a:	429a      	cmp	r2, r3
20000e2c:	d007      	beq.n	20000e3e <MSS_SPI_clear_slave_select+0x2a>
20000e2e:	687a      	ldr	r2, [r7, #4]
20000e30:	f242 63f4 	movw	r3, #9972	; 0x26f4
20000e34:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e38:	429a      	cmp	r2, r3
20000e3a:	d000      	beq.n	20000e3e <MSS_SPI_clear_slave_select+0x2a>
20000e3c:	be00      	bkpt	0x0000
    
    /* This function is only intended to be used with an SPI master. */
    ASSERT((this_spi->hw_reg->CONTROL & CTRL_MASTER_MASK) == CTRL_MASTER_MASK);
20000e3e:	687b      	ldr	r3, [r7, #4]
20000e40:	681b      	ldr	r3, [r3, #0]
20000e42:	681b      	ldr	r3, [r3, #0]
20000e44:	f003 0302 	and.w	r3, r3, #2
20000e48:	2b00      	cmp	r3, #0
20000e4a:	d100      	bne.n	20000e4e <MSS_SPI_clear_slave_select+0x3a>
20000e4c:	be00      	bkpt	0x0000

    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
20000e4e:	687b      	ldr	r3, [r7, #4]
20000e50:	889b      	ldrh	r3, [r3, #4]
20000e52:	b21b      	sxth	r3, r3
20000e54:	4618      	mov	r0, r3
20000e56:	f7ff fd43 	bl	200008e0 <NVIC_DisableIRQ>

    /* Recover from receive overflow. */
    rx_overflow = this_spi->hw_reg->STATUS & RX_OVERFLOW_MASK;
20000e5a:	687b      	ldr	r3, [r7, #4]
20000e5c:	681b      	ldr	r3, [r3, #0]
20000e5e:	689b      	ldr	r3, [r3, #8]
20000e60:	f003 0304 	and.w	r3, r3, #4
20000e64:	60fb      	str	r3, [r7, #12]
    if(rx_overflow)
20000e66:	68fb      	ldr	r3, [r7, #12]
20000e68:	2b00      	cmp	r3, #0
20000e6a:	d002      	beq.n	20000e72 <MSS_SPI_clear_slave_select+0x5e>
    {
         recover_from_rx_overflow(this_spi);
20000e6c:	6878      	ldr	r0, [r7, #4]
20000e6e:	f7ff fe0d 	bl	20000a8c <recover_from_rx_overflow>
    }
    
    this_spi->hw_reg->SLAVE_SELECT &= ~((uint32_t)1 << (uint32_t)slave);
20000e72:	687b      	ldr	r3, [r7, #4]
20000e74:	681b      	ldr	r3, [r3, #0]
20000e76:	687a      	ldr	r2, [r7, #4]
20000e78:	6812      	ldr	r2, [r2, #0]
20000e7a:	69d1      	ldr	r1, [r2, #28]
20000e7c:	78fa      	ldrb	r2, [r7, #3]
20000e7e:	f04f 0001 	mov.w	r0, #1
20000e82:	fa00 f202 	lsl.w	r2, r0, r2
20000e86:	ea6f 0202 	mvn.w	r2, r2
20000e8a:	ea01 0202 	and.w	r2, r1, r2
20000e8e:	61da      	str	r2, [r3, #28]
    /* Reenable interrupts */
    NVIC_EnableIRQ( this_spi->irqn );
20000e90:	687b      	ldr	r3, [r7, #4]
20000e92:	889b      	ldrh	r3, [r3, #4]
20000e94:	b21b      	sxth	r3, r3
20000e96:	4618      	mov	r0, r3
20000e98:	f7ff fd06 	bl	200008a8 <NVIC_EnableIRQ>
}
20000e9c:	f107 0710 	add.w	r7, r7, #16
20000ea0:	46bd      	mov	sp, r7
20000ea2:	bd80      	pop	{r7, pc}

20000ea4 <MSS_SPI_transfer_frame>:
uint32_t MSS_SPI_transfer_frame
(
    mss_spi_instance_t * this_spi,
    uint32_t tx_bits
)
{
20000ea4:	b480      	push	{r7}
20000ea6:	b087      	sub	sp, #28
20000ea8:	af00      	add	r7, sp, #0
20000eaa:	6078      	str	r0, [r7, #4]
20000eac:	6039      	str	r1, [r7, #0]
    volatile uint32_t dummy;
    uint32_t rx_fifo_empty;
    uint32_t rx_ready;
    uint32_t tx_done;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20000eae:	687a      	ldr	r2, [r7, #4]
20000eb0:	f242 7378 	movw	r3, #10104	; 0x2778
20000eb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000eb8:	429a      	cmp	r2, r3
20000eba:	d007      	beq.n	20000ecc <MSS_SPI_transfer_frame+0x28>
20000ebc:	687a      	ldr	r2, [r7, #4]
20000ebe:	f242 63f4 	movw	r3, #9972	; 0x26f4
20000ec2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ec6:	429a      	cmp	r2, r3
20000ec8:	d000      	beq.n	20000ecc <MSS_SPI_transfer_frame+0x28>
20000eca:	be00      	bkpt	0x0000
    
    /* This function is only intended to be used with an SPI master. */
    ASSERT((this_spi->hw_reg->CONTROL & CTRL_MASTER_MASK) == CTRL_MASTER_MASK);
20000ecc:	687b      	ldr	r3, [r7, #4]
20000ece:	681b      	ldr	r3, [r3, #0]
20000ed0:	681b      	ldr	r3, [r3, #0]
20000ed2:	f003 0302 	and.w	r3, r3, #2
20000ed6:	2b00      	cmp	r3, #0
20000ed8:	d100      	bne.n	20000edc <MSS_SPI_transfer_frame+0x38>
20000eda:	be00      	bkpt	0x0000
    
    /* Ensure single frame transfer selected so interrupts work correctly */
    this_spi->hw_reg->CONTROL = (this_spi->hw_reg->CONTROL & ~TXRXDFCOUNT_MASK)
20000edc:	687b      	ldr	r3, [r7, #4]
20000ede:	681a      	ldr	r2, [r3, #0]
20000ee0:	687b      	ldr	r3, [r7, #4]
20000ee2:	681b      	ldr	r3, [r3, #0]
20000ee4:	6819      	ldr	r1, [r3, #0]
20000ee6:	f240 03ff 	movw	r3, #255	; 0xff
20000eea:	f6cf 7300 	movt	r3, #65280	; 0xff00
20000eee:	ea01 0303 	and.w	r3, r1, r3
20000ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
20000ef6:	6013      	str	r3, [r2, #0]
                                | ((uint32_t)1u << TXRXDFCOUNT_SHIFT);

    /* Flush the Tx and Rx FIFOs. Please note this does not have any effect on A2F200. */
    this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
20000ef8:	687b      	ldr	r3, [r7, #4]
20000efa:	681b      	ldr	r3, [r3, #0]
20000efc:	687a      	ldr	r2, [r7, #4]
20000efe:	6812      	ldr	r2, [r2, #0]
20000f00:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
20000f02:	f042 020c 	orr.w	r2, r2, #12
20000f06:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Flush Rx FIFO in case we are executing on A2F200. */
    rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
20000f08:	687b      	ldr	r3, [r7, #4]
20000f0a:	681b      	ldr	r3, [r3, #0]
20000f0c:	689b      	ldr	r3, [r3, #8]
20000f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
20000f12:	60fb      	str	r3, [r7, #12]
    while(0u == rx_fifo_empty)
20000f14:	e00b      	b.n	20000f2e <MSS_SPI_transfer_frame+0x8a>
    {
        dummy = this_spi->hw_reg->RX_DATA;
20000f16:	687b      	ldr	r3, [r7, #4]
20000f18:	681b      	ldr	r3, [r3, #0]
20000f1a:	691b      	ldr	r3, [r3, #16]
20000f1c:	60bb      	str	r3, [r7, #8]
        dummy = dummy;  /* Prevent Lint warning. */
20000f1e:	68bb      	ldr	r3, [r7, #8]
20000f20:	60bb      	str	r3, [r7, #8]
        rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
20000f22:	687b      	ldr	r3, [r7, #4]
20000f24:	681b      	ldr	r3, [r3, #0]
20000f26:	689b      	ldr	r3, [r3, #8]
20000f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
20000f2c:	60fb      	str	r3, [r7, #12]
    /* Flush the Tx and Rx FIFOs. Please note this does not have any effect on A2F200. */
    this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
    
    /* Flush Rx FIFO in case we are executing on A2F200. */
    rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
    while(0u == rx_fifo_empty)
20000f2e:	68fb      	ldr	r3, [r7, #12]
20000f30:	2b00      	cmp	r3, #0
20000f32:	d0f0      	beq.n	20000f16 <MSS_SPI_transfer_frame+0x72>
        dummy = dummy;  /* Prevent Lint warning. */
        rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
    }
    
    /* Send frame. */
    this_spi->hw_reg->TX_DATA = tx_bits;
20000f34:	687b      	ldr	r3, [r7, #4]
20000f36:	681b      	ldr	r3, [r3, #0]
20000f38:	683a      	ldr	r2, [r7, #0]
20000f3a:	615a      	str	r2, [r3, #20]
    
    /* Wait for frame Tx to complete. */
    tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
20000f3c:	687b      	ldr	r3, [r7, #4]
20000f3e:	681b      	ldr	r3, [r3, #0]
20000f40:	689b      	ldr	r3, [r3, #8]
20000f42:	f003 0301 	and.w	r3, r3, #1
20000f46:	617b      	str	r3, [r7, #20]
    while(0u == tx_done)
20000f48:	e005      	b.n	20000f56 <MSS_SPI_transfer_frame+0xb2>
    {
        tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
20000f4a:	687b      	ldr	r3, [r7, #4]
20000f4c:	681b      	ldr	r3, [r3, #0]
20000f4e:	689b      	ldr	r3, [r3, #8]
20000f50:	f003 0301 	and.w	r3, r3, #1
20000f54:	617b      	str	r3, [r7, #20]
    /* Send frame. */
    this_spi->hw_reg->TX_DATA = tx_bits;
    
    /* Wait for frame Tx to complete. */
    tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
    while(0u == tx_done)
20000f56:	697b      	ldr	r3, [r7, #20]
20000f58:	2b00      	cmp	r3, #0
20000f5a:	d0f6      	beq.n	20000f4a <MSS_SPI_transfer_frame+0xa6>
        tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
    }
    
    /* Read received frame. */
    /* Wait for Rx complete. */
    rx_ready = this_spi->hw_reg->STATUS & RX_DATA_READY_MASK;
20000f5c:	687b      	ldr	r3, [r7, #4]
20000f5e:	681b      	ldr	r3, [r3, #0]
20000f60:	689b      	ldr	r3, [r3, #8]
20000f62:	f003 0302 	and.w	r3, r3, #2
20000f66:	613b      	str	r3, [r7, #16]
    while(0u == rx_ready)
20000f68:	e005      	b.n	20000f76 <MSS_SPI_transfer_frame+0xd2>
    {
        rx_ready = this_spi->hw_reg->STATUS & RX_DATA_READY_MASK;
20000f6a:	687b      	ldr	r3, [r7, #4]
20000f6c:	681b      	ldr	r3, [r3, #0]
20000f6e:	689b      	ldr	r3, [r3, #8]
20000f70:	f003 0302 	and.w	r3, r3, #2
20000f74:	613b      	str	r3, [r7, #16]
    }
    
    /* Read received frame. */
    /* Wait for Rx complete. */
    rx_ready = this_spi->hw_reg->STATUS & RX_DATA_READY_MASK;
    while(0u == rx_ready)
20000f76:	693b      	ldr	r3, [r7, #16]
20000f78:	2b00      	cmp	r3, #0
20000f7a:	d0f6      	beq.n	20000f6a <MSS_SPI_transfer_frame+0xc6>
    {
        rx_ready = this_spi->hw_reg->STATUS & RX_DATA_READY_MASK;
    }
    /* Return Rx data. */
    return( this_spi->hw_reg->RX_DATA );
20000f7c:	687b      	ldr	r3, [r7, #4]
20000f7e:	681b      	ldr	r3, [r3, #0]
20000f80:	691b      	ldr	r3, [r3, #16]
}
20000f82:	4618      	mov	r0, r3
20000f84:	f107 071c 	add.w	r7, r7, #28
20000f88:	46bd      	mov	sp, r7
20000f8a:	bc80      	pop	{r7}
20000f8c:	4770      	bx	lr
20000f8e:	bf00      	nop

20000f90 <fill_slave_tx_fifo>:
 */
static void fill_slave_tx_fifo
(
    mss_spi_instance_t * this_spi
)
{
20000f90:	b480      	push	{r7}
20000f92:	b085      	sub	sp, #20
20000f94:	af00      	add	r7, sp, #0
20000f96:	6078      	str	r0, [r7, #4]
    uint32_t guard = 0u;
20000f98:	f04f 0300 	mov.w	r3, #0
20000f9c:	60fb      	str	r3, [r7, #12]

    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20000f9e:	e00e      	b.n	20000fbe <fill_slave_tx_fifo+0x2e>
          (this_spi->slave_tx_idx < this_spi->slave_tx_size))
    {
        /* Sending from primary slave transmit buffer */
        this_spi->hw_reg->TX_DATA = this_spi->slave_tx_buffer[this_spi->slave_tx_idx];
20000fa0:	687b      	ldr	r3, [r7, #4]
20000fa2:	681b      	ldr	r3, [r3, #0]
20000fa4:	687a      	ldr	r2, [r7, #4]
20000fa6:	6891      	ldr	r1, [r2, #8]
20000fa8:	687a      	ldr	r2, [r7, #4]
20000faa:	6912      	ldr	r2, [r2, #16]
20000fac:	440a      	add	r2, r1
20000fae:	7812      	ldrb	r2, [r2, #0]
20000fb0:	615a      	str	r2, [r3, #20]
        ++this_spi->slave_tx_idx;
20000fb2:	687b      	ldr	r3, [r7, #4]
20000fb4:	691b      	ldr	r3, [r3, #16]
20000fb6:	f103 0201 	add.w	r2, r3, #1
20000fba:	687b      	ldr	r3, [r7, #4]
20000fbc:	611a      	str	r2, [r3, #16]
    mss_spi_instance_t * this_spi
)
{
    uint32_t guard = 0u;

    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20000fbe:	687b      	ldr	r3, [r7, #4]
20000fc0:	681b      	ldr	r3, [r3, #0]
20000fc2:	689b      	ldr	r3, [r3, #8]
20000fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
20000fc8:	2b00      	cmp	r3, #0
20000fca:	d105      	bne.n	20000fd8 <fill_slave_tx_fifo+0x48>
          (this_spi->slave_tx_idx < this_spi->slave_tx_size))
20000fcc:	687b      	ldr	r3, [r7, #4]
20000fce:	691a      	ldr	r2, [r3, #16]
20000fd0:	687b      	ldr	r3, [r7, #4]
20000fd2:	68db      	ldr	r3, [r3, #12]
    mss_spi_instance_t * this_spi
)
{
    uint32_t guard = 0u;

    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20000fd4:	429a      	cmp	r2, r3
20000fd6:	d3e3      	bcc.n	20000fa0 <fill_slave_tx_fifo+0x10>
        /* Sending from primary slave transmit buffer */
        this_spi->hw_reg->TX_DATA = this_spi->slave_tx_buffer[this_spi->slave_tx_idx];
        ++this_spi->slave_tx_idx;
    }

    if(this_spi->slave_tx_idx >= this_spi->slave_tx_size)
20000fd8:	687b      	ldr	r3, [r7, #4]
20000fda:	691a      	ldr	r2, [r3, #16]
20000fdc:	687b      	ldr	r3, [r7, #4]
20000fde:	68db      	ldr	r3, [r3, #12]
20000fe0:	429a      	cmp	r2, r3
20000fe2:	d31c      	bcc.n	2000101e <fill_slave_tx_fifo+0x8e>
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20000fe4:	e00e      	b.n	20001004 <fill_slave_tx_fifo+0x74>
              (this_spi->resp_buff_tx_idx < this_spi->resp_buff_size))
        {
            /* Sending from command response buffer */
            this_spi->hw_reg->TX_DATA = this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx];
20000fe6:	687b      	ldr	r3, [r7, #4]
20000fe8:	681b      	ldr	r3, [r3, #0]
20000fea:	687a      	ldr	r2, [r7, #4]
20000fec:	6951      	ldr	r1, [r2, #20]
20000fee:	687a      	ldr	r2, [r7, #4]
20000ff0:	69d2      	ldr	r2, [r2, #28]
20000ff2:	440a      	add	r2, r1
20000ff4:	7812      	ldrb	r2, [r2, #0]
20000ff6:	615a      	str	r2, [r3, #20]
            ++this_spi->resp_buff_tx_idx;
20000ff8:	687b      	ldr	r3, [r7, #4]
20000ffa:	69db      	ldr	r3, [r3, #28]
20000ffc:	f103 0201 	add.w	r2, r3, #1
20001000:	687b      	ldr	r3, [r7, #4]
20001002:	61da      	str	r2, [r3, #28]
        ++this_spi->slave_tx_idx;
    }

    if(this_spi->slave_tx_idx >= this_spi->slave_tx_size)
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20001004:	687b      	ldr	r3, [r7, #4]
20001006:	681b      	ldr	r3, [r3, #0]
20001008:	689b      	ldr	r3, [r3, #8]
2000100a:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000100e:	2b00      	cmp	r3, #0
20001010:	d105      	bne.n	2000101e <fill_slave_tx_fifo+0x8e>
              (this_spi->resp_buff_tx_idx < this_spi->resp_buff_size))
20001012:	687b      	ldr	r3, [r7, #4]
20001014:	69da      	ldr	r2, [r3, #28]
20001016:	687b      	ldr	r3, [r7, #4]
20001018:	699b      	ldr	r3, [r3, #24]
        ++this_spi->slave_tx_idx;
    }

    if(this_spi->slave_tx_idx >= this_spi->slave_tx_size)
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
2000101a:	429a      	cmp	r2, r3
2000101c:	d3e3      	bcc.n	20000fe6 <fill_slave_tx_fifo+0x56>
            this_spi->hw_reg->TX_DATA = this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx];
            ++this_spi->resp_buff_tx_idx;
        }
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
2000101e:	687b      	ldr	r3, [r7, #4]
20001020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001022:	2b00      	cmp	r3, #0
20001024:	d01f      	beq.n	20001066 <fill_slave_tx_fifo+0xd6>
20001026:	687b      	ldr	r3, [r7, #4]
20001028:	691a      	ldr	r2, [r3, #16]
2000102a:	687b      	ldr	r3, [r7, #4]
2000102c:	68db      	ldr	r3, [r3, #12]
2000102e:	429a      	cmp	r2, r3
20001030:	d319      	bcc.n	20001066 <fill_slave_tx_fifo+0xd6>
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
20001032:	687b      	ldr	r3, [r7, #4]
20001034:	69da      	ldr	r2, [r3, #28]
20001036:	687b      	ldr	r3, [r7, #4]
20001038:	699b      	ldr	r3, [r3, #24]
            this_spi->hw_reg->TX_DATA = this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx];
            ++this_spi->resp_buff_tx_idx;
        }
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
2000103a:	429a      	cmp	r2, r3
2000103c:	d313      	bcc.n	20001066 <fill_slave_tx_fifo+0xd6>
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
2000103e:	e008      	b.n	20001052 <fill_slave_tx_fifo+0xc2>
              (guard < BIG_FIFO_SIZE))
        {
            /* Nothing left so pad with 0s for consistency */
            this_spi->hw_reg->TX_DATA = 0x00u;
20001040:	687b      	ldr	r3, [r7, #4]
20001042:	681b      	ldr	r3, [r3, #0]
20001044:	f04f 0200 	mov.w	r2, #0
20001048:	615a      	str	r2, [r3, #20]
             * We use the guard count to cover the unlikely event that we are
             * never seeing the TX FIFO full because the data is being pulled
             * out as fast as we can stuff it in. In this event we never spend
             * more than a full FIFOs worth of time spinning here.
             */
            guard++;
2000104a:	68fb      	ldr	r3, [r7, #12]
2000104c:	f103 0301 	add.w	r3, r3, #1
20001050:	60fb      	str	r3, [r7, #12]
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20001052:	687b      	ldr	r3, [r7, #4]
20001054:	681b      	ldr	r3, [r3, #0]
20001056:	689b      	ldr	r3, [r3, #8]
20001058:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000105c:	2b00      	cmp	r3, #0
2000105e:	d102      	bne.n	20001066 <fill_slave_tx_fifo+0xd6>
20001060:	68fb      	ldr	r3, [r7, #12]
20001062:	2b1f      	cmp	r3, #31
20001064:	d9ec      	bls.n	20001040 <fill_slave_tx_fifo+0xb0>
             */
            guard++;
        }
    }

}
20001066:	f107 0714 	add.w	r7, r7, #20
2000106a:	46bd      	mov	sp, r7
2000106c:	bc80      	pop	{r7}
2000106e:	4770      	bx	lr

20001070 <read_slave_rx_fifo>:
 */
static void read_slave_rx_fifo
(
    mss_spi_instance_t * this_spi
)
{
20001070:	b580      	push	{r7, lr}
20001072:	b084      	sub	sp, #16
20001074:	af00      	add	r7, sp, #0
20001076:	6078      	str	r0, [r7, #4]
    volatile uint32_t rx_frame;
    
    if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
20001078:	687b      	ldr	r3, [r7, #4]
2000107a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
2000107e:	2b02      	cmp	r3, #2
20001080:	d115      	bne.n	200010ae <read_slave_rx_fifo+0x3e>
    {
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
20001082:	e00c      	b.n	2000109e <read_slave_rx_fifo+0x2e>
        {
            /* Single frame handling mode. */
            rx_frame = this_spi->hw_reg->RX_DATA;
20001084:	687b      	ldr	r3, [r7, #4]
20001086:	681b      	ldr	r3, [r3, #0]
20001088:	691b      	ldr	r3, [r3, #16]
2000108a:	60fb      	str	r3, [r7, #12]
            if(0u != this_spi->frame_rx_handler)
2000108c:	687b      	ldr	r3, [r7, #4]
2000108e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20001090:	2b00      	cmp	r3, #0
20001092:	d004      	beq.n	2000109e <read_slave_rx_fifo+0x2e>
            {
                this_spi->frame_rx_handler( rx_frame );
20001094:	687b      	ldr	r3, [r7, #4]
20001096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20001098:	68fa      	ldr	r2, [r7, #12]
2000109a:	4610      	mov	r0, r2
2000109c:	4798      	blx	r3
{
    volatile uint32_t rx_frame;
    
    if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
    {
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
2000109e:	687b      	ldr	r3, [r7, #4]
200010a0:	681b      	ldr	r3, [r3, #0]
200010a2:	689b      	ldr	r3, [r3, #8]
200010a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
200010a8:	2b00      	cmp	r3, #0
200010aa:	d0eb      	beq.n	20001084 <read_slave_rx_fifo+0x14>
200010ac:	e032      	b.n	20001114 <read_slave_rx_fifo+0xa4>
            {
                this_spi->frame_rx_handler( rx_frame );
            }
        }
    }
    else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
200010ae:	687b      	ldr	r3, [r7, #4]
200010b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
200010b4:	2b01      	cmp	r3, #1
200010b6:	d125      	bne.n	20001104 <read_slave_rx_fifo+0x94>
    {
        /* Block handling mode. */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
200010b8:	e017      	b.n	200010ea <read_slave_rx_fifo+0x7a>
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
200010ba:	687b      	ldr	r3, [r7, #4]
200010bc:	681b      	ldr	r3, [r3, #0]
200010be:	691b      	ldr	r3, [r3, #16]
200010c0:	60fb      	str	r3, [r7, #12]
            if(this_spi->slave_rx_idx < this_spi->slave_rx_size)
200010c2:	687b      	ldr	r3, [r7, #4]
200010c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200010c6:	687b      	ldr	r3, [r7, #4]
200010c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200010ca:	429a      	cmp	r2, r3
200010cc:	d207      	bcs.n	200010de <read_slave_rx_fifo+0x6e>
            {
                this_spi->slave_rx_buffer[this_spi->slave_rx_idx] = (uint8_t)rx_frame;
200010ce:	687b      	ldr	r3, [r7, #4]
200010d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
200010d2:	687b      	ldr	r3, [r7, #4]
200010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200010d6:	4413      	add	r3, r2
200010d8:	68fa      	ldr	r2, [r7, #12]
200010da:	b2d2      	uxtb	r2, r2
200010dc:	701a      	strb	r2, [r3, #0]
            }

            ++this_spi->slave_rx_idx;
200010de:	687b      	ldr	r3, [r7, #4]
200010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200010e2:	f103 0201 	add.w	r2, r3, #1
200010e6:	687b      	ldr	r3, [r7, #4]
200010e8:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
    else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
    {
        /* Block handling mode. */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
200010ea:	687b      	ldr	r3, [r7, #4]
200010ec:	681b      	ldr	r3, [r3, #0]
200010ee:	689b      	ldr	r3, [r3, #8]
200010f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
200010f4:	2b00      	cmp	r3, #0
200010f6:	d0e0      	beq.n	200010ba <read_slave_rx_fifo+0x4a>
200010f8:	e00c      	b.n	20001114 <read_slave_rx_fifo+0xa4>
    else
    {
        /* Should not happen... Just purge FIFO */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
200010fa:	687b      	ldr	r3, [r7, #4]
200010fc:	681b      	ldr	r3, [r3, #0]
200010fe:	691b      	ldr	r3, [r3, #16]
20001100:	60fb      	str	r3, [r7, #12]
20001102:	e000      	b.n	20001106 <read_slave_rx_fifo+0x96>
        }
    }
    else
    {
        /* Should not happen... Just purge FIFO */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
20001104:	bf00      	nop
20001106:	687b      	ldr	r3, [r7, #4]
20001108:	681b      	ldr	r3, [r3, #0]
2000110a:	689b      	ldr	r3, [r3, #8]
2000110c:	f003 0340 	and.w	r3, r3, #64	; 0x40
20001110:	2b00      	cmp	r3, #0
20001112:	d0f2      	beq.n	200010fa <read_slave_rx_fifo+0x8a>
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
        }
    }
}
20001114:	f107 0710 	add.w	r7, r7, #16
20001118:	46bd      	mov	sp, r7
2000111a:	bd80      	pop	{r7, pc}

2000111c <mss_spi_isr>:
 */
static void mss_spi_isr
(
    mss_spi_instance_t * this_spi
)
{    
2000111c:	b580      	push	{r7, lr}
2000111e:	b086      	sub	sp, #24
20001120:	af00      	add	r7, sp, #0
20001122:	6078      	str	r0, [r7, #4]
    volatile uint32_t rx_frame;
    __I  uint32_t *this_mis = &this_spi->hw_reg->MIS;
20001124:	687b      	ldr	r3, [r7, #4]
20001126:	681b      	ldr	r3, [r3, #0]
20001128:	f103 0320 	add.w	r3, r3, #32
2000112c:	613b      	str	r3, [r7, #16]

    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
2000112e:	687a      	ldr	r2, [r7, #4]
20001130:	f242 7378 	movw	r3, #10104	; 0x2778
20001134:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001138:	429a      	cmp	r2, r3
2000113a:	d007      	beq.n	2000114c <mss_spi_isr+0x30>
2000113c:	687a      	ldr	r2, [r7, #4]
2000113e:	f242 63f4 	movw	r3, #9972	; 0x26f4
20001142:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001146:	429a      	cmp	r2, r3
20001148:	d000      	beq.n	2000114c <mss_spi_isr+0x30>
2000114a:	be00      	bkpt	0x0000
  
    if(0u != (*this_mis & RXDONE_IRQ_MASK))
2000114c:	693b      	ldr	r3, [r7, #16]
2000114e:	681b      	ldr	r3, [r3, #0]
20001150:	f003 0302 	and.w	r3, r3, #2
20001154:	2b00      	cmp	r3, #0
20001156:	d052      	beq.n	200011fe <mss_spi_isr+0xe2>
    {
        if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
20001158:	687b      	ldr	r3, [r7, #4]
2000115a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
2000115e:	2b02      	cmp	r3, #2
20001160:	d115      	bne.n	2000118e <mss_spi_isr+0x72>
        {
            /* Single frame handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
20001162:	e00c      	b.n	2000117e <mss_spi_isr+0x62>
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
20001164:	687b      	ldr	r3, [r7, #4]
20001166:	681b      	ldr	r3, [r3, #0]
20001168:	691b      	ldr	r3, [r3, #16]
2000116a:	60fb      	str	r3, [r7, #12]
                if(0u != this_spi->frame_rx_handler)
2000116c:	687b      	ldr	r3, [r7, #4]
2000116e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20001170:	2b00      	cmp	r3, #0
20001172:	d004      	beq.n	2000117e <mss_spi_isr+0x62>
                {
                    this_spi->frame_rx_handler( rx_frame );
20001174:	687b      	ldr	r3, [r7, #4]
20001176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20001178:	68fa      	ldr	r2, [r7, #12]
2000117a:	4610      	mov	r0, r2
2000117c:	4798      	blx	r3
    if(0u != (*this_mis & RXDONE_IRQ_MASK))
    {
        if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
        {
            /* Single frame handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
2000117e:	687b      	ldr	r3, [r7, #4]
20001180:	681b      	ldr	r3, [r3, #0]
20001182:	689b      	ldr	r3, [r3, #8]
20001184:	f003 0340 	and.w	r3, r3, #64	; 0x40
20001188:	2b00      	cmp	r3, #0
2000118a:	d0eb      	beq.n	20001164 <mss_spi_isr+0x48>
2000118c:	e032      	b.n	200011f4 <mss_spi_isr+0xd8>
                {
                    this_spi->frame_rx_handler( rx_frame );
                }
            }
        }
        else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
2000118e:	687b      	ldr	r3, [r7, #4]
20001190:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
20001194:	2b01      	cmp	r3, #1
20001196:	d125      	bne.n	200011e4 <mss_spi_isr+0xc8>
        {
            /* Block handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
20001198:	e017      	b.n	200011ca <mss_spi_isr+0xae>
            {
                rx_frame = this_spi->hw_reg->RX_DATA;                /* Read from FIFO irrespective */
2000119a:	687b      	ldr	r3, [r7, #4]
2000119c:	681b      	ldr	r3, [r3, #0]
2000119e:	691b      	ldr	r3, [r3, #16]
200011a0:	60fb      	str	r3, [r7, #12]
                if(this_spi->slave_rx_idx < this_spi->slave_rx_size) /* Write to array if required */
200011a2:	687b      	ldr	r3, [r7, #4]
200011a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200011a6:	687b      	ldr	r3, [r7, #4]
200011a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200011aa:	429a      	cmp	r2, r3
200011ac:	d207      	bcs.n	200011be <mss_spi_isr+0xa2>
                {
                    this_spi->slave_rx_buffer[this_spi->slave_rx_idx] = (uint8_t)rx_frame;
200011ae:	687b      	ldr	r3, [r7, #4]
200011b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
200011b2:	687b      	ldr	r3, [r7, #4]
200011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200011b6:	4413      	add	r3, r2
200011b8:	68fa      	ldr	r2, [r7, #12]
200011ba:	b2d2      	uxtb	r2, r2
200011bc:	701a      	strb	r2, [r3, #0]
                }

                ++this_spi->slave_rx_idx;            
200011be:	687b      	ldr	r3, [r7, #4]
200011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200011c2:	f103 0201 	add.w	r2, r3, #1
200011c6:	687b      	ldr	r3, [r7, #4]
200011c8:	631a      	str	r2, [r3, #48]	; 0x30
            }
        }
        else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
        {
            /* Block handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
200011ca:	687b      	ldr	r3, [r7, #4]
200011cc:	681b      	ldr	r3, [r3, #0]
200011ce:	689b      	ldr	r3, [r3, #8]
200011d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
200011d4:	2b00      	cmp	r3, #0
200011d6:	d0e0      	beq.n	2000119a <mss_spi_isr+0x7e>
200011d8:	e00c      	b.n	200011f4 <mss_spi_isr+0xd8>
        else
        {
            /* No slave handling in place so just purge FIFO */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
200011da:	687b      	ldr	r3, [r7, #4]
200011dc:	681b      	ldr	r3, [r3, #0]
200011de:	691b      	ldr	r3, [r3, #16]
200011e0:	60fb      	str	r3, [r7, #12]
200011e2:	e000      	b.n	200011e6 <mss_spi_isr+0xca>
            }
        }
        else
        {
            /* No slave handling in place so just purge FIFO */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
200011e4:	bf00      	nop
200011e6:	687b      	ldr	r3, [r7, #4]
200011e8:	681b      	ldr	r3, [r3, #0]
200011ea:	689b      	ldr	r3, [r3, #8]
200011ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
200011f0:	2b00      	cmp	r3, #0
200011f2:	d0f2      	beq.n	200011da <mss_spi_isr+0xbe>
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
            }
        }

        this_spi->hw_reg->INT_CLEAR = RXDONE_IRQ_MASK;
200011f4:	687b      	ldr	r3, [r7, #4]
200011f6:	681b      	ldr	r3, [r3, #0]
200011f8:	f04f 0202 	mov.w	r2, #2
200011fc:	60da      	str	r2, [r3, #12]
    }

   /* Handle transmit. */
    if(0u != (*this_mis & TXDONE_IRQ_MASK))
200011fe:	693b      	ldr	r3, [r7, #16]
20001200:	681b      	ldr	r3, [r3, #0]
20001202:	f003 0301 	and.w	r3, r3, #1
20001206:	b2db      	uxtb	r3, r3
20001208:	2b00      	cmp	r3, #0
2000120a:	d012      	beq.n	20001232 <mss_spi_isr+0x116>
    {
        if( MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode )
2000120c:	687b      	ldr	r3, [r7, #4]
2000120e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
20001212:	2b02      	cmp	r3, #2
20001214:	d105      	bne.n	20001222 <mss_spi_isr+0x106>
        {
           /* Reload slave tx frame into Tx data register. */
            this_spi->hw_reg->TX_DATA = this_spi->slave_tx_frame;
20001216:	687b      	ldr	r3, [r7, #4]
20001218:	681b      	ldr	r3, [r3, #0]
2000121a:	687a      	ldr	r2, [r7, #4]
2000121c:	6f92      	ldr	r2, [r2, #120]	; 0x78
2000121e:	615a      	str	r2, [r3, #20]
20001220:	e002      	b.n	20001228 <mss_spi_isr+0x10c>
        }
        else /* Must be block mode so load FIFO to the max */
        {
            fill_slave_tx_fifo(this_spi);
20001222:	6878      	ldr	r0, [r7, #4]
20001224:	f7ff feb4 	bl	20000f90 <fill_slave_tx_fifo>
        }

        this_spi->hw_reg->INT_CLEAR = TXDONE_IRQ_MASK;
20001228:	687b      	ldr	r3, [r7, #4]
2000122a:	681b      	ldr	r3, [r3, #0]
2000122c:	f04f 0201 	mov.w	r2, #1
20001230:	60da      	str	r2, [r3, #12]
    }
    
    /* Handle command interrupt. */
    if(0u != (*this_mis & CMD_IRQ_MASK))
20001232:	693b      	ldr	r3, [r7, #16]
20001234:	681b      	ldr	r3, [r3, #0]
20001236:	f003 0310 	and.w	r3, r3, #16
2000123a:	2b00      	cmp	r3, #0
2000123c:	d023      	beq.n	20001286 <mss_spi_isr+0x16a>
    {
        read_slave_rx_fifo(this_spi);
2000123e:	6878      	ldr	r0, [r7, #4]
20001240:	f7ff ff16 	bl	20001070 <read_slave_rx_fifo>
        
        /*
         * Call the command handler if one exists.
         */
        if(0u != this_spi->cmd_handler)
20001244:	687b      	ldr	r3, [r7, #4]
20001246:	6a1b      	ldr	r3, [r3, #32]
20001248:	2b00      	cmp	r3, #0
2000124a:	d00b      	beq.n	20001264 <mss_spi_isr+0x148>
        {
            (*this_spi->cmd_handler)(this_spi->slave_rx_buffer, this_spi->slave_rx_idx);
2000124c:	687b      	ldr	r3, [r7, #4]
2000124e:	6a1b      	ldr	r3, [r3, #32]
20001250:	687a      	ldr	r2, [r7, #4]
20001252:	6a91      	ldr	r1, [r2, #40]	; 0x28
20001254:	687a      	ldr	r2, [r7, #4]
20001256:	6b12      	ldr	r2, [r2, #48]	; 0x30
20001258:	4608      	mov	r0, r1
2000125a:	4611      	mov	r1, r2
2000125c:	4798      	blx	r3
            fill_slave_tx_fifo(this_spi);
2000125e:	6878      	ldr	r0, [r7, #4]
20001260:	f7ff fe96 	bl	20000f90 <fill_slave_tx_fifo>
        }
        /* Set cmd_done to indicate it is now safe to 0 fill TX FIFO */
        this_spi->cmd_done = 1u;
20001264:	687b      	ldr	r3, [r7, #4]
20001266:	f04f 0201 	mov.w	r2, #1
2000126a:	625a      	str	r2, [r3, #36]	; 0x24
        /* Disable command interrupt until slave select becomes de-asserted to avoid retriggering. */
        this_spi->hw_reg->CONTROL2 &= ~(uint32_t)C2_ENABLE_CMD_IRQ_MASK;
2000126c:	687b      	ldr	r3, [r7, #4]
2000126e:	681b      	ldr	r3, [r3, #0]
20001270:	687a      	ldr	r2, [r7, #4]
20001272:	6812      	ldr	r2, [r2, #0]
20001274:	6a92      	ldr	r2, [r2, #40]	; 0x28
20001276:	f022 0210 	bic.w	r2, r2, #16
2000127a:	629a      	str	r2, [r3, #40]	; 0x28
        this_spi->hw_reg->INT_CLEAR = CMD_IRQ_MASK;
2000127c:	687b      	ldr	r3, [r7, #4]
2000127e:	681b      	ldr	r3, [r3, #0]
20001280:	f04f 0210 	mov.w	r2, #16
20001284:	60da      	str	r2, [r3, #12]
    }

    if(0u != (*this_mis & RXOVFLOW_IRQ_MASK))
20001286:	693b      	ldr	r3, [r7, #16]
20001288:	681b      	ldr	r3, [r3, #0]
2000128a:	f003 0304 	and.w	r3, r3, #4
2000128e:	2b00      	cmp	r3, #0
20001290:	d00f      	beq.n	200012b2 <mss_spi_isr+0x196>
    {
        /*
         * Receive overflow, not a lot we can do for this. Reset the receive
         *  FIFO, clear the interrupt and hope it doesn't happen again...
         */
        this_spi->hw_reg->COMMAND |= RX_FIFO_RESET_MASK;
20001292:	687b      	ldr	r3, [r7, #4]
20001294:	681b      	ldr	r3, [r3, #0]
20001296:	687a      	ldr	r2, [r7, #4]
20001298:	6812      	ldr	r2, [r2, #0]
2000129a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
2000129c:	f042 0204 	orr.w	r2, r2, #4
200012a0:	62da      	str	r2, [r3, #44]	; 0x2c
        recover_from_rx_overflow(this_spi);
200012a2:	6878      	ldr	r0, [r7, #4]
200012a4:	f7ff fbf2 	bl	20000a8c <recover_from_rx_overflow>
        this_spi->hw_reg->INT_CLEAR = RXOVFLOW_IRQ_MASK;
200012a8:	687b      	ldr	r3, [r7, #4]
200012aa:	681b      	ldr	r3, [r3, #0]
200012ac:	f04f 0204 	mov.w	r2, #4
200012b0:	60da      	str	r2, [r3, #12]
     * slave TX FIFO data setup (if there is one).
     * In block mode this will probably not be very successful as we will
     * be out of synch with the master but the reset on SSEND will hopefully
     * take care of that for the next transfer.
     */
    if(0u != (*this_mis & TXURUN_IRQ_MASK))
200012b2:	693b      	ldr	r3, [r7, #16]
200012b4:	681b      	ldr	r3, [r3, #0]
200012b6:	f003 0308 	and.w	r3, r3, #8
200012ba:	2b00      	cmp	r3, #0
200012bc:	d031      	beq.n	20001322 <mss_spi_isr+0x206>
    {
        this_spi->hw_reg->COMMAND |= TX_FIFO_RESET_MASK;
200012be:	687b      	ldr	r3, [r7, #4]
200012c0:	681b      	ldr	r3, [r3, #0]
200012c2:	687a      	ldr	r2, [r7, #4]
200012c4:	6812      	ldr	r2, [r2, #0]
200012c6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
200012c8:	f042 0208 	orr.w	r2, r2, #8
200012cc:	62da      	str	r2, [r3, #44]	; 0x2c
        if( MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode )
200012ce:	687b      	ldr	r3, [r7, #4]
200012d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
200012d4:	2b02      	cmp	r3, #2
200012d6:	d113      	bne.n	20001300 <mss_spi_isr+0x1e4>
        {
            this_spi->hw_reg->CONTROL = (this_spi->hw_reg->CONTROL & ~TXRXDFCOUNT_MASK)
200012d8:	687b      	ldr	r3, [r7, #4]
200012da:	681a      	ldr	r2, [r3, #0]
200012dc:	687b      	ldr	r3, [r7, #4]
200012de:	681b      	ldr	r3, [r3, #0]
200012e0:	6819      	ldr	r1, [r3, #0]
200012e2:	f240 03ff 	movw	r3, #255	; 0xff
200012e6:	f6cf 7300 	movt	r3, #65280	; 0xff00
200012ea:	ea01 0303 	and.w	r3, r1, r3
200012ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
200012f2:	6013      	str	r3, [r2, #0]
                                        | ((uint32_t)1u << TXRXDFCOUNT_SHIFT);
           /* Reload slave tx frame into Tx data register. */
            this_spi->hw_reg->TX_DATA = this_spi->slave_tx_frame;
200012f4:	687b      	ldr	r3, [r7, #4]
200012f6:	681b      	ldr	r3, [r3, #0]
200012f8:	687a      	ldr	r2, [r7, #4]
200012fa:	6f92      	ldr	r2, [r2, #120]	; 0x78
200012fc:	615a      	str	r2, [r3, #20]
200012fe:	e00b      	b.n	20001318 <mss_spi_isr+0x1fc>
        }
        else if( MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode )
20001300:	687b      	ldr	r3, [r7, #4]
20001302:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
20001306:	2b01      	cmp	r3, #1
20001308:	d106      	bne.n	20001318 <mss_spi_isr+0x1fc>
        {
            /* Block mode so reload FIFO to the max */
            this_spi->slave_tx_idx = 0u;
2000130a:	687b      	ldr	r3, [r7, #4]
2000130c:	f04f 0200 	mov.w	r2, #0
20001310:	611a      	str	r2, [r3, #16]
            fill_slave_tx_fifo(this_spi);
20001312:	6878      	ldr	r0, [r7, #4]
20001314:	f7ff fe3c 	bl	20000f90 <fill_slave_tx_fifo>
        else
        {
            /* Not frame or block mode? Can't do anything here... */
        }

        this_spi->hw_reg->INT_CLEAR = TXURUN_IRQ_MASK;
20001318:	687b      	ldr	r3, [r7, #4]
2000131a:	681b      	ldr	r3, [r3, #0]
2000131c:	f04f 0208 	mov.w	r2, #8
20001320:	60da      	str	r2, [r3, #12]
    /*
     * Handle slave select becoming de-asserted. Only enables if
     * we are operating in block mode, in frame mode we do everything
     * in the receive and transmit interrupt handlers.
     */
    if(0u != (*this_mis & SSEND_IRQ_MASK))
20001322:	693b      	ldr	r3, [r7, #16]
20001324:	681b      	ldr	r3, [r3, #0]
20001326:	f003 0320 	and.w	r3, r3, #32
2000132a:	2b00      	cmp	r3, #0
2000132c:	d049      	beq.n	200013c2 <mss_spi_isr+0x2a6>
    {
        uint32_t rx_size;
        
        read_slave_rx_fifo(this_spi);
2000132e:	6878      	ldr	r0, [r7, #4]
20001330:	f7ff fe9e 	bl	20001070 <read_slave_rx_fifo>
        rx_size = this_spi->slave_rx_idx;
20001334:	687b      	ldr	r3, [r7, #4]
20001336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001338:	617b      	str	r3, [r7, #20]
        /*
         * Re-enable command interrupt if required and clear all the response
         * buffer state in readiness for next response. This must be done
         * before reloading the TX FIFO.
         */
        if(0u != this_spi->cmd_handler)
2000133a:	687b      	ldr	r3, [r7, #4]
2000133c:	6a1b      	ldr	r3, [r3, #32]
2000133e:	2b00      	cmp	r3, #0
20001340:	d01c      	beq.n	2000137c <mss_spi_isr+0x260>
        {
            this_spi->cmd_done = 0u;
20001342:	687b      	ldr	r3, [r7, #4]
20001344:	f04f 0200 	mov.w	r2, #0
20001348:	625a      	str	r2, [r3, #36]	; 0x24
            this_spi->resp_tx_buffer = 0u;
2000134a:	687b      	ldr	r3, [r7, #4]
2000134c:	f04f 0200 	mov.w	r2, #0
20001350:	615a      	str	r2, [r3, #20]
            this_spi->resp_buff_size = 0u;
20001352:	687b      	ldr	r3, [r7, #4]
20001354:	f04f 0200 	mov.w	r2, #0
20001358:	619a      	str	r2, [r3, #24]
            this_spi->resp_buff_tx_idx = 0u;
2000135a:	687b      	ldr	r3, [r7, #4]
2000135c:	f04f 0200 	mov.w	r2, #0
20001360:	61da      	str	r2, [r3, #28]
            this_spi->hw_reg->INT_CLEAR = CMD_IRQ_MASK;
20001362:	687b      	ldr	r3, [r7, #4]
20001364:	681b      	ldr	r3, [r3, #0]
20001366:	f04f 0210 	mov.w	r2, #16
2000136a:	60da      	str	r2, [r3, #12]
            this_spi->hw_reg->CONTROL2 |= C2_ENABLE_CMD_IRQ_MASK;
2000136c:	687b      	ldr	r3, [r7, #4]
2000136e:	681b      	ldr	r3, [r3, #0]
20001370:	687a      	ldr	r2, [r7, #4]
20001372:	6812      	ldr	r2, [r2, #0]
20001374:	6a92      	ldr	r2, [r2, #40]	; 0x28
20001376:	f042 0210 	orr.w	r2, r2, #16
2000137a:	629a      	str	r2, [r3, #40]	; 0x28
        /* 
         * Reset the transmit index to 0 to restart transmit at the start of the
         * transmit buffer in the next transaction. This also requires flushing
         * the Tx FIFO and refilling it with the start of Tx data buffer.
         */
        this_spi->slave_tx_idx = 0u;
2000137c:	687b      	ldr	r3, [r7, #4]
2000137e:	f04f 0200 	mov.w	r2, #0
20001382:	611a      	str	r2, [r3, #16]
        this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
20001384:	687b      	ldr	r3, [r7, #4]
20001386:	681b      	ldr	r3, [r3, #0]
20001388:	687a      	ldr	r2, [r7, #4]
2000138a:	6812      	ldr	r2, [r2, #0]
2000138c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
2000138e:	f042 020c 	orr.w	r2, r2, #12
20001392:	62da      	str	r2, [r3, #44]	; 0x2c
        fill_slave_tx_fifo(this_spi);
20001394:	6878      	ldr	r0, [r7, #4]
20001396:	f7ff fdfb 	bl	20000f90 <fill_slave_tx_fifo>
        
        /* Prepare to receive next packet. */
        this_spi->slave_rx_idx = 0u;
2000139a:	687b      	ldr	r3, [r7, #4]
2000139c:	f04f 0200 	mov.w	r2, #0
200013a0:	631a      	str	r2, [r3, #48]	; 0x30
        /*
         * Call the receive handler if one exists.
         */
        if(0u != this_spi->block_rx_handler)
200013a2:	687b      	ldr	r3, [r7, #4]
200013a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
200013a6:	2b00      	cmp	r3, #0
200013a8:	d006      	beq.n	200013b8 <mss_spi_isr+0x29c>
        {
            (*this_spi->block_rx_handler)(this_spi->slave_rx_buffer, rx_size);
200013aa:	687b      	ldr	r3, [r7, #4]
200013ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
200013ae:	687a      	ldr	r2, [r7, #4]
200013b0:	6a92      	ldr	r2, [r2, #40]	; 0x28
200013b2:	4610      	mov	r0, r2
200013b4:	6979      	ldr	r1, [r7, #20]
200013b6:	4798      	blx	r3
        }
        
        this_spi->hw_reg->INT_CLEAR = SSEND_IRQ_MASK;
200013b8:	687b      	ldr	r3, [r7, #4]
200013ba:	681b      	ldr	r3, [r3, #0]
200013bc:	f04f 0220 	mov.w	r2, #32
200013c0:	60da      	str	r2, [r3, #12]
    }
}
200013c2:	f107 0718 	add.w	r7, r7, #24
200013c6:	46bd      	mov	sp, r7
200013c8:	bd80      	pop	{r7, pc}
200013ca:	bf00      	nop

200013cc <SPI0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void SPI0_IRQHandler(void)
#else
void SPI0_IRQHandler( void )
#endif
{
200013cc:	4668      	mov	r0, sp
200013ce:	f020 0107 	bic.w	r1, r0, #7
200013d2:	468d      	mov	sp, r1
200013d4:	b589      	push	{r0, r3, r7, lr}
200013d6:	af00      	add	r7, sp, #0
    mss_spi_isr(&g_mss_spi0);
200013d8:	f242 7078 	movw	r0, #10104	; 0x2778
200013dc:	f2c2 0000 	movt	r0, #8192	; 0x2000
200013e0:	f7ff fe9c 	bl	2000111c <mss_spi_isr>
    NVIC_ClearPendingIRQ(SPI0_IRQn);
200013e4:	f04f 000c 	mov.w	r0, #12
200013e8:	f7ff fa98 	bl	2000091c <NVIC_ClearPendingIRQ>
}
200013ec:	46bd      	mov	sp, r7
200013ee:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200013f2:	4685      	mov	sp, r0
200013f4:	4770      	bx	lr
200013f6:	bf00      	nop

200013f8 <SPI1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void SPI1_IRQHandler(void)
#else
void SPI1_IRQHandler(void)
#endif
{
200013f8:	4668      	mov	r0, sp
200013fa:	f020 0107 	bic.w	r1, r0, #7
200013fe:	468d      	mov	sp, r1
20001400:	b589      	push	{r0, r3, r7, lr}
20001402:	af00      	add	r7, sp, #0
    mss_spi_isr(&g_mss_spi1);
20001404:	f242 60f4 	movw	r0, #9972	; 0x26f4
20001408:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000140c:	f7ff fe86 	bl	2000111c <mss_spi_isr>
    NVIC_ClearPendingIRQ(SPI1_IRQn);
20001410:	f04f 000d 	mov.w	r0, #13
20001414:	f7ff fa82 	bl	2000091c <NVIC_ClearPendingIRQ>
}
20001418:	46bd      	mov	sp, r7
2000141a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000141e:	4685      	mov	sp, r0
20001420:	4770      	bx	lr
20001422:	bf00      	nop

20001424 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20001424:	b480      	push	{r7}
20001426:	b083      	sub	sp, #12
20001428:	af00      	add	r7, sp, #0
2000142a:	4603      	mov	r3, r0
2000142c:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
2000142e:	f24e 1300 	movw	r3, #57600	; 0xe100
20001432:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001436:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
2000143a:	ea4f 1252 	mov.w	r2, r2, lsr #5
2000143e:	88f9      	ldrh	r1, [r7, #6]
20001440:	f001 011f 	and.w	r1, r1, #31
20001444:	f04f 0001 	mov.w	r0, #1
20001448:	fa00 f101 	lsl.w	r1, r0, r1
2000144c:	f102 0260 	add.w	r2, r2, #96	; 0x60
20001450:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20001454:	f107 070c 	add.w	r7, r7, #12
20001458:	46bd      	mov	sp, r7
2000145a:	bc80      	pop	{r7}
2000145c:	4770      	bx	lr
2000145e:	bf00      	nop

20001460 <MSS_GPIO_init>:
/*-------------------------------------------------------------------------*//**
 * MSS_GPIO_init
 * See "mss_gpio.h" for details of how to use this function.
 */
void MSS_GPIO_init( void )
{
20001460:	b580      	push	{r7, lr}
20001462:	b082      	sub	sp, #8
20001464:	af00      	add	r7, sp, #0
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
20001466:	f242 0300 	movw	r3, #8192	; 0x2000
2000146a:	f2ce 0304 	movt	r3, #57348	; 0xe004
2000146e:	f242 0200 	movw	r2, #8192	; 0x2000
20001472:	f2ce 0204 	movt	r2, #57348	; 0xe004
20001476:	6b12      	ldr	r2, [r2, #48]	; 0x30
20001478:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2000147c:	631a      	str	r2, [r3, #48]	; 0x30
    /* Clear any previously pended MSS GPIO interrupt */
    for ( i = 0U; i < NB_OF_GPIO; ++i )
2000147e:	f04f 0300 	mov.w	r3, #0
20001482:	607b      	str	r3, [r7, #4]
20001484:	e00e      	b.n	200014a4 <MSS_GPIO_init+0x44>
    {
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[i] );
20001486:	687a      	ldr	r2, [r7, #4]
20001488:	f242 53b0 	movw	r3, #9648	; 0x25b0
2000148c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001490:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
20001494:	b21b      	sxth	r3, r3
20001496:	4618      	mov	r0, r3
20001498:	f7ff ffc4 	bl	20001424 <NVIC_ClearPendingIRQ>
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
    /* Clear any previously pended MSS GPIO interrupt */
    for ( i = 0U; i < NB_OF_GPIO; ++i )
2000149c:	687b      	ldr	r3, [r7, #4]
2000149e:	f103 0301 	add.w	r3, r3, #1
200014a2:	607b      	str	r3, [r7, #4]
200014a4:	687b      	ldr	r3, [r7, #4]
200014a6:	2b1f      	cmp	r3, #31
200014a8:	d9ed      	bls.n	20001486 <MSS_GPIO_init+0x26>
    {
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[i] );
    }
    /* Take MSS GPIO hardware out of reset. */
    SYSREG->SOFT_RST_CR &= ~SYSREG_GPIO_SOFTRESET_MASK;
200014aa:	f242 0300 	movw	r3, #8192	; 0x2000
200014ae:	f2ce 0304 	movt	r3, #57348	; 0xe004
200014b2:	f242 0200 	movw	r2, #8192	; 0x2000
200014b6:	f2ce 0204 	movt	r2, #57348	; 0xe004
200014ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
200014bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
200014c0:	631a      	str	r2, [r3, #48]	; 0x30
}
200014c2:	f107 0708 	add.w	r7, r7, #8
200014c6:	46bd      	mov	sp, r7
200014c8:	bd80      	pop	{r7, pc}
200014ca:	bf00      	nop

200014cc <MSS_GPIO_set_output>:
void MSS_GPIO_set_output
(
    mss_gpio_id_t       port_id,
    uint8_t             value
)
{
200014cc:	b480      	push	{r7}
200014ce:	b085      	sub	sp, #20
200014d0:	af00      	add	r7, sp, #0
200014d2:	4602      	mov	r2, r0
200014d4:	460b      	mov	r3, r1
200014d6:	71fa      	strb	r2, [r7, #7]
200014d8:	71bb      	strb	r3, [r7, #6]
    uint32_t gpio_idx = (uint32_t)port_id;
200014da:	79fb      	ldrb	r3, [r7, #7]
200014dc:	60fb      	str	r3, [r7, #12]
    
    ASSERT( gpio_idx < NB_OF_GPIO );
200014de:	68fb      	ldr	r3, [r7, #12]
200014e0:	2b1f      	cmp	r3, #31
200014e2:	d900      	bls.n	200014e6 <MSS_GPIO_set_output+0x1a>
200014e4:	be00      	bkpt	0x0000
    
    if ( gpio_idx < NB_OF_GPIO )
200014e6:	68fb      	ldr	r3, [r7, #12]
200014e8:	2b1f      	cmp	r3, #31
200014ea:	d809      	bhi.n	20001500 <MSS_GPIO_set_output+0x34>
    {
        GPIO_BITBAND->GPIO_OUT[gpio_idx] = (uint32_t)value;
200014ec:	f240 0300 	movw	r3, #0
200014f0:	f2c4 2326 	movt	r3, #16934	; 0x4226
200014f4:	68fa      	ldr	r2, [r7, #12]
200014f6:	79b9      	ldrb	r1, [r7, #6]
200014f8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
200014fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
}
20001500:	f107 0714 	add.w	r7, r7, #20
20001504:	46bd      	mov	sp, r7
20001506:	bc80      	pop	{r7}
20001508:	4770      	bx	lr
2000150a:	bf00      	nop

2000150c <ACE_init>:

/*-------------------------------------------------------------------------*//**
  See "mss_ace.h" for details of how to use this function.
 */
void ACE_init( void )
{
2000150c:	b580      	push	{r7, lr}
2000150e:	af00      	add	r7, sp, #0
    /* Initialize driver's internal data. */
    ace_init_flags();
20001510:	f000 f902 	bl	20001718 <ace_init_flags>
    
    /* Initialize the data structures used by conversion functions. */
    ace_init_convert();
20001514:	f000 f808 	bl	20001528 <ace_init_convert>
}
20001518:	bd80      	pop	{r7, pc}
2000151a:	bf00      	nop

2000151c <SystemInit>:

/***************************************************************************//**
 * See system_a2fxxxm3f.h for details.
 */
void SystemInit(void)
{
2000151c:	b480      	push	{r7}
2000151e:	af00      	add	r7, sp, #0
    /*
     * Do not make use of global variables or make any asumptions regarding
     * memory content if modifying this function. The memory content has not been
     * initialised by the time this function is called by the start-up code.
     */
}
20001520:	46bd      	mov	sp, r7
20001522:	bc80      	pop	{r7}
20001524:	4770      	bx	lr
20001526:	bf00      	nop

20001528 <ace_init_convert>:

/*-------------------------------------------------------------------------*//**
 *
 */
void ace_init_convert(void)
{
20001528:	b480      	push	{r7}
2000152a:	b087      	sub	sp, #28
2000152c:	af00      	add	r7, sp, #0
    uint8_t abps_idx;
    int32_t channel;
    uint32_t saved_pc2_ctrl;
    
    /* Pause the SSE PC2 while accesses to ACB from APB3 are taking place. */
    saved_pc2_ctrl = ACE->PC2_CTRL;
2000152e:	f240 0300 	movw	r3, #0
20001532:	f2c4 0302 	movt	r3, #16386	; 0x4002
20001536:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
2000153a:	60fb      	str	r3, [r7, #12]
    ACE->PC2_CTRL = 0u;
2000153c:	f240 0300 	movw	r3, #0
20001540:	f2c4 0302 	movt	r3, #16386	; 0x4002
20001544:	f04f 0200 	mov.w	r2, #0
20001548:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    
    /* Populate the g_gdec_lut look-up table. */
    for(abps_idx = 0u; abps_idx < MAX_NB_OF_APBS; ++abps_idx)
2000154c:	f04f 0300 	mov.w	r3, #0
20001550:	71fb      	strb	r3, [r7, #7]
20001552:	e039      	b.n	200015c8 <ace_init_convert+0xa0>
    {
        uint8_t quad_id;
        uint8_t acb_config_byte;
        uint8_t channel_is_abps2;
        
        quad_id = abps_idx / 2u;
20001554:	79fb      	ldrb	r3, [r7, #7]
20001556:	ea4f 0353 	mov.w	r3, r3, lsr #1
2000155a:	747b      	strb	r3, [r7, #17]
        acb_config_byte = ACE->ACB_DATA[quad_id].b8;
2000155c:	f240 0200 	movw	r2, #0
20001560:	f2c4 0202 	movt	r2, #16386	; 0x4002
20001564:	7c79      	ldrb	r1, [r7, #17]
20001566:	460b      	mov	r3, r1
20001568:	ea4f 0343 	mov.w	r3, r3, lsl #1
2000156c:	440b      	add	r3, r1
2000156e:	ea4f 1303 	mov.w	r3, r3, lsl #4
20001572:	4413      	add	r3, r2
20001574:	f503 7308 	add.w	r3, r3, #544	; 0x220
20001578:	791b      	ldrb	r3, [r3, #4]
2000157a:	74bb      	strb	r3, [r7, #18]
        channel_is_abps2 = abps_idx & 0x01u;
2000157c:	79fb      	ldrb	r3, [r7, #7]
2000157e:	f003 0301 	and.w	r3, r3, #1
20001582:	74fb      	strb	r3, [r7, #19]
        if(channel_is_abps2)
20001584:	7cfb      	ldrb	r3, [r7, #19]
20001586:	2b00      	cmp	r3, #0
20001588:	d00d      	beq.n	200015a6 <ace_init_convert+0x7e>
        {
            /* ABPS2 */
            g_gdec_lut[abps_idx] = (acb_config_byte >> 5u) & 0x03u;
2000158a:	79f9      	ldrb	r1, [r7, #7]
2000158c:	7cbb      	ldrb	r3, [r7, #18]
2000158e:	ea4f 1353 	mov.w	r3, r3, lsr #5
20001592:	b2db      	uxtb	r3, r3
20001594:	461a      	mov	r2, r3
20001596:	f002 0203 	and.w	r2, r2, #3
2000159a:	f242 63e4 	movw	r3, #9956	; 0x26e4
2000159e:	f2c2 0300 	movt	r3, #8192	; 0x2000
200015a2:	545a      	strb	r2, [r3, r1]
200015a4:	e00c      	b.n	200015c0 <ace_init_convert+0x98>
        }
        else
        {
            /* ABPS1 */
            g_gdec_lut[abps_idx] = (acb_config_byte >> 1u) & 0x03u;
200015a6:	79f9      	ldrb	r1, [r7, #7]
200015a8:	7cbb      	ldrb	r3, [r7, #18]
200015aa:	ea4f 0353 	mov.w	r3, r3, lsr #1
200015ae:	b2db      	uxtb	r3, r3
200015b0:	461a      	mov	r2, r3
200015b2:	f002 0203 	and.w	r2, r2, #3
200015b6:	f242 63e4 	movw	r3, #9956	; 0x26e4
200015ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
200015be:	545a      	strb	r2, [r3, r1]
    /* Pause the SSE PC2 while accesses to ACB from APB3 are taking place. */
    saved_pc2_ctrl = ACE->PC2_CTRL;
    ACE->PC2_CTRL = 0u;
    
    /* Populate the g_gdec_lut look-up table. */
    for(abps_idx = 0u; abps_idx < MAX_NB_OF_APBS; ++abps_idx)
200015c0:	79fb      	ldrb	r3, [r7, #7]
200015c2:	f103 0301 	add.w	r3, r3, #1
200015c6:	71fb      	strb	r3, [r7, #7]
200015c8:	79fb      	ldrb	r3, [r7, #7]
200015ca:	2b09      	cmp	r3, #9
200015cc:	d9c2      	bls.n	20001554 <ace_init_convert+0x2c>
            g_gdec_lut[abps_idx] = (acb_config_byte >> 1u) & 0x03u;
        }
    }
    
    /* Populate the channel_type_lut_h look-up table. */
    for(channel = 0; channel < ACE_NB_OF_INPUT_CHANNELS; ++channel)
200015ce:	f04f 0300 	mov.w	r3, #0
200015d2:	60bb      	str	r3, [r7, #8]
200015d4:	e073      	b.n	200016be <ace_init_convert+0x196>
        uint8_t quad_id;
        uint8_t acb_config_byte;
        adc_channel_id_t channel_id;
        channel_type_t channel_type;
    
        channel_id = g_ace_channel_desc_table[channel].signal_id;
200015d6:	68ba      	ldr	r2, [r7, #8]
200015d8:	f242 63b0 	movw	r3, #9904	; 0x26b0
200015dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200015e0:	ea4f 1202 	mov.w	r2, r2, lsl #4
200015e4:	4413      	add	r3, r2
200015e6:	791b      	ldrb	r3, [r3, #4]
200015e8:	75bb      	strb	r3, [r7, #22]
        quad_id = channel_quad_lut[channel_id];
200015ea:	7dba      	ldrb	r2, [r7, #22]
200015ec:	f242 635c 	movw	r3, #9820	; 0x265c
200015f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200015f4:	5c9b      	ldrb	r3, [r3, r2]
200015f6:	753b      	strb	r3, [r7, #20]
        
        switch (channel_type_lut[channel_id])
200015f8:	7dba      	ldrb	r2, [r7, #22]
200015fa:	f242 632c 	movw	r3, #9772	; 0x262c
200015fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001602:	5c9b      	ldrb	r3, [r3, r2]
20001604:	2b01      	cmp	r3, #1
20001606:	d007      	beq.n	20001618 <ace_init_convert+0xf0>
20001608:	2b02      	cmp	r3, #2
2000160a:	d027      	beq.n	2000165c <ace_init_convert+0x134>
2000160c:	2b00      	cmp	r3, #0
2000160e:	d147      	bne.n	200016a0 <ace_init_convert+0x178>
        {
            case VOLTAGE_CHANNEL:
                channel_type = VOLTAGE;
20001610:	f04f 0300 	mov.w	r3, #0
20001614:	75fb      	strb	r3, [r7, #23]
                break;
20001616:	e047      	b.n	200016a8 <ace_init_convert+0x180>
                
            case CURRENT_CHANNEL:
                ASSERT( quad_id != INVALID_QUAD_ID );
20001618:	7d3b      	ldrb	r3, [r7, #20]
2000161a:	2bff      	cmp	r3, #255	; 0xff
2000161c:	d100      	bne.n	20001620 <ace_init_convert+0xf8>
2000161e:	be00      	bkpt	0x0000
                acb_config_byte = ACE->ACB_DATA[quad_id].b9;
20001620:	f240 0200 	movw	r2, #0
20001624:	f2c4 0202 	movt	r2, #16386	; 0x4002
20001628:	7d39      	ldrb	r1, [r7, #20]
2000162a:	460b      	mov	r3, r1
2000162c:	ea4f 0343 	mov.w	r3, r3, lsl #1
20001630:	440b      	add	r3, r1
20001632:	ea4f 1303 	mov.w	r3, r3, lsl #4
20001636:	4413      	add	r3, r2
20001638:	f503 7308 	add.w	r3, r3, #544	; 0x220
2000163c:	7a1b      	ldrb	r3, [r3, #8]
2000163e:	757b      	strb	r3, [r7, #21]
                if ( acb_config_byte & 0x01u )
20001640:	7d7b      	ldrb	r3, [r7, #21]
20001642:	f003 0301 	and.w	r3, r3, #1
20001646:	b2db      	uxtb	r3, r3
20001648:	2b00      	cmp	r3, #0
2000164a:	d003      	beq.n	20001654 <ace_init_convert+0x12c>
                {
                    channel_type = VOLTAGE;
2000164c:	f04f 0300 	mov.w	r3, #0
20001650:	75fb      	strb	r3, [r7, #23]
                }
                else
                {
                    channel_type = CURRENT;
                }
                break;
20001652:	e029      	b.n	200016a8 <ace_init_convert+0x180>
                {
                    channel_type = VOLTAGE;
                }
                else
                {
                    channel_type = CURRENT;
20001654:	f04f 0301 	mov.w	r3, #1
20001658:	75fb      	strb	r3, [r7, #23]
                }
                break;
2000165a:	e025      	b.n	200016a8 <ace_init_convert+0x180>
            
            case TEMPERATURE_CHANNEL:
                ASSERT( quad_id != INVALID_QUAD_ID );
2000165c:	7d3b      	ldrb	r3, [r7, #20]
2000165e:	2bff      	cmp	r3, #255	; 0xff
20001660:	d100      	bne.n	20001664 <ace_init_convert+0x13c>
20001662:	be00      	bkpt	0x0000
                acb_config_byte = ACE->ACB_DATA[quad_id].b10;
20001664:	f240 0200 	movw	r2, #0
20001668:	f2c4 0202 	movt	r2, #16386	; 0x4002
2000166c:	7d39      	ldrb	r1, [r7, #20]
2000166e:	460b      	mov	r3, r1
20001670:	ea4f 0343 	mov.w	r3, r3, lsl #1
20001674:	440b      	add	r3, r1
20001676:	ea4f 1303 	mov.w	r3, r3, lsl #4
2000167a:	4413      	add	r3, r2
2000167c:	f503 730a 	add.w	r3, r3, #552	; 0x228
20001680:	791b      	ldrb	r3, [r3, #4]
20001682:	757b      	strb	r3, [r7, #21]
                if ( acb_config_byte & 0x01u )
20001684:	7d7b      	ldrb	r3, [r7, #21]
20001686:	f003 0301 	and.w	r3, r3, #1
2000168a:	b2db      	uxtb	r3, r3
2000168c:	2b00      	cmp	r3, #0
2000168e:	d003      	beq.n	20001698 <ace_init_convert+0x170>
                {
                    channel_type = VOLTAGE;
20001690:	f04f 0300 	mov.w	r3, #0
20001694:	75fb      	strb	r3, [r7, #23]
                }
                else
                {
                    channel_type = TEMPERATURE;
                }
                break;
20001696:	e007      	b.n	200016a8 <ace_init_convert+0x180>
                {
                    channel_type = VOLTAGE;
                }
                else
                {
                    channel_type = TEMPERATURE;
20001698:	f04f 0302 	mov.w	r3, #2
2000169c:	75fb      	strb	r3, [r7, #23]
                }
                break;
2000169e:	e003      	b.n	200016a8 <ace_init_convert+0x180>
                
            default:
                ASSERT(0);
200016a0:	be00      	bkpt	0x0000
                channel_type = VOLTAGE;
200016a2:	f04f 0300 	mov.w	r3, #0
200016a6:	75fb      	strb	r3, [r7, #23]
                break;
        }
        
        channel_type_lut_h[channel] = channel_type;
200016a8:	68ba      	ldr	r2, [r7, #8]
200016aa:	f242 63f0 	movw	r3, #9968	; 0x26f0
200016ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
200016b2:	7df9      	ldrb	r1, [r7, #23]
200016b4:	5499      	strb	r1, [r3, r2]
            g_gdec_lut[abps_idx] = (acb_config_byte >> 1u) & 0x03u;
        }
    }
    
    /* Populate the channel_type_lut_h look-up table. */
    for(channel = 0; channel < ACE_NB_OF_INPUT_CHANNELS; ++channel)
200016b6:	68bb      	ldr	r3, [r7, #8]
200016b8:	f103 0301 	add.w	r3, r3, #1
200016bc:	60bb      	str	r3, [r7, #8]
200016be:	68bb      	ldr	r3, [r7, #8]
200016c0:	2b02      	cmp	r3, #2
200016c2:	dd88      	ble.n	200015d6 <ace_init_convert+0xae>
        
        channel_type_lut_h[channel] = channel_type;
    }
    
    /* Restore SSE PC2 operations. */
    ACE->PC2_CTRL = saved_pc2_ctrl;
200016c4:	f240 0300 	movw	r3, #0
200016c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
200016cc:	68fa      	ldr	r2, [r7, #12]
200016ce:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
200016d2:	f107 071c 	add.w	r7, r7, #28
200016d6:	46bd      	mov	sp, r7
200016d8:	bc80      	pop	{r7}
200016da:	4770      	bx	lr

200016dc <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
200016dc:	b480      	push	{r7}
200016de:	b083      	sub	sp, #12
200016e0:	af00      	add	r7, sp, #0
200016e2:	4603      	mov	r3, r0
200016e4:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
200016e6:	f24e 1300 	movw	r3, #57600	; 0xe100
200016ea:	f2ce 0300 	movt	r3, #57344	; 0xe000
200016ee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
200016f2:	ea4f 1252 	mov.w	r2, r2, lsr #5
200016f6:	88f9      	ldrh	r1, [r7, #6]
200016f8:	f001 011f 	and.w	r1, r1, #31
200016fc:	f04f 0001 	mov.w	r0, #1
20001700:	fa00 f101 	lsl.w	r1, r0, r1
20001704:	f102 0260 	add.w	r2, r2, #96	; 0x60
20001708:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
2000170c:	f107 070c 	add.w	r7, r7, #12
20001710:	46bd      	mov	sp, r7
20001712:	bc80      	pop	{r7}
20001714:	4770      	bx	lr
20001716:	bf00      	nop

20001718 <ace_init_flags>:
/*-------------------------------------------------------------------------*//**
  Intialise the ACE driver's internal data structures used by flag control
  functions.
 */
void ace_init_flags( void )
{
20001718:	b480      	push	{r7}
2000171a:	af00      	add	r7, sp, #0
        }
        
        g_ppe_global_flags_isr = 0u;
    }
#endif
}
2000171c:	46bd      	mov	sp, r7
2000171e:	bc80      	pop	{r7}
20001720:	4770      	bx	lr
20001722:	bf00      	nop

20001724 <process_flag_irq>:
/*-------------------------------------------------------------------------*//**
 * Actual PPE flag interrupt service routines:
 */

static void process_flag_irq( uint8_t threshold_flag_id )
{
20001724:	b480      	push	{r7}
20001726:	b083      	sub	sp, #12
20001728:	af00      	add	r7, sp, #0
2000172a:	4603      	mov	r3, r0
2000172c:	71fb      	strb	r3, [r7, #7]
            dummy_read = *(flags_irq_clear_regs_lut[flag_group]);
            ++dummy_read;
        }
    }
#endif
}
2000172e:	f107 070c 	add.w	r7, r7, #12
20001732:	46bd      	mov	sp, r7
20001734:	bc80      	pop	{r7}
20001736:	4770      	bx	lr

20001738 <ACE_PPE_Flag0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag0_IRQHandler( void )
#else
void ACE_PPE_Flag0_IRQHandler( void )
#endif
{
20001738:	4668      	mov	r0, sp
2000173a:	f020 0107 	bic.w	r1, r0, #7
2000173e:	468d      	mov	sp, r1
20001740:	b589      	push	{r0, r3, r7, lr}
20001742:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG0 );
20001744:	f04f 0000 	mov.w	r0, #0
20001748:	f7ff ffec 	bl	20001724 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag0_IRQn );
2000174c:	f04f 0076 	mov.w	r0, #118	; 0x76
20001750:	f7ff ffc4 	bl	200016dc <NVIC_ClearPendingIRQ>
}
20001754:	46bd      	mov	sp, r7
20001756:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000175a:	4685      	mov	sp, r0
2000175c:	4770      	bx	lr
2000175e:	bf00      	nop

20001760 <ACE_PPE_Flag1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag1_IRQHandler( void )
#else
void ACE_PPE_Flag1_IRQHandler( void )
#endif
{
20001760:	4668      	mov	r0, sp
20001762:	f020 0107 	bic.w	r1, r0, #7
20001766:	468d      	mov	sp, r1
20001768:	b589      	push	{r0, r3, r7, lr}
2000176a:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG1 );
2000176c:	f04f 0001 	mov.w	r0, #1
20001770:	f7ff ffd8 	bl	20001724 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag1_IRQn );
20001774:	f04f 0077 	mov.w	r0, #119	; 0x77
20001778:	f7ff ffb0 	bl	200016dc <NVIC_ClearPendingIRQ>
}
2000177c:	46bd      	mov	sp, r7
2000177e:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001782:	4685      	mov	sp, r0
20001784:	4770      	bx	lr
20001786:	bf00      	nop

20001788 <ACE_PPE_Flag2_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag2_IRQHandler( void )
#else
void ACE_PPE_Flag2_IRQHandler( void )
#endif
{
20001788:	4668      	mov	r0, sp
2000178a:	f020 0107 	bic.w	r1, r0, #7
2000178e:	468d      	mov	sp, r1
20001790:	b589      	push	{r0, r3, r7, lr}
20001792:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG2 );
20001794:	f04f 0002 	mov.w	r0, #2
20001798:	f7ff ffc4 	bl	20001724 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag2_IRQn );
2000179c:	f04f 0078 	mov.w	r0, #120	; 0x78
200017a0:	f7ff ff9c 	bl	200016dc <NVIC_ClearPendingIRQ>
}
200017a4:	46bd      	mov	sp, r7
200017a6:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200017aa:	4685      	mov	sp, r0
200017ac:	4770      	bx	lr
200017ae:	bf00      	nop

200017b0 <ACE_PPE_Flag3_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag3_IRQHandler( void )
#else
void ACE_PPE_Flag3_IRQHandler( void )
#endif
{
200017b0:	4668      	mov	r0, sp
200017b2:	f020 0107 	bic.w	r1, r0, #7
200017b6:	468d      	mov	sp, r1
200017b8:	b589      	push	{r0, r3, r7, lr}
200017ba:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG3 );
200017bc:	f04f 0003 	mov.w	r0, #3
200017c0:	f7ff ffb0 	bl	20001724 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag3_IRQn );
200017c4:	f04f 0079 	mov.w	r0, #121	; 0x79
200017c8:	f7ff ff88 	bl	200016dc <NVIC_ClearPendingIRQ>
}
200017cc:	46bd      	mov	sp, r7
200017ce:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200017d2:	4685      	mov	sp, r0
200017d4:	4770      	bx	lr
200017d6:	bf00      	nop

200017d8 <ACE_PPE_Flag4_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag4_IRQHandler( void )
#else
void ACE_PPE_Flag4_IRQHandler( void )
#endif
{
200017d8:	4668      	mov	r0, sp
200017da:	f020 0107 	bic.w	r1, r0, #7
200017de:	468d      	mov	sp, r1
200017e0:	b589      	push	{r0, r3, r7, lr}
200017e2:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG4 );
200017e4:	f04f 0004 	mov.w	r0, #4
200017e8:	f7ff ff9c 	bl	20001724 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag4_IRQn );
200017ec:	f04f 007a 	mov.w	r0, #122	; 0x7a
200017f0:	f7ff ff74 	bl	200016dc <NVIC_ClearPendingIRQ>
}
200017f4:	46bd      	mov	sp, r7
200017f6:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200017fa:	4685      	mov	sp, r0
200017fc:	4770      	bx	lr
200017fe:	bf00      	nop

20001800 <ACE_PPE_Flag5_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag5_IRQHandler( void )
#else
void ACE_PPE_Flag5_IRQHandler( void )
#endif
{
20001800:	4668      	mov	r0, sp
20001802:	f020 0107 	bic.w	r1, r0, #7
20001806:	468d      	mov	sp, r1
20001808:	b589      	push	{r0, r3, r7, lr}
2000180a:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG5 );
2000180c:	f04f 0005 	mov.w	r0, #5
20001810:	f7ff ff88 	bl	20001724 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag5_IRQn );
20001814:	f04f 007b 	mov.w	r0, #123	; 0x7b
20001818:	f7ff ff60 	bl	200016dc <NVIC_ClearPendingIRQ>
}
2000181c:	46bd      	mov	sp, r7
2000181e:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001822:	4685      	mov	sp, r0
20001824:	4770      	bx	lr
20001826:	bf00      	nop

20001828 <ACE_PPE_Flag6_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag6_IRQHandler( void )
#else
void ACE_PPE_Flag6_IRQHandler( void )
#endif
{
20001828:	4668      	mov	r0, sp
2000182a:	f020 0107 	bic.w	r1, r0, #7
2000182e:	468d      	mov	sp, r1
20001830:	b589      	push	{r0, r3, r7, lr}
20001832:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG6 );
20001834:	f04f 0006 	mov.w	r0, #6
20001838:	f7ff ff74 	bl	20001724 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag6_IRQn );
2000183c:	f04f 007c 	mov.w	r0, #124	; 0x7c
20001840:	f7ff ff4c 	bl	200016dc <NVIC_ClearPendingIRQ>
}
20001844:	46bd      	mov	sp, r7
20001846:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000184a:	4685      	mov	sp, r0
2000184c:	4770      	bx	lr
2000184e:	bf00      	nop

20001850 <ACE_PPE_Flag7_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag7_IRQHandler( void )
#else
void ACE_PPE_Flag7_IRQHandler( void )
#endif
{
20001850:	4668      	mov	r0, sp
20001852:	f020 0107 	bic.w	r1, r0, #7
20001856:	468d      	mov	sp, r1
20001858:	b589      	push	{r0, r3, r7, lr}
2000185a:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG7 );
2000185c:	f04f 0007 	mov.w	r0, #7
20001860:	f7ff ff60 	bl	20001724 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag7_IRQn );
20001864:	f04f 007d 	mov.w	r0, #125	; 0x7d
20001868:	f7ff ff38 	bl	200016dc <NVIC_ClearPendingIRQ>
}
2000186c:	46bd      	mov	sp, r7
2000186e:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001872:	4685      	mov	sp, r0
20001874:	4770      	bx	lr
20001876:	bf00      	nop

20001878 <ACE_PPE_Flag8_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag8_IRQHandler( void )
#else
void ACE_PPE_Flag8_IRQHandler( void )
#endif
{
20001878:	4668      	mov	r0, sp
2000187a:	f020 0107 	bic.w	r1, r0, #7
2000187e:	468d      	mov	sp, r1
20001880:	b589      	push	{r0, r3, r7, lr}
20001882:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG8 );
20001884:	f04f 0008 	mov.w	r0, #8
20001888:	f7ff ff4c 	bl	20001724 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag8_IRQn );
2000188c:	f04f 007e 	mov.w	r0, #126	; 0x7e
20001890:	f7ff ff24 	bl	200016dc <NVIC_ClearPendingIRQ>
}
20001894:	46bd      	mov	sp, r7
20001896:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000189a:	4685      	mov	sp, r0
2000189c:	4770      	bx	lr
2000189e:	bf00      	nop

200018a0 <ACE_PPE_Flag9_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag9_IRQHandler( void )
#else
void ACE_PPE_Flag9_IRQHandler( void )
#endif
{
200018a0:	4668      	mov	r0, sp
200018a2:	f020 0107 	bic.w	r1, r0, #7
200018a6:	468d      	mov	sp, r1
200018a8:	b589      	push	{r0, r3, r7, lr}
200018aa:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG9 );
200018ac:	f04f 0009 	mov.w	r0, #9
200018b0:	f7ff ff38 	bl	20001724 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag9_IRQn );
200018b4:	f04f 007f 	mov.w	r0, #127	; 0x7f
200018b8:	f7ff ff10 	bl	200016dc <NVIC_ClearPendingIRQ>
}
200018bc:	46bd      	mov	sp, r7
200018be:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200018c2:	4685      	mov	sp, r0
200018c4:	4770      	bx	lr
200018c6:	bf00      	nop

200018c8 <ACE_PPE_Flag10_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag10_IRQHandler( void )
#else
void ACE_PPE_Flag10_IRQHandler( void )
#endif
{
200018c8:	4668      	mov	r0, sp
200018ca:	f020 0107 	bic.w	r1, r0, #7
200018ce:	468d      	mov	sp, r1
200018d0:	b589      	push	{r0, r3, r7, lr}
200018d2:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG10 );
200018d4:	f04f 000a 	mov.w	r0, #10
200018d8:	f7ff ff24 	bl	20001724 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag10_IRQn );
200018dc:	f04f 0080 	mov.w	r0, #128	; 0x80
200018e0:	f7ff fefc 	bl	200016dc <NVIC_ClearPendingIRQ>
}
200018e4:	46bd      	mov	sp, r7
200018e6:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200018ea:	4685      	mov	sp, r0
200018ec:	4770      	bx	lr
200018ee:	bf00      	nop

200018f0 <ACE_PPE_Flag11_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag11_IRQHandler( void )
#else
void ACE_PPE_Flag11_IRQHandler( void )
#endif
{
200018f0:	4668      	mov	r0, sp
200018f2:	f020 0107 	bic.w	r1, r0, #7
200018f6:	468d      	mov	sp, r1
200018f8:	b589      	push	{r0, r3, r7, lr}
200018fa:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG11 );
200018fc:	f04f 000b 	mov.w	r0, #11
20001900:	f7ff ff10 	bl	20001724 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag11_IRQn );
20001904:	f04f 0081 	mov.w	r0, #129	; 0x81
20001908:	f7ff fee8 	bl	200016dc <NVIC_ClearPendingIRQ>
}
2000190c:	46bd      	mov	sp, r7
2000190e:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001912:	4685      	mov	sp, r0
20001914:	4770      	bx	lr
20001916:	bf00      	nop

20001918 <ACE_PPE_Flag12_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag12_IRQHandler( void )
#else
void ACE_PPE_Flag12_IRQHandler( void )
#endif
{
20001918:	4668      	mov	r0, sp
2000191a:	f020 0107 	bic.w	r1, r0, #7
2000191e:	468d      	mov	sp, r1
20001920:	b589      	push	{r0, r3, r7, lr}
20001922:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG12 );
20001924:	f04f 000c 	mov.w	r0, #12
20001928:	f7ff fefc 	bl	20001724 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag12_IRQn );
2000192c:	f04f 0082 	mov.w	r0, #130	; 0x82
20001930:	f7ff fed4 	bl	200016dc <NVIC_ClearPendingIRQ>
}
20001934:	46bd      	mov	sp, r7
20001936:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000193a:	4685      	mov	sp, r0
2000193c:	4770      	bx	lr
2000193e:	bf00      	nop

20001940 <ACE_PPE_Flag13_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag13_IRQHandler( void )
#else
void ACE_PPE_Flag13_IRQHandler( void )
#endif
{
20001940:	4668      	mov	r0, sp
20001942:	f020 0107 	bic.w	r1, r0, #7
20001946:	468d      	mov	sp, r1
20001948:	b589      	push	{r0, r3, r7, lr}
2000194a:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG13 );
2000194c:	f04f 000d 	mov.w	r0, #13
20001950:	f7ff fee8 	bl	20001724 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag13_IRQn );
20001954:	f04f 0083 	mov.w	r0, #131	; 0x83
20001958:	f7ff fec0 	bl	200016dc <NVIC_ClearPendingIRQ>
}
2000195c:	46bd      	mov	sp, r7
2000195e:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001962:	4685      	mov	sp, r0
20001964:	4770      	bx	lr
20001966:	bf00      	nop

20001968 <ACE_PPE_Flag14_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag14_IRQHandler( void )
#else
void ACE_PPE_Flag14_IRQHandler( void )
#endif
{
20001968:	4668      	mov	r0, sp
2000196a:	f020 0107 	bic.w	r1, r0, #7
2000196e:	468d      	mov	sp, r1
20001970:	b589      	push	{r0, r3, r7, lr}
20001972:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG14 );
20001974:	f04f 000e 	mov.w	r0, #14
20001978:	f7ff fed4 	bl	20001724 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag14_IRQn );
2000197c:	f04f 0084 	mov.w	r0, #132	; 0x84
20001980:	f7ff feac 	bl	200016dc <NVIC_ClearPendingIRQ>
}
20001984:	46bd      	mov	sp, r7
20001986:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000198a:	4685      	mov	sp, r0
2000198c:	4770      	bx	lr
2000198e:	bf00      	nop

20001990 <ACE_PPE_Flag15_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag15_IRQHandler( void )
#else
void ACE_PPE_Flag15_IRQHandler( void )
#endif
{
20001990:	4668      	mov	r0, sp
20001992:	f020 0107 	bic.w	r1, r0, #7
20001996:	468d      	mov	sp, r1
20001998:	b589      	push	{r0, r3, r7, lr}
2000199a:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG15 );
2000199c:	f04f 000f 	mov.w	r0, #15
200019a0:	f7ff fec0 	bl	20001724 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag15_IRQn );
200019a4:	f04f 0085 	mov.w	r0, #133	; 0x85
200019a8:	f7ff fe98 	bl	200016dc <NVIC_ClearPendingIRQ>
}
200019ac:	46bd      	mov	sp, r7
200019ae:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200019b2:	4685      	mov	sp, r0
200019b4:	4770      	bx	lr
200019b6:	bf00      	nop

200019b8 <ACE_PPE_Flag16_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag16_IRQHandler( void )
#else
void ACE_PPE_Flag16_IRQHandler( void )
#endif
{
200019b8:	4668      	mov	r0, sp
200019ba:	f020 0107 	bic.w	r1, r0, #7
200019be:	468d      	mov	sp, r1
200019c0:	b589      	push	{r0, r3, r7, lr}
200019c2:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG16 );
200019c4:	f04f 0010 	mov.w	r0, #16
200019c8:	f7ff feac 	bl	20001724 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag16_IRQn );
200019cc:	f04f 0086 	mov.w	r0, #134	; 0x86
200019d0:	f7ff fe84 	bl	200016dc <NVIC_ClearPendingIRQ>
}
200019d4:	46bd      	mov	sp, r7
200019d6:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200019da:	4685      	mov	sp, r0
200019dc:	4770      	bx	lr
200019de:	bf00      	nop

200019e0 <ACE_PPE_Flag17_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag17_IRQHandler( void )
#else
void ACE_PPE_Flag17_IRQHandler( void )
#endif
{
200019e0:	4668      	mov	r0, sp
200019e2:	f020 0107 	bic.w	r1, r0, #7
200019e6:	468d      	mov	sp, r1
200019e8:	b589      	push	{r0, r3, r7, lr}
200019ea:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG17 );
200019ec:	f04f 0011 	mov.w	r0, #17
200019f0:	f7ff fe98 	bl	20001724 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag17_IRQn );
200019f4:	f04f 0087 	mov.w	r0, #135	; 0x87
200019f8:	f7ff fe70 	bl	200016dc <NVIC_ClearPendingIRQ>
}
200019fc:	46bd      	mov	sp, r7
200019fe:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001a02:	4685      	mov	sp, r0
20001a04:	4770      	bx	lr
20001a06:	bf00      	nop

20001a08 <ACE_PPE_Flag18_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag18_IRQHandler( void )
#else
void ACE_PPE_Flag18_IRQHandler( void )
#endif
{
20001a08:	4668      	mov	r0, sp
20001a0a:	f020 0107 	bic.w	r1, r0, #7
20001a0e:	468d      	mov	sp, r1
20001a10:	b589      	push	{r0, r3, r7, lr}
20001a12:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG18 );
20001a14:	f04f 0012 	mov.w	r0, #18
20001a18:	f7ff fe84 	bl	20001724 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag18_IRQn );
20001a1c:	f04f 0088 	mov.w	r0, #136	; 0x88
20001a20:	f7ff fe5c 	bl	200016dc <NVIC_ClearPendingIRQ>
}
20001a24:	46bd      	mov	sp, r7
20001a26:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001a2a:	4685      	mov	sp, r0
20001a2c:	4770      	bx	lr
20001a2e:	bf00      	nop

20001a30 <ACE_PPE_Flag19_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag19_IRQHandler( void )
#else
void ACE_PPE_Flag19_IRQHandler( void )
#endif
{
20001a30:	4668      	mov	r0, sp
20001a32:	f020 0107 	bic.w	r1, r0, #7
20001a36:	468d      	mov	sp, r1
20001a38:	b589      	push	{r0, r3, r7, lr}
20001a3a:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG19 );
20001a3c:	f04f 0013 	mov.w	r0, #19
20001a40:	f7ff fe70 	bl	20001724 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag19_IRQn );
20001a44:	f04f 0089 	mov.w	r0, #137	; 0x89
20001a48:	f7ff fe48 	bl	200016dc <NVIC_ClearPendingIRQ>
}
20001a4c:	46bd      	mov	sp, r7
20001a4e:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001a52:	4685      	mov	sp, r0
20001a54:	4770      	bx	lr
20001a56:	bf00      	nop

20001a58 <ACE_PPE_Flag20_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag20_IRQHandler( void )
#else
void ACE_PPE_Flag20_IRQHandler( void )
#endif
{
20001a58:	4668      	mov	r0, sp
20001a5a:	f020 0107 	bic.w	r1, r0, #7
20001a5e:	468d      	mov	sp, r1
20001a60:	b589      	push	{r0, r3, r7, lr}
20001a62:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG20 );
20001a64:	f04f 0014 	mov.w	r0, #20
20001a68:	f7ff fe5c 	bl	20001724 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag20_IRQn );
20001a6c:	f04f 008a 	mov.w	r0, #138	; 0x8a
20001a70:	f7ff fe34 	bl	200016dc <NVIC_ClearPendingIRQ>
}
20001a74:	46bd      	mov	sp, r7
20001a76:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001a7a:	4685      	mov	sp, r0
20001a7c:	4770      	bx	lr
20001a7e:	bf00      	nop

20001a80 <ACE_PPE_Flag21_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag21_IRQHandler( void )
#else
void ACE_PPE_Flag21_IRQHandler( void )
#endif
{
20001a80:	4668      	mov	r0, sp
20001a82:	f020 0107 	bic.w	r1, r0, #7
20001a86:	468d      	mov	sp, r1
20001a88:	b589      	push	{r0, r3, r7, lr}
20001a8a:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG21 );
20001a8c:	f04f 0015 	mov.w	r0, #21
20001a90:	f7ff fe48 	bl	20001724 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag21_IRQn );
20001a94:	f04f 008b 	mov.w	r0, #139	; 0x8b
20001a98:	f7ff fe20 	bl	200016dc <NVIC_ClearPendingIRQ>
}
20001a9c:	46bd      	mov	sp, r7
20001a9e:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001aa2:	4685      	mov	sp, r0
20001aa4:	4770      	bx	lr
20001aa6:	bf00      	nop

20001aa8 <ACE_PPE_Flag22_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag22_IRQHandler( void )
#else
void ACE_PPE_Flag22_IRQHandler( void )
#endif
{
20001aa8:	4668      	mov	r0, sp
20001aaa:	f020 0107 	bic.w	r1, r0, #7
20001aae:	468d      	mov	sp, r1
20001ab0:	b589      	push	{r0, r3, r7, lr}
20001ab2:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG22 );
20001ab4:	f04f 0016 	mov.w	r0, #22
20001ab8:	f7ff fe34 	bl	20001724 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag22_IRQn );
20001abc:	f04f 008c 	mov.w	r0, #140	; 0x8c
20001ac0:	f7ff fe0c 	bl	200016dc <NVIC_ClearPendingIRQ>
}
20001ac4:	46bd      	mov	sp, r7
20001ac6:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001aca:	4685      	mov	sp, r0
20001acc:	4770      	bx	lr
20001ace:	bf00      	nop

20001ad0 <ACE_PPE_Flag23_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag23_IRQHandler( void )
#else
void ACE_PPE_Flag23_IRQHandler( void )
#endif
{
20001ad0:	4668      	mov	r0, sp
20001ad2:	f020 0107 	bic.w	r1, r0, #7
20001ad6:	468d      	mov	sp, r1
20001ad8:	b589      	push	{r0, r3, r7, lr}
20001ada:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG23 );
20001adc:	f04f 0017 	mov.w	r0, #23
20001ae0:	f7ff fe20 	bl	20001724 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag23_IRQn );
20001ae4:	f04f 008d 	mov.w	r0, #141	; 0x8d
20001ae8:	f7ff fdf8 	bl	200016dc <NVIC_ClearPendingIRQ>
}
20001aec:	46bd      	mov	sp, r7
20001aee:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001af2:	4685      	mov	sp, r0
20001af4:	4770      	bx	lr
20001af6:	bf00      	nop

20001af8 <ACE_PPE_Flag24_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag24_IRQHandler( void )
#else
void ACE_PPE_Flag24_IRQHandler( void )
#endif
{
20001af8:	4668      	mov	r0, sp
20001afa:	f020 0107 	bic.w	r1, r0, #7
20001afe:	468d      	mov	sp, r1
20001b00:	b589      	push	{r0, r3, r7, lr}
20001b02:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG24 );
20001b04:	f04f 0018 	mov.w	r0, #24
20001b08:	f7ff fe0c 	bl	20001724 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag24_IRQn );
20001b0c:	f04f 008e 	mov.w	r0, #142	; 0x8e
20001b10:	f7ff fde4 	bl	200016dc <NVIC_ClearPendingIRQ>
}
20001b14:	46bd      	mov	sp, r7
20001b16:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001b1a:	4685      	mov	sp, r0
20001b1c:	4770      	bx	lr
20001b1e:	bf00      	nop

20001b20 <ACE_PPE_Flag25_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag25_IRQHandler( void )
#else
void ACE_PPE_Flag25_IRQHandler( void )
#endif
{
20001b20:	4668      	mov	r0, sp
20001b22:	f020 0107 	bic.w	r1, r0, #7
20001b26:	468d      	mov	sp, r1
20001b28:	b589      	push	{r0, r3, r7, lr}
20001b2a:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG25 );
20001b2c:	f04f 0019 	mov.w	r0, #25
20001b30:	f7ff fdf8 	bl	20001724 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag25_IRQn );
20001b34:	f04f 008f 	mov.w	r0, #143	; 0x8f
20001b38:	f7ff fdd0 	bl	200016dc <NVIC_ClearPendingIRQ>
}
20001b3c:	46bd      	mov	sp, r7
20001b3e:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001b42:	4685      	mov	sp, r0
20001b44:	4770      	bx	lr
20001b46:	bf00      	nop

20001b48 <ACE_PPE_Flag26_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag26_IRQHandler( void )
#else
void ACE_PPE_Flag26_IRQHandler( void )
#endif
{
20001b48:	4668      	mov	r0, sp
20001b4a:	f020 0107 	bic.w	r1, r0, #7
20001b4e:	468d      	mov	sp, r1
20001b50:	b589      	push	{r0, r3, r7, lr}
20001b52:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG26 );
20001b54:	f04f 001a 	mov.w	r0, #26
20001b58:	f7ff fde4 	bl	20001724 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag26_IRQn );
20001b5c:	f04f 0090 	mov.w	r0, #144	; 0x90
20001b60:	f7ff fdbc 	bl	200016dc <NVIC_ClearPendingIRQ>
}
20001b64:	46bd      	mov	sp, r7
20001b66:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001b6a:	4685      	mov	sp, r0
20001b6c:	4770      	bx	lr
20001b6e:	bf00      	nop

20001b70 <ACE_PPE_Flag27_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag27_IRQHandler( void )
#else
void ACE_PPE_Flag27_IRQHandler( void )
#endif
{
20001b70:	4668      	mov	r0, sp
20001b72:	f020 0107 	bic.w	r1, r0, #7
20001b76:	468d      	mov	sp, r1
20001b78:	b589      	push	{r0, r3, r7, lr}
20001b7a:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG27 );
20001b7c:	f04f 001b 	mov.w	r0, #27
20001b80:	f7ff fdd0 	bl	20001724 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag27_IRQn );
20001b84:	f04f 0091 	mov.w	r0, #145	; 0x91
20001b88:	f7ff fda8 	bl	200016dc <NVIC_ClearPendingIRQ>
}
20001b8c:	46bd      	mov	sp, r7
20001b8e:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001b92:	4685      	mov	sp, r0
20001b94:	4770      	bx	lr
20001b96:	bf00      	nop

20001b98 <ACE_PPE_Flag28_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag28_IRQHandler( void )
#else
void ACE_PPE_Flag28_IRQHandler( void )
#endif
{
20001b98:	4668      	mov	r0, sp
20001b9a:	f020 0107 	bic.w	r1, r0, #7
20001b9e:	468d      	mov	sp, r1
20001ba0:	b589      	push	{r0, r3, r7, lr}
20001ba2:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG28 );
20001ba4:	f04f 001c 	mov.w	r0, #28
20001ba8:	f7ff fdbc 	bl	20001724 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag28_IRQn );
20001bac:	f04f 0092 	mov.w	r0, #146	; 0x92
20001bb0:	f7ff fd94 	bl	200016dc <NVIC_ClearPendingIRQ>
}
20001bb4:	46bd      	mov	sp, r7
20001bb6:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001bba:	4685      	mov	sp, r0
20001bbc:	4770      	bx	lr
20001bbe:	bf00      	nop

20001bc0 <ACE_PPE_Flag29_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag29_IRQHandler( void )
#else
void ACE_PPE_Flag29_IRQHandler( void )
#endif
{
20001bc0:	4668      	mov	r0, sp
20001bc2:	f020 0107 	bic.w	r1, r0, #7
20001bc6:	468d      	mov	sp, r1
20001bc8:	b589      	push	{r0, r3, r7, lr}
20001bca:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG29 );
20001bcc:	f04f 001d 	mov.w	r0, #29
20001bd0:	f7ff fda8 	bl	20001724 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag29_IRQn );
20001bd4:	f04f 0093 	mov.w	r0, #147	; 0x93
20001bd8:	f7ff fd80 	bl	200016dc <NVIC_ClearPendingIRQ>
}
20001bdc:	46bd      	mov	sp, r7
20001bde:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001be2:	4685      	mov	sp, r0
20001be4:	4770      	bx	lr
20001be6:	bf00      	nop

20001be8 <ACE_PPE_Flag30_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag30_IRQHandler( void )
#else
void ACE_PPE_Flag30_IRQHandler( void )
#endif
{
20001be8:	4668      	mov	r0, sp
20001bea:	f020 0107 	bic.w	r1, r0, #7
20001bee:	468d      	mov	sp, r1
20001bf0:	b589      	push	{r0, r3, r7, lr}
20001bf2:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG30 );
20001bf4:	f04f 001e 	mov.w	r0, #30
20001bf8:	f7ff fd94 	bl	20001724 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag30_IRQn );
20001bfc:	f04f 0094 	mov.w	r0, #148	; 0x94
20001c00:	f7ff fd6c 	bl	200016dc <NVIC_ClearPendingIRQ>
}
20001c04:	46bd      	mov	sp, r7
20001c06:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001c0a:	4685      	mov	sp, r0
20001c0c:	4770      	bx	lr
20001c0e:	bf00      	nop

20001c10 <ACE_PPE_Flag31_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag31_IRQHandler( void )
#else
void ACE_PPE_Flag31_IRQHandler( void )
#endif
{
20001c10:	4668      	mov	r0, sp
20001c12:	f020 0107 	bic.w	r1, r0, #7
20001c16:	468d      	mov	sp, r1
20001c18:	b589      	push	{r0, r3, r7, lr}
20001c1a:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG31 );
20001c1c:	f04f 001f 	mov.w	r0, #31
20001c20:	f7ff fd80 	bl	20001724 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag31_IRQn );
20001c24:	f04f 0095 	mov.w	r0, #149	; 0x95
20001c28:	f7ff fd58 	bl	200016dc <NVIC_ClearPendingIRQ>
}
20001c2c:	46bd      	mov	sp, r7
20001c2e:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001c32:	4685      	mov	sp, r0
20001c34:	4770      	bx	lr
20001c36:	bf00      	nop

20001c38 <__aeabi_drsub>:
20001c38:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
20001c3c:	e002      	b.n	20001c44 <__adddf3>
20001c3e:	bf00      	nop

20001c40 <__aeabi_dsub>:
20001c40:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

20001c44 <__adddf3>:
20001c44:	b530      	push	{r4, r5, lr}
20001c46:	ea4f 0441 	mov.w	r4, r1, lsl #1
20001c4a:	ea4f 0543 	mov.w	r5, r3, lsl #1
20001c4e:	ea94 0f05 	teq	r4, r5
20001c52:	bf08      	it	eq
20001c54:	ea90 0f02 	teqeq	r0, r2
20001c58:	bf1f      	itttt	ne
20001c5a:	ea54 0c00 	orrsne.w	ip, r4, r0
20001c5e:	ea55 0c02 	orrsne.w	ip, r5, r2
20001c62:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
20001c66:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
20001c6a:	f000 80e2 	beq.w	20001e32 <__adddf3+0x1ee>
20001c6e:	ea4f 5454 	mov.w	r4, r4, lsr #21
20001c72:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
20001c76:	bfb8      	it	lt
20001c78:	426d      	neglt	r5, r5
20001c7a:	dd0c      	ble.n	20001c96 <__adddf3+0x52>
20001c7c:	442c      	add	r4, r5
20001c7e:	ea80 0202 	eor.w	r2, r0, r2
20001c82:	ea81 0303 	eor.w	r3, r1, r3
20001c86:	ea82 0000 	eor.w	r0, r2, r0
20001c8a:	ea83 0101 	eor.w	r1, r3, r1
20001c8e:	ea80 0202 	eor.w	r2, r0, r2
20001c92:	ea81 0303 	eor.w	r3, r1, r3
20001c96:	2d36      	cmp	r5, #54	; 0x36
20001c98:	bf88      	it	hi
20001c9a:	bd30      	pophi	{r4, r5, pc}
20001c9c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
20001ca0:	ea4f 3101 	mov.w	r1, r1, lsl #12
20001ca4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
20001ca8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
20001cac:	d002      	beq.n	20001cb4 <__adddf3+0x70>
20001cae:	4240      	negs	r0, r0
20001cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
20001cb4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
20001cb8:	ea4f 3303 	mov.w	r3, r3, lsl #12
20001cbc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
20001cc0:	d002      	beq.n	20001cc8 <__adddf3+0x84>
20001cc2:	4252      	negs	r2, r2
20001cc4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
20001cc8:	ea94 0f05 	teq	r4, r5
20001ccc:	f000 80a7 	beq.w	20001e1e <__adddf3+0x1da>
20001cd0:	f1a4 0401 	sub.w	r4, r4, #1
20001cd4:	f1d5 0e20 	rsbs	lr, r5, #32
20001cd8:	db0d      	blt.n	20001cf6 <__adddf3+0xb2>
20001cda:	fa02 fc0e 	lsl.w	ip, r2, lr
20001cde:	fa22 f205 	lsr.w	r2, r2, r5
20001ce2:	1880      	adds	r0, r0, r2
20001ce4:	f141 0100 	adc.w	r1, r1, #0
20001ce8:	fa03 f20e 	lsl.w	r2, r3, lr
20001cec:	1880      	adds	r0, r0, r2
20001cee:	fa43 f305 	asr.w	r3, r3, r5
20001cf2:	4159      	adcs	r1, r3
20001cf4:	e00e      	b.n	20001d14 <__adddf3+0xd0>
20001cf6:	f1a5 0520 	sub.w	r5, r5, #32
20001cfa:	f10e 0e20 	add.w	lr, lr, #32
20001cfe:	2a01      	cmp	r2, #1
20001d00:	fa03 fc0e 	lsl.w	ip, r3, lr
20001d04:	bf28      	it	cs
20001d06:	f04c 0c02 	orrcs.w	ip, ip, #2
20001d0a:	fa43 f305 	asr.w	r3, r3, r5
20001d0e:	18c0      	adds	r0, r0, r3
20001d10:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
20001d14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
20001d18:	d507      	bpl.n	20001d2a <__adddf3+0xe6>
20001d1a:	f04f 0e00 	mov.w	lr, #0
20001d1e:	f1dc 0c00 	rsbs	ip, ip, #0
20001d22:	eb7e 0000 	sbcs.w	r0, lr, r0
20001d26:	eb6e 0101 	sbc.w	r1, lr, r1
20001d2a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
20001d2e:	d31b      	bcc.n	20001d68 <__adddf3+0x124>
20001d30:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
20001d34:	d30c      	bcc.n	20001d50 <__adddf3+0x10c>
20001d36:	0849      	lsrs	r1, r1, #1
20001d38:	ea5f 0030 	movs.w	r0, r0, rrx
20001d3c:	ea4f 0c3c 	mov.w	ip, ip, rrx
20001d40:	f104 0401 	add.w	r4, r4, #1
20001d44:	ea4f 5244 	mov.w	r2, r4, lsl #21
20001d48:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
20001d4c:	f080 809a 	bcs.w	20001e84 <__adddf3+0x240>
20001d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
20001d54:	bf08      	it	eq
20001d56:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
20001d5a:	f150 0000 	adcs.w	r0, r0, #0
20001d5e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
20001d62:	ea41 0105 	orr.w	r1, r1, r5
20001d66:	bd30      	pop	{r4, r5, pc}
20001d68:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
20001d6c:	4140      	adcs	r0, r0
20001d6e:	eb41 0101 	adc.w	r1, r1, r1
20001d72:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
20001d76:	f1a4 0401 	sub.w	r4, r4, #1
20001d7a:	d1e9      	bne.n	20001d50 <__adddf3+0x10c>
20001d7c:	f091 0f00 	teq	r1, #0
20001d80:	bf04      	itt	eq
20001d82:	4601      	moveq	r1, r0
20001d84:	2000      	moveq	r0, #0
20001d86:	fab1 f381 	clz	r3, r1
20001d8a:	bf08      	it	eq
20001d8c:	3320      	addeq	r3, #32
20001d8e:	f1a3 030b 	sub.w	r3, r3, #11
20001d92:	f1b3 0220 	subs.w	r2, r3, #32
20001d96:	da0c      	bge.n	20001db2 <__adddf3+0x16e>
20001d98:	320c      	adds	r2, #12
20001d9a:	dd08      	ble.n	20001dae <__adddf3+0x16a>
20001d9c:	f102 0c14 	add.w	ip, r2, #20
20001da0:	f1c2 020c 	rsb	r2, r2, #12
20001da4:	fa01 f00c 	lsl.w	r0, r1, ip
20001da8:	fa21 f102 	lsr.w	r1, r1, r2
20001dac:	e00c      	b.n	20001dc8 <__adddf3+0x184>
20001dae:	f102 0214 	add.w	r2, r2, #20
20001db2:	bfd8      	it	le
20001db4:	f1c2 0c20 	rsble	ip, r2, #32
20001db8:	fa01 f102 	lsl.w	r1, r1, r2
20001dbc:	fa20 fc0c 	lsr.w	ip, r0, ip
20001dc0:	bfdc      	itt	le
20001dc2:	ea41 010c 	orrle.w	r1, r1, ip
20001dc6:	4090      	lslle	r0, r2
20001dc8:	1ae4      	subs	r4, r4, r3
20001dca:	bfa2      	ittt	ge
20001dcc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
20001dd0:	4329      	orrge	r1, r5
20001dd2:	bd30      	popge	{r4, r5, pc}
20001dd4:	ea6f 0404 	mvn.w	r4, r4
20001dd8:	3c1f      	subs	r4, #31
20001dda:	da1c      	bge.n	20001e16 <__adddf3+0x1d2>
20001ddc:	340c      	adds	r4, #12
20001dde:	dc0e      	bgt.n	20001dfe <__adddf3+0x1ba>
20001de0:	f104 0414 	add.w	r4, r4, #20
20001de4:	f1c4 0220 	rsb	r2, r4, #32
20001de8:	fa20 f004 	lsr.w	r0, r0, r4
20001dec:	fa01 f302 	lsl.w	r3, r1, r2
20001df0:	ea40 0003 	orr.w	r0, r0, r3
20001df4:	fa21 f304 	lsr.w	r3, r1, r4
20001df8:	ea45 0103 	orr.w	r1, r5, r3
20001dfc:	bd30      	pop	{r4, r5, pc}
20001dfe:	f1c4 040c 	rsb	r4, r4, #12
20001e02:	f1c4 0220 	rsb	r2, r4, #32
20001e06:	fa20 f002 	lsr.w	r0, r0, r2
20001e0a:	fa01 f304 	lsl.w	r3, r1, r4
20001e0e:	ea40 0003 	orr.w	r0, r0, r3
20001e12:	4629      	mov	r1, r5
20001e14:	bd30      	pop	{r4, r5, pc}
20001e16:	fa21 f004 	lsr.w	r0, r1, r4
20001e1a:	4629      	mov	r1, r5
20001e1c:	bd30      	pop	{r4, r5, pc}
20001e1e:	f094 0f00 	teq	r4, #0
20001e22:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
20001e26:	bf06      	itte	eq
20001e28:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
20001e2c:	3401      	addeq	r4, #1
20001e2e:	3d01      	subne	r5, #1
20001e30:	e74e      	b.n	20001cd0 <__adddf3+0x8c>
20001e32:	ea7f 5c64 	mvns.w	ip, r4, asr #21
20001e36:	bf18      	it	ne
20001e38:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
20001e3c:	d029      	beq.n	20001e92 <__adddf3+0x24e>
20001e3e:	ea94 0f05 	teq	r4, r5
20001e42:	bf08      	it	eq
20001e44:	ea90 0f02 	teqeq	r0, r2
20001e48:	d005      	beq.n	20001e56 <__adddf3+0x212>
20001e4a:	ea54 0c00 	orrs.w	ip, r4, r0
20001e4e:	bf04      	itt	eq
20001e50:	4619      	moveq	r1, r3
20001e52:	4610      	moveq	r0, r2
20001e54:	bd30      	pop	{r4, r5, pc}
20001e56:	ea91 0f03 	teq	r1, r3
20001e5a:	bf1e      	ittt	ne
20001e5c:	2100      	movne	r1, #0
20001e5e:	2000      	movne	r0, #0
20001e60:	bd30      	popne	{r4, r5, pc}
20001e62:	ea5f 5c54 	movs.w	ip, r4, lsr #21
20001e66:	d105      	bne.n	20001e74 <__adddf3+0x230>
20001e68:	0040      	lsls	r0, r0, #1
20001e6a:	4149      	adcs	r1, r1
20001e6c:	bf28      	it	cs
20001e6e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
20001e72:	bd30      	pop	{r4, r5, pc}
20001e74:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
20001e78:	bf3c      	itt	cc
20001e7a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
20001e7e:	bd30      	popcc	{r4, r5, pc}
20001e80:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
20001e84:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
20001e88:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
20001e8c:	f04f 0000 	mov.w	r0, #0
20001e90:	bd30      	pop	{r4, r5, pc}
20001e92:	ea7f 5c64 	mvns.w	ip, r4, asr #21
20001e96:	bf1a      	itte	ne
20001e98:	4619      	movne	r1, r3
20001e9a:	4610      	movne	r0, r2
20001e9c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
20001ea0:	bf1c      	itt	ne
20001ea2:	460b      	movne	r3, r1
20001ea4:	4602      	movne	r2, r0
20001ea6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
20001eaa:	bf06      	itte	eq
20001eac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
20001eb0:	ea91 0f03 	teqeq	r1, r3
20001eb4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
20001eb8:	bd30      	pop	{r4, r5, pc}
20001eba:	bf00      	nop

20001ebc <__aeabi_ui2d>:
20001ebc:	f090 0f00 	teq	r0, #0
20001ec0:	bf04      	itt	eq
20001ec2:	2100      	moveq	r1, #0
20001ec4:	4770      	bxeq	lr
20001ec6:	b530      	push	{r4, r5, lr}
20001ec8:	f44f 6480 	mov.w	r4, #1024	; 0x400
20001ecc:	f104 0432 	add.w	r4, r4, #50	; 0x32
20001ed0:	f04f 0500 	mov.w	r5, #0
20001ed4:	f04f 0100 	mov.w	r1, #0
20001ed8:	e750      	b.n	20001d7c <__adddf3+0x138>
20001eda:	bf00      	nop

20001edc <__aeabi_i2d>:
20001edc:	f090 0f00 	teq	r0, #0
20001ee0:	bf04      	itt	eq
20001ee2:	2100      	moveq	r1, #0
20001ee4:	4770      	bxeq	lr
20001ee6:	b530      	push	{r4, r5, lr}
20001ee8:	f44f 6480 	mov.w	r4, #1024	; 0x400
20001eec:	f104 0432 	add.w	r4, r4, #50	; 0x32
20001ef0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
20001ef4:	bf48      	it	mi
20001ef6:	4240      	negmi	r0, r0
20001ef8:	f04f 0100 	mov.w	r1, #0
20001efc:	e73e      	b.n	20001d7c <__adddf3+0x138>
20001efe:	bf00      	nop

20001f00 <__aeabi_f2d>:
20001f00:	0042      	lsls	r2, r0, #1
20001f02:	ea4f 01e2 	mov.w	r1, r2, asr #3
20001f06:	ea4f 0131 	mov.w	r1, r1, rrx
20001f0a:	ea4f 7002 	mov.w	r0, r2, lsl #28
20001f0e:	bf1f      	itttt	ne
20001f10:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
20001f14:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
20001f18:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
20001f1c:	4770      	bxne	lr
20001f1e:	f092 0f00 	teq	r2, #0
20001f22:	bf14      	ite	ne
20001f24:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
20001f28:	4770      	bxeq	lr
20001f2a:	b530      	push	{r4, r5, lr}
20001f2c:	f44f 7460 	mov.w	r4, #896	; 0x380
20001f30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
20001f34:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
20001f38:	e720      	b.n	20001d7c <__adddf3+0x138>
20001f3a:	bf00      	nop

20001f3c <__aeabi_ul2d>:
20001f3c:	ea50 0201 	orrs.w	r2, r0, r1
20001f40:	bf08      	it	eq
20001f42:	4770      	bxeq	lr
20001f44:	b530      	push	{r4, r5, lr}
20001f46:	f04f 0500 	mov.w	r5, #0
20001f4a:	e00a      	b.n	20001f62 <__aeabi_l2d+0x16>

20001f4c <__aeabi_l2d>:
20001f4c:	ea50 0201 	orrs.w	r2, r0, r1
20001f50:	bf08      	it	eq
20001f52:	4770      	bxeq	lr
20001f54:	b530      	push	{r4, r5, lr}
20001f56:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
20001f5a:	d502      	bpl.n	20001f62 <__aeabi_l2d+0x16>
20001f5c:	4240      	negs	r0, r0
20001f5e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
20001f62:	f44f 6480 	mov.w	r4, #1024	; 0x400
20001f66:	f104 0432 	add.w	r4, r4, #50	; 0x32
20001f6a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
20001f6e:	f43f aedc 	beq.w	20001d2a <__adddf3+0xe6>
20001f72:	f04f 0203 	mov.w	r2, #3
20001f76:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
20001f7a:	bf18      	it	ne
20001f7c:	3203      	addne	r2, #3
20001f7e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
20001f82:	bf18      	it	ne
20001f84:	3203      	addne	r2, #3
20001f86:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
20001f8a:	f1c2 0320 	rsb	r3, r2, #32
20001f8e:	fa00 fc03 	lsl.w	ip, r0, r3
20001f92:	fa20 f002 	lsr.w	r0, r0, r2
20001f96:	fa01 fe03 	lsl.w	lr, r1, r3
20001f9a:	ea40 000e 	orr.w	r0, r0, lr
20001f9e:	fa21 f102 	lsr.w	r1, r1, r2
20001fa2:	4414      	add	r4, r2
20001fa4:	e6c1      	b.n	20001d2a <__adddf3+0xe6>
20001fa6:	bf00      	nop

20001fa8 <__aeabi_dmul>:
20001fa8:	b570      	push	{r4, r5, r6, lr}
20001faa:	f04f 0cff 	mov.w	ip, #255	; 0xff
20001fae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
20001fb2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
20001fb6:	bf1d      	ittte	ne
20001fb8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
20001fbc:	ea94 0f0c 	teqne	r4, ip
20001fc0:	ea95 0f0c 	teqne	r5, ip
20001fc4:	f000 f8de 	bleq	20002184 <__aeabi_dmul+0x1dc>
20001fc8:	442c      	add	r4, r5
20001fca:	ea81 0603 	eor.w	r6, r1, r3
20001fce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
20001fd2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
20001fd6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
20001fda:	bf18      	it	ne
20001fdc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
20001fe0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
20001fe4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
20001fe8:	d038      	beq.n	2000205c <__aeabi_dmul+0xb4>
20001fea:	fba0 ce02 	umull	ip, lr, r0, r2
20001fee:	f04f 0500 	mov.w	r5, #0
20001ff2:	fbe1 e502 	umlal	lr, r5, r1, r2
20001ff6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
20001ffa:	fbe0 e503 	umlal	lr, r5, r0, r3
20001ffe:	f04f 0600 	mov.w	r6, #0
20002002:	fbe1 5603 	umlal	r5, r6, r1, r3
20002006:	f09c 0f00 	teq	ip, #0
2000200a:	bf18      	it	ne
2000200c:	f04e 0e01 	orrne.w	lr, lr, #1
20002010:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
20002014:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
20002018:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
2000201c:	d204      	bcs.n	20002028 <__aeabi_dmul+0x80>
2000201e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
20002022:	416d      	adcs	r5, r5
20002024:	eb46 0606 	adc.w	r6, r6, r6
20002028:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
2000202c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
20002030:	ea4f 20c5 	mov.w	r0, r5, lsl #11
20002034:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
20002038:	ea4f 2ece 	mov.w	lr, lr, lsl #11
2000203c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
20002040:	bf88      	it	hi
20002042:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
20002046:	d81e      	bhi.n	20002086 <__aeabi_dmul+0xde>
20002048:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
2000204c:	bf08      	it	eq
2000204e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
20002052:	f150 0000 	adcs.w	r0, r0, #0
20002056:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
2000205a:	bd70      	pop	{r4, r5, r6, pc}
2000205c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
20002060:	ea46 0101 	orr.w	r1, r6, r1
20002064:	ea40 0002 	orr.w	r0, r0, r2
20002068:	ea81 0103 	eor.w	r1, r1, r3
2000206c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
20002070:	bfc2      	ittt	gt
20002072:	ebd4 050c 	rsbsgt	r5, r4, ip
20002076:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
2000207a:	bd70      	popgt	{r4, r5, r6, pc}
2000207c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
20002080:	f04f 0e00 	mov.w	lr, #0
20002084:	3c01      	subs	r4, #1
20002086:	f300 80ab 	bgt.w	200021e0 <__aeabi_dmul+0x238>
2000208a:	f114 0f36 	cmn.w	r4, #54	; 0x36
2000208e:	bfde      	ittt	le
20002090:	2000      	movle	r0, #0
20002092:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
20002096:	bd70      	pople	{r4, r5, r6, pc}
20002098:	f1c4 0400 	rsb	r4, r4, #0
2000209c:	3c20      	subs	r4, #32
2000209e:	da35      	bge.n	2000210c <__aeabi_dmul+0x164>
200020a0:	340c      	adds	r4, #12
200020a2:	dc1b      	bgt.n	200020dc <__aeabi_dmul+0x134>
200020a4:	f104 0414 	add.w	r4, r4, #20
200020a8:	f1c4 0520 	rsb	r5, r4, #32
200020ac:	fa00 f305 	lsl.w	r3, r0, r5
200020b0:	fa20 f004 	lsr.w	r0, r0, r4
200020b4:	fa01 f205 	lsl.w	r2, r1, r5
200020b8:	ea40 0002 	orr.w	r0, r0, r2
200020bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
200020c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
200020c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
200020c8:	fa21 f604 	lsr.w	r6, r1, r4
200020cc:	eb42 0106 	adc.w	r1, r2, r6
200020d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
200020d4:	bf08      	it	eq
200020d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
200020da:	bd70      	pop	{r4, r5, r6, pc}
200020dc:	f1c4 040c 	rsb	r4, r4, #12
200020e0:	f1c4 0520 	rsb	r5, r4, #32
200020e4:	fa00 f304 	lsl.w	r3, r0, r4
200020e8:	fa20 f005 	lsr.w	r0, r0, r5
200020ec:	fa01 f204 	lsl.w	r2, r1, r4
200020f0:	ea40 0002 	orr.w	r0, r0, r2
200020f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
200020f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
200020fc:	f141 0100 	adc.w	r1, r1, #0
20002100:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
20002104:	bf08      	it	eq
20002106:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
2000210a:	bd70      	pop	{r4, r5, r6, pc}
2000210c:	f1c4 0520 	rsb	r5, r4, #32
20002110:	fa00 f205 	lsl.w	r2, r0, r5
20002114:	ea4e 0e02 	orr.w	lr, lr, r2
20002118:	fa20 f304 	lsr.w	r3, r0, r4
2000211c:	fa01 f205 	lsl.w	r2, r1, r5
20002120:	ea43 0302 	orr.w	r3, r3, r2
20002124:	fa21 f004 	lsr.w	r0, r1, r4
20002128:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
2000212c:	fa21 f204 	lsr.w	r2, r1, r4
20002130:	ea20 0002 	bic.w	r0, r0, r2
20002134:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
20002138:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
2000213c:	bf08      	it	eq
2000213e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
20002142:	bd70      	pop	{r4, r5, r6, pc}
20002144:	f094 0f00 	teq	r4, #0
20002148:	d10f      	bne.n	2000216a <__aeabi_dmul+0x1c2>
2000214a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
2000214e:	0040      	lsls	r0, r0, #1
20002150:	eb41 0101 	adc.w	r1, r1, r1
20002154:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
20002158:	bf08      	it	eq
2000215a:	3c01      	subeq	r4, #1
2000215c:	d0f7      	beq.n	2000214e <__aeabi_dmul+0x1a6>
2000215e:	ea41 0106 	orr.w	r1, r1, r6
20002162:	f095 0f00 	teq	r5, #0
20002166:	bf18      	it	ne
20002168:	4770      	bxne	lr
2000216a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
2000216e:	0052      	lsls	r2, r2, #1
20002170:	eb43 0303 	adc.w	r3, r3, r3
20002174:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
20002178:	bf08      	it	eq
2000217a:	3d01      	subeq	r5, #1
2000217c:	d0f7      	beq.n	2000216e <__aeabi_dmul+0x1c6>
2000217e:	ea43 0306 	orr.w	r3, r3, r6
20002182:	4770      	bx	lr
20002184:	ea94 0f0c 	teq	r4, ip
20002188:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
2000218c:	bf18      	it	ne
2000218e:	ea95 0f0c 	teqne	r5, ip
20002192:	d00c      	beq.n	200021ae <__aeabi_dmul+0x206>
20002194:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
20002198:	bf18      	it	ne
2000219a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
2000219e:	d1d1      	bne.n	20002144 <__aeabi_dmul+0x19c>
200021a0:	ea81 0103 	eor.w	r1, r1, r3
200021a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
200021a8:	f04f 0000 	mov.w	r0, #0
200021ac:	bd70      	pop	{r4, r5, r6, pc}
200021ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
200021b2:	bf06      	itte	eq
200021b4:	4610      	moveq	r0, r2
200021b6:	4619      	moveq	r1, r3
200021b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
200021bc:	d019      	beq.n	200021f2 <__aeabi_dmul+0x24a>
200021be:	ea94 0f0c 	teq	r4, ip
200021c2:	d102      	bne.n	200021ca <__aeabi_dmul+0x222>
200021c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
200021c8:	d113      	bne.n	200021f2 <__aeabi_dmul+0x24a>
200021ca:	ea95 0f0c 	teq	r5, ip
200021ce:	d105      	bne.n	200021dc <__aeabi_dmul+0x234>
200021d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
200021d4:	bf1c      	itt	ne
200021d6:	4610      	movne	r0, r2
200021d8:	4619      	movne	r1, r3
200021da:	d10a      	bne.n	200021f2 <__aeabi_dmul+0x24a>
200021dc:	ea81 0103 	eor.w	r1, r1, r3
200021e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
200021e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
200021e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
200021ec:	f04f 0000 	mov.w	r0, #0
200021f0:	bd70      	pop	{r4, r5, r6, pc}
200021f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
200021f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
200021fa:	bd70      	pop	{r4, r5, r6, pc}

200021fc <__aeabi_ddiv>:
200021fc:	b570      	push	{r4, r5, r6, lr}
200021fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
20002202:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
20002206:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
2000220a:	bf1d      	ittte	ne
2000220c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
20002210:	ea94 0f0c 	teqne	r4, ip
20002214:	ea95 0f0c 	teqne	r5, ip
20002218:	f000 f8a7 	bleq	2000236a <__aeabi_ddiv+0x16e>
2000221c:	eba4 0405 	sub.w	r4, r4, r5
20002220:	ea81 0e03 	eor.w	lr, r1, r3
20002224:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
20002228:	ea4f 3101 	mov.w	r1, r1, lsl #12
2000222c:	f000 8088 	beq.w	20002340 <__aeabi_ddiv+0x144>
20002230:	ea4f 3303 	mov.w	r3, r3, lsl #12
20002234:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
20002238:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
2000223c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
20002240:	ea4f 2202 	mov.w	r2, r2, lsl #8
20002244:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
20002248:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
2000224c:	ea4f 2600 	mov.w	r6, r0, lsl #8
20002250:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
20002254:	429d      	cmp	r5, r3
20002256:	bf08      	it	eq
20002258:	4296      	cmpeq	r6, r2
2000225a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
2000225e:	f504 7440 	add.w	r4, r4, #768	; 0x300
20002262:	d202      	bcs.n	2000226a <__aeabi_ddiv+0x6e>
20002264:	085b      	lsrs	r3, r3, #1
20002266:	ea4f 0232 	mov.w	r2, r2, rrx
2000226a:	1ab6      	subs	r6, r6, r2
2000226c:	eb65 0503 	sbc.w	r5, r5, r3
20002270:	085b      	lsrs	r3, r3, #1
20002272:	ea4f 0232 	mov.w	r2, r2, rrx
20002276:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2000227a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
2000227e:	ebb6 0e02 	subs.w	lr, r6, r2
20002282:	eb75 0e03 	sbcs.w	lr, r5, r3
20002286:	bf22      	ittt	cs
20002288:	1ab6      	subcs	r6, r6, r2
2000228a:	4675      	movcs	r5, lr
2000228c:	ea40 000c 	orrcs.w	r0, r0, ip
20002290:	085b      	lsrs	r3, r3, #1
20002292:	ea4f 0232 	mov.w	r2, r2, rrx
20002296:	ebb6 0e02 	subs.w	lr, r6, r2
2000229a:	eb75 0e03 	sbcs.w	lr, r5, r3
2000229e:	bf22      	ittt	cs
200022a0:	1ab6      	subcs	r6, r6, r2
200022a2:	4675      	movcs	r5, lr
200022a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
200022a8:	085b      	lsrs	r3, r3, #1
200022aa:	ea4f 0232 	mov.w	r2, r2, rrx
200022ae:	ebb6 0e02 	subs.w	lr, r6, r2
200022b2:	eb75 0e03 	sbcs.w	lr, r5, r3
200022b6:	bf22      	ittt	cs
200022b8:	1ab6      	subcs	r6, r6, r2
200022ba:	4675      	movcs	r5, lr
200022bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
200022c0:	085b      	lsrs	r3, r3, #1
200022c2:	ea4f 0232 	mov.w	r2, r2, rrx
200022c6:	ebb6 0e02 	subs.w	lr, r6, r2
200022ca:	eb75 0e03 	sbcs.w	lr, r5, r3
200022ce:	bf22      	ittt	cs
200022d0:	1ab6      	subcs	r6, r6, r2
200022d2:	4675      	movcs	r5, lr
200022d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
200022d8:	ea55 0e06 	orrs.w	lr, r5, r6
200022dc:	d018      	beq.n	20002310 <__aeabi_ddiv+0x114>
200022de:	ea4f 1505 	mov.w	r5, r5, lsl #4
200022e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
200022e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
200022ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
200022ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
200022f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
200022f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
200022fa:	d1c0      	bne.n	2000227e <__aeabi_ddiv+0x82>
200022fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
20002300:	d10b      	bne.n	2000231a <__aeabi_ddiv+0x11e>
20002302:	ea41 0100 	orr.w	r1, r1, r0
20002306:	f04f 0000 	mov.w	r0, #0
2000230a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
2000230e:	e7b6      	b.n	2000227e <__aeabi_ddiv+0x82>
20002310:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
20002314:	bf04      	itt	eq
20002316:	4301      	orreq	r1, r0
20002318:	2000      	moveq	r0, #0
2000231a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
2000231e:	bf88      	it	hi
20002320:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
20002324:	f63f aeaf 	bhi.w	20002086 <__aeabi_dmul+0xde>
20002328:	ebb5 0c03 	subs.w	ip, r5, r3
2000232c:	bf04      	itt	eq
2000232e:	ebb6 0c02 	subseq.w	ip, r6, r2
20002332:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
20002336:	f150 0000 	adcs.w	r0, r0, #0
2000233a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
2000233e:	bd70      	pop	{r4, r5, r6, pc}
20002340:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
20002344:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
20002348:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
2000234c:	bfc2      	ittt	gt
2000234e:	ebd4 050c 	rsbsgt	r5, r4, ip
20002352:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
20002356:	bd70      	popgt	{r4, r5, r6, pc}
20002358:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
2000235c:	f04f 0e00 	mov.w	lr, #0
20002360:	3c01      	subs	r4, #1
20002362:	e690      	b.n	20002086 <__aeabi_dmul+0xde>
20002364:	ea45 0e06 	orr.w	lr, r5, r6
20002368:	e68d      	b.n	20002086 <__aeabi_dmul+0xde>
2000236a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
2000236e:	ea94 0f0c 	teq	r4, ip
20002372:	bf08      	it	eq
20002374:	ea95 0f0c 	teqeq	r5, ip
20002378:	f43f af3b 	beq.w	200021f2 <__aeabi_dmul+0x24a>
2000237c:	ea94 0f0c 	teq	r4, ip
20002380:	d10a      	bne.n	20002398 <__aeabi_ddiv+0x19c>
20002382:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
20002386:	f47f af34 	bne.w	200021f2 <__aeabi_dmul+0x24a>
2000238a:	ea95 0f0c 	teq	r5, ip
2000238e:	f47f af25 	bne.w	200021dc <__aeabi_dmul+0x234>
20002392:	4610      	mov	r0, r2
20002394:	4619      	mov	r1, r3
20002396:	e72c      	b.n	200021f2 <__aeabi_dmul+0x24a>
20002398:	ea95 0f0c 	teq	r5, ip
2000239c:	d106      	bne.n	200023ac <__aeabi_ddiv+0x1b0>
2000239e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
200023a2:	f43f aefd 	beq.w	200021a0 <__aeabi_dmul+0x1f8>
200023a6:	4610      	mov	r0, r2
200023a8:	4619      	mov	r1, r3
200023aa:	e722      	b.n	200021f2 <__aeabi_dmul+0x24a>
200023ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
200023b0:	bf18      	it	ne
200023b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
200023b6:	f47f aec5 	bne.w	20002144 <__aeabi_dmul+0x19c>
200023ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
200023be:	f47f af0d 	bne.w	200021dc <__aeabi_dmul+0x234>
200023c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
200023c6:	f47f aeeb 	bne.w	200021a0 <__aeabi_dmul+0x1f8>
200023ca:	e712      	b.n	200021f2 <__aeabi_dmul+0x24a>

200023cc <__aeabi_d2iz>:
200023cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
200023d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
200023d4:	d215      	bcs.n	20002402 <__aeabi_d2iz+0x36>
200023d6:	d511      	bpl.n	200023fc <__aeabi_d2iz+0x30>
200023d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
200023dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
200023e0:	d912      	bls.n	20002408 <__aeabi_d2iz+0x3c>
200023e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
200023e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
200023ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
200023ee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
200023f2:	fa23 f002 	lsr.w	r0, r3, r2
200023f6:	bf18      	it	ne
200023f8:	4240      	negne	r0, r0
200023fa:	4770      	bx	lr
200023fc:	f04f 0000 	mov.w	r0, #0
20002400:	4770      	bx	lr
20002402:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
20002406:	d105      	bne.n	20002414 <__aeabi_d2iz+0x48>
20002408:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
2000240c:	bf08      	it	eq
2000240e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
20002412:	4770      	bx	lr
20002414:	f04f 0000 	mov.w	r0, #0
20002418:	4770      	bx	lr
2000241a:	bf00      	nop

2000241c <__libc_init_array>:
2000241c:	b570      	push	{r4, r5, r6, lr}
2000241e:	f242 66a4 	movw	r6, #9892	; 0x26a4
20002422:	f242 65a4 	movw	r5, #9892	; 0x26a4
20002426:	f2c2 0600 	movt	r6, #8192	; 0x2000
2000242a:	f2c2 0500 	movt	r5, #8192	; 0x2000
2000242e:	1b76      	subs	r6, r6, r5
20002430:	10b6      	asrs	r6, r6, #2
20002432:	d006      	beq.n	20002442 <__libc_init_array+0x26>
20002434:	2400      	movs	r4, #0
20002436:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
2000243a:	3401      	adds	r4, #1
2000243c:	4798      	blx	r3
2000243e:	42a6      	cmp	r6, r4
20002440:	d8f9      	bhi.n	20002436 <__libc_init_array+0x1a>
20002442:	f242 65a4 	movw	r5, #9892	; 0x26a4
20002446:	f242 66a8 	movw	r6, #9896	; 0x26a8
2000244a:	f2c2 0500 	movt	r5, #8192	; 0x2000
2000244e:	f2c2 0600 	movt	r6, #8192	; 0x2000
20002452:	1b76      	subs	r6, r6, r5
20002454:	f000 f91a 	bl	2000268c <_init>
20002458:	10b6      	asrs	r6, r6, #2
2000245a:	d006      	beq.n	2000246a <__libc_init_array+0x4e>
2000245c:	2400      	movs	r4, #0
2000245e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
20002462:	3401      	adds	r4, #1
20002464:	4798      	blx	r3
20002466:	42a6      	cmp	r6, r4
20002468:	d8f9      	bhi.n	2000245e <__libc_init_array+0x42>
2000246a:	bd70      	pop	{r4, r5, r6, pc}

2000246c <memset>:
2000246c:	2a03      	cmp	r2, #3
2000246e:	b2c9      	uxtb	r1, r1
20002470:	b430      	push	{r4, r5}
20002472:	d807      	bhi.n	20002484 <memset+0x18>
20002474:	b122      	cbz	r2, 20002480 <memset+0x14>
20002476:	2300      	movs	r3, #0
20002478:	54c1      	strb	r1, [r0, r3]
2000247a:	3301      	adds	r3, #1
2000247c:	4293      	cmp	r3, r2
2000247e:	d1fb      	bne.n	20002478 <memset+0xc>
20002480:	bc30      	pop	{r4, r5}
20002482:	4770      	bx	lr
20002484:	eb00 0c02 	add.w	ip, r0, r2
20002488:	4603      	mov	r3, r0
2000248a:	e001      	b.n	20002490 <memset+0x24>
2000248c:	f803 1c01 	strb.w	r1, [r3, #-1]
20002490:	f003 0403 	and.w	r4, r3, #3
20002494:	461a      	mov	r2, r3
20002496:	3301      	adds	r3, #1
20002498:	2c00      	cmp	r4, #0
2000249a:	d1f7      	bne.n	2000248c <memset+0x20>
2000249c:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
200024a0:	ebc2 040c 	rsb	r4, r2, ip
200024a4:	fb03 f301 	mul.w	r3, r3, r1
200024a8:	e01f      	b.n	200024ea <memset+0x7e>
200024aa:	f842 3c40 	str.w	r3, [r2, #-64]
200024ae:	f842 3c3c 	str.w	r3, [r2, #-60]
200024b2:	f842 3c38 	str.w	r3, [r2, #-56]
200024b6:	f842 3c34 	str.w	r3, [r2, #-52]
200024ba:	f842 3c30 	str.w	r3, [r2, #-48]
200024be:	f842 3c2c 	str.w	r3, [r2, #-44]
200024c2:	f842 3c28 	str.w	r3, [r2, #-40]
200024c6:	f842 3c24 	str.w	r3, [r2, #-36]
200024ca:	f842 3c20 	str.w	r3, [r2, #-32]
200024ce:	f842 3c1c 	str.w	r3, [r2, #-28]
200024d2:	f842 3c18 	str.w	r3, [r2, #-24]
200024d6:	f842 3c14 	str.w	r3, [r2, #-20]
200024da:	f842 3c10 	str.w	r3, [r2, #-16]
200024de:	f842 3c0c 	str.w	r3, [r2, #-12]
200024e2:	f842 3c08 	str.w	r3, [r2, #-8]
200024e6:	f842 3c04 	str.w	r3, [r2, #-4]
200024ea:	4615      	mov	r5, r2
200024ec:	3240      	adds	r2, #64	; 0x40
200024ee:	2c3f      	cmp	r4, #63	; 0x3f
200024f0:	f1a4 0440 	sub.w	r4, r4, #64	; 0x40
200024f4:	dcd9      	bgt.n	200024aa <memset+0x3e>
200024f6:	462a      	mov	r2, r5
200024f8:	ebc5 040c 	rsb	r4, r5, ip
200024fc:	e007      	b.n	2000250e <memset+0xa2>
200024fe:	f842 3c10 	str.w	r3, [r2, #-16]
20002502:	f842 3c0c 	str.w	r3, [r2, #-12]
20002506:	f842 3c08 	str.w	r3, [r2, #-8]
2000250a:	f842 3c04 	str.w	r3, [r2, #-4]
2000250e:	4615      	mov	r5, r2
20002510:	3210      	adds	r2, #16
20002512:	2c0f      	cmp	r4, #15
20002514:	f1a4 0410 	sub.w	r4, r4, #16
20002518:	dcf1      	bgt.n	200024fe <memset+0x92>
2000251a:	462a      	mov	r2, r5
2000251c:	ebc5 050c 	rsb	r5, r5, ip
20002520:	e001      	b.n	20002526 <memset+0xba>
20002522:	f842 3c04 	str.w	r3, [r2, #-4]
20002526:	4614      	mov	r4, r2
20002528:	3204      	adds	r2, #4
2000252a:	2d03      	cmp	r5, #3
2000252c:	f1a5 0504 	sub.w	r5, r5, #4
20002530:	dcf7      	bgt.n	20002522 <memset+0xb6>
20002532:	e001      	b.n	20002538 <memset+0xcc>
20002534:	f804 1b01 	strb.w	r1, [r4], #1
20002538:	4564      	cmp	r4, ip
2000253a:	d3fb      	bcc.n	20002534 <memset+0xc8>
2000253c:	e7a0      	b.n	20002480 <memset+0x14>
2000253e:	bf00      	nop

20002540 <initcmd>:
20002540:	03ef 8003 cf02 0003 30c1 04ed 0364 8112     .........0..d...
20002550:	03e8 0085 cb78 3905 002c 0234 01f7 ea20     ....x..9,.4... .
20002560:	0002 c000 2301 01c1 c510 3e02 c728 8601     .....#.....>(...
20002570:	0136 3748 0001 013a b155 0002 b618 0803     6.H7..:.U.......
20002580:	2782 01f2 2600 0101 0fe0 310f 0c2b 080e     .'...&.....1+...
20002590:	f14e 0737 0310 090e e100 000f 140e 1103     N.7.............
200025a0:	3107 48c1 0f08 310c 0f36 8011 8029 0000     .1.H...16...)...

200025b0 <g_gpio_irqn_lut>:
200025b0:	0020 0021 0022 0023 0024 0025 0026 0027      .!.".#.$.%.&.'.
200025c0:	0028 0029 002a 002b 002c 002d 002e 002f     (.).*.+.,.-.../.
200025d0:	0030 0031 0032 0033 0034 0035 0036 0037     0.1.2.3.4.5.6.7.
200025e0:	0038 0039 003a 003b 003c 003d 003e 003f     8.9.:.;.<.=.>.?.

200025f0 <g_ace_channel_0_name>:
200025f0:	4441 4443 7269 6365 4974 706e 7475 325f     ADCDirectInput_2
20002600:	0000 0000                                   ....

20002604 <g_ace_channel_1_name>:
20002604:	4441 4443 7269 6365 4974 706e 7475 335f     ADCDirectInput_3
20002614:	0000 0000                                   ....

20002618 <g_ace_channel_2_name>:
20002618:	4441 4443 7269 6365 4974 706e 7475 345f     ADCDirectInput_4
20002628:	0000 0000                                   ....

2000262c <channel_type_lut>:
2000262c:	0000 0100 0002 0100 0002 0000 ff00 00ff     ................
2000263c:	0000 0100 0002 0100 0002 0000 ff00 00ff     ................
2000264c:	0000 0100 ff02 ffff 00ff 0000 ff00 00ff     ................

2000265c <channel_quad_lut>:
2000265c:	00ff 0000 0100 0101 ff01 ffff ffff ffff     ................
2000266c:	02ff 0202 0302 0303 ff03 ffff ffff ffff     ................
2000267c:	04ff 0404 ff04 ffff ffff ffff ffff ffff     ................

2000268c <_init>:
2000268c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000268e:	bf00      	nop
20002690:	bcf8      	pop	{r3, r4, r5, r6, r7}
20002692:	bc08      	pop	{r3}
20002694:	469e      	mov	lr, r3
20002696:	4770      	bx	lr

20002698 <_fini>:
20002698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000269a:	bf00      	nop
2000269c:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000269e:	bc08      	pop	{r3}
200026a0:	469e      	mov	lr, r3
200026a2:	4770      	bx	lr

200026a4 <__frame_dummy_init_array_entry>:
200026a4:	0485 2000                                   ... 

200026a8 <__do_global_dtors_aux_fini_array_entry>:
200026a8:	0471 2000                                   q.. 
