######## 
#### SYMBOL TABLE ####
PPE_ADCDirectInput_0_LPF_DATA                                                : 64
PPE_ADCDirectInput_0_LT_OPERATION_BOFFSET                                                : 19
PPE_ADCDirectInput_0_LT_OPERATION_BVAL                                                : 0
PPE_ADCDirectInput_0_LT_OPERATION_MOFFSET                                                : 18
PPE_ADCDirectInput_0_LT_OPERATION_MVAL                                                : 16384
PPE_ADCDirectInput_0_PPE_EXECUTION_START                                                : 68
PPE_ADCDirectInput_1_LPF_DATA                                                : 136
PPE_ADCDirectInput_1_LT_OPERATION_BOFFSET                                                : 37
PPE_ADCDirectInput_1_LT_OPERATION_BVAL                                                : 0
PPE_ADCDirectInput_1_LT_OPERATION_MOFFSET                                                : 36
PPE_ADCDirectInput_1_LT_OPERATION_MVAL                                                : 16384
PPE_ADCDirectInput_1_PPE_EXECUTION_START                                                : 140
PPE_SDD_0_LPF_DATA                                                : 100
PPE_SDD_0_LT_OPERATION_BOFFSET                                                : 28
PPE_SDD_0_LT_OPERATION_BVAL                                                : 0
PPE_SDD_0_LT_OPERATION_MOFFSET                                                : 27
PPE_SDD_0_LT_OPERATION_MVAL                                                : 16384
PPE_SDD_0_PPE_EXECUTION_START                                                : 104
PPE_SDD_1_LPF_DATA                                                : 172
PPE_SDD_1_LT_OPERATION_BOFFSET                                                : 46
PPE_SDD_1_LT_OPERATION_BVAL                                                : 0
PPE_SDD_1_LT_OPERATION_MOFFSET                                                : 45
PPE_SDD_1_LT_OPERATION_MVAL                                                : 16384
PPE_SDD_1_PPE_EXECUTION_START                                                : 176
SSE_ADC0_MAIN_PROCEDURE_LOOP_START                                                : 12
SSE_ADC0_MAIN_PROCEDURE_START                                                : 0
SSE_ADC0_MAIN_PROCEDURE_WORD_COUNT                                                : 7
SSE_ADC1_MAIN_PROCEDURE_LOOP_START                                                : 40
SSE_ADC1_MAIN_PROCEDURE_START                                                : 28
SSE_ADC1_MAIN_PROCEDURE_WORD_COUNT                                                : 7
SSE_PC0_START                                                : 0
SSE_PC1_START                                                : 28


#### ANALOG PADS ####
ADCDirectInput_0 ADC:0  QUAD:-1  Logical:12  Pin:AB8
SDD_0 ADC:0  QUAD:-1  Logical:15  Pin:V7
ADCDirectInput_1 ADC:1  QUAD:-1  Logical:9  Pin:U12
SDD_1 ADC:1  QUAD:-1  Logical:15  Pin:Y17



#ACE_ACB_AQ0 = 0x40020204
#  ABPS1_TRIM0:0x0
#    OFFSET_TRIM[7:0] = 0x0
0x0
#  ABPS1_TRIM1:0x4
#    GAIN_TRIM[5:2] = 0x0
#    NEG_TRIM[0:0] = 0x0
#    PER4_PER3B[1:1] = 0x0
0x0
#  ABPS2_TRIM0:0x8
#    DAC_TRIM[7:0] = 0x0
0x0
#  ABPS2_TRIM1:0xc
#    GAIN_TRIM[5:2] = 0x0
#    NEG_TRIM[0:0] = 0x0
#    PER4_PER3B[1:1] = 0x0
0x0
#  OBD_TRIM:0x10
#    INCR_DECRB[8:8] = 0x0
#    OBD_TRIM[6:0] = 0x0
0x0
#  IREF:0x14
#    IREF_TRIM[3:0] = 0x0
0x0
#  OBD_CONFIGURATION:0x18
# - SDD_0 
#    ANA_SEL[3:2] = 0x0
#    CUR_VOLB[0:0] = 0x1
#    NO_CHOPPING[1:1] = 0x1
#    QUAD_DACOUT_SEL[4:4] = 0x0
0x3
#  CURRMON_SIMUL_STROBES:0x1c
#    CM_STB_G0[0:0] = 0x0
#    CM_STB_G1[1:1] = 0x0
#    CM_STB_G2[2:2] = 0x0
#    CM_STB_G3[3:3] = 0x0
#    CM_STB_G4[4:4] = 0x0
#    CM_STB_G5[5:5] = 0x0
0x0
#  PRESCALE_CFG:0x20
#    PS1_ENABLE[0:0] = 0x0
#    PS1_GAIN_SELECT[2:1] = 0x0
#    PS2_ENABLE[4:4] = 0x0
#    PS2_GAIN_SELECT[6:5] = 0x0
0x0
#  CURRMON:0x24
#    CM_ENABLE[2:2] = 0x0
#    CM_STROBE[3:3] = 0x0
#    COMPARATOR_ENABLE[4:4] = 0x0
#    DIRECT_INPUT_SWITCH[1:1] = 0x0
#    HYSTERESIS_SELECT[7:6] = 0x0
#    MUX_SELECT[0:0] = 0x0
0x0
#  TEMPMON:0x28
#    COMPARATOR_ENABLE[4:4] = 0x0
#    DIRECT_INPUT_SWITCH[1:1] = 0x0
#    HYSTERESIS_SELECT[7:6] = 0x0
#    MUX_SELECT[0:0] = 0x0
#    TM_ENABLE[2:2] = 0x0
#    TM_STROBE[3:3] = 0x0
#    VREF_SWITCH[5:5] = 0x0
0x0
#  ATCOMP:0x2c
#    DAC_INPUT_SELECT[1:0] = 0x0
#    PDVC_ENABLE[7:7] = 0x1
#    SSE_APP_START[5:5] = 0x0
#    VREFSEL[4:4] = 0x0
0x80


#ACE_ACB_AQ = 0x40020234
#  ABPS1_TRIM0:0x0
#    OFFSET_TRIM[7:0] = 0x0
0x0
#  ABPS1_TRIM1:0x4
#    GAIN_TRIM[5:2] = 0x0
#    NEG_TRIM[0:0] = 0x0
#    PER4_PER3B[1:1] = 0x0
0x0
#  ABPS2_TRIM0:0x8
#    DAC_TRIM[7:0] = 0x0
0x0
#  ABPS2_TRIM1:0xc
#    GAIN_TRIM[5:2] = 0x0
#    NEG_TRIM[0:0] = 0x0
#    PER4_PER3B[1:1] = 0x0
0x0
#  OBD_TRIM:0x10
#    INCR_DECRB[8:8] = 0x0
#    OBD_TRIM[6:0] = 0x0
0x0
#  OBD_CONFIGURATION:0x18
#    ANA_SEL[3:2] = 0x0
#    CUR_VOLB[0:0] = 0x0
#    NO_CHOPPING[1:1] = 0x0
#    QUAD_DACOUT_SEL[4:4] = 0x0
0x0
#  PRESCALE_CFG:0x20
#    PS1_ENABLE[0:0] = 0x0
#    PS1_GAIN_SELECT[2:1] = 0x0
#    PS2_ENABLE[4:4] = 0x0
#    PS2_GAIN_SELECT[6:5] = 0x0
0x0
#  CURRMON:0x24
#    CM_ENABLE[2:2] = 0x0
#    CM_STROBE[3:3] = 0x0
#    COMPARATOR_ENABLE[4:4] = 0x0
#    DIRECT_INPUT_SWITCH[1:1] = 0x0
#    HYSTERESIS_SELECT[7:6] = 0x0
#    MUX_SELECT[0:0] = 0x0
0x0
#  TEMPMON:0x28
#    COMPARATOR_ENABLE[4:4] = 0x0
#    DIRECT_INPUT_SWITCH[1:1] = 0x0
#    HYSTERESIS_SELECT[7:6] = 0x0
#    MUX_SELECT[0:0] = 0x0
#    TM_ENABLE[2:2] = 0x0
#    TM_STROBE[3:3] = 0x0
#    VREF_SWITCH[5:5] = 0x0
0x0
#  ATCOMP:0x2c
#    DAC_INPUT_SELECT[1:0] = 0x0
0x0


#ACE_ACB_AQ = 0x40020264
#  ABPS1_TRIM0:0x0
#    OFFSET_TRIM[7:0] = 0x0
0x0
#  ABPS1_TRIM1:0x4
#    GAIN_TRIM[5:2] = 0x0
#    NEG_TRIM[0:0] = 0x0
#    PER4_PER3B[1:1] = 0x0
0x0
#  ABPS2_TRIM0:0x8
#    DAC_TRIM[7:0] = 0x0
0x0
#  ABPS2_TRIM1:0xc
#    GAIN_TRIM[5:2] = 0x0
#    NEG_TRIM[0:0] = 0x0
#    PER4_PER3B[1:1] = 0x0
0x0
#  OBD_TRIM:0x10
#    INCR_DECRB[8:8] = 0x0
#    OBD_TRIM[6:0] = 0x0
0x0
#  OBD_CONFIGURATION:0x18
# - SDD_1 
#    ANA_SEL[3:2] = 0x0
#    CUR_VOLB[0:0] = 0x1
#    NO_CHOPPING[1:1] = 0x1
#    QUAD_DACOUT_SEL[4:4] = 0x0
0x3
#  PRESCALE_CFG:0x20
#    PS1_ENABLE[0:0] = 0x0
#    PS1_GAIN_SELECT[2:1] = 0x0
#    PS2_ENABLE[4:4] = 0x0
#    PS2_GAIN_SELECT[6:5] = 0x0
0x0
#  CURRMON:0x24
#    CM_ENABLE[2:2] = 0x0
#    CM_STROBE[3:3] = 0x0
#    COMPARATOR_ENABLE[4:4] = 0x0
#    DIRECT_INPUT_SWITCH[1:1] = 0x0
#    HYSTERESIS_SELECT[7:6] = 0x0
#    MUX_SELECT[0:0] = 0x0
0x0
#  TEMPMON:0x28
#    COMPARATOR_ENABLE[4:4] = 0x0
#    DIRECT_INPUT_SWITCH[1:1] = 0x0
#    HYSTERESIS_SELECT[7:6] = 0x0
#    MUX_SELECT[0:0] = 0x0
#    TM_ENABLE[2:2] = 0x0
#    TM_STROBE[3:3] = 0x0
#    VREF_SWITCH[5:5] = 0x0
0x0
#  ATCOMP:0x2c
#    DAC_INPUT_SELECT[1:0] = 0x0
0x0


#ACE_ACB_AQ = 0x40020294
#  ABPS1_TRIM0:0x0
#    OFFSET_TRIM[7:0] = 0x0
0x0
#  ABPS1_TRIM1:0x4
#    GAIN_TRIM[5:2] = 0x0
#    NEG_TRIM[0:0] = 0x0
#    PER4_PER3B[1:1] = 0x0
0x0
#  ABPS2_TRIM0:0x8
#    DAC_TRIM[7:0] = 0x0
0x0
#  ABPS2_TRIM1:0xc
#    GAIN_TRIM[5:2] = 0x0
#    NEG_TRIM[0:0] = 0x0
#    PER4_PER3B[1:1] = 0x0
0x0
#  OBD_TRIM:0x10
#    INCR_DECRB[8:8] = 0x0
#    OBD_TRIM[6:0] = 0x0
0x0
#  OBD_CONFIGURATION:0x18
#    ANA_SEL[3:2] = 0x0
#    CUR_VOLB[0:0] = 0x0
#    NO_CHOPPING[1:1] = 0x0
#    QUAD_DACOUT_SEL[4:4] = 0x0
0x0
#  PRESCALE_CFG:0x20
#    PS1_ENABLE[0:0] = 0x0
#    PS1_GAIN_SELECT[2:1] = 0x0
#    PS2_ENABLE[4:4] = 0x0
#    PS2_GAIN_SELECT[6:5] = 0x0
0x0
#  CURRMON:0x24
#    CM_ENABLE[2:2] = 0x0
#    CM_STROBE[3:3] = 0x0
#    COMPARATOR_ENABLE[4:4] = 0x0
#    DIRECT_INPUT_SWITCH[1:1] = 0x0
#    HYSTERESIS_SELECT[7:6] = 0x0
#    MUX_SELECT[0:0] = 0x0
0x0
#  TEMPMON:0x28
#    COMPARATOR_ENABLE[4:4] = 0x0
#    DIRECT_INPUT_SWITCH[1:1] = 0x0
#    HYSTERESIS_SELECT[7:6] = 0x0
#    MUX_SELECT[0:0] = 0x0
#    TM_ENABLE[2:2] = 0x0
#    TM_STROBE[3:3] = 0x0
#    VREF_SWITCH[5:5] = 0x0
0x0
#  ATCOMP:0x2c
#    DAC_INPUT_SELECT[1:0] = 0x0
0x0


#ACE_ACB_AQ = 0x400202c4
#  ABPS1_TRIM0:0x0
#    OFFSET_TRIM[7:0] = 0x0
0x0
#  ABPS1_TRIM1:0x4
#    GAIN_TRIM[5:2] = 0x0
#    NEG_TRIM[0:0] = 0x0
#    PER4_PER3B[1:1] = 0x0
0x0
#  ABPS2_TRIM0:0x8
#    DAC_TRIM[7:0] = 0x0
0x0
#  ABPS2_TRIM1:0xc
#    GAIN_TRIM[5:2] = 0x0
#    NEG_TRIM[0:0] = 0x0
#    PER4_PER3B[1:1] = 0x0
0x0
#  OBD_TRIM:0x10
#    INCR_DECRB[8:8] = 0x0
#    OBD_TRIM[6:0] = 0x0
0x0
#  OBD_CONFIGURATION:0x18
#    ANA_SEL[3:2] = 0x0
#    CUR_VOLB[0:0] = 0x0
#    NO_CHOPPING[1:1] = 0x0
#    QUAD_DACOUT_SEL[4:4] = 0x0
0x0
#  PRESCALE_CFG:0x20
#    PS1_ENABLE[0:0] = 0x0
#    PS1_GAIN_SELECT[2:1] = 0x0
#    PS2_ENABLE[4:4] = 0x0
#    PS2_GAIN_SELECT[6:5] = 0x0
0x0
#  CURRMON:0x24
#    CM_ENABLE[2:2] = 0x0
#    CM_STROBE[3:3] = 0x0
#    COMPARATOR_ENABLE[4:4] = 0x0
#    DIRECT_INPUT_SWITCH[1:1] = 0x0
#    HYSTERESIS_SELECT[7:6] = 0x0
#    MUX_SELECT[0:0] = 0x0
0x0
#  TEMPMON:0x28
#    COMPARATOR_ENABLE[4:4] = 0x0
#    DIRECT_INPUT_SWITCH[1:1] = 0x0
#    HYSTERESIS_SELECT[7:6] = 0x0
#    MUX_SELECT[0:0] = 0x0
#    TM_ENABLE[2:2] = 0x0
#    TM_STROBE[3:3] = 0x0
#    VREF_SWITCH[5:5] = 0x0
0x0
#  ATCOMP:0x2c
#    DAC_INPUT_SELECT[1:0] = 0x0
0x0


#ACE_ACB_AQ = 0x400202f4
#  ABPS1_TRIM0:0x0
#    OFFSET_TRIM[7:0] = 0x0
0x0
#  ABPS1_TRIM1:0x4
#    GAIN_TRIM[5:2] = 0x0
#    NEG_TRIM[0:0] = 0x0
#    PER4_PER3B[1:1] = 0x0
0x0
#  ABPS2_TRIM0:0x8
#    DAC_TRIM[7:0] = 0x0
0x0
#  ABPS2_TRIM1:0xc
#    GAIN_TRIM[5:2] = 0x0
#    NEG_TRIM[0:0] = 0x0
#    PER4_PER3B[1:1] = 0x0
0x0
#  OBD_TRIM:0x10
#    INCR_DECRB[8:8] = 0x0
#    OBD_TRIM[6:0] = 0x0
0x0
#  OBD_CONFIGURATION:0x18
#    ANA_SEL[3:2] = 0x0
#    CUR_VOLB[0:0] = 0x0
#    NO_CHOPPING[1:1] = 0x0
#    QUAD_DACOUT_SEL[4:4] = 0x0
0x0
#  PRESCALE_CFG:0x20
#    PS1_ENABLE[0:0] = 0x0
#    PS1_GAIN_SELECT[2:1] = 0x0
#    PS2_ENABLE[4:4] = 0x0
#    PS2_GAIN_SELECT[6:5] = 0x0
0x0
#  CURRMON:0x24
#    CM_ENABLE[2:2] = 0x0
#    CM_STROBE[3:3] = 0x0
#    COMPARATOR_ENABLE[4:4] = 0x0
#    DIRECT_INPUT_SWITCH[1:1] = 0x0
#    HYSTERESIS_SELECT[7:6] = 0x0
#    MUX_SELECT[0:0] = 0x0
0x0
#  TEMPMON:0x28
#    COMPARATOR_ENABLE[4:4] = 0x0
#    DIRECT_INPUT_SWITCH[1:1] = 0x0
#    HYSTERESIS_SELECT[7:6] = 0x0
#    MUX_SELECT[0:0] = 0x0
#    TM_ENABLE[2:2] = 0x0
#    TM_STROBE[3:3] = 0x0
#    VREF_SWITCH[5:5] = 0x0
0x0
#  ATCOMP:0x2c
#    DAC_INPUT_SELECT[1:0] = 0x0
0x0


#ACE_INIT0 = 0x40020000
#  SSE_TS_CTRL:0x4
#    SSE_SRAM_ENABLE[1:1] = 0x1
#    TS_ENABLE[0:0] = 0x0
0x2


#ACE_INIT = 0x40020000
#  PC0_CTRL:0x48
#    PC0_EN[0:0] = 0x1
0x1
#  PC1_CTRL:0x88
#    PC1_EN[0:0] = 0x1
0x1
#  PC2_CTRL:0xc8
#    PC2_EN[0:0] = 0x0
0x0
#  SSE_PC0:0x410
#    PC[8:0] = 0x0
0x0
#  SSE_PC1:0x414
#    PC[8:0] = 0x7
0x7
#  SSE_PC2:0x418
#    PC[8:0] = 0x0
0x0
#  FPGA_FLAGS_SEL:0x1260
#    FIFO_AFULL0_SEL[3:3] = 0x0
#    FIFO_AFULL1_SEL[4:4] = 0x0
#    FIFO_AFULL2_SEL[5:5] = 0x0
#    FIFO_EMPTY0_SEL[0:0] = 0x0
#    FIFO_EMPTY1_SEL[1:1] = 0x0
#    FIFO_EMPTY2_SEL[2:2] = 0x0
#    FIFO_FULL0_SEL[6:6] = 0x0
#    FIFO_FULL1_SEL[7:7] = 0x0
#    FIFO_FULL2_SEL[8:8] = 0x0
#    PPE_BUSY_SEL[9:9] = 0x0
0x0
#  PPE_ALU_CTRL:0x1418
#    NSAT_EN[1:1] = 0x1
#    PSAT_EN[0:0] = 0x1
0x3
#  ADC0_FIFO_CTRL:0x1490
#    AFULL_WT_EN[0:0] = 0x1
#    CLR[0:0] = 0x1
#    FULL_WT_EN[0:0] = 0x1
0x1
#  ADC1_FIFO_CTRL:0x149c
#    AFULL_WT_EN[0:0] = 0x1
#    CLR[0:0] = 0x1
#    FULL_WT_EN[0:0] = 0x1
0x1
#  ADC2_FIFO_CTRL:0x14a8
#    AFULL_WT_EN[0:0] = 0x1
#    CLR[0:0] = 0x1
#    FULL_WT_EN[0:0] = 0x1
0x1


#ACE_INIT2 = 0x40020000
#  SSE_TS_CTRL:0x4
#    SSE_SRAM_ENABLE[1:1] = 0x1
#    TS_ENABLE[0:0] = 0x1
0x3
#  ANA_COMM_CTRL:0xc
#    ABPOWERON[3:3] = 0x1
#    ACB_RESETN[4:4] = 0x0
#    ADCRESET[1:1] = 0x1
#    PWRDWN[2:2] = 0x0
#    VREFSEL[0:0] = 0x0
0xa
#  PPE_CTRL:0x1404
#    PPE_EN[0:0] = 0x1
#    PPE_RRDIS0[14:14] = 0x0
#    PPE_RRDIS1[15:15] = 0x0
#    PPE_RRDIS2[16:16] = 0x0
0x1


#ACE_PPE_RAM = 0x40021800
#  CHAN_JUMP_ADDRESS:0x0
######## Jump Addresses for Channel0
#    ADC0[9:0] = 0x0
#    ADC1[19:10] = 0x0
#    ADC2[29:20] = 0x0
0x0
#  CHAN_JUMP_ADDRESS:0x4
######## Jump Addresses for Channel1
#    ADC0[9:0] = 0x0
#    ADC1[19:10] = 0x0
#    ADC2[29:20] = 0x0
0x0
#  CHAN_JUMP_ADDRESS:0x8
######## Jump Addresses for Channel2
#    ADC0[9:0] = 0x0
#    ADC1[19:10] = 0x0
#    ADC2[29:20] = 0x0
0x0
#  CHAN_JUMP_ADDRESS:0xc
######## Jump Addresses for Channel3
#    ADC0[9:0] = 0x0
#    ADC1[19:10] = 0x0
#    ADC2[29:20] = 0x0
0x0
#  CHAN_JUMP_ADDRESS:0x10
######## Jump Addresses for Channel4
#    ADC0[9:0] = 0x0
#    ADC1[19:10] = 0x0
#    ADC2[29:20] = 0x0
0x0
#  CHAN_JUMP_ADDRESS:0x14
######## Jump Addresses for Channel5
#    ADC0[9:0] = 0x0
#    ADC1[19:10] = 0x0
#    ADC2[29:20] = 0x0
0x0
#  CHAN_JUMP_ADDRESS:0x18
######## Jump Addresses for Channel6
#    ADC0[9:0] = 0x0
#    ADC1[19:10] = 0x0
#    ADC2[29:20] = 0x0
0x0
#  CHAN_JUMP_ADDRESS:0x1c
######## Jump Addresses for Channel7
#    ADC0[9:0] = 0x0
#    ADC1[19:10] = 0x0
#    ADC2[29:20] = 0x0
0x0
#  CHAN_JUMP_ADDRESS:0x20
######## Jump Addresses for Channel8
#    ADC0[9:0] = 0x0
#    ADC1[19:10] = 0x0
#    ADC2[29:20] = 0x0
0x0
#  CHAN_JUMP_ADDRESS:0x24
######## Jump Addresses for Channel9
#    ADC0[9:0] = 0x0
#    ADC1[19:10] = 0x23
#    ADC2[29:20] = 0x0
0x8c00
#  CHAN_JUMP_ADDRESS:0x28
######## Jump Addresses for Channel10
#    ADC0[9:0] = 0x0
#    ADC1[19:10] = 0x0
#    ADC2[29:20] = 0x0
0x0
#  CHAN_JUMP_ADDRESS:0x2c
######## Jump Addresses for Channel11
#    ADC0[9:0] = 0x0
#    ADC1[19:10] = 0x0
#    ADC2[29:20] = 0x0
0x0
#  CHAN_JUMP_ADDRESS:0x30
######## Jump Addresses for Channel12
#    ADC0[9:0] = 0x11
#    ADC1[19:10] = 0x0
#    ADC2[29:20] = 0x0
0x11
#  CHAN_JUMP_ADDRESS:0x34
######## Jump Addresses for Channel13
#    ADC0[9:0] = 0x0
#    ADC1[19:10] = 0x0
#    ADC2[29:20] = 0x0
0x0
#  CHAN_JUMP_ADDRESS:0x38
######## Jump Addresses for Channel14
#    ADC0[9:0] = 0x0
#    ADC1[19:10] = 0x0
#    ADC2[29:20] = 0x0
0x0
#  CHAN_JUMP_ADDRESS:0x3c
######## Jump Addresses for Channel15
#    ADC0[9:0] = 0x1a
#    ADC1[19:10] = 0x2c
#    ADC2[29:20] = 0x0
0xb01a
#  DATA:0x40
# - Low Pass Filter Data, Initial Value:  0.000 V ( 0 ) 
#    DATA[31:0] = 0x0
0x0
#  MOVE_REG_TO_REG:0x44
# - Move ADC Result from FIFO to ALUD register
#    C2A[22:22] = 0x0
#    C2A_DLY[18:18] = 0x0
#    C2D[20:20] = 0x0
#    C2D_DLY[16:16] = 0x0
#    DEST_REG[29:24] = 0xf
#    NEGA[23:23] = 0x0
#    NEGA_DLY[19:19] = 0x0
#    S2B[21:21] = 0x0
#    S2B_DLY[17:17] = 0x0
#    SRC_REG[5:0] = 0x22
#    SRC_TYPE[12:11] = 0x0
#    XFER_CTRL[31:30] = 0x1
0x4f000022
#  LOAD_CONSTANT_TO_REG_ALU_DE:0x48
######## Linear Transformation Function:  ADCDirectInput_0
# - Load M factor to ALUE = 1 ( 16384 ) 
#    C2A[22:22] = 0x0
#    C2A_DLY[18:18] = 0x0
#    C2D[20:20] = 0x0
#    C2D_DLY[16:16] = 0x0
#    CONSTANT_VALUE[15:0] = 0x4000
#    DEST_REG[29:24] = 0x10
#    NEGA[23:23] = 0x0
#    NEGA_DLY[19:19] = 0x0
#    S2B[21:21] = 0x0
#    S2B_DLY[17:17] = 0x0
#    XFER_CTRL[31:30] = 0x0
0x10004000
#  LOAD_CONSTANT_TO_REG:0x4c
# - Load upper 24-bits of B value to ALUA = 0 ( 0 ) 
#    CONSTANT_VALUE[23:0] = 0x0
#    DEST_REG[29:24] = 0x9
#    XFER_CTRL[31:30] = 0x0
0x9000000
#  LOAD_CONSTANT_TO_REG:0x50
# - NOP to allow y=mx+b result to load into ALUC
#    CONSTANT_VALUE[23:0] = 0x0
#    DEST_REG[29:24] = 0x0
#    XFER_CTRL[31:30] = 0x0
0x0
#  MOVE_REG_TO_REG:0x54
######## Low Pass Filter Function:  ADCDirectInput_0
# - Move transformed data from previous calculation ALUC to ALUB register
#    C2A[22:22] = 0x0
#    C2A_DLY[18:18] = 0x0
#    C2D[20:20] = 0x0
#    C2D_DLY[16:16] = 0x0
#    DEST_REG[29:24] = 0xb
#    NEGA[23:23] = 0x0
#    NEGA_DLY[19:19] = 0x0
#    S2B[21:21] = 0x0
#    S2B_DLY[17:17] = 0x0
#    SRC_REG[5:0] = 0xd
#    SRC_TYPE[12:11] = 0x0
#    XFER_CTRL[31:30] = 0x1
0x4b00000d
#  COPY_REG_TO_SRAM32:0x58
# - Factor=1, Skip Averaging
#    DEST_SRAM_ADDR[10:0] = 0x40
#    DEST_TYPE[12:11] = 0x3
#    SRC_REG[29:24] = 0xa
#    WRITEMODE[13:13] = 0x1
#    XFER_CTRL[31:30] = 0x2
0x8a003840
#  LOAD_CONSTANT_TO_REG:0x5c
# - Clear A register in preparation of threshold comparison (optional)
#    CONSTANT_VALUE[23:0] = 0x0
#    DEST_REG[29:24] = 0x8
#    XFER_CTRL[31:30] = 0x0
0x8000000
#  LOAD_CONSTANT_TO_REG:0x60
# - ADCDirectInput_0 PPE Done
#    CONSTANT_VALUE[23:0] = 0x0
#    DEST_REG[29:24] = 0x3f
#    XFER_CTRL[31:30] = 0x0
0x3f000000
#  DATA:0x64
# - Low Pass Filter Data
#    DATA[31:0] = 0x0
0x0
#  MOVE_REG_TO_REG:0x68
# - Move ADC Result from FIFO to ALUD register
#    C2A[22:22] = 0x0
#    C2A_DLY[18:18] = 0x0
#    C2D[20:20] = 0x0
#    C2D_DLY[16:16] = 0x0
#    DEST_REG[29:24] = 0xf
#    NEGA[23:23] = 0x0
#    NEGA_DLY[19:19] = 0x0
#    S2B[21:21] = 0x0
#    S2B_DLY[17:17] = 0x0
#    SRC_REG[5:0] = 0x22
#    SRC_TYPE[12:11] = 0x0
#    XFER_CTRL[31:30] = 0x1
0x4f000022
#  LOAD_CONSTANT_TO_REG_ALU_DE:0x6c
######## Linear Transformation Function:  SDD_0
# - Load M factor to ALUE = 1 ( 16384 ) 
#    C2A[22:22] = 0x0
#    C2A_DLY[18:18] = 0x0
#    C2D[20:20] = 0x0
#    C2D_DLY[16:16] = 0x0
#    CONSTANT_VALUE[15:0] = 0x4000
#    DEST_REG[29:24] = 0x10
#    NEGA[23:23] = 0x0
#    NEGA_DLY[19:19] = 0x0
#    S2B[21:21] = 0x0
#    S2B_DLY[17:17] = 0x0
#    XFER_CTRL[31:30] = 0x0
0x10004000
#  LOAD_CONSTANT_TO_REG:0x70
# - Load upper 24-bits of B value to ALUA = 0 ( 0 ) 
#    CONSTANT_VALUE[23:0] = 0x0
#    DEST_REG[29:24] = 0x9
#    XFER_CTRL[31:30] = 0x0
0x9000000
#  LOAD_CONSTANT_TO_REG:0x74
# - NOP to allow y=mx+b result to load into ALUC
#    CONSTANT_VALUE[23:0] = 0x0
#    DEST_REG[29:24] = 0x0
#    XFER_CTRL[31:30] = 0x0
0x0
#  MOVE_REG_TO_REG:0x78
######## Low Pass Filter Function:  SDD_0
# - Move transformed data from previous calculation ALUC to ALUB register
#    C2A[22:22] = 0x0
#    C2A_DLY[18:18] = 0x0
#    C2D[20:20] = 0x0
#    C2D_DLY[16:16] = 0x0
#    DEST_REG[29:24] = 0xb
#    NEGA[23:23] = 0x0
#    NEGA_DLY[19:19] = 0x0
#    S2B[21:21] = 0x0
#    S2B_DLY[17:17] = 0x0
#    SRC_REG[5:0] = 0xd
#    SRC_TYPE[12:11] = 0x0
#    XFER_CTRL[31:30] = 0x1
0x4b00000d
#  COPY_REG_TO_SRAM32:0x7c
# - Factor=1, Skip Averaging
#    DEST_SRAM_ADDR[10:0] = 0x64
#    DEST_TYPE[12:11] = 0x3
#    SRC_REG[29:24] = 0xa
#    WRITEMODE[13:13] = 0x1
#    XFER_CTRL[31:30] = 0x2
0x8a003864
#  LOAD_CONSTANT_TO_REG:0x80
# - Clear A register in preparation of threshold comparison (optional)
#    CONSTANT_VALUE[23:0] = 0x0
#    DEST_REG[29:24] = 0x8
#    XFER_CTRL[31:30] = 0x0
0x8000000
#  LOAD_CONSTANT_TO_REG:0x84
# - SDD_0 PPE Done
#    CONSTANT_VALUE[23:0] = 0x0
#    DEST_REG[29:24] = 0x3f
#    XFER_CTRL[31:30] = 0x0
0x3f000000
#  DATA:0x88
# - Low Pass Filter Data, Initial Value:  0.000 V ( 0 ) 
#    DATA[31:0] = 0x0
0x0
#  MOVE_REG_TO_REG:0x8c
# - Move ADC Result from FIFO to ALUD register
#    C2A[22:22] = 0x0
#    C2A_DLY[18:18] = 0x0
#    C2D[20:20] = 0x0
#    C2D_DLY[16:16] = 0x0
#    DEST_REG[29:24] = 0xf
#    NEGA[23:23] = 0x0
#    NEGA_DLY[19:19] = 0x0
#    S2B[21:21] = 0x0
#    S2B_DLY[17:17] = 0x0
#    SRC_REG[5:0] = 0x22
#    SRC_TYPE[12:11] = 0x0
#    XFER_CTRL[31:30] = 0x1
0x4f000022
#  LOAD_CONSTANT_TO_REG_ALU_DE:0x90
######## Linear Transformation Function:  ADCDirectInput_1
# - Load M factor to ALUE = 1 ( 16384 ) 
#    C2A[22:22] = 0x0
#    C2A_DLY[18:18] = 0x0
#    C2D[20:20] = 0x0
#    C2D_DLY[16:16] = 0x0
#    CONSTANT_VALUE[15:0] = 0x4000
#    DEST_REG[29:24] = 0x10
#    NEGA[23:23] = 0x0
#    NEGA_DLY[19:19] = 0x0
#    S2B[21:21] = 0x0
#    S2B_DLY[17:17] = 0x0
#    XFER_CTRL[31:30] = 0x0
0x10004000
#  LOAD_CONSTANT_TO_REG:0x94
# - Load upper 24-bits of B value to ALUA = 0 ( 0 ) 
#    CONSTANT_VALUE[23:0] = 0x0
#    DEST_REG[29:24] = 0x9
#    XFER_CTRL[31:30] = 0x0
0x9000000
#  LOAD_CONSTANT_TO_REG:0x98
# - NOP to allow y=mx+b result to load into ALUC
#    CONSTANT_VALUE[23:0] = 0x0
#    DEST_REG[29:24] = 0x0
#    XFER_CTRL[31:30] = 0x0
0x0
#  MOVE_REG_TO_REG:0x9c
######## Low Pass Filter Function:  ADCDirectInput_1
# - Move transformed data from previous calculation ALUC to ALUB register
#    C2A[22:22] = 0x0
#    C2A_DLY[18:18] = 0x0
#    C2D[20:20] = 0x0
#    C2D_DLY[16:16] = 0x0
#    DEST_REG[29:24] = 0xb
#    NEGA[23:23] = 0x0
#    NEGA_DLY[19:19] = 0x0
#    S2B[21:21] = 0x0
#    S2B_DLY[17:17] = 0x0
#    SRC_REG[5:0] = 0xd
#    SRC_TYPE[12:11] = 0x0
#    XFER_CTRL[31:30] = 0x1
0x4b00000d
#  COPY_REG_TO_SRAM32:0xa0
# - Factor=1, Skip Averaging
#    DEST_SRAM_ADDR[10:0] = 0x88
#    DEST_TYPE[12:11] = 0x3
#    SRC_REG[29:24] = 0xa
#    WRITEMODE[13:13] = 0x1
#    XFER_CTRL[31:30] = 0x2
0x8a003888
#  LOAD_CONSTANT_TO_REG:0xa4
# - Clear A register in preparation of threshold comparison (optional)
#    CONSTANT_VALUE[23:0] = 0x0
#    DEST_REG[29:24] = 0x8
#    XFER_CTRL[31:30] = 0x0
0x8000000
#  LOAD_CONSTANT_TO_REG:0xa8
# - ADCDirectInput_1 PPE Done
#    CONSTANT_VALUE[23:0] = 0x0
#    DEST_REG[29:24] = 0x3f
#    XFER_CTRL[31:30] = 0x0
0x3f000000
#  DATA:0xac
# - Low Pass Filter Data
#    DATA[31:0] = 0x0
0x0
#  MOVE_REG_TO_REG:0xb0
# - Move ADC Result from FIFO to ALUD register
#    C2A[22:22] = 0x0
#    C2A_DLY[18:18] = 0x0
#    C2D[20:20] = 0x0
#    C2D_DLY[16:16] = 0x0
#    DEST_REG[29:24] = 0xf
#    NEGA[23:23] = 0x0
#    NEGA_DLY[19:19] = 0x0
#    S2B[21:21] = 0x0
#    S2B_DLY[17:17] = 0x0
#    SRC_REG[5:0] = 0x22
#    SRC_TYPE[12:11] = 0x0
#    XFER_CTRL[31:30] = 0x1
0x4f000022
#  LOAD_CONSTANT_TO_REG_ALU_DE:0xb4
######## Linear Transformation Function:  SDD_1
# - Load M factor to ALUE = 1 ( 16384 ) 
#    C2A[22:22] = 0x0
#    C2A_DLY[18:18] = 0x0
#    C2D[20:20] = 0x0
#    C2D_DLY[16:16] = 0x0
#    CONSTANT_VALUE[15:0] = 0x4000
#    DEST_REG[29:24] = 0x10
#    NEGA[23:23] = 0x0
#    NEGA_DLY[19:19] = 0x0
#    S2B[21:21] = 0x0
#    S2B_DLY[17:17] = 0x0
#    XFER_CTRL[31:30] = 0x0
0x10004000
#  LOAD_CONSTANT_TO_REG:0xb8
# - Load upper 24-bits of B value to ALUA = 0 ( 0 ) 
#    CONSTANT_VALUE[23:0] = 0x0
#    DEST_REG[29:24] = 0x9
#    XFER_CTRL[31:30] = 0x0
0x9000000
#  LOAD_CONSTANT_TO_REG:0xbc
# - NOP to allow y=mx+b result to load into ALUC
#    CONSTANT_VALUE[23:0] = 0x0
#    DEST_REG[29:24] = 0x0
#    XFER_CTRL[31:30] = 0x0
0x0
#  MOVE_REG_TO_REG:0xc0
######## Low Pass Filter Function:  SDD_1
# - Move transformed data from previous calculation ALUC to ALUB register
#    C2A[22:22] = 0x0
#    C2A_DLY[18:18] = 0x0
#    C2D[20:20] = 0x0
#    C2D_DLY[16:16] = 0x0
#    DEST_REG[29:24] = 0xb
#    NEGA[23:23] = 0x0
#    NEGA_DLY[19:19] = 0x0
#    S2B[21:21] = 0x0
#    S2B_DLY[17:17] = 0x0
#    SRC_REG[5:0] = 0xd
#    SRC_TYPE[12:11] = 0x0
#    XFER_CTRL[31:30] = 0x1
0x4b00000d
#  COPY_REG_TO_SRAM32:0xc4
# - Factor=1, Skip Averaging
#    DEST_SRAM_ADDR[10:0] = 0xac
#    DEST_TYPE[12:11] = 0x3
#    SRC_REG[29:24] = 0xa
#    WRITEMODE[13:13] = 0x1
#    XFER_CTRL[31:30] = 0x2
0x8a0038ac
#  LOAD_CONSTANT_TO_REG:0xc8
# - Clear A register in preparation of threshold comparison (optional)
#    CONSTANT_VALUE[23:0] = 0x0
#    DEST_REG[29:24] = 0x8
#    XFER_CTRL[31:30] = 0x0
0x8000000
#  LOAD_CONSTANT_TO_REG:0xcc
# - SDD_1 PPE Done
#    CONSTANT_VALUE[23:0] = 0x0
#    DEST_REG[29:24] = 0x3f
#    XFER_CTRL[31:30] = 0x0
0x3f000000


#ACE_SSE_RAM = 0x40020800
#  ADC0_MISC_CTRL:0x0
######## ADC0 setup and configuration 
#    ADCRESET[4:4] = 0x0
#    MODE[3:0] = 0x6
#    PWRDWN[5:5] = 0x0
#    SSE_INT_ADDR[15:8] = 0x17
0x1706
#  ADC0_TVC:0x4
#    SSE_INT_ADDR[15:8] = 0x16
#    TVC[7:0] = 0x2
0x1602
#  DAC0_CTRL:0x8
#    DACRES[3:2] = 0x0
#    DACSEL[1:0] = 0x0
#    EN[5:5] = 0x1
#    REG_SEL[6:6] = 0x0
#    SSE_INT_ADDR[15:8] = 0x18
#    SW_OBD[4:4] = 0x0
0x1820
#  ADC0_STC:0xc
######## User Instruction: Sample ADCDirectInput_0
#    SSE_INT_ADDR[15:8] = 0x15
#    STC[7:0] = 0x51
0x1551
#  ADC0_CONV_CTRL:0x10
#    ADCSTART[7:7] = 0x1
#    AMUXSEL[4:0] = 0xc
#    CONVWAIT[6:6] = 0x1
#    SSE_INT_ADDR[15:8] = 0x14
0x14cc
#  NOP:0x14
# - Wait for DataValid
#    NOP[7:0] = 0x0
#    SSE_INT_ADDR[15:8] = 0x0
0x0
#  PC0_LO:0x18
######## User Instruction: Restarts the execution sequence for this timeslot  Jump to program counter 3
#    PC[7:0] = 0x3
#    SSE_INT_ADDR[15:8] = 0x10
0x1003
#  ADC1_MISC_CTRL:0x1c
######## ADC1 setup and configuration 
#    ADCRESET[4:4] = 0x0
#    MODE[3:0] = 0x6
#    PWRDWN[5:5] = 0x0
#    SSE_INT_ADDR[15:8] = 0x27
0x2706
#  ADC1_TVC:0x20
#    SSE_INT_ADDR[15:8] = 0x26
#    TVC[7:0] = 0x2
0x2602
#  DAC1_CTRL:0x24
#    DACRES[3:2] = 0x0
#    DACSEL[1:0] = 0x0
#    EN[5:5] = 0x1
#    REG_SEL[6:6] = 0x0
#    SSE_INT_ADDR[15:8] = 0x28
#    SW_OBD[4:4] = 0x0
0x2820
#  ADC1_STC:0x28
######## User Instruction: Sample ADCDirectInput_1
#    SSE_INT_ADDR[15:8] = 0x25
#    STC[7:0] = 0x51
0x2551
#  ADC1_CONV_CTRL:0x2c
#    ADCSTART[7:7] = 0x1
#    AMUXSEL[4:0] = 0x9
#    CONVWAIT[6:6] = 0x1
#    SSE_INT_ADDR[15:8] = 0x24
0x24c9
#  NOP:0x30
# - Wait for DataValid
#    NOP[7:0] = 0x0
#    SSE_INT_ADDR[15:8] = 0x0
0x0
#  PC1_LO:0x34
######## User Instruction: Restarts the execution sequence for this timeslot  Jump to program counter 10
#    PC[7:0] = 0xa
#    SSE_INT_ADDR[15:8] = 0x20
0x200a


#PPE_MERGE_CONFIG = 0x0
#  MERGE_DATA_BLOCK_WORD0:0x0
######## ADCDirectInput_0 : Merge Operation for M value = M2 * M1 
# - Word0:  PPE_SCRATCH64_1 <- M2(PPE_RAM)
#    MERGE_OPERATION[31:24] = 0x0
#    OPERAND_LOCATION[15:0] = 0x300
#    OPERAND_WIDTH[23:16] = 0x0
0x300
#  MERGE_DATA_BLOCK_GENERIC_WORD1:0x4
# - Word1:  PPE_SCRATCH64_1 <- M2(PPE_RAM)
#    OPERAND_TYPE[10:10] = 0x0
#    OPERAND_WIDTH[23:16] = 0x10
#    OPERATION_LOCATION[9:0] = 0x12
#    RESERVED[15:11] = 0x0
#    RESULT_WIDTH[31:24] = 0x10
0x10100012
#  MERGE_DATA_BLOCK_WORD0:0x8
# - Word0:  PPE_SCRATCH64_1 <- PPE_SCRATCH64_1 * M1
#    MERGE_OPERATION[31:24] = 0x2
#    OPERAND_LOCATION[15:0] = 0x300
#    OPERAND_WIDTH[23:16] = 0x10
0x2100300
#  MERGE_DATA_BLOCK_CHANNEL_WORD1:0xc
# - Word1:  PPE_SCRATCH64_1 <- PPE_SCRATCH64_1 * M1
#    ADC_NUMBER[5:4] = 0x0
#    CALIB_CHOICE[6:6] = 0x0
#    CHANNEL_NUMBER[3:0] = 0xc
#    OPERAND_TYPE[10:10] = 0x1
#    OPERAND_WIDTH[23:16] = 0x10
#    RESERVED1[9:7] = 0x0
#    RESERVED2[15:11] = 0x0
#    RESULT_WIDTH[31:24] = 0x20
0x2010040c
#  MERGE_DATA_BLOCK_WORD0:0x10
######## ADCDirectInput_0 : Merge Operation for C value = ( M2 * C1 ) + ( C2 )
# - Word0:  PPE_SCRATCH64_2 <- M2(PPE_RAM)
#    MERGE_OPERATION[31:24] = 0x0
#    OPERAND_LOCATION[15:0] = 0x301
#    OPERAND_WIDTH[23:16] = 0x40
0x400301
#  MERGE_DATA_BLOCK_GENERIC_WORD1:0x14
# - Word1:  PPE_SCRATCH64_2 <- M2(PPE_RAM)
#    OPERAND_TYPE[10:10] = 0x0
#    OPERAND_WIDTH[23:16] = 0x10
#    OPERATION_LOCATION[9:0] = 0x12
#    RESERVED[15:11] = 0x0
#    RESULT_WIDTH[31:24] = 0x10
0x10100012
#  MERGE_DATA_BLOCK_WORD0:0x18
# - Word0:  PPE_SCRATCH64_2 <- M2(PPE_SCRATCH64_2) * C1
#    MERGE_OPERATION[31:24] = 0x2
#    OPERAND_LOCATION[15:0] = 0x301
#    OPERAND_WIDTH[23:16] = 0x10
0x2100301
#  MERGE_DATA_BLOCK_CHANNEL_WORD1:0x1c
# - Word1:  PPE_SCRATCH64_2 <- M2(PPE_SCRATCH64_2) * C1
#    ADC_NUMBER[5:4] = 0x0
#    CALIB_CHOICE[6:6] = 0x1
#    CHANNEL_NUMBER[3:0] = 0xc
#    OPERAND_TYPE[10:10] = 0x1
#    OPERAND_WIDTH[23:16] = 0x10
#    RESERVED1[9:7] = 0x0
#    RESERVED2[15:11] = 0x0
#    RESULT_WIDTH[31:24] = 0x20
0x2010044c
#  MERGE_DATA_BLOCK_WORD0:0x20
# - Word0:  PPE_RAM <- [ C2 ](in PPE_RAM) + [ M2*C1 ](in PPE_SCRATCH64_2)
#    MERGE_OPERATION[31:24] = 0x1
#    OPERAND_LOCATION[15:0] = 0x13
#    OPERAND_WIDTH[23:16] = 0x18
0x1180013
#  MERGE_DATA_BLOCK_GENERIC_WORD1:0x24
# - Word1:  PPE_RAM <- [ C2 ](in PPE_RAM) + [ M2*C1 ](in PPE_SCRATCH64_2)
#    OPERAND_TYPE[10:10] = 0x0
#    OPERAND_WIDTH[23:16] = 0x20
#    OPERATION_LOCATION[9:0] = 0x301
#    RESERVED[15:11] = 0x0
#    RESULT_WIDTH[31:24] = 0x18
0x18200301
#  MERGE_DATA_BLOCK_WORD0:0x28
# - Word0:  PPE_RAM <- PPE_SCRATCH64_1(result of M merge) - delay storage so C merge operation can use original M value
#    MERGE_OPERATION[31:24] = 0x0
#    OPERAND_LOCATION[15:0] = 0x12
#    OPERAND_WIDTH[23:16] = 0x10
0x100012
#  MERGE_DATA_BLOCK_GENERIC_WORD1:0x2c
# - Word1:  PPE_RAM <- PPE_SCRATCH64_1(result of M merge) - delay storage so C merge operation can use original M value
#    OPERAND_TYPE[10:10] = 0x0
#    OPERAND_WIDTH[23:16] = 0x20
#    OPERATION_LOCATION[9:0] = 0x300
#    RESERVED[15:11] = 0x0
#    RESULT_WIDTH[31:24] = 0x10
0x10200300
#  MERGE_DATA_BLOCK_WORD0:0x30
######## SDD_0 : Merge Operation for M value = M2 * M1 
# - Word0:  PPE_SCRATCH64_1 <- M2(PPE_RAM)
#    MERGE_OPERATION[31:24] = 0x0
#    OPERAND_LOCATION[15:0] = 0x300
#    OPERAND_WIDTH[23:16] = 0x0
0x300
#  MERGE_DATA_BLOCK_GENERIC_WORD1:0x34
# - Word1:  PPE_SCRATCH64_1 <- M2(PPE_RAM)
#    OPERAND_TYPE[10:10] = 0x0
#    OPERAND_WIDTH[23:16] = 0x10
#    OPERATION_LOCATION[9:0] = 0x1b
#    RESERVED[15:11] = 0x0
#    RESULT_WIDTH[31:24] = 0x10
0x1010001b
#  MERGE_DATA_BLOCK_WORD0:0x38
# - Word0:  PPE_SCRATCH64_1 <- PPE_SCRATCH64_1 * M1
#    MERGE_OPERATION[31:24] = 0x2
#    OPERAND_LOCATION[15:0] = 0x300
#    OPERAND_WIDTH[23:16] = 0x10
0x2100300
#  MERGE_DATA_BLOCK_CHANNEL_WORD1:0x3c
# - Word1:  PPE_SCRATCH64_1 <- PPE_SCRATCH64_1 * M1
#    ADC_NUMBER[5:4] = 0x0
#    CALIB_CHOICE[6:6] = 0x0
#    CHANNEL_NUMBER[3:0] = 0xf
#    OPERAND_TYPE[10:10] = 0x1
#    OPERAND_WIDTH[23:16] = 0x10
#    RESERVED1[9:7] = 0x0
#    RESERVED2[15:11] = 0x0
#    RESULT_WIDTH[31:24] = 0x20
0x2010040f
#  MERGE_DATA_BLOCK_WORD0:0x40
######## SDD_0 : Merge Operation for C value = ( M2 * C1 ) + ( C2 )
# - Word0:  PPE_SCRATCH64_2 <- M2(PPE_RAM)
#    MERGE_OPERATION[31:24] = 0x0
#    OPERAND_LOCATION[15:0] = 0x301
#    OPERAND_WIDTH[23:16] = 0x40
0x400301
#  MERGE_DATA_BLOCK_GENERIC_WORD1:0x44
# - Word1:  PPE_SCRATCH64_2 <- M2(PPE_RAM)
#    OPERAND_TYPE[10:10] = 0x0
#    OPERAND_WIDTH[23:16] = 0x10
#    OPERATION_LOCATION[9:0] = 0x1b
#    RESERVED[15:11] = 0x0
#    RESULT_WIDTH[31:24] = 0x10
0x1010001b
#  MERGE_DATA_BLOCK_WORD0:0x48
# - Word0:  PPE_SCRATCH64_2 <- M2(PPE_SCRATCH64_2) * C1
#    MERGE_OPERATION[31:24] = 0x2
#    OPERAND_LOCATION[15:0] = 0x301
#    OPERAND_WIDTH[23:16] = 0x10
0x2100301
#  MERGE_DATA_BLOCK_CHANNEL_WORD1:0x4c
# - Word1:  PPE_SCRATCH64_2 <- M2(PPE_SCRATCH64_2) * C1
#    ADC_NUMBER[5:4] = 0x0
#    CALIB_CHOICE[6:6] = 0x1
#    CHANNEL_NUMBER[3:0] = 0xf
#    OPERAND_TYPE[10:10] = 0x1
#    OPERAND_WIDTH[23:16] = 0x10
#    RESERVED1[9:7] = 0x0
#    RESERVED2[15:11] = 0x0
#    RESULT_WIDTH[31:24] = 0x20
0x2010044f
#  MERGE_DATA_BLOCK_WORD0:0x50
# - Word0:  PPE_RAM <- [ C2 ](in PPE_RAM) + [ M2*C1 ](in PPE_SCRATCH64_2)
#    MERGE_OPERATION[31:24] = 0x1
#    OPERAND_LOCATION[15:0] = 0x1c
#    OPERAND_WIDTH[23:16] = 0x18
0x118001c
#  MERGE_DATA_BLOCK_GENERIC_WORD1:0x54
# - Word1:  PPE_RAM <- [ C2 ](in PPE_RAM) + [ M2*C1 ](in PPE_SCRATCH64_2)
#    OPERAND_TYPE[10:10] = 0x0
#    OPERAND_WIDTH[23:16] = 0x20
#    OPERATION_LOCATION[9:0] = 0x301
#    RESERVED[15:11] = 0x0
#    RESULT_WIDTH[31:24] = 0x18
0x18200301
#  MERGE_DATA_BLOCK_WORD0:0x58
# - Word0:  PPE_RAM <- PPE_SCRATCH64_1(result of M merge) - delay storage so C merge operation can use original M value
#    MERGE_OPERATION[31:24] = 0x0
#    OPERAND_LOCATION[15:0] = 0x1b
#    OPERAND_WIDTH[23:16] = 0x10
0x10001b
#  MERGE_DATA_BLOCK_GENERIC_WORD1:0x5c
# - Word1:  PPE_RAM <- PPE_SCRATCH64_1(result of M merge) - delay storage so C merge operation can use original M value
#    OPERAND_TYPE[10:10] = 0x0
#    OPERAND_WIDTH[23:16] = 0x20
#    OPERATION_LOCATION[9:0] = 0x300
#    RESERVED[15:11] = 0x0
#    RESULT_WIDTH[31:24] = 0x10
0x10200300
#  MERGE_DATA_BLOCK_WORD0:0x60
######## ADCDirectInput_1 : Merge Operation for M value = M2 * M1 
# - Word0:  PPE_SCRATCH64_1 <- M2(PPE_RAM)
#    MERGE_OPERATION[31:24] = 0x0
#    OPERAND_LOCATION[15:0] = 0x300
#    OPERAND_WIDTH[23:16] = 0x0
0x300
#  MERGE_DATA_BLOCK_GENERIC_WORD1:0x64
# - Word1:  PPE_SCRATCH64_1 <- M2(PPE_RAM)
#    OPERAND_TYPE[10:10] = 0x0
#    OPERAND_WIDTH[23:16] = 0x10
#    OPERATION_LOCATION[9:0] = 0x24
#    RESERVED[15:11] = 0x0
#    RESULT_WIDTH[31:24] = 0x10
0x10100024
#  MERGE_DATA_BLOCK_WORD0:0x68
# - Word0:  PPE_SCRATCH64_1 <- PPE_SCRATCH64_1 * M1
#    MERGE_OPERATION[31:24] = 0x2
#    OPERAND_LOCATION[15:0] = 0x300
#    OPERAND_WIDTH[23:16] = 0x10
0x2100300
#  MERGE_DATA_BLOCK_CHANNEL_WORD1:0x6c
# - Word1:  PPE_SCRATCH64_1 <- PPE_SCRATCH64_1 * M1
#    ADC_NUMBER[5:4] = 0x1
#    CALIB_CHOICE[6:6] = 0x0
#    CHANNEL_NUMBER[3:0] = 0x9
#    OPERAND_TYPE[10:10] = 0x1
#    OPERAND_WIDTH[23:16] = 0x10
#    RESERVED1[9:7] = 0x0
#    RESERVED2[15:11] = 0x0
#    RESULT_WIDTH[31:24] = 0x20
0x20100419
#  MERGE_DATA_BLOCK_WORD0:0x70
######## ADCDirectInput_1 : Merge Operation for C value = ( M2 * C1 ) + ( C2 )
# - Word0:  PPE_SCRATCH64_2 <- M2(PPE_RAM)
#    MERGE_OPERATION[31:24] = 0x0
#    OPERAND_LOCATION[15:0] = 0x301
#    OPERAND_WIDTH[23:16] = 0x40
0x400301
#  MERGE_DATA_BLOCK_GENERIC_WORD1:0x74
# - Word1:  PPE_SCRATCH64_2 <- M2(PPE_RAM)
#    OPERAND_TYPE[10:10] = 0x0
#    OPERAND_WIDTH[23:16] = 0x10
#    OPERATION_LOCATION[9:0] = 0x24
#    RESERVED[15:11] = 0x0
#    RESULT_WIDTH[31:24] = 0x10
0x10100024
#  MERGE_DATA_BLOCK_WORD0:0x78
# - Word0:  PPE_SCRATCH64_2 <- M2(PPE_SCRATCH64_2) * C1
#    MERGE_OPERATION[31:24] = 0x2
#    OPERAND_LOCATION[15:0] = 0x301
#    OPERAND_WIDTH[23:16] = 0x10
0x2100301
#  MERGE_DATA_BLOCK_CHANNEL_WORD1:0x7c
# - Word1:  PPE_SCRATCH64_2 <- M2(PPE_SCRATCH64_2) * C1
#    ADC_NUMBER[5:4] = 0x1
#    CALIB_CHOICE[6:6] = 0x1
#    CHANNEL_NUMBER[3:0] = 0x9
#    OPERAND_TYPE[10:10] = 0x1
#    OPERAND_WIDTH[23:16] = 0x10
#    RESERVED1[9:7] = 0x0
#    RESERVED2[15:11] = 0x0
#    RESULT_WIDTH[31:24] = 0x20
0x20100459
#  MERGE_DATA_BLOCK_WORD0:0x80
# - Word0:  PPE_RAM <- [ C2 ](in PPE_RAM) + [ M2*C1 ](in PPE_SCRATCH64_2)
#    MERGE_OPERATION[31:24] = 0x1
#    OPERAND_LOCATION[15:0] = 0x25
#    OPERAND_WIDTH[23:16] = 0x18
0x1180025
#  MERGE_DATA_BLOCK_GENERIC_WORD1:0x84
# - Word1:  PPE_RAM <- [ C2 ](in PPE_RAM) + [ M2*C1 ](in PPE_SCRATCH64_2)
#    OPERAND_TYPE[10:10] = 0x0
#    OPERAND_WIDTH[23:16] = 0x20
#    OPERATION_LOCATION[9:0] = 0x301
#    RESERVED[15:11] = 0x0
#    RESULT_WIDTH[31:24] = 0x18
0x18200301
#  MERGE_DATA_BLOCK_WORD0:0x88
# - Word0:  PPE_RAM <- PPE_SCRATCH64_1(result of M merge) - delay storage so C merge operation can use original M value
#    MERGE_OPERATION[31:24] = 0x0
#    OPERAND_LOCATION[15:0] = 0x24
#    OPERAND_WIDTH[23:16] = 0x10
0x100024
#  MERGE_DATA_BLOCK_GENERIC_WORD1:0x8c
# - Word1:  PPE_RAM <- PPE_SCRATCH64_1(result of M merge) - delay storage so C merge operation can use original M value
#    OPERAND_TYPE[10:10] = 0x0
#    OPERAND_WIDTH[23:16] = 0x20
#    OPERATION_LOCATION[9:0] = 0x300
#    RESERVED[15:11] = 0x0
#    RESULT_WIDTH[31:24] = 0x10
0x10200300
#  MERGE_DATA_BLOCK_WORD0:0x90
######## SDD_1 : Merge Operation for M value = M2 * M1 
# - Word0:  PPE_SCRATCH64_1 <- M2(PPE_RAM)
#    MERGE_OPERATION[31:24] = 0x0
#    OPERAND_LOCATION[15:0] = 0x300
#    OPERAND_WIDTH[23:16] = 0x0
0x300
#  MERGE_DATA_BLOCK_GENERIC_WORD1:0x94
# - Word1:  PPE_SCRATCH64_1 <- M2(PPE_RAM)
#    OPERAND_TYPE[10:10] = 0x0
#    OPERAND_WIDTH[23:16] = 0x10
#    OPERATION_LOCATION[9:0] = 0x2d
#    RESERVED[15:11] = 0x0
#    RESULT_WIDTH[31:24] = 0x10
0x1010002d
#  MERGE_DATA_BLOCK_WORD0:0x98
# - Word0:  PPE_SCRATCH64_1 <- PPE_SCRATCH64_1 * M1
#    MERGE_OPERATION[31:24] = 0x2
#    OPERAND_LOCATION[15:0] = 0x300
#    OPERAND_WIDTH[23:16] = 0x10
0x2100300
#  MERGE_DATA_BLOCK_CHANNEL_WORD1:0x9c
# - Word1:  PPE_SCRATCH64_1 <- PPE_SCRATCH64_1 * M1
#    ADC_NUMBER[5:4] = 0x1
#    CALIB_CHOICE[6:6] = 0x0
#    CHANNEL_NUMBER[3:0] = 0xf
#    OPERAND_TYPE[10:10] = 0x1
#    OPERAND_WIDTH[23:16] = 0x10
#    RESERVED1[9:7] = 0x0
#    RESERVED2[15:11] = 0x0
#    RESULT_WIDTH[31:24] = 0x20
0x2010041f
#  MERGE_DATA_BLOCK_WORD0:0xa0
######## SDD_1 : Merge Operation for C value = ( M2 * C1 ) + ( C2 )
# - Word0:  PPE_SCRATCH64_2 <- M2(PPE_RAM)
#    MERGE_OPERATION[31:24] = 0x0
#    OPERAND_LOCATION[15:0] = 0x301
#    OPERAND_WIDTH[23:16] = 0x40
0x400301
#  MERGE_DATA_BLOCK_GENERIC_WORD1:0xa4
# - Word1:  PPE_SCRATCH64_2 <- M2(PPE_RAM)
#    OPERAND_TYPE[10:10] = 0x0
#    OPERAND_WIDTH[23:16] = 0x10
#    OPERATION_LOCATION[9:0] = 0x2d
#    RESERVED[15:11] = 0x0
#    RESULT_WIDTH[31:24] = 0x10
0x1010002d
#  MERGE_DATA_BLOCK_WORD0:0xa8
# - Word0:  PPE_SCRATCH64_2 <- M2(PPE_SCRATCH64_2) * C1
#    MERGE_OPERATION[31:24] = 0x2
#    OPERAND_LOCATION[15:0] = 0x301
#    OPERAND_WIDTH[23:16] = 0x10
0x2100301
#  MERGE_DATA_BLOCK_CHANNEL_WORD1:0xac
# - Word1:  PPE_SCRATCH64_2 <- M2(PPE_SCRATCH64_2) * C1
#    ADC_NUMBER[5:4] = 0x1
#    CALIB_CHOICE[6:6] = 0x1
#    CHANNEL_NUMBER[3:0] = 0xf
#    OPERAND_TYPE[10:10] = 0x1
#    OPERAND_WIDTH[23:16] = 0x10
#    RESERVED1[9:7] = 0x0
#    RESERVED2[15:11] = 0x0
#    RESULT_WIDTH[31:24] = 0x20
0x2010045f
#  MERGE_DATA_BLOCK_WORD0:0xb0
# - Word0:  PPE_RAM <- [ C2 ](in PPE_RAM) + [ M2*C1 ](in PPE_SCRATCH64_2)
#    MERGE_OPERATION[31:24] = 0x1
#    OPERAND_LOCATION[15:0] = 0x2e
#    OPERAND_WIDTH[23:16] = 0x18
0x118002e
#  MERGE_DATA_BLOCK_GENERIC_WORD1:0xb4
# - Word1:  PPE_RAM <- [ C2 ](in PPE_RAM) + [ M2*C1 ](in PPE_SCRATCH64_2)
#    OPERAND_TYPE[10:10] = 0x0
#    OPERAND_WIDTH[23:16] = 0x20
#    OPERATION_LOCATION[9:0] = 0x301
#    RESERVED[15:11] = 0x0
#    RESULT_WIDTH[31:24] = 0x18
0x18200301
#  MERGE_DATA_BLOCK_WORD0:0xb8
# - Word0:  PPE_RAM <- PPE_SCRATCH64_1(result of M merge) - delay storage so C merge operation can use original M value
#    MERGE_OPERATION[31:24] = 0x0
#    OPERAND_LOCATION[15:0] = 0x2d
#    OPERAND_WIDTH[23:16] = 0x10
0x10002d
#  MERGE_DATA_BLOCK_GENERIC_WORD1:0xbc
# - Word1:  PPE_RAM <- PPE_SCRATCH64_1(result of M merge) - delay storage so C merge operation can use original M value
#    OPERAND_TYPE[10:10] = 0x0
#    OPERAND_WIDTH[23:16] = 0x20
#    OPERATION_LOCATION[9:0] = 0x300
#    RESERVED[15:11] = 0x0
#    RESULT_WIDTH[31:24] = 0x10
0x10200300


