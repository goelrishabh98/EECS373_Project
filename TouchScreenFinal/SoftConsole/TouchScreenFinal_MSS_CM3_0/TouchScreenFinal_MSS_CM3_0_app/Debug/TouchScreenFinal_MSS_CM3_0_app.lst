
TouchScreenFinal_MSS_CM3_0_app:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000033ac  20000000  20000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  200033ac  200033ac  0000b3ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000128  200033f0  200033f0  0000b3f0  2**2
                  ALLOC
  3 .stack        00003000  20003518  20003518  0000b3f0  2**0
                  ALLOC
  4 .comment      000001ae  00000000  00000000  0000b3f0  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000006c8  00000000  00000000  0000b59e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000012ba  00000000  00000000  0000bc66  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00009548  00000000  00000000  0000cf20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000f38  00000000  00000000  00016468  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000033cf  00000000  00000000  000173a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000017dc  00000000  00000000  0001a770  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003e58  00000000  00000000  0001bf4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002694  00000000  00000000  0001fda4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 0003a17b  00000000  00000000  00022438  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000025  00000000  00000000  0005c5b3  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 00000680  00000000  00000000  0005c5d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

20000000 <__text_start>:
20000000:	20010000 	.word	0x20010000
20000004:	20000299 	.word	0x20000299
20000008:	20000309 	.word	0x20000309
2000000c:	2000030b 	.word	0x2000030b
20000010:	2000030d 	.word	0x2000030d
20000014:	2000030f 	.word	0x2000030f
20000018:	20000311 	.word	0x20000311
	...
2000002c:	20000313 	.word	0x20000313
20000030:	20000315 	.word	0x20000315
20000034:	00000000 	.word	0x00000000
20000038:	20000317 	.word	0x20000317
2000003c:	20000319 	.word	0x20000319
20000040:	2000031b 	.word	0x2000031b
20000044:	2000031d 	.word	0x2000031d
20000048:	2000031f 	.word	0x2000031f
2000004c:	20000321 	.word	0x20000321
20000050:	20000323 	.word	0x20000323
20000054:	20000325 	.word	0x20000325
20000058:	20000327 	.word	0x20000327
2000005c:	20000329 	.word	0x20000329
20000060:	2000032b 	.word	0x2000032b
20000064:	2000032d 	.word	0x2000032d
20000068:	2000032f 	.word	0x2000032f
2000006c:	20000331 	.word	0x20000331
20000070:	20001975 	.word	0x20001975
20000074:	200019a1 	.word	0x200019a1
20000078:	20000337 	.word	0x20000337
2000007c:	20000339 	.word	0x20000339
20000080:	2000033b 	.word	0x2000033b
20000084:	2000033d 	.word	0x2000033d
20000088:	2000033f 	.word	0x2000033f
2000008c:	20000341 	.word	0x20000341
20000090:	20000343 	.word	0x20000343
20000094:	20000345 	.word	0x20000345
20000098:	20000347 	.word	0x20000347
2000009c:	20000349 	.word	0x20000349
200000a0:	2000034b 	.word	0x2000034b
	...
200000bc:	2000034d 	.word	0x2000034d
200000c0:	2000034f 	.word	0x2000034f
200000c4:	20000351 	.word	0x20000351
200000c8:	20000353 	.word	0x20000353
200000cc:	20000355 	.word	0x20000355
200000d0:	20000357 	.word	0x20000357
200000d4:	20000359 	.word	0x20000359
200000d8:	2000035b 	.word	0x2000035b
200000dc:	2000035d 	.word	0x2000035d
200000e0:	2000035f 	.word	0x2000035f
200000e4:	20000361 	.word	0x20000361
200000e8:	20000363 	.word	0x20000363
200000ec:	20000365 	.word	0x20000365
200000f0:	20000367 	.word	0x20000367
200000f4:	20000369 	.word	0x20000369
200000f8:	2000036b 	.word	0x2000036b
200000fc:	2000036d 	.word	0x2000036d
20000100:	2000036f 	.word	0x2000036f
20000104:	20000371 	.word	0x20000371
20000108:	20000373 	.word	0x20000373
2000010c:	20000375 	.word	0x20000375
20000110:	20000377 	.word	0x20000377
20000114:	20000379 	.word	0x20000379
20000118:	2000037b 	.word	0x2000037b
2000011c:	2000037d 	.word	0x2000037d
20000120:	2000037f 	.word	0x2000037f
20000124:	20000381 	.word	0x20000381
20000128:	20000383 	.word	0x20000383
2000012c:	20000385 	.word	0x20000385
20000130:	20000387 	.word	0x20000387
20000134:	20000389 	.word	0x20000389
20000138:	2000038b 	.word	0x2000038b
2000013c:	2000038d 	.word	0x2000038d
20000140:	2000038f 	.word	0x2000038f
20000144:	20000391 	.word	0x20000391
20000148:	20000393 	.word	0x20000393
2000014c:	20000395 	.word	0x20000395
20000150:	20000397 	.word	0x20000397
20000154:	20000399 	.word	0x20000399
20000158:	2000039b 	.word	0x2000039b
2000015c:	2000039d 	.word	0x2000039d
20000160:	2000039f 	.word	0x2000039f
20000164:	200003a1 	.word	0x200003a1
20000168:	200003a3 	.word	0x200003a3
2000016c:	200003a5 	.word	0x200003a5
20000170:	200003a7 	.word	0x200003a7
20000174:	200003a9 	.word	0x200003a9
20000178:	200003ab 	.word	0x200003ab
2000017c:	200003ad 	.word	0x200003ad
20000180:	200003af 	.word	0x200003af
20000184:	200003b1 	.word	0x200003b1
20000188:	200003b3 	.word	0x200003b3
2000018c:	200003b5 	.word	0x200003b5
20000190:	200003b7 	.word	0x200003b7
20000194:	200003b9 	.word	0x200003b9
20000198:	200003bb 	.word	0x200003bb
2000019c:	200003bd 	.word	0x200003bd
200001a0:	200003bf 	.word	0x200003bf
200001a4:	200003c1 	.word	0x200003c1
200001a8:	200003c3 	.word	0x200003c3
200001ac:	200003c5 	.word	0x200003c5
200001b0:	200003c7 	.word	0x200003c7
200001b4:	200003c9 	.word	0x200003c9
200001b8:	200003cb 	.word	0x200003cb
200001bc:	200003cd 	.word	0x200003cd
200001c0:	200003cf 	.word	0x200003cf
200001c4:	200003d1 	.word	0x200003d1
200001c8:	200003d3 	.word	0x200003d3
200001cc:	200003d5 	.word	0x200003d5
200001d0:	200003d7 	.word	0x200003d7
200001d4:	200003d9 	.word	0x200003d9
200001d8:	200003db 	.word	0x200003db
200001dc:	200003dd 	.word	0x200003dd
200001e0:	200003df 	.word	0x200003df
200001e4:	200003e1 	.word	0x200003e1
200001e8:	200003e3 	.word	0x200003e3
200001ec:	200003e5 	.word	0x200003e5
200001f0:	200003e7 	.word	0x200003e7
200001f4:	200003e9 	.word	0x200003e9
200001f8:	200003eb 	.word	0x200003eb
200001fc:	200003ed 	.word	0x200003ed
20000200:	200003ef 	.word	0x200003ef
20000204:	200003f1 	.word	0x200003f1
20000208:	200003f3 	.word	0x200003f3
2000020c:	200003f5 	.word	0x200003f5
20000210:	200003f7 	.word	0x200003f7
20000214:	200003f9 	.word	0x200003f9
20000218:	20001de5 	.word	0x20001de5
2000021c:	20001e0d 	.word	0x20001e0d
20000220:	20001e35 	.word	0x20001e35
20000224:	20001e5d 	.word	0x20001e5d
20000228:	20001e85 	.word	0x20001e85
2000022c:	20001ead 	.word	0x20001ead
20000230:	20001ed5 	.word	0x20001ed5
20000234:	20001efd 	.word	0x20001efd
20000238:	20001f25 	.word	0x20001f25
2000023c:	20001f4d 	.word	0x20001f4d
20000240:	20001f75 	.word	0x20001f75
20000244:	20001f9d 	.word	0x20001f9d
20000248:	20001fc5 	.word	0x20001fc5
2000024c:	20001fed 	.word	0x20001fed
20000250:	20002015 	.word	0x20002015
20000254:	2000203d 	.word	0x2000203d
20000258:	20002065 	.word	0x20002065
2000025c:	2000208d 	.word	0x2000208d
20000260:	200020b5 	.word	0x200020b5
20000264:	200020dd 	.word	0x200020dd
20000268:	20002105 	.word	0x20002105
2000026c:	2000212d 	.word	0x2000212d
20000270:	20002155 	.word	0x20002155
20000274:	2000217d 	.word	0x2000217d
20000278:	200021a5 	.word	0x200021a5
2000027c:	200021cd 	.word	0x200021cd
20000280:	200021f5 	.word	0x200021f5
20000284:	2000221d 	.word	0x2000221d
20000288:	20002245 	.word	0x20002245
2000028c:	2000226d 	.word	0x2000226d
20000290:	20002295 	.word	0x20002295
20000294:	200022bd 	.word	0x200022bd

20000298 <Reset_Handler>:
20000298:	4868      	ldr	r0, [pc, #416]	; (2000043c <ACE_ADC2_FifoEmpty_IRQHandler+0x44>)
2000029a:	4780      	blx	r0
2000029c:	4868      	ldr	r0, [pc, #416]	; (20000440 <ACE_ADC2_FifoEmpty_IRQHandler+0x48>)
2000029e:	2800      	cmp	r0, #0
200002a0:	d10b      	bne.n	200002ba <copy_data>
200002a2:	4868      	ldr	r0, [pc, #416]	; (20000444 <ACE_ADC2_FifoEmpty_IRQHandler+0x4c>)
200002a4:	4968      	ldr	r1, [pc, #416]	; (20000448 <ACE_ADC2_FifoEmpty_IRQHandler+0x50>)
200002a6:	4a69      	ldr	r2, [pc, #420]	; (2000044c <ACE_ADC2_FifoEmpty_IRQHandler+0x54>)
200002a8:	4288      	cmp	r0, r1
200002aa:	d006      	beq.n	200002ba <copy_data>

200002ac <copy_code_loop>:
200002ac:	4291      	cmp	r1, r2
200002ae:	bf1c      	itt	ne
200002b0:	f850 3b04 	ldrne.w	r3, [r0], #4
200002b4:	f841 3b04 	strne.w	r3, [r1], #4
200002b8:	d1f8      	bne.n	200002ac <copy_code_loop>

200002ba <copy_data>:
200002ba:	4865      	ldr	r0, [pc, #404]	; (20000450 <ACE_ADC2_FifoEmpty_IRQHandler+0x58>)
200002bc:	4965      	ldr	r1, [pc, #404]	; (20000454 <ACE_ADC2_FifoEmpty_IRQHandler+0x5c>)
200002be:	4a66      	ldr	r2, [pc, #408]	; (20000458 <ACE_ADC2_FifoEmpty_IRQHandler+0x60>)
200002c0:	4288      	cmp	r0, r1
200002c2:	d006      	beq.n	200002d2 <clear_bss>

200002c4 <copy_data_loop>:
200002c4:	4291      	cmp	r1, r2
200002c6:	bf1c      	itt	ne
200002c8:	f850 3b04 	ldrne.w	r3, [r0], #4
200002cc:	f841 3b04 	strne.w	r3, [r1], #4
200002d0:	d1f8      	bne.n	200002c4 <copy_data_loop>

200002d2 <clear_bss>:
200002d2:	4862      	ldr	r0, [pc, #392]	; (2000045c <ACE_ADC2_FifoEmpty_IRQHandler+0x64>)
200002d4:	4962      	ldr	r1, [pc, #392]	; (20000460 <ACE_ADC2_FifoEmpty_IRQHandler+0x68>)
200002d6:	4a63      	ldr	r2, [pc, #396]	; (20000464 <ACE_ADC2_FifoEmpty_IRQHandler+0x6c>)

200002d8 <clear_bss_loop>:
200002d8:	4291      	cmp	r1, r2
200002da:	bf18      	it	ne
200002dc:	f841 0b04 	strne.w	r0, [r1], #4
200002e0:	d1fa      	bne.n	200002d8 <clear_bss_loop>
	...

200002f0 <call_glob_ctor>:
200002f0:	f8df 0174 	ldr.w	r0, [pc, #372]	; 20000468 <ACE_ADC2_FifoEmpty_IRQHandler+0x70>
200002f4:	f20f 0e03 	addw	lr, pc, #3
200002f8:	4700      	bx	r0

200002fa <branch_to_main>:
200002fa:	f04f 0000 	mov.w	r0, #0
200002fe:	f04f 0100 	mov.w	r1, #0
20000302:	f8df f168 	ldr.w	pc, [pc, #360]	; 2000046c <ACE_ADC2_FifoEmpty_IRQHandler+0x74>

20000306 <ExitLoop>:
20000306:	e7fe      	b.n	20000306 <ExitLoop>

20000308 <NMI_Handler>:
20000308:	e7fe      	b.n	20000308 <NMI_Handler>

2000030a <HardFault_Handler>:
2000030a:	e7fe      	b.n	2000030a <HardFault_Handler>

2000030c <MemManage_Handler>:
2000030c:	e7fe      	b.n	2000030c <MemManage_Handler>

2000030e <BusFault_Handler>:
2000030e:	e7fe      	b.n	2000030e <BusFault_Handler>

20000310 <UsageFault_Handler>:
20000310:	e7fe      	b.n	20000310 <UsageFault_Handler>

20000312 <SVC_Handler>:
20000312:	e7fe      	b.n	20000312 <SVC_Handler>

20000314 <DebugMon_Handler>:
20000314:	e7fe      	b.n	20000314 <DebugMon_Handler>

20000316 <PendSV_Handler>:
20000316:	e7fe      	b.n	20000316 <PendSV_Handler>

20000318 <SysTick_Handler>:
20000318:	e7fe      	b.n	20000318 <SysTick_Handler>

2000031a <WdogWakeup_IRQHandler>:
2000031a:	e7fe      	b.n	2000031a <WdogWakeup_IRQHandler>

2000031c <BrownOut_1_5V_IRQHandler>:
2000031c:	e7fe      	b.n	2000031c <BrownOut_1_5V_IRQHandler>

2000031e <BrownOut_3_3V_IRQHandler>:
2000031e:	e7fe      	b.n	2000031e <BrownOut_3_3V_IRQHandler>

20000320 <RTC_Match_IRQHandler>:
20000320:	e7fe      	b.n	20000320 <RTC_Match_IRQHandler>

20000322 <RTCIF_Pub_IRQHandler>:
20000322:	e7fe      	b.n	20000322 <RTCIF_Pub_IRQHandler>

20000324 <EthernetMAC_IRQHandler>:
20000324:	e7fe      	b.n	20000324 <EthernetMAC_IRQHandler>

20000326 <IAP_IRQHandler>:
20000326:	e7fe      	b.n	20000326 <IAP_IRQHandler>

20000328 <ENVM0_IRQHandler>:
20000328:	e7fe      	b.n	20000328 <ENVM0_IRQHandler>

2000032a <ENVM1_IRQHandler>:
2000032a:	e7fe      	b.n	2000032a <ENVM1_IRQHandler>

2000032c <DMA_IRQHandler>:
2000032c:	e7fe      	b.n	2000032c <DMA_IRQHandler>

2000032e <UART0_IRQHandler>:
2000032e:	e7fe      	b.n	2000032e <UART0_IRQHandler>

20000330 <UART1_IRQHandler>:
20000330:	e7fe      	b.n	20000330 <UART1_IRQHandler>
20000332:	e7fe      	b.n	20000332 <UART1_IRQHandler+0x2>
20000334:	e7fe      	b.n	20000334 <UART1_IRQHandler+0x4>

20000336 <I2C0_IRQHandler>:
20000336:	e7fe      	b.n	20000336 <I2C0_IRQHandler>

20000338 <I2C0_SMBAlert_IRQHandler>:
20000338:	e7fe      	b.n	20000338 <I2C0_SMBAlert_IRQHandler>

2000033a <I2C0_SMBus_IRQHandler>:
2000033a:	e7fe      	b.n	2000033a <I2C0_SMBus_IRQHandler>

2000033c <I2C1_IRQHandler>:
2000033c:	e7fe      	b.n	2000033c <I2C1_IRQHandler>

2000033e <I2C1_SMBAlert_IRQHandler>:
2000033e:	e7fe      	b.n	2000033e <I2C1_SMBAlert_IRQHandler>

20000340 <I2C1_SMBus_IRQHandler>:
20000340:	e7fe      	b.n	20000340 <I2C1_SMBus_IRQHandler>

20000342 <Timer1_IRQHandler>:
20000342:	e7fe      	b.n	20000342 <Timer1_IRQHandler>

20000344 <Timer2_IRQHandler>:
20000344:	e7fe      	b.n	20000344 <Timer2_IRQHandler>

20000346 <PLL_Lock_IRQHandler>:
20000346:	e7fe      	b.n	20000346 <PLL_Lock_IRQHandler>

20000348 <PLL_LockLost_IRQHandler>:
20000348:	e7fe      	b.n	20000348 <PLL_LockLost_IRQHandler>

2000034a <CommError_IRQHandler>:
2000034a:	e7fe      	b.n	2000034a <CommError_IRQHandler>

2000034c <Fabric_IRQHandler>:
2000034c:	e7fe      	b.n	2000034c <Fabric_IRQHandler>

2000034e <GPIO0_IRQHandler>:
2000034e:	e7fe      	b.n	2000034e <GPIO0_IRQHandler>

20000350 <GPIO1_IRQHandler>:
20000350:	e7fe      	b.n	20000350 <GPIO1_IRQHandler>

20000352 <GPIO2_IRQHandler>:
20000352:	e7fe      	b.n	20000352 <GPIO2_IRQHandler>

20000354 <GPIO3_IRQHandler>:
20000354:	e7fe      	b.n	20000354 <GPIO3_IRQHandler>

20000356 <GPIO4_IRQHandler>:
20000356:	e7fe      	b.n	20000356 <GPIO4_IRQHandler>

20000358 <GPIO5_IRQHandler>:
20000358:	e7fe      	b.n	20000358 <GPIO5_IRQHandler>

2000035a <GPIO6_IRQHandler>:
2000035a:	e7fe      	b.n	2000035a <GPIO6_IRQHandler>

2000035c <GPIO7_IRQHandler>:
2000035c:	e7fe      	b.n	2000035c <GPIO7_IRQHandler>

2000035e <GPIO8_IRQHandler>:
2000035e:	e7fe      	b.n	2000035e <GPIO8_IRQHandler>

20000360 <GPIO9_IRQHandler>:
20000360:	e7fe      	b.n	20000360 <GPIO9_IRQHandler>

20000362 <GPIO10_IRQHandler>:
20000362:	e7fe      	b.n	20000362 <GPIO10_IRQHandler>

20000364 <GPIO11_IRQHandler>:
20000364:	e7fe      	b.n	20000364 <GPIO11_IRQHandler>

20000366 <GPIO12_IRQHandler>:
20000366:	e7fe      	b.n	20000366 <GPIO12_IRQHandler>

20000368 <GPIO13_IRQHandler>:
20000368:	e7fe      	b.n	20000368 <GPIO13_IRQHandler>

2000036a <GPIO14_IRQHandler>:
2000036a:	e7fe      	b.n	2000036a <GPIO14_IRQHandler>

2000036c <GPIO15_IRQHandler>:
2000036c:	e7fe      	b.n	2000036c <GPIO15_IRQHandler>

2000036e <GPIO16_IRQHandler>:
2000036e:	e7fe      	b.n	2000036e <GPIO16_IRQHandler>

20000370 <GPIO17_IRQHandler>:
20000370:	e7fe      	b.n	20000370 <GPIO17_IRQHandler>

20000372 <GPIO18_IRQHandler>:
20000372:	e7fe      	b.n	20000372 <GPIO18_IRQHandler>

20000374 <GPIO19_IRQHandler>:
20000374:	e7fe      	b.n	20000374 <GPIO19_IRQHandler>

20000376 <GPIO20_IRQHandler>:
20000376:	e7fe      	b.n	20000376 <GPIO20_IRQHandler>

20000378 <GPIO21_IRQHandler>:
20000378:	e7fe      	b.n	20000378 <GPIO21_IRQHandler>

2000037a <GPIO22_IRQHandler>:
2000037a:	e7fe      	b.n	2000037a <GPIO22_IRQHandler>

2000037c <GPIO23_IRQHandler>:
2000037c:	e7fe      	b.n	2000037c <GPIO23_IRQHandler>

2000037e <GPIO24_IRQHandler>:
2000037e:	e7fe      	b.n	2000037e <GPIO24_IRQHandler>

20000380 <GPIO25_IRQHandler>:
20000380:	e7fe      	b.n	20000380 <GPIO25_IRQHandler>

20000382 <GPIO26_IRQHandler>:
20000382:	e7fe      	b.n	20000382 <GPIO26_IRQHandler>

20000384 <GPIO27_IRQHandler>:
20000384:	e7fe      	b.n	20000384 <GPIO27_IRQHandler>

20000386 <GPIO28_IRQHandler>:
20000386:	e7fe      	b.n	20000386 <GPIO28_IRQHandler>

20000388 <GPIO29_IRQHandler>:
20000388:	e7fe      	b.n	20000388 <GPIO29_IRQHandler>

2000038a <GPIO30_IRQHandler>:
2000038a:	e7fe      	b.n	2000038a <GPIO30_IRQHandler>

2000038c <GPIO31_IRQHandler>:
2000038c:	e7fe      	b.n	2000038c <GPIO31_IRQHandler>

2000038e <ACE_PC0_Flag0_IRQHandler>:
2000038e:	e7fe      	b.n	2000038e <ACE_PC0_Flag0_IRQHandler>

20000390 <ACE_PC0_Flag1_IRQHandler>:
20000390:	e7fe      	b.n	20000390 <ACE_PC0_Flag1_IRQHandler>

20000392 <ACE_PC0_Flag2_IRQHandler>:
20000392:	e7fe      	b.n	20000392 <ACE_PC0_Flag2_IRQHandler>

20000394 <ACE_PC0_Flag3_IRQHandler>:
20000394:	e7fe      	b.n	20000394 <ACE_PC0_Flag3_IRQHandler>

20000396 <ACE_PC1_Flag0_IRQHandler>:
20000396:	e7fe      	b.n	20000396 <ACE_PC1_Flag0_IRQHandler>

20000398 <ACE_PC1_Flag1_IRQHandler>:
20000398:	e7fe      	b.n	20000398 <ACE_PC1_Flag1_IRQHandler>

2000039a <ACE_PC1_Flag2_IRQHandler>:
2000039a:	e7fe      	b.n	2000039a <ACE_PC1_Flag2_IRQHandler>

2000039c <ACE_PC1_Flag3_IRQHandler>:
2000039c:	e7fe      	b.n	2000039c <ACE_PC1_Flag3_IRQHandler>

2000039e <ACE_PC2_Flag0_IRQHandler>:
2000039e:	e7fe      	b.n	2000039e <ACE_PC2_Flag0_IRQHandler>

200003a0 <ACE_PC2_Flag1_IRQHandler>:
200003a0:	e7fe      	b.n	200003a0 <ACE_PC2_Flag1_IRQHandler>

200003a2 <ACE_PC2_Flag2_IRQHandler>:
200003a2:	e7fe      	b.n	200003a2 <ACE_PC2_Flag2_IRQHandler>

200003a4 <ACE_PC2_Flag3_IRQHandler>:
200003a4:	e7fe      	b.n	200003a4 <ACE_PC2_Flag3_IRQHandler>

200003a6 <ACE_ADC0_DataValid_IRQHandler>:
200003a6:	e7fe      	b.n	200003a6 <ACE_ADC0_DataValid_IRQHandler>

200003a8 <ACE_ADC1_DataValid_IRQHandler>:
200003a8:	e7fe      	b.n	200003a8 <ACE_ADC1_DataValid_IRQHandler>

200003aa <ACE_ADC2_DataValid_IRQHandler>:
200003aa:	e7fe      	b.n	200003aa <ACE_ADC2_DataValid_IRQHandler>

200003ac <ACE_ADC0_CalDone_IRQHandler>:
200003ac:	e7fe      	b.n	200003ac <ACE_ADC0_CalDone_IRQHandler>

200003ae <ACE_ADC1_CalDone_IRQHandler>:
200003ae:	e7fe      	b.n	200003ae <ACE_ADC1_CalDone_IRQHandler>

200003b0 <ACE_ADC2_CalDone_IRQHandler>:
200003b0:	e7fe      	b.n	200003b0 <ACE_ADC2_CalDone_IRQHandler>

200003b2 <ACE_ADC0_CalStart_IRQHandler>:
200003b2:	e7fe      	b.n	200003b2 <ACE_ADC0_CalStart_IRQHandler>

200003b4 <ACE_ADC1_CalStart_IRQHandler>:
200003b4:	e7fe      	b.n	200003b4 <ACE_ADC1_CalStart_IRQHandler>

200003b6 <ACE_ADC2_CalStart_IRQHandler>:
200003b6:	e7fe      	b.n	200003b6 <ACE_ADC2_CalStart_IRQHandler>

200003b8 <ACE_Comp0_Fall_IRQHandler>:
200003b8:	e7fe      	b.n	200003b8 <ACE_Comp0_Fall_IRQHandler>

200003ba <ACE_Comp1_Fall_IRQHandler>:
200003ba:	e7fe      	b.n	200003ba <ACE_Comp1_Fall_IRQHandler>

200003bc <ACE_Comp2_Fall_IRQHandler>:
200003bc:	e7fe      	b.n	200003bc <ACE_Comp2_Fall_IRQHandler>

200003be <ACE_Comp3_Fall_IRQHandler>:
200003be:	e7fe      	b.n	200003be <ACE_Comp3_Fall_IRQHandler>

200003c0 <ACE_Comp4_Fall_IRQHandler>:
200003c0:	e7fe      	b.n	200003c0 <ACE_Comp4_Fall_IRQHandler>

200003c2 <ACE_Comp5_Fall_IRQHandler>:
200003c2:	e7fe      	b.n	200003c2 <ACE_Comp5_Fall_IRQHandler>

200003c4 <ACE_Comp6_Fall_IRQHandler>:
200003c4:	e7fe      	b.n	200003c4 <ACE_Comp6_Fall_IRQHandler>

200003c6 <ACE_Comp7_Fall_IRQHandler>:
200003c6:	e7fe      	b.n	200003c6 <ACE_Comp7_Fall_IRQHandler>

200003c8 <ACE_Comp8_Fall_IRQHandler>:
200003c8:	e7fe      	b.n	200003c8 <ACE_Comp8_Fall_IRQHandler>

200003ca <ACE_Comp9_Fall_IRQHandler>:
200003ca:	e7fe      	b.n	200003ca <ACE_Comp9_Fall_IRQHandler>

200003cc <ACE_Comp10_Fall_IRQHandler>:
200003cc:	e7fe      	b.n	200003cc <ACE_Comp10_Fall_IRQHandler>

200003ce <ACE_Comp11_Fall_IRQHandler>:
200003ce:	e7fe      	b.n	200003ce <ACE_Comp11_Fall_IRQHandler>

200003d0 <ACE_Comp0_Rise_IRQHandler>:
200003d0:	e7fe      	b.n	200003d0 <ACE_Comp0_Rise_IRQHandler>

200003d2 <ACE_Comp1_Rise_IRQHandler>:
200003d2:	e7fe      	b.n	200003d2 <ACE_Comp1_Rise_IRQHandler>

200003d4 <ACE_Comp2_Rise_IRQHandler>:
200003d4:	e7fe      	b.n	200003d4 <ACE_Comp2_Rise_IRQHandler>

200003d6 <ACE_Comp3_Rise_IRQHandler>:
200003d6:	e7fe      	b.n	200003d6 <ACE_Comp3_Rise_IRQHandler>

200003d8 <ACE_Comp4_Rise_IRQHandler>:
200003d8:	e7fe      	b.n	200003d8 <ACE_Comp4_Rise_IRQHandler>

200003da <ACE_Comp5_Rise_IRQHandler>:
200003da:	e7fe      	b.n	200003da <ACE_Comp5_Rise_IRQHandler>

200003dc <ACE_Comp6_Rise_IRQHandler>:
200003dc:	e7fe      	b.n	200003dc <ACE_Comp6_Rise_IRQHandler>

200003de <ACE_Comp7_Rise_IRQHandler>:
200003de:	e7fe      	b.n	200003de <ACE_Comp7_Rise_IRQHandler>

200003e0 <ACE_Comp8_Rise_IRQHandler>:
200003e0:	e7fe      	b.n	200003e0 <ACE_Comp8_Rise_IRQHandler>

200003e2 <ACE_Comp9_Rise_IRQHandler>:
200003e2:	e7fe      	b.n	200003e2 <ACE_Comp9_Rise_IRQHandler>

200003e4 <ACE_Comp10_Rise_IRQHandler>:
200003e4:	e7fe      	b.n	200003e4 <ACE_Comp10_Rise_IRQHandler>

200003e6 <ACE_Comp11_Rise_IRQHandler>:
200003e6:	e7fe      	b.n	200003e6 <ACE_Comp11_Rise_IRQHandler>

200003e8 <ACE_ADC0_FifoFull_IRQHandler>:
200003e8:	e7fe      	b.n	200003e8 <ACE_ADC0_FifoFull_IRQHandler>

200003ea <ACE_ADC0_FifoAFull_IRQHandler>:
200003ea:	e7fe      	b.n	200003ea <ACE_ADC0_FifoAFull_IRQHandler>

200003ec <ACE_ADC0_FifoEmpty_IRQHandler>:
200003ec:	e7fe      	b.n	200003ec <ACE_ADC0_FifoEmpty_IRQHandler>

200003ee <ACE_ADC1_FifoFull_IRQHandler>:
200003ee:	e7fe      	b.n	200003ee <ACE_ADC1_FifoFull_IRQHandler>

200003f0 <ACE_ADC1_FifoAFull_IRQHandler>:
200003f0:	e7fe      	b.n	200003f0 <ACE_ADC1_FifoAFull_IRQHandler>

200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>:
200003f2:	e7fe      	b.n	200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>

200003f4 <ACE_ADC2_FifoFull_IRQHandler>:
200003f4:	e7fe      	b.n	200003f4 <ACE_ADC2_FifoFull_IRQHandler>

200003f6 <ACE_ADC2_FifoAFull_IRQHandler>:
200003f6:	e7fe      	b.n	200003f6 <ACE_ADC2_FifoAFull_IRQHandler>

200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>:
200003f8:	e7fe      	b.n	200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>
200003fa:	e7fe      	b.n	200003fa <ACE_ADC2_FifoEmpty_IRQHandler+0x2>
200003fc:	e7fe      	b.n	200003fc <ACE_ADC2_FifoEmpty_IRQHandler+0x4>
200003fe:	e7fe      	b.n	200003fe <ACE_ADC2_FifoEmpty_IRQHandler+0x6>
20000400:	e7fe      	b.n	20000400 <ACE_ADC2_FifoEmpty_IRQHandler+0x8>
20000402:	e7fe      	b.n	20000402 <ACE_ADC2_FifoEmpty_IRQHandler+0xa>
20000404:	e7fe      	b.n	20000404 <ACE_ADC2_FifoEmpty_IRQHandler+0xc>
20000406:	e7fe      	b.n	20000406 <ACE_ADC2_FifoEmpty_IRQHandler+0xe>
20000408:	e7fe      	b.n	20000408 <ACE_ADC2_FifoEmpty_IRQHandler+0x10>
2000040a:	e7fe      	b.n	2000040a <ACE_ADC2_FifoEmpty_IRQHandler+0x12>
2000040c:	e7fe      	b.n	2000040c <ACE_ADC2_FifoEmpty_IRQHandler+0x14>
2000040e:	e7fe      	b.n	2000040e <ACE_ADC2_FifoEmpty_IRQHandler+0x16>
20000410:	e7fe      	b.n	20000410 <ACE_ADC2_FifoEmpty_IRQHandler+0x18>
20000412:	e7fe      	b.n	20000412 <ACE_ADC2_FifoEmpty_IRQHandler+0x1a>
20000414:	e7fe      	b.n	20000414 <ACE_ADC2_FifoEmpty_IRQHandler+0x1c>
20000416:	e7fe      	b.n	20000416 <ACE_ADC2_FifoEmpty_IRQHandler+0x1e>
20000418:	e7fe      	b.n	20000418 <ACE_ADC2_FifoEmpty_IRQHandler+0x20>
2000041a:	e7fe      	b.n	2000041a <ACE_ADC2_FifoEmpty_IRQHandler+0x22>
2000041c:	e7fe      	b.n	2000041c <ACE_ADC2_FifoEmpty_IRQHandler+0x24>
2000041e:	e7fe      	b.n	2000041e <ACE_ADC2_FifoEmpty_IRQHandler+0x26>
20000420:	e7fe      	b.n	20000420 <ACE_ADC2_FifoEmpty_IRQHandler+0x28>
20000422:	e7fe      	b.n	20000422 <ACE_ADC2_FifoEmpty_IRQHandler+0x2a>
20000424:	e7fe      	b.n	20000424 <ACE_ADC2_FifoEmpty_IRQHandler+0x2c>
20000426:	e7fe      	b.n	20000426 <ACE_ADC2_FifoEmpty_IRQHandler+0x2e>
20000428:	e7fe      	b.n	20000428 <ACE_ADC2_FifoEmpty_IRQHandler+0x30>
2000042a:	e7fe      	b.n	2000042a <ACE_ADC2_FifoEmpty_IRQHandler+0x32>
2000042c:	e7fe      	b.n	2000042c <ACE_ADC2_FifoEmpty_IRQHandler+0x34>
2000042e:	e7fe      	b.n	2000042e <ACE_ADC2_FifoEmpty_IRQHandler+0x36>
20000430:	e7fe      	b.n	20000430 <ACE_ADC2_FifoEmpty_IRQHandler+0x38>
20000432:	e7fe      	b.n	20000432 <ACE_ADC2_FifoEmpty_IRQHandler+0x3a>
20000434:	e7fe      	b.n	20000434 <ACE_ADC2_FifoEmpty_IRQHandler+0x3c>
20000436:	e7fe      	b.n	20000436 <ACE_ADC2_FifoEmpty_IRQHandler+0x3e>
20000438:	e7fe      	b.n	20000438 <ACE_ADC2_FifoEmpty_IRQHandler+0x40>
2000043a:	0000      	.short	0x0000
2000043c:	20001bc9 	.word	0x20001bc9
20000440:	00000000 	.word	0x00000000
20000444:	20000000 	.word	0x20000000
20000448:	20000000 	.word	0x20000000
2000044c:	200033ac 	.word	0x200033ac
20000450:	200033ac 	.word	0x200033ac
20000454:	200033ac 	.word	0x200033ac
20000458:	200033f0 	.word	0x200033f0
2000045c:	00000000 	.word	0x00000000
20000460:	200033f0 	.word	0x200033f0
20000464:	20003518 	.word	0x20003518
20000468:	20002fd1 	.word	0x20002fd1
2000046c:	200004a1 	.word	0x200004a1

20000470 <__do_global_dtors_aux>:
20000470:	f243 33f0 	movw	r3, #13296	; 0x33f0
20000474:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000478:	781a      	ldrb	r2, [r3, #0]
2000047a:	b90a      	cbnz	r2, 20000480 <__do_global_dtors_aux+0x10>
2000047c:	2001      	movs	r0, #1
2000047e:	7018      	strb	r0, [r3, #0]
20000480:	4770      	bx	lr
20000482:	bf00      	nop

20000484 <frame_dummy>:
20000484:	f243 30ac 	movw	r0, #13228	; 0x33ac
20000488:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000048c:	b508      	push	{r3, lr}
2000048e:	6803      	ldr	r3, [r0, #0]
20000490:	b12b      	cbz	r3, 2000049e <frame_dummy+0x1a>
20000492:	f240 0300 	movw	r3, #0
20000496:	f2c0 0300 	movt	r3, #0
2000049a:	b103      	cbz	r3, 2000049e <frame_dummy+0x1a>
2000049c:	4798      	blx	r3
2000049e:	bd08      	pop	{r3, pc}

200004a0 <main>:
#include "touchscreen.h"

int main()
{
200004a0:	b580      	push	{r7, lr}
200004a2:	b086      	sub	sp, #24
200004a4:	af02      	add	r7, sp, #8
	touchscreen_begin();
200004a6:	f000 f8e5 	bl	20000674 <touchscreen_begin>

	drawFillScreen(ILI9341_BLUE);
200004aa:	f04f 001f 	mov.w	r0, #31
200004ae:	f000 fafd 	bl	20000aac <drawFillScreen>
	drawRectanglePixel(5, 5, ILI9341_TFTWIDTH-10, ILI9341_TFTHEIGHT-10, ILI9341_WHITE);
200004b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
200004b6:	9300      	str	r3, [sp, #0]
200004b8:	f04f 0005 	mov.w	r0, #5
200004bc:	f04f 0105 	mov.w	r1, #5
200004c0:	f04f 02e6 	mov.w	r2, #230	; 0xe6
200004c4:	f44f 739b 	mov.w	r3, #310	; 0x136
200004c8:	f000 fac2 	bl	20000a50 <drawRectanglePixel>
200004cc:	e000      	b.n	200004d0 <main+0x30>
		int z = getZ(x);

		if(z > 10){
			drawPixel(x, y, ILI9341_YELLOW);
		}
	}
200004ce:	bf00      	nop
	drawRectanglePixel(5, 5, ILI9341_TFTWIDTH-10, ILI9341_TFTHEIGHT-10, ILI9341_WHITE);


	while( 1 )
	{
		int x = getX();
200004d0:	f000 f946 	bl	20000760 <getX>
200004d4:	4603      	mov	r3, r0
200004d6:	607b      	str	r3, [r7, #4]
		int y = getY();
200004d8:	f000 f9a2 	bl	20000820 <getY>
200004dc:	4603      	mov	r3, r0
200004de:	60bb      	str	r3, [r7, #8]
		int z = getZ(x);
200004e0:	6878      	ldr	r0, [r7, #4]
200004e2:	f000 f9fd 	bl	200008e0 <getZ>
200004e6:	4603      	mov	r3, r0
200004e8:	60fb      	str	r3, [r7, #12]

		if(z > 10){
200004ea:	68fb      	ldr	r3, [r7, #12]
200004ec:	2b0a      	cmp	r3, #10
200004ee:	ddee      	ble.n	200004ce <main+0x2e>
			drawPixel(x, y, ILI9341_YELLOW);
200004f0:	687b      	ldr	r3, [r7, #4]
200004f2:	b29a      	uxth	r2, r3
200004f4:	68bb      	ldr	r3, [r7, #8]
200004f6:	b29b      	uxth	r3, r3
200004f8:	4610      	mov	r0, r2
200004fa:	4619      	mov	r1, r3
200004fc:	f64f 72e0 	movw	r2, #65504	; 0xffe0
20000500:	f000 fa82 	bl	20000a08 <drawPixel>
		}
	}
20000504:	e7e4      	b.n	200004d0 <main+0x30>
20000506:	bf00      	nop

20000508 <NVIC_DisableIRQ>:
 * 
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
20000508:	b480      	push	{r7}
2000050a:	b083      	sub	sp, #12
2000050c:	af00      	add	r7, sp, #0
2000050e:	4603      	mov	r3, r0
20000510:	80fb      	strh	r3, [r7, #6]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
20000512:	f24e 1300 	movw	r3, #57600	; 0xe100
20000516:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000051a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
2000051e:	ea4f 1252 	mov.w	r2, r2, lsr #5
20000522:	88f9      	ldrh	r1, [r7, #6]
20000524:	f001 011f 	and.w	r1, r1, #31
20000528:	f04f 0001 	mov.w	r0, #1
2000052c:	fa00 f101 	lsl.w	r1, r0, r1
20000530:	f102 0220 	add.w	r2, r2, #32
20000534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000538:	f107 070c 	add.w	r7, r7, #12
2000053c:	46bd      	mov	sp, r7
2000053e:	bc80      	pop	{r7}
20000540:	4770      	bx	lr
20000542:	bf00      	nop

20000544 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20000544:	b480      	push	{r7}
20000546:	b083      	sub	sp, #12
20000548:	af00      	add	r7, sp, #0
2000054a:	4603      	mov	r3, r0
2000054c:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
2000054e:	f24e 1300 	movw	r3, #57600	; 0xe100
20000552:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000556:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
2000055a:	ea4f 1252 	mov.w	r2, r2, lsr #5
2000055e:	88f9      	ldrh	r1, [r7, #6]
20000560:	f001 011f 	and.w	r1, r1, #31
20000564:	f04f 0001 	mov.w	r0, #1
20000568:	fa00 f101 	lsl.w	r1, r0, r1
2000056c:	f102 0260 	add.w	r2, r2, #96	; 0x60
20000570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000574:	f107 070c 	add.w	r7, r7, #12
20000578:	46bd      	mov	sp, r7
2000057a:	bc80      	pop	{r7}
2000057c:	4770      	bx	lr
2000057e:	bf00      	nop

20000580 <MSS_TIM1_init>:
    one-shot mode. Allowed values for this parameter are:
        - MSS_TIMER_PERIODIC_MODE
        - MSS_TIMER_ONE_SHOT_MODE
 */
static __INLINE void MSS_TIM1_init( mss_timer_mode_t mode )
{
20000580:	b580      	push	{r7, lr}
20000582:	b082      	sub	sp, #8
20000584:	af00      	add	r7, sp, #0
20000586:	4603      	mov	r3, r0
20000588:	71fb      	strb	r3, [r7, #7]
    NVIC_DisableIRQ( Timer1_IRQn );             /* Disable timer 1 irq in the Cortex-M3 NVIC */  
2000058a:	f04f 0014 	mov.w	r0, #20
2000058e:	f7ff ffbb 	bl	20000508 <NVIC_DisableIRQ>
    
    SYSREG->SOFT_RST_CR &= ~SYSREG_TIMER_SOFTRESET_MASK; /* Take timer block out of reset */
20000592:	f242 0300 	movw	r3, #8192	; 0x2000
20000596:	f2ce 0304 	movt	r3, #57348	; 0xe004
2000059a:	f242 0200 	movw	r2, #8192	; 0x2000
2000059e:	f2ce 0204 	movt	r2, #57348	; 0xe004
200005a2:	6b12      	ldr	r2, [r2, #48]	; 0x30
200005a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
200005a8:	631a      	str	r2, [r3, #48]	; 0x30
    
    TIMER->TIM64_MODE = 0U;                     /* switch to 32 bits mode */
200005aa:	f245 0300 	movw	r3, #20480	; 0x5000
200005ae:	f2c4 0300 	movt	r3, #16384	; 0x4000
200005b2:	f04f 0200 	mov.w	r2, #0
200005b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    TIMER_BITBAND->TIM1ENABLE = 0U;             /* disable timer */
200005b8:	f240 0300 	movw	r3, #0
200005bc:	f2c4 230a 	movt	r3, #16906	; 0x420a
200005c0:	f04f 0200 	mov.w	r2, #0
200005c4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    TIMER_BITBAND->TIM1INTEN = 0U;              /* disable interrupt */
200005c8:	f240 0300 	movw	r3, #0
200005cc:	f2c4 230a 	movt	r3, #16906	; 0x420a
200005d0:	f04f 0200 	mov.w	r2, #0
200005d4:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    TIMER_BITBAND->TIM1MODE = (uint32_t)mode;   /* set mode (continuous/one-shot) */
200005d8:	f240 0300 	movw	r3, #0
200005dc:	f2c4 230a 	movt	r3, #16906	; 0x420a
200005e0:	79fa      	ldrb	r2, [r7, #7]
200005e2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    
    TIMER->TIM1_RIS = 1U;                       /* clear timer 1 interrupt */
200005e6:	f245 0300 	movw	r3, #20480	; 0x5000
200005ea:	f2c4 0300 	movt	r3, #16384	; 0x4000
200005ee:	f04f 0201 	mov.w	r2, #1
200005f2:	611a      	str	r2, [r3, #16]
    NVIC_ClearPendingIRQ( Timer1_IRQn );        /* clear timer 1 interrupt within NVIC */
200005f4:	f04f 0014 	mov.w	r0, #20
200005f8:	f7ff ffa4 	bl	20000544 <NVIC_ClearPendingIRQ>
}
200005fc:	f107 0708 	add.w	r7, r7, #8
20000600:	46bd      	mov	sp, r7
20000602:	bd80      	pop	{r7, pc}

20000604 <MSS_TIM1_start>:
  MSS_TIM1_load_immediate() or MSS_TIM1_load_background() functions. 
  Note: The MSS_TIM1_start() function is also used to resume the down-counter
        if previously stopped using MSS_TIM1_stop() function.
 */
static __INLINE void MSS_TIM1_start( void )
{
20000604:	b480      	push	{r7}
20000606:	af00      	add	r7, sp, #0
    TIMER_BITBAND->TIM1ENABLE = 1U;    /* enable timer */
20000608:	f240 0300 	movw	r3, #0
2000060c:	f2c4 230a 	movt	r3, #16906	; 0x420a
20000610:	f04f 0201 	mov.w	r2, #1
20000614:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
20000618:	46bd      	mov	sp, r7
2000061a:	bc80      	pop	{r7}
2000061c:	4770      	bx	lr
2000061e:	bf00      	nop

20000620 <MSS_TIM1_stop>:
/*-------------------------------------------------------------------------*//**
  The MSS_TIM1_stop() function disables Timer 1 and stops its down-counter
  decrementing.
 */
static __INLINE void MSS_TIM1_stop( void )
{
20000620:	b480      	push	{r7}
20000622:	af00      	add	r7, sp, #0
    TIMER_BITBAND->TIM1ENABLE = 0U;    /* disable timer */
20000624:	f240 0300 	movw	r3, #0
20000628:	f2c4 230a 	movt	r3, #16906	; 0x420a
2000062c:	f04f 0200 	mov.w	r2, #0
20000630:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
20000634:	46bd      	mov	sp, r7
20000636:	bc80      	pop	{r7}
20000638:	4770      	bx	lr
2000063a:	bf00      	nop

2000063c <MSS_TIM1_get_current_value>:
  
  @return
    This function returns the 32-bits current value of the Timer 1 down-counter.
 */
static __INLINE uint32_t MSS_TIM1_get_current_value( void )
{
2000063c:	b480      	push	{r7}
2000063e:	af00      	add	r7, sp, #0
    return TIMER->TIM1_VAL;
20000640:	f245 0300 	movw	r3, #20480	; 0x5000
20000644:	f2c4 0300 	movt	r3, #16384	; 0x4000
20000648:	681b      	ldr	r3, [r3, #0]
}
2000064a:	4618      	mov	r0, r3
2000064c:	46bd      	mov	sp, r7
2000064e:	bc80      	pop	{r7}
20000650:	4770      	bx	lr
20000652:	bf00      	nop

20000654 <MSS_TIM1_load_immediate>:
  @param load_value
    The load_value parameter specifies the value from which the Timer 1 
    down-counter will start decrementing.
 */
static __INLINE void MSS_TIM1_load_immediate( uint32_t load_value )
{
20000654:	b480      	push	{r7}
20000656:	b083      	sub	sp, #12
20000658:	af00      	add	r7, sp, #0
2000065a:	6078      	str	r0, [r7, #4]
    TIMER->TIM1_LOADVAL = load_value;
2000065c:	f245 0300 	movw	r3, #20480	; 0x5000
20000660:	f2c4 0300 	movt	r3, #16384	; 0x4000
20000664:	687a      	ldr	r2, [r7, #4]
20000666:	605a      	str	r2, [r3, #4]
}
20000668:	f107 070c 	add.w	r7, r7, #12
2000066c:	46bd      	mov	sp, r7
2000066e:	bc80      	pop	{r7}
20000670:	4770      	bx	lr
20000672:	bf00      	nop

20000674 <touchscreen_begin>:
    0x31, 0xC1, 0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F,
  ILI9341_SLPOUT  , 0x80,                // Exit Sleep
  ILI9341_DISPON  , 0x80,                // Display on
  0x00                                   // End of list
};
void touchscreen_begin(){
20000674:	b580      	push	{r7, lr}
20000676:	b082      	sub	sp, #8
20000678:	af00      	add	r7, sp, #0

	uint8_t cmd, x, numArgs;
	const uint8_t *addr = initcmd;
2000067a:	f243 139c 	movw	r3, #12700	; 0x319c
2000067e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000682:	607b      	str	r3, [r7, #4]

	MSS_SPI_init(&g_mss_spi1);
20000684:	f243 400c 	movw	r0, #13324	; 0x340c
20000688:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000068c:	f000 fc38 	bl	20000f00 <MSS_SPI_init>
	MSS_GPIO_init();
20000690:	f001 f9ba 	bl	20001a08 <MSS_GPIO_init>
	ACE_init();
20000694:	f001 fa2c 	bl	20001af0 <ACE_init>
	MSS_GPIO_config(DC, MSS_GPIO_OUTPUT_MODE);
20000698:	f04f 0000 	mov.w	r0, #0
2000069c:	f04f 0105 	mov.w	r1, #5
200006a0:	f001 f9e8 	bl	20001a74 <MSS_GPIO_config>
	ace_y = ACE_get_channel_handle((const uint8_t*)"ADCDirectInput_0");
200006a4:	f243 200c 	movw	r0, #12812	; 0x320c
200006a8:	f2c2 0000 	movt	r0, #8192	; 0x2000
200006ac:	f001 fa28 	bl	20001b00 <ACE_get_channel_handle>
200006b0:	4603      	mov	r3, r0
200006b2:	461a      	mov	r2, r3
200006b4:	f243 4309 	movw	r3, #13321	; 0x3409
200006b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200006bc:	701a      	strb	r2, [r3, #0]
	ace_x = ACE_get_channel_handle((const uint8_t*)"ADCDirectInput_1");
200006be:	f243 2020 	movw	r0, #12832	; 0x3220
200006c2:	f2c2 0000 	movt	r0, #8192	; 0x2000
200006c6:	f001 fa1b 	bl	20001b00 <ACE_get_channel_handle>
200006ca:	4603      	mov	r3, r0
200006cc:	461a      	mov	r2, r3
200006ce:	f243 4308 	movw	r3, #13320	; 0x3408
200006d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200006d6:	701a      	strb	r2, [r3, #0]
	
	configureSPI(8);
200006d8:	f04f 0008 	mov.w	r0, #8
200006dc:	f000 fb46 	bl	20000d6c <configureSPI>
	set_SPI_CS();
200006e0:	f000 fb8a 	bl	20000df8 <set_SPI_CS>
	sendCommandOnly(ILI9341_SWRESET);
200006e4:	f04f 0001 	mov.w	r0, #1
200006e8:	f000 fa8c 	bl	20000c04 <sendCommandOnly>
	delay(150);
200006ec:	f04f 0096 	mov.w	r0, #150	; 0x96
200006f0:	f000 fa4a 	bl	20000b88 <delay>

	while((cmd = pgm_read_byte(addr++)) > 0) {
200006f4:	e01d      	b.n	20000732 <touchscreen_begin+0xbe>
		x = pgm_read_byte(addr++);
200006f6:	687b      	ldr	r3, [r7, #4]
200006f8:	781b      	ldrb	r3, [r3, #0]
200006fa:	70bb      	strb	r3, [r7, #2]
200006fc:	687b      	ldr	r3, [r7, #4]
200006fe:	f103 0301 	add.w	r3, r3, #1
20000702:	607b      	str	r3, [r7, #4]
		numArgs = x & 0x7F;
20000704:	78bb      	ldrb	r3, [r7, #2]
20000706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2000070a:	70fb      	strb	r3, [r7, #3]
		sendCommand(cmd, addr, numArgs);
2000070c:	787a      	ldrb	r2, [r7, #1]
2000070e:	78fb      	ldrb	r3, [r7, #3]
20000710:	4610      	mov	r0, r2
20000712:	6879      	ldr	r1, [r7, #4]
20000714:	461a      	mov	r2, r3
20000716:	f000 fa07 	bl	20000b28 <sendCommand>
		addr += numArgs;
2000071a:	78fb      	ldrb	r3, [r7, #3]
2000071c:	687a      	ldr	r2, [r7, #4]
2000071e:	4413      	add	r3, r2
20000720:	607b      	str	r3, [r7, #4]
		if(x & 0x80) delay(150);
20000722:	78bb      	ldrb	r3, [r7, #2]
20000724:	b25b      	sxtb	r3, r3
20000726:	2b00      	cmp	r3, #0
20000728:	da03      	bge.n	20000732 <touchscreen_begin+0xbe>
2000072a:	f04f 0096 	mov.w	r0, #150	; 0x96
2000072e:	f000 fa2b 	bl	20000b88 <delay>
	configureSPI(8);
	set_SPI_CS();
	sendCommandOnly(ILI9341_SWRESET);
	delay(150);

	while((cmd = pgm_read_byte(addr++)) > 0) {
20000732:	687b      	ldr	r3, [r7, #4]
20000734:	781b      	ldrb	r3, [r3, #0]
20000736:	707b      	strb	r3, [r7, #1]
20000738:	787b      	ldrb	r3, [r7, #1]
2000073a:	2b00      	cmp	r3, #0
2000073c:	bf0c      	ite	eq
2000073e:	2300      	moveq	r3, #0
20000740:	2301      	movne	r3, #1
20000742:	b2db      	uxtb	r3, r3
20000744:	687a      	ldr	r2, [r7, #4]
20000746:	f102 0201 	add.w	r2, r2, #1
2000074a:	607a      	str	r2, [r7, #4]
2000074c:	2b00      	cmp	r3, #0
2000074e:	d1d2      	bne.n	200006f6 <touchscreen_begin+0x82>
		numArgs = x & 0x7F;
		sendCommand(cmd, addr, numArgs);
		addr += numArgs;
		if(x & 0x80) delay(150);
	}
	clear_SPI_CS();
20000750:	f000 fb5e 	bl	20000e10 <clear_SPI_CS>

}
20000754:	f107 0708 	add.w	r7, r7, #8
20000758:	46bd      	mov	sp, r7
2000075a:	bd80      	pop	{r7, pc}
2000075c:	0000      	lsls	r0, r0, #0
	...

20000760 <getX>:
int16_t getX(){
20000760:	b580      	push	{r7, lr}
20000762:	b082      	sub	sp, #8
20000764:	af00      	add	r7, sp, #0
	int sample;

	MSS_GPIO_config(yp, MSS_GPIO_INPUT_MODE);
20000766:	f04f 0005 	mov.w	r0, #5
2000076a:	f04f 0102 	mov.w	r1, #2
2000076e:	f001 f981 	bl	20001a74 <MSS_GPIO_config>
	MSS_GPIO_config(yn, MSS_GPIO_INPUT_MODE);
20000772:	f04f 0006 	mov.w	r0, #6
20000776:	f04f 0102 	mov.w	r1, #2
2000077a:	f001 f97b 	bl	20001a74 <MSS_GPIO_config>
	MSS_GPIO_config(xp, MSS_GPIO_OUTPUT_MODE);
2000077e:	f04f 0007 	mov.w	r0, #7
20000782:	f04f 0105 	mov.w	r1, #5
20000786:	f001 f975 	bl	20001a74 <MSS_GPIO_config>
	MSS_GPIO_config(xn, MSS_GPIO_OUTPUT_MODE);
2000078a:	f04f 0008 	mov.w	r0, #8
2000078e:	f04f 0105 	mov.w	r1, #5
20000792:	f001 f96f 	bl	20001a74 <MSS_GPIO_config>

	MSS_GPIO_set_output(xp, 1);
20000796:	f04f 0007 	mov.w	r0, #7
2000079a:	f04f 0101 	mov.w	r1, #1
2000079e:	f001 f987 	bl	20001ab0 <MSS_GPIO_set_output>
	MSS_GPIO_set_output(xn, 0);
200007a2:	f04f 0008 	mov.w	r0, #8
200007a6:	f04f 0100 	mov.w	r1, #0
200007aa:	f001 f981 	bl	20001ab0 <MSS_GPIO_set_output>
	delayMicro(20);
200007ae:	f04f 0014 	mov.w	r0, #20
200007b2:	f000 fa09 	bl	20000bc8 <delayMicro>

	sample = ACE_get_ppe_sample(ace_y);
200007b6:	f243 4309 	movw	r3, #13321	; 0x3409
200007ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
200007be:	781b      	ldrb	r3, [r3, #0]
200007c0:	4618      	mov	r0, r3
200007c2:	f001 f9d7 	bl	20001b74 <ACE_get_ppe_sample>
200007c6:	4603      	mov	r3, r0
200007c8:	607b      	str	r3, [r7, #4]

	return ((sample/1985.45)*320);
200007ca:	6878      	ldr	r0, [r7, #4]
200007cc:	f001 fedc 	bl	20002588 <__aeabi_i2d>
200007d0:	4602      	mov	r2, r0
200007d2:	460b      	mov	r3, r1
200007d4:	4610      	mov	r0, r2
200007d6:	4619      	mov	r1, r3
200007d8:	a30f      	add	r3, pc, #60	; (adr r3, 20000818 <getX+0xb8>)
200007da:	e9d3 2300 	ldrd	r2, r3, [r3]
200007de:	f002 f863 	bl	200028a8 <__aeabi_ddiv>
200007e2:	4602      	mov	r2, r0
200007e4:	460b      	mov	r3, r1
200007e6:	4610      	mov	r0, r2
200007e8:	4619      	mov	r1, r3
200007ea:	f04f 0200 	mov.w	r2, #0
200007ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
200007f2:	f503 03e8 	add.w	r3, r3, #7602176	; 0x740000
200007f6:	f001 ff2d 	bl	20002654 <__aeabi_dmul>
200007fa:	4602      	mov	r2, r0
200007fc:	460b      	mov	r3, r1
200007fe:	4610      	mov	r0, r2
20000800:	4619      	mov	r1, r3
20000802:	f002 f939 	bl	20002a78 <__aeabi_d2iz>
20000806:	4603      	mov	r3, r0
20000808:	b29b      	uxth	r3, r3
2000080a:	b21b      	sxth	r3, r3
}
2000080c:	4618      	mov	r0, r3
2000080e:	f107 0708 	add.w	r7, r7, #8
20000812:	46bd      	mov	sp, r7
20000814:	bd80      	pop	{r7, pc}
20000816:	bf00      	nop
20000818:	cccccccd 	.word	0xcccccccd
2000081c:	409f05cc 	.word	0x409f05cc

20000820 <getY>:

int16_t getY(){
20000820:	b580      	push	{r7, lr}
20000822:	b082      	sub	sp, #8
20000824:	af00      	add	r7, sp, #0
	int sample;

	MSS_GPIO_config(yp, MSS_GPIO_OUTPUT_MODE);
20000826:	f04f 0005 	mov.w	r0, #5
2000082a:	f04f 0105 	mov.w	r1, #5
2000082e:	f001 f921 	bl	20001a74 <MSS_GPIO_config>
	MSS_GPIO_config(yn, MSS_GPIO_OUTPUT_MODE);
20000832:	f04f 0006 	mov.w	r0, #6
20000836:	f04f 0105 	mov.w	r1, #5
2000083a:	f001 f91b 	bl	20001a74 <MSS_GPIO_config>
	MSS_GPIO_config(xp, MSS_GPIO_INPUT_MODE);
2000083e:	f04f 0007 	mov.w	r0, #7
20000842:	f04f 0102 	mov.w	r1, #2
20000846:	f001 f915 	bl	20001a74 <MSS_GPIO_config>
	MSS_GPIO_config(xn, MSS_GPIO_INPUT_MODE);
2000084a:	f04f 0008 	mov.w	r0, #8
2000084e:	f04f 0102 	mov.w	r1, #2
20000852:	f001 f90f 	bl	20001a74 <MSS_GPIO_config>

	MSS_GPIO_set_output(yp, 1);
20000856:	f04f 0005 	mov.w	r0, #5
2000085a:	f04f 0101 	mov.w	r1, #1
2000085e:	f001 f927 	bl	20001ab0 <MSS_GPIO_set_output>
	MSS_GPIO_set_output(yn, 0);
20000862:	f04f 0006 	mov.w	r0, #6
20000866:	f04f 0100 	mov.w	r1, #0
2000086a:	f001 f921 	bl	20001ab0 <MSS_GPIO_set_output>

	delayMicro(20);
2000086e:	f04f 0014 	mov.w	r0, #20
20000872:	f000 f9a9 	bl	20000bc8 <delayMicro>

	sample = ACE_get_ppe_sample(ace_x);
20000876:	f243 4308 	movw	r3, #13320	; 0x3408
2000087a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000087e:	781b      	ldrb	r3, [r3, #0]
20000880:	4618      	mov	r0, r3
20000882:	f001 f977 	bl	20001b74 <ACE_get_ppe_sample>
20000886:	4603      	mov	r3, r0
20000888:	607b      	str	r3, [r7, #4]

	return ((sample/1985.45)*240);
2000088a:	6878      	ldr	r0, [r7, #4]
2000088c:	f001 fe7c 	bl	20002588 <__aeabi_i2d>
20000890:	4602      	mov	r2, r0
20000892:	460b      	mov	r3, r1
20000894:	4610      	mov	r0, r2
20000896:	4619      	mov	r1, r3
20000898:	a30f      	add	r3, pc, #60	; (adr r3, 200008d8 <getY+0xb8>)
2000089a:	e9d3 2300 	ldrd	r2, r3, [r3]
2000089e:	f002 f803 	bl	200028a8 <__aeabi_ddiv>
200008a2:	4602      	mov	r2, r0
200008a4:	460b      	mov	r3, r1
200008a6:	4610      	mov	r0, r2
200008a8:	4619      	mov	r1, r3
200008aa:	f04f 0200 	mov.w	r2, #0
200008ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
200008b2:	f503 03dc 	add.w	r3, r3, #7208960	; 0x6e0000
200008b6:	f001 fecd 	bl	20002654 <__aeabi_dmul>
200008ba:	4602      	mov	r2, r0
200008bc:	460b      	mov	r3, r1
200008be:	4610      	mov	r0, r2
200008c0:	4619      	mov	r1, r3
200008c2:	f002 f8d9 	bl	20002a78 <__aeabi_d2iz>
200008c6:	4603      	mov	r3, r0
200008c8:	b29b      	uxth	r3, r3
200008ca:	b21b      	sxth	r3, r3
}
200008cc:	4618      	mov	r0, r3
200008ce:	f107 0708 	add.w	r7, r7, #8
200008d2:	46bd      	mov	sp, r7
200008d4:	bd80      	pop	{r7, pc}
200008d6:	bf00      	nop
200008d8:	cccccccd 	.word	0xcccccccd
200008dc:	409f05cc 	.word	0x409f05cc

200008e0 <getZ>:

int16_t getZ(int16_t y){
200008e0:	b580      	push	{r7, lr}
200008e2:	b086      	sub	sp, #24
200008e4:	af00      	add	r7, sp, #0
200008e6:	4603      	mov	r3, r0
200008e8:	80fb      	strh	r3, [r7, #6]
	int16_t z;

	MSS_GPIO_config(yp, MSS_GPIO_INPUT_MODE);
200008ea:	f04f 0005 	mov.w	r0, #5
200008ee:	f04f 0102 	mov.w	r1, #2
200008f2:	f001 f8bf 	bl	20001a74 <MSS_GPIO_config>
	MSS_GPIO_config(yn, MSS_GPIO_OUTPUT_MODE);
200008f6:	f04f 0006 	mov.w	r0, #6
200008fa:	f04f 0105 	mov.w	r1, #5
200008fe:	f001 f8b9 	bl	20001a74 <MSS_GPIO_config>
	MSS_GPIO_config(xp, MSS_GPIO_OUTPUT_MODE);
20000902:	f04f 0007 	mov.w	r0, #7
20000906:	f04f 0105 	mov.w	r1, #5
2000090a:	f001 f8b3 	bl	20001a74 <MSS_GPIO_config>
	MSS_GPIO_config(xn, MSS_GPIO_INPUT_MODE);
2000090e:	f04f 0008 	mov.w	r0, #8
20000912:	f04f 0102 	mov.w	r1, #2
20000916:	f001 f8ad 	bl	20001a74 <MSS_GPIO_config>

	MSS_GPIO_set_output(xp, 0);
2000091a:	f04f 0007 	mov.w	r0, #7
2000091e:	f04f 0100 	mov.w	r1, #0
20000922:	f001 f8c5 	bl	20001ab0 <MSS_GPIO_set_output>
	MSS_GPIO_set_output(yn, 1);
20000926:	f04f 0006 	mov.w	r0, #6
2000092a:	f04f 0101 	mov.w	r1, #1
2000092e:	f001 f8bf 	bl	20001ab0 <MSS_GPIO_set_output>

	int z1 = ACE_get_ppe_sample(ace_x);
20000932:	f243 4308 	movw	r3, #13320	; 0x3408
20000936:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000093a:	781b      	ldrb	r3, [r3, #0]
2000093c:	4618      	mov	r0, r3
2000093e:	f001 f919 	bl	20001b74 <ACE_get_ppe_sample>
20000942:	4603      	mov	r3, r0
20000944:	60fb      	str	r3, [r7, #12]
	int z2 = ACE_get_ppe_sample(ace_y);
20000946:	f243 4309 	movw	r3, #13321	; 0x3409
2000094a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000094e:	781b      	ldrb	r3, [r3, #0]
20000950:	4618      	mov	r0, r3
20000952:	f001 f90f 	bl	20001b74 <ACE_get_ppe_sample>
20000956:	4603      	mov	r3, r0
20000958:	613b      	str	r3, [r7, #16]

	if (rxplate != 0) {
2000095a:	f243 4304 	movw	r3, #13316	; 0x3404
2000095e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000962:	681b      	ldr	r3, [r3, #0]
20000964:	2b00      	cmp	r3, #0
20000966:	d03b      	beq.n	200009e0 <getZ+0x100>
	 // now read the x
	 float rtouch;
	 rtouch = z2;
20000968:	6938      	ldr	r0, [r7, #16]
2000096a:	f002 f967 	bl	20002c3c <__aeabi_i2f>
2000096e:	4603      	mov	r3, r0
20000970:	617b      	str	r3, [r7, #20]
	 rtouch /= z1;
20000972:	68f8      	ldr	r0, [r7, #12]
20000974:	f002 f962 	bl	20002c3c <__aeabi_i2f>
20000978:	4603      	mov	r3, r0
2000097a:	6978      	ldr	r0, [r7, #20]
2000097c:	4619      	mov	r1, r3
2000097e:	f002 fa65 	bl	20002e4c <__aeabi_fdiv>
20000982:	4603      	mov	r3, r0
20000984:	617b      	str	r3, [r7, #20]
	 rtouch -= 1;
20000986:	6978      	ldr	r0, [r7, #20]
20000988:	491d      	ldr	r1, [pc, #116]	; (20000a00 <getZ+0x120>)
2000098a:	f002 f8a1 	bl	20002ad0 <__aeabi_fsub>
2000098e:	4603      	mov	r3, r0
20000990:	617b      	str	r3, [r7, #20]
	 rtouch *= y;
20000992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
20000996:	4618      	mov	r0, r3
20000998:	f002 f950 	bl	20002c3c <__aeabi_i2f>
2000099c:	4603      	mov	r3, r0
2000099e:	6978      	ldr	r0, [r7, #20]
200009a0:	4619      	mov	r1, r3
200009a2:	f002 f99f 	bl	20002ce4 <__aeabi_fmul>
200009a6:	4603      	mov	r3, r0
200009a8:	617b      	str	r3, [r7, #20]
	 rtouch *= rxplate;
200009aa:	f243 4304 	movw	r3, #13316	; 0x3404
200009ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
200009b2:	681b      	ldr	r3, [r3, #0]
200009b4:	4618      	mov	r0, r3
200009b6:	f002 f941 	bl	20002c3c <__aeabi_i2f>
200009ba:	4603      	mov	r3, r0
200009bc:	6978      	ldr	r0, [r7, #20]
200009be:	4619      	mov	r1, r3
200009c0:	f002 f990 	bl	20002ce4 <__aeabi_fmul>
200009c4:	4603      	mov	r3, r0
200009c6:	617b      	str	r3, [r7, #20]
	 rtouch /= 1024;
200009c8:	6978      	ldr	r0, [r7, #20]
200009ca:	490e      	ldr	r1, [pc, #56]	; (20000a04 <getZ+0x124>)
200009cc:	f002 fa3e 	bl	20002e4c <__aeabi_fdiv>
200009d0:	4603      	mov	r3, r0
200009d2:	617b      	str	r3, [r7, #20]

	 z = rtouch;
200009d4:	6978      	ldr	r0, [r7, #20]
200009d6:	f002 fad5 	bl	20002f84 <__aeabi_f2iz>
200009da:	4603      	mov	r3, r0
200009dc:	817b      	strh	r3, [r7, #10]
200009de:	e007      	b.n	200009f0 <getZ+0x110>
   } else {
	 z = ((z2-z1));
200009e0:	693b      	ldr	r3, [r7, #16]
200009e2:	b29a      	uxth	r2, r3
200009e4:	68fb      	ldr	r3, [r7, #12]
200009e6:	b29b      	uxth	r3, r3
200009e8:	ebc3 0302 	rsb	r3, r3, r2
200009ec:	b29b      	uxth	r3, r3
200009ee:	817b      	strh	r3, [r7, #10]
   }

   return z;
200009f0:	897b      	ldrh	r3, [r7, #10]
200009f2:	b21b      	sxth	r3, r3
}
200009f4:	4618      	mov	r0, r3
200009f6:	f107 0718 	add.w	r7, r7, #24
200009fa:	46bd      	mov	sp, r7
200009fc:	bd80      	pop	{r7, pc}
200009fe:	bf00      	nop
20000a00:	3f800000 	.word	0x3f800000
20000a04:	44800000 	.word	0x44800000

20000a08 <drawPixel>:

void drawPixel(uint16_t x, uint16_t y, uint16_t color){
20000a08:	b580      	push	{r7, lr}
20000a0a:	b082      	sub	sp, #8
20000a0c:	af00      	add	r7, sp, #0
20000a0e:	4613      	mov	r3, r2
20000a10:	4602      	mov	r2, r0
20000a12:	80fa      	strh	r2, [r7, #6]
20000a14:	460a      	mov	r2, r1
20000a16:	80ba      	strh	r2, [r7, #4]
20000a18:	807b      	strh	r3, [r7, #2]

	set_SPI_CS();
20000a1a:	f000 f9ed 	bl	20000df8 <set_SPI_CS>
	setAddr(x, y, x+1, y+1);
20000a1e:	88fb      	ldrh	r3, [r7, #6]
20000a20:	f103 0301 	add.w	r3, r3, #1
20000a24:	b29a      	uxth	r2, r3
20000a26:	88bb      	ldrh	r3, [r7, #4]
20000a28:	f103 0301 	add.w	r3, r3, #1
20000a2c:	b29b      	uxth	r3, r3
20000a2e:	88f8      	ldrh	r0, [r7, #6]
20000a30:	88b9      	ldrh	r1, [r7, #4]
20000a32:	f000 f851 	bl	20000ad8 <setAddr>
	set_DC_HIGH();
20000a36:	f000 f9f7 	bl	20000e28 <set_DC_HIGH>
	sendSPI16(color);
20000a3a:	887b      	ldrh	r3, [r7, #2]
20000a3c:	4618      	mov	r0, r3
20000a3e:	f000 f9bf 	bl	20000dc0 <sendSPI16>
	clear_SPI_CS();
20000a42:	f000 f9e5 	bl	20000e10 <clear_SPI_CS>
}
20000a46:	f107 0708 	add.w	r7, r7, #8
20000a4a:	46bd      	mov	sp, r7
20000a4c:	bd80      	pop	{r7, pc}
20000a4e:	bf00      	nop

20000a50 <drawRectanglePixel>:
			sendData(&color, 16);
		}
		sendData(&color, 16);
	}
}
void drawRectanglePixel(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color){
20000a50:	b580      	push	{r7, lr}
20000a52:	b086      	sub	sp, #24
20000a54:	af02      	add	r7, sp, #8
20000a56:	80f8      	strh	r0, [r7, #6]
20000a58:	80b9      	strh	r1, [r7, #4]
20000a5a:	807a      	strh	r2, [r7, #2]
20000a5c:	803b      	strh	r3, [r7, #0]
	uint16_t i;

	 for (i=x; i<x+w; i++) {
20000a5e:	88fb      	ldrh	r3, [r7, #6]
20000a60:	81fb      	strh	r3, [r7, #14]
20000a62:	e018      	b.n	20000a96 <drawRectanglePixel+0x46>
	        writeLine(i, y, i, y+h-1, color);
20000a64:	89f8      	ldrh	r0, [r7, #14]
20000a66:	88b9      	ldrh	r1, [r7, #4]
20000a68:	89fa      	ldrh	r2, [r7, #14]
20000a6a:	f8b7 c004 	ldrh.w	ip, [r7, #4]
20000a6e:	883b      	ldrh	r3, [r7, #0]
20000a70:	4463      	add	r3, ip
20000a72:	b29b      	uxth	r3, r3
20000a74:	f103 33ff 	add.w	r3, r3, #4294967295
20000a78:	b29b      	uxth	r3, r3
20000a7a:	b200      	sxth	r0, r0
20000a7c:	b209      	sxth	r1, r1
20000a7e:	b212      	sxth	r2, r2
20000a80:	b21b      	sxth	r3, r3
20000a82:	f8b7 c018 	ldrh.w	ip, [r7, #24]
20000a86:	f8cd c000 	str.w	ip, [sp]
20000a8a:	f000 f8d1 	bl	20000c30 <writeLine>
	}
}
void drawRectanglePixel(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color){
	uint16_t i;

	 for (i=x; i<x+w; i++) {
20000a8e:	89fb      	ldrh	r3, [r7, #14]
20000a90:	f103 0301 	add.w	r3, r3, #1
20000a94:	81fb      	strh	r3, [r7, #14]
20000a96:	89fa      	ldrh	r2, [r7, #14]
20000a98:	88f9      	ldrh	r1, [r7, #6]
20000a9a:	887b      	ldrh	r3, [r7, #2]
20000a9c:	440b      	add	r3, r1
20000a9e:	429a      	cmp	r2, r3
20000aa0:	dbe0      	blt.n	20000a64 <drawRectanglePixel+0x14>
	        writeLine(i, y, i, y+h-1, color);
	    }
}		
20000aa2:	f107 0710 	add.w	r7, r7, #16
20000aa6:	46bd      	mov	sp, r7
20000aa8:	bd80      	pop	{r7, pc}
20000aaa:	bf00      	nop

20000aac <drawFillScreen>:

void drawFillScreen(uint16_t color){
20000aac:	b580      	push	{r7, lr}
20000aae:	b084      	sub	sp, #16
20000ab0:	af02      	add	r7, sp, #8
20000ab2:	4603      	mov	r3, r0
20000ab4:	80fb      	strh	r3, [r7, #6]
	drawRectanglePixel(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT, color);
20000ab6:	88fb      	ldrh	r3, [r7, #6]
20000ab8:	9300      	str	r3, [sp, #0]
20000aba:	f04f 0000 	mov.w	r0, #0
20000abe:	f04f 0100 	mov.w	r1, #0
20000ac2:	f04f 02f0 	mov.w	r2, #240	; 0xf0
20000ac6:	f44f 73a0 	mov.w	r3, #320	; 0x140
20000aca:	f7ff ffc1 	bl	20000a50 <drawRectanglePixel>
}
20000ace:	f107 0708 	add.w	r7, r7, #8
20000ad2:	46bd      	mov	sp, r7
20000ad4:	bd80      	pop	{r7, pc}
20000ad6:	bf00      	nop

20000ad8 <setAddr>:

void setAddr(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1){
20000ad8:	b580      	push	{r7, lr}
20000ada:	b082      	sub	sp, #8
20000adc:	af00      	add	r7, sp, #0
20000ade:	80f8      	strh	r0, [r7, #6]
20000ae0:	80b9      	strh	r1, [r7, #4]
20000ae2:	807a      	strh	r2, [r7, #2]
20000ae4:	803b      	strh	r3, [r7, #0]
	
	sendCommandOnly(ILI9341_CASET);
20000ae6:	f04f 002a 	mov.w	r0, #42	; 0x2a
20000aea:	f000 f88b 	bl	20000c04 <sendCommandOnly>
	sendSPI16(x0);
20000aee:	88fb      	ldrh	r3, [r7, #6]
20000af0:	4618      	mov	r0, r3
20000af2:	f000 f965 	bl	20000dc0 <sendSPI16>
	sendSPI16(x1);
20000af6:	887b      	ldrh	r3, [r7, #2]
20000af8:	4618      	mov	r0, r3
20000afa:	f000 f961 	bl	20000dc0 <sendSPI16>
	sendCommandOnly(ILI9341_PASET);
20000afe:	f04f 002b 	mov.w	r0, #43	; 0x2b
20000b02:	f000 f87f 	bl	20000c04 <sendCommandOnly>
	sendSPI16(y0);
20000b06:	88bb      	ldrh	r3, [r7, #4]
20000b08:	4618      	mov	r0, r3
20000b0a:	f000 f959 	bl	20000dc0 <sendSPI16>
	sendSPI16(y1);
20000b0e:	883b      	ldrh	r3, [r7, #0]
20000b10:	4618      	mov	r0, r3
20000b12:	f000 f955 	bl	20000dc0 <sendSPI16>
	sendCommandOnly(ILI9341_RAMWR);
20000b16:	f04f 002c 	mov.w	r0, #44	; 0x2c
20000b1a:	f000 f873 	bl	20000c04 <sendCommandOnly>
}
20000b1e:	f107 0708 	add.w	r7, r7, #8
20000b22:	46bd      	mov	sp, r7
20000b24:	bd80      	pop	{r7, pc}
20000b26:	bf00      	nop

20000b28 <sendCommand>:

void sendCommand(uint8_t commandByte, uint8_t *dataBytes, uint8_t numDataBytes){
20000b28:	b580      	push	{r7, lr}
20000b2a:	b086      	sub	sp, #24
20000b2c:	af00      	add	r7, sp, #0
20000b2e:	60b9      	str	r1, [r7, #8]
20000b30:	4613      	mov	r3, r2
20000b32:	4602      	mov	r2, r0
20000b34:	73fa      	strb	r2, [r7, #15]
20000b36:	71fb      	strb	r3, [r7, #7]
		int i=0;
20000b38:	f04f 0300 	mov.w	r3, #0
20000b3c:	617b      	str	r3, [r7, #20]
		configureSPI(8);
20000b3e:	f04f 0008 	mov.w	r0, #8
20000b42:	f000 f913 	bl	20000d6c <configureSPI>

	    set_DC_LOW(); // Command mode
20000b46:	f000 f979 	bl	20000e3c <set_DC_LOW>
	    sendSPI(commandByte); // Send the command byte
20000b4a:	7bfb      	ldrb	r3, [r7, #15]
20000b4c:	4618      	mov	r0, r3
20000b4e:	f000 f925 	bl	20000d9c <sendSPI>

	    set_DC_HIGH();
20000b52:	f000 f969 	bl	20000e28 <set_DC_HIGH>
	    for (i=0; i<numDataBytes; i++) {
20000b56:	f04f 0300 	mov.w	r3, #0
20000b5a:	617b      	str	r3, [r7, #20]
20000b5c:	e00c      	b.n	20000b78 <sendCommand+0x50>
	      sendSPI(*dataBytes); // Send the data bytes
20000b5e:	68bb      	ldr	r3, [r7, #8]
20000b60:	781b      	ldrb	r3, [r3, #0]
20000b62:	4618      	mov	r0, r3
20000b64:	f000 f91a 	bl	20000d9c <sendSPI>
	      dataBytes++;
20000b68:	68bb      	ldr	r3, [r7, #8]
20000b6a:	f103 0301 	add.w	r3, r3, #1
20000b6e:	60bb      	str	r3, [r7, #8]

	    set_DC_LOW(); // Command mode
	    sendSPI(commandByte); // Send the command byte

	    set_DC_HIGH();
	    for (i=0; i<numDataBytes; i++) {
20000b70:	697b      	ldr	r3, [r7, #20]
20000b72:	f103 0301 	add.w	r3, r3, #1
20000b76:	617b      	str	r3, [r7, #20]
20000b78:	79fa      	ldrb	r2, [r7, #7]
20000b7a:	697b      	ldr	r3, [r7, #20]
20000b7c:	429a      	cmp	r2, r3
20000b7e:	dcee      	bgt.n	20000b5e <sendCommand+0x36>
	      sendSPI(*dataBytes); // Send the data bytes
	      dataBytes++;
	    }
}
20000b80:	f107 0718 	add.w	r7, r7, #24
20000b84:	46bd      	mov	sp, r7
20000b86:	bd80      	pop	{r7, pc}

20000b88 <delay>:
		dataBytes++;
	}
	clear_SPI_CS();
}

void delay(uint32_t time){
20000b88:	b580      	push	{r7, lr}
20000b8a:	b082      	sub	sp, #8
20000b8c:	af00      	add	r7, sp, #0
20000b8e:	6078      	str	r0, [r7, #4]

	MSS_TIM1_init(MSS_TIMER_ONE_SHOT_MODE);
20000b90:	f04f 0001 	mov.w	r0, #1
20000b94:	f7ff fcf4 	bl	20000580 <MSS_TIM1_init>
	MSS_TIM1_load_immediate(time*100000);
20000b98:	687a      	ldr	r2, [r7, #4]
20000b9a:	f248 63a0 	movw	r3, #34464	; 0x86a0
20000b9e:	f2c0 0301 	movt	r3, #1
20000ba2:	fb03 f302 	mul.w	r3, r3, r2
20000ba6:	4618      	mov	r0, r3
20000ba8:	f7ff fd54 	bl	20000654 <MSS_TIM1_load_immediate>
	MSS_TIM1_start();
20000bac:	f7ff fd2a 	bl	20000604 <MSS_TIM1_start>

	while(MSS_TIM1_get_current_value()>0){
20000bb0:	f7ff fd44 	bl	2000063c <MSS_TIM1_get_current_value>
20000bb4:	4603      	mov	r3, r0
20000bb6:	2b00      	cmp	r3, #0
20000bb8:	d1fa      	bne.n	20000bb0 <delay+0x28>
		//do nothing

	}
	MSS_TIM1_stop();
20000bba:	f7ff fd31 	bl	20000620 <MSS_TIM1_stop>
}
20000bbe:	f107 0708 	add.w	r7, r7, #8
20000bc2:	46bd      	mov	sp, r7
20000bc4:	bd80      	pop	{r7, pc}
20000bc6:	bf00      	nop

20000bc8 <delayMicro>:

void delayMicro(uint32_t time){
20000bc8:	b580      	push	{r7, lr}
20000bca:	b082      	sub	sp, #8
20000bcc:	af00      	add	r7, sp, #0
20000bce:	6078      	str	r0, [r7, #4]

	MSS_TIM1_init(MSS_TIMER_ONE_SHOT_MODE);
20000bd0:	f04f 0001 	mov.w	r0, #1
20000bd4:	f7ff fcd4 	bl	20000580 <MSS_TIM1_init>
	MSS_TIM1_load_immediate(time*100);
20000bd8:	687b      	ldr	r3, [r7, #4]
20000bda:	f04f 0264 	mov.w	r2, #100	; 0x64
20000bde:	fb02 f303 	mul.w	r3, r2, r3
20000be2:	4618      	mov	r0, r3
20000be4:	f7ff fd36 	bl	20000654 <MSS_TIM1_load_immediate>
	MSS_TIM1_start();
20000be8:	f7ff fd0c 	bl	20000604 <MSS_TIM1_start>

	while(MSS_TIM1_get_current_value()>0){
20000bec:	f7ff fd26 	bl	2000063c <MSS_TIM1_get_current_value>
20000bf0:	4603      	mov	r3, r0
20000bf2:	2b00      	cmp	r3, #0
20000bf4:	d1fa      	bne.n	20000bec <delayMicro+0x24>
		//do nothing

	}
	MSS_TIM1_stop();
20000bf6:	f7ff fd13 	bl	20000620 <MSS_TIM1_stop>
}
20000bfa:	f107 0708 	add.w	r7, r7, #8
20000bfe:	46bd      	mov	sp, r7
20000c00:	bd80      	pop	{r7, pc}
20000c02:	bf00      	nop

20000c04 <sendCommandOnly>:


void sendCommandOnly(uint8_t commandByte){
20000c04:	b580      	push	{r7, lr}
20000c06:	b082      	sub	sp, #8
20000c08:	af00      	add	r7, sp, #0
20000c0a:	4603      	mov	r3, r0
20000c0c:	71fb      	strb	r3, [r7, #7]

	set_DC_LOW();
20000c0e:	f000 f915 	bl	20000e3c <set_DC_LOW>
	configureSPI(8);
20000c12:	f04f 0008 	mov.w	r0, #8
20000c16:	f000 f8a9 	bl	20000d6c <configureSPI>
	sendSPI(commandByte);
20000c1a:	79fb      	ldrb	r3, [r7, #7]
20000c1c:	4618      	mov	r0, r3
20000c1e:	f000 f8bd 	bl	20000d9c <sendSPI>
	set_DC_HIGH();
20000c22:	f000 f901 	bl	20000e28 <set_DC_HIGH>
}
20000c26:	f107 0708 	add.w	r7, r7, #8
20000c2a:	46bd      	mov	sp, r7
20000c2c:	bd80      	pop	{r7, pc}
20000c2e:	bf00      	nop

20000c30 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color){
20000c30:	b580      	push	{r7, lr}
20000c32:	b088      	sub	sp, #32
20000c34:	af00      	add	r7, sp, #0
20000c36:	80f8      	strh	r0, [r7, #6]
20000c38:	80b9      	strh	r1, [r7, #4]
20000c3a:	807a      	strh	r2, [r7, #2]
20000c3c:	803b      	strh	r3, [r7, #0]

    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
20000c3e:	f9b7 2000 	ldrsh.w	r2, [r7]
20000c42:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
20000c46:	ebc3 0302 	rsb	r3, r3, r2
20000c4a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
20000c4e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
20000c52:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
20000c56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
20000c5a:	ebc3 0301 	rsb	r3, r3, r1
20000c5e:	2b00      	cmp	r3, #0
20000c60:	bfb8      	it	lt
20000c62:	425b      	neglt	r3, r3
20000c64:	429a      	cmp	r2, r3
20000c66:	bfd4      	ite	le
20000c68:	2300      	movle	r3, #0
20000c6a:	2301      	movgt	r3, #1
20000c6c:	81fb      	strh	r3, [r7, #14]
    if (steep) {
20000c6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
20000c72:	2b00      	cmp	r3, #0
20000c74:	d00b      	beq.n	20000c8e <writeLine+0x5e>
        _swap_int16_t(x0, y0);
20000c76:	88fb      	ldrh	r3, [r7, #6]
20000c78:	833b      	strh	r3, [r7, #24]
20000c7a:	88bb      	ldrh	r3, [r7, #4]
20000c7c:	80fb      	strh	r3, [r7, #6]
20000c7e:	8b3b      	ldrh	r3, [r7, #24]
20000c80:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
20000c82:	887b      	ldrh	r3, [r7, #2]
20000c84:	837b      	strh	r3, [r7, #26]
20000c86:	883b      	ldrh	r3, [r7, #0]
20000c88:	807b      	strh	r3, [r7, #2]
20000c8a:	8b7b      	ldrh	r3, [r7, #26]
20000c8c:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
20000c8e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20000c92:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
20000c96:	429a      	cmp	r2, r3
20000c98:	dd0b      	ble.n	20000cb2 <writeLine+0x82>
        _swap_int16_t(x0, x1);
20000c9a:	88fb      	ldrh	r3, [r7, #6]
20000c9c:	83bb      	strh	r3, [r7, #28]
20000c9e:	887b      	ldrh	r3, [r7, #2]
20000ca0:	80fb      	strh	r3, [r7, #6]
20000ca2:	8bbb      	ldrh	r3, [r7, #28]
20000ca4:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
20000ca6:	88bb      	ldrh	r3, [r7, #4]
20000ca8:	83fb      	strh	r3, [r7, #30]
20000caa:	883b      	ldrh	r3, [r7, #0]
20000cac:	80bb      	strh	r3, [r7, #4]
20000cae:	8bfb      	ldrh	r3, [r7, #30]
20000cb0:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
20000cb2:	887a      	ldrh	r2, [r7, #2]
20000cb4:	88fb      	ldrh	r3, [r7, #6]
20000cb6:	ebc3 0302 	rsb	r3, r3, r2
20000cba:	b29b      	uxth	r3, r3
20000cbc:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
20000cbe:	f9b7 2000 	ldrsh.w	r2, [r7]
20000cc2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
20000cc6:	ebc3 0302 	rsb	r3, r3, r2
20000cca:	2b00      	cmp	r3, #0
20000ccc:	bfb8      	it	lt
20000cce:	425b      	neglt	r3, r3
20000cd0:	827b      	strh	r3, [r7, #18]

    int16_t err = dx / 2;
20000cd2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
20000cd6:	ea4f 72d3 	mov.w	r2, r3, lsr #31
20000cda:	4413      	add	r3, r2
20000cdc:	ea4f 0363 	mov.w	r3, r3, asr #1
20000ce0:	82bb      	strh	r3, [r7, #20]
    int16_t ystep;

    if (y0 < y1) {
20000ce2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
20000ce6:	f9b7 3000 	ldrsh.w	r3, [r7]
20000cea:	429a      	cmp	r2, r3
20000cec:	da03      	bge.n	20000cf6 <writeLine+0xc6>
        ystep = 1;
20000cee:	f04f 0301 	mov.w	r3, #1
20000cf2:	82fb      	strh	r3, [r7, #22]
    } else {
        ystep = -1;
    }

    for (; x0<=x1; x0++) {
20000cf4:	e030      	b.n	20000d58 <writeLine+0x128>
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
20000cf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
20000cfa:	82fb      	strh	r3, [r7, #22]
    }

    for (; x0<=x1; x0++) {
20000cfc:	e02c      	b.n	20000d58 <writeLine+0x128>
        if (steep) {
20000cfe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
20000d02:	2b00      	cmp	r3, #0
20000d04:	d008      	beq.n	20000d18 <writeLine+0xe8>
            drawPixel(y0, x0, color);
20000d06:	88b9      	ldrh	r1, [r7, #4]
20000d08:	88fa      	ldrh	r2, [r7, #6]
20000d0a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
20000d0c:	4608      	mov	r0, r1
20000d0e:	4611      	mov	r1, r2
20000d10:	461a      	mov	r2, r3
20000d12:	f7ff fe79 	bl	20000a08 <drawPixel>
20000d16:	e007      	b.n	20000d28 <writeLine+0xf8>
        } else {
            drawPixel(x0, y0, color);
20000d18:	88f9      	ldrh	r1, [r7, #6]
20000d1a:	88ba      	ldrh	r2, [r7, #4]
20000d1c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
20000d1e:	4608      	mov	r0, r1
20000d20:	4611      	mov	r1, r2
20000d22:	461a      	mov	r2, r3
20000d24:	f7ff fe70 	bl	20000a08 <drawPixel>
        }
        err -= dy;
20000d28:	8aba      	ldrh	r2, [r7, #20]
20000d2a:	8a7b      	ldrh	r3, [r7, #18]
20000d2c:	ebc3 0302 	rsb	r3, r3, r2
20000d30:	b29b      	uxth	r3, r3
20000d32:	82bb      	strh	r3, [r7, #20]
        if (err < 0) {
20000d34:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
20000d38:	2b00      	cmp	r3, #0
20000d3a:	da09      	bge.n	20000d50 <writeLine+0x120>
            y0 += ystep;
20000d3c:	88ba      	ldrh	r2, [r7, #4]
20000d3e:	8afb      	ldrh	r3, [r7, #22]
20000d40:	4413      	add	r3, r2
20000d42:	b29b      	uxth	r3, r3
20000d44:	80bb      	strh	r3, [r7, #4]
            err += dx;
20000d46:	8aba      	ldrh	r2, [r7, #20]
20000d48:	8a3b      	ldrh	r3, [r7, #16]
20000d4a:	4413      	add	r3, r2
20000d4c:	b29b      	uxth	r3, r3
20000d4e:	82bb      	strh	r3, [r7, #20]
        ystep = 1;
    } else {
        ystep = -1;
    }

    for (; x0<=x1; x0++) {
20000d50:	88fb      	ldrh	r3, [r7, #6]
20000d52:	f103 0301 	add.w	r3, r3, #1
20000d56:	80fb      	strh	r3, [r7, #6]
20000d58:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20000d5c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
20000d60:	429a      	cmp	r2, r3
20000d62:	ddcc      	ble.n	20000cfe <writeLine+0xce>
        if (err < 0) {
            y0 += ystep;
            err += dx;
        }
    }
}
20000d64:	f107 0720 	add.w	r7, r7, #32
20000d68:	46bd      	mov	sp, r7
20000d6a:	bd80      	pop	{r7, pc}

20000d6c <configureSPI>:


void configureSPI(uint8_t frameSize){
20000d6c:	b580      	push	{r7, lr}
20000d6e:	b084      	sub	sp, #16
20000d70:	af02      	add	r7, sp, #8
20000d72:	4603      	mov	r3, r0
20000d74:	71fb      	strb	r3, [r7, #7]
	MSS_SPI_configure_master_mode(
20000d76:	79fb      	ldrb	r3, [r7, #7]
20000d78:	9300      	str	r3, [sp, #0]
20000d7a:	f243 400c 	movw	r0, #13324	; 0x340c
20000d7e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000d82:	f04f 0100 	mov.w	r1, #0
20000d86:	f04f 0200 	mov.w	r2, #0
20000d8a:	f04f 0302 	mov.w	r3, #2
20000d8e:	f000 fa01 	bl	20001194 <MSS_SPI_configure_master_mode>
		MSS_SPI_SLAVE_0,
		MSS_SPI_MODE0,
		MSS_SPI_PCLK_DIV_8,
		frameSize
	);
}
20000d92:	f107 0708 	add.w	r7, r7, #8
20000d96:	46bd      	mov	sp, r7
20000d98:	bd80      	pop	{r7, pc}
20000d9a:	bf00      	nop

20000d9c <sendSPI>:

void sendSPI(uint8_t data){
20000d9c:	b580      	push	{r7, lr}
20000d9e:	b082      	sub	sp, #8
20000da0:	af00      	add	r7, sp, #0
20000da2:	4603      	mov	r3, r0
20000da4:	71fb      	strb	r3, [r7, #7]
	
	MSS_SPI_transfer_frame( &g_mss_spi1, data);
20000da6:	79fb      	ldrb	r3, [r7, #7]
20000da8:	f243 400c 	movw	r0, #13324	; 0x340c
20000dac:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000db0:	4619      	mov	r1, r3
20000db2:	f000 fb4b 	bl	2000144c <MSS_SPI_transfer_frame>
	
}
20000db6:	f107 0708 	add.w	r7, r7, #8
20000dba:	46bd      	mov	sp, r7
20000dbc:	bd80      	pop	{r7, pc}
20000dbe:	bf00      	nop

20000dc0 <sendSPI16>:

void sendSPI16(uint16_t data){
20000dc0:	b580      	push	{r7, lr}
20000dc2:	b082      	sub	sp, #8
20000dc4:	af00      	add	r7, sp, #0
20000dc6:	4603      	mov	r3, r0
20000dc8:	80fb      	strh	r3, [r7, #6]
	MSS_SPI_transfer_frame(&g_mss_spi1, data>>8);
20000dca:	88fb      	ldrh	r3, [r7, #6]
20000dcc:	ea4f 2313 	mov.w	r3, r3, lsr #8
20000dd0:	b29b      	uxth	r3, r3
20000dd2:	f243 400c 	movw	r0, #13324	; 0x340c
20000dd6:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000dda:	4619      	mov	r1, r3
20000ddc:	f000 fb36 	bl	2000144c <MSS_SPI_transfer_frame>
	MSS_SPI_transfer_frame(&g_mss_spi1, data);
20000de0:	88fb      	ldrh	r3, [r7, #6]
20000de2:	f243 400c 	movw	r0, #13324	; 0x340c
20000de6:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000dea:	4619      	mov	r1, r3
20000dec:	f000 fb2e 	bl	2000144c <MSS_SPI_transfer_frame>
}
20000df0:	f107 0708 	add.w	r7, r7, #8
20000df4:	46bd      	mov	sp, r7
20000df6:	bd80      	pop	{r7, pc}

20000df8 <set_SPI_CS>:

void set_SPI_CS(){
20000df8:	b580      	push	{r7, lr}
20000dfa:	af00      	add	r7, sp, #0
	MSS_SPI_set_slave_select(&g_mss_spi1, MSS_SPI_SLAVE_0);
20000dfc:	f243 400c 	movw	r0, #13324	; 0x340c
20000e00:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000e04:	f04f 0100 	mov.w	r1, #0
20000e08:	f000 fa54 	bl	200012b4 <MSS_SPI_set_slave_select>
}
20000e0c:	bd80      	pop	{r7, pc}
20000e0e:	bf00      	nop

20000e10 <clear_SPI_CS>:

void clear_SPI_CS(){
20000e10:	b580      	push	{r7, lr}
20000e12:	af00      	add	r7, sp, #0
	MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
20000e14:	f243 400c 	movw	r0, #13324	; 0x340c
20000e18:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000e1c:	f04f 0100 	mov.w	r1, #0
20000e20:	f000 facc 	bl	200013bc <MSS_SPI_clear_slave_select>
}
20000e24:	bd80      	pop	{r7, pc}
20000e26:	bf00      	nop

20000e28 <set_DC_HIGH>:

void set_DC_HIGH(){
20000e28:	b580      	push	{r7, lr}
20000e2a:	af00      	add	r7, sp, #0
	MSS_GPIO_set_output(DC, 1);
20000e2c:	f04f 0000 	mov.w	r0, #0
20000e30:	f04f 0101 	mov.w	r1, #1
20000e34:	f000 fe3c 	bl	20001ab0 <MSS_GPIO_set_output>
}
20000e38:	bd80      	pop	{r7, pc}
20000e3a:	bf00      	nop

20000e3c <set_DC_LOW>:

void set_DC_LOW(){
20000e3c:	b580      	push	{r7, lr}
20000e3e:	af00      	add	r7, sp, #0
	MSS_GPIO_set_output(DC, 0);
20000e40:	f04f 0000 	mov.w	r0, #0
20000e44:	f04f 0100 	mov.w	r1, #0
20000e48:	f000 fe32 	bl	20001ab0 <MSS_GPIO_set_output>
}
20000e4c:	bd80      	pop	{r7, pc}
20000e4e:	bf00      	nop

20000e50 <NVIC_EnableIRQ>:
 *
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
20000e50:	b480      	push	{r7}
20000e52:	b083      	sub	sp, #12
20000e54:	af00      	add	r7, sp, #0
20000e56:	4603      	mov	r3, r0
20000e58:	80fb      	strh	r3, [r7, #6]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20000e5a:	f24e 1300 	movw	r3, #57600	; 0xe100
20000e5e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000e62:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20000e66:	ea4f 1252 	mov.w	r2, r2, lsr #5
20000e6a:	88f9      	ldrh	r1, [r7, #6]
20000e6c:	f001 011f 	and.w	r1, r1, #31
20000e70:	f04f 0001 	mov.w	r0, #1
20000e74:	fa00 f101 	lsl.w	r1, r0, r1
20000e78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000e7c:	f107 070c 	add.w	r7, r7, #12
20000e80:	46bd      	mov	sp, r7
20000e82:	bc80      	pop	{r7}
20000e84:	4770      	bx	lr
20000e86:	bf00      	nop

20000e88 <NVIC_DisableIRQ>:
 * 
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
20000e88:	b480      	push	{r7}
20000e8a:	b083      	sub	sp, #12
20000e8c:	af00      	add	r7, sp, #0
20000e8e:	4603      	mov	r3, r0
20000e90:	80fb      	strh	r3, [r7, #6]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
20000e92:	f24e 1300 	movw	r3, #57600	; 0xe100
20000e96:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000e9a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20000e9e:	ea4f 1252 	mov.w	r2, r2, lsr #5
20000ea2:	88f9      	ldrh	r1, [r7, #6]
20000ea4:	f001 011f 	and.w	r1, r1, #31
20000ea8:	f04f 0001 	mov.w	r0, #1
20000eac:	fa00 f101 	lsl.w	r1, r0, r1
20000eb0:	f102 0220 	add.w	r2, r2, #32
20000eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000eb8:	f107 070c 	add.w	r7, r7, #12
20000ebc:	46bd      	mov	sp, r7
20000ebe:	bc80      	pop	{r7}
20000ec0:	4770      	bx	lr
20000ec2:	bf00      	nop

20000ec4 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20000ec4:	b480      	push	{r7}
20000ec6:	b083      	sub	sp, #12
20000ec8:	af00      	add	r7, sp, #0
20000eca:	4603      	mov	r3, r0
20000ecc:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20000ece:	f24e 1300 	movw	r3, #57600	; 0xe100
20000ed2:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000ed6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20000eda:	ea4f 1252 	mov.w	r2, r2, lsr #5
20000ede:	88f9      	ldrh	r1, [r7, #6]
20000ee0:	f001 011f 	and.w	r1, r1, #31
20000ee4:	f04f 0001 	mov.w	r0, #1
20000ee8:	fa00 f101 	lsl.w	r1, r0, r1
20000eec:	f102 0260 	add.w	r2, r2, #96	; 0x60
20000ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000ef4:	f107 070c 	add.w	r7, r7, #12
20000ef8:	46bd      	mov	sp, r7
20000efa:	bc80      	pop	{r7}
20000efc:	4770      	bx	lr
20000efe:	bf00      	nop

20000f00 <MSS_SPI_init>:
 */
void MSS_SPI_init
(
    mss_spi_instance_t * this_spi
)
{
20000f00:	b580      	push	{r7, lr}
20000f02:	b084      	sub	sp, #16
20000f04:	af00      	add	r7, sp, #0
20000f06:	6078      	str	r0, [r7, #4]
    uint16_t slave;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20000f08:	687a      	ldr	r2, [r7, #4]
20000f0a:	f243 4390 	movw	r3, #13456	; 0x3490
20000f0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000f12:	429a      	cmp	r2, r3
20000f14:	d007      	beq.n	20000f26 <MSS_SPI_init+0x26>
20000f16:	687a      	ldr	r2, [r7, #4]
20000f18:	f243 430c 	movw	r3, #13324	; 0x340c
20000f1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000f20:	429a      	cmp	r2, r3
20000f22:	d000      	beq.n	20000f26 <MSS_SPI_init+0x26>
20000f24:	be00      	bkpt	0x0000
     * Initialize SPI driver instance data. Relies on the majority
     * of data requiring 0 for initial state so we just need to fill
     * with 0s and finish off with a small number of non zero values.
     */
    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
20000f26:	687b      	ldr	r3, [r7, #4]
20000f28:	889b      	ldrh	r3, [r3, #4]
20000f2a:	b21b      	sxth	r3, r3
20000f2c:	4618      	mov	r0, r3
20000f2e:	f7ff ffab 	bl	20000e88 <NVIC_DisableIRQ>

    memset(this_spi, 0, sizeof(mss_spi_instance_t));
20000f32:	6878      	ldr	r0, [r7, #4]
20000f34:	f04f 0100 	mov.w	r1, #0
20000f38:	f04f 0284 	mov.w	r2, #132	; 0x84
20000f3c:	f002 f870 	bl	20003020 <memset>
    
    this_spi->cmd_done = 1u;
20000f40:	687b      	ldr	r3, [r7, #4]
20000f42:	f04f 0201 	mov.w	r2, #1
20000f46:	625a      	str	r2, [r3, #36]	; 0x24

    for(slave = 0u; slave < (uint16_t)MSS_SPI_MAX_NB_OF_SLAVES; ++slave)
20000f48:	f04f 0300 	mov.w	r3, #0
20000f4c:	81fb      	strh	r3, [r7, #14]
20000f4e:	e00d      	b.n	20000f6c <MSS_SPI_init+0x6c>
    {
        this_spi->slaves_cfg[slave].ctrl_reg = NOT_CONFIGURED;
20000f50:	89fb      	ldrh	r3, [r7, #14]
20000f52:	687a      	ldr	r2, [r7, #4]
20000f54:	f103 0306 	add.w	r3, r3, #6
20000f58:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20000f5c:	4413      	add	r3, r2
20000f5e:	f04f 32ff 	mov.w	r2, #4294967295
20000f62:	605a      	str	r2, [r3, #4]

    memset(this_spi, 0, sizeof(mss_spi_instance_t));
    
    this_spi->cmd_done = 1u;

    for(slave = 0u; slave < (uint16_t)MSS_SPI_MAX_NB_OF_SLAVES; ++slave)
20000f64:	89fb      	ldrh	r3, [r7, #14]
20000f66:	f103 0301 	add.w	r3, r3, #1
20000f6a:	81fb      	strh	r3, [r7, #14]
20000f6c:	89fb      	ldrh	r3, [r7, #14]
20000f6e:	2b07      	cmp	r3, #7
20000f70:	d9ee      	bls.n	20000f50 <MSS_SPI_init+0x50>
    {
        this_spi->slaves_cfg[slave].ctrl_reg = NOT_CONFIGURED;
    }

    if(this_spi == &g_mss_spi0)
20000f72:	687a      	ldr	r2, [r7, #4]
20000f74:	f243 4390 	movw	r3, #13456	; 0x3490
20000f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000f7c:	429a      	cmp	r2, r3
20000f7e:	d126      	bne.n	20000fce <MSS_SPI_init+0xce>
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI0_BASE);
20000f80:	687a      	ldr	r2, [r7, #4]
20000f82:	f241 0300 	movw	r3, #4096	; 0x1000
20000f86:	f2c4 0300 	movt	r3, #16384	; 0x4000
20000f8a:	6013      	str	r3, [r2, #0]
        this_spi->irqn = SPI0_IRQn;
20000f8c:	687b      	ldr	r3, [r7, #4]
20000f8e:	f04f 020c 	mov.w	r2, #12
20000f92:	809a      	strh	r2, [r3, #4]

        /* reset SPI0 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI0_SOFTRESET_MASK;
20000f94:	f242 0300 	movw	r3, #8192	; 0x2000
20000f98:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000f9c:	f242 0200 	movw	r2, #8192	; 0x2000
20000fa0:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000fa4:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
20000faa:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended SPI0 interrupt */
        NVIC_ClearPendingIRQ(SPI0_IRQn);
20000fac:	f04f 000c 	mov.w	r0, #12
20000fb0:	f7ff ff88 	bl	20000ec4 <NVIC_ClearPendingIRQ>
        /* Take SPI0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI0_SOFTRESET_MASK;
20000fb4:	f242 0300 	movw	r3, #8192	; 0x2000
20000fb8:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000fbc:	f242 0200 	movw	r2, #8192	; 0x2000
20000fc0:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000fc4:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000fc6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
20000fca:	631a      	str	r2, [r3, #48]	; 0x30
20000fcc:	e025      	b.n	2000101a <MSS_SPI_init+0x11a>
    }
    else
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI1_BASE);
20000fce:	687a      	ldr	r2, [r7, #4]
20000fd0:	f241 0300 	movw	r3, #4096	; 0x1000
20000fd4:	f2c4 0301 	movt	r3, #16385	; 0x4001
20000fd8:	6013      	str	r3, [r2, #0]
        this_spi->irqn = SPI1_IRQn;
20000fda:	687b      	ldr	r3, [r7, #4]
20000fdc:	f04f 020d 	mov.w	r2, #13
20000fe0:	809a      	strh	r2, [r3, #4]
        
        /* reset SPI1 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI1_SOFTRESET_MASK;
20000fe2:	f242 0300 	movw	r3, #8192	; 0x2000
20000fe6:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000fea:	f242 0200 	movw	r2, #8192	; 0x2000
20000fee:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000ff2:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000ff4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
20000ff8:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended SPI1 interrupt */
        NVIC_ClearPendingIRQ(SPI1_IRQn);
20000ffa:	f04f 000d 	mov.w	r0, #13
20000ffe:	f7ff ff61 	bl	20000ec4 <NVIC_ClearPendingIRQ>
        /* Take SPI1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI1_SOFTRESET_MASK;
20001002:	f242 0300 	movw	r3, #8192	; 0x2000
20001006:	f2ce 0304 	movt	r3, #57348	; 0xe004
2000100a:	f242 0200 	movw	r2, #8192	; 0x2000
2000100e:	f2ce 0204 	movt	r2, #57348	; 0xe004
20001012:	6b12      	ldr	r2, [r2, #48]	; 0x30
20001014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
20001018:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* De-assert reset bit. */
    this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
2000101a:	687b      	ldr	r3, [r7, #4]
2000101c:	681b      	ldr	r3, [r3, #0]
2000101e:	687a      	ldr	r2, [r7, #4]
20001020:	6812      	ldr	r2, [r2, #0]
20001022:	6812      	ldr	r2, [r2, #0]
20001024:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
20001028:	601a      	str	r2, [r3, #0]
}
2000102a:	f107 0710 	add.w	r7, r7, #16
2000102e:	46bd      	mov	sp, r7
20001030:	bd80      	pop	{r7, pc}
20001032:	bf00      	nop

20001034 <recover_from_rx_overflow>:
 */
static void recover_from_rx_overflow
(
    mss_spi_instance_t * this_spi
)
{
20001034:	b580      	push	{r7, lr}
20001036:	b08a      	sub	sp, #40	; 0x28
20001038:	af00      	add	r7, sp, #0
2000103a:	6078      	str	r0, [r7, #4]
    uint32_t slave_select;
    
    /*
     * Read current SPI hardware block configuration.
     */
    control_reg = this_spi->hw_reg->CONTROL;
2000103c:	687b      	ldr	r3, [r7, #4]
2000103e:	681b      	ldr	r3, [r3, #0]
20001040:	681b      	ldr	r3, [r3, #0]
20001042:	60fb      	str	r3, [r7, #12]
    clk_gen = this_spi->hw_reg->CLK_GEN;
20001044:	687b      	ldr	r3, [r7, #4]
20001046:	681b      	ldr	r3, [r3, #0]
20001048:	699b      	ldr	r3, [r3, #24]
2000104a:	613b      	str	r3, [r7, #16]
    frame_size = this_spi->hw_reg->TXRXDF_SIZE;
2000104c:	687b      	ldr	r3, [r7, #4]
2000104e:	681b      	ldr	r3, [r3, #0]
20001050:	685b      	ldr	r3, [r3, #4]
20001052:	617b      	str	r3, [r7, #20]
    control2 = this_spi->hw_reg->CONTROL2;
20001054:	687b      	ldr	r3, [r7, #4]
20001056:	681b      	ldr	r3, [r3, #0]
20001058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2000105a:	61bb      	str	r3, [r7, #24]
    packet_size = this_spi->hw_reg->PKTSIZE;
2000105c:	687b      	ldr	r3, [r7, #4]
2000105e:	681b      	ldr	r3, [r3, #0]
20001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001062:	61fb      	str	r3, [r7, #28]
    cmd_size = this_spi->hw_reg->CMDSIZE;
20001064:	687b      	ldr	r3, [r7, #4]
20001066:	681b      	ldr	r3, [r3, #0]
20001068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2000106a:	623b      	str	r3, [r7, #32]
    slave_select = this_spi->hw_reg->SLAVE_SELECT;
2000106c:	687b      	ldr	r3, [r7, #4]
2000106e:	681b      	ldr	r3, [r3, #0]
20001070:	69db      	ldr	r3, [r3, #28]
20001072:	627b      	str	r3, [r7, #36]	; 0x24
     
    /*
     * Reset the SPI hardware block.
     */
    if(this_spi == &g_mss_spi0)
20001074:	687a      	ldr	r2, [r7, #4]
20001076:	f243 4390 	movw	r3, #13456	; 0x3490
2000107a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000107e:	429a      	cmp	r2, r3
20001080:	d12e      	bne.n	200010e0 <recover_from_rx_overflow+0xac>
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI0_BASE);
20001082:	687a      	ldr	r2, [r7, #4]
20001084:	f241 0300 	movw	r3, #4096	; 0x1000
20001088:	f2c4 0300 	movt	r3, #16384	; 0x4000
2000108c:	6013      	str	r3, [r2, #0]
        this_spi->irqn = SPI0_IRQn;
2000108e:	687b      	ldr	r3, [r7, #4]
20001090:	f04f 020c 	mov.w	r2, #12
20001094:	809a      	strh	r2, [r3, #4]

        /* reset SPI0 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI0_SOFTRESET_MASK;
20001096:	f242 0300 	movw	r3, #8192	; 0x2000
2000109a:	f2ce 0304 	movt	r3, #57348	; 0xe004
2000109e:	f242 0200 	movw	r2, #8192	; 0x2000
200010a2:	f2ce 0204 	movt	r2, #57348	; 0xe004
200010a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
200010a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
200010ac:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended SPI0 interrupt */
        NVIC_ClearPendingIRQ(SPI0_IRQn);
200010ae:	f04f 000c 	mov.w	r0, #12
200010b2:	f7ff ff07 	bl	20000ec4 <NVIC_ClearPendingIRQ>
        /* Take SPI0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI0_SOFTRESET_MASK;
200010b6:	f242 0300 	movw	r3, #8192	; 0x2000
200010ba:	f2ce 0304 	movt	r3, #57348	; 0xe004
200010be:	f242 0200 	movw	r2, #8192	; 0x2000
200010c2:	f2ce 0204 	movt	r2, #57348	; 0xe004
200010c6:	6b12      	ldr	r2, [r2, #48]	; 0x30
200010c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
200010cc:	631a      	str	r2, [r3, #48]	; 0x30

        this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
200010ce:	687b      	ldr	r3, [r7, #4]
200010d0:	681b      	ldr	r3, [r3, #0]
200010d2:	687a      	ldr	r2, [r7, #4]
200010d4:	6812      	ldr	r2, [r2, #0]
200010d6:	6812      	ldr	r2, [r2, #0]
200010d8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
200010dc:	601a      	str	r2, [r3, #0]
200010de:	e02d      	b.n	2000113c <recover_from_rx_overflow+0x108>
    }
    else
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI1_BASE);
200010e0:	687a      	ldr	r2, [r7, #4]
200010e2:	f241 0300 	movw	r3, #4096	; 0x1000
200010e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
200010ea:	6013      	str	r3, [r2, #0]
        this_spi->irqn = SPI1_IRQn;
200010ec:	687b      	ldr	r3, [r7, #4]
200010ee:	f04f 020d 	mov.w	r2, #13
200010f2:	809a      	strh	r2, [r3, #4]
        
        /* reset SPI1 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI1_SOFTRESET_MASK;
200010f4:	f242 0300 	movw	r3, #8192	; 0x2000
200010f8:	f2ce 0304 	movt	r3, #57348	; 0xe004
200010fc:	f242 0200 	movw	r2, #8192	; 0x2000
20001100:	f2ce 0204 	movt	r2, #57348	; 0xe004
20001104:	6b12      	ldr	r2, [r2, #48]	; 0x30
20001106:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
2000110a:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended SPI1 interrupt */
        NVIC_ClearPendingIRQ(SPI1_IRQn);
2000110c:	f04f 000d 	mov.w	r0, #13
20001110:	f7ff fed8 	bl	20000ec4 <NVIC_ClearPendingIRQ>
        /* Take SPI1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI1_SOFTRESET_MASK;
20001114:	f242 0300 	movw	r3, #8192	; 0x2000
20001118:	f2ce 0304 	movt	r3, #57348	; 0xe004
2000111c:	f242 0200 	movw	r2, #8192	; 0x2000
20001120:	f2ce 0204 	movt	r2, #57348	; 0xe004
20001124:	6b12      	ldr	r2, [r2, #48]	; 0x30
20001126:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
2000112a:	631a      	str	r2, [r3, #48]	; 0x30
        
        this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
2000112c:	687b      	ldr	r3, [r7, #4]
2000112e:	681b      	ldr	r3, [r3, #0]
20001130:	687a      	ldr	r2, [r7, #4]
20001132:	6812      	ldr	r2, [r2, #0]
20001134:	6812      	ldr	r2, [r2, #0]
20001136:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
2000113a:	601a      	str	r2, [r3, #0]
    }
    
    /*
     * Restore SPI hardware block configuration.
     */
    control_reg &= ~(uint32_t)CTRL_ENABLE_MASK;
2000113c:	68fb      	ldr	r3, [r7, #12]
2000113e:	f023 0301 	bic.w	r3, r3, #1
20001142:	60fb      	str	r3, [r7, #12]
    this_spi->hw_reg->CONTROL = control_reg;
20001144:	687b      	ldr	r3, [r7, #4]
20001146:	681b      	ldr	r3, [r3, #0]
20001148:	68fa      	ldr	r2, [r7, #12]
2000114a:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CLK_GEN = clk_gen;
2000114c:	687b      	ldr	r3, [r7, #4]
2000114e:	681b      	ldr	r3, [r3, #0]
20001150:	693a      	ldr	r2, [r7, #16]
20001152:	619a      	str	r2, [r3, #24]
    this_spi->hw_reg->TXRXDF_SIZE = frame_size;
20001154:	687b      	ldr	r3, [r7, #4]
20001156:	681b      	ldr	r3, [r3, #0]
20001158:	697a      	ldr	r2, [r7, #20]
2000115a:	605a      	str	r2, [r3, #4]
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
2000115c:	687b      	ldr	r3, [r7, #4]
2000115e:	681b      	ldr	r3, [r3, #0]
20001160:	687a      	ldr	r2, [r7, #4]
20001162:	6812      	ldr	r2, [r2, #0]
20001164:	6812      	ldr	r2, [r2, #0]
20001166:	f042 0201 	orr.w	r2, r2, #1
2000116a:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CONTROL2 = control2;
2000116c:	687b      	ldr	r3, [r7, #4]
2000116e:	681b      	ldr	r3, [r3, #0]
20001170:	69ba      	ldr	r2, [r7, #24]
20001172:	629a      	str	r2, [r3, #40]	; 0x28
    this_spi->hw_reg->PKTSIZE = packet_size;
20001174:	687b      	ldr	r3, [r7, #4]
20001176:	681b      	ldr	r3, [r3, #0]
20001178:	69fa      	ldr	r2, [r7, #28]
2000117a:	631a      	str	r2, [r3, #48]	; 0x30
    this_spi->hw_reg->CMDSIZE = cmd_size;
2000117c:	687b      	ldr	r3, [r7, #4]
2000117e:	681b      	ldr	r3, [r3, #0]
20001180:	6a3a      	ldr	r2, [r7, #32]
20001182:	635a      	str	r2, [r3, #52]	; 0x34
    this_spi->hw_reg->SLAVE_SELECT = slave_select;
20001184:	687b      	ldr	r3, [r7, #4]
20001186:	681b      	ldr	r3, [r3, #0]
20001188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000118a:	61da      	str	r2, [r3, #28]
}
2000118c:	f107 0728 	add.w	r7, r7, #40	; 0x28
20001190:	46bd      	mov	sp, r7
20001192:	bd80      	pop	{r7, pc}

20001194 <MSS_SPI_configure_master_mode>:
    mss_spi_slave_t         slave,
    mss_spi_protocol_mode_t protocol_mode,
    mss_spi_pclk_div_t      clk_rate,
    uint8_t                 frame_bit_length
)
{
20001194:	b580      	push	{r7, lr}
20001196:	b084      	sub	sp, #16
20001198:	af00      	add	r7, sp, #0
2000119a:	60f8      	str	r0, [r7, #12]
2000119c:	607a      	str	r2, [r7, #4]
2000119e:	460a      	mov	r2, r1
200011a0:	72fa      	strb	r2, [r7, #11]
200011a2:	70fb      	strb	r3, [r7, #3]
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
200011a4:	68fa      	ldr	r2, [r7, #12]
200011a6:	f243 4390 	movw	r3, #13456	; 0x3490
200011aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200011ae:	429a      	cmp	r2, r3
200011b0:	d007      	beq.n	200011c2 <MSS_SPI_configure_master_mode+0x2e>
200011b2:	68fa      	ldr	r2, [r7, #12]
200011b4:	f243 430c 	movw	r3, #13324	; 0x340c
200011b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200011bc:	429a      	cmp	r2, r3
200011be:	d000      	beq.n	200011c2 <MSS_SPI_configure_master_mode+0x2e>
200011c0:	be00      	bkpt	0x0000
    ASSERT(slave < MSS_SPI_MAX_NB_OF_SLAVES);
200011c2:	7afb      	ldrb	r3, [r7, #11]
200011c4:	2b07      	cmp	r3, #7
200011c6:	d900      	bls.n	200011ca <MSS_SPI_configure_master_mode+0x36>
200011c8:	be00      	bkpt	0x0000
    ASSERT(frame_bit_length <= MAX_FRAME_LENGTH);
200011ca:	7e3b      	ldrb	r3, [r7, #24]
200011cc:	2b20      	cmp	r3, #32
200011ce:	d900      	bls.n	200011d2 <MSS_SPI_configure_master_mode+0x3e>
200011d0:	be00      	bkpt	0x0000
    
    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
200011d2:	68fb      	ldr	r3, [r7, #12]
200011d4:	889b      	ldrh	r3, [r3, #4]
200011d6:	b21b      	sxth	r3, r3
200011d8:	4618      	mov	r0, r3
200011da:	f7ff fe55 	bl	20000e88 <NVIC_DisableIRQ>

    /* Reset slave transfer mode to unknown to wipe slate clean */
    this_spi->slave_xfer_mode = MSS_SPI_SLAVE_XFER_NONE;
200011de:	68fb      	ldr	r3, [r7, #12]
200011e0:	f04f 0200 	mov.w	r2, #0
200011e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set the mode. */
    this_spi->hw_reg->CONTROL &= ~(uint32_t)CTRL_ENABLE_MASK;
200011e8:	68fb      	ldr	r3, [r7, #12]
200011ea:	681b      	ldr	r3, [r3, #0]
200011ec:	68fa      	ldr	r2, [r7, #12]
200011ee:	6812      	ldr	r2, [r2, #0]
200011f0:	6812      	ldr	r2, [r2, #0]
200011f2:	f022 0201 	bic.w	r2, r2, #1
200011f6:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CONTROL |= CTRL_MASTER_MASK;
200011f8:	68fb      	ldr	r3, [r7, #12]
200011fa:	681b      	ldr	r3, [r3, #0]
200011fc:	68fa      	ldr	r2, [r7, #12]
200011fe:	6812      	ldr	r2, [r2, #0]
20001200:	6812      	ldr	r2, [r2, #0]
20001202:	f042 0202 	orr.w	r2, r2, #2
20001206:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
20001208:	68fb      	ldr	r3, [r7, #12]
2000120a:	681b      	ldr	r3, [r3, #0]
2000120c:	68fa      	ldr	r2, [r7, #12]
2000120e:	6812      	ldr	r2, [r2, #0]
20001210:	6812      	ldr	r2, [r2, #0]
20001212:	f042 0201 	orr.w	r2, r2, #1
20001216:	601a      	str	r2, [r3, #0]
    /*
     * Keep track of the required register configuration for this slave. These
     * values will be used by the MSS_SPI_set_slave_select() function to configure
     * the master to match the slave being selected.
     */
    if(slave < MSS_SPI_MAX_NB_OF_SLAVES)     
20001218:	7afb      	ldrb	r3, [r7, #11]
2000121a:	2b07      	cmp	r3, #7
2000121c:	d83f      	bhi.n	2000129e <MSS_SPI_configure_master_mode+0x10a>
         *
         * We only do it for Motorola modes and if you need the slave selected
         * deselected between frames in modes 0 or 2 then remove SPS_MASK from
         * below.
         */
        if((MSS_SPI_MODE0 == protocol_mode) || (MSS_SPI_MODE1 == protocol_mode) ||
2000121e:	687b      	ldr	r3, [r7, #4]
20001220:	2b00      	cmp	r3, #0
20001222:	d00b      	beq.n	2000123c <MSS_SPI_configure_master_mode+0xa8>
20001224:	687b      	ldr	r3, [r7, #4]
20001226:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2000122a:	d007      	beq.n	2000123c <MSS_SPI_configure_master_mode+0xa8>
2000122c:	687b      	ldr	r3, [r7, #4]
2000122e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
20001232:	d003      	beq.n	2000123c <MSS_SPI_configure_master_mode+0xa8>
20001234:	687b      	ldr	r3, [r7, #4]
20001236:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
2000123a:	d10f      	bne.n	2000125c <MSS_SPI_configure_master_mode+0xc8>
           (MSS_SPI_MODE2 == protocol_mode) || (MSS_SPI_MODE3 == protocol_mode))
        {
            this_spi->slaves_cfg[slave].ctrl_reg = MASTER_MODE_MASK | SPS_MASK |
2000123c:	7afa      	ldrb	r2, [r7, #11]
2000123e:	6879      	ldr	r1, [r7, #4]
20001240:	f240 1302 	movw	r3, #258	; 0x102
20001244:	f2c2 4300 	movt	r3, #9216	; 0x2400
20001248:	ea41 0303 	orr.w	r3, r1, r3
2000124c:	68f9      	ldr	r1, [r7, #12]
2000124e:	f102 0206 	add.w	r2, r2, #6
20001252:	ea4f 02c2 	mov.w	r2, r2, lsl #3
20001256:	440a      	add	r2, r1
20001258:	6053      	str	r3, [r2, #4]
         *
         * We only do it for Motorola modes and if you need the slave selected
         * deselected between frames in modes 0 or 2 then remove SPS_MASK from
         * below.
         */
        if((MSS_SPI_MODE0 == protocol_mode) || (MSS_SPI_MODE1 == protocol_mode) ||
2000125a:	e00e      	b.n	2000127a <MSS_SPI_configure_master_mode+0xe6>
                                                   (uint32_t)protocol_mode | 
                                                   ((uint32_t)1 << TXRXDFCOUNT_SHIFT);
        }
        else
        {
            this_spi->slaves_cfg[slave].ctrl_reg = MASTER_MODE_MASK |
2000125c:	7afa      	ldrb	r2, [r7, #11]
2000125e:	6879      	ldr	r1, [r7, #4]
20001260:	f240 1302 	movw	r3, #258	; 0x102
20001264:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001268:	ea41 0303 	orr.w	r3, r1, r3
2000126c:	68f9      	ldr	r1, [r7, #12]
2000126e:	f102 0206 	add.w	r2, r2, #6
20001272:	ea4f 02c2 	mov.w	r2, r2, lsl #3
20001276:	440a      	add	r2, r1
20001278:	6053      	str	r3, [r2, #4]
                                                   BIGFIFO_MASK |
                                                   (uint32_t)protocol_mode | 
                                                   ((uint32_t)1 << TXRXDFCOUNT_SHIFT);
        }
        
        this_spi->slaves_cfg[slave].txrxdf_size_reg = frame_bit_length;
2000127a:	7afb      	ldrb	r3, [r7, #11]
2000127c:	68fa      	ldr	r2, [r7, #12]
2000127e:	f103 0306 	add.w	r3, r3, #6
20001282:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20001286:	4413      	add	r3, r2
20001288:	7e3a      	ldrb	r2, [r7, #24]
2000128a:	721a      	strb	r2, [r3, #8]
        this_spi->slaves_cfg[slave].clk_gen = (uint8_t)clk_rate;
2000128c:	7afb      	ldrb	r3, [r7, #11]
2000128e:	68fa      	ldr	r2, [r7, #12]
20001290:	f103 0306 	add.w	r3, r3, #6
20001294:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20001298:	4413      	add	r3, r2
2000129a:	78fa      	ldrb	r2, [r7, #3]
2000129c:	725a      	strb	r2, [r3, #9]
    }
    /* Reenable interrupts */
    NVIC_EnableIRQ( this_spi->irqn );
2000129e:	68fb      	ldr	r3, [r7, #12]
200012a0:	889b      	ldrh	r3, [r3, #4]
200012a2:	b21b      	sxth	r3, r3
200012a4:	4618      	mov	r0, r3
200012a6:	f7ff fdd3 	bl	20000e50 <NVIC_EnableIRQ>
}
200012aa:	f107 0710 	add.w	r7, r7, #16
200012ae:	46bd      	mov	sp, r7
200012b0:	bd80      	pop	{r7, pc}
200012b2:	bf00      	nop

200012b4 <MSS_SPI_set_slave_select>:
void MSS_SPI_set_slave_select
(
    mss_spi_instance_t * this_spi,
    mss_spi_slave_t slave
)
{
200012b4:	b580      	push	{r7, lr}
200012b6:	b084      	sub	sp, #16
200012b8:	af00      	add	r7, sp, #0
200012ba:	6078      	str	r0, [r7, #4]
200012bc:	460b      	mov	r3, r1
200012be:	70fb      	strb	r3, [r7, #3]
    uint32_t rx_overflow;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
200012c0:	687a      	ldr	r2, [r7, #4]
200012c2:	f243 4390 	movw	r3, #13456	; 0x3490
200012c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200012ca:	429a      	cmp	r2, r3
200012cc:	d007      	beq.n	200012de <MSS_SPI_set_slave_select+0x2a>
200012ce:	687a      	ldr	r2, [r7, #4]
200012d0:	f243 430c 	movw	r3, #13324	; 0x340c
200012d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200012d8:	429a      	cmp	r2, r3
200012da:	d000      	beq.n	200012de <MSS_SPI_set_slave_select+0x2a>
200012dc:	be00      	bkpt	0x0000
    
    /* This function is only intended to be used with an SPI master. */
    ASSERT((this_spi->hw_reg->CONTROL & CTRL_MASTER_MASK) == CTRL_MASTER_MASK);
200012de:	687b      	ldr	r3, [r7, #4]
200012e0:	681b      	ldr	r3, [r3, #0]
200012e2:	681b      	ldr	r3, [r3, #0]
200012e4:	f003 0302 	and.w	r3, r3, #2
200012e8:	2b00      	cmp	r3, #0
200012ea:	d100      	bne.n	200012ee <MSS_SPI_set_slave_select+0x3a>
200012ec:	be00      	bkpt	0x0000
    
    ASSERT(this_spi->slaves_cfg[slave].ctrl_reg != NOT_CONFIGURED);
200012ee:	78fb      	ldrb	r3, [r7, #3]
200012f0:	687a      	ldr	r2, [r7, #4]
200012f2:	f103 0306 	add.w	r3, r3, #6
200012f6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
200012fa:	4413      	add	r3, r2
200012fc:	685b      	ldr	r3, [r3, #4]
200012fe:	f1b3 3fff 	cmp.w	r3, #4294967295
20001302:	d100      	bne.n	20001306 <MSS_SPI_set_slave_select+0x52>
20001304:	be00      	bkpt	0x0000

    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
20001306:	687b      	ldr	r3, [r7, #4]
20001308:	889b      	ldrh	r3, [r3, #4]
2000130a:	b21b      	sxth	r3, r3
2000130c:	4618      	mov	r0, r3
2000130e:	f7ff fdbb 	bl	20000e88 <NVIC_DisableIRQ>

    /* Recover from receive overflow. */
    rx_overflow = this_spi->hw_reg->STATUS & RX_OVERFLOW_MASK;
20001312:	687b      	ldr	r3, [r7, #4]
20001314:	681b      	ldr	r3, [r3, #0]
20001316:	689b      	ldr	r3, [r3, #8]
20001318:	f003 0304 	and.w	r3, r3, #4
2000131c:	60fb      	str	r3, [r7, #12]
    if(rx_overflow)
2000131e:	68fb      	ldr	r3, [r7, #12]
20001320:	2b00      	cmp	r3, #0
20001322:	d002      	beq.n	2000132a <MSS_SPI_set_slave_select+0x76>
    {
         recover_from_rx_overflow(this_spi);
20001324:	6878      	ldr	r0, [r7, #4]
20001326:	f7ff fe85 	bl	20001034 <recover_from_rx_overflow>
    }
    
    /* Set the clock rate. */
    this_spi->hw_reg->CONTROL &= ~(uint32_t)CTRL_ENABLE_MASK;
2000132a:	687b      	ldr	r3, [r7, #4]
2000132c:	681b      	ldr	r3, [r3, #0]
2000132e:	687a      	ldr	r2, [r7, #4]
20001330:	6812      	ldr	r2, [r2, #0]
20001332:	6812      	ldr	r2, [r2, #0]
20001334:	f022 0201 	bic.w	r2, r2, #1
20001338:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CONTROL = this_spi->slaves_cfg[slave].ctrl_reg;
2000133a:	687b      	ldr	r3, [r7, #4]
2000133c:	681a      	ldr	r2, [r3, #0]
2000133e:	78fb      	ldrb	r3, [r7, #3]
20001340:	6879      	ldr	r1, [r7, #4]
20001342:	f103 0306 	add.w	r3, r3, #6
20001346:	ea4f 03c3 	mov.w	r3, r3, lsl #3
2000134a:	440b      	add	r3, r1
2000134c:	685b      	ldr	r3, [r3, #4]
2000134e:	6013      	str	r3, [r2, #0]
    this_spi->hw_reg->CLK_GEN = this_spi->slaves_cfg[slave].clk_gen;
20001350:	687b      	ldr	r3, [r7, #4]
20001352:	681a      	ldr	r2, [r3, #0]
20001354:	78fb      	ldrb	r3, [r7, #3]
20001356:	6879      	ldr	r1, [r7, #4]
20001358:	f103 0306 	add.w	r3, r3, #6
2000135c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20001360:	440b      	add	r3, r1
20001362:	7a5b      	ldrb	r3, [r3, #9]
20001364:	6193      	str	r3, [r2, #24]
    this_spi->hw_reg->TXRXDF_SIZE = this_spi->slaves_cfg[slave].txrxdf_size_reg;
20001366:	687b      	ldr	r3, [r7, #4]
20001368:	681a      	ldr	r2, [r3, #0]
2000136a:	78fb      	ldrb	r3, [r7, #3]
2000136c:	6879      	ldr	r1, [r7, #4]
2000136e:	f103 0306 	add.w	r3, r3, #6
20001372:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20001376:	440b      	add	r3, r1
20001378:	7a1b      	ldrb	r3, [r3, #8]
2000137a:	6053      	str	r3, [r2, #4]
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
2000137c:	687b      	ldr	r3, [r7, #4]
2000137e:	681b      	ldr	r3, [r3, #0]
20001380:	687a      	ldr	r2, [r7, #4]
20001382:	6812      	ldr	r2, [r2, #0]
20001384:	6812      	ldr	r2, [r2, #0]
20001386:	f042 0201 	orr.w	r2, r2, #1
2000138a:	601a      	str	r2, [r3, #0]
    
    /* Set slave select */
    this_spi->hw_reg->SLAVE_SELECT |= ((uint32_t)1 << (uint32_t)slave);
2000138c:	687b      	ldr	r3, [r7, #4]
2000138e:	681b      	ldr	r3, [r3, #0]
20001390:	687a      	ldr	r2, [r7, #4]
20001392:	6812      	ldr	r2, [r2, #0]
20001394:	69d1      	ldr	r1, [r2, #28]
20001396:	78fa      	ldrb	r2, [r7, #3]
20001398:	f04f 0001 	mov.w	r0, #1
2000139c:	fa00 f202 	lsl.w	r2, r0, r2
200013a0:	ea41 0202 	orr.w	r2, r1, r2
200013a4:	61da      	str	r2, [r3, #28]
    /* Reenable interrupts */
    NVIC_EnableIRQ( this_spi->irqn );
200013a6:	687b      	ldr	r3, [r7, #4]
200013a8:	889b      	ldrh	r3, [r3, #4]
200013aa:	b21b      	sxth	r3, r3
200013ac:	4618      	mov	r0, r3
200013ae:	f7ff fd4f 	bl	20000e50 <NVIC_EnableIRQ>
}
200013b2:	f107 0710 	add.w	r7, r7, #16
200013b6:	46bd      	mov	sp, r7
200013b8:	bd80      	pop	{r7, pc}
200013ba:	bf00      	nop

200013bc <MSS_SPI_clear_slave_select>:
void MSS_SPI_clear_slave_select
(
    mss_spi_instance_t * this_spi,
    mss_spi_slave_t slave
)
{
200013bc:	b580      	push	{r7, lr}
200013be:	b084      	sub	sp, #16
200013c0:	af00      	add	r7, sp, #0
200013c2:	6078      	str	r0, [r7, #4]
200013c4:	460b      	mov	r3, r1
200013c6:	70fb      	strb	r3, [r7, #3]
    uint32_t rx_overflow;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
200013c8:	687a      	ldr	r2, [r7, #4]
200013ca:	f243 4390 	movw	r3, #13456	; 0x3490
200013ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
200013d2:	429a      	cmp	r2, r3
200013d4:	d007      	beq.n	200013e6 <MSS_SPI_clear_slave_select+0x2a>
200013d6:	687a      	ldr	r2, [r7, #4]
200013d8:	f243 430c 	movw	r3, #13324	; 0x340c
200013dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200013e0:	429a      	cmp	r2, r3
200013e2:	d000      	beq.n	200013e6 <MSS_SPI_clear_slave_select+0x2a>
200013e4:	be00      	bkpt	0x0000
    
    /* This function is only intended to be used with an SPI master. */
    ASSERT((this_spi->hw_reg->CONTROL & CTRL_MASTER_MASK) == CTRL_MASTER_MASK);
200013e6:	687b      	ldr	r3, [r7, #4]
200013e8:	681b      	ldr	r3, [r3, #0]
200013ea:	681b      	ldr	r3, [r3, #0]
200013ec:	f003 0302 	and.w	r3, r3, #2
200013f0:	2b00      	cmp	r3, #0
200013f2:	d100      	bne.n	200013f6 <MSS_SPI_clear_slave_select+0x3a>
200013f4:	be00      	bkpt	0x0000

    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
200013f6:	687b      	ldr	r3, [r7, #4]
200013f8:	889b      	ldrh	r3, [r3, #4]
200013fa:	b21b      	sxth	r3, r3
200013fc:	4618      	mov	r0, r3
200013fe:	f7ff fd43 	bl	20000e88 <NVIC_DisableIRQ>

    /* Recover from receive overflow. */
    rx_overflow = this_spi->hw_reg->STATUS & RX_OVERFLOW_MASK;
20001402:	687b      	ldr	r3, [r7, #4]
20001404:	681b      	ldr	r3, [r3, #0]
20001406:	689b      	ldr	r3, [r3, #8]
20001408:	f003 0304 	and.w	r3, r3, #4
2000140c:	60fb      	str	r3, [r7, #12]
    if(rx_overflow)
2000140e:	68fb      	ldr	r3, [r7, #12]
20001410:	2b00      	cmp	r3, #0
20001412:	d002      	beq.n	2000141a <MSS_SPI_clear_slave_select+0x5e>
    {
         recover_from_rx_overflow(this_spi);
20001414:	6878      	ldr	r0, [r7, #4]
20001416:	f7ff fe0d 	bl	20001034 <recover_from_rx_overflow>
    }
    
    this_spi->hw_reg->SLAVE_SELECT &= ~((uint32_t)1 << (uint32_t)slave);
2000141a:	687b      	ldr	r3, [r7, #4]
2000141c:	681b      	ldr	r3, [r3, #0]
2000141e:	687a      	ldr	r2, [r7, #4]
20001420:	6812      	ldr	r2, [r2, #0]
20001422:	69d1      	ldr	r1, [r2, #28]
20001424:	78fa      	ldrb	r2, [r7, #3]
20001426:	f04f 0001 	mov.w	r0, #1
2000142a:	fa00 f202 	lsl.w	r2, r0, r2
2000142e:	ea6f 0202 	mvn.w	r2, r2
20001432:	ea01 0202 	and.w	r2, r1, r2
20001436:	61da      	str	r2, [r3, #28]
    /* Reenable interrupts */
    NVIC_EnableIRQ( this_spi->irqn );
20001438:	687b      	ldr	r3, [r7, #4]
2000143a:	889b      	ldrh	r3, [r3, #4]
2000143c:	b21b      	sxth	r3, r3
2000143e:	4618      	mov	r0, r3
20001440:	f7ff fd06 	bl	20000e50 <NVIC_EnableIRQ>
}
20001444:	f107 0710 	add.w	r7, r7, #16
20001448:	46bd      	mov	sp, r7
2000144a:	bd80      	pop	{r7, pc}

2000144c <MSS_SPI_transfer_frame>:
uint32_t MSS_SPI_transfer_frame
(
    mss_spi_instance_t * this_spi,
    uint32_t tx_bits
)
{
2000144c:	b480      	push	{r7}
2000144e:	b087      	sub	sp, #28
20001450:	af00      	add	r7, sp, #0
20001452:	6078      	str	r0, [r7, #4]
20001454:	6039      	str	r1, [r7, #0]
    volatile uint32_t dummy;
    uint32_t rx_fifo_empty;
    uint32_t rx_ready;
    uint32_t tx_done;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20001456:	687a      	ldr	r2, [r7, #4]
20001458:	f243 4390 	movw	r3, #13456	; 0x3490
2000145c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001460:	429a      	cmp	r2, r3
20001462:	d007      	beq.n	20001474 <MSS_SPI_transfer_frame+0x28>
20001464:	687a      	ldr	r2, [r7, #4]
20001466:	f243 430c 	movw	r3, #13324	; 0x340c
2000146a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000146e:	429a      	cmp	r2, r3
20001470:	d000      	beq.n	20001474 <MSS_SPI_transfer_frame+0x28>
20001472:	be00      	bkpt	0x0000
    
    /* This function is only intended to be used with an SPI master. */
    ASSERT((this_spi->hw_reg->CONTROL & CTRL_MASTER_MASK) == CTRL_MASTER_MASK);
20001474:	687b      	ldr	r3, [r7, #4]
20001476:	681b      	ldr	r3, [r3, #0]
20001478:	681b      	ldr	r3, [r3, #0]
2000147a:	f003 0302 	and.w	r3, r3, #2
2000147e:	2b00      	cmp	r3, #0
20001480:	d100      	bne.n	20001484 <MSS_SPI_transfer_frame+0x38>
20001482:	be00      	bkpt	0x0000
    
    /* Ensure single frame transfer selected so interrupts work correctly */
    this_spi->hw_reg->CONTROL = (this_spi->hw_reg->CONTROL & ~TXRXDFCOUNT_MASK)
20001484:	687b      	ldr	r3, [r7, #4]
20001486:	681a      	ldr	r2, [r3, #0]
20001488:	687b      	ldr	r3, [r7, #4]
2000148a:	681b      	ldr	r3, [r3, #0]
2000148c:	6819      	ldr	r1, [r3, #0]
2000148e:	f240 03ff 	movw	r3, #255	; 0xff
20001492:	f6cf 7300 	movt	r3, #65280	; 0xff00
20001496:	ea01 0303 	and.w	r3, r1, r3
2000149a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2000149e:	6013      	str	r3, [r2, #0]
                                | ((uint32_t)1u << TXRXDFCOUNT_SHIFT);

    /* Flush the Tx and Rx FIFOs. Please note this does not have any effect on A2F200. */
    this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
200014a0:	687b      	ldr	r3, [r7, #4]
200014a2:	681b      	ldr	r3, [r3, #0]
200014a4:	687a      	ldr	r2, [r7, #4]
200014a6:	6812      	ldr	r2, [r2, #0]
200014a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
200014aa:	f042 020c 	orr.w	r2, r2, #12
200014ae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Flush Rx FIFO in case we are executing on A2F200. */
    rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
200014b0:	687b      	ldr	r3, [r7, #4]
200014b2:	681b      	ldr	r3, [r3, #0]
200014b4:	689b      	ldr	r3, [r3, #8]
200014b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
200014ba:	60fb      	str	r3, [r7, #12]
    while(0u == rx_fifo_empty)
200014bc:	e00b      	b.n	200014d6 <MSS_SPI_transfer_frame+0x8a>
    {
        dummy = this_spi->hw_reg->RX_DATA;
200014be:	687b      	ldr	r3, [r7, #4]
200014c0:	681b      	ldr	r3, [r3, #0]
200014c2:	691b      	ldr	r3, [r3, #16]
200014c4:	60bb      	str	r3, [r7, #8]
        dummy = dummy;  /* Prevent Lint warning. */
200014c6:	68bb      	ldr	r3, [r7, #8]
200014c8:	60bb      	str	r3, [r7, #8]
        rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
200014ca:	687b      	ldr	r3, [r7, #4]
200014cc:	681b      	ldr	r3, [r3, #0]
200014ce:	689b      	ldr	r3, [r3, #8]
200014d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
200014d4:	60fb      	str	r3, [r7, #12]
    /* Flush the Tx and Rx FIFOs. Please note this does not have any effect on A2F200. */
    this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
    
    /* Flush Rx FIFO in case we are executing on A2F200. */
    rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
    while(0u == rx_fifo_empty)
200014d6:	68fb      	ldr	r3, [r7, #12]
200014d8:	2b00      	cmp	r3, #0
200014da:	d0f0      	beq.n	200014be <MSS_SPI_transfer_frame+0x72>
        dummy = dummy;  /* Prevent Lint warning. */
        rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
    }
    
    /* Send frame. */
    this_spi->hw_reg->TX_DATA = tx_bits;
200014dc:	687b      	ldr	r3, [r7, #4]
200014de:	681b      	ldr	r3, [r3, #0]
200014e0:	683a      	ldr	r2, [r7, #0]
200014e2:	615a      	str	r2, [r3, #20]
    
    /* Wait for frame Tx to complete. */
    tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
200014e4:	687b      	ldr	r3, [r7, #4]
200014e6:	681b      	ldr	r3, [r3, #0]
200014e8:	689b      	ldr	r3, [r3, #8]
200014ea:	f003 0301 	and.w	r3, r3, #1
200014ee:	617b      	str	r3, [r7, #20]
    while(0u == tx_done)
200014f0:	e005      	b.n	200014fe <MSS_SPI_transfer_frame+0xb2>
    {
        tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
200014f2:	687b      	ldr	r3, [r7, #4]
200014f4:	681b      	ldr	r3, [r3, #0]
200014f6:	689b      	ldr	r3, [r3, #8]
200014f8:	f003 0301 	and.w	r3, r3, #1
200014fc:	617b      	str	r3, [r7, #20]
    /* Send frame. */
    this_spi->hw_reg->TX_DATA = tx_bits;
    
    /* Wait for frame Tx to complete. */
    tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
    while(0u == tx_done)
200014fe:	697b      	ldr	r3, [r7, #20]
20001500:	2b00      	cmp	r3, #0
20001502:	d0f6      	beq.n	200014f2 <MSS_SPI_transfer_frame+0xa6>
        tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
    }
    
    /* Read received frame. */
    /* Wait for Rx complete. */
    rx_ready = this_spi->hw_reg->STATUS & RX_DATA_READY_MASK;
20001504:	687b      	ldr	r3, [r7, #4]
20001506:	681b      	ldr	r3, [r3, #0]
20001508:	689b      	ldr	r3, [r3, #8]
2000150a:	f003 0302 	and.w	r3, r3, #2
2000150e:	613b      	str	r3, [r7, #16]
    while(0u == rx_ready)
20001510:	e005      	b.n	2000151e <MSS_SPI_transfer_frame+0xd2>
    {
        rx_ready = this_spi->hw_reg->STATUS & RX_DATA_READY_MASK;
20001512:	687b      	ldr	r3, [r7, #4]
20001514:	681b      	ldr	r3, [r3, #0]
20001516:	689b      	ldr	r3, [r3, #8]
20001518:	f003 0302 	and.w	r3, r3, #2
2000151c:	613b      	str	r3, [r7, #16]
    }
    
    /* Read received frame. */
    /* Wait for Rx complete. */
    rx_ready = this_spi->hw_reg->STATUS & RX_DATA_READY_MASK;
    while(0u == rx_ready)
2000151e:	693b      	ldr	r3, [r7, #16]
20001520:	2b00      	cmp	r3, #0
20001522:	d0f6      	beq.n	20001512 <MSS_SPI_transfer_frame+0xc6>
    {
        rx_ready = this_spi->hw_reg->STATUS & RX_DATA_READY_MASK;
    }
    /* Return Rx data. */
    return( this_spi->hw_reg->RX_DATA );
20001524:	687b      	ldr	r3, [r7, #4]
20001526:	681b      	ldr	r3, [r3, #0]
20001528:	691b      	ldr	r3, [r3, #16]
}
2000152a:	4618      	mov	r0, r3
2000152c:	f107 071c 	add.w	r7, r7, #28
20001530:	46bd      	mov	sp, r7
20001532:	bc80      	pop	{r7}
20001534:	4770      	bx	lr
20001536:	bf00      	nop

20001538 <fill_slave_tx_fifo>:
 */
static void fill_slave_tx_fifo
(
    mss_spi_instance_t * this_spi
)
{
20001538:	b480      	push	{r7}
2000153a:	b085      	sub	sp, #20
2000153c:	af00      	add	r7, sp, #0
2000153e:	6078      	str	r0, [r7, #4]
    uint32_t guard = 0u;
20001540:	f04f 0300 	mov.w	r3, #0
20001544:	60fb      	str	r3, [r7, #12]

    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20001546:	e00e      	b.n	20001566 <fill_slave_tx_fifo+0x2e>
          (this_spi->slave_tx_idx < this_spi->slave_tx_size))
    {
        /* Sending from primary slave transmit buffer */
        this_spi->hw_reg->TX_DATA = this_spi->slave_tx_buffer[this_spi->slave_tx_idx];
20001548:	687b      	ldr	r3, [r7, #4]
2000154a:	681b      	ldr	r3, [r3, #0]
2000154c:	687a      	ldr	r2, [r7, #4]
2000154e:	6891      	ldr	r1, [r2, #8]
20001550:	687a      	ldr	r2, [r7, #4]
20001552:	6912      	ldr	r2, [r2, #16]
20001554:	440a      	add	r2, r1
20001556:	7812      	ldrb	r2, [r2, #0]
20001558:	615a      	str	r2, [r3, #20]
        ++this_spi->slave_tx_idx;
2000155a:	687b      	ldr	r3, [r7, #4]
2000155c:	691b      	ldr	r3, [r3, #16]
2000155e:	f103 0201 	add.w	r2, r3, #1
20001562:	687b      	ldr	r3, [r7, #4]
20001564:	611a      	str	r2, [r3, #16]
    mss_spi_instance_t * this_spi
)
{
    uint32_t guard = 0u;

    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20001566:	687b      	ldr	r3, [r7, #4]
20001568:	681b      	ldr	r3, [r3, #0]
2000156a:	689b      	ldr	r3, [r3, #8]
2000156c:	f403 7380 	and.w	r3, r3, #256	; 0x100
20001570:	2b00      	cmp	r3, #0
20001572:	d105      	bne.n	20001580 <fill_slave_tx_fifo+0x48>
          (this_spi->slave_tx_idx < this_spi->slave_tx_size))
20001574:	687b      	ldr	r3, [r7, #4]
20001576:	691a      	ldr	r2, [r3, #16]
20001578:	687b      	ldr	r3, [r7, #4]
2000157a:	68db      	ldr	r3, [r3, #12]
    mss_spi_instance_t * this_spi
)
{
    uint32_t guard = 0u;

    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
2000157c:	429a      	cmp	r2, r3
2000157e:	d3e3      	bcc.n	20001548 <fill_slave_tx_fifo+0x10>
        /* Sending from primary slave transmit buffer */
        this_spi->hw_reg->TX_DATA = this_spi->slave_tx_buffer[this_spi->slave_tx_idx];
        ++this_spi->slave_tx_idx;
    }

    if(this_spi->slave_tx_idx >= this_spi->slave_tx_size)
20001580:	687b      	ldr	r3, [r7, #4]
20001582:	691a      	ldr	r2, [r3, #16]
20001584:	687b      	ldr	r3, [r7, #4]
20001586:	68db      	ldr	r3, [r3, #12]
20001588:	429a      	cmp	r2, r3
2000158a:	d31c      	bcc.n	200015c6 <fill_slave_tx_fifo+0x8e>
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
2000158c:	e00e      	b.n	200015ac <fill_slave_tx_fifo+0x74>
              (this_spi->resp_buff_tx_idx < this_spi->resp_buff_size))
        {
            /* Sending from command response buffer */
            this_spi->hw_reg->TX_DATA = this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx];
2000158e:	687b      	ldr	r3, [r7, #4]
20001590:	681b      	ldr	r3, [r3, #0]
20001592:	687a      	ldr	r2, [r7, #4]
20001594:	6951      	ldr	r1, [r2, #20]
20001596:	687a      	ldr	r2, [r7, #4]
20001598:	69d2      	ldr	r2, [r2, #28]
2000159a:	440a      	add	r2, r1
2000159c:	7812      	ldrb	r2, [r2, #0]
2000159e:	615a      	str	r2, [r3, #20]
            ++this_spi->resp_buff_tx_idx;
200015a0:	687b      	ldr	r3, [r7, #4]
200015a2:	69db      	ldr	r3, [r3, #28]
200015a4:	f103 0201 	add.w	r2, r3, #1
200015a8:	687b      	ldr	r3, [r7, #4]
200015aa:	61da      	str	r2, [r3, #28]
        ++this_spi->slave_tx_idx;
    }

    if(this_spi->slave_tx_idx >= this_spi->slave_tx_size)
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
200015ac:	687b      	ldr	r3, [r7, #4]
200015ae:	681b      	ldr	r3, [r3, #0]
200015b0:	689b      	ldr	r3, [r3, #8]
200015b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
200015b6:	2b00      	cmp	r3, #0
200015b8:	d105      	bne.n	200015c6 <fill_slave_tx_fifo+0x8e>
              (this_spi->resp_buff_tx_idx < this_spi->resp_buff_size))
200015ba:	687b      	ldr	r3, [r7, #4]
200015bc:	69da      	ldr	r2, [r3, #28]
200015be:	687b      	ldr	r3, [r7, #4]
200015c0:	699b      	ldr	r3, [r3, #24]
        ++this_spi->slave_tx_idx;
    }

    if(this_spi->slave_tx_idx >= this_spi->slave_tx_size)
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
200015c2:	429a      	cmp	r2, r3
200015c4:	d3e3      	bcc.n	2000158e <fill_slave_tx_fifo+0x56>
            this_spi->hw_reg->TX_DATA = this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx];
            ++this_spi->resp_buff_tx_idx;
        }
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
200015c6:	687b      	ldr	r3, [r7, #4]
200015c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200015ca:	2b00      	cmp	r3, #0
200015cc:	d01f      	beq.n	2000160e <fill_slave_tx_fifo+0xd6>
200015ce:	687b      	ldr	r3, [r7, #4]
200015d0:	691a      	ldr	r2, [r3, #16]
200015d2:	687b      	ldr	r3, [r7, #4]
200015d4:	68db      	ldr	r3, [r3, #12]
200015d6:	429a      	cmp	r2, r3
200015d8:	d319      	bcc.n	2000160e <fill_slave_tx_fifo+0xd6>
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
200015da:	687b      	ldr	r3, [r7, #4]
200015dc:	69da      	ldr	r2, [r3, #28]
200015de:	687b      	ldr	r3, [r7, #4]
200015e0:	699b      	ldr	r3, [r3, #24]
            this_spi->hw_reg->TX_DATA = this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx];
            ++this_spi->resp_buff_tx_idx;
        }
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
200015e2:	429a      	cmp	r2, r3
200015e4:	d313      	bcc.n	2000160e <fill_slave_tx_fifo+0xd6>
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
200015e6:	e008      	b.n	200015fa <fill_slave_tx_fifo+0xc2>
              (guard < BIG_FIFO_SIZE))
        {
            /* Nothing left so pad with 0s for consistency */
            this_spi->hw_reg->TX_DATA = 0x00u;
200015e8:	687b      	ldr	r3, [r7, #4]
200015ea:	681b      	ldr	r3, [r3, #0]
200015ec:	f04f 0200 	mov.w	r2, #0
200015f0:	615a      	str	r2, [r3, #20]
             * We use the guard count to cover the unlikely event that we are
             * never seeing the TX FIFO full because the data is being pulled
             * out as fast as we can stuff it in. In this event we never spend
             * more than a full FIFOs worth of time spinning here.
             */
            guard++;
200015f2:	68fb      	ldr	r3, [r7, #12]
200015f4:	f103 0301 	add.w	r3, r3, #1
200015f8:	60fb      	str	r3, [r7, #12]
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
200015fa:	687b      	ldr	r3, [r7, #4]
200015fc:	681b      	ldr	r3, [r3, #0]
200015fe:	689b      	ldr	r3, [r3, #8]
20001600:	f403 7380 	and.w	r3, r3, #256	; 0x100
20001604:	2b00      	cmp	r3, #0
20001606:	d102      	bne.n	2000160e <fill_slave_tx_fifo+0xd6>
20001608:	68fb      	ldr	r3, [r7, #12]
2000160a:	2b1f      	cmp	r3, #31
2000160c:	d9ec      	bls.n	200015e8 <fill_slave_tx_fifo+0xb0>
             */
            guard++;
        }
    }

}
2000160e:	f107 0714 	add.w	r7, r7, #20
20001612:	46bd      	mov	sp, r7
20001614:	bc80      	pop	{r7}
20001616:	4770      	bx	lr

20001618 <read_slave_rx_fifo>:
 */
static void read_slave_rx_fifo
(
    mss_spi_instance_t * this_spi
)
{
20001618:	b580      	push	{r7, lr}
2000161a:	b084      	sub	sp, #16
2000161c:	af00      	add	r7, sp, #0
2000161e:	6078      	str	r0, [r7, #4]
    volatile uint32_t rx_frame;
    
    if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
20001620:	687b      	ldr	r3, [r7, #4]
20001622:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
20001626:	2b02      	cmp	r3, #2
20001628:	d115      	bne.n	20001656 <read_slave_rx_fifo+0x3e>
    {
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
2000162a:	e00c      	b.n	20001646 <read_slave_rx_fifo+0x2e>
        {
            /* Single frame handling mode. */
            rx_frame = this_spi->hw_reg->RX_DATA;
2000162c:	687b      	ldr	r3, [r7, #4]
2000162e:	681b      	ldr	r3, [r3, #0]
20001630:	691b      	ldr	r3, [r3, #16]
20001632:	60fb      	str	r3, [r7, #12]
            if(0u != this_spi->frame_rx_handler)
20001634:	687b      	ldr	r3, [r7, #4]
20001636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20001638:	2b00      	cmp	r3, #0
2000163a:	d004      	beq.n	20001646 <read_slave_rx_fifo+0x2e>
            {
                this_spi->frame_rx_handler( rx_frame );
2000163c:	687b      	ldr	r3, [r7, #4]
2000163e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20001640:	68fa      	ldr	r2, [r7, #12]
20001642:	4610      	mov	r0, r2
20001644:	4798      	blx	r3
{
    volatile uint32_t rx_frame;
    
    if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
    {
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
20001646:	687b      	ldr	r3, [r7, #4]
20001648:	681b      	ldr	r3, [r3, #0]
2000164a:	689b      	ldr	r3, [r3, #8]
2000164c:	f003 0340 	and.w	r3, r3, #64	; 0x40
20001650:	2b00      	cmp	r3, #0
20001652:	d0eb      	beq.n	2000162c <read_slave_rx_fifo+0x14>
20001654:	e032      	b.n	200016bc <read_slave_rx_fifo+0xa4>
            {
                this_spi->frame_rx_handler( rx_frame );
            }
        }
    }
    else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
20001656:	687b      	ldr	r3, [r7, #4]
20001658:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
2000165c:	2b01      	cmp	r3, #1
2000165e:	d125      	bne.n	200016ac <read_slave_rx_fifo+0x94>
    {
        /* Block handling mode. */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
20001660:	e017      	b.n	20001692 <read_slave_rx_fifo+0x7a>
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
20001662:	687b      	ldr	r3, [r7, #4]
20001664:	681b      	ldr	r3, [r3, #0]
20001666:	691b      	ldr	r3, [r3, #16]
20001668:	60fb      	str	r3, [r7, #12]
            if(this_spi->slave_rx_idx < this_spi->slave_rx_size)
2000166a:	687b      	ldr	r3, [r7, #4]
2000166c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2000166e:	687b      	ldr	r3, [r7, #4]
20001670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20001672:	429a      	cmp	r2, r3
20001674:	d207      	bcs.n	20001686 <read_slave_rx_fifo+0x6e>
            {
                this_spi->slave_rx_buffer[this_spi->slave_rx_idx] = (uint8_t)rx_frame;
20001676:	687b      	ldr	r3, [r7, #4]
20001678:	6a9a      	ldr	r2, [r3, #40]	; 0x28
2000167a:	687b      	ldr	r3, [r7, #4]
2000167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000167e:	4413      	add	r3, r2
20001680:	68fa      	ldr	r2, [r7, #12]
20001682:	b2d2      	uxtb	r2, r2
20001684:	701a      	strb	r2, [r3, #0]
            }

            ++this_spi->slave_rx_idx;
20001686:	687b      	ldr	r3, [r7, #4]
20001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000168a:	f103 0201 	add.w	r2, r3, #1
2000168e:	687b      	ldr	r3, [r7, #4]
20001690:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
    else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
    {
        /* Block handling mode. */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
20001692:	687b      	ldr	r3, [r7, #4]
20001694:	681b      	ldr	r3, [r3, #0]
20001696:	689b      	ldr	r3, [r3, #8]
20001698:	f003 0340 	and.w	r3, r3, #64	; 0x40
2000169c:	2b00      	cmp	r3, #0
2000169e:	d0e0      	beq.n	20001662 <read_slave_rx_fifo+0x4a>
200016a0:	e00c      	b.n	200016bc <read_slave_rx_fifo+0xa4>
    else
    {
        /* Should not happen... Just purge FIFO */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
200016a2:	687b      	ldr	r3, [r7, #4]
200016a4:	681b      	ldr	r3, [r3, #0]
200016a6:	691b      	ldr	r3, [r3, #16]
200016a8:	60fb      	str	r3, [r7, #12]
200016aa:	e000      	b.n	200016ae <read_slave_rx_fifo+0x96>
        }
    }
    else
    {
        /* Should not happen... Just purge FIFO */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
200016ac:	bf00      	nop
200016ae:	687b      	ldr	r3, [r7, #4]
200016b0:	681b      	ldr	r3, [r3, #0]
200016b2:	689b      	ldr	r3, [r3, #8]
200016b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
200016b8:	2b00      	cmp	r3, #0
200016ba:	d0f2      	beq.n	200016a2 <read_slave_rx_fifo+0x8a>
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
        }
    }
}
200016bc:	f107 0710 	add.w	r7, r7, #16
200016c0:	46bd      	mov	sp, r7
200016c2:	bd80      	pop	{r7, pc}

200016c4 <mss_spi_isr>:
 */
static void mss_spi_isr
(
    mss_spi_instance_t * this_spi
)
{    
200016c4:	b580      	push	{r7, lr}
200016c6:	b086      	sub	sp, #24
200016c8:	af00      	add	r7, sp, #0
200016ca:	6078      	str	r0, [r7, #4]
    volatile uint32_t rx_frame;
    __I  uint32_t *this_mis = &this_spi->hw_reg->MIS;
200016cc:	687b      	ldr	r3, [r7, #4]
200016ce:	681b      	ldr	r3, [r3, #0]
200016d0:	f103 0320 	add.w	r3, r3, #32
200016d4:	613b      	str	r3, [r7, #16]

    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
200016d6:	687a      	ldr	r2, [r7, #4]
200016d8:	f243 4390 	movw	r3, #13456	; 0x3490
200016dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200016e0:	429a      	cmp	r2, r3
200016e2:	d007      	beq.n	200016f4 <mss_spi_isr+0x30>
200016e4:	687a      	ldr	r2, [r7, #4]
200016e6:	f243 430c 	movw	r3, #13324	; 0x340c
200016ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
200016ee:	429a      	cmp	r2, r3
200016f0:	d000      	beq.n	200016f4 <mss_spi_isr+0x30>
200016f2:	be00      	bkpt	0x0000
  
    if(0u != (*this_mis & RXDONE_IRQ_MASK))
200016f4:	693b      	ldr	r3, [r7, #16]
200016f6:	681b      	ldr	r3, [r3, #0]
200016f8:	f003 0302 	and.w	r3, r3, #2
200016fc:	2b00      	cmp	r3, #0
200016fe:	d052      	beq.n	200017a6 <mss_spi_isr+0xe2>
    {
        if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
20001700:	687b      	ldr	r3, [r7, #4]
20001702:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
20001706:	2b02      	cmp	r3, #2
20001708:	d115      	bne.n	20001736 <mss_spi_isr+0x72>
        {
            /* Single frame handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
2000170a:	e00c      	b.n	20001726 <mss_spi_isr+0x62>
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
2000170c:	687b      	ldr	r3, [r7, #4]
2000170e:	681b      	ldr	r3, [r3, #0]
20001710:	691b      	ldr	r3, [r3, #16]
20001712:	60fb      	str	r3, [r7, #12]
                if(0u != this_spi->frame_rx_handler)
20001714:	687b      	ldr	r3, [r7, #4]
20001716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20001718:	2b00      	cmp	r3, #0
2000171a:	d004      	beq.n	20001726 <mss_spi_isr+0x62>
                {
                    this_spi->frame_rx_handler( rx_frame );
2000171c:	687b      	ldr	r3, [r7, #4]
2000171e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20001720:	68fa      	ldr	r2, [r7, #12]
20001722:	4610      	mov	r0, r2
20001724:	4798      	blx	r3
    if(0u != (*this_mis & RXDONE_IRQ_MASK))
    {
        if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
        {
            /* Single frame handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
20001726:	687b      	ldr	r3, [r7, #4]
20001728:	681b      	ldr	r3, [r3, #0]
2000172a:	689b      	ldr	r3, [r3, #8]
2000172c:	f003 0340 	and.w	r3, r3, #64	; 0x40
20001730:	2b00      	cmp	r3, #0
20001732:	d0eb      	beq.n	2000170c <mss_spi_isr+0x48>
20001734:	e032      	b.n	2000179c <mss_spi_isr+0xd8>
                {
                    this_spi->frame_rx_handler( rx_frame );
                }
            }
        }
        else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
20001736:	687b      	ldr	r3, [r7, #4]
20001738:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
2000173c:	2b01      	cmp	r3, #1
2000173e:	d125      	bne.n	2000178c <mss_spi_isr+0xc8>
        {
            /* Block handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
20001740:	e017      	b.n	20001772 <mss_spi_isr+0xae>
            {
                rx_frame = this_spi->hw_reg->RX_DATA;                /* Read from FIFO irrespective */
20001742:	687b      	ldr	r3, [r7, #4]
20001744:	681b      	ldr	r3, [r3, #0]
20001746:	691b      	ldr	r3, [r3, #16]
20001748:	60fb      	str	r3, [r7, #12]
                if(this_spi->slave_rx_idx < this_spi->slave_rx_size) /* Write to array if required */
2000174a:	687b      	ldr	r3, [r7, #4]
2000174c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2000174e:	687b      	ldr	r3, [r7, #4]
20001750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20001752:	429a      	cmp	r2, r3
20001754:	d207      	bcs.n	20001766 <mss_spi_isr+0xa2>
                {
                    this_spi->slave_rx_buffer[this_spi->slave_rx_idx] = (uint8_t)rx_frame;
20001756:	687b      	ldr	r3, [r7, #4]
20001758:	6a9a      	ldr	r2, [r3, #40]	; 0x28
2000175a:	687b      	ldr	r3, [r7, #4]
2000175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000175e:	4413      	add	r3, r2
20001760:	68fa      	ldr	r2, [r7, #12]
20001762:	b2d2      	uxtb	r2, r2
20001764:	701a      	strb	r2, [r3, #0]
                }

                ++this_spi->slave_rx_idx;            
20001766:	687b      	ldr	r3, [r7, #4]
20001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000176a:	f103 0201 	add.w	r2, r3, #1
2000176e:	687b      	ldr	r3, [r7, #4]
20001770:	631a      	str	r2, [r3, #48]	; 0x30
            }
        }
        else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
        {
            /* Block handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
20001772:	687b      	ldr	r3, [r7, #4]
20001774:	681b      	ldr	r3, [r3, #0]
20001776:	689b      	ldr	r3, [r3, #8]
20001778:	f003 0340 	and.w	r3, r3, #64	; 0x40
2000177c:	2b00      	cmp	r3, #0
2000177e:	d0e0      	beq.n	20001742 <mss_spi_isr+0x7e>
20001780:	e00c      	b.n	2000179c <mss_spi_isr+0xd8>
        else
        {
            /* No slave handling in place so just purge FIFO */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
20001782:	687b      	ldr	r3, [r7, #4]
20001784:	681b      	ldr	r3, [r3, #0]
20001786:	691b      	ldr	r3, [r3, #16]
20001788:	60fb      	str	r3, [r7, #12]
2000178a:	e000      	b.n	2000178e <mss_spi_isr+0xca>
            }
        }
        else
        {
            /* No slave handling in place so just purge FIFO */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
2000178c:	bf00      	nop
2000178e:	687b      	ldr	r3, [r7, #4]
20001790:	681b      	ldr	r3, [r3, #0]
20001792:	689b      	ldr	r3, [r3, #8]
20001794:	f003 0340 	and.w	r3, r3, #64	; 0x40
20001798:	2b00      	cmp	r3, #0
2000179a:	d0f2      	beq.n	20001782 <mss_spi_isr+0xbe>
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
            }
        }

        this_spi->hw_reg->INT_CLEAR = RXDONE_IRQ_MASK;
2000179c:	687b      	ldr	r3, [r7, #4]
2000179e:	681b      	ldr	r3, [r3, #0]
200017a0:	f04f 0202 	mov.w	r2, #2
200017a4:	60da      	str	r2, [r3, #12]
    }

   /* Handle transmit. */
    if(0u != (*this_mis & TXDONE_IRQ_MASK))
200017a6:	693b      	ldr	r3, [r7, #16]
200017a8:	681b      	ldr	r3, [r3, #0]
200017aa:	f003 0301 	and.w	r3, r3, #1
200017ae:	b2db      	uxtb	r3, r3
200017b0:	2b00      	cmp	r3, #0
200017b2:	d012      	beq.n	200017da <mss_spi_isr+0x116>
    {
        if( MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode )
200017b4:	687b      	ldr	r3, [r7, #4]
200017b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
200017ba:	2b02      	cmp	r3, #2
200017bc:	d105      	bne.n	200017ca <mss_spi_isr+0x106>
        {
           /* Reload slave tx frame into Tx data register. */
            this_spi->hw_reg->TX_DATA = this_spi->slave_tx_frame;
200017be:	687b      	ldr	r3, [r7, #4]
200017c0:	681b      	ldr	r3, [r3, #0]
200017c2:	687a      	ldr	r2, [r7, #4]
200017c4:	6f92      	ldr	r2, [r2, #120]	; 0x78
200017c6:	615a      	str	r2, [r3, #20]
200017c8:	e002      	b.n	200017d0 <mss_spi_isr+0x10c>
        }
        else /* Must be block mode so load FIFO to the max */
        {
            fill_slave_tx_fifo(this_spi);
200017ca:	6878      	ldr	r0, [r7, #4]
200017cc:	f7ff feb4 	bl	20001538 <fill_slave_tx_fifo>
        }

        this_spi->hw_reg->INT_CLEAR = TXDONE_IRQ_MASK;
200017d0:	687b      	ldr	r3, [r7, #4]
200017d2:	681b      	ldr	r3, [r3, #0]
200017d4:	f04f 0201 	mov.w	r2, #1
200017d8:	60da      	str	r2, [r3, #12]
    }
    
    /* Handle command interrupt. */
    if(0u != (*this_mis & CMD_IRQ_MASK))
200017da:	693b      	ldr	r3, [r7, #16]
200017dc:	681b      	ldr	r3, [r3, #0]
200017de:	f003 0310 	and.w	r3, r3, #16
200017e2:	2b00      	cmp	r3, #0
200017e4:	d023      	beq.n	2000182e <mss_spi_isr+0x16a>
    {
        read_slave_rx_fifo(this_spi);
200017e6:	6878      	ldr	r0, [r7, #4]
200017e8:	f7ff ff16 	bl	20001618 <read_slave_rx_fifo>
        
        /*
         * Call the command handler if one exists.
         */
        if(0u != this_spi->cmd_handler)
200017ec:	687b      	ldr	r3, [r7, #4]
200017ee:	6a1b      	ldr	r3, [r3, #32]
200017f0:	2b00      	cmp	r3, #0
200017f2:	d00b      	beq.n	2000180c <mss_spi_isr+0x148>
        {
            (*this_spi->cmd_handler)(this_spi->slave_rx_buffer, this_spi->slave_rx_idx);
200017f4:	687b      	ldr	r3, [r7, #4]
200017f6:	6a1b      	ldr	r3, [r3, #32]
200017f8:	687a      	ldr	r2, [r7, #4]
200017fa:	6a91      	ldr	r1, [r2, #40]	; 0x28
200017fc:	687a      	ldr	r2, [r7, #4]
200017fe:	6b12      	ldr	r2, [r2, #48]	; 0x30
20001800:	4608      	mov	r0, r1
20001802:	4611      	mov	r1, r2
20001804:	4798      	blx	r3
            fill_slave_tx_fifo(this_spi);
20001806:	6878      	ldr	r0, [r7, #4]
20001808:	f7ff fe96 	bl	20001538 <fill_slave_tx_fifo>
        }
        /* Set cmd_done to indicate it is now safe to 0 fill TX FIFO */
        this_spi->cmd_done = 1u;
2000180c:	687b      	ldr	r3, [r7, #4]
2000180e:	f04f 0201 	mov.w	r2, #1
20001812:	625a      	str	r2, [r3, #36]	; 0x24
        /* Disable command interrupt until slave select becomes de-asserted to avoid retriggering. */
        this_spi->hw_reg->CONTROL2 &= ~(uint32_t)C2_ENABLE_CMD_IRQ_MASK;
20001814:	687b      	ldr	r3, [r7, #4]
20001816:	681b      	ldr	r3, [r3, #0]
20001818:	687a      	ldr	r2, [r7, #4]
2000181a:	6812      	ldr	r2, [r2, #0]
2000181c:	6a92      	ldr	r2, [r2, #40]	; 0x28
2000181e:	f022 0210 	bic.w	r2, r2, #16
20001822:	629a      	str	r2, [r3, #40]	; 0x28
        this_spi->hw_reg->INT_CLEAR = CMD_IRQ_MASK;
20001824:	687b      	ldr	r3, [r7, #4]
20001826:	681b      	ldr	r3, [r3, #0]
20001828:	f04f 0210 	mov.w	r2, #16
2000182c:	60da      	str	r2, [r3, #12]
    }

    if(0u != (*this_mis & RXOVFLOW_IRQ_MASK))
2000182e:	693b      	ldr	r3, [r7, #16]
20001830:	681b      	ldr	r3, [r3, #0]
20001832:	f003 0304 	and.w	r3, r3, #4
20001836:	2b00      	cmp	r3, #0
20001838:	d00f      	beq.n	2000185a <mss_spi_isr+0x196>
    {
        /*
         * Receive overflow, not a lot we can do for this. Reset the receive
         *  FIFO, clear the interrupt and hope it doesn't happen again...
         */
        this_spi->hw_reg->COMMAND |= RX_FIFO_RESET_MASK;
2000183a:	687b      	ldr	r3, [r7, #4]
2000183c:	681b      	ldr	r3, [r3, #0]
2000183e:	687a      	ldr	r2, [r7, #4]
20001840:	6812      	ldr	r2, [r2, #0]
20001842:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
20001844:	f042 0204 	orr.w	r2, r2, #4
20001848:	62da      	str	r2, [r3, #44]	; 0x2c
        recover_from_rx_overflow(this_spi);
2000184a:	6878      	ldr	r0, [r7, #4]
2000184c:	f7ff fbf2 	bl	20001034 <recover_from_rx_overflow>
        this_spi->hw_reg->INT_CLEAR = RXOVFLOW_IRQ_MASK;
20001850:	687b      	ldr	r3, [r7, #4]
20001852:	681b      	ldr	r3, [r3, #0]
20001854:	f04f 0204 	mov.w	r2, #4
20001858:	60da      	str	r2, [r3, #12]
     * slave TX FIFO data setup (if there is one).
     * In block mode this will probably not be very successful as we will
     * be out of synch with the master but the reset on SSEND will hopefully
     * take care of that for the next transfer.
     */
    if(0u != (*this_mis & TXURUN_IRQ_MASK))
2000185a:	693b      	ldr	r3, [r7, #16]
2000185c:	681b      	ldr	r3, [r3, #0]
2000185e:	f003 0308 	and.w	r3, r3, #8
20001862:	2b00      	cmp	r3, #0
20001864:	d031      	beq.n	200018ca <mss_spi_isr+0x206>
    {
        this_spi->hw_reg->COMMAND |= TX_FIFO_RESET_MASK;
20001866:	687b      	ldr	r3, [r7, #4]
20001868:	681b      	ldr	r3, [r3, #0]
2000186a:	687a      	ldr	r2, [r7, #4]
2000186c:	6812      	ldr	r2, [r2, #0]
2000186e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
20001870:	f042 0208 	orr.w	r2, r2, #8
20001874:	62da      	str	r2, [r3, #44]	; 0x2c
        if( MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode )
20001876:	687b      	ldr	r3, [r7, #4]
20001878:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
2000187c:	2b02      	cmp	r3, #2
2000187e:	d113      	bne.n	200018a8 <mss_spi_isr+0x1e4>
        {
            this_spi->hw_reg->CONTROL = (this_spi->hw_reg->CONTROL & ~TXRXDFCOUNT_MASK)
20001880:	687b      	ldr	r3, [r7, #4]
20001882:	681a      	ldr	r2, [r3, #0]
20001884:	687b      	ldr	r3, [r7, #4]
20001886:	681b      	ldr	r3, [r3, #0]
20001888:	6819      	ldr	r1, [r3, #0]
2000188a:	f240 03ff 	movw	r3, #255	; 0xff
2000188e:	f6cf 7300 	movt	r3, #65280	; 0xff00
20001892:	ea01 0303 	and.w	r3, r1, r3
20001896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2000189a:	6013      	str	r3, [r2, #0]
                                        | ((uint32_t)1u << TXRXDFCOUNT_SHIFT);
           /* Reload slave tx frame into Tx data register. */
            this_spi->hw_reg->TX_DATA = this_spi->slave_tx_frame;
2000189c:	687b      	ldr	r3, [r7, #4]
2000189e:	681b      	ldr	r3, [r3, #0]
200018a0:	687a      	ldr	r2, [r7, #4]
200018a2:	6f92      	ldr	r2, [r2, #120]	; 0x78
200018a4:	615a      	str	r2, [r3, #20]
200018a6:	e00b      	b.n	200018c0 <mss_spi_isr+0x1fc>
        }
        else if( MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode )
200018a8:	687b      	ldr	r3, [r7, #4]
200018aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
200018ae:	2b01      	cmp	r3, #1
200018b0:	d106      	bne.n	200018c0 <mss_spi_isr+0x1fc>
        {
            /* Block mode so reload FIFO to the max */
            this_spi->slave_tx_idx = 0u;
200018b2:	687b      	ldr	r3, [r7, #4]
200018b4:	f04f 0200 	mov.w	r2, #0
200018b8:	611a      	str	r2, [r3, #16]
            fill_slave_tx_fifo(this_spi);
200018ba:	6878      	ldr	r0, [r7, #4]
200018bc:	f7ff fe3c 	bl	20001538 <fill_slave_tx_fifo>
        else
        {
            /* Not frame or block mode? Can't do anything here... */
        }

        this_spi->hw_reg->INT_CLEAR = TXURUN_IRQ_MASK;
200018c0:	687b      	ldr	r3, [r7, #4]
200018c2:	681b      	ldr	r3, [r3, #0]
200018c4:	f04f 0208 	mov.w	r2, #8
200018c8:	60da      	str	r2, [r3, #12]
    /*
     * Handle slave select becoming de-asserted. Only enables if
     * we are operating in block mode, in frame mode we do everything
     * in the receive and transmit interrupt handlers.
     */
    if(0u != (*this_mis & SSEND_IRQ_MASK))
200018ca:	693b      	ldr	r3, [r7, #16]
200018cc:	681b      	ldr	r3, [r3, #0]
200018ce:	f003 0320 	and.w	r3, r3, #32
200018d2:	2b00      	cmp	r3, #0
200018d4:	d049      	beq.n	2000196a <mss_spi_isr+0x2a6>
    {
        uint32_t rx_size;
        
        read_slave_rx_fifo(this_spi);
200018d6:	6878      	ldr	r0, [r7, #4]
200018d8:	f7ff fe9e 	bl	20001618 <read_slave_rx_fifo>
        rx_size = this_spi->slave_rx_idx;
200018dc:	687b      	ldr	r3, [r7, #4]
200018de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200018e0:	617b      	str	r3, [r7, #20]
        /*
         * Re-enable command interrupt if required and clear all the response
         * buffer state in readiness for next response. This must be done
         * before reloading the TX FIFO.
         */
        if(0u != this_spi->cmd_handler)
200018e2:	687b      	ldr	r3, [r7, #4]
200018e4:	6a1b      	ldr	r3, [r3, #32]
200018e6:	2b00      	cmp	r3, #0
200018e8:	d01c      	beq.n	20001924 <mss_spi_isr+0x260>
        {
            this_spi->cmd_done = 0u;
200018ea:	687b      	ldr	r3, [r7, #4]
200018ec:	f04f 0200 	mov.w	r2, #0
200018f0:	625a      	str	r2, [r3, #36]	; 0x24
            this_spi->resp_tx_buffer = 0u;
200018f2:	687b      	ldr	r3, [r7, #4]
200018f4:	f04f 0200 	mov.w	r2, #0
200018f8:	615a      	str	r2, [r3, #20]
            this_spi->resp_buff_size = 0u;
200018fa:	687b      	ldr	r3, [r7, #4]
200018fc:	f04f 0200 	mov.w	r2, #0
20001900:	619a      	str	r2, [r3, #24]
            this_spi->resp_buff_tx_idx = 0u;
20001902:	687b      	ldr	r3, [r7, #4]
20001904:	f04f 0200 	mov.w	r2, #0
20001908:	61da      	str	r2, [r3, #28]
            this_spi->hw_reg->INT_CLEAR = CMD_IRQ_MASK;
2000190a:	687b      	ldr	r3, [r7, #4]
2000190c:	681b      	ldr	r3, [r3, #0]
2000190e:	f04f 0210 	mov.w	r2, #16
20001912:	60da      	str	r2, [r3, #12]
            this_spi->hw_reg->CONTROL2 |= C2_ENABLE_CMD_IRQ_MASK;
20001914:	687b      	ldr	r3, [r7, #4]
20001916:	681b      	ldr	r3, [r3, #0]
20001918:	687a      	ldr	r2, [r7, #4]
2000191a:	6812      	ldr	r2, [r2, #0]
2000191c:	6a92      	ldr	r2, [r2, #40]	; 0x28
2000191e:	f042 0210 	orr.w	r2, r2, #16
20001922:	629a      	str	r2, [r3, #40]	; 0x28
        /* 
         * Reset the transmit index to 0 to restart transmit at the start of the
         * transmit buffer in the next transaction. This also requires flushing
         * the Tx FIFO and refilling it with the start of Tx data buffer.
         */
        this_spi->slave_tx_idx = 0u;
20001924:	687b      	ldr	r3, [r7, #4]
20001926:	f04f 0200 	mov.w	r2, #0
2000192a:	611a      	str	r2, [r3, #16]
        this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
2000192c:	687b      	ldr	r3, [r7, #4]
2000192e:	681b      	ldr	r3, [r3, #0]
20001930:	687a      	ldr	r2, [r7, #4]
20001932:	6812      	ldr	r2, [r2, #0]
20001934:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
20001936:	f042 020c 	orr.w	r2, r2, #12
2000193a:	62da      	str	r2, [r3, #44]	; 0x2c
        fill_slave_tx_fifo(this_spi);
2000193c:	6878      	ldr	r0, [r7, #4]
2000193e:	f7ff fdfb 	bl	20001538 <fill_slave_tx_fifo>
        
        /* Prepare to receive next packet. */
        this_spi->slave_rx_idx = 0u;
20001942:	687b      	ldr	r3, [r7, #4]
20001944:	f04f 0200 	mov.w	r2, #0
20001948:	631a      	str	r2, [r3, #48]	; 0x30
        /*
         * Call the receive handler if one exists.
         */
        if(0u != this_spi->block_rx_handler)
2000194a:	687b      	ldr	r3, [r7, #4]
2000194c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
2000194e:	2b00      	cmp	r3, #0
20001950:	d006      	beq.n	20001960 <mss_spi_isr+0x29c>
        {
            (*this_spi->block_rx_handler)(this_spi->slave_rx_buffer, rx_size);
20001952:	687b      	ldr	r3, [r7, #4]
20001954:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
20001956:	687a      	ldr	r2, [r7, #4]
20001958:	6a92      	ldr	r2, [r2, #40]	; 0x28
2000195a:	4610      	mov	r0, r2
2000195c:	6979      	ldr	r1, [r7, #20]
2000195e:	4798      	blx	r3
        }
        
        this_spi->hw_reg->INT_CLEAR = SSEND_IRQ_MASK;
20001960:	687b      	ldr	r3, [r7, #4]
20001962:	681b      	ldr	r3, [r3, #0]
20001964:	f04f 0220 	mov.w	r2, #32
20001968:	60da      	str	r2, [r3, #12]
    }
}
2000196a:	f107 0718 	add.w	r7, r7, #24
2000196e:	46bd      	mov	sp, r7
20001970:	bd80      	pop	{r7, pc}
20001972:	bf00      	nop

20001974 <SPI0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void SPI0_IRQHandler(void)
#else
void SPI0_IRQHandler( void )
#endif
{
20001974:	4668      	mov	r0, sp
20001976:	f020 0107 	bic.w	r1, r0, #7
2000197a:	468d      	mov	sp, r1
2000197c:	b589      	push	{r0, r3, r7, lr}
2000197e:	af00      	add	r7, sp, #0
    mss_spi_isr(&g_mss_spi0);
20001980:	f243 4090 	movw	r0, #13456	; 0x3490
20001984:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001988:	f7ff fe9c 	bl	200016c4 <mss_spi_isr>
    NVIC_ClearPendingIRQ(SPI0_IRQn);
2000198c:	f04f 000c 	mov.w	r0, #12
20001990:	f7ff fa98 	bl	20000ec4 <NVIC_ClearPendingIRQ>
}
20001994:	46bd      	mov	sp, r7
20001996:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000199a:	4685      	mov	sp, r0
2000199c:	4770      	bx	lr
2000199e:	bf00      	nop

200019a0 <SPI1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void SPI1_IRQHandler(void)
#else
void SPI1_IRQHandler(void)
#endif
{
200019a0:	4668      	mov	r0, sp
200019a2:	f020 0107 	bic.w	r1, r0, #7
200019a6:	468d      	mov	sp, r1
200019a8:	b589      	push	{r0, r3, r7, lr}
200019aa:	af00      	add	r7, sp, #0
    mss_spi_isr(&g_mss_spi1);
200019ac:	f243 400c 	movw	r0, #13324	; 0x340c
200019b0:	f2c2 0000 	movt	r0, #8192	; 0x2000
200019b4:	f7ff fe86 	bl	200016c4 <mss_spi_isr>
    NVIC_ClearPendingIRQ(SPI1_IRQn);
200019b8:	f04f 000d 	mov.w	r0, #13
200019bc:	f7ff fa82 	bl	20000ec4 <NVIC_ClearPendingIRQ>
}
200019c0:	46bd      	mov	sp, r7
200019c2:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200019c6:	4685      	mov	sp, r0
200019c8:	4770      	bx	lr
200019ca:	bf00      	nop

200019cc <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
200019cc:	b480      	push	{r7}
200019ce:	b083      	sub	sp, #12
200019d0:	af00      	add	r7, sp, #0
200019d2:	4603      	mov	r3, r0
200019d4:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
200019d6:	f24e 1300 	movw	r3, #57600	; 0xe100
200019da:	f2ce 0300 	movt	r3, #57344	; 0xe000
200019de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
200019e2:	ea4f 1252 	mov.w	r2, r2, lsr #5
200019e6:	88f9      	ldrh	r1, [r7, #6]
200019e8:	f001 011f 	and.w	r1, r1, #31
200019ec:	f04f 0001 	mov.w	r0, #1
200019f0:	fa00 f101 	lsl.w	r1, r0, r1
200019f4:	f102 0260 	add.w	r2, r2, #96	; 0x60
200019f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
200019fc:	f107 070c 	add.w	r7, r7, #12
20001a00:	46bd      	mov	sp, r7
20001a02:	bc80      	pop	{r7}
20001a04:	4770      	bx	lr
20001a06:	bf00      	nop

20001a08 <MSS_GPIO_init>:
/*-------------------------------------------------------------------------*//**
 * MSS_GPIO_init
 * See "mss_gpio.h" for details of how to use this function.
 */
void MSS_GPIO_init( void )
{
20001a08:	b580      	push	{r7, lr}
20001a0a:	b082      	sub	sp, #8
20001a0c:	af00      	add	r7, sp, #0
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
20001a0e:	f242 0300 	movw	r3, #8192	; 0x2000
20001a12:	f2ce 0304 	movt	r3, #57348	; 0xe004
20001a16:	f242 0200 	movw	r2, #8192	; 0x2000
20001a1a:	f2ce 0204 	movt	r2, #57348	; 0xe004
20001a1e:	6b12      	ldr	r2, [r2, #48]	; 0x30
20001a20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
20001a24:	631a      	str	r2, [r3, #48]	; 0x30
    /* Clear any previously pended MSS GPIO interrupt */
    for ( i = 0U; i < NB_OF_GPIO; ++i )
20001a26:	f04f 0300 	mov.w	r3, #0
20001a2a:	607b      	str	r3, [r7, #4]
20001a2c:	e00e      	b.n	20001a4c <MSS_GPIO_init+0x44>
    {
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[i] );
20001a2e:	687a      	ldr	r2, [r7, #4]
20001a30:	f243 23b4 	movw	r3, #12980	; 0x32b4
20001a34:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001a38:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
20001a3c:	b21b      	sxth	r3, r3
20001a3e:	4618      	mov	r0, r3
20001a40:	f7ff ffc4 	bl	200019cc <NVIC_ClearPendingIRQ>
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
    /* Clear any previously pended MSS GPIO interrupt */
    for ( i = 0U; i < NB_OF_GPIO; ++i )
20001a44:	687b      	ldr	r3, [r7, #4]
20001a46:	f103 0301 	add.w	r3, r3, #1
20001a4a:	607b      	str	r3, [r7, #4]
20001a4c:	687b      	ldr	r3, [r7, #4]
20001a4e:	2b1f      	cmp	r3, #31
20001a50:	d9ed      	bls.n	20001a2e <MSS_GPIO_init+0x26>
    {
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[i] );
    }
    /* Take MSS GPIO hardware out of reset. */
    SYSREG->SOFT_RST_CR &= ~SYSREG_GPIO_SOFTRESET_MASK;
20001a52:	f242 0300 	movw	r3, #8192	; 0x2000
20001a56:	f2ce 0304 	movt	r3, #57348	; 0xe004
20001a5a:	f242 0200 	movw	r2, #8192	; 0x2000
20001a5e:	f2ce 0204 	movt	r2, #57348	; 0xe004
20001a62:	6b12      	ldr	r2, [r2, #48]	; 0x30
20001a64:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
20001a68:	631a      	str	r2, [r3, #48]	; 0x30
}
20001a6a:	f107 0708 	add.w	r7, r7, #8
20001a6e:	46bd      	mov	sp, r7
20001a70:	bd80      	pop	{r7, pc}
20001a72:	bf00      	nop

20001a74 <MSS_GPIO_config>:
void MSS_GPIO_config
(
    mss_gpio_id_t port_id,
    uint32_t config
)
{
20001a74:	b480      	push	{r7}
20001a76:	b085      	sub	sp, #20
20001a78:	af00      	add	r7, sp, #0
20001a7a:	4603      	mov	r3, r0
20001a7c:	6039      	str	r1, [r7, #0]
20001a7e:	71fb      	strb	r3, [r7, #7]
    uint32_t gpio_idx = (uint32_t)port_id;
20001a80:	79fb      	ldrb	r3, [r7, #7]
20001a82:	60fb      	str	r3, [r7, #12]
    
    ASSERT( gpio_idx < NB_OF_GPIO );
20001a84:	68fb      	ldr	r3, [r7, #12]
20001a86:	2b1f      	cmp	r3, #31
20001a88:	d900      	bls.n	20001a8c <MSS_GPIO_config+0x18>
20001a8a:	be00      	bkpt	0x0000

    if ( gpio_idx < NB_OF_GPIO )
20001a8c:	68fb      	ldr	r3, [r7, #12]
20001a8e:	2b1f      	cmp	r3, #31
20001a90:	d808      	bhi.n	20001aa4 <MSS_GPIO_config+0x30>
    {
        *(g_config_reg_lut[gpio_idx]) = config;
20001a92:	68fa      	ldr	r2, [r7, #12]
20001a94:	f243 2334 	movw	r3, #12852	; 0x3234
20001a98:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20001aa0:	683a      	ldr	r2, [r7, #0]
20001aa2:	601a      	str	r2, [r3, #0]
    }
}
20001aa4:	f107 0714 	add.w	r7, r7, #20
20001aa8:	46bd      	mov	sp, r7
20001aaa:	bc80      	pop	{r7}
20001aac:	4770      	bx	lr
20001aae:	bf00      	nop

20001ab0 <MSS_GPIO_set_output>:
void MSS_GPIO_set_output
(
    mss_gpio_id_t       port_id,
    uint8_t             value
)
{
20001ab0:	b480      	push	{r7}
20001ab2:	b085      	sub	sp, #20
20001ab4:	af00      	add	r7, sp, #0
20001ab6:	4602      	mov	r2, r0
20001ab8:	460b      	mov	r3, r1
20001aba:	71fa      	strb	r2, [r7, #7]
20001abc:	71bb      	strb	r3, [r7, #6]
    uint32_t gpio_idx = (uint32_t)port_id;
20001abe:	79fb      	ldrb	r3, [r7, #7]
20001ac0:	60fb      	str	r3, [r7, #12]
    
    ASSERT( gpio_idx < NB_OF_GPIO );
20001ac2:	68fb      	ldr	r3, [r7, #12]
20001ac4:	2b1f      	cmp	r3, #31
20001ac6:	d900      	bls.n	20001aca <MSS_GPIO_set_output+0x1a>
20001ac8:	be00      	bkpt	0x0000
    
    if ( gpio_idx < NB_OF_GPIO )
20001aca:	68fb      	ldr	r3, [r7, #12]
20001acc:	2b1f      	cmp	r3, #31
20001ace:	d809      	bhi.n	20001ae4 <MSS_GPIO_set_output+0x34>
    {
        GPIO_BITBAND->GPIO_OUT[gpio_idx] = (uint32_t)value;
20001ad0:	f240 0300 	movw	r3, #0
20001ad4:	f2c4 2326 	movt	r3, #16934	; 0x4226
20001ad8:	68fa      	ldr	r2, [r7, #12]
20001ada:	79b9      	ldrb	r1, [r7, #6]
20001adc:	f502 6288 	add.w	r2, r2, #1088	; 0x440
20001ae0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
}
20001ae4:	f107 0714 	add.w	r7, r7, #20
20001ae8:	46bd      	mov	sp, r7
20001aea:	bc80      	pop	{r7}
20001aec:	4770      	bx	lr
20001aee:	bf00      	nop

20001af0 <ACE_init>:

/*-------------------------------------------------------------------------*//**
  See "mss_ace.h" for details of how to use this function.
 */
void ACE_init( void )
{
20001af0:	b580      	push	{r7, lr}
20001af2:	af00      	add	r7, sp, #0
    /* Initialize driver's internal data. */
    ace_init_flags();
20001af4:	f000 f966 	bl	20001dc4 <ace_init_flags>
    
    /* Initialize the data structures used by conversion functions. */
    ace_init_convert();
20001af8:	f000 f86c 	bl	20001bd4 <ace_init_convert>
}
20001afc:	bd80      	pop	{r7, pc}
20001afe:	bf00      	nop

20001b00 <ACE_get_channel_handle>:
ace_channel_handle_t
ACE_get_channel_handle
(
    const uint8_t * p_sz_channel_name
)
{
20001b00:	b580      	push	{r7, lr}
20001b02:	b084      	sub	sp, #16
20001b04:	af00      	add	r7, sp, #0
20001b06:	6078      	str	r0, [r7, #4]
    uint16_t channel_idx;
    ace_channel_handle_t channel_handle = INVALID_CHANNEL_HANDLE;
20001b08:	f04f 0304 	mov.w	r3, #4
20001b0c:	72fb      	strb	r3, [r7, #11]
    
    for ( channel_idx = 0u;  channel_idx < (uint16_t)ACE_NB_OF_INPUT_CHANNELS; ++channel_idx )
20001b0e:	f04f 0300 	mov.w	r3, #0
20001b12:	813b      	strh	r3, [r7, #8]
20001b14:	e025      	b.n	20001b62 <ACE_get_channel_handle+0x62>
    {
        if ( g_ace_channel_desc_table[channel_idx].p_sz_channel_name != 0 )
20001b16:	893a      	ldrh	r2, [r7, #8]
20001b18:	f243 33b0 	movw	r3, #13232	; 0x33b0
20001b1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001b20:	ea4f 1202 	mov.w	r2, r2, lsl #4
20001b24:	4413      	add	r3, r2
20001b26:	681b      	ldr	r3, [r3, #0]
20001b28:	2b00      	cmp	r3, #0
20001b2a:	d016      	beq.n	20001b5a <ACE_get_channel_handle+0x5a>
        {
            int32_t diff;
            diff = strncmp( (const char*)p_sz_channel_name, (const char*)g_ace_channel_desc_table[channel_idx].p_sz_channel_name, (size_t)MAX_CHANNEL_NAME_LENGTH );
20001b2c:	893a      	ldrh	r2, [r7, #8]
20001b2e:	f243 33b0 	movw	r3, #13232	; 0x33b0
20001b32:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001b36:	ea4f 1202 	mov.w	r2, r2, lsl #4
20001b3a:	4413      	add	r3, r2
20001b3c:	681b      	ldr	r3, [r3, #0]
20001b3e:	6878      	ldr	r0, [r7, #4]
20001b40:	4619      	mov	r1, r3
20001b42:	f04f 0210 	mov.w	r2, #16
20001b46:	f001 fad5 	bl	200030f4 <strncmp>
20001b4a:	4603      	mov	r3, r0
20001b4c:	60fb      	str	r3, [r7, #12]
            if ( 0 == diff )
20001b4e:	68fb      	ldr	r3, [r7, #12]
20001b50:	2b00      	cmp	r3, #0
20001b52:	d102      	bne.n	20001b5a <ACE_get_channel_handle+0x5a>
            {
                /* channel name found. */
                channel_handle = (ace_channel_handle_t)channel_idx;
20001b54:	893b      	ldrh	r3, [r7, #8]
20001b56:	72fb      	strb	r3, [r7, #11]
                break;
20001b58:	e006      	b.n	20001b68 <ACE_get_channel_handle+0x68>
)
{
    uint16_t channel_idx;
    ace_channel_handle_t channel_handle = INVALID_CHANNEL_HANDLE;
    
    for ( channel_idx = 0u;  channel_idx < (uint16_t)ACE_NB_OF_INPUT_CHANNELS; ++channel_idx )
20001b5a:	893b      	ldrh	r3, [r7, #8]
20001b5c:	f103 0301 	add.w	r3, r3, #1
20001b60:	813b      	strh	r3, [r7, #8]
20001b62:	893b      	ldrh	r3, [r7, #8]
20001b64:	2b03      	cmp	r3, #3
20001b66:	d9d6      	bls.n	20001b16 <ACE_get_channel_handle+0x16>
                channel_handle = (ace_channel_handle_t)channel_idx;
                break;
            }
        }
    }
    return channel_handle;
20001b68:	7afb      	ldrb	r3, [r7, #11]
}
20001b6a:	4618      	mov	r0, r3
20001b6c:	f107 0710 	add.w	r7, r7, #16
20001b70:	46bd      	mov	sp, r7
20001b72:	bd80      	pop	{r7, pc}

20001b74 <ACE_get_ppe_sample>:
uint16_t
ACE_get_ppe_sample
(
    ace_channel_handle_t channel_handle
)
{
20001b74:	b480      	push	{r7}
20001b76:	b085      	sub	sp, #20
20001b78:	af00      	add	r7, sp, #0
20001b7a:	4603      	mov	r3, r0
20001b7c:	71fb      	strb	r3, [r7, #7]
    uint16_t sample;
    uint16_t ppe_offset;
    
    ppe_offset = g_ace_channel_desc_table[channel_handle].signal_ppe_offset;
20001b7e:	79fa      	ldrb	r2, [r7, #7]
20001b80:	f243 33b0 	movw	r3, #13232	; 0x33b0
20001b84:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001b88:	ea4f 1202 	mov.w	r2, r2, lsl #4
20001b8c:	4413      	add	r3, r2
20001b8e:	88db      	ldrh	r3, [r3, #6]
20001b90:	81fb      	strh	r3, [r7, #14]
    sample = (uint16_t)(ACE->PPE_RAM_DATA[ppe_offset] >> 16u);
20001b92:	f240 0300 	movw	r3, #0
20001b96:	f2c4 0302 	movt	r3, #16386	; 0x4002
20001b9a:	89fa      	ldrh	r2, [r7, #14]
20001b9c:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
20001ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20001ba4:	ea4f 4313 	mov.w	r3, r3, lsr #16
20001ba8:	81bb      	strh	r3, [r7, #12]
    
    /* Check that the PPE processing did not result into a negative value.*/
    if((sample & 0x8000u) > 0u)
20001baa:	89bb      	ldrh	r3, [r7, #12]
20001bac:	b21b      	sxth	r3, r3
20001bae:	2b00      	cmp	r3, #0
20001bb0:	da02      	bge.n	20001bb8 <ACE_get_ppe_sample+0x44>
    {
        /* Normalize negative value to zero. */
        sample = 0u;
20001bb2:	f04f 0300 	mov.w	r3, #0
20001bb6:	81bb      	strh	r3, [r7, #12]
    }
    
    return sample;
20001bb8:	89bb      	ldrh	r3, [r7, #12]
}
20001bba:	4618      	mov	r0, r3
20001bbc:	f107 0714 	add.w	r7, r7, #20
20001bc0:	46bd      	mov	sp, r7
20001bc2:	bc80      	pop	{r7}
20001bc4:	4770      	bx	lr
20001bc6:	bf00      	nop

20001bc8 <SystemInit>:

/***************************************************************************//**
 * See system_a2fxxxm3f.h for details.
 */
void SystemInit(void)
{
20001bc8:	b480      	push	{r7}
20001bca:	af00      	add	r7, sp, #0
    /*
     * Do not make use of global variables or make any asumptions regarding
     * memory content if modifying this function. The memory content has not been
     * initialised by the time this function is called by the start-up code.
     */
}
20001bcc:	46bd      	mov	sp, r7
20001bce:	bc80      	pop	{r7}
20001bd0:	4770      	bx	lr
20001bd2:	bf00      	nop

20001bd4 <ace_init_convert>:

/*-------------------------------------------------------------------------*//**
 *
 */
void ace_init_convert(void)
{
20001bd4:	b480      	push	{r7}
20001bd6:	b087      	sub	sp, #28
20001bd8:	af00      	add	r7, sp, #0
    uint8_t abps_idx;
    int32_t channel;
    uint32_t saved_pc2_ctrl;
    
    /* Pause the SSE PC2 while accesses to ACB from APB3 are taking place. */
    saved_pc2_ctrl = ACE->PC2_CTRL;
20001bda:	f240 0300 	movw	r3, #0
20001bde:	f2c4 0302 	movt	r3, #16386	; 0x4002
20001be2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
20001be6:	60fb      	str	r3, [r7, #12]
    ACE->PC2_CTRL = 0u;
20001be8:	f240 0300 	movw	r3, #0
20001bec:	f2c4 0302 	movt	r3, #16386	; 0x4002
20001bf0:	f04f 0200 	mov.w	r2, #0
20001bf4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    
    /* Populate the g_gdec_lut look-up table. */
    for(abps_idx = 0u; abps_idx < MAX_NB_OF_APBS; ++abps_idx)
20001bf8:	f04f 0300 	mov.w	r3, #0
20001bfc:	71fb      	strb	r3, [r7, #7]
20001bfe:	e039      	b.n	20001c74 <ace_init_convert+0xa0>
    {
        uint8_t quad_id;
        uint8_t acb_config_byte;
        uint8_t channel_is_abps2;
        
        quad_id = abps_idx / 2u;
20001c00:	79fb      	ldrb	r3, [r7, #7]
20001c02:	ea4f 0353 	mov.w	r3, r3, lsr #1
20001c06:	747b      	strb	r3, [r7, #17]
        acb_config_byte = ACE->ACB_DATA[quad_id].b8;
20001c08:	f240 0200 	movw	r2, #0
20001c0c:	f2c4 0202 	movt	r2, #16386	; 0x4002
20001c10:	7c79      	ldrb	r1, [r7, #17]
20001c12:	460b      	mov	r3, r1
20001c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
20001c18:	440b      	add	r3, r1
20001c1a:	ea4f 1303 	mov.w	r3, r3, lsl #4
20001c1e:	4413      	add	r3, r2
20001c20:	f503 7308 	add.w	r3, r3, #544	; 0x220
20001c24:	791b      	ldrb	r3, [r3, #4]
20001c26:	74bb      	strb	r3, [r7, #18]
        channel_is_abps2 = abps_idx & 0x01u;
20001c28:	79fb      	ldrb	r3, [r7, #7]
20001c2a:	f003 0301 	and.w	r3, r3, #1
20001c2e:	74fb      	strb	r3, [r7, #19]
        if(channel_is_abps2)
20001c30:	7cfb      	ldrb	r3, [r7, #19]
20001c32:	2b00      	cmp	r3, #0
20001c34:	d00d      	beq.n	20001c52 <ace_init_convert+0x7e>
        {
            /* ABPS2 */
            g_gdec_lut[abps_idx] = (acb_config_byte >> 5u) & 0x03u;
20001c36:	79f9      	ldrb	r1, [r7, #7]
20001c38:	7cbb      	ldrb	r3, [r7, #18]
20001c3a:	ea4f 1353 	mov.w	r3, r3, lsr #5
20001c3e:	b2db      	uxtb	r3, r3
20001c40:	461a      	mov	r2, r3
20001c42:	f002 0203 	and.w	r2, r2, #3
20001c46:	f243 33f4 	movw	r3, #13300	; 0x33f4
20001c4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001c4e:	545a      	strb	r2, [r3, r1]
20001c50:	e00c      	b.n	20001c6c <ace_init_convert+0x98>
        }
        else
        {
            /* ABPS1 */
            g_gdec_lut[abps_idx] = (acb_config_byte >> 1u) & 0x03u;
20001c52:	79f9      	ldrb	r1, [r7, #7]
20001c54:	7cbb      	ldrb	r3, [r7, #18]
20001c56:	ea4f 0353 	mov.w	r3, r3, lsr #1
20001c5a:	b2db      	uxtb	r3, r3
20001c5c:	461a      	mov	r2, r3
20001c5e:	f002 0203 	and.w	r2, r2, #3
20001c62:	f243 33f4 	movw	r3, #13300	; 0x33f4
20001c66:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001c6a:	545a      	strb	r2, [r3, r1]
    /* Pause the SSE PC2 while accesses to ACB from APB3 are taking place. */
    saved_pc2_ctrl = ACE->PC2_CTRL;
    ACE->PC2_CTRL = 0u;
    
    /* Populate the g_gdec_lut look-up table. */
    for(abps_idx = 0u; abps_idx < MAX_NB_OF_APBS; ++abps_idx)
20001c6c:	79fb      	ldrb	r3, [r7, #7]
20001c6e:	f103 0301 	add.w	r3, r3, #1
20001c72:	71fb      	strb	r3, [r7, #7]
20001c74:	79fb      	ldrb	r3, [r7, #7]
20001c76:	2b09      	cmp	r3, #9
20001c78:	d9c2      	bls.n	20001c00 <ace_init_convert+0x2c>
            g_gdec_lut[abps_idx] = (acb_config_byte >> 1u) & 0x03u;
        }
    }
    
    /* Populate the channel_type_lut_h look-up table. */
    for(channel = 0; channel < ACE_NB_OF_INPUT_CHANNELS; ++channel)
20001c7a:	f04f 0300 	mov.w	r3, #0
20001c7e:	60bb      	str	r3, [r7, #8]
20001c80:	e073      	b.n	20001d6a <ace_init_convert+0x196>
        uint8_t quad_id;
        uint8_t acb_config_byte;
        adc_channel_id_t channel_id;
        channel_type_t channel_type;
    
        channel_id = g_ace_channel_desc_table[channel].signal_id;
20001c82:	68ba      	ldr	r2, [r7, #8]
20001c84:	f243 33b0 	movw	r3, #13232	; 0x33b0
20001c88:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001c8c:	ea4f 1202 	mov.w	r2, r2, lsl #4
20001c90:	4413      	add	r3, r2
20001c92:	791b      	ldrb	r3, [r3, #4]
20001c94:	75bb      	strb	r3, [r7, #22]
        quad_id = channel_quad_lut[channel_id];
20001c96:	7dba      	ldrb	r2, [r7, #22]
20001c98:	f243 335c 	movw	r3, #13148	; 0x335c
20001c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001ca0:	5c9b      	ldrb	r3, [r3, r2]
20001ca2:	753b      	strb	r3, [r7, #20]
        
        switch (channel_type_lut[channel_id])
20001ca4:	7dba      	ldrb	r2, [r7, #22]
20001ca6:	f243 332c 	movw	r3, #13100	; 0x332c
20001caa:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001cae:	5c9b      	ldrb	r3, [r3, r2]
20001cb0:	2b01      	cmp	r3, #1
20001cb2:	d007      	beq.n	20001cc4 <ace_init_convert+0xf0>
20001cb4:	2b02      	cmp	r3, #2
20001cb6:	d027      	beq.n	20001d08 <ace_init_convert+0x134>
20001cb8:	2b00      	cmp	r3, #0
20001cba:	d147      	bne.n	20001d4c <ace_init_convert+0x178>
        {
            case VOLTAGE_CHANNEL:
                channel_type = VOLTAGE;
20001cbc:	f04f 0300 	mov.w	r3, #0
20001cc0:	75fb      	strb	r3, [r7, #23]
                break;
20001cc2:	e047      	b.n	20001d54 <ace_init_convert+0x180>
                
            case CURRENT_CHANNEL:
                ASSERT( quad_id != INVALID_QUAD_ID );
20001cc4:	7d3b      	ldrb	r3, [r7, #20]
20001cc6:	2bff      	cmp	r3, #255	; 0xff
20001cc8:	d100      	bne.n	20001ccc <ace_init_convert+0xf8>
20001cca:	be00      	bkpt	0x0000
                acb_config_byte = ACE->ACB_DATA[quad_id].b9;
20001ccc:	f240 0200 	movw	r2, #0
20001cd0:	f2c4 0202 	movt	r2, #16386	; 0x4002
20001cd4:	7d39      	ldrb	r1, [r7, #20]
20001cd6:	460b      	mov	r3, r1
20001cd8:	ea4f 0343 	mov.w	r3, r3, lsl #1
20001cdc:	440b      	add	r3, r1
20001cde:	ea4f 1303 	mov.w	r3, r3, lsl #4
20001ce2:	4413      	add	r3, r2
20001ce4:	f503 7308 	add.w	r3, r3, #544	; 0x220
20001ce8:	7a1b      	ldrb	r3, [r3, #8]
20001cea:	757b      	strb	r3, [r7, #21]
                if ( acb_config_byte & 0x01u )
20001cec:	7d7b      	ldrb	r3, [r7, #21]
20001cee:	f003 0301 	and.w	r3, r3, #1
20001cf2:	b2db      	uxtb	r3, r3
20001cf4:	2b00      	cmp	r3, #0
20001cf6:	d003      	beq.n	20001d00 <ace_init_convert+0x12c>
                {
                    channel_type = VOLTAGE;
20001cf8:	f04f 0300 	mov.w	r3, #0
20001cfc:	75fb      	strb	r3, [r7, #23]
                }
                else
                {
                    channel_type = CURRENT;
                }
                break;
20001cfe:	e029      	b.n	20001d54 <ace_init_convert+0x180>
                {
                    channel_type = VOLTAGE;
                }
                else
                {
                    channel_type = CURRENT;
20001d00:	f04f 0301 	mov.w	r3, #1
20001d04:	75fb      	strb	r3, [r7, #23]
                }
                break;
20001d06:	e025      	b.n	20001d54 <ace_init_convert+0x180>
            
            case TEMPERATURE_CHANNEL:
                ASSERT( quad_id != INVALID_QUAD_ID );
20001d08:	7d3b      	ldrb	r3, [r7, #20]
20001d0a:	2bff      	cmp	r3, #255	; 0xff
20001d0c:	d100      	bne.n	20001d10 <ace_init_convert+0x13c>
20001d0e:	be00      	bkpt	0x0000
                acb_config_byte = ACE->ACB_DATA[quad_id].b10;
20001d10:	f240 0200 	movw	r2, #0
20001d14:	f2c4 0202 	movt	r2, #16386	; 0x4002
20001d18:	7d39      	ldrb	r1, [r7, #20]
20001d1a:	460b      	mov	r3, r1
20001d1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
20001d20:	440b      	add	r3, r1
20001d22:	ea4f 1303 	mov.w	r3, r3, lsl #4
20001d26:	4413      	add	r3, r2
20001d28:	f503 730a 	add.w	r3, r3, #552	; 0x228
20001d2c:	791b      	ldrb	r3, [r3, #4]
20001d2e:	757b      	strb	r3, [r7, #21]
                if ( acb_config_byte & 0x01u )
20001d30:	7d7b      	ldrb	r3, [r7, #21]
20001d32:	f003 0301 	and.w	r3, r3, #1
20001d36:	b2db      	uxtb	r3, r3
20001d38:	2b00      	cmp	r3, #0
20001d3a:	d003      	beq.n	20001d44 <ace_init_convert+0x170>
                {
                    channel_type = VOLTAGE;
20001d3c:	f04f 0300 	mov.w	r3, #0
20001d40:	75fb      	strb	r3, [r7, #23]
                }
                else
                {
                    channel_type = TEMPERATURE;
                }
                break;
20001d42:	e007      	b.n	20001d54 <ace_init_convert+0x180>
                {
                    channel_type = VOLTAGE;
                }
                else
                {
                    channel_type = TEMPERATURE;
20001d44:	f04f 0302 	mov.w	r3, #2
20001d48:	75fb      	strb	r3, [r7, #23]
                }
                break;
20001d4a:	e003      	b.n	20001d54 <ace_init_convert+0x180>
                
            default:
                ASSERT(0);
20001d4c:	be00      	bkpt	0x0000
                channel_type = VOLTAGE;
20001d4e:	f04f 0300 	mov.w	r3, #0
20001d52:	75fb      	strb	r3, [r7, #23]
                break;
        }
        
        channel_type_lut_h[channel] = channel_type;
20001d54:	68ba      	ldr	r2, [r7, #8]
20001d56:	f243 4300 	movw	r3, #13312	; 0x3400
20001d5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001d5e:	7df9      	ldrb	r1, [r7, #23]
20001d60:	5499      	strb	r1, [r3, r2]
            g_gdec_lut[abps_idx] = (acb_config_byte >> 1u) & 0x03u;
        }
    }
    
    /* Populate the channel_type_lut_h look-up table. */
    for(channel = 0; channel < ACE_NB_OF_INPUT_CHANNELS; ++channel)
20001d62:	68bb      	ldr	r3, [r7, #8]
20001d64:	f103 0301 	add.w	r3, r3, #1
20001d68:	60bb      	str	r3, [r7, #8]
20001d6a:	68bb      	ldr	r3, [r7, #8]
20001d6c:	2b03      	cmp	r3, #3
20001d6e:	dd88      	ble.n	20001c82 <ace_init_convert+0xae>
        
        channel_type_lut_h[channel] = channel_type;
    }
    
    /* Restore SSE PC2 operations. */
    ACE->PC2_CTRL = saved_pc2_ctrl;
20001d70:	f240 0300 	movw	r3, #0
20001d74:	f2c4 0302 	movt	r3, #16386	; 0x4002
20001d78:	68fa      	ldr	r2, [r7, #12]
20001d7a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
20001d7e:	f107 071c 	add.w	r7, r7, #28
20001d82:	46bd      	mov	sp, r7
20001d84:	bc80      	pop	{r7}
20001d86:	4770      	bx	lr

20001d88 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20001d88:	b480      	push	{r7}
20001d8a:	b083      	sub	sp, #12
20001d8c:	af00      	add	r7, sp, #0
20001d8e:	4603      	mov	r3, r0
20001d90:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20001d92:	f24e 1300 	movw	r3, #57600	; 0xe100
20001d96:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001d9a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20001d9e:	ea4f 1252 	mov.w	r2, r2, lsr #5
20001da2:	88f9      	ldrh	r1, [r7, #6]
20001da4:	f001 011f 	and.w	r1, r1, #31
20001da8:	f04f 0001 	mov.w	r0, #1
20001dac:	fa00 f101 	lsl.w	r1, r0, r1
20001db0:	f102 0260 	add.w	r2, r2, #96	; 0x60
20001db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20001db8:	f107 070c 	add.w	r7, r7, #12
20001dbc:	46bd      	mov	sp, r7
20001dbe:	bc80      	pop	{r7}
20001dc0:	4770      	bx	lr
20001dc2:	bf00      	nop

20001dc4 <ace_init_flags>:
/*-------------------------------------------------------------------------*//**
  Intialise the ACE driver's internal data structures used by flag control
  functions.
 */
void ace_init_flags( void )
{
20001dc4:	b480      	push	{r7}
20001dc6:	af00      	add	r7, sp, #0
        }
        
        g_ppe_global_flags_isr = 0u;
    }
#endif
}
20001dc8:	46bd      	mov	sp, r7
20001dca:	bc80      	pop	{r7}
20001dcc:	4770      	bx	lr
20001dce:	bf00      	nop

20001dd0 <process_flag_irq>:
/*-------------------------------------------------------------------------*//**
 * Actual PPE flag interrupt service routines:
 */

static void process_flag_irq( uint8_t threshold_flag_id )
{
20001dd0:	b480      	push	{r7}
20001dd2:	b083      	sub	sp, #12
20001dd4:	af00      	add	r7, sp, #0
20001dd6:	4603      	mov	r3, r0
20001dd8:	71fb      	strb	r3, [r7, #7]
            dummy_read = *(flags_irq_clear_regs_lut[flag_group]);
            ++dummy_read;
        }
    }
#endif
}
20001dda:	f107 070c 	add.w	r7, r7, #12
20001dde:	46bd      	mov	sp, r7
20001de0:	bc80      	pop	{r7}
20001de2:	4770      	bx	lr

20001de4 <ACE_PPE_Flag0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag0_IRQHandler( void )
#else
void ACE_PPE_Flag0_IRQHandler( void )
#endif
{
20001de4:	4668      	mov	r0, sp
20001de6:	f020 0107 	bic.w	r1, r0, #7
20001dea:	468d      	mov	sp, r1
20001dec:	b589      	push	{r0, r3, r7, lr}
20001dee:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG0 );
20001df0:	f04f 0000 	mov.w	r0, #0
20001df4:	f7ff ffec 	bl	20001dd0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag0_IRQn );
20001df8:	f04f 0076 	mov.w	r0, #118	; 0x76
20001dfc:	f7ff ffc4 	bl	20001d88 <NVIC_ClearPendingIRQ>
}
20001e00:	46bd      	mov	sp, r7
20001e02:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001e06:	4685      	mov	sp, r0
20001e08:	4770      	bx	lr
20001e0a:	bf00      	nop

20001e0c <ACE_PPE_Flag1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag1_IRQHandler( void )
#else
void ACE_PPE_Flag1_IRQHandler( void )
#endif
{
20001e0c:	4668      	mov	r0, sp
20001e0e:	f020 0107 	bic.w	r1, r0, #7
20001e12:	468d      	mov	sp, r1
20001e14:	b589      	push	{r0, r3, r7, lr}
20001e16:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG1 );
20001e18:	f04f 0001 	mov.w	r0, #1
20001e1c:	f7ff ffd8 	bl	20001dd0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag1_IRQn );
20001e20:	f04f 0077 	mov.w	r0, #119	; 0x77
20001e24:	f7ff ffb0 	bl	20001d88 <NVIC_ClearPendingIRQ>
}
20001e28:	46bd      	mov	sp, r7
20001e2a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001e2e:	4685      	mov	sp, r0
20001e30:	4770      	bx	lr
20001e32:	bf00      	nop

20001e34 <ACE_PPE_Flag2_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag2_IRQHandler( void )
#else
void ACE_PPE_Flag2_IRQHandler( void )
#endif
{
20001e34:	4668      	mov	r0, sp
20001e36:	f020 0107 	bic.w	r1, r0, #7
20001e3a:	468d      	mov	sp, r1
20001e3c:	b589      	push	{r0, r3, r7, lr}
20001e3e:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG2 );
20001e40:	f04f 0002 	mov.w	r0, #2
20001e44:	f7ff ffc4 	bl	20001dd0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag2_IRQn );
20001e48:	f04f 0078 	mov.w	r0, #120	; 0x78
20001e4c:	f7ff ff9c 	bl	20001d88 <NVIC_ClearPendingIRQ>
}
20001e50:	46bd      	mov	sp, r7
20001e52:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001e56:	4685      	mov	sp, r0
20001e58:	4770      	bx	lr
20001e5a:	bf00      	nop

20001e5c <ACE_PPE_Flag3_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag3_IRQHandler( void )
#else
void ACE_PPE_Flag3_IRQHandler( void )
#endif
{
20001e5c:	4668      	mov	r0, sp
20001e5e:	f020 0107 	bic.w	r1, r0, #7
20001e62:	468d      	mov	sp, r1
20001e64:	b589      	push	{r0, r3, r7, lr}
20001e66:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG3 );
20001e68:	f04f 0003 	mov.w	r0, #3
20001e6c:	f7ff ffb0 	bl	20001dd0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag3_IRQn );
20001e70:	f04f 0079 	mov.w	r0, #121	; 0x79
20001e74:	f7ff ff88 	bl	20001d88 <NVIC_ClearPendingIRQ>
}
20001e78:	46bd      	mov	sp, r7
20001e7a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001e7e:	4685      	mov	sp, r0
20001e80:	4770      	bx	lr
20001e82:	bf00      	nop

20001e84 <ACE_PPE_Flag4_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag4_IRQHandler( void )
#else
void ACE_PPE_Flag4_IRQHandler( void )
#endif
{
20001e84:	4668      	mov	r0, sp
20001e86:	f020 0107 	bic.w	r1, r0, #7
20001e8a:	468d      	mov	sp, r1
20001e8c:	b589      	push	{r0, r3, r7, lr}
20001e8e:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG4 );
20001e90:	f04f 0004 	mov.w	r0, #4
20001e94:	f7ff ff9c 	bl	20001dd0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag4_IRQn );
20001e98:	f04f 007a 	mov.w	r0, #122	; 0x7a
20001e9c:	f7ff ff74 	bl	20001d88 <NVIC_ClearPendingIRQ>
}
20001ea0:	46bd      	mov	sp, r7
20001ea2:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001ea6:	4685      	mov	sp, r0
20001ea8:	4770      	bx	lr
20001eaa:	bf00      	nop

20001eac <ACE_PPE_Flag5_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag5_IRQHandler( void )
#else
void ACE_PPE_Flag5_IRQHandler( void )
#endif
{
20001eac:	4668      	mov	r0, sp
20001eae:	f020 0107 	bic.w	r1, r0, #7
20001eb2:	468d      	mov	sp, r1
20001eb4:	b589      	push	{r0, r3, r7, lr}
20001eb6:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG5 );
20001eb8:	f04f 0005 	mov.w	r0, #5
20001ebc:	f7ff ff88 	bl	20001dd0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag5_IRQn );
20001ec0:	f04f 007b 	mov.w	r0, #123	; 0x7b
20001ec4:	f7ff ff60 	bl	20001d88 <NVIC_ClearPendingIRQ>
}
20001ec8:	46bd      	mov	sp, r7
20001eca:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001ece:	4685      	mov	sp, r0
20001ed0:	4770      	bx	lr
20001ed2:	bf00      	nop

20001ed4 <ACE_PPE_Flag6_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag6_IRQHandler( void )
#else
void ACE_PPE_Flag6_IRQHandler( void )
#endif
{
20001ed4:	4668      	mov	r0, sp
20001ed6:	f020 0107 	bic.w	r1, r0, #7
20001eda:	468d      	mov	sp, r1
20001edc:	b589      	push	{r0, r3, r7, lr}
20001ede:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG6 );
20001ee0:	f04f 0006 	mov.w	r0, #6
20001ee4:	f7ff ff74 	bl	20001dd0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag6_IRQn );
20001ee8:	f04f 007c 	mov.w	r0, #124	; 0x7c
20001eec:	f7ff ff4c 	bl	20001d88 <NVIC_ClearPendingIRQ>
}
20001ef0:	46bd      	mov	sp, r7
20001ef2:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001ef6:	4685      	mov	sp, r0
20001ef8:	4770      	bx	lr
20001efa:	bf00      	nop

20001efc <ACE_PPE_Flag7_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag7_IRQHandler( void )
#else
void ACE_PPE_Flag7_IRQHandler( void )
#endif
{
20001efc:	4668      	mov	r0, sp
20001efe:	f020 0107 	bic.w	r1, r0, #7
20001f02:	468d      	mov	sp, r1
20001f04:	b589      	push	{r0, r3, r7, lr}
20001f06:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG7 );
20001f08:	f04f 0007 	mov.w	r0, #7
20001f0c:	f7ff ff60 	bl	20001dd0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag7_IRQn );
20001f10:	f04f 007d 	mov.w	r0, #125	; 0x7d
20001f14:	f7ff ff38 	bl	20001d88 <NVIC_ClearPendingIRQ>
}
20001f18:	46bd      	mov	sp, r7
20001f1a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001f1e:	4685      	mov	sp, r0
20001f20:	4770      	bx	lr
20001f22:	bf00      	nop

20001f24 <ACE_PPE_Flag8_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag8_IRQHandler( void )
#else
void ACE_PPE_Flag8_IRQHandler( void )
#endif
{
20001f24:	4668      	mov	r0, sp
20001f26:	f020 0107 	bic.w	r1, r0, #7
20001f2a:	468d      	mov	sp, r1
20001f2c:	b589      	push	{r0, r3, r7, lr}
20001f2e:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG8 );
20001f30:	f04f 0008 	mov.w	r0, #8
20001f34:	f7ff ff4c 	bl	20001dd0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag8_IRQn );
20001f38:	f04f 007e 	mov.w	r0, #126	; 0x7e
20001f3c:	f7ff ff24 	bl	20001d88 <NVIC_ClearPendingIRQ>
}
20001f40:	46bd      	mov	sp, r7
20001f42:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001f46:	4685      	mov	sp, r0
20001f48:	4770      	bx	lr
20001f4a:	bf00      	nop

20001f4c <ACE_PPE_Flag9_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag9_IRQHandler( void )
#else
void ACE_PPE_Flag9_IRQHandler( void )
#endif
{
20001f4c:	4668      	mov	r0, sp
20001f4e:	f020 0107 	bic.w	r1, r0, #7
20001f52:	468d      	mov	sp, r1
20001f54:	b589      	push	{r0, r3, r7, lr}
20001f56:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG9 );
20001f58:	f04f 0009 	mov.w	r0, #9
20001f5c:	f7ff ff38 	bl	20001dd0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag9_IRQn );
20001f60:	f04f 007f 	mov.w	r0, #127	; 0x7f
20001f64:	f7ff ff10 	bl	20001d88 <NVIC_ClearPendingIRQ>
}
20001f68:	46bd      	mov	sp, r7
20001f6a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001f6e:	4685      	mov	sp, r0
20001f70:	4770      	bx	lr
20001f72:	bf00      	nop

20001f74 <ACE_PPE_Flag10_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag10_IRQHandler( void )
#else
void ACE_PPE_Flag10_IRQHandler( void )
#endif
{
20001f74:	4668      	mov	r0, sp
20001f76:	f020 0107 	bic.w	r1, r0, #7
20001f7a:	468d      	mov	sp, r1
20001f7c:	b589      	push	{r0, r3, r7, lr}
20001f7e:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG10 );
20001f80:	f04f 000a 	mov.w	r0, #10
20001f84:	f7ff ff24 	bl	20001dd0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag10_IRQn );
20001f88:	f04f 0080 	mov.w	r0, #128	; 0x80
20001f8c:	f7ff fefc 	bl	20001d88 <NVIC_ClearPendingIRQ>
}
20001f90:	46bd      	mov	sp, r7
20001f92:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001f96:	4685      	mov	sp, r0
20001f98:	4770      	bx	lr
20001f9a:	bf00      	nop

20001f9c <ACE_PPE_Flag11_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag11_IRQHandler( void )
#else
void ACE_PPE_Flag11_IRQHandler( void )
#endif
{
20001f9c:	4668      	mov	r0, sp
20001f9e:	f020 0107 	bic.w	r1, r0, #7
20001fa2:	468d      	mov	sp, r1
20001fa4:	b589      	push	{r0, r3, r7, lr}
20001fa6:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG11 );
20001fa8:	f04f 000b 	mov.w	r0, #11
20001fac:	f7ff ff10 	bl	20001dd0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag11_IRQn );
20001fb0:	f04f 0081 	mov.w	r0, #129	; 0x81
20001fb4:	f7ff fee8 	bl	20001d88 <NVIC_ClearPendingIRQ>
}
20001fb8:	46bd      	mov	sp, r7
20001fba:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001fbe:	4685      	mov	sp, r0
20001fc0:	4770      	bx	lr
20001fc2:	bf00      	nop

20001fc4 <ACE_PPE_Flag12_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag12_IRQHandler( void )
#else
void ACE_PPE_Flag12_IRQHandler( void )
#endif
{
20001fc4:	4668      	mov	r0, sp
20001fc6:	f020 0107 	bic.w	r1, r0, #7
20001fca:	468d      	mov	sp, r1
20001fcc:	b589      	push	{r0, r3, r7, lr}
20001fce:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG12 );
20001fd0:	f04f 000c 	mov.w	r0, #12
20001fd4:	f7ff fefc 	bl	20001dd0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag12_IRQn );
20001fd8:	f04f 0082 	mov.w	r0, #130	; 0x82
20001fdc:	f7ff fed4 	bl	20001d88 <NVIC_ClearPendingIRQ>
}
20001fe0:	46bd      	mov	sp, r7
20001fe2:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001fe6:	4685      	mov	sp, r0
20001fe8:	4770      	bx	lr
20001fea:	bf00      	nop

20001fec <ACE_PPE_Flag13_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag13_IRQHandler( void )
#else
void ACE_PPE_Flag13_IRQHandler( void )
#endif
{
20001fec:	4668      	mov	r0, sp
20001fee:	f020 0107 	bic.w	r1, r0, #7
20001ff2:	468d      	mov	sp, r1
20001ff4:	b589      	push	{r0, r3, r7, lr}
20001ff6:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG13 );
20001ff8:	f04f 000d 	mov.w	r0, #13
20001ffc:	f7ff fee8 	bl	20001dd0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag13_IRQn );
20002000:	f04f 0083 	mov.w	r0, #131	; 0x83
20002004:	f7ff fec0 	bl	20001d88 <NVIC_ClearPendingIRQ>
}
20002008:	46bd      	mov	sp, r7
2000200a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000200e:	4685      	mov	sp, r0
20002010:	4770      	bx	lr
20002012:	bf00      	nop

20002014 <ACE_PPE_Flag14_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag14_IRQHandler( void )
#else
void ACE_PPE_Flag14_IRQHandler( void )
#endif
{
20002014:	4668      	mov	r0, sp
20002016:	f020 0107 	bic.w	r1, r0, #7
2000201a:	468d      	mov	sp, r1
2000201c:	b589      	push	{r0, r3, r7, lr}
2000201e:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG14 );
20002020:	f04f 000e 	mov.w	r0, #14
20002024:	f7ff fed4 	bl	20001dd0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag14_IRQn );
20002028:	f04f 0084 	mov.w	r0, #132	; 0x84
2000202c:	f7ff feac 	bl	20001d88 <NVIC_ClearPendingIRQ>
}
20002030:	46bd      	mov	sp, r7
20002032:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002036:	4685      	mov	sp, r0
20002038:	4770      	bx	lr
2000203a:	bf00      	nop

2000203c <ACE_PPE_Flag15_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag15_IRQHandler( void )
#else
void ACE_PPE_Flag15_IRQHandler( void )
#endif
{
2000203c:	4668      	mov	r0, sp
2000203e:	f020 0107 	bic.w	r1, r0, #7
20002042:	468d      	mov	sp, r1
20002044:	b589      	push	{r0, r3, r7, lr}
20002046:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG15 );
20002048:	f04f 000f 	mov.w	r0, #15
2000204c:	f7ff fec0 	bl	20001dd0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag15_IRQn );
20002050:	f04f 0085 	mov.w	r0, #133	; 0x85
20002054:	f7ff fe98 	bl	20001d88 <NVIC_ClearPendingIRQ>
}
20002058:	46bd      	mov	sp, r7
2000205a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000205e:	4685      	mov	sp, r0
20002060:	4770      	bx	lr
20002062:	bf00      	nop

20002064 <ACE_PPE_Flag16_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag16_IRQHandler( void )
#else
void ACE_PPE_Flag16_IRQHandler( void )
#endif
{
20002064:	4668      	mov	r0, sp
20002066:	f020 0107 	bic.w	r1, r0, #7
2000206a:	468d      	mov	sp, r1
2000206c:	b589      	push	{r0, r3, r7, lr}
2000206e:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG16 );
20002070:	f04f 0010 	mov.w	r0, #16
20002074:	f7ff feac 	bl	20001dd0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag16_IRQn );
20002078:	f04f 0086 	mov.w	r0, #134	; 0x86
2000207c:	f7ff fe84 	bl	20001d88 <NVIC_ClearPendingIRQ>
}
20002080:	46bd      	mov	sp, r7
20002082:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002086:	4685      	mov	sp, r0
20002088:	4770      	bx	lr
2000208a:	bf00      	nop

2000208c <ACE_PPE_Flag17_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag17_IRQHandler( void )
#else
void ACE_PPE_Flag17_IRQHandler( void )
#endif
{
2000208c:	4668      	mov	r0, sp
2000208e:	f020 0107 	bic.w	r1, r0, #7
20002092:	468d      	mov	sp, r1
20002094:	b589      	push	{r0, r3, r7, lr}
20002096:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG17 );
20002098:	f04f 0011 	mov.w	r0, #17
2000209c:	f7ff fe98 	bl	20001dd0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag17_IRQn );
200020a0:	f04f 0087 	mov.w	r0, #135	; 0x87
200020a4:	f7ff fe70 	bl	20001d88 <NVIC_ClearPendingIRQ>
}
200020a8:	46bd      	mov	sp, r7
200020aa:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200020ae:	4685      	mov	sp, r0
200020b0:	4770      	bx	lr
200020b2:	bf00      	nop

200020b4 <ACE_PPE_Flag18_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag18_IRQHandler( void )
#else
void ACE_PPE_Flag18_IRQHandler( void )
#endif
{
200020b4:	4668      	mov	r0, sp
200020b6:	f020 0107 	bic.w	r1, r0, #7
200020ba:	468d      	mov	sp, r1
200020bc:	b589      	push	{r0, r3, r7, lr}
200020be:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG18 );
200020c0:	f04f 0012 	mov.w	r0, #18
200020c4:	f7ff fe84 	bl	20001dd0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag18_IRQn );
200020c8:	f04f 0088 	mov.w	r0, #136	; 0x88
200020cc:	f7ff fe5c 	bl	20001d88 <NVIC_ClearPendingIRQ>
}
200020d0:	46bd      	mov	sp, r7
200020d2:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200020d6:	4685      	mov	sp, r0
200020d8:	4770      	bx	lr
200020da:	bf00      	nop

200020dc <ACE_PPE_Flag19_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag19_IRQHandler( void )
#else
void ACE_PPE_Flag19_IRQHandler( void )
#endif
{
200020dc:	4668      	mov	r0, sp
200020de:	f020 0107 	bic.w	r1, r0, #7
200020e2:	468d      	mov	sp, r1
200020e4:	b589      	push	{r0, r3, r7, lr}
200020e6:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG19 );
200020e8:	f04f 0013 	mov.w	r0, #19
200020ec:	f7ff fe70 	bl	20001dd0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag19_IRQn );
200020f0:	f04f 0089 	mov.w	r0, #137	; 0x89
200020f4:	f7ff fe48 	bl	20001d88 <NVIC_ClearPendingIRQ>
}
200020f8:	46bd      	mov	sp, r7
200020fa:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200020fe:	4685      	mov	sp, r0
20002100:	4770      	bx	lr
20002102:	bf00      	nop

20002104 <ACE_PPE_Flag20_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag20_IRQHandler( void )
#else
void ACE_PPE_Flag20_IRQHandler( void )
#endif
{
20002104:	4668      	mov	r0, sp
20002106:	f020 0107 	bic.w	r1, r0, #7
2000210a:	468d      	mov	sp, r1
2000210c:	b589      	push	{r0, r3, r7, lr}
2000210e:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG20 );
20002110:	f04f 0014 	mov.w	r0, #20
20002114:	f7ff fe5c 	bl	20001dd0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag20_IRQn );
20002118:	f04f 008a 	mov.w	r0, #138	; 0x8a
2000211c:	f7ff fe34 	bl	20001d88 <NVIC_ClearPendingIRQ>
}
20002120:	46bd      	mov	sp, r7
20002122:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002126:	4685      	mov	sp, r0
20002128:	4770      	bx	lr
2000212a:	bf00      	nop

2000212c <ACE_PPE_Flag21_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag21_IRQHandler( void )
#else
void ACE_PPE_Flag21_IRQHandler( void )
#endif
{
2000212c:	4668      	mov	r0, sp
2000212e:	f020 0107 	bic.w	r1, r0, #7
20002132:	468d      	mov	sp, r1
20002134:	b589      	push	{r0, r3, r7, lr}
20002136:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG21 );
20002138:	f04f 0015 	mov.w	r0, #21
2000213c:	f7ff fe48 	bl	20001dd0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag21_IRQn );
20002140:	f04f 008b 	mov.w	r0, #139	; 0x8b
20002144:	f7ff fe20 	bl	20001d88 <NVIC_ClearPendingIRQ>
}
20002148:	46bd      	mov	sp, r7
2000214a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000214e:	4685      	mov	sp, r0
20002150:	4770      	bx	lr
20002152:	bf00      	nop

20002154 <ACE_PPE_Flag22_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag22_IRQHandler( void )
#else
void ACE_PPE_Flag22_IRQHandler( void )
#endif
{
20002154:	4668      	mov	r0, sp
20002156:	f020 0107 	bic.w	r1, r0, #7
2000215a:	468d      	mov	sp, r1
2000215c:	b589      	push	{r0, r3, r7, lr}
2000215e:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG22 );
20002160:	f04f 0016 	mov.w	r0, #22
20002164:	f7ff fe34 	bl	20001dd0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag22_IRQn );
20002168:	f04f 008c 	mov.w	r0, #140	; 0x8c
2000216c:	f7ff fe0c 	bl	20001d88 <NVIC_ClearPendingIRQ>
}
20002170:	46bd      	mov	sp, r7
20002172:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002176:	4685      	mov	sp, r0
20002178:	4770      	bx	lr
2000217a:	bf00      	nop

2000217c <ACE_PPE_Flag23_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag23_IRQHandler( void )
#else
void ACE_PPE_Flag23_IRQHandler( void )
#endif
{
2000217c:	4668      	mov	r0, sp
2000217e:	f020 0107 	bic.w	r1, r0, #7
20002182:	468d      	mov	sp, r1
20002184:	b589      	push	{r0, r3, r7, lr}
20002186:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG23 );
20002188:	f04f 0017 	mov.w	r0, #23
2000218c:	f7ff fe20 	bl	20001dd0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag23_IRQn );
20002190:	f04f 008d 	mov.w	r0, #141	; 0x8d
20002194:	f7ff fdf8 	bl	20001d88 <NVIC_ClearPendingIRQ>
}
20002198:	46bd      	mov	sp, r7
2000219a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000219e:	4685      	mov	sp, r0
200021a0:	4770      	bx	lr
200021a2:	bf00      	nop

200021a4 <ACE_PPE_Flag24_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag24_IRQHandler( void )
#else
void ACE_PPE_Flag24_IRQHandler( void )
#endif
{
200021a4:	4668      	mov	r0, sp
200021a6:	f020 0107 	bic.w	r1, r0, #7
200021aa:	468d      	mov	sp, r1
200021ac:	b589      	push	{r0, r3, r7, lr}
200021ae:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG24 );
200021b0:	f04f 0018 	mov.w	r0, #24
200021b4:	f7ff fe0c 	bl	20001dd0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag24_IRQn );
200021b8:	f04f 008e 	mov.w	r0, #142	; 0x8e
200021bc:	f7ff fde4 	bl	20001d88 <NVIC_ClearPendingIRQ>
}
200021c0:	46bd      	mov	sp, r7
200021c2:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200021c6:	4685      	mov	sp, r0
200021c8:	4770      	bx	lr
200021ca:	bf00      	nop

200021cc <ACE_PPE_Flag25_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag25_IRQHandler( void )
#else
void ACE_PPE_Flag25_IRQHandler( void )
#endif
{
200021cc:	4668      	mov	r0, sp
200021ce:	f020 0107 	bic.w	r1, r0, #7
200021d2:	468d      	mov	sp, r1
200021d4:	b589      	push	{r0, r3, r7, lr}
200021d6:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG25 );
200021d8:	f04f 0019 	mov.w	r0, #25
200021dc:	f7ff fdf8 	bl	20001dd0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag25_IRQn );
200021e0:	f04f 008f 	mov.w	r0, #143	; 0x8f
200021e4:	f7ff fdd0 	bl	20001d88 <NVIC_ClearPendingIRQ>
}
200021e8:	46bd      	mov	sp, r7
200021ea:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200021ee:	4685      	mov	sp, r0
200021f0:	4770      	bx	lr
200021f2:	bf00      	nop

200021f4 <ACE_PPE_Flag26_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag26_IRQHandler( void )
#else
void ACE_PPE_Flag26_IRQHandler( void )
#endif
{
200021f4:	4668      	mov	r0, sp
200021f6:	f020 0107 	bic.w	r1, r0, #7
200021fa:	468d      	mov	sp, r1
200021fc:	b589      	push	{r0, r3, r7, lr}
200021fe:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG26 );
20002200:	f04f 001a 	mov.w	r0, #26
20002204:	f7ff fde4 	bl	20001dd0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag26_IRQn );
20002208:	f04f 0090 	mov.w	r0, #144	; 0x90
2000220c:	f7ff fdbc 	bl	20001d88 <NVIC_ClearPendingIRQ>
}
20002210:	46bd      	mov	sp, r7
20002212:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002216:	4685      	mov	sp, r0
20002218:	4770      	bx	lr
2000221a:	bf00      	nop

2000221c <ACE_PPE_Flag27_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag27_IRQHandler( void )
#else
void ACE_PPE_Flag27_IRQHandler( void )
#endif
{
2000221c:	4668      	mov	r0, sp
2000221e:	f020 0107 	bic.w	r1, r0, #7
20002222:	468d      	mov	sp, r1
20002224:	b589      	push	{r0, r3, r7, lr}
20002226:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG27 );
20002228:	f04f 001b 	mov.w	r0, #27
2000222c:	f7ff fdd0 	bl	20001dd0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag27_IRQn );
20002230:	f04f 0091 	mov.w	r0, #145	; 0x91
20002234:	f7ff fda8 	bl	20001d88 <NVIC_ClearPendingIRQ>
}
20002238:	46bd      	mov	sp, r7
2000223a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000223e:	4685      	mov	sp, r0
20002240:	4770      	bx	lr
20002242:	bf00      	nop

20002244 <ACE_PPE_Flag28_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag28_IRQHandler( void )
#else
void ACE_PPE_Flag28_IRQHandler( void )
#endif
{
20002244:	4668      	mov	r0, sp
20002246:	f020 0107 	bic.w	r1, r0, #7
2000224a:	468d      	mov	sp, r1
2000224c:	b589      	push	{r0, r3, r7, lr}
2000224e:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG28 );
20002250:	f04f 001c 	mov.w	r0, #28
20002254:	f7ff fdbc 	bl	20001dd0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag28_IRQn );
20002258:	f04f 0092 	mov.w	r0, #146	; 0x92
2000225c:	f7ff fd94 	bl	20001d88 <NVIC_ClearPendingIRQ>
}
20002260:	46bd      	mov	sp, r7
20002262:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002266:	4685      	mov	sp, r0
20002268:	4770      	bx	lr
2000226a:	bf00      	nop

2000226c <ACE_PPE_Flag29_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag29_IRQHandler( void )
#else
void ACE_PPE_Flag29_IRQHandler( void )
#endif
{
2000226c:	4668      	mov	r0, sp
2000226e:	f020 0107 	bic.w	r1, r0, #7
20002272:	468d      	mov	sp, r1
20002274:	b589      	push	{r0, r3, r7, lr}
20002276:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG29 );
20002278:	f04f 001d 	mov.w	r0, #29
2000227c:	f7ff fda8 	bl	20001dd0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag29_IRQn );
20002280:	f04f 0093 	mov.w	r0, #147	; 0x93
20002284:	f7ff fd80 	bl	20001d88 <NVIC_ClearPendingIRQ>
}
20002288:	46bd      	mov	sp, r7
2000228a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000228e:	4685      	mov	sp, r0
20002290:	4770      	bx	lr
20002292:	bf00      	nop

20002294 <ACE_PPE_Flag30_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag30_IRQHandler( void )
#else
void ACE_PPE_Flag30_IRQHandler( void )
#endif
{
20002294:	4668      	mov	r0, sp
20002296:	f020 0107 	bic.w	r1, r0, #7
2000229a:	468d      	mov	sp, r1
2000229c:	b589      	push	{r0, r3, r7, lr}
2000229e:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG30 );
200022a0:	f04f 001e 	mov.w	r0, #30
200022a4:	f7ff fd94 	bl	20001dd0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag30_IRQn );
200022a8:	f04f 0094 	mov.w	r0, #148	; 0x94
200022ac:	f7ff fd6c 	bl	20001d88 <NVIC_ClearPendingIRQ>
}
200022b0:	46bd      	mov	sp, r7
200022b2:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200022b6:	4685      	mov	sp, r0
200022b8:	4770      	bx	lr
200022ba:	bf00      	nop

200022bc <ACE_PPE_Flag31_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag31_IRQHandler( void )
#else
void ACE_PPE_Flag31_IRQHandler( void )
#endif
{
200022bc:	4668      	mov	r0, sp
200022be:	f020 0107 	bic.w	r1, r0, #7
200022c2:	468d      	mov	sp, r1
200022c4:	b589      	push	{r0, r3, r7, lr}
200022c6:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG31 );
200022c8:	f04f 001f 	mov.w	r0, #31
200022cc:	f7ff fd80 	bl	20001dd0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag31_IRQn );
200022d0:	f04f 0095 	mov.w	r0, #149	; 0x95
200022d4:	f7ff fd58 	bl	20001d88 <NVIC_ClearPendingIRQ>
}
200022d8:	46bd      	mov	sp, r7
200022da:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200022de:	4685      	mov	sp, r0
200022e0:	4770      	bx	lr
200022e2:	bf00      	nop

200022e4 <__aeabi_drsub>:
200022e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
200022e8:	e002      	b.n	200022f0 <__adddf3>
200022ea:	bf00      	nop

200022ec <__aeabi_dsub>:
200022ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

200022f0 <__adddf3>:
200022f0:	b530      	push	{r4, r5, lr}
200022f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
200022f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
200022fa:	ea94 0f05 	teq	r4, r5
200022fe:	bf08      	it	eq
20002300:	ea90 0f02 	teqeq	r0, r2
20002304:	bf1f      	itttt	ne
20002306:	ea54 0c00 	orrsne.w	ip, r4, r0
2000230a:	ea55 0c02 	orrsne.w	ip, r5, r2
2000230e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
20002312:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
20002316:	f000 80e2 	beq.w	200024de <__adddf3+0x1ee>
2000231a:	ea4f 5454 	mov.w	r4, r4, lsr #21
2000231e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
20002322:	bfb8      	it	lt
20002324:	426d      	neglt	r5, r5
20002326:	dd0c      	ble.n	20002342 <__adddf3+0x52>
20002328:	442c      	add	r4, r5
2000232a:	ea80 0202 	eor.w	r2, r0, r2
2000232e:	ea81 0303 	eor.w	r3, r1, r3
20002332:	ea82 0000 	eor.w	r0, r2, r0
20002336:	ea83 0101 	eor.w	r1, r3, r1
2000233a:	ea80 0202 	eor.w	r2, r0, r2
2000233e:	ea81 0303 	eor.w	r3, r1, r3
20002342:	2d36      	cmp	r5, #54	; 0x36
20002344:	bf88      	it	hi
20002346:	bd30      	pophi	{r4, r5, pc}
20002348:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
2000234c:	ea4f 3101 	mov.w	r1, r1, lsl #12
20002350:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
20002354:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
20002358:	d002      	beq.n	20002360 <__adddf3+0x70>
2000235a:	4240      	negs	r0, r0
2000235c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
20002360:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
20002364:	ea4f 3303 	mov.w	r3, r3, lsl #12
20002368:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
2000236c:	d002      	beq.n	20002374 <__adddf3+0x84>
2000236e:	4252      	negs	r2, r2
20002370:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
20002374:	ea94 0f05 	teq	r4, r5
20002378:	f000 80a7 	beq.w	200024ca <__adddf3+0x1da>
2000237c:	f1a4 0401 	sub.w	r4, r4, #1
20002380:	f1d5 0e20 	rsbs	lr, r5, #32
20002384:	db0d      	blt.n	200023a2 <__adddf3+0xb2>
20002386:	fa02 fc0e 	lsl.w	ip, r2, lr
2000238a:	fa22 f205 	lsr.w	r2, r2, r5
2000238e:	1880      	adds	r0, r0, r2
20002390:	f141 0100 	adc.w	r1, r1, #0
20002394:	fa03 f20e 	lsl.w	r2, r3, lr
20002398:	1880      	adds	r0, r0, r2
2000239a:	fa43 f305 	asr.w	r3, r3, r5
2000239e:	4159      	adcs	r1, r3
200023a0:	e00e      	b.n	200023c0 <__adddf3+0xd0>
200023a2:	f1a5 0520 	sub.w	r5, r5, #32
200023a6:	f10e 0e20 	add.w	lr, lr, #32
200023aa:	2a01      	cmp	r2, #1
200023ac:	fa03 fc0e 	lsl.w	ip, r3, lr
200023b0:	bf28      	it	cs
200023b2:	f04c 0c02 	orrcs.w	ip, ip, #2
200023b6:	fa43 f305 	asr.w	r3, r3, r5
200023ba:	18c0      	adds	r0, r0, r3
200023bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
200023c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
200023c4:	d507      	bpl.n	200023d6 <__adddf3+0xe6>
200023c6:	f04f 0e00 	mov.w	lr, #0
200023ca:	f1dc 0c00 	rsbs	ip, ip, #0
200023ce:	eb7e 0000 	sbcs.w	r0, lr, r0
200023d2:	eb6e 0101 	sbc.w	r1, lr, r1
200023d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
200023da:	d31b      	bcc.n	20002414 <__adddf3+0x124>
200023dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
200023e0:	d30c      	bcc.n	200023fc <__adddf3+0x10c>
200023e2:	0849      	lsrs	r1, r1, #1
200023e4:	ea5f 0030 	movs.w	r0, r0, rrx
200023e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
200023ec:	f104 0401 	add.w	r4, r4, #1
200023f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
200023f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
200023f8:	f080 809a 	bcs.w	20002530 <__adddf3+0x240>
200023fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
20002400:	bf08      	it	eq
20002402:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
20002406:	f150 0000 	adcs.w	r0, r0, #0
2000240a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
2000240e:	ea41 0105 	orr.w	r1, r1, r5
20002412:	bd30      	pop	{r4, r5, pc}
20002414:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
20002418:	4140      	adcs	r0, r0
2000241a:	eb41 0101 	adc.w	r1, r1, r1
2000241e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
20002422:	f1a4 0401 	sub.w	r4, r4, #1
20002426:	d1e9      	bne.n	200023fc <__adddf3+0x10c>
20002428:	f091 0f00 	teq	r1, #0
2000242c:	bf04      	itt	eq
2000242e:	4601      	moveq	r1, r0
20002430:	2000      	moveq	r0, #0
20002432:	fab1 f381 	clz	r3, r1
20002436:	bf08      	it	eq
20002438:	3320      	addeq	r3, #32
2000243a:	f1a3 030b 	sub.w	r3, r3, #11
2000243e:	f1b3 0220 	subs.w	r2, r3, #32
20002442:	da0c      	bge.n	2000245e <__adddf3+0x16e>
20002444:	320c      	adds	r2, #12
20002446:	dd08      	ble.n	2000245a <__adddf3+0x16a>
20002448:	f102 0c14 	add.w	ip, r2, #20
2000244c:	f1c2 020c 	rsb	r2, r2, #12
20002450:	fa01 f00c 	lsl.w	r0, r1, ip
20002454:	fa21 f102 	lsr.w	r1, r1, r2
20002458:	e00c      	b.n	20002474 <__adddf3+0x184>
2000245a:	f102 0214 	add.w	r2, r2, #20
2000245e:	bfd8      	it	le
20002460:	f1c2 0c20 	rsble	ip, r2, #32
20002464:	fa01 f102 	lsl.w	r1, r1, r2
20002468:	fa20 fc0c 	lsr.w	ip, r0, ip
2000246c:	bfdc      	itt	le
2000246e:	ea41 010c 	orrle.w	r1, r1, ip
20002472:	4090      	lslle	r0, r2
20002474:	1ae4      	subs	r4, r4, r3
20002476:	bfa2      	ittt	ge
20002478:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
2000247c:	4329      	orrge	r1, r5
2000247e:	bd30      	popge	{r4, r5, pc}
20002480:	ea6f 0404 	mvn.w	r4, r4
20002484:	3c1f      	subs	r4, #31
20002486:	da1c      	bge.n	200024c2 <__adddf3+0x1d2>
20002488:	340c      	adds	r4, #12
2000248a:	dc0e      	bgt.n	200024aa <__adddf3+0x1ba>
2000248c:	f104 0414 	add.w	r4, r4, #20
20002490:	f1c4 0220 	rsb	r2, r4, #32
20002494:	fa20 f004 	lsr.w	r0, r0, r4
20002498:	fa01 f302 	lsl.w	r3, r1, r2
2000249c:	ea40 0003 	orr.w	r0, r0, r3
200024a0:	fa21 f304 	lsr.w	r3, r1, r4
200024a4:	ea45 0103 	orr.w	r1, r5, r3
200024a8:	bd30      	pop	{r4, r5, pc}
200024aa:	f1c4 040c 	rsb	r4, r4, #12
200024ae:	f1c4 0220 	rsb	r2, r4, #32
200024b2:	fa20 f002 	lsr.w	r0, r0, r2
200024b6:	fa01 f304 	lsl.w	r3, r1, r4
200024ba:	ea40 0003 	orr.w	r0, r0, r3
200024be:	4629      	mov	r1, r5
200024c0:	bd30      	pop	{r4, r5, pc}
200024c2:	fa21 f004 	lsr.w	r0, r1, r4
200024c6:	4629      	mov	r1, r5
200024c8:	bd30      	pop	{r4, r5, pc}
200024ca:	f094 0f00 	teq	r4, #0
200024ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
200024d2:	bf06      	itte	eq
200024d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
200024d8:	3401      	addeq	r4, #1
200024da:	3d01      	subne	r5, #1
200024dc:	e74e      	b.n	2000237c <__adddf3+0x8c>
200024de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
200024e2:	bf18      	it	ne
200024e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
200024e8:	d029      	beq.n	2000253e <__adddf3+0x24e>
200024ea:	ea94 0f05 	teq	r4, r5
200024ee:	bf08      	it	eq
200024f0:	ea90 0f02 	teqeq	r0, r2
200024f4:	d005      	beq.n	20002502 <__adddf3+0x212>
200024f6:	ea54 0c00 	orrs.w	ip, r4, r0
200024fa:	bf04      	itt	eq
200024fc:	4619      	moveq	r1, r3
200024fe:	4610      	moveq	r0, r2
20002500:	bd30      	pop	{r4, r5, pc}
20002502:	ea91 0f03 	teq	r1, r3
20002506:	bf1e      	ittt	ne
20002508:	2100      	movne	r1, #0
2000250a:	2000      	movne	r0, #0
2000250c:	bd30      	popne	{r4, r5, pc}
2000250e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
20002512:	d105      	bne.n	20002520 <__adddf3+0x230>
20002514:	0040      	lsls	r0, r0, #1
20002516:	4149      	adcs	r1, r1
20002518:	bf28      	it	cs
2000251a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
2000251e:	bd30      	pop	{r4, r5, pc}
20002520:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
20002524:	bf3c      	itt	cc
20002526:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
2000252a:	bd30      	popcc	{r4, r5, pc}
2000252c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
20002530:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
20002534:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
20002538:	f04f 0000 	mov.w	r0, #0
2000253c:	bd30      	pop	{r4, r5, pc}
2000253e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
20002542:	bf1a      	itte	ne
20002544:	4619      	movne	r1, r3
20002546:	4610      	movne	r0, r2
20002548:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
2000254c:	bf1c      	itt	ne
2000254e:	460b      	movne	r3, r1
20002550:	4602      	movne	r2, r0
20002552:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
20002556:	bf06      	itte	eq
20002558:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
2000255c:	ea91 0f03 	teqeq	r1, r3
20002560:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
20002564:	bd30      	pop	{r4, r5, pc}
20002566:	bf00      	nop

20002568 <__aeabi_ui2d>:
20002568:	f090 0f00 	teq	r0, #0
2000256c:	bf04      	itt	eq
2000256e:	2100      	moveq	r1, #0
20002570:	4770      	bxeq	lr
20002572:	b530      	push	{r4, r5, lr}
20002574:	f44f 6480 	mov.w	r4, #1024	; 0x400
20002578:	f104 0432 	add.w	r4, r4, #50	; 0x32
2000257c:	f04f 0500 	mov.w	r5, #0
20002580:	f04f 0100 	mov.w	r1, #0
20002584:	e750      	b.n	20002428 <__adddf3+0x138>
20002586:	bf00      	nop

20002588 <__aeabi_i2d>:
20002588:	f090 0f00 	teq	r0, #0
2000258c:	bf04      	itt	eq
2000258e:	2100      	moveq	r1, #0
20002590:	4770      	bxeq	lr
20002592:	b530      	push	{r4, r5, lr}
20002594:	f44f 6480 	mov.w	r4, #1024	; 0x400
20002598:	f104 0432 	add.w	r4, r4, #50	; 0x32
2000259c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
200025a0:	bf48      	it	mi
200025a2:	4240      	negmi	r0, r0
200025a4:	f04f 0100 	mov.w	r1, #0
200025a8:	e73e      	b.n	20002428 <__adddf3+0x138>
200025aa:	bf00      	nop

200025ac <__aeabi_f2d>:
200025ac:	0042      	lsls	r2, r0, #1
200025ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
200025b2:	ea4f 0131 	mov.w	r1, r1, rrx
200025b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
200025ba:	bf1f      	itttt	ne
200025bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
200025c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
200025c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
200025c8:	4770      	bxne	lr
200025ca:	f092 0f00 	teq	r2, #0
200025ce:	bf14      	ite	ne
200025d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
200025d4:	4770      	bxeq	lr
200025d6:	b530      	push	{r4, r5, lr}
200025d8:	f44f 7460 	mov.w	r4, #896	; 0x380
200025dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
200025e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
200025e4:	e720      	b.n	20002428 <__adddf3+0x138>
200025e6:	bf00      	nop

200025e8 <__aeabi_ul2d>:
200025e8:	ea50 0201 	orrs.w	r2, r0, r1
200025ec:	bf08      	it	eq
200025ee:	4770      	bxeq	lr
200025f0:	b530      	push	{r4, r5, lr}
200025f2:	f04f 0500 	mov.w	r5, #0
200025f6:	e00a      	b.n	2000260e <__aeabi_l2d+0x16>

200025f8 <__aeabi_l2d>:
200025f8:	ea50 0201 	orrs.w	r2, r0, r1
200025fc:	bf08      	it	eq
200025fe:	4770      	bxeq	lr
20002600:	b530      	push	{r4, r5, lr}
20002602:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
20002606:	d502      	bpl.n	2000260e <__aeabi_l2d+0x16>
20002608:	4240      	negs	r0, r0
2000260a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
2000260e:	f44f 6480 	mov.w	r4, #1024	; 0x400
20002612:	f104 0432 	add.w	r4, r4, #50	; 0x32
20002616:	ea5f 5c91 	movs.w	ip, r1, lsr #22
2000261a:	f43f aedc 	beq.w	200023d6 <__adddf3+0xe6>
2000261e:	f04f 0203 	mov.w	r2, #3
20002622:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
20002626:	bf18      	it	ne
20002628:	3203      	addne	r2, #3
2000262a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
2000262e:	bf18      	it	ne
20002630:	3203      	addne	r2, #3
20002632:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
20002636:	f1c2 0320 	rsb	r3, r2, #32
2000263a:	fa00 fc03 	lsl.w	ip, r0, r3
2000263e:	fa20 f002 	lsr.w	r0, r0, r2
20002642:	fa01 fe03 	lsl.w	lr, r1, r3
20002646:	ea40 000e 	orr.w	r0, r0, lr
2000264a:	fa21 f102 	lsr.w	r1, r1, r2
2000264e:	4414      	add	r4, r2
20002650:	e6c1      	b.n	200023d6 <__adddf3+0xe6>
20002652:	bf00      	nop

20002654 <__aeabi_dmul>:
20002654:	b570      	push	{r4, r5, r6, lr}
20002656:	f04f 0cff 	mov.w	ip, #255	; 0xff
2000265a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
2000265e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
20002662:	bf1d      	ittte	ne
20002664:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
20002668:	ea94 0f0c 	teqne	r4, ip
2000266c:	ea95 0f0c 	teqne	r5, ip
20002670:	f000 f8de 	bleq	20002830 <__aeabi_dmul+0x1dc>
20002674:	442c      	add	r4, r5
20002676:	ea81 0603 	eor.w	r6, r1, r3
2000267a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
2000267e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
20002682:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
20002686:	bf18      	it	ne
20002688:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
2000268c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
20002690:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
20002694:	d038      	beq.n	20002708 <__aeabi_dmul+0xb4>
20002696:	fba0 ce02 	umull	ip, lr, r0, r2
2000269a:	f04f 0500 	mov.w	r5, #0
2000269e:	fbe1 e502 	umlal	lr, r5, r1, r2
200026a2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
200026a6:	fbe0 e503 	umlal	lr, r5, r0, r3
200026aa:	f04f 0600 	mov.w	r6, #0
200026ae:	fbe1 5603 	umlal	r5, r6, r1, r3
200026b2:	f09c 0f00 	teq	ip, #0
200026b6:	bf18      	it	ne
200026b8:	f04e 0e01 	orrne.w	lr, lr, #1
200026bc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
200026c0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
200026c4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
200026c8:	d204      	bcs.n	200026d4 <__aeabi_dmul+0x80>
200026ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
200026ce:	416d      	adcs	r5, r5
200026d0:	eb46 0606 	adc.w	r6, r6, r6
200026d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
200026d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
200026dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
200026e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
200026e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
200026e8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
200026ec:	bf88      	it	hi
200026ee:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
200026f2:	d81e      	bhi.n	20002732 <__aeabi_dmul+0xde>
200026f4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
200026f8:	bf08      	it	eq
200026fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
200026fe:	f150 0000 	adcs.w	r0, r0, #0
20002702:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
20002706:	bd70      	pop	{r4, r5, r6, pc}
20002708:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
2000270c:	ea46 0101 	orr.w	r1, r6, r1
20002710:	ea40 0002 	orr.w	r0, r0, r2
20002714:	ea81 0103 	eor.w	r1, r1, r3
20002718:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
2000271c:	bfc2      	ittt	gt
2000271e:	ebd4 050c 	rsbsgt	r5, r4, ip
20002722:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
20002726:	bd70      	popgt	{r4, r5, r6, pc}
20002728:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
2000272c:	f04f 0e00 	mov.w	lr, #0
20002730:	3c01      	subs	r4, #1
20002732:	f300 80ab 	bgt.w	2000288c <__aeabi_dmul+0x238>
20002736:	f114 0f36 	cmn.w	r4, #54	; 0x36
2000273a:	bfde      	ittt	le
2000273c:	2000      	movle	r0, #0
2000273e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
20002742:	bd70      	pople	{r4, r5, r6, pc}
20002744:	f1c4 0400 	rsb	r4, r4, #0
20002748:	3c20      	subs	r4, #32
2000274a:	da35      	bge.n	200027b8 <__aeabi_dmul+0x164>
2000274c:	340c      	adds	r4, #12
2000274e:	dc1b      	bgt.n	20002788 <__aeabi_dmul+0x134>
20002750:	f104 0414 	add.w	r4, r4, #20
20002754:	f1c4 0520 	rsb	r5, r4, #32
20002758:	fa00 f305 	lsl.w	r3, r0, r5
2000275c:	fa20 f004 	lsr.w	r0, r0, r4
20002760:	fa01 f205 	lsl.w	r2, r1, r5
20002764:	ea40 0002 	orr.w	r0, r0, r2
20002768:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
2000276c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
20002770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
20002774:	fa21 f604 	lsr.w	r6, r1, r4
20002778:	eb42 0106 	adc.w	r1, r2, r6
2000277c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
20002780:	bf08      	it	eq
20002782:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
20002786:	bd70      	pop	{r4, r5, r6, pc}
20002788:	f1c4 040c 	rsb	r4, r4, #12
2000278c:	f1c4 0520 	rsb	r5, r4, #32
20002790:	fa00 f304 	lsl.w	r3, r0, r4
20002794:	fa20 f005 	lsr.w	r0, r0, r5
20002798:	fa01 f204 	lsl.w	r2, r1, r4
2000279c:	ea40 0002 	orr.w	r0, r0, r2
200027a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
200027a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
200027a8:	f141 0100 	adc.w	r1, r1, #0
200027ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
200027b0:	bf08      	it	eq
200027b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
200027b6:	bd70      	pop	{r4, r5, r6, pc}
200027b8:	f1c4 0520 	rsb	r5, r4, #32
200027bc:	fa00 f205 	lsl.w	r2, r0, r5
200027c0:	ea4e 0e02 	orr.w	lr, lr, r2
200027c4:	fa20 f304 	lsr.w	r3, r0, r4
200027c8:	fa01 f205 	lsl.w	r2, r1, r5
200027cc:	ea43 0302 	orr.w	r3, r3, r2
200027d0:	fa21 f004 	lsr.w	r0, r1, r4
200027d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
200027d8:	fa21 f204 	lsr.w	r2, r1, r4
200027dc:	ea20 0002 	bic.w	r0, r0, r2
200027e0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
200027e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
200027e8:	bf08      	it	eq
200027ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
200027ee:	bd70      	pop	{r4, r5, r6, pc}
200027f0:	f094 0f00 	teq	r4, #0
200027f4:	d10f      	bne.n	20002816 <__aeabi_dmul+0x1c2>
200027f6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
200027fa:	0040      	lsls	r0, r0, #1
200027fc:	eb41 0101 	adc.w	r1, r1, r1
20002800:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
20002804:	bf08      	it	eq
20002806:	3c01      	subeq	r4, #1
20002808:	d0f7      	beq.n	200027fa <__aeabi_dmul+0x1a6>
2000280a:	ea41 0106 	orr.w	r1, r1, r6
2000280e:	f095 0f00 	teq	r5, #0
20002812:	bf18      	it	ne
20002814:	4770      	bxne	lr
20002816:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
2000281a:	0052      	lsls	r2, r2, #1
2000281c:	eb43 0303 	adc.w	r3, r3, r3
20002820:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
20002824:	bf08      	it	eq
20002826:	3d01      	subeq	r5, #1
20002828:	d0f7      	beq.n	2000281a <__aeabi_dmul+0x1c6>
2000282a:	ea43 0306 	orr.w	r3, r3, r6
2000282e:	4770      	bx	lr
20002830:	ea94 0f0c 	teq	r4, ip
20002834:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
20002838:	bf18      	it	ne
2000283a:	ea95 0f0c 	teqne	r5, ip
2000283e:	d00c      	beq.n	2000285a <__aeabi_dmul+0x206>
20002840:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
20002844:	bf18      	it	ne
20002846:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
2000284a:	d1d1      	bne.n	200027f0 <__aeabi_dmul+0x19c>
2000284c:	ea81 0103 	eor.w	r1, r1, r3
20002850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
20002854:	f04f 0000 	mov.w	r0, #0
20002858:	bd70      	pop	{r4, r5, r6, pc}
2000285a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
2000285e:	bf06      	itte	eq
20002860:	4610      	moveq	r0, r2
20002862:	4619      	moveq	r1, r3
20002864:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
20002868:	d019      	beq.n	2000289e <__aeabi_dmul+0x24a>
2000286a:	ea94 0f0c 	teq	r4, ip
2000286e:	d102      	bne.n	20002876 <__aeabi_dmul+0x222>
20002870:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
20002874:	d113      	bne.n	2000289e <__aeabi_dmul+0x24a>
20002876:	ea95 0f0c 	teq	r5, ip
2000287a:	d105      	bne.n	20002888 <__aeabi_dmul+0x234>
2000287c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
20002880:	bf1c      	itt	ne
20002882:	4610      	movne	r0, r2
20002884:	4619      	movne	r1, r3
20002886:	d10a      	bne.n	2000289e <__aeabi_dmul+0x24a>
20002888:	ea81 0103 	eor.w	r1, r1, r3
2000288c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
20002890:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
20002894:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
20002898:	f04f 0000 	mov.w	r0, #0
2000289c:	bd70      	pop	{r4, r5, r6, pc}
2000289e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
200028a2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
200028a6:	bd70      	pop	{r4, r5, r6, pc}

200028a8 <__aeabi_ddiv>:
200028a8:	b570      	push	{r4, r5, r6, lr}
200028aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
200028ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
200028b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
200028b6:	bf1d      	ittte	ne
200028b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
200028bc:	ea94 0f0c 	teqne	r4, ip
200028c0:	ea95 0f0c 	teqne	r5, ip
200028c4:	f000 f8a7 	bleq	20002a16 <__aeabi_ddiv+0x16e>
200028c8:	eba4 0405 	sub.w	r4, r4, r5
200028cc:	ea81 0e03 	eor.w	lr, r1, r3
200028d0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
200028d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
200028d8:	f000 8088 	beq.w	200029ec <__aeabi_ddiv+0x144>
200028dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
200028e0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
200028e4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
200028e8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
200028ec:	ea4f 2202 	mov.w	r2, r2, lsl #8
200028f0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
200028f4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
200028f8:	ea4f 2600 	mov.w	r6, r0, lsl #8
200028fc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
20002900:	429d      	cmp	r5, r3
20002902:	bf08      	it	eq
20002904:	4296      	cmpeq	r6, r2
20002906:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
2000290a:	f504 7440 	add.w	r4, r4, #768	; 0x300
2000290e:	d202      	bcs.n	20002916 <__aeabi_ddiv+0x6e>
20002910:	085b      	lsrs	r3, r3, #1
20002912:	ea4f 0232 	mov.w	r2, r2, rrx
20002916:	1ab6      	subs	r6, r6, r2
20002918:	eb65 0503 	sbc.w	r5, r5, r3
2000291c:	085b      	lsrs	r3, r3, #1
2000291e:	ea4f 0232 	mov.w	r2, r2, rrx
20002922:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
20002926:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
2000292a:	ebb6 0e02 	subs.w	lr, r6, r2
2000292e:	eb75 0e03 	sbcs.w	lr, r5, r3
20002932:	bf22      	ittt	cs
20002934:	1ab6      	subcs	r6, r6, r2
20002936:	4675      	movcs	r5, lr
20002938:	ea40 000c 	orrcs.w	r0, r0, ip
2000293c:	085b      	lsrs	r3, r3, #1
2000293e:	ea4f 0232 	mov.w	r2, r2, rrx
20002942:	ebb6 0e02 	subs.w	lr, r6, r2
20002946:	eb75 0e03 	sbcs.w	lr, r5, r3
2000294a:	bf22      	ittt	cs
2000294c:	1ab6      	subcs	r6, r6, r2
2000294e:	4675      	movcs	r5, lr
20002950:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
20002954:	085b      	lsrs	r3, r3, #1
20002956:	ea4f 0232 	mov.w	r2, r2, rrx
2000295a:	ebb6 0e02 	subs.w	lr, r6, r2
2000295e:	eb75 0e03 	sbcs.w	lr, r5, r3
20002962:	bf22      	ittt	cs
20002964:	1ab6      	subcs	r6, r6, r2
20002966:	4675      	movcs	r5, lr
20002968:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
2000296c:	085b      	lsrs	r3, r3, #1
2000296e:	ea4f 0232 	mov.w	r2, r2, rrx
20002972:	ebb6 0e02 	subs.w	lr, r6, r2
20002976:	eb75 0e03 	sbcs.w	lr, r5, r3
2000297a:	bf22      	ittt	cs
2000297c:	1ab6      	subcs	r6, r6, r2
2000297e:	4675      	movcs	r5, lr
20002980:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
20002984:	ea55 0e06 	orrs.w	lr, r5, r6
20002988:	d018      	beq.n	200029bc <__aeabi_ddiv+0x114>
2000298a:	ea4f 1505 	mov.w	r5, r5, lsl #4
2000298e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
20002992:	ea4f 1606 	mov.w	r6, r6, lsl #4
20002996:	ea4f 03c3 	mov.w	r3, r3, lsl #3
2000299a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
2000299e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
200029a2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
200029a6:	d1c0      	bne.n	2000292a <__aeabi_ddiv+0x82>
200029a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
200029ac:	d10b      	bne.n	200029c6 <__aeabi_ddiv+0x11e>
200029ae:	ea41 0100 	orr.w	r1, r1, r0
200029b2:	f04f 0000 	mov.w	r0, #0
200029b6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
200029ba:	e7b6      	b.n	2000292a <__aeabi_ddiv+0x82>
200029bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
200029c0:	bf04      	itt	eq
200029c2:	4301      	orreq	r1, r0
200029c4:	2000      	moveq	r0, #0
200029c6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
200029ca:	bf88      	it	hi
200029cc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
200029d0:	f63f aeaf 	bhi.w	20002732 <__aeabi_dmul+0xde>
200029d4:	ebb5 0c03 	subs.w	ip, r5, r3
200029d8:	bf04      	itt	eq
200029da:	ebb6 0c02 	subseq.w	ip, r6, r2
200029de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
200029e2:	f150 0000 	adcs.w	r0, r0, #0
200029e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
200029ea:	bd70      	pop	{r4, r5, r6, pc}
200029ec:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
200029f0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
200029f4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
200029f8:	bfc2      	ittt	gt
200029fa:	ebd4 050c 	rsbsgt	r5, r4, ip
200029fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
20002a02:	bd70      	popgt	{r4, r5, r6, pc}
20002a04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
20002a08:	f04f 0e00 	mov.w	lr, #0
20002a0c:	3c01      	subs	r4, #1
20002a0e:	e690      	b.n	20002732 <__aeabi_dmul+0xde>
20002a10:	ea45 0e06 	orr.w	lr, r5, r6
20002a14:	e68d      	b.n	20002732 <__aeabi_dmul+0xde>
20002a16:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
20002a1a:	ea94 0f0c 	teq	r4, ip
20002a1e:	bf08      	it	eq
20002a20:	ea95 0f0c 	teqeq	r5, ip
20002a24:	f43f af3b 	beq.w	2000289e <__aeabi_dmul+0x24a>
20002a28:	ea94 0f0c 	teq	r4, ip
20002a2c:	d10a      	bne.n	20002a44 <__aeabi_ddiv+0x19c>
20002a2e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
20002a32:	f47f af34 	bne.w	2000289e <__aeabi_dmul+0x24a>
20002a36:	ea95 0f0c 	teq	r5, ip
20002a3a:	f47f af25 	bne.w	20002888 <__aeabi_dmul+0x234>
20002a3e:	4610      	mov	r0, r2
20002a40:	4619      	mov	r1, r3
20002a42:	e72c      	b.n	2000289e <__aeabi_dmul+0x24a>
20002a44:	ea95 0f0c 	teq	r5, ip
20002a48:	d106      	bne.n	20002a58 <__aeabi_ddiv+0x1b0>
20002a4a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
20002a4e:	f43f aefd 	beq.w	2000284c <__aeabi_dmul+0x1f8>
20002a52:	4610      	mov	r0, r2
20002a54:	4619      	mov	r1, r3
20002a56:	e722      	b.n	2000289e <__aeabi_dmul+0x24a>
20002a58:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
20002a5c:	bf18      	it	ne
20002a5e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
20002a62:	f47f aec5 	bne.w	200027f0 <__aeabi_dmul+0x19c>
20002a66:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
20002a6a:	f47f af0d 	bne.w	20002888 <__aeabi_dmul+0x234>
20002a6e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
20002a72:	f47f aeeb 	bne.w	2000284c <__aeabi_dmul+0x1f8>
20002a76:	e712      	b.n	2000289e <__aeabi_dmul+0x24a>

20002a78 <__aeabi_d2iz>:
20002a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
20002a7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
20002a80:	d215      	bcs.n	20002aae <__aeabi_d2iz+0x36>
20002a82:	d511      	bpl.n	20002aa8 <__aeabi_d2iz+0x30>
20002a84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
20002a88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
20002a8c:	d912      	bls.n	20002ab4 <__aeabi_d2iz+0x3c>
20002a8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
20002a92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
20002a96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
20002a9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
20002a9e:	fa23 f002 	lsr.w	r0, r3, r2
20002aa2:	bf18      	it	ne
20002aa4:	4240      	negne	r0, r0
20002aa6:	4770      	bx	lr
20002aa8:	f04f 0000 	mov.w	r0, #0
20002aac:	4770      	bx	lr
20002aae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
20002ab2:	d105      	bne.n	20002ac0 <__aeabi_d2iz+0x48>
20002ab4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
20002ab8:	bf08      	it	eq
20002aba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
20002abe:	4770      	bx	lr
20002ac0:	f04f 0000 	mov.w	r0, #0
20002ac4:	4770      	bx	lr
20002ac6:	bf00      	nop

20002ac8 <__aeabi_frsub>:
20002ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
20002acc:	e002      	b.n	20002ad4 <__addsf3>
20002ace:	bf00      	nop

20002ad0 <__aeabi_fsub>:
20002ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

20002ad4 <__addsf3>:
20002ad4:	0042      	lsls	r2, r0, #1
20002ad6:	bf1f      	itttt	ne
20002ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
20002adc:	ea92 0f03 	teqne	r2, r3
20002ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
20002ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
20002ae8:	d06a      	beq.n	20002bc0 <__addsf3+0xec>
20002aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
20002aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
20002af2:	bfc1      	itttt	gt
20002af4:	18d2      	addgt	r2, r2, r3
20002af6:	4041      	eorgt	r1, r0
20002af8:	4048      	eorgt	r0, r1
20002afa:	4041      	eorgt	r1, r0
20002afc:	bfb8      	it	lt
20002afe:	425b      	neglt	r3, r3
20002b00:	2b19      	cmp	r3, #25
20002b02:	bf88      	it	hi
20002b04:	4770      	bxhi	lr
20002b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
20002b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
20002b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
20002b12:	bf18      	it	ne
20002b14:	4240      	negne	r0, r0
20002b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
20002b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
20002b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
20002b22:	bf18      	it	ne
20002b24:	4249      	negne	r1, r1
20002b26:	ea92 0f03 	teq	r2, r3
20002b2a:	d03f      	beq.n	20002bac <__addsf3+0xd8>
20002b2c:	f1a2 0201 	sub.w	r2, r2, #1
20002b30:	fa41 fc03 	asr.w	ip, r1, r3
20002b34:	eb10 000c 	adds.w	r0, r0, ip
20002b38:	f1c3 0320 	rsb	r3, r3, #32
20002b3c:	fa01 f103 	lsl.w	r1, r1, r3
20002b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
20002b44:	d502      	bpl.n	20002b4c <__addsf3+0x78>
20002b46:	4249      	negs	r1, r1
20002b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
20002b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
20002b50:	d313      	bcc.n	20002b7a <__addsf3+0xa6>
20002b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
20002b56:	d306      	bcc.n	20002b66 <__addsf3+0x92>
20002b58:	0840      	lsrs	r0, r0, #1
20002b5a:	ea4f 0131 	mov.w	r1, r1, rrx
20002b5e:	f102 0201 	add.w	r2, r2, #1
20002b62:	2afe      	cmp	r2, #254	; 0xfe
20002b64:	d251      	bcs.n	20002c0a <__addsf3+0x136>
20002b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
20002b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
20002b6e:	bf08      	it	eq
20002b70:	f020 0001 	biceq.w	r0, r0, #1
20002b74:	ea40 0003 	orr.w	r0, r0, r3
20002b78:	4770      	bx	lr
20002b7a:	0049      	lsls	r1, r1, #1
20002b7c:	eb40 0000 	adc.w	r0, r0, r0
20002b80:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
20002b84:	f1a2 0201 	sub.w	r2, r2, #1
20002b88:	d1ed      	bne.n	20002b66 <__addsf3+0x92>
20002b8a:	fab0 fc80 	clz	ip, r0
20002b8e:	f1ac 0c08 	sub.w	ip, ip, #8
20002b92:	ebb2 020c 	subs.w	r2, r2, ip
20002b96:	fa00 f00c 	lsl.w	r0, r0, ip
20002b9a:	bfaa      	itet	ge
20002b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
20002ba0:	4252      	neglt	r2, r2
20002ba2:	4318      	orrge	r0, r3
20002ba4:	bfbc      	itt	lt
20002ba6:	40d0      	lsrlt	r0, r2
20002ba8:	4318      	orrlt	r0, r3
20002baa:	4770      	bx	lr
20002bac:	f092 0f00 	teq	r2, #0
20002bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
20002bb4:	bf06      	itte	eq
20002bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
20002bba:	3201      	addeq	r2, #1
20002bbc:	3b01      	subne	r3, #1
20002bbe:	e7b5      	b.n	20002b2c <__addsf3+0x58>
20002bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
20002bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
20002bc8:	bf18      	it	ne
20002bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
20002bce:	d021      	beq.n	20002c14 <__addsf3+0x140>
20002bd0:	ea92 0f03 	teq	r2, r3
20002bd4:	d004      	beq.n	20002be0 <__addsf3+0x10c>
20002bd6:	f092 0f00 	teq	r2, #0
20002bda:	bf08      	it	eq
20002bdc:	4608      	moveq	r0, r1
20002bde:	4770      	bx	lr
20002be0:	ea90 0f01 	teq	r0, r1
20002be4:	bf1c      	itt	ne
20002be6:	2000      	movne	r0, #0
20002be8:	4770      	bxne	lr
20002bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
20002bee:	d104      	bne.n	20002bfa <__addsf3+0x126>
20002bf0:	0040      	lsls	r0, r0, #1
20002bf2:	bf28      	it	cs
20002bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
20002bf8:	4770      	bx	lr
20002bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
20002bfe:	bf3c      	itt	cc
20002c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
20002c04:	4770      	bxcc	lr
20002c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
20002c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
20002c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
20002c12:	4770      	bx	lr
20002c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
20002c18:	bf16      	itet	ne
20002c1a:	4608      	movne	r0, r1
20002c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
20002c20:	4601      	movne	r1, r0
20002c22:	0242      	lsls	r2, r0, #9
20002c24:	bf06      	itte	eq
20002c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
20002c2a:	ea90 0f01 	teqeq	r0, r1
20002c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
20002c32:	4770      	bx	lr

20002c34 <__aeabi_ui2f>:
20002c34:	f04f 0300 	mov.w	r3, #0
20002c38:	e004      	b.n	20002c44 <__aeabi_i2f+0x8>
20002c3a:	bf00      	nop

20002c3c <__aeabi_i2f>:
20002c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
20002c40:	bf48      	it	mi
20002c42:	4240      	negmi	r0, r0
20002c44:	ea5f 0c00 	movs.w	ip, r0
20002c48:	bf08      	it	eq
20002c4a:	4770      	bxeq	lr
20002c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
20002c50:	4601      	mov	r1, r0
20002c52:	f04f 0000 	mov.w	r0, #0
20002c56:	e01c      	b.n	20002c92 <__aeabi_l2f+0x2a>

20002c58 <__aeabi_ul2f>:
20002c58:	ea50 0201 	orrs.w	r2, r0, r1
20002c5c:	bf08      	it	eq
20002c5e:	4770      	bxeq	lr
20002c60:	f04f 0300 	mov.w	r3, #0
20002c64:	e00a      	b.n	20002c7c <__aeabi_l2f+0x14>
20002c66:	bf00      	nop

20002c68 <__aeabi_l2f>:
20002c68:	ea50 0201 	orrs.w	r2, r0, r1
20002c6c:	bf08      	it	eq
20002c6e:	4770      	bxeq	lr
20002c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
20002c74:	d502      	bpl.n	20002c7c <__aeabi_l2f+0x14>
20002c76:	4240      	negs	r0, r0
20002c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
20002c7c:	ea5f 0c01 	movs.w	ip, r1
20002c80:	bf02      	ittt	eq
20002c82:	4684      	moveq	ip, r0
20002c84:	4601      	moveq	r1, r0
20002c86:	2000      	moveq	r0, #0
20002c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
20002c8c:	bf08      	it	eq
20002c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
20002c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
20002c96:	fabc f28c 	clz	r2, ip
20002c9a:	3a08      	subs	r2, #8
20002c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
20002ca0:	db10      	blt.n	20002cc4 <__aeabi_l2f+0x5c>
20002ca2:	fa01 fc02 	lsl.w	ip, r1, r2
20002ca6:	4463      	add	r3, ip
20002ca8:	fa00 fc02 	lsl.w	ip, r0, r2
20002cac:	f1c2 0220 	rsb	r2, r2, #32
20002cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
20002cb4:	fa20 f202 	lsr.w	r2, r0, r2
20002cb8:	eb43 0002 	adc.w	r0, r3, r2
20002cbc:	bf08      	it	eq
20002cbe:	f020 0001 	biceq.w	r0, r0, #1
20002cc2:	4770      	bx	lr
20002cc4:	f102 0220 	add.w	r2, r2, #32
20002cc8:	fa01 fc02 	lsl.w	ip, r1, r2
20002ccc:	f1c2 0220 	rsb	r2, r2, #32
20002cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
20002cd4:	fa21 f202 	lsr.w	r2, r1, r2
20002cd8:	eb43 0002 	adc.w	r0, r3, r2
20002cdc:	bf08      	it	eq
20002cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
20002ce2:	4770      	bx	lr

20002ce4 <__aeabi_fmul>:
20002ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
20002ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
20002cec:	bf1e      	ittt	ne
20002cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
20002cf2:	ea92 0f0c 	teqne	r2, ip
20002cf6:	ea93 0f0c 	teqne	r3, ip
20002cfa:	d06f      	beq.n	20002ddc <__aeabi_fmul+0xf8>
20002cfc:	441a      	add	r2, r3
20002cfe:	ea80 0c01 	eor.w	ip, r0, r1
20002d02:	0240      	lsls	r0, r0, #9
20002d04:	bf18      	it	ne
20002d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
20002d0a:	d01e      	beq.n	20002d4a <__aeabi_fmul+0x66>
20002d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
20002d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
20002d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
20002d18:	fba0 3101 	umull	r3, r1, r0, r1
20002d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
20002d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
20002d24:	bf3e      	ittt	cc
20002d26:	0049      	lslcc	r1, r1, #1
20002d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
20002d2c:	005b      	lslcc	r3, r3, #1
20002d2e:	ea40 0001 	orr.w	r0, r0, r1
20002d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
20002d36:	2afd      	cmp	r2, #253	; 0xfd
20002d38:	d81d      	bhi.n	20002d76 <__aeabi_fmul+0x92>
20002d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
20002d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
20002d42:	bf08      	it	eq
20002d44:	f020 0001 	biceq.w	r0, r0, #1
20002d48:	4770      	bx	lr
20002d4a:	f090 0f00 	teq	r0, #0
20002d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
20002d52:	bf08      	it	eq
20002d54:	0249      	lsleq	r1, r1, #9
20002d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
20002d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
20002d5e:	3a7f      	subs	r2, #127	; 0x7f
20002d60:	bfc2      	ittt	gt
20002d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
20002d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
20002d6a:	4770      	bxgt	lr
20002d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
20002d70:	f04f 0300 	mov.w	r3, #0
20002d74:	3a01      	subs	r2, #1
20002d76:	dc5d      	bgt.n	20002e34 <__aeabi_fmul+0x150>
20002d78:	f112 0f19 	cmn.w	r2, #25
20002d7c:	bfdc      	itt	le
20002d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
20002d82:	4770      	bxle	lr
20002d84:	f1c2 0200 	rsb	r2, r2, #0
20002d88:	0041      	lsls	r1, r0, #1
20002d8a:	fa21 f102 	lsr.w	r1, r1, r2
20002d8e:	f1c2 0220 	rsb	r2, r2, #32
20002d92:	fa00 fc02 	lsl.w	ip, r0, r2
20002d96:	ea5f 0031 	movs.w	r0, r1, rrx
20002d9a:	f140 0000 	adc.w	r0, r0, #0
20002d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
20002da2:	bf08      	it	eq
20002da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
20002da8:	4770      	bx	lr
20002daa:	f092 0f00 	teq	r2, #0
20002dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
20002db2:	bf02      	ittt	eq
20002db4:	0040      	lsleq	r0, r0, #1
20002db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
20002dba:	3a01      	subeq	r2, #1
20002dbc:	d0f9      	beq.n	20002db2 <__aeabi_fmul+0xce>
20002dbe:	ea40 000c 	orr.w	r0, r0, ip
20002dc2:	f093 0f00 	teq	r3, #0
20002dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
20002dca:	bf02      	ittt	eq
20002dcc:	0049      	lsleq	r1, r1, #1
20002dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
20002dd2:	3b01      	subeq	r3, #1
20002dd4:	d0f9      	beq.n	20002dca <__aeabi_fmul+0xe6>
20002dd6:	ea41 010c 	orr.w	r1, r1, ip
20002dda:	e78f      	b.n	20002cfc <__aeabi_fmul+0x18>
20002ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
20002de0:	ea92 0f0c 	teq	r2, ip
20002de4:	bf18      	it	ne
20002de6:	ea93 0f0c 	teqne	r3, ip
20002dea:	d00a      	beq.n	20002e02 <__aeabi_fmul+0x11e>
20002dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
20002df0:	bf18      	it	ne
20002df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
20002df6:	d1d8      	bne.n	20002daa <__aeabi_fmul+0xc6>
20002df8:	ea80 0001 	eor.w	r0, r0, r1
20002dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
20002e00:	4770      	bx	lr
20002e02:	f090 0f00 	teq	r0, #0
20002e06:	bf17      	itett	ne
20002e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
20002e0c:	4608      	moveq	r0, r1
20002e0e:	f091 0f00 	teqne	r1, #0
20002e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
20002e16:	d014      	beq.n	20002e42 <__aeabi_fmul+0x15e>
20002e18:	ea92 0f0c 	teq	r2, ip
20002e1c:	d101      	bne.n	20002e22 <__aeabi_fmul+0x13e>
20002e1e:	0242      	lsls	r2, r0, #9
20002e20:	d10f      	bne.n	20002e42 <__aeabi_fmul+0x15e>
20002e22:	ea93 0f0c 	teq	r3, ip
20002e26:	d103      	bne.n	20002e30 <__aeabi_fmul+0x14c>
20002e28:	024b      	lsls	r3, r1, #9
20002e2a:	bf18      	it	ne
20002e2c:	4608      	movne	r0, r1
20002e2e:	d108      	bne.n	20002e42 <__aeabi_fmul+0x15e>
20002e30:	ea80 0001 	eor.w	r0, r0, r1
20002e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
20002e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
20002e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
20002e40:	4770      	bx	lr
20002e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
20002e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
20002e4a:	4770      	bx	lr

20002e4c <__aeabi_fdiv>:
20002e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
20002e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
20002e54:	bf1e      	ittt	ne
20002e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
20002e5a:	ea92 0f0c 	teqne	r2, ip
20002e5e:	ea93 0f0c 	teqne	r3, ip
20002e62:	d069      	beq.n	20002f38 <__aeabi_fdiv+0xec>
20002e64:	eba2 0203 	sub.w	r2, r2, r3
20002e68:	ea80 0c01 	eor.w	ip, r0, r1
20002e6c:	0249      	lsls	r1, r1, #9
20002e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
20002e72:	d037      	beq.n	20002ee4 <__aeabi_fdiv+0x98>
20002e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
20002e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
20002e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
20002e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
20002e84:	428b      	cmp	r3, r1
20002e86:	bf38      	it	cc
20002e88:	005b      	lslcc	r3, r3, #1
20002e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
20002e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
20002e92:	428b      	cmp	r3, r1
20002e94:	bf24      	itt	cs
20002e96:	1a5b      	subcs	r3, r3, r1
20002e98:	ea40 000c 	orrcs.w	r0, r0, ip
20002e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
20002ea0:	bf24      	itt	cs
20002ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
20002ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
20002eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
20002eae:	bf24      	itt	cs
20002eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
20002eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
20002eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
20002ebc:	bf24      	itt	cs
20002ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
20002ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
20002ec6:	011b      	lsls	r3, r3, #4
20002ec8:	bf18      	it	ne
20002eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
20002ece:	d1e0      	bne.n	20002e92 <__aeabi_fdiv+0x46>
20002ed0:	2afd      	cmp	r2, #253	; 0xfd
20002ed2:	f63f af50 	bhi.w	20002d76 <__aeabi_fmul+0x92>
20002ed6:	428b      	cmp	r3, r1
20002ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
20002edc:	bf08      	it	eq
20002ede:	f020 0001 	biceq.w	r0, r0, #1
20002ee2:	4770      	bx	lr
20002ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
20002ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
20002eec:	327f      	adds	r2, #127	; 0x7f
20002eee:	bfc2      	ittt	gt
20002ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
20002ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
20002ef8:	4770      	bxgt	lr
20002efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
20002efe:	f04f 0300 	mov.w	r3, #0
20002f02:	3a01      	subs	r2, #1
20002f04:	e737      	b.n	20002d76 <__aeabi_fmul+0x92>
20002f06:	f092 0f00 	teq	r2, #0
20002f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
20002f0e:	bf02      	ittt	eq
20002f10:	0040      	lsleq	r0, r0, #1
20002f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
20002f16:	3a01      	subeq	r2, #1
20002f18:	d0f9      	beq.n	20002f0e <__aeabi_fdiv+0xc2>
20002f1a:	ea40 000c 	orr.w	r0, r0, ip
20002f1e:	f093 0f00 	teq	r3, #0
20002f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
20002f26:	bf02      	ittt	eq
20002f28:	0049      	lsleq	r1, r1, #1
20002f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
20002f2e:	3b01      	subeq	r3, #1
20002f30:	d0f9      	beq.n	20002f26 <__aeabi_fdiv+0xda>
20002f32:	ea41 010c 	orr.w	r1, r1, ip
20002f36:	e795      	b.n	20002e64 <__aeabi_fdiv+0x18>
20002f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
20002f3c:	ea92 0f0c 	teq	r2, ip
20002f40:	d108      	bne.n	20002f54 <__aeabi_fdiv+0x108>
20002f42:	0242      	lsls	r2, r0, #9
20002f44:	f47f af7d 	bne.w	20002e42 <__aeabi_fmul+0x15e>
20002f48:	ea93 0f0c 	teq	r3, ip
20002f4c:	f47f af70 	bne.w	20002e30 <__aeabi_fmul+0x14c>
20002f50:	4608      	mov	r0, r1
20002f52:	e776      	b.n	20002e42 <__aeabi_fmul+0x15e>
20002f54:	ea93 0f0c 	teq	r3, ip
20002f58:	d104      	bne.n	20002f64 <__aeabi_fdiv+0x118>
20002f5a:	024b      	lsls	r3, r1, #9
20002f5c:	f43f af4c 	beq.w	20002df8 <__aeabi_fmul+0x114>
20002f60:	4608      	mov	r0, r1
20002f62:	e76e      	b.n	20002e42 <__aeabi_fmul+0x15e>
20002f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
20002f68:	bf18      	it	ne
20002f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
20002f6e:	d1ca      	bne.n	20002f06 <__aeabi_fdiv+0xba>
20002f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
20002f74:	f47f af5c 	bne.w	20002e30 <__aeabi_fmul+0x14c>
20002f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
20002f7c:	f47f af3c 	bne.w	20002df8 <__aeabi_fmul+0x114>
20002f80:	e75f      	b.n	20002e42 <__aeabi_fmul+0x15e>
20002f82:	bf00      	nop

20002f84 <__aeabi_f2iz>:
20002f84:	ea4f 0240 	mov.w	r2, r0, lsl #1
20002f88:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
20002f8c:	d30f      	bcc.n	20002fae <__aeabi_f2iz+0x2a>
20002f8e:	f04f 039e 	mov.w	r3, #158	; 0x9e
20002f92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
20002f96:	d90d      	bls.n	20002fb4 <__aeabi_f2iz+0x30>
20002f98:	ea4f 2300 	mov.w	r3, r0, lsl #8
20002f9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
20002fa0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
20002fa4:	fa23 f002 	lsr.w	r0, r3, r2
20002fa8:	bf18      	it	ne
20002faa:	4240      	negne	r0, r0
20002fac:	4770      	bx	lr
20002fae:	f04f 0000 	mov.w	r0, #0
20002fb2:	4770      	bx	lr
20002fb4:	f112 0f61 	cmn.w	r2, #97	; 0x61
20002fb8:	d101      	bne.n	20002fbe <__aeabi_f2iz+0x3a>
20002fba:	0242      	lsls	r2, r0, #9
20002fbc:	d105      	bne.n	20002fca <__aeabi_f2iz+0x46>
20002fbe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
20002fc2:	bf08      	it	eq
20002fc4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
20002fc8:	4770      	bx	lr
20002fca:	f04f 0000 	mov.w	r0, #0
20002fce:	4770      	bx	lr

20002fd0 <__libc_init_array>:
20002fd0:	b570      	push	{r4, r5, r6, lr}
20002fd2:	f243 36a4 	movw	r6, #13220	; 0x33a4
20002fd6:	f243 35a4 	movw	r5, #13220	; 0x33a4
20002fda:	f2c2 0600 	movt	r6, #8192	; 0x2000
20002fde:	f2c2 0500 	movt	r5, #8192	; 0x2000
20002fe2:	1b76      	subs	r6, r6, r5
20002fe4:	10b6      	asrs	r6, r6, #2
20002fe6:	d006      	beq.n	20002ff6 <__libc_init_array+0x26>
20002fe8:	2400      	movs	r4, #0
20002fea:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
20002fee:	3401      	adds	r4, #1
20002ff0:	4798      	blx	r3
20002ff2:	42a6      	cmp	r6, r4
20002ff4:	d8f9      	bhi.n	20002fea <__libc_init_array+0x1a>
20002ff6:	f243 35a4 	movw	r5, #13220	; 0x33a4
20002ffa:	f243 36a8 	movw	r6, #13224	; 0x33a8
20002ffe:	f2c2 0500 	movt	r5, #8192	; 0x2000
20003002:	f2c2 0600 	movt	r6, #8192	; 0x2000
20003006:	1b76      	subs	r6, r6, r5
20003008:	f000 f9c0 	bl	2000338c <_init>
2000300c:	10b6      	asrs	r6, r6, #2
2000300e:	d006      	beq.n	2000301e <__libc_init_array+0x4e>
20003010:	2400      	movs	r4, #0
20003012:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
20003016:	3401      	adds	r4, #1
20003018:	4798      	blx	r3
2000301a:	42a6      	cmp	r6, r4
2000301c:	d8f9      	bhi.n	20003012 <__libc_init_array+0x42>
2000301e:	bd70      	pop	{r4, r5, r6, pc}

20003020 <memset>:
20003020:	2a03      	cmp	r2, #3
20003022:	b2c9      	uxtb	r1, r1
20003024:	b430      	push	{r4, r5}
20003026:	d807      	bhi.n	20003038 <memset+0x18>
20003028:	b122      	cbz	r2, 20003034 <memset+0x14>
2000302a:	2300      	movs	r3, #0
2000302c:	54c1      	strb	r1, [r0, r3]
2000302e:	3301      	adds	r3, #1
20003030:	4293      	cmp	r3, r2
20003032:	d1fb      	bne.n	2000302c <memset+0xc>
20003034:	bc30      	pop	{r4, r5}
20003036:	4770      	bx	lr
20003038:	eb00 0c02 	add.w	ip, r0, r2
2000303c:	4603      	mov	r3, r0
2000303e:	e001      	b.n	20003044 <memset+0x24>
20003040:	f803 1c01 	strb.w	r1, [r3, #-1]
20003044:	f003 0403 	and.w	r4, r3, #3
20003048:	461a      	mov	r2, r3
2000304a:	3301      	adds	r3, #1
2000304c:	2c00      	cmp	r4, #0
2000304e:	d1f7      	bne.n	20003040 <memset+0x20>
20003050:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
20003054:	ebc2 040c 	rsb	r4, r2, ip
20003058:	fb03 f301 	mul.w	r3, r3, r1
2000305c:	e01f      	b.n	2000309e <memset+0x7e>
2000305e:	f842 3c40 	str.w	r3, [r2, #-64]
20003062:	f842 3c3c 	str.w	r3, [r2, #-60]
20003066:	f842 3c38 	str.w	r3, [r2, #-56]
2000306a:	f842 3c34 	str.w	r3, [r2, #-52]
2000306e:	f842 3c30 	str.w	r3, [r2, #-48]
20003072:	f842 3c2c 	str.w	r3, [r2, #-44]
20003076:	f842 3c28 	str.w	r3, [r2, #-40]
2000307a:	f842 3c24 	str.w	r3, [r2, #-36]
2000307e:	f842 3c20 	str.w	r3, [r2, #-32]
20003082:	f842 3c1c 	str.w	r3, [r2, #-28]
20003086:	f842 3c18 	str.w	r3, [r2, #-24]
2000308a:	f842 3c14 	str.w	r3, [r2, #-20]
2000308e:	f842 3c10 	str.w	r3, [r2, #-16]
20003092:	f842 3c0c 	str.w	r3, [r2, #-12]
20003096:	f842 3c08 	str.w	r3, [r2, #-8]
2000309a:	f842 3c04 	str.w	r3, [r2, #-4]
2000309e:	4615      	mov	r5, r2
200030a0:	3240      	adds	r2, #64	; 0x40
200030a2:	2c3f      	cmp	r4, #63	; 0x3f
200030a4:	f1a4 0440 	sub.w	r4, r4, #64	; 0x40
200030a8:	dcd9      	bgt.n	2000305e <memset+0x3e>
200030aa:	462a      	mov	r2, r5
200030ac:	ebc5 040c 	rsb	r4, r5, ip
200030b0:	e007      	b.n	200030c2 <memset+0xa2>
200030b2:	f842 3c10 	str.w	r3, [r2, #-16]
200030b6:	f842 3c0c 	str.w	r3, [r2, #-12]
200030ba:	f842 3c08 	str.w	r3, [r2, #-8]
200030be:	f842 3c04 	str.w	r3, [r2, #-4]
200030c2:	4615      	mov	r5, r2
200030c4:	3210      	adds	r2, #16
200030c6:	2c0f      	cmp	r4, #15
200030c8:	f1a4 0410 	sub.w	r4, r4, #16
200030cc:	dcf1      	bgt.n	200030b2 <memset+0x92>
200030ce:	462a      	mov	r2, r5
200030d0:	ebc5 050c 	rsb	r5, r5, ip
200030d4:	e001      	b.n	200030da <memset+0xba>
200030d6:	f842 3c04 	str.w	r3, [r2, #-4]
200030da:	4614      	mov	r4, r2
200030dc:	3204      	adds	r2, #4
200030de:	2d03      	cmp	r5, #3
200030e0:	f1a5 0504 	sub.w	r5, r5, #4
200030e4:	dcf7      	bgt.n	200030d6 <memset+0xb6>
200030e6:	e001      	b.n	200030ec <memset+0xcc>
200030e8:	f804 1b01 	strb.w	r1, [r4], #1
200030ec:	4564      	cmp	r4, ip
200030ee:	d3fb      	bcc.n	200030e8 <memset+0xc8>
200030f0:	e7a0      	b.n	20003034 <memset+0x14>
200030f2:	bf00      	nop

200030f4 <strncmp>:
200030f4:	b430      	push	{r4, r5}
200030f6:	4613      	mov	r3, r2
200030f8:	2a00      	cmp	r2, #0
200030fa:	d043      	beq.n	20003184 <strncmp+0x90>
200030fc:	ea41 0200 	orr.w	r2, r1, r0
20003100:	f012 0f03 	tst.w	r2, #3
20003104:	d125      	bne.n	20003152 <strncmp+0x5e>
20003106:	2b03      	cmp	r3, #3
20003108:	4604      	mov	r4, r0
2000310a:	460d      	mov	r5, r1
2000310c:	d93d      	bls.n	2000318a <strncmp+0x96>
2000310e:	6802      	ldr	r2, [r0, #0]
20003110:	6809      	ldr	r1, [r1, #0]
20003112:	428a      	cmp	r2, r1
20003114:	d139      	bne.n	2000318a <strncmp+0x96>
20003116:	3b04      	subs	r3, #4
20003118:	d034      	beq.n	20003184 <strncmp+0x90>
2000311a:	f1a2 3101 	sub.w	r1, r2, #16843009	; 0x1010101
2000311e:	ea21 0202 	bic.w	r2, r1, r2
20003122:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
20003126:	d00d      	beq.n	20003144 <strncmp+0x50>
20003128:	e02c      	b.n	20003184 <strncmp+0x90>
2000312a:	6822      	ldr	r2, [r4, #0]
2000312c:	6829      	ldr	r1, [r5, #0]
2000312e:	f1a2 3001 	sub.w	r0, r2, #16843009	; 0x1010101
20003132:	428a      	cmp	r2, r1
20003134:	ea20 0002 	bic.w	r0, r0, r2
20003138:	d127      	bne.n	2000318a <strncmp+0x96>
2000313a:	3b04      	subs	r3, #4
2000313c:	d022      	beq.n	20003184 <strncmp+0x90>
2000313e:	f010 3f80 	tst.w	r0, #2155905152	; 0x80808080
20003142:	d11f      	bne.n	20003184 <strncmp+0x90>
20003144:	3404      	adds	r4, #4
20003146:	3504      	adds	r5, #4
20003148:	2b03      	cmp	r3, #3
2000314a:	d8ee      	bhi.n	2000312a <strncmp+0x36>
2000314c:	4620      	mov	r0, r4
2000314e:	4629      	mov	r1, r5
20003150:	b1f3      	cbz	r3, 20003190 <strncmp+0x9c>
20003152:	7804      	ldrb	r4, [r0, #0]
20003154:	3b01      	subs	r3, #1
20003156:	f891 c000 	ldrb.w	ip, [r1]
2000315a:	4564      	cmp	r4, ip
2000315c:	d10f      	bne.n	2000317e <strncmp+0x8a>
2000315e:	b18b      	cbz	r3, 20003184 <strncmp+0x90>
20003160:	b184      	cbz	r4, 20003184 <strncmp+0x90>
20003162:	3b01      	subs	r3, #1
20003164:	2200      	movs	r2, #0
20003166:	e002      	b.n	2000316e <strncmp+0x7a>
20003168:	b163      	cbz	r3, 20003184 <strncmp+0x90>
2000316a:	b15c      	cbz	r4, 20003184 <strncmp+0x90>
2000316c:	3b01      	subs	r3, #1
2000316e:	1884      	adds	r4, r0, r2
20003170:	188d      	adds	r5, r1, r2
20003172:	3201      	adds	r2, #1
20003174:	7864      	ldrb	r4, [r4, #1]
20003176:	f895 c001 	ldrb.w	ip, [r5, #1]
2000317a:	4564      	cmp	r4, ip
2000317c:	d0f4      	beq.n	20003168 <strncmp+0x74>
2000317e:	ebcc 0004 	rsb	r0, ip, r4
20003182:	e000      	b.n	20003186 <strncmp+0x92>
20003184:	2000      	movs	r0, #0
20003186:	bc30      	pop	{r4, r5}
20003188:	4770      	bx	lr
2000318a:	4620      	mov	r0, r4
2000318c:	4629      	mov	r1, r5
2000318e:	e7e0      	b.n	20003152 <strncmp+0x5e>
20003190:	7824      	ldrb	r4, [r4, #0]
20003192:	f895 c000 	ldrb.w	ip, [r5]
20003196:	ebcc 0004 	rsb	r0, ip, r4
2000319a:	e7f4      	b.n	20003186 <strncmp+0x92>

2000319c <initcmd>:
2000319c:	03ef 8003 cf02 0003 30c1 04ed 0364 8112     .........0..d...
200031ac:	03e8 0085 cb78 3905 002c 0234 01f7 ea20     ....x..9,.4... .
200031bc:	0002 c000 2301 01c1 c510 3e02 c728 8601     .....#.....>(...
200031cc:	0136 3748 0001 013a b155 0002 b618 0803     6.H7..:.U.......
200031dc:	2782 01f2 2600 0101 0fe0 310f 0c2b 080e     .'...&.....1+...
200031ec:	f14e 0737 0310 090e e100 000f 140e 1103     N.7.............
200031fc:	3107 48c1 0f08 310c 0f36 8011 8029 0000     .1.H...16...)...
2000320c:	4441 4443 7269 6365 4974 706e 7475 305f     ADCDirectInput_0
2000321c:	0000 0000 4441 4443 7269 6365 4974 706e     ....ADCDirectInp
2000322c:	7475 315f 0000 0000                         ut_1....

20003234 <g_config_reg_lut>:
20003234:	3000 4001 3004 4001 3008 4001 300c 4001     .0.@.0.@.0.@.0.@
20003244:	3010 4001 3014 4001 3018 4001 301c 4001     .0.@.0.@.0.@.0.@
20003254:	3020 4001 3024 4001 3028 4001 302c 4001      0.@$0.@(0.@,0.@
20003264:	3030 4001 3034 4001 3038 4001 303c 4001     00.@40.@80.@<0.@
20003274:	3040 4001 3044 4001 3048 4001 304c 4001     @0.@D0.@H0.@L0.@
20003284:	3050 4001 3054 4001 3058 4001 305c 4001     P0.@T0.@X0.@\0.@
20003294:	3060 4001 3064 4001 3068 4001 306c 4001     `0.@d0.@h0.@l0.@
200032a4:	3070 4001 3074 4001 3078 4001 307c 4001     p0.@t0.@x0.@|0.@

200032b4 <g_gpio_irqn_lut>:
200032b4:	0020 0021 0022 0023 0024 0025 0026 0027      .!.".#.$.%.&.'.
200032c4:	0028 0029 002a 002b 002c 002d 002e 002f     (.).*.+.,.-.../.
200032d4:	0030 0031 0032 0033 0034 0035 0036 0037     0.1.2.3.4.5.6.7.
200032e4:	0038 0039 003a 003b 003c 003d 003e 003f     8.9.:.;.<.=.>.?.

200032f4 <g_ace_channel_0_name>:
200032f4:	4441 4443 7269 6365 4974 706e 7475 305f     ADCDirectInput_0
20003304:	0000 0000                                   ....

20003308 <g_ace_channel_1_name>:
20003308:	4453 5f44 0030 0000                         SDD_0...

20003310 <g_ace_channel_2_name>:
20003310:	4441 4443 7269 6365 4974 706e 7475 315f     ADCDirectInput_1
20003320:	0000 0000                                   ....

20003324 <g_ace_channel_3_name>:
20003324:	4453 5f44 0031 0000                         SDD_1...

2000332c <channel_type_lut>:
2000332c:	0000 0100 0002 0100 0002 0000 ff00 00ff     ................
2000333c:	0000 0100 0002 0100 0002 0000 ff00 00ff     ................
2000334c:	0000 0100 ff02 ffff 00ff 0000 ff00 00ff     ................

2000335c <channel_quad_lut>:
2000335c:	00ff 0000 0100 0101 ff01 ffff ffff ffff     ................
2000336c:	02ff 0202 0302 0303 ff03 ffff ffff ffff     ................
2000337c:	04ff 0404 ff04 ffff ffff ffff ffff ffff     ................

2000338c <_init>:
2000338c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000338e:	bf00      	nop
20003390:	bcf8      	pop	{r3, r4, r5, r6, r7}
20003392:	bc08      	pop	{r3}
20003394:	469e      	mov	lr, r3
20003396:	4770      	bx	lr

20003398 <_fini>:
20003398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000339a:	bf00      	nop
2000339c:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000339e:	bc08      	pop	{r3}
200033a0:	469e      	mov	lr, r3
200033a2:	4770      	bx	lr

200033a4 <__frame_dummy_init_array_entry>:
200033a4:	0485 2000                                   ... 

200033a8 <__do_global_dtors_aux_fini_array_entry>:
200033a8:	0471 2000                                   q.. 
