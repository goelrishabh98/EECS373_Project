
TouchScreenFinal_MSS_CM3_0_app:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .init         00000470  00000000  60000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00004194  00000470  60000470  00008470  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         0000001c  20000000  60004604  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000294  2000001c  60004620  0001001c  2**2
                  ALLOC
  4 .comment      0000025a  00000000  00000000  0001001c  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000009a8  00000000  00000000  00010276  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001a1b  00000000  00000000  00010c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000fa15  00000000  00000000  00012639  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001cdf  00000000  00000000  0002204e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000055d0  00000000  00000000  00023d2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000019e8  00000000  00000000  00029300  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004e1f  00000000  00000000  0002ace8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003b2b  00000000  00000000  0002fb07  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 0005d06b  00000000  00000000  00033632  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000025  00000000  00000000  0009069d  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 000009d0  00000000  00000000  000906c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .init:

00000000 <__vector_table_vma_base_address>:
	  writeRegister8(STMPE_INT_CTRL,
	                 STMPE_INT_CTRL_POL_HIGH | STMPE_INT_CTRL_ENABLE);


}
int16_t getX(){
   0:	20010000 	.word	0x20010000
   4:	00000299 	.word	0x00000299
	MSS_TIM1_stop();
}

void delayMicro(uint32_t time){

	MSS_TIM1_init(MSS_TIMER_ONE_SHOT_MODE);
   8:	00000309 	.word	0x00000309
	    }
}

void sendCommand16(uint8_t commandByte, uint16_t *dataBytes){

	set_SPI_CS();
   c:	0000030b 	.word	0x0000030b
	set_DC_LOW();
  10:	0000030d 	.word	0x0000030d
	configureSPI(8);
  14:	0000030f 	.word	0x0000030f

int16_t getZ(uint16_t x){
	int16_t z;

	MSS_GPIO_config(yp, MSS_GPIO_INPUT_MODE);
	MSS_GPIO_config(yn, MSS_GPIO_OUTPUT_MODE);
  18:	00000311 	.word	0x00000311
	...
int16_t getX(){
	int samples[2];
	MSS_GPIO_set_output(yn, 0);
	MSS_GPIO_config(yp, MSS_GPIO_INPUT_MODE);
	MSS_GPIO_config(yn, MSS_GPIO_INPUT_MODE);
	MSS_GPIO_config(xp, MSS_GPIO_OUTPUT_MODE);
  2c:	00000313 	.word	0x00000313
      heap_end = &_end;
    }
    
    prev_heap_end = heap_end;
    asm volatile ("MRS %0, msp" : "=r" (stack_ptr) );
    if (heap_end + incr > stack_ptr)
  30:	00000315 	.word	0x00000315
    }
    
    /*--------------------------------------------------------------------------
     * Output text to the UART.
     */
    MSS_UART_polled_tx( &g_mss_uart0, (uint8_t *)ptr, len );
  34:	00000000 	.word	0x00000000
  38:	00000317 	.word	0x00000317
  3c:	00000319 	.word	0x00000319
  40:	0000031b 	.word	0x0000031b
    
    return len;
#else   /* ACTEL_STDIO_THRU_UART */
    return 0;
#endif  /* ACTEL_STDIO_THRU_UART */
}
  44:	0000031d 	.word	0x0000031d
	MSS_GPIO_config(yn, MSS_GPIO_OUTPUT_MODE);
	MSS_GPIO_config(xp, MSS_GPIO_OUTPUT_MODE);
	MSS_GPIO_config(xn, MSS_GPIO_INPUT_MODE);

	MSS_GPIO_set_output(xp, 0);
	MSS_GPIO_set_output(yn, 1);
  48:	0000031f 	.word	0x0000031f
    prev_heap_end = heap_end;
    asm volatile ("MRS %0, msp" : "=r" (stack_ptr) );
    if (heap_end + incr > stack_ptr)
    {
      _write_r ((void *)0, 1, "Heap and stack collision\n", 25);
      _exit (1);
  4c:	00000321 	.word	0x00000321
  50:	00000323 	.word	0x00000323
    }
  
    heap_end += incr;
  54:	00000325 	.word	0x00000325
  58:	00000327 	.word	0x00000327
  5c:	00000329 	.word	0x00000329
    return (caddr_t) prev_heap_end;
}
  60:	0000032b 	.word	0x0000032b
	MSS_GPIO_set_output(xn, 0);
	delayMicro(500);



	if (samples[0] - samples[1] < -4 || samples[0] - samples[1] > 4) {
  64:	0000032d 	.word	0x0000032d

	MSS_GPIO_set_output(xp, 0);
	MSS_GPIO_set_output(yn, 1);

	int z1 = ACE_get_ppe_sample(ace_x);
	int z2 = ACE_get_ppe_sample(ace_y);
  68:	00001fa5 	.word	0x00001fa5
	MSS_GPIO_set_output(yn, 0);

	delayMicro(500);

	samples[0] = ACE_get_ppe_sample(ace_x);
	samples[1] = ACE_get_ppe_sample(ace_x);
  6c:	00001fd5 	.word	0x00001fd5
  70:	00002809 	.word	0x00002809
  74:	00002839 	.word	0x00002839
  78:	00002f31 	.word	0x00002f31
	delayMicro(500);



	if (samples[0] - samples[1] < -4 || samples[0] - samples[1] > 4) {
	  return -1;
  7c:	00000339 	.word	0x00000339
	delayMicro(500);

	samples[0] = ACE_get_ppe_sample(ace_x);
	samples[1] = ACE_get_ppe_sample(ace_x);

    if (samples[0] - samples[1] < -4 || samples[0] - samples[1] > 4) {
  80:	0000033b 	.word	0x0000033b


	if (samples[0] - samples[1] < -4 || samples[0] - samples[1] > 4) {
	  return -1;
   } else {
	 samples[1] = (samples[0] + samples[1]) >> 1; // average 2 samples
  84:	00002f61 	.word	0x00002f61
	int z2 = ACE_get_ppe_sample(ace_y);

	if (rxplate != 0) {
	 // now read the x
	 float rtouch;
	 rtouch = z2;
  88:	0000033f 	.word	0x0000033f
  8c:	00000341 	.word	0x00000341
	  return -1;
   } else {
	 samples[1] = (samples[0] + samples[1]) >> 1; // average 2 samples
   }

	MSS_GPIO_set_output(xp, 0);
  90:	00000343 	.word	0x00000343

	if (rxplate != 0) {
	 // now read the x
	 float rtouch;
	 rtouch = z2;
	 rtouch /= z1;
  94:	00000345 	.word	0x00000345

	samples[0] = ACE_get_ppe_sample(ace_x);
	samples[1] = ACE_get_ppe_sample(ace_x);

    if (samples[0] - samples[1] < -4 || samples[0] - samples[1] > 4) {
	  return -1;
  98:	00000347 	.word	0x00000347
   } else {
	 samples[1] = (samples[0] + samples[1]) >> 1; // average 2 samples
   }

	MSS_GPIO_set_output(xp, 0);
	return ((samples[1]/4080.0f)*240);
  9c:	00000349 	.word	0x00000349
	samples[1] = ACE_get_ppe_sample(ace_x);

    if (samples[0] - samples[1] < -4 || samples[0] - samples[1] > 4) {
	  return -1;
   } else {
	 samples[1] = (samples[0] + samples[1]) >> 1; // average 2 samples
  a0:	0000034b 	.word	0x0000034b
	...
   }

	MSS_GPIO_set_output(yp, 0);

	return ((samples[1]/4080.0f)*320);
  bc:	0000034d 	.word	0x0000034d
  c0:	0000034f 	.word	0x0000034f
	 samples[1] = (samples[0] + samples[1]) >> 1; // average 2 samples
   }

	MSS_GPIO_set_output(xp, 0);
	return ((samples[1]/4080.0f)*240);
}
  c4:	00000351 	.word	0x00000351
	 float rtouch;
	 rtouch = z2;
	 rtouch /= z1;
	 rtouch -= 1;
	 rtouch *= x;
	 rtouch *= rxplate;
  c8:	00000353 	.word	0x00000353
  cc:	00000355 	.word	0x00000355
  d0:	00000357 	.word	0x00000357
  d4:	00000359 	.word	0x00000359
    /* Perform the remainder of the transfer by sending a byte every time a byte
     * has been received. This should ensure that no Rx overflow can happen in
     * case of an interrupt occurs during this function. */
    while(transfer_idx < transfer_size)
    {
        rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
  d8:	0000035b 	.word	0x0000035b
  dc:	0000035d 	.word	0x0000035d
        if(0u == rx_fifo_empty)
  e0:	0000035f 	.word	0x0000035f
        {
            /* Process received byte. */
            rx_raw = this_spi->hw_reg->RX_DATA;
  e4:	00000361 	.word	0x00000361
            if(transfer_idx >= cmd_byte_size)
  e8:	00000363 	.word	0x00000363
            {
                if(rx_idx < rd_byte_size)
  ec:	00000365 	.word	0x00000365
            this_spi->hw_reg->TX_DATA = this_spi->slave_tx_buffer[this_spi->slave_tx_idx];
        }
        else if(0u != this_spi->cmd_done)
        {
            /* Fill with 0s if no need to insert command response */
            this_spi->hw_reg->TX_DATA = 0x00u;
  f0:	00000367 	.word	0x00000367
    {
        if(this_spi->slave_tx_idx < this_spi->slave_tx_size)
        {
            this_spi->hw_reg->TX_DATA = this_spi->slave_tx_buffer[this_spi->slave_tx_idx];
        }
        else if(0u != this_spi->cmd_done)
  f4:	00000369 	.word	0x00000369
            {
                if(rx_idx < rd_byte_size)
                {
                    rd_buffer[rx_idx] = (uint8_t)rx_raw;   
                }
                ++rx_idx;
  f8:	0000036b 	.word	0x0000036b
            }
            ++transfer_idx;
  fc:	0000036d 	.word	0x0000036d
    /* Load the transmit FIFO. */
    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) && (0u == done))
    {
        if(this_spi->slave_tx_idx < this_spi->slave_tx_size)
        {
            this_spi->hw_reg->TX_DATA = this_spi->slave_tx_buffer[this_spi->slave_tx_idx];
 100:	0000036f 	.word	0x0000036f
                    rd_buffer[rx_idx] = (uint8_t)rx_raw;   
                }
                ++rx_idx;
            }
            ++transfer_idx;
            --transit;
 104:	00000371 	.word	0x00000371
        }

        tx_fifo_full = this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK;
 108:	00000373 	.word	0x00000373
 10c:	00000375 	.word	0x00000375
            this_spi->hw_reg->TX_DATA = this_spi->slave_tx_buffer[this_spi->slave_tx_idx];
        }
        else if(0u != this_spi->cmd_done)
        {
            /* Fill with 0s if no need to insert command response */
            this_spi->hw_reg->TX_DATA = 0x00u;
 110:	00000377 	.word	0x00000377
        }

        tx_fifo_full = this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK;
        if(0u == tx_fifo_full)
        {
            if(transit < RX_FIFO_SIZE)
 114:	00000379 	.word	0x00000379
            {
                /* Send another byte. */
                if(tx_idx < cmd_byte_size)
 118:	0000037b 	.word	0x0000037b
                {
                    this_spi->hw_reg->TX_DATA = cmd_buffer[tx_idx];
 11c:	0000037d 	.word	0x0000037d
 120:	0000037f 	.word	0x0000037f
                    ++tx_idx;
 124:	00000381 	.word	0x00000381
 128:	00000383 	.word	0x00000383
                    ++transit;
 12c:	00000385 	.word	0x00000385
 130:	00000387 	.word	0x00000387
                }
                else
                {
                    if(tx_idx < transfer_size)
 134:	00000389 	.word	0x00000389
                    {
                        this_spi->hw_reg->TX_DATA = 0x00u;
 138:	0000038b 	.word	0x0000038b
                        ++tx_idx;
 13c:	0000038d 	.word	0x0000038d
 140:	0000038f 	.word	0x0000038f
                        ++transit;
 144:	00000391 	.word	0x00000391
        this_spi->hw_reg->INT_CLEAR = TXDONE_IRQ_MASK;
        this_spi->hw_reg->CONTROL |= CTRL_TX_IRQ_EN_MASK;
    }
    else
    {
        this_spi->hw_reg->COMMAND |= AUTOFILL_MASK;
 148:	00000393 	.word	0x00000393
        }
    }
    /* Perform the remainder of the transfer by sending a byte every time a byte
     * has been received. This should ensure that no Rx overflow can happen in
     * case of an interrupt occurs during this function. */
    while(transfer_idx < transfer_size)
 14c:	00000395 	.word	0x00000395
    {
        this_spi->hw_reg->COMMAND |= AUTOFILL_MASK;
    }
    
    /* Ensure command interrupt disabled if no handler */
    if(0u == this_spi->cmd_handler)
 150:	00000397 	.word	0x00000397
    {
        this_spi->hw_reg->CONTROL2 &= ~(uint32_t)C2_ENABLE_CMD_IRQ_MASK;
 154:	00000399 	.word	0x00000399
 158:	0000039b 	.word	0x0000039b
 15c:	0000039d 	.word	0x0000039d
     * the next transaction.
     *
     * Make sure to clear any pending ssend ints otherwise we will trigger
     * an immediate interrupt.
     */
    this_spi->hw_reg->INT_CLEAR = SSEND_IRQ_MASK;
 160:	0000039f 	.word	0x0000039f
 164:	000003a1 	.word	0x000003a1
    this_spi->hw_reg->CONTROL2 |= C2_ENABLE_SSEND_IRQ_MASK;
 168:	000003a3 	.word	0x000003a3
 16c:	000003a5 	.word	0x000003a5
    
    /* Clear down ints to avoid stale ints triggering when we enable them below */
    this_spi->hw_reg->INT_CLEAR = TXURUN_IRQ_MASK | RXOVFLOW_IRQ_MASK |
 170:	000003a7 	.word	0x000003a7
 174:	000003a9 	.word	0x000003a9
                                  RXDONE_IRQ_MASK;
    /*
     * Enable TX underrun and RX overflow interrupts to improve error
     * recovery and enable Rx interrupt.
     */
    this_spi->hw_reg->CONTROL |= CTRL_RX_IRQ_EN_MASK | CTRL_URUN_IRQ_EN_MASK |
 178:	000003ab 	.word	0x000003ab
 17c:	000003ad 	.word	0x000003ad
 180:	000003af 	.word	0x000003af
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 184:	000003b1 	.word	0x000003b1
 188:	000003b3 	.word	0x000003b3
 18c:	000003b5 	.word	0x000003b5
 190:	000003b7 	.word	0x000003b7
 194:	000003b9 	.word	0x000003b9
 198:	000003bb 	.word	0x000003bb
 19c:	000003bd 	.word	0x000003bd
 1a0:	000003bf 	.word	0x000003bf
                                 CTRL_OVFLOW_IRQ_EN_MASK;

    NVIC_EnableIRQ(this_spi->irqn);
}
 1a4:	000003c1 	.word	0x000003c1
 1a8:	000003c3 	.word	0x000003c3
 1ac:	000003c5 	.word	0x000003c5
 1b0:	000003c7 	.word	0x000003c7
 1b4:	000003c9 	.word	0x000003c9
 1b8:	000003cb 	.word	0x000003cb
 1bc:	000003cd 	.word	0x000003cd
 1c0:	000003cf 	.word	0x000003cf
 1c4:	000003d1 	.word	0x000003d1
 1c8:	000003d3 	.word	0x000003d3
 1cc:	000003d5 	.word	0x000003d5
 1d0:	000003d7 	.word	0x000003d7
 1d4:	000003d9 	.word	0x000003d9
 1d8:	000003db 	.word	0x000003db
 1dc:	000003dd 	.word	0x000003dd
 1e0:	000003df 	.word	0x000003df
 1e4:	000003e1 	.word	0x000003e1
 1e8:	000003e3 	.word	0x000003e3
 1ec:	000003e5 	.word	0x000003e5
 1f0:	000003e7 	.word	0x000003e7
 1f4:	000003e9 	.word	0x000003e9
 1f8:	000003eb 	.word	0x000003eb
 1fc:	000003ed 	.word	0x000003ed
 200:	000003ef 	.word	0x000003ef
 204:	000003f1 	.word	0x000003f1
 208:	000003f3 	.word	0x000003f3
 20c:	000003f5 	.word	0x000003f5
 210:	000003f7 	.word	0x000003f7
 214:	000003f9 	.word	0x000003f9
 218:	0000345d 	.word	0x0000345d
 21c:	0000347d 	.word	0x0000347d
 220:	0000349d 	.word	0x0000349d
 224:	000034bd 	.word	0x000034bd
 228:	000034dd 	.word	0x000034dd
 22c:	000034fd 	.word	0x000034fd
 230:	0000351d 	.word	0x0000351d
 234:	0000353d 	.word	0x0000353d
 238:	0000355d 	.word	0x0000355d
 23c:	0000357d 	.word	0x0000357d
 240:	0000359d 	.word	0x0000359d
 244:	000035bd 	.word	0x000035bd
 248:	000035dd 	.word	0x000035dd
 24c:	000035fd 	.word	0x000035fd
 250:	0000361d 	.word	0x0000361d
 254:	0000363d 	.word	0x0000363d
 258:	0000365d 	.word	0x0000365d
 25c:	0000367d 	.word	0x0000367d
 260:	0000369d 	.word	0x0000369d
 264:	000036bd 	.word	0x000036bd
 268:	000036dd 	.word	0x000036dd
 26c:	000036fd 	.word	0x000036fd
 270:	0000371d 	.word	0x0000371d
 274:	0000373d 	.word	0x0000373d
 278:	0000375d 	.word	0x0000375d
 27c:	0000377d 	.word	0x0000377d
 280:	0000379d 	.word	0x0000379d
 284:	000037bd 	.word	0x000037bd
 288:	000037dd 	.word	0x000037dd
 28c:	000037fd 	.word	0x000037fd
 290:	0000381d 	.word	0x0000381d
 294:	0000383d 	.word	0x0000383d

00000298 <Reset_Handler>:
 298:	4868      	ldr	r0, [pc, #416]	; (43c <ACE_ADC2_FifoEmpty_IRQHandler+0x44>)
 29a:	4780      	blx	r0
 29c:	4868      	ldr	r0, [pc, #416]	; (440 <ACE_ADC2_FifoEmpty_IRQHandler+0x48>)
 29e:	2800      	cmp	r0, #0
 2a0:	d10b      	bne.n	2ba <copy_data>
 2a2:	4868      	ldr	r0, [pc, #416]	; (444 <ACE_ADC2_FifoEmpty_IRQHandler+0x4c>)
 2a4:	4968      	ldr	r1, [pc, #416]	; (448 <ACE_ADC2_FifoEmpty_IRQHandler+0x50>)
 2a6:	4a69      	ldr	r2, [pc, #420]	; (44c <ACE_ADC2_FifoEmpty_IRQHandler+0x54>)
 2a8:	4288      	cmp	r0, r1
 2aa:	d006      	beq.n	2ba <copy_data>

000002ac <copy_code_loop>:
 2ac:	4291      	cmp	r1, r2
 2ae:	bf1c      	itt	ne
 2b0:	f850 3b04 	ldrne.w	r3, [r0], #4
 2b4:	f841 3b04 	strne.w	r3, [r1], #4
 2b8:	d1f8      	bne.n	2ac <copy_code_loop>

000002ba <copy_data>:
 2ba:	4865      	ldr	r0, [pc, #404]	; (450 <ACE_ADC2_FifoEmpty_IRQHandler+0x58>)
 2bc:	4965      	ldr	r1, [pc, #404]	; (454 <ACE_ADC2_FifoEmpty_IRQHandler+0x5c>)
 2be:	4a66      	ldr	r2, [pc, #408]	; (458 <ACE_ADC2_FifoEmpty_IRQHandler+0x60>)
 2c0:	4288      	cmp	r0, r1
 2c2:	d006      	beq.n	2d2 <clear_bss>

000002c4 <copy_data_loop>:
 2c4:	4291      	cmp	r1, r2
 2c6:	bf1c      	itt	ne
 2c8:	f850 3b04 	ldrne.w	r3, [r0], #4
 2cc:	f841 3b04 	strne.w	r3, [r1], #4
 2d0:	d1f8      	bne.n	2c4 <copy_data_loop>

000002d2 <clear_bss>:
 2d2:	4862      	ldr	r0, [pc, #392]	; (45c <ACE_ADC2_FifoEmpty_IRQHandler+0x64>)
 2d4:	4962      	ldr	r1, [pc, #392]	; (460 <ACE_ADC2_FifoEmpty_IRQHandler+0x68>)
 2d6:	4a63      	ldr	r2, [pc, #396]	; (464 <ACE_ADC2_FifoEmpty_IRQHandler+0x6c>)

000002d8 <clear_bss_loop>:
 2d8:	4291      	cmp	r1, r2
 2da:	bf18      	it	ne
 2dc:	f841 0b04 	strne.w	r0, [r1], #4
 2e0:	d1fa      	bne.n	2d8 <clear_bss_loop>
	...

000002f0 <call_glob_ctor>:
 2f0:	f8df 0174 	ldr.w	r0, [pc, #372]	; 468 <ACE_ADC2_FifoEmpty_IRQHandler+0x70>
 2f4:	f20f 0e03 	addw	lr, pc, #3
 2f8:	4700      	bx	r0

000002fa <branch_to_main>:
 2fa:	f04f 0000 	mov.w	r0, #0
 2fe:	f04f 0100 	mov.w	r1, #0
 302:	f8df f168 	ldr.w	pc, [pc, #360]	; 46c <ACE_ADC2_FifoEmpty_IRQHandler+0x74>

00000306 <ExitLoop>:
 306:	e7fe      	b.n	306 <ExitLoop>

00000308 <NMI_Handler>:
 308:	e7fe      	b.n	308 <NMI_Handler>

0000030a <HardFault_Handler>:
 30a:	e7fe      	b.n	30a <HardFault_Handler>

0000030c <MemManage_Handler>:
 30c:	e7fe      	b.n	30c <MemManage_Handler>

0000030e <BusFault_Handler>:
 30e:	e7fe      	b.n	30e <BusFault_Handler>

00000310 <UsageFault_Handler>:
 310:	e7fe      	b.n	310 <UsageFault_Handler>

00000312 <SVC_Handler>:
 312:	e7fe      	b.n	312 <SVC_Handler>

00000314 <DebugMon_Handler>:
 314:	e7fe      	b.n	314 <DebugMon_Handler>

00000316 <PendSV_Handler>:
 316:	e7fe      	b.n	316 <PendSV_Handler>

00000318 <SysTick_Handler>:
 318:	e7fe      	b.n	318 <SysTick_Handler>

0000031a <WdogWakeup_IRQHandler>:
 31a:	e7fe      	b.n	31a <WdogWakeup_IRQHandler>

0000031c <BrownOut_1_5V_IRQHandler>:
 31c:	e7fe      	b.n	31c <BrownOut_1_5V_IRQHandler>

0000031e <BrownOut_3_3V_IRQHandler>:
 31e:	e7fe      	b.n	31e <BrownOut_3_3V_IRQHandler>

00000320 <RTC_Match_IRQHandler>:
 320:	e7fe      	b.n	320 <RTC_Match_IRQHandler>

00000322 <RTCIF_Pub_IRQHandler>:
 322:	e7fe      	b.n	322 <RTCIF_Pub_IRQHandler>

00000324 <EthernetMAC_IRQHandler>:
 324:	e7fe      	b.n	324 <EthernetMAC_IRQHandler>

00000326 <IAP_IRQHandler>:
 326:	e7fe      	b.n	326 <IAP_IRQHandler>

00000328 <ENVM0_IRQHandler>:
 328:	e7fe      	b.n	328 <ENVM0_IRQHandler>

0000032a <ENVM1_IRQHandler>:
 32a:	e7fe      	b.n	32a <ENVM1_IRQHandler>

0000032c <DMA_IRQHandler>:
 32c:	e7fe      	b.n	32c <DMA_IRQHandler>
 32e:	e7fe      	b.n	32e <DMA_IRQHandler+0x2>
 330:	e7fe      	b.n	330 <DMA_IRQHandler+0x4>
 332:	e7fe      	b.n	332 <DMA_IRQHandler+0x6>
 334:	e7fe      	b.n	334 <DMA_IRQHandler+0x8>
 336:	e7fe      	b.n	336 <DMA_IRQHandler+0xa>

00000338 <I2C0_SMBAlert_IRQHandler>:
 338:	e7fe      	b.n	338 <I2C0_SMBAlert_IRQHandler>

0000033a <I2C0_SMBus_IRQHandler>:
 33a:	e7fe      	b.n	33a <I2C0_SMBus_IRQHandler>
 33c:	e7fe      	b.n	33c <I2C0_SMBus_IRQHandler+0x2>

0000033e <I2C1_SMBAlert_IRQHandler>:
 33e:	e7fe      	b.n	33e <I2C1_SMBAlert_IRQHandler>

00000340 <I2C1_SMBus_IRQHandler>:
 340:	e7fe      	b.n	340 <I2C1_SMBus_IRQHandler>

00000342 <Timer1_IRQHandler>:
 342:	e7fe      	b.n	342 <Timer1_IRQHandler>

00000344 <Timer2_IRQHandler>:
 344:	e7fe      	b.n	344 <Timer2_IRQHandler>

00000346 <PLL_Lock_IRQHandler>:
 346:	e7fe      	b.n	346 <PLL_Lock_IRQHandler>

00000348 <PLL_LockLost_IRQHandler>:
 348:	e7fe      	b.n	348 <PLL_LockLost_IRQHandler>

0000034a <CommError_IRQHandler>:
 34a:	e7fe      	b.n	34a <CommError_IRQHandler>

0000034c <Fabric_IRQHandler>:
 34c:	e7fe      	b.n	34c <Fabric_IRQHandler>

0000034e <GPIO0_IRQHandler>:
 34e:	e7fe      	b.n	34e <GPIO0_IRQHandler>

00000350 <GPIO1_IRQHandler>:
 350:	e7fe      	b.n	350 <GPIO1_IRQHandler>

00000352 <GPIO2_IRQHandler>:
 352:	e7fe      	b.n	352 <GPIO2_IRQHandler>

00000354 <GPIO3_IRQHandler>:
 354:	e7fe      	b.n	354 <GPIO3_IRQHandler>

00000356 <GPIO4_IRQHandler>:
 356:	e7fe      	b.n	356 <GPIO4_IRQHandler>

00000358 <GPIO5_IRQHandler>:
 358:	e7fe      	b.n	358 <GPIO5_IRQHandler>

0000035a <GPIO6_IRQHandler>:
 35a:	e7fe      	b.n	35a <GPIO6_IRQHandler>

0000035c <GPIO7_IRQHandler>:
 35c:	e7fe      	b.n	35c <GPIO7_IRQHandler>

0000035e <GPIO8_IRQHandler>:
 35e:	e7fe      	b.n	35e <GPIO8_IRQHandler>

00000360 <GPIO9_IRQHandler>:
 360:	e7fe      	b.n	360 <GPIO9_IRQHandler>

00000362 <GPIO10_IRQHandler>:
 362:	e7fe      	b.n	362 <GPIO10_IRQHandler>

00000364 <GPIO11_IRQHandler>:
 364:	e7fe      	b.n	364 <GPIO11_IRQHandler>

00000366 <GPIO12_IRQHandler>:
 366:	e7fe      	b.n	366 <GPIO12_IRQHandler>

00000368 <GPIO13_IRQHandler>:
 368:	e7fe      	b.n	368 <GPIO13_IRQHandler>

0000036a <GPIO14_IRQHandler>:
 36a:	e7fe      	b.n	36a <GPIO14_IRQHandler>

0000036c <GPIO15_IRQHandler>:
 36c:	e7fe      	b.n	36c <GPIO15_IRQHandler>

0000036e <GPIO16_IRQHandler>:
 36e:	e7fe      	b.n	36e <GPIO16_IRQHandler>

00000370 <GPIO17_IRQHandler>:
 370:	e7fe      	b.n	370 <GPIO17_IRQHandler>

00000372 <GPIO18_IRQHandler>:
 372:	e7fe      	b.n	372 <GPIO18_IRQHandler>

00000374 <GPIO19_IRQHandler>:
 374:	e7fe      	b.n	374 <GPIO19_IRQHandler>

00000376 <GPIO20_IRQHandler>:
 376:	e7fe      	b.n	376 <GPIO20_IRQHandler>

00000378 <GPIO21_IRQHandler>:
 378:	e7fe      	b.n	378 <GPIO21_IRQHandler>

0000037a <GPIO22_IRQHandler>:
 37a:	e7fe      	b.n	37a <GPIO22_IRQHandler>

0000037c <GPIO23_IRQHandler>:
 37c:	e7fe      	b.n	37c <GPIO23_IRQHandler>

0000037e <GPIO24_IRQHandler>:
 37e:	e7fe      	b.n	37e <GPIO24_IRQHandler>

00000380 <GPIO25_IRQHandler>:
 380:	e7fe      	b.n	380 <GPIO25_IRQHandler>

00000382 <GPIO26_IRQHandler>:
 382:	e7fe      	b.n	382 <GPIO26_IRQHandler>

00000384 <GPIO27_IRQHandler>:
 384:	e7fe      	b.n	384 <GPIO27_IRQHandler>

00000386 <GPIO28_IRQHandler>:
 386:	e7fe      	b.n	386 <GPIO28_IRQHandler>

00000388 <GPIO29_IRQHandler>:
 388:	e7fe      	b.n	388 <GPIO29_IRQHandler>

0000038a <GPIO30_IRQHandler>:
 38a:	e7fe      	b.n	38a <GPIO30_IRQHandler>

0000038c <GPIO31_IRQHandler>:
 38c:	e7fe      	b.n	38c <GPIO31_IRQHandler>

0000038e <ACE_PC0_Flag0_IRQHandler>:
 38e:	e7fe      	b.n	38e <ACE_PC0_Flag0_IRQHandler>

00000390 <ACE_PC0_Flag1_IRQHandler>:
 390:	e7fe      	b.n	390 <ACE_PC0_Flag1_IRQHandler>

00000392 <ACE_PC0_Flag2_IRQHandler>:
 392:	e7fe      	b.n	392 <ACE_PC0_Flag2_IRQHandler>

00000394 <ACE_PC0_Flag3_IRQHandler>:
 394:	e7fe      	b.n	394 <ACE_PC0_Flag3_IRQHandler>

00000396 <ACE_PC1_Flag0_IRQHandler>:
 396:	e7fe      	b.n	396 <ACE_PC1_Flag0_IRQHandler>

00000398 <ACE_PC1_Flag1_IRQHandler>:
 398:	e7fe      	b.n	398 <ACE_PC1_Flag1_IRQHandler>

0000039a <ACE_PC1_Flag2_IRQHandler>:
 39a:	e7fe      	b.n	39a <ACE_PC1_Flag2_IRQHandler>

0000039c <ACE_PC1_Flag3_IRQHandler>:
 39c:	e7fe      	b.n	39c <ACE_PC1_Flag3_IRQHandler>

0000039e <ACE_PC2_Flag0_IRQHandler>:
 39e:	e7fe      	b.n	39e <ACE_PC2_Flag0_IRQHandler>

000003a0 <ACE_PC2_Flag1_IRQHandler>:
 3a0:	e7fe      	b.n	3a0 <ACE_PC2_Flag1_IRQHandler>

000003a2 <ACE_PC2_Flag2_IRQHandler>:
 3a2:	e7fe      	b.n	3a2 <ACE_PC2_Flag2_IRQHandler>

000003a4 <ACE_PC2_Flag3_IRQHandler>:
 3a4:	e7fe      	b.n	3a4 <ACE_PC2_Flag3_IRQHandler>

000003a6 <ACE_ADC0_DataValid_IRQHandler>:
 3a6:	e7fe      	b.n	3a6 <ACE_ADC0_DataValid_IRQHandler>

000003a8 <ACE_ADC1_DataValid_IRQHandler>:
 3a8:	e7fe      	b.n	3a8 <ACE_ADC1_DataValid_IRQHandler>

000003aa <ACE_ADC2_DataValid_IRQHandler>:
 3aa:	e7fe      	b.n	3aa <ACE_ADC2_DataValid_IRQHandler>

000003ac <ACE_ADC0_CalDone_IRQHandler>:
 3ac:	e7fe      	b.n	3ac <ACE_ADC0_CalDone_IRQHandler>

000003ae <ACE_ADC1_CalDone_IRQHandler>:
 3ae:	e7fe      	b.n	3ae <ACE_ADC1_CalDone_IRQHandler>

000003b0 <ACE_ADC2_CalDone_IRQHandler>:
 3b0:	e7fe      	b.n	3b0 <ACE_ADC2_CalDone_IRQHandler>

000003b2 <ACE_ADC0_CalStart_IRQHandler>:
 3b2:	e7fe      	b.n	3b2 <ACE_ADC0_CalStart_IRQHandler>

000003b4 <ACE_ADC1_CalStart_IRQHandler>:
 3b4:	e7fe      	b.n	3b4 <ACE_ADC1_CalStart_IRQHandler>

000003b6 <ACE_ADC2_CalStart_IRQHandler>:
 3b6:	e7fe      	b.n	3b6 <ACE_ADC2_CalStart_IRQHandler>

000003b8 <ACE_Comp0_Fall_IRQHandler>:
 3b8:	e7fe      	b.n	3b8 <ACE_Comp0_Fall_IRQHandler>

000003ba <ACE_Comp1_Fall_IRQHandler>:
 3ba:	e7fe      	b.n	3ba <ACE_Comp1_Fall_IRQHandler>

000003bc <ACE_Comp2_Fall_IRQHandler>:
 3bc:	e7fe      	b.n	3bc <ACE_Comp2_Fall_IRQHandler>

000003be <ACE_Comp3_Fall_IRQHandler>:
 3be:	e7fe      	b.n	3be <ACE_Comp3_Fall_IRQHandler>

000003c0 <ACE_Comp4_Fall_IRQHandler>:
 3c0:	e7fe      	b.n	3c0 <ACE_Comp4_Fall_IRQHandler>

000003c2 <ACE_Comp5_Fall_IRQHandler>:
 3c2:	e7fe      	b.n	3c2 <ACE_Comp5_Fall_IRQHandler>

000003c4 <ACE_Comp6_Fall_IRQHandler>:
 3c4:	e7fe      	b.n	3c4 <ACE_Comp6_Fall_IRQHandler>

000003c6 <ACE_Comp7_Fall_IRQHandler>:
 3c6:	e7fe      	b.n	3c6 <ACE_Comp7_Fall_IRQHandler>

000003c8 <ACE_Comp8_Fall_IRQHandler>:
 3c8:	e7fe      	b.n	3c8 <ACE_Comp8_Fall_IRQHandler>

000003ca <ACE_Comp9_Fall_IRQHandler>:
 3ca:	e7fe      	b.n	3ca <ACE_Comp9_Fall_IRQHandler>

000003cc <ACE_Comp10_Fall_IRQHandler>:
 3cc:	e7fe      	b.n	3cc <ACE_Comp10_Fall_IRQHandler>

000003ce <ACE_Comp11_Fall_IRQHandler>:
 3ce:	e7fe      	b.n	3ce <ACE_Comp11_Fall_IRQHandler>

000003d0 <ACE_Comp0_Rise_IRQHandler>:
 3d0:	e7fe      	b.n	3d0 <ACE_Comp0_Rise_IRQHandler>

000003d2 <ACE_Comp1_Rise_IRQHandler>:
 3d2:	e7fe      	b.n	3d2 <ACE_Comp1_Rise_IRQHandler>

000003d4 <ACE_Comp2_Rise_IRQHandler>:
 3d4:	e7fe      	b.n	3d4 <ACE_Comp2_Rise_IRQHandler>

000003d6 <ACE_Comp3_Rise_IRQHandler>:
 3d6:	e7fe      	b.n	3d6 <ACE_Comp3_Rise_IRQHandler>

000003d8 <ACE_Comp4_Rise_IRQHandler>:
 3d8:	e7fe      	b.n	3d8 <ACE_Comp4_Rise_IRQHandler>

000003da <ACE_Comp5_Rise_IRQHandler>:
 3da:	e7fe      	b.n	3da <ACE_Comp5_Rise_IRQHandler>

000003dc <ACE_Comp6_Rise_IRQHandler>:
 3dc:	e7fe      	b.n	3dc <ACE_Comp6_Rise_IRQHandler>

000003de <ACE_Comp7_Rise_IRQHandler>:
 3de:	e7fe      	b.n	3de <ACE_Comp7_Rise_IRQHandler>

000003e0 <ACE_Comp8_Rise_IRQHandler>:
 3e0:	e7fe      	b.n	3e0 <ACE_Comp8_Rise_IRQHandler>

000003e2 <ACE_Comp9_Rise_IRQHandler>:
 3e2:	e7fe      	b.n	3e2 <ACE_Comp9_Rise_IRQHandler>

000003e4 <ACE_Comp10_Rise_IRQHandler>:
 3e4:	e7fe      	b.n	3e4 <ACE_Comp10_Rise_IRQHandler>

000003e6 <ACE_Comp11_Rise_IRQHandler>:
 3e6:	e7fe      	b.n	3e6 <ACE_Comp11_Rise_IRQHandler>

000003e8 <ACE_ADC0_FifoFull_IRQHandler>:
 3e8:	e7fe      	b.n	3e8 <ACE_ADC0_FifoFull_IRQHandler>

000003ea <ACE_ADC0_FifoAFull_IRQHandler>:
 3ea:	e7fe      	b.n	3ea <ACE_ADC0_FifoAFull_IRQHandler>

000003ec <ACE_ADC0_FifoEmpty_IRQHandler>:
 3ec:	e7fe      	b.n	3ec <ACE_ADC0_FifoEmpty_IRQHandler>

000003ee <ACE_ADC1_FifoFull_IRQHandler>:
 3ee:	e7fe      	b.n	3ee <ACE_ADC1_FifoFull_IRQHandler>

000003f0 <ACE_ADC1_FifoAFull_IRQHandler>:
 3f0:	e7fe      	b.n	3f0 <ACE_ADC1_FifoAFull_IRQHandler>

000003f2 <ACE_ADC1_FifoEmpty_IRQHandler>:
 3f2:	e7fe      	b.n	3f2 <ACE_ADC1_FifoEmpty_IRQHandler>

000003f4 <ACE_ADC2_FifoFull_IRQHandler>:
 3f4:	e7fe      	b.n	3f4 <ACE_ADC2_FifoFull_IRQHandler>

000003f6 <ACE_ADC2_FifoAFull_IRQHandler>:
 3f6:	e7fe      	b.n	3f6 <ACE_ADC2_FifoAFull_IRQHandler>

000003f8 <ACE_ADC2_FifoEmpty_IRQHandler>:
 3f8:	e7fe      	b.n	3f8 <ACE_ADC2_FifoEmpty_IRQHandler>
 3fa:	e7fe      	b.n	3fa <ACE_ADC2_FifoEmpty_IRQHandler+0x2>
 3fc:	e7fe      	b.n	3fc <ACE_ADC2_FifoEmpty_IRQHandler+0x4>
 3fe:	e7fe      	b.n	3fe <ACE_ADC2_FifoEmpty_IRQHandler+0x6>
 400:	e7fe      	b.n	400 <ACE_ADC2_FifoEmpty_IRQHandler+0x8>
 402:	e7fe      	b.n	402 <ACE_ADC2_FifoEmpty_IRQHandler+0xa>
 404:	e7fe      	b.n	404 <ACE_ADC2_FifoEmpty_IRQHandler+0xc>
 406:	e7fe      	b.n	406 <ACE_ADC2_FifoEmpty_IRQHandler+0xe>
 408:	e7fe      	b.n	408 <ACE_ADC2_FifoEmpty_IRQHandler+0x10>
 40a:	e7fe      	b.n	40a <ACE_ADC2_FifoEmpty_IRQHandler+0x12>
 40c:	e7fe      	b.n	40c <ACE_ADC2_FifoEmpty_IRQHandler+0x14>
 40e:	e7fe      	b.n	40e <ACE_ADC2_FifoEmpty_IRQHandler+0x16>
 410:	e7fe      	b.n	410 <ACE_ADC2_FifoEmpty_IRQHandler+0x18>
 412:	e7fe      	b.n	412 <ACE_ADC2_FifoEmpty_IRQHandler+0x1a>
 414:	e7fe      	b.n	414 <ACE_ADC2_FifoEmpty_IRQHandler+0x1c>
 416:	e7fe      	b.n	416 <ACE_ADC2_FifoEmpty_IRQHandler+0x1e>
 418:	e7fe      	b.n	418 <ACE_ADC2_FifoEmpty_IRQHandler+0x20>
 41a:	e7fe      	b.n	41a <ACE_ADC2_FifoEmpty_IRQHandler+0x22>
 41c:	e7fe      	b.n	41c <ACE_ADC2_FifoEmpty_IRQHandler+0x24>
 41e:	e7fe      	b.n	41e <ACE_ADC2_FifoEmpty_IRQHandler+0x26>
 420:	e7fe      	b.n	420 <ACE_ADC2_FifoEmpty_IRQHandler+0x28>
 422:	e7fe      	b.n	422 <ACE_ADC2_FifoEmpty_IRQHandler+0x2a>
 424:	e7fe      	b.n	424 <ACE_ADC2_FifoEmpty_IRQHandler+0x2c>
 426:	e7fe      	b.n	426 <ACE_ADC2_FifoEmpty_IRQHandler+0x2e>
 428:	e7fe      	b.n	428 <ACE_ADC2_FifoEmpty_IRQHandler+0x30>
 42a:	e7fe      	b.n	42a <ACE_ADC2_FifoEmpty_IRQHandler+0x32>
 42c:	e7fe      	b.n	42c <ACE_ADC2_FifoEmpty_IRQHandler+0x34>
 42e:	e7fe      	b.n	42e <ACE_ADC2_FifoEmpty_IRQHandler+0x36>
 430:	e7fe      	b.n	430 <ACE_ADC2_FifoEmpty_IRQHandler+0x38>
 432:	e7fe      	b.n	432 <ACE_ADC2_FifoEmpty_IRQHandler+0x3a>
 434:	e7fe      	b.n	434 <ACE_ADC2_FifoEmpty_IRQHandler+0x3c>
 436:	e7fe      	b.n	436 <ACE_ADC2_FifoEmpty_IRQHandler+0x3e>
 438:	e7fe      	b.n	438 <ACE_ADC2_FifoEmpty_IRQHandler+0x40>
 43a:	0000      	.short	0x0000
 43c:	00003329 	.word	0x00003329
 440:	00000001 	.word	0x00000001
 444:	60000470 	.word	0x60000470
 448:	00000470 	.word	0x00000470
 44c:	00004604 	.word	0x00004604
 450:	60004604 	.word	0x60004604
 454:	20000000 	.word	0x20000000
 458:	2000001c 	.word	0x2000001c
 45c:	00000000 	.word	0x00000000
 460:	2000001c 	.word	0x2000001c
 464:	200002b0 	.word	0x200002b0
 468:	00004371 	.word	0x00004371
 46c:	000004a1 	.word	0x000004a1

Disassembly of section .text:

00000470 <__do_global_dtors_aux>:
     470:	f240 031c 	movw	r3, #28
     474:	f2c2 0300 	movt	r3, #8192	; 0x2000
     478:	781a      	ldrb	r2, [r3, #0]
     47a:	b90a      	cbnz	r2, 480 <__do_global_dtors_aux+0x10>
     47c:	2001      	movs	r0, #1
     47e:	7018      	strb	r0, [r3, #0]
     480:	4770      	bx	lr
     482:	bf00      	nop

00000484 <frame_dummy>:
     484:	f240 0000 	movw	r0, #0
     488:	f2c2 0000 	movt	r0, #8192	; 0x2000
     48c:	b508      	push	{r3, lr}
     48e:	6803      	ldr	r3, [r0, #0]
     490:	b12b      	cbz	r3, 49e <frame_dummy+0x1a>
     492:	f240 0300 	movw	r3, #0
     496:	f2c0 0300 	movt	r3, #0
     49a:	b103      	cbz	r3, 49e <frame_dummy+0x1a>
     49c:	4798      	blx	r3
     49e:	bd08      	pop	{r3, pc}

000004a0 <main>:
uint8_t message[5] = "hello";
uint16_t x, y;
uint8_t z;

int main()
{
     4a0:	b590      	push	{r4, r7, lr}
     4a2:	b093      	sub	sp, #76	; 0x4c
     4a4:	af02      	add	r7, sp, #8
	int menu = -1, t= 0;
     4a6:	f04f 33ff 	mov.w	r3, #4294967295
     4aa:	61bb      	str	r3, [r7, #24]
     4ac:	f04f 0300 	mov.w	r3, #0
     4b0:	61fb      	str	r3, [r7, #28]
	int count = 0;
     4b2:	f04f 0300 	mov.w	r3, #0
     4b6:	623b      	str	r3, [r7, #32]
	int maxX = 0, maxY =0, minX = 5000, minY = 5000;
     4b8:	f04f 0300 	mov.w	r3, #0
     4bc:	627b      	str	r3, [r7, #36]	; 0x24
     4be:	f04f 0300 	mov.w	r3, #0
     4c2:	62bb      	str	r3, [r7, #40]	; 0x28
     4c4:	f241 3388 	movw	r3, #5000	; 0x1388
     4c8:	62fb      	str	r3, [r7, #44]	; 0x2c
     4ca:	f241 3388 	movw	r3, #5000	; 0x1388
     4ce:	633b      	str	r3, [r7, #48]	; 0x30
	MSS_UART_init(&g_mss_uart1, MSS_UART_57600_BAUD, MSS_UART_DATA_8_BITS | MSS_UART_NO_PARITY | MSS_UART_ONE_STOP_BIT);
     4d0:	f240 0070 	movw	r0, #112	; 0x70
     4d4:	f2c2 0000 	movt	r0, #8192	; 0x2000
     4d8:	f44f 4161 	mov.w	r1, #57600	; 0xe100
     4dc:	f04f 0203 	mov.w	r2, #3
     4e0:	f001 fd90 	bl	2004 <MSS_UART_init>
	MSS_UART_set_rx_handler( &g_mss_uart1, uart1_rx_handler, MSS_UART_FIFO_SINGLE_BYTE);
     4e4:	f240 0070 	movw	r0, #112	; 0x70
     4e8:	f2c2 0000 	movt	r0, #8192	; 0x2000
     4ec:	f641 417d 	movw	r1, #7293	; 0x1c7d
     4f0:	f2c0 0100 	movt	r1, #0
     4f4:	f04f 0200 	mov.w	r2, #0
     4f8:	f001 fd02 	bl	1f00 <MSS_UART_set_rx_handler>
	touchscreen_begin();
     4fc:	f000 fd62 	bl	fc4 <touchscreen_begin>

	drawFillScreen(ILI9341_BLUE);
     500:	f04f 001f 	mov.w	r0, #31
     504:	f000 ff26 	bl	1354 <drawFillScreen>
	drawRectangle(5, 5, 110, 152, ILI9341_YELLOW);
     508:	f64f 73e0 	movw	r3, #65504	; 0xffe0
     50c:	9300      	str	r3, [sp, #0]
     50e:	f04f 0005 	mov.w	r0, #5
     512:	f04f 0105 	mov.w	r1, #5
     516:	f04f 026e 	mov.w	r2, #110	; 0x6e
     51a:	f04f 0398 	mov.w	r3, #152	; 0x98
     51e:	f000 feab 	bl	1278 <drawRectangle>
	drawRectangle(5, 165, 110, 152, ILI9341_YELLOW);
     522:	f64f 73e0 	movw	r3, #65504	; 0xffe0
     526:	9300      	str	r3, [sp, #0]
     528:	f04f 0005 	mov.w	r0, #5
     52c:	f04f 01a5 	mov.w	r1, #165	; 0xa5
     530:	f04f 026e 	mov.w	r2, #110	; 0x6e
     534:	f04f 0398 	mov.w	r3, #152	; 0x98
     538:	f000 fe9e 	bl	1278 <drawRectangle>
	drawRectangle(120, 5, 115, 312, ILI9341_YELLOW);
     53c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
     540:	9300      	str	r3, [sp, #0]
     542:	f04f 0078 	mov.w	r0, #120	; 0x78
     546:	f04f 0105 	mov.w	r1, #5
     54a:	f04f 0273 	mov.w	r2, #115	; 0x73
     54e:	f44f 739c 	mov.w	r3, #312	; 0x138
     552:	f000 fe91 	bl	1278 <drawRectangle>

	drawText1(ILI9341_BLACK);
     556:	f04f 0000 	mov.w	r0, #0
     55a:	f000 ff35 	bl	13c8 <drawText1>
	drawText2(ILI9341_BLACK);
     55e:	f04f 0000 	mov.w	r0, #0
     562:	f000 ff53 	bl	140c <drawText2>
	drawText3(ILI9341_BLACK);
     566:	f04f 0000 	mov.w	r0, #0
     56a:	f000 ff7d 	bl	1468 <drawText3>

	while(1){

		while(menu == -1){
     56e:	e0ef      	b.n	750 <main+0x2b0>
				while (touched()) {
					// read x & y & z;
					while (! bufferEmpty()) {
					uint8_t buf[5] = {0xFF, 0xFF, 0xFF, 0xFF, 0x00};
     570:	f244 4294 	movw	r2, #17556	; 0x4494
     574:	f2c0 0200 	movt	r2, #0
     578:	f107 0310 	add.w	r3, r7, #16
     57c:	e892 0003 	ldmia.w	r2, {r0, r1}
     580:	6018      	str	r0, [r3, #0]
     582:	f103 0304 	add.w	r3, r3, #4
     586:	7019      	strb	r1, [r3, #0]

					  readTouch(&x, &y, &z);
     588:	f240 0020 	movw	r0, #32
     58c:	f2c2 0000 	movt	r0, #8192	; 0x2000
     590:	f240 012a 	movw	r1, #42	; 0x2a
     594:	f2c2 0100 	movt	r1, #8192	; 0x2000
     598:	f240 0228 	movw	r2, #40	; 0x28
     59c:	f2c2 0200 	movt	r2, #8192	; 0x2000
     5a0:	f000 fde8 	bl	1174 <readTouch>
					 //printf("x: %d   y: %d \n\r", x, y);
					  x -= 200;
     5a4:	f240 0320 	movw	r3, #32
     5a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     5ac:	881b      	ldrh	r3, [r3, #0]
     5ae:	f1a3 03c8 	sub.w	r3, r3, #200	; 0xc8
     5b2:	b29a      	uxth	r2, r3
     5b4:	f240 0320 	movw	r3, #32
     5b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     5bc:	801a      	strh	r2, [r3, #0]
					  y -= 320;
     5be:	f240 032a 	movw	r3, #42	; 0x2a
     5c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     5c6:	881b      	ldrh	r3, [r3, #0]
     5c8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
     5cc:	b29a      	uxth	r2, r3
     5ce:	f240 032a 	movw	r3, #42	; 0x2a
     5d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     5d6:	801a      	strh	r2, [r3, #0]

					  float temp = x/3730.0;
     5d8:	f240 0320 	movw	r3, #32
     5dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
     5e0:	881b      	ldrh	r3, [r3, #0]
     5e2:	4618      	mov	r0, r3
     5e4:	f003 fa8c 	bl	3b00 <__aeabi_i2d>
     5e8:	4602      	mov	r2, r0
     5ea:	460b      	mov	r3, r1
     5ec:	4610      	mov	r0, r2
     5ee:	4619      	mov	r1, r3
     5f0:	f60f 034c 	addw	r3, pc, #2124	; 0x84c
     5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
     5f8:	f003 fc12 	bl	3e20 <__aeabi_ddiv>
     5fc:	4602      	mov	r2, r0
     5fe:	460b      	mov	r3, r1
     600:	4610      	mov	r0, r2
     602:	4619      	mov	r1, r3
     604:	f003 fcf4 	bl	3ff0 <__aeabi_d2f>
     608:	4603      	mov	r3, r0
     60a:	637b      	str	r3, [r7, #52]	; 0x34
					  temp *= 240;
     60c:	6b78      	ldr	r0, [r7, #52]	; 0x34
     60e:	f8df 1840 	ldr.w	r1, [pc, #2112]	; e50 <main+0x9b0>
     612:	f003 fd3d 	bl	4090 <__aeabi_fmul>
     616:	4603      	mov	r3, r0
     618:	637b      	str	r3, [r7, #52]	; 0x34
					  x = temp;
     61a:	6b78      	ldr	r0, [r7, #52]	; 0x34
     61c:	f003 fe88 	bl	4330 <__aeabi_f2uiz>
     620:	4603      	mov	r3, r0
     622:	b29a      	uxth	r2, r3
     624:	f240 0320 	movw	r3, #32
     628:	f2c2 0300 	movt	r3, #8192	; 0x2000
     62c:	801a      	strh	r2, [r3, #0]

					  temp = y/3605.0;
     62e:	f240 032a 	movw	r3, #42	; 0x2a
     632:	f2c2 0300 	movt	r3, #8192	; 0x2000
     636:	881b      	ldrh	r3, [r3, #0]
     638:	4618      	mov	r0, r3
     63a:	f003 fa61 	bl	3b00 <__aeabi_i2d>
     63e:	4602      	mov	r2, r0
     640:	460b      	mov	r3, r1
     642:	4610      	mov	r0, r2
     644:	4619      	mov	r1, r3
     646:	f60f 0300 	addw	r3, pc, #2048	; 0x800
     64a:	e9d3 2300 	ldrd	r2, r3, [r3]
     64e:	f003 fbe7 	bl	3e20 <__aeabi_ddiv>
     652:	4602      	mov	r2, r0
     654:	460b      	mov	r3, r1
     656:	4610      	mov	r0, r2
     658:	4619      	mov	r1, r3
     65a:	f003 fcc9 	bl	3ff0 <__aeabi_d2f>
     65e:	4603      	mov	r3, r0
     660:	637b      	str	r3, [r7, #52]	; 0x34
					  temp *= 320;
     662:	6b78      	ldr	r0, [r7, #52]	; 0x34
     664:	f8df 17ec 	ldr.w	r1, [pc, #2028]	; e54 <main+0x9b4>
     668:	f003 fd12 	bl	4090 <__aeabi_fmul>
     66c:	4603      	mov	r3, r0
     66e:	637b      	str	r3, [r7, #52]	; 0x34
					  y = temp;
     670:	6b78      	ldr	r0, [r7, #52]	; 0x34
     672:	f003 fe5d 	bl	4330 <__aeabi_f2uiz>
     676:	4603      	mov	r3, r0
     678:	b29a      	uxth	r2, r3
     67a:	f240 032a 	movw	r3, #42	; 0x2a
     67e:	f2c2 0300 	movt	r3, #8192	; 0x2000
     682:	801a      	strh	r2, [r3, #0]

					  x = 240 - x;
     684:	f240 0320 	movw	r3, #32
     688:	f2c2 0300 	movt	r3, #8192	; 0x2000
     68c:	881b      	ldrh	r3, [r3, #0]
     68e:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
     692:	b29a      	uxth	r2, r3
     694:	f240 0320 	movw	r3, #32
     698:	f2c2 0300 	movt	r3, #8192	; 0x2000
     69c:	801a      	strh	r2, [r3, #0]
					  y = 320 - y;
     69e:	f240 032a 	movw	r3, #42	; 0x2a
     6a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     6a6:	881b      	ldrh	r3, [r3, #0]
     6a8:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
     6ac:	b29a      	uxth	r2, r3
     6ae:	f240 032a 	movw	r3, #42	; 0x2a
     6b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     6b6:	801a      	strh	r2, [r3, #0]

					  //printf("x: %d   y: %d \n\r", x, y);
					  if(x>120){
     6b8:	f240 0320 	movw	r3, #32
     6bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
     6c0:	881b      	ldrh	r3, [r3, #0]
     6c2:	2b78      	cmp	r3, #120	; 0x78
     6c4:	d90f      	bls.n	6e6 <main+0x246>
						  menu = 0;
     6c6:	f04f 0300 	mov.w	r3, #0
     6ca:	61bb      	str	r3, [r7, #24]
						  buf[4] = '~';
     6cc:	f04f 037e 	mov.w	r3, #126	; 0x7e
     6d0:	753b      	strb	r3, [r7, #20]
						  sendMessage(buf, 5, 0x000);
     6d2:	f107 0310 	add.w	r3, r7, #16
     6d6:	4618      	mov	r0, r3
     6d8:	f04f 0105 	mov.w	r1, #5
     6dc:	f04f 0200 	mov.w	r2, #0
     6e0:	f001 fa4e 	bl	1b80 <sendMessage>
     6e4:	e027      	b.n	736 <main+0x296>

					  }
					  else if(y> 160){
     6e6:	f240 032a 	movw	r3, #42	; 0x2a
     6ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
     6ee:	881b      	ldrh	r3, [r3, #0]
     6f0:	2ba0      	cmp	r3, #160	; 0xa0
     6f2:	d90f      	bls.n	714 <main+0x274>
						  menu = 1;
     6f4:	f04f 0301 	mov.w	r3, #1
     6f8:	61bb      	str	r3, [r7, #24]
						  buf[4] = '%';
     6fa:	f04f 0325 	mov.w	r3, #37	; 0x25
     6fe:	753b      	strb	r3, [r7, #20]
						  sendMessage(buf, 5, 0x000);
     700:	f107 0310 	add.w	r3, r7, #16
     704:	4618      	mov	r0, r3
     706:	f04f 0105 	mov.w	r1, #5
     70a:	f04f 0200 	mov.w	r2, #0
     70e:	f001 fa37 	bl	1b80 <sendMessage>
     712:	e010      	b.n	736 <main+0x296>

					  }
					  else{
						  menu = 2;
     714:	f04f 0302 	mov.w	r3, #2
     718:	61bb      	str	r3, [r7, #24]
						  buf[4] = '_';
     71a:	f04f 035f 	mov.w	r3, #95	; 0x5f
     71e:	753b      	strb	r3, [r7, #20]
						  sendMessage(buf, 5, 0x000);
     720:	f107 0310 	add.w	r3, r7, #16
     724:	4618      	mov	r0, r3
     726:	f04f 0105 	mov.w	r1, #5
     72a:	f04f 0200 	mov.w	r2, #0
     72e:	f001 fa27 	bl	1b80 <sendMessage>
     732:	e000      	b.n	736 <main+0x296>
	while(1){

		while(menu == -1){
				while (touched()) {
					// read x & y & z;
					while (! bufferEmpty()) {
     734:	bf00      	nop
     736:	f001 f8c7 	bl	18c8 <bufferEmpty>
     73a:	4603      	mov	r3, r0
     73c:	2b00      	cmp	r3, #0
     73e:	f43f af17 	beq.w	570 <main+0xd0>
     742:	e000      	b.n	746 <main+0x2a6>
	drawText3(ILI9341_BLACK);

	while(1){

		while(menu == -1){
				while (touched()) {
     744:	bf00      	nop
     746:	f000 fd67 	bl	1218 <touched>
     74a:	4603      	mov	r3, r0
     74c:	2b00      	cmp	r3, #0
     74e:	d1f1      	bne.n	734 <main+0x294>
	drawText2(ILI9341_BLACK);
	drawText3(ILI9341_BLACK);

	while(1){

		while(menu == -1){
     750:	69bb      	ldr	r3, [r7, #24]
     752:	f1b3 3fff 	cmp.w	r3, #4294967295
     756:	d0f5      	beq.n	744 <main+0x2a4>
				}

			}


			while (!bufferEmpty()){
     758:	e00d      	b.n	776 <main+0x2d6>
				readTouch(&x, &y, &z);
     75a:	f240 0020 	movw	r0, #32
     75e:	f2c2 0000 	movt	r0, #8192	; 0x2000
     762:	f240 012a 	movw	r1, #42	; 0x2a
     766:	f2c2 0100 	movt	r1, #8192	; 0x2000
     76a:	f240 0228 	movw	r2, #40	; 0x28
     76e:	f2c2 0200 	movt	r2, #8192	; 0x2000
     772:	f000 fcff 	bl	1174 <readTouch>
				}

			}


			while (!bufferEmpty()){
     776:	f001 f8a7 	bl	18c8 <bufferEmpty>
     77a:	4603      	mov	r3, r0
     77c:	2b00      	cmp	r3, #0
     77e:	d0ec      	beq.n	75a <main+0x2ba>
				readTouch(&x, &y, &z);
			}

			if(menu == 0){
     780:	69bb      	ldr	r3, [r7, #24]
     782:	2b00      	cmp	r3, #0
     784:	d104      	bne.n	790 <main+0x2f0>
					drawFillScreen(ILI9341_WHITE);
     786:	f64f 70ff 	movw	r0, #65535	; 0xffff
     78a:	f000 fde3 	bl	1354 <drawFillScreen>
				drawRectanglePixel(175, 75, 5, 20, ILI9341_BLACK);
				drawRectanglePixel(160, 75, 5, 20, ILI9341_BLACK);

			}

			while(menu == 2){
     78e:	e23f      	b.n	c10 <main+0x770>
			}

			if(menu == 0){
					drawFillScreen(ILI9341_WHITE);
			}
			else if(menu == 1){
     790:	69bb      	ldr	r3, [r7, #24]
     792:	2b01      	cmp	r3, #1
     794:	d104      	bne.n	7a0 <main+0x300>
				drawFillScreen(ILI9341_BLACK);
     796:	f04f 0000 	mov.w	r0, #0
     79a:	f000 fddb 	bl	1354 <drawFillScreen>
				drawRectanglePixel(175, 75, 5, 20, ILI9341_BLACK);
				drawRectanglePixel(160, 75, 5, 20, ILI9341_BLACK);

			}

			while(menu == 2){
     79e:	e237      	b.n	c10 <main+0x770>
			}
			else if(menu == 1){
				drawFillScreen(ILI9341_BLACK);
			}
			else{
				drawFillScreen(ILI9341_GREEN);
     7a0:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
     7a4:	f000 fdd6 	bl	1354 <drawFillScreen>
				drawRectangle(5, 5, 110, 152, ILI9341_WHITE);
     7a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
     7ac:	9300      	str	r3, [sp, #0]
     7ae:	f04f 0005 	mov.w	r0, #5
     7b2:	f04f 0105 	mov.w	r1, #5
     7b6:	f04f 026e 	mov.w	r2, #110	; 0x6e
     7ba:	f04f 0398 	mov.w	r3, #152	; 0x98
     7be:	f000 fd5b 	bl	1278 <drawRectangle>
				drawRectangle(5, 165, 110, 152, ILI9341_RED);
     7c2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
     7c6:	9300      	str	r3, [sp, #0]
     7c8:	f04f 0005 	mov.w	r0, #5
     7cc:	f04f 01a5 	mov.w	r1, #165	; 0xa5
     7d0:	f04f 026e 	mov.w	r2, #110	; 0x6e
     7d4:	f04f 0398 	mov.w	r3, #152	; 0x98
     7d8:	f000 fd4e 	bl	1278 <drawRectangle>
				drawRectangle(120, 5, 115, 152, ILI9341_WHITE);
     7dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
     7e0:	9300      	str	r3, [sp, #0]
     7e2:	f04f 0078 	mov.w	r0, #120	; 0x78
     7e6:	f04f 0105 	mov.w	r1, #5
     7ea:	f04f 0273 	mov.w	r2, #115	; 0x73
     7ee:	f04f 0398 	mov.w	r3, #152	; 0x98
     7f2:	f000 fd41 	bl	1278 <drawRectangle>
				drawRectangle(120, 165, 115, 152, ILI9341_WHITE);
     7f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
     7fa:	9300      	str	r3, [sp, #0]
     7fc:	f04f 0078 	mov.w	r0, #120	; 0x78
     800:	f04f 01a5 	mov.w	r1, #165	; 0xa5
     804:	f04f 0273 	mov.w	r2, #115	; 0x73
     808:	f04f 0398 	mov.w	r3, #152	; 0x98
     80c:	f000 fd34 	bl	1278 <drawRectangle>

				//draw box
				drawRectangle(40, 60, 3, 38, ILI9341_BLACK);
     810:	f04f 0300 	mov.w	r3, #0
     814:	9300      	str	r3, [sp, #0]
     816:	f04f 0028 	mov.w	r0, #40	; 0x28
     81a:	f04f 013c 	mov.w	r1, #60	; 0x3c
     81e:	f04f 0203 	mov.w	r2, #3
     822:	f04f 0326 	mov.w	r3, #38	; 0x26
     826:	f000 fd27 	bl	1278 <drawRectangle>
				drawRectangle(40, 90, 38, 3, ILI9341_BLACK);
     82a:	f04f 0300 	mov.w	r3, #0
     82e:	9300      	str	r3, [sp, #0]
     830:	f04f 0028 	mov.w	r0, #40	; 0x28
     834:	f04f 015a 	mov.w	r1, #90	; 0x5a
     838:	f04f 0226 	mov.w	r2, #38	; 0x26
     83c:	f04f 0303 	mov.w	r3, #3
     840:	f000 fd1a 	bl	1278 <drawRectangle>
				drawRectangle(40, 60, 38, 3, ILI9341_BLACK);
     844:	f04f 0300 	mov.w	r3, #0
     848:	9300      	str	r3, [sp, #0]
     84a:	f04f 0028 	mov.w	r0, #40	; 0x28
     84e:	f04f 013c 	mov.w	r1, #60	; 0x3c
     852:	f04f 0226 	mov.w	r2, #38	; 0x26
     856:	f04f 0303 	mov.w	r3, #3
     85a:	f000 fd0d 	bl	1278 <drawRectangle>
				drawRectangle(75, 60, 3, 38, ILI9341_BLACK);
     85e:	f04f 0300 	mov.w	r3, #0
     862:	9300      	str	r3, [sp, #0]
     864:	f04f 004b 	mov.w	r0, #75	; 0x4b
     868:	f04f 013c 	mov.w	r1, #60	; 0x3c
     86c:	f04f 0203 	mov.w	r2, #3
     870:	f04f 0326 	mov.w	r3, #38	; 0x26
     874:	f000 fd00 	bl	1278 <drawRectangle>

				//drawCircle
				drawCircle(180,240 , 20, ILI9341_BLACK);
     878:	f04f 00b4 	mov.w	r0, #180	; 0xb4
     87c:	f04f 01f0 	mov.w	r1, #240	; 0xf0
     880:	f04f 0214 	mov.w	r2, #20
     884:	f04f 0300 	mov.w	r3, #0
     888:	f001 f88a 	bl	19a0 <drawCircle>

				//Draw E

				drawRectanglePixel(160, 75, 30, 5, ILI9341_BLACK);
     88c:	f04f 0300 	mov.w	r3, #0
     890:	9300      	str	r3, [sp, #0]
     892:	f04f 00a0 	mov.w	r0, #160	; 0xa0
     896:	f04f 014b 	mov.w	r1, #75	; 0x4b
     89a:	f04f 021e 	mov.w	r2, #30
     89e:	f04f 0305 	mov.w	r3, #5
     8a2:	f000 fd29 	bl	12f8 <drawRectanglePixel>
				drawRectanglePixel(190, 75, 5, 20, ILI9341_BLACK);
     8a6:	f04f 0300 	mov.w	r3, #0
     8aa:	9300      	str	r3, [sp, #0]
     8ac:	f04f 00be 	mov.w	r0, #190	; 0xbe
     8b0:	f04f 014b 	mov.w	r1, #75	; 0x4b
     8b4:	f04f 0205 	mov.w	r2, #5
     8b8:	f04f 0314 	mov.w	r3, #20
     8bc:	f000 fd1c 	bl	12f8 <drawRectanglePixel>
				drawRectanglePixel(175, 75, 5, 20, ILI9341_BLACK);
     8c0:	f04f 0300 	mov.w	r3, #0
     8c4:	9300      	str	r3, [sp, #0]
     8c6:	f04f 00af 	mov.w	r0, #175	; 0xaf
     8ca:	f04f 014b 	mov.w	r1, #75	; 0x4b
     8ce:	f04f 0205 	mov.w	r2, #5
     8d2:	f04f 0314 	mov.w	r3, #20
     8d6:	f000 fd0f 	bl	12f8 <drawRectanglePixel>
				drawRectanglePixel(160, 75, 5, 20, ILI9341_BLACK);
     8da:	f04f 0300 	mov.w	r3, #0
     8de:	9300      	str	r3, [sp, #0]
     8e0:	f04f 00a0 	mov.w	r0, #160	; 0xa0
     8e4:	f04f 014b 	mov.w	r1, #75	; 0x4b
     8e8:	f04f 0205 	mov.w	r2, #5
     8ec:	f04f 0314 	mov.w	r3, #20
     8f0:	f000 fd02 	bl	12f8 <drawRectanglePixel>

			}

			while(menu == 2){
     8f4:	e18c      	b.n	c10 <main+0x770>
				uint8_t buf[5] = {0x11, 0x11, 0x11, 0x11, 0x00};
     8f6:	f244 429c 	movw	r2, #17564	; 0x449c
     8fa:	f2c0 0200 	movt	r2, #0
     8fe:	f107 0308 	add.w	r3, r7, #8
     902:	e892 0003 	ldmia.w	r2, {r0, r1}
     906:	6018      	str	r0, [r3, #0]
     908:	f103 0304 	add.w	r3, r3, #4
     90c:	7019      	strb	r1, [r3, #0]

				if (touched()) {
     90e:	f000 fc83 	bl	1218 <touched>
     912:	4603      	mov	r3, r0
     914:	2b00      	cmp	r3, #0
     916:	f000 817b 	beq.w	c10 <main+0x770>
								// read x & y & z;
								while (! bufferEmpty()) {
     91a:	e173      	b.n	c04 <main+0x764>

								  readTouch(&x, &y, &z);
     91c:	f240 0020 	movw	r0, #32
     920:	f2c2 0000 	movt	r0, #8192	; 0x2000
     924:	f240 012a 	movw	r1, #42	; 0x2a
     928:	f2c2 0100 	movt	r1, #8192	; 0x2000
     92c:	f240 0228 	movw	r2, #40	; 0x28
     930:	f2c2 0200 	movt	r2, #8192	; 0x2000
     934:	f000 fc1e 	bl	1174 <readTouch>
								 //printf("x: %d   y: %d \n\r", x, y);
								  x -= 200;
     938:	f240 0320 	movw	r3, #32
     93c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     940:	881b      	ldrh	r3, [r3, #0]
     942:	f1a3 03c8 	sub.w	r3, r3, #200	; 0xc8
     946:	b29a      	uxth	r2, r3
     948:	f240 0320 	movw	r3, #32
     94c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     950:	801a      	strh	r2, [r3, #0]
								  y -= 320;
     952:	f240 032a 	movw	r3, #42	; 0x2a
     956:	f2c2 0300 	movt	r3, #8192	; 0x2000
     95a:	881b      	ldrh	r3, [r3, #0]
     95c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
     960:	b29a      	uxth	r2, r3
     962:	f240 032a 	movw	r3, #42	; 0x2a
     966:	f2c2 0300 	movt	r3, #8192	; 0x2000
     96a:	801a      	strh	r2, [r3, #0]

								  float temp = x/3730.0;
     96c:	f240 0320 	movw	r3, #32
     970:	f2c2 0300 	movt	r3, #8192	; 0x2000
     974:	881b      	ldrh	r3, [r3, #0]
     976:	4618      	mov	r0, r3
     978:	f003 f8c2 	bl	3b00 <__aeabi_i2d>
     97c:	4602      	mov	r2, r0
     97e:	460b      	mov	r3, r1
     980:	4610      	mov	r0, r2
     982:	4619      	mov	r1, r3
     984:	f20f 43b8 	addw	r3, pc, #1208	; 0x4b8
     988:	e9d3 2300 	ldrd	r2, r3, [r3]
     98c:	f003 fa48 	bl	3e20 <__aeabi_ddiv>
     990:	4602      	mov	r2, r0
     992:	460b      	mov	r3, r1
     994:	4610      	mov	r0, r2
     996:	4619      	mov	r1, r3
     998:	f003 fb2a 	bl	3ff0 <__aeabi_d2f>
     99c:	4603      	mov	r3, r0
     99e:	63bb      	str	r3, [r7, #56]	; 0x38
								  temp *= 240;
     9a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
     9a2:	f8df 14ac 	ldr.w	r1, [pc, #1196]	; e50 <main+0x9b0>
     9a6:	f003 fb73 	bl	4090 <__aeabi_fmul>
     9aa:	4603      	mov	r3, r0
     9ac:	63bb      	str	r3, [r7, #56]	; 0x38
								  x = temp;
     9ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
     9b0:	f003 fcbe 	bl	4330 <__aeabi_f2uiz>
     9b4:	4603      	mov	r3, r0
     9b6:	b29a      	uxth	r2, r3
     9b8:	f240 0320 	movw	r3, #32
     9bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
     9c0:	801a      	strh	r2, [r3, #0]

								  temp = y/3605.0;
     9c2:	f240 032a 	movw	r3, #42	; 0x2a
     9c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
     9ca:	881b      	ldrh	r3, [r3, #0]
     9cc:	4618      	mov	r0, r3
     9ce:	f003 f897 	bl	3b00 <__aeabi_i2d>
     9d2:	4602      	mov	r2, r0
     9d4:	460b      	mov	r3, r1
     9d6:	4610      	mov	r0, r2
     9d8:	4619      	mov	r1, r3
     9da:	f20f 436c 	addw	r3, pc, #1132	; 0x46c
     9de:	e9d3 2300 	ldrd	r2, r3, [r3]
     9e2:	f003 fa1d 	bl	3e20 <__aeabi_ddiv>
     9e6:	4602      	mov	r2, r0
     9e8:	460b      	mov	r3, r1
     9ea:	4610      	mov	r0, r2
     9ec:	4619      	mov	r1, r3
     9ee:	f003 faff 	bl	3ff0 <__aeabi_d2f>
     9f2:	4603      	mov	r3, r0
     9f4:	63bb      	str	r3, [r7, #56]	; 0x38
								  temp *= 320;
     9f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
     9f8:	f8df 1458 	ldr.w	r1, [pc, #1112]	; e54 <main+0x9b4>
     9fc:	f003 fb48 	bl	4090 <__aeabi_fmul>
     a00:	4603      	mov	r3, r0
     a02:	63bb      	str	r3, [r7, #56]	; 0x38
								  y = temp;
     a04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
     a06:	f003 fc93 	bl	4330 <__aeabi_f2uiz>
     a0a:	4603      	mov	r3, r0
     a0c:	b29a      	uxth	r2, r3
     a0e:	f240 032a 	movw	r3, #42	; 0x2a
     a12:	f2c2 0300 	movt	r3, #8192	; 0x2000
     a16:	801a      	strh	r2, [r3, #0]

								  x = 240 - x;
     a18:	f240 0320 	movw	r3, #32
     a1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     a20:	881b      	ldrh	r3, [r3, #0]
     a22:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
     a26:	b29a      	uxth	r2, r3
     a28:	f240 0320 	movw	r3, #32
     a2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     a30:	801a      	strh	r2, [r3, #0]
								  y = 320 - y;
     a32:	f240 032a 	movw	r3, #42	; 0x2a
     a36:	f2c2 0300 	movt	r3, #8192	; 0x2000
     a3a:	881b      	ldrh	r3, [r3, #0]
     a3c:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
     a40:	b29a      	uxth	r2, r3
     a42:	f240 032a 	movw	r3, #42	; 0x2a
     a46:	f2c2 0300 	movt	r3, #8192	; 0x2000
     a4a:	801a      	strh	r2, [r3, #0]

								  //printf("x: %d   y: %d \n\r", x, y);
								  drawRectanglePixel(x, y, 2, 2, ILI9341_BLUE);
     a4c:	f240 0320 	movw	r3, #32
     a50:	f2c2 0300 	movt	r3, #8192	; 0x2000
     a54:	881a      	ldrh	r2, [r3, #0]
     a56:	f240 032a 	movw	r3, #42	; 0x2a
     a5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     a5e:	881b      	ldrh	r3, [r3, #0]
     a60:	f04f 011f 	mov.w	r1, #31
     a64:	9100      	str	r1, [sp, #0]
     a66:	4610      	mov	r0, r2
     a68:	4619      	mov	r1, r3
     a6a:	f04f 0202 	mov.w	r2, #2
     a6e:	f04f 0302 	mov.w	r3, #2
     a72:	f000 fc41 	bl	12f8 <drawRectanglePixel>
								  if(x>120){
     a76:	f240 0320 	movw	r3, #32
     a7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     a7e:	881b      	ldrh	r3, [r3, #0]
     a80:	2b78      	cmp	r3, #120	; 0x78
     a82:	d948      	bls.n	b16 <main+0x676>
									  if(y>165){
     a84:	f240 032a 	movw	r3, #42	; 0x2a
     a88:	f2c2 0300 	movt	r3, #8192	; 0x2000
     a8c:	881b      	ldrh	r3, [r3, #0]
     a8e:	2ba5      	cmp	r3, #165	; 0xa5
     a90:	d920      	bls.n	ad4 <main+0x634>
										  //send box

										  buf[4] = '(';
     a92:	f04f 0328 	mov.w	r3, #40	; 0x28
     a96:	733b      	strb	r3, [r7, #12]
										  sendMessage(buf, 5, 0x000);
     a98:	f107 0308 	add.w	r3, r7, #8
     a9c:	4618      	mov	r0, r3
     a9e:	f04f 0105 	mov.w	r1, #5
     aa2:	f04f 0200 	mov.w	r2, #0
     aa6:	f001 f86b 	bl	1b80 <sendMessage>
										  while (!bufferEmpty()){
     aaa:	e00d      	b.n	ac8 <main+0x628>
									  				readTouch(&x, &y, &z);
     aac:	f240 0020 	movw	r0, #32
     ab0:	f2c2 0000 	movt	r0, #8192	; 0x2000
     ab4:	f240 012a 	movw	r1, #42	; 0x2a
     ab8:	f2c2 0100 	movt	r1, #8192	; 0x2000
     abc:	f240 0228 	movw	r2, #40	; 0x28
     ac0:	f2c2 0200 	movt	r2, #8192	; 0x2000
     ac4:	f000 fb56 	bl	1174 <readTouch>
									  if(y>165){
										  //send box

										  buf[4] = '(';
										  sendMessage(buf, 5, 0x000);
										  while (!bufferEmpty()){
     ac8:	f000 fefe 	bl	18c8 <bufferEmpty>
     acc:	4603      	mov	r3, r0
     ace:	2b00      	cmp	r3, #0
     ad0:	d0ec      	beq.n	aac <main+0x60c>
									  }
									  else{
										  //send tri
										  buf[4] = '<';
										  sendMessage(buf, 5, 0x000);
										  while (!bufferEmpty()){
     ad2:	e097      	b.n	c04 <main+0x764>
										  										  			}

									  }
									  else{
										  //send tri
										  buf[4] = '<';
     ad4:	f04f 033c 	mov.w	r3, #60	; 0x3c
     ad8:	733b      	strb	r3, [r7, #12]
										  sendMessage(buf, 5, 0x000);
     ada:	f107 0308 	add.w	r3, r7, #8
     ade:	4618      	mov	r0, r3
     ae0:	f04f 0105 	mov.w	r1, #5
     ae4:	f04f 0200 	mov.w	r2, #0
     ae8:	f001 f84a 	bl	1b80 <sendMessage>
										  while (!bufferEmpty()){
     aec:	e00d      	b.n	b0a <main+0x66a>
										  			readTouch(&x, &y, &z);
     aee:	f240 0020 	movw	r0, #32
     af2:	f2c2 0000 	movt	r0, #8192	; 0x2000
     af6:	f240 012a 	movw	r1, #42	; 0x2a
     afa:	f2c2 0100 	movt	r1, #8192	; 0x2000
     afe:	f240 0228 	movw	r2, #40	; 0x28
     b02:	f2c2 0200 	movt	r2, #8192	; 0x2000
     b06:	f000 fb35 	bl	1174 <readTouch>
									  }
									  else{
										  //send tri
										  buf[4] = '<';
										  sendMessage(buf, 5, 0x000);
										  while (!bufferEmpty()){
     b0a:	f000 fedd 	bl	18c8 <bufferEmpty>
     b0e:	4603      	mov	r3, r0
     b10:	2b00      	cmp	r3, #0
     b12:	d0ec      	beq.n	aee <main+0x64e>
     b14:	e076      	b.n	c04 <main+0x764>

									  }

								  }
								  else{
									  if(y<165){
     b16:	f240 032a 	movw	r3, #42	; 0x2a
     b1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     b1e:	881b      	ldrh	r3, [r3, #0]
     b20:	2ba4      	cmp	r3, #164	; 0xa4
     b22:	d82f      	bhi.n	b84 <main+0x6e4>
										  //send Circle
										  buf[4] = '[';
     b24:	f04f 035b 	mov.w	r3, #91	; 0x5b
     b28:	733b      	strb	r3, [r7, #12]
										  sendMessage(buf, 5, 0x000);
     b2a:	f107 0308 	add.w	r3, r7, #8
     b2e:	4618      	mov	r0, r3
     b30:	f04f 0105 	mov.w	r1, #5
     b34:	f04f 0200 	mov.w	r2, #0
     b38:	f001 f822 	bl	1b80 <sendMessage>
										  while (!bufferEmpty()){
     b3c:	e00d      	b.n	b5a <main+0x6ba>
										  				readTouch(&x, &y, &z);
     b3e:	f240 0020 	movw	r0, #32
     b42:	f2c2 0000 	movt	r0, #8192	; 0x2000
     b46:	f240 012a 	movw	r1, #42	; 0x2a
     b4a:	f2c2 0100 	movt	r1, #8192	; 0x2000
     b4e:	f240 0228 	movw	r2, #40	; 0x28
     b52:	f2c2 0200 	movt	r2, #8192	; 0x2000
     b56:	f000 fb0d 	bl	1174 <readTouch>
								  else{
									  if(y<165){
										  //send Circle
										  buf[4] = '[';
										  sendMessage(buf, 5, 0x000);
										  while (!bufferEmpty()){
     b5a:	f000 feb5 	bl	18c8 <bufferEmpty>
     b5e:	4603      	mov	r3, r0
     b60:	2b00      	cmp	r3, #0
     b62:	d0ec      	beq.n	b3e <main+0x69e>
     b64:	e04e      	b.n	c04 <main+0x764>
										  										  			}

									  }
									  else{
										  while (!bufferEmpty()){
										  				readTouch(&x, &y, &z);
     b66:	f240 0020 	movw	r0, #32
     b6a:	f2c2 0000 	movt	r0, #8192	; 0x2000
     b6e:	f240 012a 	movw	r1, #42	; 0x2a
     b72:	f2c2 0100 	movt	r1, #8192	; 0x2000
     b76:	f240 0228 	movw	r2, #40	; 0x28
     b7a:	f2c2 0200 	movt	r2, #8192	; 0x2000
     b7e:	f000 faf9 	bl	1174 <readTouch>
     b82:	e000      	b.n	b86 <main+0x6e6>
										  				readTouch(&x, &y, &z);
										  										  			}

									  }
									  else{
										  while (!bufferEmpty()){
     b84:	bf00      	nop
     b86:	f000 fe9f 	bl	18c8 <bufferEmpty>
     b8a:	4603      	mov	r3, r0
     b8c:	2b00      	cmp	r3, #0
     b8e:	d0ea      	beq.n	b66 <main+0x6c6>
										  				readTouch(&x, &y, &z);
										  			}
										  menu = -1;
     b90:	f04f 33ff 	mov.w	r3, #4294967295
     b94:	61bb      	str	r3, [r7, #24]
										  drawFillScreen(ILI9341_BLUE);
     b96:	f04f 001f 	mov.w	r0, #31
     b9a:	f000 fbdb 	bl	1354 <drawFillScreen>
										  	drawRectangle(5, 5, 110, 152, ILI9341_YELLOW);
     b9e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
     ba2:	9300      	str	r3, [sp, #0]
     ba4:	f04f 0005 	mov.w	r0, #5
     ba8:	f04f 0105 	mov.w	r1, #5
     bac:	f04f 026e 	mov.w	r2, #110	; 0x6e
     bb0:	f04f 0398 	mov.w	r3, #152	; 0x98
     bb4:	f000 fb60 	bl	1278 <drawRectangle>
										  	drawRectangle(5, 165, 110, 152, ILI9341_YELLOW);
     bb8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
     bbc:	9300      	str	r3, [sp, #0]
     bbe:	f04f 0005 	mov.w	r0, #5
     bc2:	f04f 01a5 	mov.w	r1, #165	; 0xa5
     bc6:	f04f 026e 	mov.w	r2, #110	; 0x6e
     bca:	f04f 0398 	mov.w	r3, #152	; 0x98
     bce:	f000 fb53 	bl	1278 <drawRectangle>
										  	drawRectangle(120, 5, 115, 312, ILI9341_YELLOW);
     bd2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
     bd6:	9300      	str	r3, [sp, #0]
     bd8:	f04f 0078 	mov.w	r0, #120	; 0x78
     bdc:	f04f 0105 	mov.w	r1, #5
     be0:	f04f 0273 	mov.w	r2, #115	; 0x73
     be4:	f44f 739c 	mov.w	r3, #312	; 0x138
     be8:	f000 fb46 	bl	1278 <drawRectangle>

										  	drawText1(ILI9341_BLACK);
     bec:	f04f 0000 	mov.w	r0, #0
     bf0:	f000 fbea 	bl	13c8 <drawText1>
										  	drawText2(ILI9341_BLACK);
     bf4:	f04f 0000 	mov.w	r0, #0
     bf8:	f000 fc08 	bl	140c <drawText2>
										  	drawText3(ILI9341_BLACK);
     bfc:	f04f 0000 	mov.w	r0, #0
     c00:	f000 fc32 	bl	1468 <drawText3>
			while(menu == 2){
				uint8_t buf[5] = {0x11, 0x11, 0x11, 0x11, 0x00};

				if (touched()) {
								// read x & y & z;
								while (! bufferEmpty()) {
     c04:	f000 fe60 	bl	18c8 <bufferEmpty>
     c08:	4603      	mov	r3, r0
     c0a:	2b00      	cmp	r3, #0
     c0c:	f43f ae86 	beq.w	91c <main+0x47c>
				drawRectanglePixel(175, 75, 5, 20, ILI9341_BLACK);
				drawRectanglePixel(160, 75, 5, 20, ILI9341_BLACK);

			}

			while(menu == 2){
     c10:	69bb      	ldr	r3, [r7, #24]
     c12:	2b02      	cmp	r3, #2
     c14:	f43f ae6f 	beq.w	8f6 <main+0x456>

								}
							}
			}

			while( menu == 0 )
     c18:	e10c      	b.n	e34 <main+0x994>
		{  			while (touched()) {
						// read x & y & z;
						while (! bufferEmpty()) {

							readTouch(&x, &y, &z);
     c1a:	f240 0020 	movw	r0, #32
     c1e:	f2c2 0000 	movt	r0, #8192	; 0x2000
     c22:	f240 012a 	movw	r1, #42	; 0x2a
     c26:	f2c2 0100 	movt	r1, #8192	; 0x2000
     c2a:	f240 0228 	movw	r2, #40	; 0x28
     c2e:	f2c2 0200 	movt	r2, #8192	; 0x2000
     c32:	f000 fa9f 	bl	1174 <readTouch>
							 //printf("x: %d   y: %d \n\r", x, y);
							  x -= 200;
     c36:	f240 0320 	movw	r3, #32
     c3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     c3e:	881b      	ldrh	r3, [r3, #0]
     c40:	f1a3 03c8 	sub.w	r3, r3, #200	; 0xc8
     c44:	b29a      	uxth	r2, r3
     c46:	f240 0320 	movw	r3, #32
     c4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     c4e:	801a      	strh	r2, [r3, #0]
							  y -= 320;
     c50:	f240 032a 	movw	r3, #42	; 0x2a
     c54:	f2c2 0300 	movt	r3, #8192	; 0x2000
     c58:	881b      	ldrh	r3, [r3, #0]
     c5a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
     c5e:	b29a      	uxth	r2, r3
     c60:	f240 032a 	movw	r3, #42	; 0x2a
     c64:	f2c2 0300 	movt	r3, #8192	; 0x2000
     c68:	801a      	strh	r2, [r3, #0]

							  float temp = x/3730.0;
     c6a:	f240 0320 	movw	r3, #32
     c6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
     c72:	881b      	ldrh	r3, [r3, #0]
     c74:	4618      	mov	r0, r3
     c76:	f002 ff43 	bl	3b00 <__aeabi_i2d>
     c7a:	4602      	mov	r2, r0
     c7c:	460b      	mov	r3, r1
     c7e:	4610      	mov	r0, r2
     c80:	4619      	mov	r1, r3
     c82:	a36f      	add	r3, pc, #444	; (adr r3, e40 <main+0x9a0>)
     c84:	e9d3 2300 	ldrd	r2, r3, [r3]
     c88:	f003 f8ca 	bl	3e20 <__aeabi_ddiv>
     c8c:	4602      	mov	r2, r0
     c8e:	460b      	mov	r3, r1
     c90:	4610      	mov	r0, r2
     c92:	4619      	mov	r1, r3
     c94:	f003 f9ac 	bl	3ff0 <__aeabi_d2f>
     c98:	4603      	mov	r3, r0
     c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
							  temp *= 240;
     c9c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
     c9e:	496c      	ldr	r1, [pc, #432]	; (e50 <main+0x9b0>)
     ca0:	f003 f9f6 	bl	4090 <__aeabi_fmul>
     ca4:	4603      	mov	r3, r0
     ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
							  x = temp;
     ca8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
     caa:	f003 fb41 	bl	4330 <__aeabi_f2uiz>
     cae:	4603      	mov	r3, r0
     cb0:	b29a      	uxth	r2, r3
     cb2:	f240 0320 	movw	r3, #32
     cb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cba:	801a      	strh	r2, [r3, #0]

							  temp = y/3605.0;
     cbc:	f240 032a 	movw	r3, #42	; 0x2a
     cc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cc4:	881b      	ldrh	r3, [r3, #0]
     cc6:	4618      	mov	r0, r3
     cc8:	f002 ff1a 	bl	3b00 <__aeabi_i2d>
     ccc:	4602      	mov	r2, r0
     cce:	460b      	mov	r3, r1
     cd0:	4610      	mov	r0, r2
     cd2:	4619      	mov	r1, r3
     cd4:	a35c      	add	r3, pc, #368	; (adr r3, e48 <main+0x9a8>)
     cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
     cda:	f003 f8a1 	bl	3e20 <__aeabi_ddiv>
     cde:	4602      	mov	r2, r0
     ce0:	460b      	mov	r3, r1
     ce2:	4610      	mov	r0, r2
     ce4:	4619      	mov	r1, r3
     ce6:	f003 f983 	bl	3ff0 <__aeabi_d2f>
     cea:	4603      	mov	r3, r0
     cec:	63fb      	str	r3, [r7, #60]	; 0x3c
							  temp *= 320;
     cee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
     cf0:	4958      	ldr	r1, [pc, #352]	; (e54 <main+0x9b4>)
     cf2:	f003 f9cd 	bl	4090 <__aeabi_fmul>
     cf6:	4603      	mov	r3, r0
     cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
							  y = temp;
     cfa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
     cfc:	f003 fb18 	bl	4330 <__aeabi_f2uiz>
     d00:	4603      	mov	r3, r0
     d02:	b29a      	uxth	r2, r3
     d04:	f240 032a 	movw	r3, #42	; 0x2a
     d08:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d0c:	801a      	strh	r2, [r3, #0]

							  x = 240 - x;
     d0e:	f240 0320 	movw	r3, #32
     d12:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d16:	881b      	ldrh	r3, [r3, #0]
     d18:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
     d1c:	b29a      	uxth	r2, r3
     d1e:	f240 0320 	movw	r3, #32
     d22:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d26:	801a      	strh	r2, [r3, #0]
							  y = 320 - y;
     d28:	f240 032a 	movw	r3, #42	; 0x2a
     d2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d30:	881b      	ldrh	r3, [r3, #0]
     d32:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
     d36:	b29a      	uxth	r2, r3
     d38:	f240 032a 	movw	r3, #42	; 0x2a
     d3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d40:	801a      	strh	r2, [r3, #0]

							  //printf("x: %d   y: %d \n\r", x, y);
						  if(!t){
     d42:	69fb      	ldr	r3, [r7, #28]
     d44:	2b00      	cmp	r3, #0
     d46:	d148      	bne.n	dda <main+0x93a>
							  if(count < 250){
     d48:	6a3b      	ldr	r3, [r7, #32]
     d4a:	2bf9      	cmp	r3, #249	; 0xf9
     d4c:	dc4a      	bgt.n	de4 <main+0x944>

								  drawRectanglePixel(x, y, 6, 6, ILI9341_BLUE);
     d4e:	f240 0320 	movw	r3, #32
     d52:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d56:	881a      	ldrh	r2, [r3, #0]
     d58:	f240 032a 	movw	r3, #42	; 0x2a
     d5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d60:	881b      	ldrh	r3, [r3, #0]
     d62:	f04f 011f 	mov.w	r1, #31
     d66:	9100      	str	r1, [sp, #0]
     d68:	4610      	mov	r0, r2
     d6a:	4619      	mov	r1, r3
     d6c:	f04f 0206 	mov.w	r2, #6
     d70:	f04f 0306 	mov.w	r3, #6
     d74:	f000 fac0 	bl	12f8 <drawRectanglePixel>
								  uint8_t buf[5] = {0,0,0,255-scaleX(x),scaleY(y)};
     d78:	f240 0320 	movw	r3, #32
     d7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d80:	881b      	ldrh	r3, [r3, #0]
     d82:	4618      	mov	r0, r3
     d84:	f000 fdac 	bl	18e0 <scaleX>
     d88:	4603      	mov	r3, r0
     d8a:	ea6f 0303 	mvn.w	r3, r3
     d8e:	b2dc      	uxtb	r4, r3
     d90:	f240 032a 	movw	r3, #42	; 0x2a
     d94:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d98:	881b      	ldrh	r3, [r3, #0]
     d9a:	4618      	mov	r0, r3
     d9c:	f000 fdd0 	bl	1940 <scaleY>
     da0:	4603      	mov	r3, r0
     da2:	f04f 0200 	mov.w	r2, #0
     da6:	703a      	strb	r2, [r7, #0]
     da8:	f04f 0200 	mov.w	r2, #0
     dac:	707a      	strb	r2, [r7, #1]
     dae:	f04f 0200 	mov.w	r2, #0
     db2:	70ba      	strb	r2, [r7, #2]
     db4:	4622      	mov	r2, r4
     db6:	70fa      	strb	r2, [r7, #3]
     db8:	713b      	strb	r3, [r7, #4]
								  sendMessage(buf, 5, 0x000);
     dba:	463b      	mov	r3, r7
     dbc:	4618      	mov	r0, r3
     dbe:	f04f 0105 	mov.w	r1, #5
     dc2:	f04f 0200 	mov.w	r2, #0
     dc6:	f000 fedb 	bl	1b80 <sendMessage>

								  count++;
     dca:	6a3b      	ldr	r3, [r7, #32]
     dcc:	f103 0301 	add.w	r3, r3, #1
     dd0:	623b      	str	r3, [r7, #32]
								  t = 0;
     dd2:	f04f 0300 	mov.w	r3, #0
     dd6:	61fb      	str	r3, [r7, #28]
     dd8:	e007      	b.n	dea <main+0x94a>
							  }


								  }
								  else{
									  t++;
     dda:	69fb      	ldr	r3, [r7, #28]
     ddc:	f103 0301 	add.w	r3, r3, #1
     de0:	61fb      	str	r3, [r7, #28]
     de2:	e002      	b.n	dea <main+0x94a>
								  drawRectanglePixel(x, y, 6, 6, ILI9341_BLUE);
								  uint8_t buf[5] = {0,0,0,255-scaleX(x),scaleY(y)};
								  sendMessage(buf, 5, 0x000);

								  count++;
								  t = 0;
     de4:	bf00      	nop
     de6:	e000      	b.n	dea <main+0x94a>
			}

			while( menu == 0 )
		{  			while (touched()) {
						// read x & y & z;
						while (! bufferEmpty()) {
     de8:	bf00      	nop
     dea:	f000 fd6d 	bl	18c8 <bufferEmpty>
     dee:	4603      	mov	r3, r0
     df0:	2b00      	cmp	r3, #0
     df2:	f43f af12 	beq.w	c1a <main+0x77a>
     df6:	e000      	b.n	dfa <main+0x95a>
								}
							}
			}

			while( menu == 0 )
		{  			while (touched()) {
     df8:	bf00      	nop
     dfa:	f000 fa0d 	bl	1218 <touched>
     dfe:	4603      	mov	r3, r0
     e00:	2b00      	cmp	r3, #0
     e02:	d1f1      	bne.n	de8 <main+0x948>


								}
								//writeRegister8(STMPE_INT_STA, 0xFF); // reset all ints, in this example unneeded depending in use
							  }
							while (!bufferEmpty()){
     e04:	e00d      	b.n	e22 <main+0x982>
									readTouch(&x, &y, &z);
     e06:	f240 0020 	movw	r0, #32
     e0a:	f2c2 0000 	movt	r0, #8192	; 0x2000
     e0e:	f240 012a 	movw	r1, #42	; 0x2a
     e12:	f2c2 0100 	movt	r1, #8192	; 0x2000
     e16:	f240 0228 	movw	r2, #40	; 0x28
     e1a:	f2c2 0200 	movt	r2, #8192	; 0x2000
     e1e:	f000 f9a9 	bl	1174 <readTouch>


								}
								//writeRegister8(STMPE_INT_STA, 0xFF); // reset all ints, in this example unneeded depending in use
							  }
							while (!bufferEmpty()){
     e22:	f000 fd51 	bl	18c8 <bufferEmpty>
     e26:	4603      	mov	r3, r0
     e28:	2b00      	cmp	r3, #0
     e2a:	d0ec      	beq.n	e06 <main+0x966>
									readTouch(&x, &y, &z);
								}
							  delay(1);
     e2c:	f04f 0001 	mov.w	r0, #1
     e30:	f000 fba0 	bl	1574 <delay>

								}
							}
			}

			while( menu == 0 )
     e34:	69bb      	ldr	r3, [r7, #24]
     e36:	2b00      	cmp	r3, #0
     e38:	d0de      	beq.n	df8 <main+0x958>




				}
	}
     e3a:	bf00      	nop
	drawText2(ILI9341_BLACK);
	drawText3(ILI9341_BLACK);

	while(1){

		while(menu == -1){
     e3c:	e488      	b.n	750 <main+0x2b0>
     e3e:	bf00      	nop
     e40:	00000000 	.word	0x00000000
     e44:	40ad2400 	.word	0x40ad2400
     e48:	00000000 	.word	0x00000000
     e4c:	40ac2a00 	.word	0x40ac2a00
     e50:	43700000 	.word	0x43700000
     e54:	43a00000 	.word	0x43a00000

00000e58 <NVIC_DisableIRQ>:
 * 
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
     e58:	b480      	push	{r7}
     e5a:	b083      	sub	sp, #12
     e5c:	af00      	add	r7, sp, #0
     e5e:	4603      	mov	r3, r0
     e60:	80fb      	strh	r3, [r7, #6]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
     e62:	f24e 1300 	movw	r3, #57600	; 0xe100
     e66:	f2ce 0300 	movt	r3, #57344	; 0xe000
     e6a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
     e6e:	ea4f 1252 	mov.w	r2, r2, lsr #5
     e72:	88f9      	ldrh	r1, [r7, #6]
     e74:	f001 011f 	and.w	r1, r1, #31
     e78:	f04f 0001 	mov.w	r0, #1
     e7c:	fa00 f101 	lsl.w	r1, r0, r1
     e80:	f102 0220 	add.w	r2, r2, #32
     e84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
     e88:	f107 070c 	add.w	r7, r7, #12
     e8c:	46bd      	mov	sp, r7
     e8e:	bc80      	pop	{r7}
     e90:	4770      	bx	lr
     e92:	bf00      	nop

00000e94 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
     e94:	b480      	push	{r7}
     e96:	b083      	sub	sp, #12
     e98:	af00      	add	r7, sp, #0
     e9a:	4603      	mov	r3, r0
     e9c:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     e9e:	f24e 1300 	movw	r3, #57600	; 0xe100
     ea2:	f2ce 0300 	movt	r3, #57344	; 0xe000
     ea6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
     eaa:	ea4f 1252 	mov.w	r2, r2, lsr #5
     eae:	88f9      	ldrh	r1, [r7, #6]
     eb0:	f001 011f 	and.w	r1, r1, #31
     eb4:	f04f 0001 	mov.w	r0, #1
     eb8:	fa00 f101 	lsl.w	r1, r0, r1
     ebc:	f102 0260 	add.w	r2, r2, #96	; 0x60
     ec0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
     ec4:	f107 070c 	add.w	r7, r7, #12
     ec8:	46bd      	mov	sp, r7
     eca:	bc80      	pop	{r7}
     ecc:	4770      	bx	lr
     ece:	bf00      	nop

00000ed0 <MSS_TIM1_init>:
    one-shot mode. Allowed values for this parameter are:
        - MSS_TIMER_PERIODIC_MODE
        - MSS_TIMER_ONE_SHOT_MODE
 */
static __INLINE void MSS_TIM1_init( mss_timer_mode_t mode )
{
     ed0:	b580      	push	{r7, lr}
     ed2:	b082      	sub	sp, #8
     ed4:	af00      	add	r7, sp, #0
     ed6:	4603      	mov	r3, r0
     ed8:	71fb      	strb	r3, [r7, #7]
    NVIC_DisableIRQ( Timer1_IRQn );             /* Disable timer 1 irq in the Cortex-M3 NVIC */  
     eda:	f04f 0014 	mov.w	r0, #20
     ede:	f7ff ffbb 	bl	e58 <NVIC_DisableIRQ>
    
    SYSREG->SOFT_RST_CR &= ~SYSREG_TIMER_SOFTRESET_MASK; /* Take timer block out of reset */
     ee2:	f242 0300 	movw	r3, #8192	; 0x2000
     ee6:	f2ce 0304 	movt	r3, #57348	; 0xe004
     eea:	f242 0200 	movw	r2, #8192	; 0x2000
     eee:	f2ce 0204 	movt	r2, #57348	; 0xe004
     ef2:	6b12      	ldr	r2, [r2, #48]	; 0x30
     ef4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
     ef8:	631a      	str	r2, [r3, #48]	; 0x30
    
    TIMER->TIM64_MODE = 0U;                     /* switch to 32 bits mode */
     efa:	f245 0300 	movw	r3, #20480	; 0x5000
     efe:	f2c4 0300 	movt	r3, #16384	; 0x4000
     f02:	f04f 0200 	mov.w	r2, #0
     f06:	655a      	str	r2, [r3, #84]	; 0x54
    
    TIMER_BITBAND->TIM1ENABLE = 0U;             /* disable timer */
     f08:	f240 0300 	movw	r3, #0
     f0c:	f2c4 230a 	movt	r3, #16906	; 0x420a
     f10:	f04f 0200 	mov.w	r2, #0
     f14:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    TIMER_BITBAND->TIM1INTEN = 0U;              /* disable interrupt */
     f18:	f240 0300 	movw	r3, #0
     f1c:	f2c4 230a 	movt	r3, #16906	; 0x420a
     f20:	f04f 0200 	mov.w	r2, #0
     f24:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    TIMER_BITBAND->TIM1MODE = (uint32_t)mode;   /* set mode (continuous/one-shot) */
     f28:	f240 0300 	movw	r3, #0
     f2c:	f2c4 230a 	movt	r3, #16906	; 0x420a
     f30:	79fa      	ldrb	r2, [r7, #7]
     f32:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    
    TIMER->TIM1_RIS = 1U;                       /* clear timer 1 interrupt */
     f36:	f245 0300 	movw	r3, #20480	; 0x5000
     f3a:	f2c4 0300 	movt	r3, #16384	; 0x4000
     f3e:	f04f 0201 	mov.w	r2, #1
     f42:	611a      	str	r2, [r3, #16]
    NVIC_ClearPendingIRQ( Timer1_IRQn );        /* clear timer 1 interrupt within NVIC */
     f44:	f04f 0014 	mov.w	r0, #20
     f48:	f7ff ffa4 	bl	e94 <NVIC_ClearPendingIRQ>
}
     f4c:	f107 0708 	add.w	r7, r7, #8
     f50:	46bd      	mov	sp, r7
     f52:	bd80      	pop	{r7, pc}

00000f54 <MSS_TIM1_start>:
  MSS_TIM1_load_immediate() or MSS_TIM1_load_background() functions. 
  Note: The MSS_TIM1_start() function is also used to resume the down-counter
        if previously stopped using MSS_TIM1_stop() function.
 */
static __INLINE void MSS_TIM1_start( void )
{
     f54:	b480      	push	{r7}
     f56:	af00      	add	r7, sp, #0
    TIMER_BITBAND->TIM1ENABLE = 1U;    /* enable timer */
     f58:	f240 0300 	movw	r3, #0
     f5c:	f2c4 230a 	movt	r3, #16906	; 0x420a
     f60:	f04f 0201 	mov.w	r2, #1
     f64:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
     f68:	46bd      	mov	sp, r7
     f6a:	bc80      	pop	{r7}
     f6c:	4770      	bx	lr
     f6e:	bf00      	nop

00000f70 <MSS_TIM1_stop>:
/*-------------------------------------------------------------------------*//**
  The MSS_TIM1_stop() function disables Timer 1 and stops its down-counter
  decrementing.
 */
static __INLINE void MSS_TIM1_stop( void )
{
     f70:	b480      	push	{r7}
     f72:	af00      	add	r7, sp, #0
    TIMER_BITBAND->TIM1ENABLE = 0U;    /* disable timer */
     f74:	f240 0300 	movw	r3, #0
     f78:	f2c4 230a 	movt	r3, #16906	; 0x420a
     f7c:	f04f 0200 	mov.w	r2, #0
     f80:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
     f84:	46bd      	mov	sp, r7
     f86:	bc80      	pop	{r7}
     f88:	4770      	bx	lr
     f8a:	bf00      	nop

00000f8c <MSS_TIM1_get_current_value>:
  
  @return
    This function returns the 32-bits current value of the Timer 1 down-counter.
 */
static __INLINE uint32_t MSS_TIM1_get_current_value( void )
{
     f8c:	b480      	push	{r7}
     f8e:	af00      	add	r7, sp, #0
    return TIMER->TIM1_VAL;
     f90:	f245 0300 	movw	r3, #20480	; 0x5000
     f94:	f2c4 0300 	movt	r3, #16384	; 0x4000
     f98:	681b      	ldr	r3, [r3, #0]
}
     f9a:	4618      	mov	r0, r3
     f9c:	46bd      	mov	sp, r7
     f9e:	bc80      	pop	{r7}
     fa0:	4770      	bx	lr
     fa2:	bf00      	nop

00000fa4 <MSS_TIM1_load_immediate>:
  @param load_value
    The load_value parameter specifies the value from which the Timer 1 
    down-counter will start decrementing.
 */
static __INLINE void MSS_TIM1_load_immediate( uint32_t load_value )
{
     fa4:	b480      	push	{r7}
     fa6:	b083      	sub	sp, #12
     fa8:	af00      	add	r7, sp, #0
     faa:	6078      	str	r0, [r7, #4]
    TIMER->TIM1_LOADVAL = load_value;
     fac:	f245 0300 	movw	r3, #20480	; 0x5000
     fb0:	f2c4 0300 	movt	r3, #16384	; 0x4000
     fb4:	687a      	ldr	r2, [r7, #4]
     fb6:	605a      	str	r2, [r3, #4]
}
     fb8:	f107 070c 	add.w	r7, r7, #12
     fbc:	46bd      	mov	sp, r7
     fbe:	bc80      	pop	{r7}
     fc0:	4770      	bx	lr
     fc2:	bf00      	nop

00000fc4 <touchscreen_begin>:
    0x31, 0xC1, 0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F,
  ILI9341_SLPOUT  , 0x80,                // Exit Sleep
  ILI9341_DISPON  , 0x80,                // Display on
  0x00                                   // End of list
};
void touchscreen_begin(){
     fc4:	b580      	push	{r7, lr}
     fc6:	b094      	sub	sp, #80	; 0x50
     fc8:	af00      	add	r7, sp, #0

	uint8_t cmd, x, numArgs;
	uint8_t i;
	uint8_t temp[65];
	const uint8_t *addr = initcmd;
     fca:	f244 43a4 	movw	r3, #17572	; 0x44a4
     fce:	f2c0 0300 	movt	r3, #0
     fd2:	64fb      	str	r3, [r7, #76]	; 0x4c

	MSS_SPI_init(&g_mss_spi1);
     fd4:	f240 00c0 	movw	r0, #192	; 0xc0
     fd8:	f2c2 0000 	movt	r0, #8192	; 0x2000
     fdc:	f001 fc44 	bl	2868 <MSS_SPI_init>
	MSS_I2C_init(&g_mss_i2c1 , TOUCH_ADDR, MSS_I2C_PCLK_DIV_256 );
     fe0:	f240 203c 	movw	r0, #572	; 0x23c
     fe4:	f2c2 0000 	movt	r0, #8192	; 0x2000
     fe8:	f04f 0141 	mov.w	r1, #65	; 0x41
     fec:	f04f 0200 	mov.w	r2, #0
     ff0:	f002 f8ba 	bl	3168 <MSS_I2C_init>
	MSS_GPIO_init();
     ff4:	f002 f946 	bl	3284 <MSS_GPIO_init>

	MSS_GPIO_config(DC, MSS_GPIO_OUTPUT_MODE);
     ff8:	f04f 0000 	mov.w	r0, #0
     ffc:	f04f 0105 	mov.w	r1, #5
    1000:	f002 f970 	bl	32e4 <MSS_GPIO_config>
	
	configureSPI(8);
    1004:	f04f 0008 	mov.w	r0, #8
    1008:	f000 fb88 	bl	171c <configureSPI>
	set_SPI_CS();
    100c:	f000 fbcc 	bl	17a8 <set_SPI_CS>
	sendCommandOnly(ILI9341_SWRESET);
    1010:	f04f 0001 	mov.w	r0, #1
    1014:	f000 face 	bl	15b4 <sendCommandOnly>
	delay(150);
    1018:	f04f 0096 	mov.w	r0, #150	; 0x96
    101c:	f000 faaa 	bl	1574 <delay>

	while((cmd = pgm_read_byte(addr++)) > 0) {
    1020:	e024      	b.n	106c <PROCESS_STACK_SIZE+0x6c>
		x = pgm_read_byte(addr++);
    1022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1024:	781b      	ldrb	r3, [r3, #0]
    1026:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
    102a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    102c:	f103 0301 	add.w	r3, r3, #1
    1030:	64fb      	str	r3, [r7, #76]	; 0x4c
		numArgs = x & 0x7F;
    1032:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
    1036:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    103a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
		sendCommand(cmd, addr, numArgs);
    103e:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
    1042:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
    1046:	4610      	mov	r0, r2
    1048:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    104a:	461a      	mov	r2, r3
    104c:	f000 fa62 	bl	1514 <sendCommand>
		addr += numArgs;
    1050:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
    1054:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    1056:	4413      	add	r3, r2
    1058:	64fb      	str	r3, [r7, #76]	; 0x4c
		if(x & 0x80) delay(150);
    105a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
    105e:	b25b      	sxtb	r3, r3
    1060:	2b00      	cmp	r3, #0
    1062:	da03      	bge.n	106c <PROCESS_STACK_SIZE+0x6c>
    1064:	f04f 0096 	mov.w	r0, #150	; 0x96
    1068:	f000 fa84 	bl	1574 <delay>
	configureSPI(8);
	set_SPI_CS();
	sendCommandOnly(ILI9341_SWRESET);
	delay(150);

	while((cmd = pgm_read_byte(addr++)) > 0) {
    106c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    106e:	781b      	ldrb	r3, [r3, #0]
    1070:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
    1074:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
    1078:	2b00      	cmp	r3, #0
    107a:	bf0c      	ite	eq
    107c:	2300      	moveq	r3, #0
    107e:	2301      	movne	r3, #1
    1080:	b2db      	uxtb	r3, r3
    1082:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    1084:	f102 0201 	add.w	r2, r2, #1
    1088:	64fa      	str	r2, [r7, #76]	; 0x4c
    108a:	2b00      	cmp	r3, #0
    108c:	d1c9      	bne.n	1022 <PROCESS_STACK_SIZE+0x22>
		numArgs = x & 0x7F;
		sendCommand(cmd, addr, numArgs);
		addr += numArgs;
		if(x & 0x80) delay(150);
	}
	clear_SPI_CS();
    108e:	f000 fb97 	bl	17c0 <clear_SPI_CS>

	writeRegister8(STMPE_SYS_CTRL1, STMPE_SYS_CTRL1_RESET);
    1092:	f04f 0003 	mov.w	r0, #3
    1096:	f04f 0102 	mov.w	r1, #2
    109a:	f000 fbb1 	bl	1800 <writeRegister8>
	  delay(10);
    109e:	f04f 000a 	mov.w	r0, #10
    10a2:	f000 fa67 	bl	1574 <delay>

	  for ( i = 0; i < 65; i++) {
    10a6:	f04f 0300 	mov.w	r3, #0
    10aa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    10ae:	e00a      	b.n	10c6 <PROCESS_STACK_SIZE+0xc6>
	    readRegister8(i);
    10b0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    10b4:	4618      	mov	r0, r3
    10b6:	f000 fbcb 	bl	1850 <readRegister8>
	clear_SPI_CS();

	writeRegister8(STMPE_SYS_CTRL1, STMPE_SYS_CTRL1_RESET);
	  delay(10);

	  for ( i = 0; i < 65; i++) {
    10ba:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    10be:	f103 0301 	add.w	r3, r3, #1
    10c2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    10c6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    10ca:	2b40      	cmp	r3, #64	; 0x40
    10cc:	d9f0      	bls.n	10b0 <PROCESS_STACK_SIZE+0xb0>
	    readRegister8(i);
	  }

	  writeRegister8(STMPE_SYS_CTRL2, 0x0); // turn on clocks!
    10ce:	f04f 0004 	mov.w	r0, #4
    10d2:	f04f 0100 	mov.w	r1, #0
    10d6:	f000 fb93 	bl	1800 <writeRegister8>
	  writeRegister8(STMPE_TSC_CTRL,
    10da:	f04f 0040 	mov.w	r0, #64	; 0x40
    10de:	f04f 0101 	mov.w	r1, #1
    10e2:	f000 fb8d 	bl	1800 <writeRegister8>
	                 STMPE_TSC_CTRL_XYZ | STMPE_TSC_CTRL_EN); // XYZ and enable!
	  // Serial.println(readRegister8(STMPE_TSC_CTRL), HEX);
	  writeRegister8(STMPE_INT_EN, STMPE_INT_EN_TOUCHDET);
    10e6:	f04f 000a 	mov.w	r0, #10
    10ea:	f04f 0101 	mov.w	r1, #1
    10ee:	f000 fb87 	bl	1800 <writeRegister8>
	  writeRegister8(STMPE_ADC_CTRL1, STMPE_ADC_CTRL1_10BIT |
    10f2:	f04f 0020 	mov.w	r0, #32
    10f6:	f04f 0160 	mov.w	r1, #96	; 0x60
    10fa:	f000 fb81 	bl	1800 <writeRegister8>
	                                      (0x6 << 4)); // 96 clocks per conversion
	  writeRegister8(STMPE_ADC_CTRL2, STMPE_ADC_CTRL2_6_5MHZ);
    10fe:	f04f 0021 	mov.w	r0, #33	; 0x21
    1102:	f04f 0102 	mov.w	r1, #2
    1106:	f000 fb7b 	bl	1800 <writeRegister8>
	  writeRegister8(STMPE_TSC_CFG, STMPE_TSC_CFG_4SAMPLE |
    110a:	f04f 0041 	mov.w	r0, #65	; 0x41
    110e:	f04f 01a4 	mov.w	r1, #164	; 0xa4
    1112:	f000 fb75 	bl	1800 <writeRegister8>
	                                    STMPE_TSC_CFG_DELAY_1MS |
	                                    STMPE_TSC_CFG_SETTLE_5MS);
	  writeRegister8(STMPE_TSC_FRACTION_Z, 0x6);
    1116:	f04f 0056 	mov.w	r0, #86	; 0x56
    111a:	f04f 0106 	mov.w	r1, #6
    111e:	f000 fb6f 	bl	1800 <writeRegister8>
	  writeRegister8(STMPE_FIFO_TH, 1);
    1122:	f04f 004a 	mov.w	r0, #74	; 0x4a
    1126:	f04f 0101 	mov.w	r1, #1
    112a:	f000 fb69 	bl	1800 <writeRegister8>
	  writeRegister8(STMPE_FIFO_STA, STMPE_FIFO_STA_RESET);
    112e:	f04f 004b 	mov.w	r0, #75	; 0x4b
    1132:	f04f 0101 	mov.w	r1, #1
    1136:	f000 fb63 	bl	1800 <writeRegister8>
	  writeRegister8(STMPE_FIFO_STA, 0); // unreset
    113a:	f04f 004b 	mov.w	r0, #75	; 0x4b
    113e:	f04f 0100 	mov.w	r1, #0
    1142:	f000 fb5d 	bl	1800 <writeRegister8>
	  writeRegister8(STMPE_TSC_I_DRIVE, STMPE_TSC_I_DRIVE_50MA);
    1146:	f04f 0058 	mov.w	r0, #88	; 0x58
    114a:	f04f 0101 	mov.w	r1, #1
    114e:	f000 fb57 	bl	1800 <writeRegister8>
	  writeRegister8(STMPE_INT_STA, 0xFF); // reset all ints
    1152:	f04f 000b 	mov.w	r0, #11
    1156:	f04f 01ff 	mov.w	r1, #255	; 0xff
    115a:	f000 fb51 	bl	1800 <writeRegister8>
	  writeRegister8(STMPE_INT_CTRL,
    115e:	f04f 0009 	mov.w	r0, #9
    1162:	f04f 0105 	mov.w	r1, #5
    1166:	f000 fb4b 	bl	1800 <writeRegister8>
	                 STMPE_INT_CTRL_POL_HIGH | STMPE_INT_CTRL_ENABLE);


}
    116a:	f107 0750 	add.w	r7, r7, #80	; 0x50
    116e:	46bd      	mov	sp, r7
    1170:	bd80      	pop	{r7, pc}
    1172:	bf00      	nop

00001174 <readTouch>:
	MSS_GPIO_set_output(yn, 0);

   return z;
}

void readTouch(uint16_t *x, uint16_t *y, uint8_t* z){
    1174:	b590      	push	{r4, r7, lr}
    1176:	b087      	sub	sp, #28
    1178:	af00      	add	r7, sp, #0
    117a:	60f8      	str	r0, [r7, #12]
    117c:	60b9      	str	r1, [r7, #8]
    117e:	607a      	str	r2, [r7, #4]
	uint8_t data[4];
	uint8_t i = 0;
    1180:	f04f 0300 	mov.w	r3, #0
    1184:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i < 4; i++) {
    1186:	f04f 0300 	mov.w	r3, #0
    118a:	75fb      	strb	r3, [r7, #23]
    118c:	e010      	b.n	11b0 <readTouch+0x3c>
	    data[i] = readRegister8(0xD7); // _spi->transfer(0x00);
    118e:	7dfc      	ldrb	r4, [r7, #23]
    1190:	f04f 00d7 	mov.w	r0, #215	; 0xd7
    1194:	f000 fb5c 	bl	1850 <readRegister8>
    1198:	4603      	mov	r3, r0
    119a:	461a      	mov	r2, r3
    119c:	f107 0118 	add.w	r1, r7, #24
    11a0:	eb01 0304 	add.w	r3, r1, r4
    11a4:	f803 2c08 	strb.w	r2, [r3, #-8]
}

void readTouch(uint16_t *x, uint16_t *y, uint8_t* z){
	uint8_t data[4];
	uint8_t i = 0;
	for (i = 0; i < 4; i++) {
    11a8:	7dfb      	ldrb	r3, [r7, #23]
    11aa:	f103 0301 	add.w	r3, r3, #1
    11ae:	75fb      	strb	r3, [r7, #23]
    11b0:	7dfb      	ldrb	r3, [r7, #23]
    11b2:	2b03      	cmp	r3, #3
    11b4:	d9eb      	bls.n	118e <readTouch+0x1a>
	    data[i] = readRegister8(0xD7); // _spi->transfer(0x00);
	    // Serial.print("0x"); Serial.print(data[i], HEX); Serial.print(" / ");
	  }
	  *x = data[0];
    11b6:	7c3b      	ldrb	r3, [r7, #16]
    11b8:	461a      	mov	r2, r3
    11ba:	68fb      	ldr	r3, [r7, #12]
    11bc:	801a      	strh	r2, [r3, #0]
	  *x <<= 4;
    11be:	68fb      	ldr	r3, [r7, #12]
    11c0:	881b      	ldrh	r3, [r3, #0]
    11c2:	ea4f 1303 	mov.w	r3, r3, lsl #4
    11c6:	b29a      	uxth	r2, r3
    11c8:	68fb      	ldr	r3, [r7, #12]
    11ca:	801a      	strh	r2, [r3, #0]
	  *x |= (data[1] >> 4);
    11cc:	68fb      	ldr	r3, [r7, #12]
    11ce:	881a      	ldrh	r2, [r3, #0]
    11d0:	7c7b      	ldrb	r3, [r7, #17]
    11d2:	ea4f 1313 	mov.w	r3, r3, lsr #4
    11d6:	b2db      	uxtb	r3, r3
    11d8:	ea42 0303 	orr.w	r3, r2, r3
    11dc:	b29a      	uxth	r2, r3
    11de:	68fb      	ldr	r3, [r7, #12]
    11e0:	801a      	strh	r2, [r3, #0]
	  *y = data[1] & 0x0F;
    11e2:	7c7b      	ldrb	r3, [r7, #17]
    11e4:	f003 030f 	and.w	r3, r3, #15
    11e8:	68ba      	ldr	r2, [r7, #8]
    11ea:	8013      	strh	r3, [r2, #0]
	  *y <<= 8;
    11ec:	68bb      	ldr	r3, [r7, #8]
    11ee:	881b      	ldrh	r3, [r3, #0]
    11f0:	ea4f 2303 	mov.w	r3, r3, lsl #8
    11f4:	b29a      	uxth	r2, r3
    11f6:	68bb      	ldr	r3, [r7, #8]
    11f8:	801a      	strh	r2, [r3, #0]
	  *y |= data[2];
    11fa:	68bb      	ldr	r3, [r7, #8]
    11fc:	881a      	ldrh	r2, [r3, #0]
    11fe:	7cbb      	ldrb	r3, [r7, #18]
    1200:	ea42 0303 	orr.w	r3, r2, r3
    1204:	b29a      	uxth	r2, r3
    1206:	68bb      	ldr	r3, [r7, #8]
    1208:	801a      	strh	r2, [r3, #0]
	  *z = data[3];
    120a:	7cfa      	ldrb	r2, [r7, #19]
    120c:	687b      	ldr	r3, [r7, #4]
    120e:	701a      	strb	r2, [r3, #0]
}
    1210:	f107 071c 	add.w	r7, r7, #28
    1214:	46bd      	mov	sp, r7
    1216:	bd90      	pop	{r4, r7, pc}

00001218 <touched>:
int touched(){
    1218:	b580      	push	{r7, lr}
    121a:	af00      	add	r7, sp, #0

	return (readRegister8(STMPE_TSC_CTRL) & 0x80);
    121c:	f04f 0040 	mov.w	r0, #64	; 0x40
    1220:	f000 fb16 	bl	1850 <readRegister8>
    1224:	4603      	mov	r3, r0
    1226:	f003 0380 	and.w	r3, r3, #128	; 0x80
}
    122a:	4618      	mov	r0, r3
    122c:	bd80      	pop	{r7, pc}
    122e:	bf00      	nop

00001230 <drawPixel>:

void drawPixel(uint16_t x, uint16_t y, uint16_t color){
    1230:	b580      	push	{r7, lr}
    1232:	b082      	sub	sp, #8
    1234:	af00      	add	r7, sp, #0
    1236:	4613      	mov	r3, r2
    1238:	4602      	mov	r2, r0
    123a:	80fa      	strh	r2, [r7, #6]
    123c:	460a      	mov	r2, r1
    123e:	80ba      	strh	r2, [r7, #4]
    1240:	807b      	strh	r3, [r7, #2]

	set_SPI_CS();
    1242:	f000 fab1 	bl	17a8 <set_SPI_CS>
	setAddr(x, y, x+1, y+1);
    1246:	88fb      	ldrh	r3, [r7, #6]
    1248:	f103 0301 	add.w	r3, r3, #1
    124c:	b29a      	uxth	r2, r3
    124e:	88bb      	ldrh	r3, [r7, #4]
    1250:	f103 0301 	add.w	r3, r3, #1
    1254:	b29b      	uxth	r3, r3
    1256:	88f8      	ldrh	r0, [r7, #6]
    1258:	88b9      	ldrh	r1, [r7, #4]
    125a:	f000 f933 	bl	14c4 <setAddr>
	set_DC_HIGH();
    125e:	f000 fabb 	bl	17d8 <set_DC_HIGH>
	sendSPI16(color);
    1262:	887b      	ldrh	r3, [r7, #2]
    1264:	4618      	mov	r0, r3
    1266:	f000 fa83 	bl	1770 <sendSPI16>
	clear_SPI_CS();
    126a:	f000 faa9 	bl	17c0 <clear_SPI_CS>
}
    126e:	f107 0708 	add.w	r7, r7, #8
    1272:	46bd      	mov	sp, r7
    1274:	bd80      	pop	{r7, pc}
    1276:	bf00      	nop

00001278 <drawRectangle>:


void drawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color){
    1278:	b580      	push	{r7, lr}
    127a:	b084      	sub	sp, #16
    127c:	af00      	add	r7, sp, #0
    127e:	80f8      	strh	r0, [r7, #6]
    1280:	80b9      	strh	r1, [r7, #4]
    1282:	807a      	strh	r2, [r7, #2]
    1284:	803b      	strh	r3, [r7, #0]
	int i, j;

		set_SPI_CS();
    1286:	f000 fa8f 	bl	17a8 <set_SPI_CS>
		setAddr(x,y, x+w, y+h);
    128a:	88fa      	ldrh	r2, [r7, #6]
    128c:	887b      	ldrh	r3, [r7, #2]
    128e:	4413      	add	r3, r2
    1290:	b29a      	uxth	r2, r3
    1292:	88b9      	ldrh	r1, [r7, #4]
    1294:	883b      	ldrh	r3, [r7, #0]
    1296:	440b      	add	r3, r1
    1298:	b29b      	uxth	r3, r3
    129a:	88f8      	ldrh	r0, [r7, #6]
    129c:	88b9      	ldrh	r1, [r7, #4]
    129e:	f000 f911 	bl	14c4 <setAddr>
		set_DC_HIGH();
    12a2:	f000 fa99 	bl	17d8 <set_DC_HIGH>
		for(i = x; i<x+w; i++){
    12a6:	88fb      	ldrh	r3, [r7, #6]
    12a8:	60bb      	str	r3, [r7, #8]
    12aa:	e018      	b.n	12de <drawRectangle+0x66>
			for (j =y; j<y+h; j++){
    12ac:	88bb      	ldrh	r3, [r7, #4]
    12ae:	60fb      	str	r3, [r7, #12]
    12b0:	e007      	b.n	12c2 <drawRectangle+0x4a>
				sendSPI16(color);
    12b2:	8b3b      	ldrh	r3, [r7, #24]
    12b4:	4618      	mov	r0, r3
    12b6:	f000 fa5b 	bl	1770 <sendSPI16>

		set_SPI_CS();
		setAddr(x,y, x+w, y+h);
		set_DC_HIGH();
		for(i = x; i<x+w; i++){
			for (j =y; j<y+h; j++){
    12ba:	68fb      	ldr	r3, [r7, #12]
    12bc:	f103 0301 	add.w	r3, r3, #1
    12c0:	60fb      	str	r3, [r7, #12]
    12c2:	88ba      	ldrh	r2, [r7, #4]
    12c4:	883b      	ldrh	r3, [r7, #0]
    12c6:	441a      	add	r2, r3
    12c8:	68fb      	ldr	r3, [r7, #12]
    12ca:	429a      	cmp	r2, r3
    12cc:	dcf1      	bgt.n	12b2 <drawRectangle+0x3a>
				sendSPI16(color);
			}
			sendSPI16(color);
    12ce:	8b3b      	ldrh	r3, [r7, #24]
    12d0:	4618      	mov	r0, r3
    12d2:	f000 fa4d 	bl	1770 <sendSPI16>
	int i, j;

		set_SPI_CS();
		setAddr(x,y, x+w, y+h);
		set_DC_HIGH();
		for(i = x; i<x+w; i++){
    12d6:	68bb      	ldr	r3, [r7, #8]
    12d8:	f103 0301 	add.w	r3, r3, #1
    12dc:	60bb      	str	r3, [r7, #8]
    12de:	88fa      	ldrh	r2, [r7, #6]
    12e0:	887b      	ldrh	r3, [r7, #2]
    12e2:	441a      	add	r2, r3
    12e4:	68bb      	ldr	r3, [r7, #8]
    12e6:	429a      	cmp	r2, r3
    12e8:	dce0      	bgt.n	12ac <drawRectangle+0x34>
				sendSPI16(color);
			}
			sendSPI16(color);
		}

		clear_SPI_CS();
    12ea:	f000 fa69 	bl	17c0 <clear_SPI_CS>
}
    12ee:	f107 0710 	add.w	r7, r7, #16
    12f2:	46bd      	mov	sp, r7
    12f4:	bd80      	pop	{r7, pc}
    12f6:	bf00      	nop

000012f8 <drawRectanglePixel>:
void drawRectanglePixel(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color){
    12f8:	b580      	push	{r7, lr}
    12fa:	b086      	sub	sp, #24
    12fc:	af02      	add	r7, sp, #8
    12fe:	80f8      	strh	r0, [r7, #6]
    1300:	80b9      	strh	r1, [r7, #4]
    1302:	807a      	strh	r2, [r7, #2]
    1304:	803b      	strh	r3, [r7, #0]
	uint16_t i;

	 for (i=x; i<x+w; i++) {
    1306:	88fb      	ldrh	r3, [r7, #6]
    1308:	81fb      	strh	r3, [r7, #14]
    130a:	e018      	b.n	133e <drawRectanglePixel+0x46>
	        writeLine(i, y, i, y+h-1, color);
    130c:	89f8      	ldrh	r0, [r7, #14]
    130e:	88b9      	ldrh	r1, [r7, #4]
    1310:	89fa      	ldrh	r2, [r7, #14]
    1312:	f8b7 c004 	ldrh.w	ip, [r7, #4]
    1316:	883b      	ldrh	r3, [r7, #0]
    1318:	4463      	add	r3, ip
    131a:	b29b      	uxth	r3, r3
    131c:	f103 33ff 	add.w	r3, r3, #4294967295
    1320:	b29b      	uxth	r3, r3
    1322:	b200      	sxth	r0, r0
    1324:	b209      	sxth	r1, r1
    1326:	b212      	sxth	r2, r2
    1328:	b21b      	sxth	r3, r3
    132a:	f8b7 c018 	ldrh.w	ip, [r7, #24]
    132e:	f8cd c000 	str.w	ip, [sp]
    1332:	f000 f955 	bl	15e0 <writeLine>
		clear_SPI_CS();
}
void drawRectanglePixel(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color){
	uint16_t i;

	 for (i=x; i<x+w; i++) {
    1336:	89fb      	ldrh	r3, [r7, #14]
    1338:	f103 0301 	add.w	r3, r3, #1
    133c:	81fb      	strh	r3, [r7, #14]
    133e:	89fa      	ldrh	r2, [r7, #14]
    1340:	88f9      	ldrh	r1, [r7, #6]
    1342:	887b      	ldrh	r3, [r7, #2]
    1344:	440b      	add	r3, r1
    1346:	429a      	cmp	r2, r3
    1348:	dbe0      	blt.n	130c <drawRectanglePixel+0x14>
	        writeLine(i, y, i, y+h-1, color);
	    }
}		
    134a:	f107 0710 	add.w	r7, r7, #16
    134e:	46bd      	mov	sp, r7
    1350:	bd80      	pop	{r7, pc}
    1352:	bf00      	nop

00001354 <drawFillScreen>:

void drawFillScreen(uint16_t color){
    1354:	b580      	push	{r7, lr}
    1356:	b084      	sub	sp, #16
    1358:	af00      	add	r7, sp, #0
    135a:	4603      	mov	r3, r0
    135c:	80fb      	strh	r3, [r7, #6]
	int i, j;
	//drawRectanglePixel(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT, color);
	set_SPI_CS();
    135e:	f000 fa23 	bl	17a8 <set_SPI_CS>
	setAddr(0, 0, ILI9341_TFTWIDTH-1, ILI9341_TFTHEIGHT-1);
    1362:	f04f 0000 	mov.w	r0, #0
    1366:	f04f 0100 	mov.w	r1, #0
    136a:	f04f 02ef 	mov.w	r2, #239	; 0xef
    136e:	f240 133f 	movw	r3, #319	; 0x13f
    1372:	f000 f8a7 	bl	14c4 <setAddr>
	set_DC_HIGH();
    1376:	f000 fa2f 	bl	17d8 <set_DC_HIGH>
	for(i = 0; i<ILI9341_TFTWIDTH; i++){
    137a:	f04f 0300 	mov.w	r3, #0
    137e:	60bb      	str	r3, [r7, #8]
    1380:	e018      	b.n	13b4 <drawFillScreen+0x60>
		for (j =0; j<ILI9341_TFTHEIGHT; j++){
    1382:	f04f 0300 	mov.w	r3, #0
    1386:	60fb      	str	r3, [r7, #12]
    1388:	e007      	b.n	139a <drawFillScreen+0x46>
			sendSPI16(color);
    138a:	88fb      	ldrh	r3, [r7, #6]
    138c:	4618      	mov	r0, r3
    138e:	f000 f9ef 	bl	1770 <sendSPI16>
	//drawRectanglePixel(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT, color);
	set_SPI_CS();
	setAddr(0, 0, ILI9341_TFTWIDTH-1, ILI9341_TFTHEIGHT-1);
	set_DC_HIGH();
	for(i = 0; i<ILI9341_TFTWIDTH; i++){
		for (j =0; j<ILI9341_TFTHEIGHT; j++){
    1392:	68fb      	ldr	r3, [r7, #12]
    1394:	f103 0301 	add.w	r3, r3, #1
    1398:	60fb      	str	r3, [r7, #12]
    139a:	68fa      	ldr	r2, [r7, #12]
    139c:	f240 133f 	movw	r3, #319	; 0x13f
    13a0:	429a      	cmp	r2, r3
    13a2:	ddf2      	ble.n	138a <drawFillScreen+0x36>
			sendSPI16(color);
		}
		sendSPI16(color);
    13a4:	88fb      	ldrh	r3, [r7, #6]
    13a6:	4618      	mov	r0, r3
    13a8:	f000 f9e2 	bl	1770 <sendSPI16>
	int i, j;
	//drawRectanglePixel(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT, color);
	set_SPI_CS();
	setAddr(0, 0, ILI9341_TFTWIDTH-1, ILI9341_TFTHEIGHT-1);
	set_DC_HIGH();
	for(i = 0; i<ILI9341_TFTWIDTH; i++){
    13ac:	68bb      	ldr	r3, [r7, #8]
    13ae:	f103 0301 	add.w	r3, r3, #1
    13b2:	60bb      	str	r3, [r7, #8]
    13b4:	68bb      	ldr	r3, [r7, #8]
    13b6:	2bef      	cmp	r3, #239	; 0xef
    13b8:	dde3      	ble.n	1382 <drawFillScreen+0x2e>
			sendSPI16(color);
		}
		sendSPI16(color);
	}

	clear_SPI_CS();
    13ba:	f000 fa01 	bl	17c0 <clear_SPI_CS>
}
    13be:	f107 0710 	add.w	r7, r7, #16
    13c2:	46bd      	mov	sp, r7
    13c4:	bd80      	pop	{r7, pc}
    13c6:	bf00      	nop

000013c8 <drawText1>:

void drawText1(uint16_t color){
    13c8:	b580      	push	{r7, lr}
    13ca:	b084      	sub	sp, #16
    13cc:	af02      	add	r7, sp, #8
    13ce:	4603      	mov	r3, r0
    13d0:	80fb      	strh	r3, [r7, #6]
	//T
	drawRectanglePixel(70, 220, 5, 25, color);
    13d2:	88fb      	ldrh	r3, [r7, #6]
    13d4:	9300      	str	r3, [sp, #0]
    13d6:	f04f 0046 	mov.w	r0, #70	; 0x46
    13da:	f04f 01dc 	mov.w	r1, #220	; 0xdc
    13de:	f04f 0205 	mov.w	r2, #5
    13e2:	f04f 0319 	mov.w	r3, #25
    13e6:	f7ff ff87 	bl	12f8 <drawRectanglePixel>
	drawRectanglePixel(40, 230, 30, 5, color);
    13ea:	88fb      	ldrh	r3, [r7, #6]
    13ec:	9300      	str	r3, [sp, #0]
    13ee:	f04f 0028 	mov.w	r0, #40	; 0x28
    13f2:	f04f 01e6 	mov.w	r1, #230	; 0xe6
    13f6:	f04f 021e 	mov.w	r2, #30
    13fa:	f04f 0305 	mov.w	r3, #5
    13fe:	f7ff ff7b 	bl	12f8 <drawRectanglePixel>


}
    1402:	f107 0708 	add.w	r7, r7, #8
    1406:	46bd      	mov	sp, r7
    1408:	bd80      	pop	{r7, pc}
    140a:	bf00      	nop

0000140c <drawText2>:

void drawText2(uint16_t color){
    140c:	b580      	push	{r7, lr}
    140e:	b084      	sub	sp, #16
    1410:	af02      	add	r7, sp, #8
    1412:	4603      	mov	r3, r0
    1414:	80fb      	strh	r3, [r7, #6]
	//C
	drawRectanglePixel(40, 70, 5, 20, color);
    1416:	88fb      	ldrh	r3, [r7, #6]
    1418:	9300      	str	r3, [sp, #0]
    141a:	f04f 0028 	mov.w	r0, #40	; 0x28
    141e:	f04f 0146 	mov.w	r1, #70	; 0x46
    1422:	f04f 0205 	mov.w	r2, #5
    1426:	f04f 0314 	mov.w	r3, #20
    142a:	f7ff ff65 	bl	12f8 <drawRectanglePixel>
	drawRectanglePixel(40, 70, 30, 5, color);
    142e:	88fb      	ldrh	r3, [r7, #6]
    1430:	9300      	str	r3, [sp, #0]
    1432:	f04f 0028 	mov.w	r0, #40	; 0x28
    1436:	f04f 0146 	mov.w	r1, #70	; 0x46
    143a:	f04f 021e 	mov.w	r2, #30
    143e:	f04f 0305 	mov.w	r3, #5
    1442:	f7ff ff59 	bl	12f8 <drawRectanglePixel>
	drawRectanglePixel(65, 70, 5, 20, color);
    1446:	88fb      	ldrh	r3, [r7, #6]
    1448:	9300      	str	r3, [sp, #0]
    144a:	f04f 0041 	mov.w	r0, #65	; 0x41
    144e:	f04f 0146 	mov.w	r1, #70	; 0x46
    1452:	f04f 0205 	mov.w	r2, #5
    1456:	f04f 0314 	mov.w	r3, #20
    145a:	f7ff ff4d 	bl	12f8 <drawRectanglePixel>

}
    145e:	f107 0708 	add.w	r7, r7, #8
    1462:	46bd      	mov	sp, r7
    1464:	bd80      	pop	{r7, pc}
    1466:	bf00      	nop

00001468 <drawText3>:

void drawText3(uint16_t color){
    1468:	b580      	push	{r7, lr}
    146a:	b084      	sub	sp, #16
    146c:	af02      	add	r7, sp, #8
    146e:	4603      	mov	r3, r0
    1470:	80fb      	strh	r3, [r7, #6]
	//F
	drawRectanglePixel(160, 160, 30, 5, color);
    1472:	88fb      	ldrh	r3, [r7, #6]
    1474:	9300      	str	r3, [sp, #0]
    1476:	f04f 00a0 	mov.w	r0, #160	; 0xa0
    147a:	f04f 01a0 	mov.w	r1, #160	; 0xa0
    147e:	f04f 021e 	mov.w	r2, #30
    1482:	f04f 0305 	mov.w	r3, #5
    1486:	f7ff ff37 	bl	12f8 <drawRectanglePixel>
	drawRectanglePixel(190, 160, 5, 20, color);
    148a:	88fb      	ldrh	r3, [r7, #6]
    148c:	9300      	str	r3, [sp, #0]
    148e:	f04f 00be 	mov.w	r0, #190	; 0xbe
    1492:	f04f 01a0 	mov.w	r1, #160	; 0xa0
    1496:	f04f 0205 	mov.w	r2, #5
    149a:	f04f 0314 	mov.w	r3, #20
    149e:	f7ff ff2b 	bl	12f8 <drawRectanglePixel>
	drawRectanglePixel(175, 160, 5, 20, color);
    14a2:	88fb      	ldrh	r3, [r7, #6]
    14a4:	9300      	str	r3, [sp, #0]
    14a6:	f04f 00af 	mov.w	r0, #175	; 0xaf
    14aa:	f04f 01a0 	mov.w	r1, #160	; 0xa0
    14ae:	f04f 0205 	mov.w	r2, #5
    14b2:	f04f 0314 	mov.w	r3, #20
    14b6:	f7ff ff1f 	bl	12f8 <drawRectanglePixel>
}
    14ba:	f107 0708 	add.w	r7, r7, #8
    14be:	46bd      	mov	sp, r7
    14c0:	bd80      	pop	{r7, pc}
    14c2:	bf00      	nop

000014c4 <setAddr>:

void setAddr(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1){
    14c4:	b580      	push	{r7, lr}
    14c6:	b082      	sub	sp, #8
    14c8:	af00      	add	r7, sp, #0
    14ca:	80f8      	strh	r0, [r7, #6]
    14cc:	80b9      	strh	r1, [r7, #4]
    14ce:	807a      	strh	r2, [r7, #2]
    14d0:	803b      	strh	r3, [r7, #0]
	
	sendCommandOnly(ILI9341_CASET);
    14d2:	f04f 002a 	mov.w	r0, #42	; 0x2a
    14d6:	f000 f86d 	bl	15b4 <sendCommandOnly>
	sendSPI16(x0);
    14da:	88fb      	ldrh	r3, [r7, #6]
    14dc:	4618      	mov	r0, r3
    14de:	f000 f947 	bl	1770 <sendSPI16>
	sendSPI16(x1);
    14e2:	887b      	ldrh	r3, [r7, #2]
    14e4:	4618      	mov	r0, r3
    14e6:	f000 f943 	bl	1770 <sendSPI16>
	sendCommandOnly(ILI9341_PASET);
    14ea:	f04f 002b 	mov.w	r0, #43	; 0x2b
    14ee:	f000 f861 	bl	15b4 <sendCommandOnly>
	sendSPI16(y0);
    14f2:	88bb      	ldrh	r3, [r7, #4]
    14f4:	4618      	mov	r0, r3
    14f6:	f000 f93b 	bl	1770 <sendSPI16>
	sendSPI16(y1);
    14fa:	883b      	ldrh	r3, [r7, #0]
    14fc:	4618      	mov	r0, r3
    14fe:	f000 f937 	bl	1770 <sendSPI16>
	sendCommandOnly(ILI9341_RAMWR);
    1502:	f04f 002c 	mov.w	r0, #44	; 0x2c
    1506:	f000 f855 	bl	15b4 <sendCommandOnly>
}
    150a:	f107 0708 	add.w	r7, r7, #8
    150e:	46bd      	mov	sp, r7
    1510:	bd80      	pop	{r7, pc}
    1512:	bf00      	nop

00001514 <sendCommand>:

void sendCommand(uint8_t commandByte, uint8_t *dataBytes, uint8_t numDataBytes){
    1514:	b580      	push	{r7, lr}
    1516:	b086      	sub	sp, #24
    1518:	af00      	add	r7, sp, #0
    151a:	60b9      	str	r1, [r7, #8]
    151c:	4613      	mov	r3, r2
    151e:	4602      	mov	r2, r0
    1520:	73fa      	strb	r2, [r7, #15]
    1522:	71fb      	strb	r3, [r7, #7]
		int i=0;
    1524:	f04f 0300 	mov.w	r3, #0
    1528:	617b      	str	r3, [r7, #20]
		configureSPI(8);
    152a:	f04f 0008 	mov.w	r0, #8
    152e:	f000 f8f5 	bl	171c <configureSPI>

	    set_DC_LOW(); // Command mode
    1532:	f000 f95b 	bl	17ec <set_DC_LOW>
	    sendSPI(commandByte); // Send the command byte
    1536:	7bfb      	ldrb	r3, [r7, #15]
    1538:	4618      	mov	r0, r3
    153a:	f000 f907 	bl	174c <sendSPI>

	    set_DC_HIGH();
    153e:	f000 f94b 	bl	17d8 <set_DC_HIGH>
	    for (i=0; i<numDataBytes; i++) {
    1542:	f04f 0300 	mov.w	r3, #0
    1546:	617b      	str	r3, [r7, #20]
    1548:	e00c      	b.n	1564 <sendCommand+0x50>
	      sendSPI(*dataBytes); // Send the data bytes
    154a:	68bb      	ldr	r3, [r7, #8]
    154c:	781b      	ldrb	r3, [r3, #0]
    154e:	4618      	mov	r0, r3
    1550:	f000 f8fc 	bl	174c <sendSPI>
	      dataBytes++;
    1554:	68bb      	ldr	r3, [r7, #8]
    1556:	f103 0301 	add.w	r3, r3, #1
    155a:	60bb      	str	r3, [r7, #8]

	    set_DC_LOW(); // Command mode
	    sendSPI(commandByte); // Send the command byte

	    set_DC_HIGH();
	    for (i=0; i<numDataBytes; i++) {
    155c:	697b      	ldr	r3, [r7, #20]
    155e:	f103 0301 	add.w	r3, r3, #1
    1562:	617b      	str	r3, [r7, #20]
    1564:	79fa      	ldrb	r2, [r7, #7]
    1566:	697b      	ldr	r3, [r7, #20]
    1568:	429a      	cmp	r2, r3
    156a:	dcee      	bgt.n	154a <sendCommand+0x36>
	      sendSPI(*dataBytes); // Send the data bytes
	      dataBytes++;
	    }
}
    156c:	f107 0718 	add.w	r7, r7, #24
    1570:	46bd      	mov	sp, r7
    1572:	bd80      	pop	{r7, pc}

00001574 <delay>:
		dataBytes++;
	}
	clear_SPI_CS();
}

void delay(uint32_t time){
    1574:	b580      	push	{r7, lr}
    1576:	b082      	sub	sp, #8
    1578:	af00      	add	r7, sp, #0
    157a:	6078      	str	r0, [r7, #4]

	MSS_TIM1_init(MSS_TIMER_ONE_SHOT_MODE);
    157c:	f04f 0001 	mov.w	r0, #1
    1580:	f7ff fca6 	bl	ed0 <MSS_TIM1_init>
	MSS_TIM1_load_immediate(time*100000);
    1584:	687a      	ldr	r2, [r7, #4]
    1586:	f248 63a0 	movw	r3, #34464	; 0x86a0
    158a:	f2c0 0301 	movt	r3, #1
    158e:	fb03 f302 	mul.w	r3, r3, r2
    1592:	4618      	mov	r0, r3
    1594:	f7ff fd06 	bl	fa4 <MSS_TIM1_load_immediate>
	MSS_TIM1_start();
    1598:	f7ff fcdc 	bl	f54 <MSS_TIM1_start>

	while(MSS_TIM1_get_current_value()>0){
    159c:	f7ff fcf6 	bl	f8c <MSS_TIM1_get_current_value>
    15a0:	4603      	mov	r3, r0
    15a2:	2b00      	cmp	r3, #0
    15a4:	d1fa      	bne.n	159c <delay+0x28>
		//do nothing

	}
	MSS_TIM1_stop();
    15a6:	f7ff fce3 	bl	f70 <MSS_TIM1_stop>
}
    15aa:	f107 0708 	add.w	r7, r7, #8
    15ae:	46bd      	mov	sp, r7
    15b0:	bd80      	pop	{r7, pc}
    15b2:	bf00      	nop

000015b4 <sendCommandOnly>:
	}
	MSS_TIM1_stop();
}


void sendCommandOnly(uint8_t commandByte){
    15b4:	b580      	push	{r7, lr}
    15b6:	b082      	sub	sp, #8
    15b8:	af00      	add	r7, sp, #0
    15ba:	4603      	mov	r3, r0
    15bc:	71fb      	strb	r3, [r7, #7]

	set_DC_LOW();
    15be:	f000 f915 	bl	17ec <set_DC_LOW>
	configureSPI(8);
    15c2:	f04f 0008 	mov.w	r0, #8
    15c6:	f000 f8a9 	bl	171c <configureSPI>
	sendSPI(commandByte);
    15ca:	79fb      	ldrb	r3, [r7, #7]
    15cc:	4618      	mov	r0, r3
    15ce:	f000 f8bd 	bl	174c <sendSPI>
	set_DC_HIGH();
    15d2:	f000 f901 	bl	17d8 <set_DC_HIGH>
}
    15d6:	f107 0708 	add.w	r7, r7, #8
    15da:	46bd      	mov	sp, r7
    15dc:	bd80      	pop	{r7, pc}
    15de:	bf00      	nop

000015e0 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color){
    15e0:	b580      	push	{r7, lr}
    15e2:	b088      	sub	sp, #32
    15e4:	af00      	add	r7, sp, #0
    15e6:	80f8      	strh	r0, [r7, #6]
    15e8:	80b9      	strh	r1, [r7, #4]
    15ea:	807a      	strh	r2, [r7, #2]
    15ec:	803b      	strh	r3, [r7, #0]

    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    15ee:	f9b7 2000 	ldrsh.w	r2, [r7]
    15f2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
    15f6:	ebc3 0302 	rsb	r3, r3, r2
    15fa:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
    15fe:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
    1602:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
    1606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    160a:	ebc3 0301 	rsb	r3, r3, r1
    160e:	2b00      	cmp	r3, #0
    1610:	bfb8      	it	lt
    1612:	425b      	neglt	r3, r3
    1614:	429a      	cmp	r2, r3
    1616:	bfd4      	ite	le
    1618:	2300      	movle	r3, #0
    161a:	2301      	movgt	r3, #1
    161c:	81fb      	strh	r3, [r7, #14]
    if (steep) {
    161e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
    1622:	2b00      	cmp	r3, #0
    1624:	d00b      	beq.n	163e <writeLine+0x5e>
        _swap_int16_t(x0, y0);
    1626:	88fb      	ldrh	r3, [r7, #6]
    1628:	833b      	strh	r3, [r7, #24]
    162a:	88bb      	ldrh	r3, [r7, #4]
    162c:	80fb      	strh	r3, [r7, #6]
    162e:	8b3b      	ldrh	r3, [r7, #24]
    1630:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
    1632:	887b      	ldrh	r3, [r7, #2]
    1634:	837b      	strh	r3, [r7, #26]
    1636:	883b      	ldrh	r3, [r7, #0]
    1638:	807b      	strh	r3, [r7, #2]
    163a:	8b7b      	ldrh	r3, [r7, #26]
    163c:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
    163e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
    1642:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    1646:	429a      	cmp	r2, r3
    1648:	dd0b      	ble.n	1662 <writeLine+0x82>
        _swap_int16_t(x0, x1);
    164a:	88fb      	ldrh	r3, [r7, #6]
    164c:	83bb      	strh	r3, [r7, #28]
    164e:	887b      	ldrh	r3, [r7, #2]
    1650:	80fb      	strh	r3, [r7, #6]
    1652:	8bbb      	ldrh	r3, [r7, #28]
    1654:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
    1656:	88bb      	ldrh	r3, [r7, #4]
    1658:	83fb      	strh	r3, [r7, #30]
    165a:	883b      	ldrh	r3, [r7, #0]
    165c:	80bb      	strh	r3, [r7, #4]
    165e:	8bfb      	ldrh	r3, [r7, #30]
    1660:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
    1662:	887a      	ldrh	r2, [r7, #2]
    1664:	88fb      	ldrh	r3, [r7, #6]
    1666:	ebc3 0302 	rsb	r3, r3, r2
    166a:	b29b      	uxth	r3, r3
    166c:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
    166e:	f9b7 2000 	ldrsh.w	r2, [r7]
    1672:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
    1676:	ebc3 0302 	rsb	r3, r3, r2
    167a:	2b00      	cmp	r3, #0
    167c:	bfb8      	it	lt
    167e:	425b      	neglt	r3, r3
    1680:	827b      	strh	r3, [r7, #18]

    int16_t err = dx / 2;
    1682:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
    1686:	ea4f 72d3 	mov.w	r2, r3, lsr #31
    168a:	4413      	add	r3, r2
    168c:	ea4f 0363 	mov.w	r3, r3, asr #1
    1690:	82bb      	strh	r3, [r7, #20]
    int16_t ystep;

    if (y0 < y1) {
    1692:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
    1696:	f9b7 3000 	ldrsh.w	r3, [r7]
    169a:	429a      	cmp	r2, r3
    169c:	da03      	bge.n	16a6 <writeLine+0xc6>
        ystep = 1;
    169e:	f04f 0301 	mov.w	r3, #1
    16a2:	82fb      	strh	r3, [r7, #22]
    } else {
        ystep = -1;
    }

    for (; x0<=x1; x0++) {
    16a4:	e030      	b.n	1708 <writeLine+0x128>
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
    16a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    16aa:	82fb      	strh	r3, [r7, #22]
    }

    for (; x0<=x1; x0++) {
    16ac:	e02c      	b.n	1708 <writeLine+0x128>
        if (steep) {
    16ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
    16b2:	2b00      	cmp	r3, #0
    16b4:	d008      	beq.n	16c8 <writeLine+0xe8>
            drawPixel(y0, x0, color);
    16b6:	88b9      	ldrh	r1, [r7, #4]
    16b8:	88fa      	ldrh	r2, [r7, #6]
    16ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    16bc:	4608      	mov	r0, r1
    16be:	4611      	mov	r1, r2
    16c0:	461a      	mov	r2, r3
    16c2:	f7ff fdb5 	bl	1230 <drawPixel>
    16c6:	e007      	b.n	16d8 <writeLine+0xf8>
        } else {
            drawPixel(x0, y0, color);
    16c8:	88f9      	ldrh	r1, [r7, #6]
    16ca:	88ba      	ldrh	r2, [r7, #4]
    16cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    16ce:	4608      	mov	r0, r1
    16d0:	4611      	mov	r1, r2
    16d2:	461a      	mov	r2, r3
    16d4:	f7ff fdac 	bl	1230 <drawPixel>
        }
        err -= dy;
    16d8:	8aba      	ldrh	r2, [r7, #20]
    16da:	8a7b      	ldrh	r3, [r7, #18]
    16dc:	ebc3 0302 	rsb	r3, r3, r2
    16e0:	b29b      	uxth	r3, r3
    16e2:	82bb      	strh	r3, [r7, #20]
        if (err < 0) {
    16e4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
    16e8:	2b00      	cmp	r3, #0
    16ea:	da09      	bge.n	1700 <writeLine+0x120>
            y0 += ystep;
    16ec:	88ba      	ldrh	r2, [r7, #4]
    16ee:	8afb      	ldrh	r3, [r7, #22]
    16f0:	4413      	add	r3, r2
    16f2:	b29b      	uxth	r3, r3
    16f4:	80bb      	strh	r3, [r7, #4]
            err += dx;
    16f6:	8aba      	ldrh	r2, [r7, #20]
    16f8:	8a3b      	ldrh	r3, [r7, #16]
    16fa:	4413      	add	r3, r2
    16fc:	b29b      	uxth	r3, r3
    16fe:	82bb      	strh	r3, [r7, #20]
        ystep = 1;
    } else {
        ystep = -1;
    }

    for (; x0<=x1; x0++) {
    1700:	88fb      	ldrh	r3, [r7, #6]
    1702:	f103 0301 	add.w	r3, r3, #1
    1706:	80fb      	strh	r3, [r7, #6]
    1708:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
    170c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    1710:	429a      	cmp	r2, r3
    1712:	ddcc      	ble.n	16ae <writeLine+0xce>
        if (err < 0) {
            y0 += ystep;
            err += dx;
        }
    }
}
    1714:	f107 0720 	add.w	r7, r7, #32
    1718:	46bd      	mov	sp, r7
    171a:	bd80      	pop	{r7, pc}

0000171c <configureSPI>:


void configureSPI(uint8_t frameSize){
    171c:	b580      	push	{r7, lr}
    171e:	b084      	sub	sp, #16
    1720:	af02      	add	r7, sp, #8
    1722:	4603      	mov	r3, r0
    1724:	71fb      	strb	r3, [r7, #7]
	MSS_SPI_configure_master_mode(
    1726:	79fb      	ldrb	r3, [r7, #7]
    1728:	9300      	str	r3, [sp, #0]
    172a:	f240 00c0 	movw	r0, #192	; 0xc0
    172e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1732:	f04f 0100 	mov.w	r1, #0
    1736:	f04f 0200 	mov.w	r2, #0
    173a:	f04f 0302 	mov.w	r3, #2
    173e:	f000 fd7b 	bl	2238 <MSS_SPI_configure_master_mode>
		MSS_SPI_SLAVE_0,
		MSS_SPI_MODE0,
		MSS_SPI_PCLK_DIV_8,
		frameSize
	);
}
    1742:	f107 0708 	add.w	r7, r7, #8
    1746:	46bd      	mov	sp, r7
    1748:	bd80      	pop	{r7, pc}
    174a:	bf00      	nop

0000174c <sendSPI>:

void sendSPI(uint8_t data){
    174c:	b580      	push	{r7, lr}
    174e:	b082      	sub	sp, #8
    1750:	af00      	add	r7, sp, #0
    1752:	4603      	mov	r3, r0
    1754:	71fb      	strb	r3, [r7, #7]
	
	MSS_SPI_transfer_frame( &g_mss_spi1, data);
    1756:	79fb      	ldrb	r3, [r7, #7]
    1758:	f240 00c0 	movw	r0, #192	; 0xc0
    175c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1760:	4619      	mov	r1, r3
    1762:	f000 fe97 	bl	2494 <MSS_SPI_transfer_frame>
	
}
    1766:	f107 0708 	add.w	r7, r7, #8
    176a:	46bd      	mov	sp, r7
    176c:	bd80      	pop	{r7, pc}
    176e:	bf00      	nop

00001770 <sendSPI16>:

void sendSPI16(uint16_t data){
    1770:	b580      	push	{r7, lr}
    1772:	b082      	sub	sp, #8
    1774:	af00      	add	r7, sp, #0
    1776:	4603      	mov	r3, r0
    1778:	80fb      	strh	r3, [r7, #6]
	MSS_SPI_transfer_frame(&g_mss_spi1, data>>8);
    177a:	88fb      	ldrh	r3, [r7, #6]
    177c:	ea4f 2313 	mov.w	r3, r3, lsr #8
    1780:	b29b      	uxth	r3, r3
    1782:	f240 00c0 	movw	r0, #192	; 0xc0
    1786:	f2c2 0000 	movt	r0, #8192	; 0x2000
    178a:	4619      	mov	r1, r3
    178c:	f000 fe82 	bl	2494 <MSS_SPI_transfer_frame>
	MSS_SPI_transfer_frame(&g_mss_spi1, data);
    1790:	88fb      	ldrh	r3, [r7, #6]
    1792:	f240 00c0 	movw	r0, #192	; 0xc0
    1796:	f2c2 0000 	movt	r0, #8192	; 0x2000
    179a:	4619      	mov	r1, r3
    179c:	f000 fe7a 	bl	2494 <MSS_SPI_transfer_frame>
}
    17a0:	f107 0708 	add.w	r7, r7, #8
    17a4:	46bd      	mov	sp, r7
    17a6:	bd80      	pop	{r7, pc}

000017a8 <set_SPI_CS>:

void set_SPI_CS(){
    17a8:	b580      	push	{r7, lr}
    17aa:	af00      	add	r7, sp, #0
	MSS_SPI_set_slave_select(&g_mss_spi1, MSS_SPI_SLAVE_0);
    17ac:	f240 00c0 	movw	r0, #192	; 0xc0
    17b0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    17b4:	f04f 0100 	mov.w	r1, #0
    17b8:	f000 fdbe 	bl	2338 <MSS_SPI_set_slave_select>
}
    17bc:	bd80      	pop	{r7, pc}
    17be:	bf00      	nop

000017c0 <clear_SPI_CS>:

void clear_SPI_CS(){
    17c0:	b580      	push	{r7, lr}
    17c2:	af00      	add	r7, sp, #0
	MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
    17c4:	f240 00c0 	movw	r0, #192	; 0xc0
    17c8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    17cc:	f04f 0100 	mov.w	r1, #0
    17d0:	f000 fe18 	bl	2404 <MSS_SPI_clear_slave_select>
}
    17d4:	bd80      	pop	{r7, pc}
    17d6:	bf00      	nop

000017d8 <set_DC_HIGH>:

void set_DC_HIGH(){
    17d8:	b580      	push	{r7, lr}
    17da:	af00      	add	r7, sp, #0
	MSS_GPIO_set_output(DC, 1);
    17dc:	f04f 0000 	mov.w	r0, #0
    17e0:	f04f 0101 	mov.w	r1, #1
    17e4:	f001 fd8a 	bl	32fc <MSS_GPIO_set_output>
}
    17e8:	bd80      	pop	{r7, pc}
    17ea:	bf00      	nop

000017ec <set_DC_LOW>:

void set_DC_LOW(){
    17ec:	b580      	push	{r7, lr}
    17ee:	af00      	add	r7, sp, #0
	MSS_GPIO_set_output(DC, 0);
    17f0:	f04f 0000 	mov.w	r0, #0
    17f4:	f04f 0100 	mov.w	r1, #0
    17f8:	f001 fd80 	bl	32fc <MSS_GPIO_set_output>
}
    17fc:	bd80      	pop	{r7, pc}
    17fe:	bf00      	nop

00001800 <writeRegister8>:
	else{
		ACE_set_sdd_value(SDD1_OUT, 0x00);
	}
}

void writeRegister8(uint8_t reg, uint8_t val){
    1800:	b580      	push	{r7, lr}
    1802:	b086      	sub	sp, #24
    1804:	af02      	add	r7, sp, #8
    1806:	4602      	mov	r2, r0
    1808:	460b      	mov	r3, r1
    180a:	71fa      	strb	r2, [r7, #7]
    180c:	71bb      	strb	r3, [r7, #6]
	uint8_t transmit_buf[2] = {reg, val};
    180e:	79fb      	ldrb	r3, [r7, #7]
    1810:	733b      	strb	r3, [r7, #12]
    1812:	79bb      	ldrb	r3, [r7, #6]
    1814:	737b      	strb	r3, [r7, #13]
	MSS_I2C_write
    1816:	f107 030c 	add.w	r3, r7, #12
    181a:	f04f 0200 	mov.w	r2, #0
    181e:	9200      	str	r2, [sp, #0]
    1820:	f240 203c 	movw	r0, #572	; 0x23c
    1824:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1828:	f04f 0141 	mov.w	r1, #65	; 0x41
    182c:	461a      	mov	r2, r3
    182e:	f04f 0302 	mov.w	r3, #2
    1832:	f001 fc2b 	bl	308c <MSS_I2C_write>
		transmit_buf,
		sizeof(transmit_buf),
		MSS_I2C_RELEASE_BUS
	);

	MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_NO_TIMEOUT);
    1836:	f240 203c 	movw	r0, #572	; 0x23c
    183a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    183e:	f04f 0100 	mov.w	r1, #0
    1842:	f001 f88f 	bl	2964 <MSS_I2C_wait_complete>
	return;
}
    1846:	f107 0710 	add.w	r7, r7, #16
    184a:	46bd      	mov	sp, r7
    184c:	bd80      	pop	{r7, pc}
    184e:	bf00      	nop

00001850 <readRegister8>:

uint8_t readRegister8(uint8_t reg){
    1850:	b580      	push	{r7, lr}
    1852:	b086      	sub	sp, #24
    1854:	af02      	add	r7, sp, #8
    1856:	4603      	mov	r3, r0
    1858:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	MSS_I2C_write
    185a:	f107 0307 	add.w	r3, r7, #7
    185e:	f04f 0200 	mov.w	r2, #0
    1862:	9200      	str	r2, [sp, #0]
    1864:	f240 203c 	movw	r0, #572	; 0x23c
    1868:	f2c2 0000 	movt	r0, #8192	; 0x2000
    186c:	f04f 0141 	mov.w	r1, #65	; 0x41
    1870:	461a      	mov	r2, r3
    1872:	f04f 0301 	mov.w	r3, #1
    1876:	f001 fc09 	bl	308c <MSS_I2C_write>
		TOUCH_ADDR,
		&reg,
		1,
		MSS_I2C_RELEASE_BUS
	);
	MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_NO_TIMEOUT);
    187a:	f240 203c 	movw	r0, #572	; 0x23c
    187e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1882:	f04f 0100 	mov.w	r1, #0
    1886:	f001 f86d 	bl	2964 <MSS_I2C_wait_complete>

	MSS_I2C_read
    188a:	f107 030f 	add.w	r3, r7, #15
    188e:	f04f 0200 	mov.w	r2, #0
    1892:	9200      	str	r2, [sp, #0]
    1894:	f240 203c 	movw	r0, #572	; 0x23c
    1898:	f2c2 0000 	movt	r0, #8192	; 0x2000
    189c:	f04f 0141 	mov.w	r1, #65	; 0x41
    18a0:	461a      	mov	r2, r3
    18a2:	f04f 0301 	mov.w	r3, #1
    18a6:	f001 fb81 	bl	2fac <MSS_I2C_read>
			TOUCH_ADDR,
			&data,
			1,
			MSS_I2C_RELEASE_BUS
	 );
	MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_NO_TIMEOUT);
    18aa:	f240 203c 	movw	r0, #572	; 0x23c
    18ae:	f2c2 0000 	movt	r0, #8192	; 0x2000
    18b2:	f04f 0100 	mov.w	r1, #0
    18b6:	f001 f855 	bl	2964 <MSS_I2C_wait_complete>
	return data;
    18ba:	7bfb      	ldrb	r3, [r7, #15]
}
    18bc:	4618      	mov	r0, r3
    18be:	f107 0710 	add.w	r7, r7, #16
    18c2:	46bd      	mov	sp, r7
    18c4:	bd80      	pop	{r7, pc}
    18c6:	bf00      	nop

000018c8 <bufferEmpty>:

int bufferEmpty(){
    18c8:	b580      	push	{r7, lr}
    18ca:	af00      	add	r7, sp, #0
	return (readRegister8(STMPE_FIFO_STA) & STMPE_FIFO_STA_EMPTY);
    18cc:	f04f 004b 	mov.w	r0, #75	; 0x4b
    18d0:	f7ff ffbe 	bl	1850 <readRegister8>
    18d4:	4603      	mov	r3, r0
    18d6:	f003 0320 	and.w	r3, r3, #32
}
    18da:	4618      	mov	r0, r3
    18dc:	bd80      	pop	{r7, pc}
    18de:	bf00      	nop

000018e0 <scaleX>:

uint8_t scaleX(uint16_t x){
    18e0:	b580      	push	{r7, lr}
    18e2:	b084      	sub	sp, #16
    18e4:	af00      	add	r7, sp, #0
    18e6:	4603      	mov	r3, r0
    18e8:	80fb      	strh	r3, [r7, #6]
	float temp = x/240.0;
    18ea:	88fb      	ldrh	r3, [r7, #6]
    18ec:	4618      	mov	r0, r3
    18ee:	f002 f907 	bl	3b00 <__aeabi_i2d>
    18f2:	4602      	mov	r2, r0
    18f4:	460b      	mov	r3, r1
    18f6:	4610      	mov	r0, r2
    18f8:	4619      	mov	r1, r3
    18fa:	f04f 0200 	mov.w	r2, #0
    18fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1902:	f503 03dc 	add.w	r3, r3, #7208960	; 0x6e0000
    1906:	f002 fa8b 	bl	3e20 <__aeabi_ddiv>
    190a:	4602      	mov	r2, r0
    190c:	460b      	mov	r3, r1
    190e:	4610      	mov	r0, r2
    1910:	4619      	mov	r1, r3
    1912:	f002 fb6d 	bl	3ff0 <__aeabi_d2f>
    1916:	4603      	mov	r3, r0
    1918:	60fb      	str	r3, [r7, #12]
	temp *= 255;
    191a:	68f8      	ldr	r0, [r7, #12]
    191c:	4907      	ldr	r1, [pc, #28]	; (193c <scaleX+0x5c>)
    191e:	f002 fbb7 	bl	4090 <__aeabi_fmul>
    1922:	4603      	mov	r3, r0
    1924:	60fb      	str	r3, [r7, #12]
	return (uint8_t) temp;
    1926:	68f8      	ldr	r0, [r7, #12]
    1928:	f002 fd02 	bl	4330 <__aeabi_f2uiz>
    192c:	4603      	mov	r3, r0
    192e:	b2db      	uxtb	r3, r3
}
    1930:	4618      	mov	r0, r3
    1932:	f107 0710 	add.w	r7, r7, #16
    1936:	46bd      	mov	sp, r7
    1938:	bd80      	pop	{r7, pc}
    193a:	bf00      	nop
    193c:	437f0000 	.word	0x437f0000

00001940 <scaleY>:

uint8_t scaleY(uint16_t y){
    1940:	b580      	push	{r7, lr}
    1942:	b084      	sub	sp, #16
    1944:	af00      	add	r7, sp, #0
    1946:	4603      	mov	r3, r0
    1948:	80fb      	strh	r3, [r7, #6]
	float temp = y/320.0;
    194a:	88fb      	ldrh	r3, [r7, #6]
    194c:	4618      	mov	r0, r3
    194e:	f002 f8d7 	bl	3b00 <__aeabi_i2d>
    1952:	4602      	mov	r2, r0
    1954:	460b      	mov	r3, r1
    1956:	4610      	mov	r0, r2
    1958:	4619      	mov	r1, r3
    195a:	f04f 0200 	mov.w	r2, #0
    195e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1962:	f503 03e8 	add.w	r3, r3, #7602176	; 0x740000
    1966:	f002 fa5b 	bl	3e20 <__aeabi_ddiv>
    196a:	4602      	mov	r2, r0
    196c:	460b      	mov	r3, r1
    196e:	4610      	mov	r0, r2
    1970:	4619      	mov	r1, r3
    1972:	f002 fb3d 	bl	3ff0 <__aeabi_d2f>
    1976:	4603      	mov	r3, r0
    1978:	60fb      	str	r3, [r7, #12]
	temp *= 255;
    197a:	68f8      	ldr	r0, [r7, #12]
    197c:	4907      	ldr	r1, [pc, #28]	; (199c <scaleY+0x5c>)
    197e:	f002 fb87 	bl	4090 <__aeabi_fmul>
    1982:	4603      	mov	r3, r0
    1984:	60fb      	str	r3, [r7, #12]
	return (uint8_t) temp;
    1986:	68f8      	ldr	r0, [r7, #12]
    1988:	f002 fcd2 	bl	4330 <__aeabi_f2uiz>
    198c:	4603      	mov	r3, r0
    198e:	b2db      	uxtb	r3, r3
}
    1990:	4618      	mov	r0, r3
    1992:	f107 0710 	add.w	r7, r7, #16
    1996:	46bd      	mov	sp, r7
    1998:	bd80      	pop	{r7, pc}
    199a:	bf00      	nop
    199c:	437f0000 	.word	0x437f0000

000019a0 <drawCircle>:

void drawCircle(int16_t x0, int16_t y0, int16_t r,
    uint16_t color) {
    19a0:	b580      	push	{r7, lr}
    19a2:	b086      	sub	sp, #24
    19a4:	af00      	add	r7, sp, #0
    19a6:	80f8      	strh	r0, [r7, #6]
    19a8:	80b9      	strh	r1, [r7, #4]
    19aa:	807a      	strh	r2, [r7, #2]
    19ac:	803b      	strh	r3, [r7, #0]
  int16_t f = 1 - r;
    19ae:	887b      	ldrh	r3, [r7, #2]
    19b0:	f1c3 0301 	rsb	r3, r3, #1
    19b4:	b29b      	uxth	r3, r3
    19b6:	81fb      	strh	r3, [r7, #14]
  int16_t ddF_x = 1;
    19b8:	f04f 0301 	mov.w	r3, #1
    19bc:	823b      	strh	r3, [r7, #16]
  int16_t ddF_y = -2 * r;
    19be:	887b      	ldrh	r3, [r7, #2]
    19c0:	461a      	mov	r2, r3
    19c2:	ea4f 32c2 	mov.w	r2, r2, lsl #15
    19c6:	ebc3 0302 	rsb	r3, r3, r2
    19ca:	ea4f 0343 	mov.w	r3, r3, lsl #1
    19ce:	b29b      	uxth	r3, r3
    19d0:	827b      	strh	r3, [r7, #18]
  int16_t x = 0;
    19d2:	f04f 0300 	mov.w	r3, #0
    19d6:	82bb      	strh	r3, [r7, #20]
  int16_t y = r;
    19d8:	887b      	ldrh	r3, [r7, #2]
    19da:	82fb      	strh	r3, [r7, #22]

  drawPixel(x0  , y0+r, color);
    19dc:	88f9      	ldrh	r1, [r7, #6]
    19de:	88ba      	ldrh	r2, [r7, #4]
    19e0:	887b      	ldrh	r3, [r7, #2]
    19e2:	4413      	add	r3, r2
    19e4:	b29a      	uxth	r2, r3
    19e6:	883b      	ldrh	r3, [r7, #0]
    19e8:	4608      	mov	r0, r1
    19ea:	4611      	mov	r1, r2
    19ec:	461a      	mov	r2, r3
    19ee:	f7ff fc1f 	bl	1230 <drawPixel>
  drawPixel(x0  , y0-r, color);
    19f2:	88f9      	ldrh	r1, [r7, #6]
    19f4:	88ba      	ldrh	r2, [r7, #4]
    19f6:	887b      	ldrh	r3, [r7, #2]
    19f8:	ebc3 0302 	rsb	r3, r3, r2
    19fc:	b29a      	uxth	r2, r3
    19fe:	883b      	ldrh	r3, [r7, #0]
    1a00:	4608      	mov	r0, r1
    1a02:	4611      	mov	r1, r2
    1a04:	461a      	mov	r2, r3
    1a06:	f7ff fc13 	bl	1230 <drawPixel>
  drawPixel(x0+r, y0  , color);
    1a0a:	88fa      	ldrh	r2, [r7, #6]
    1a0c:	887b      	ldrh	r3, [r7, #2]
    1a0e:	4413      	add	r3, r2
    1a10:	b299      	uxth	r1, r3
    1a12:	88ba      	ldrh	r2, [r7, #4]
    1a14:	883b      	ldrh	r3, [r7, #0]
    1a16:	4608      	mov	r0, r1
    1a18:	4611      	mov	r1, r2
    1a1a:	461a      	mov	r2, r3
    1a1c:	f7ff fc08 	bl	1230 <drawPixel>
  drawPixel(x0-r, y0  , color);
    1a20:	88fa      	ldrh	r2, [r7, #6]
    1a22:	887b      	ldrh	r3, [r7, #2]
    1a24:	ebc3 0302 	rsb	r3, r3, r2
    1a28:	b299      	uxth	r1, r3
    1a2a:	88ba      	ldrh	r2, [r7, #4]
    1a2c:	883b      	ldrh	r3, [r7, #0]
    1a2e:	4608      	mov	r0, r1
    1a30:	4611      	mov	r1, r2
    1a32:	461a      	mov	r2, r3
    1a34:	f7ff fbfc 	bl	1230 <drawPixel>

  while (x<y) {
    1a38:	e097      	b.n	1b6a <drawCircle+0x1ca>
    if (f >= 0) {
    1a3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
    1a3e:	2b00      	cmp	r3, #0
    1a40:	db0d      	blt.n	1a5e <drawCircle+0xbe>
      y--;
    1a42:	8afb      	ldrh	r3, [r7, #22]
    1a44:	f103 33ff 	add.w	r3, r3, #4294967295
    1a48:	82fb      	strh	r3, [r7, #22]
      ddF_y += 2;
    1a4a:	8a7b      	ldrh	r3, [r7, #18]
    1a4c:	f103 0302 	add.w	r3, r3, #2
    1a50:	b29b      	uxth	r3, r3
    1a52:	827b      	strh	r3, [r7, #18]
      f += ddF_y;
    1a54:	89fa      	ldrh	r2, [r7, #14]
    1a56:	8a7b      	ldrh	r3, [r7, #18]
    1a58:	4413      	add	r3, r2
    1a5a:	b29b      	uxth	r3, r3
    1a5c:	81fb      	strh	r3, [r7, #14]
    }
    x++;
    1a5e:	8abb      	ldrh	r3, [r7, #20]
    1a60:	f103 0301 	add.w	r3, r3, #1
    1a64:	82bb      	strh	r3, [r7, #20]
    ddF_x += 2;
    1a66:	8a3b      	ldrh	r3, [r7, #16]
    1a68:	f103 0302 	add.w	r3, r3, #2
    1a6c:	b29b      	uxth	r3, r3
    1a6e:	823b      	strh	r3, [r7, #16]
    f += ddF_x;
    1a70:	89fa      	ldrh	r2, [r7, #14]
    1a72:	8a3b      	ldrh	r3, [r7, #16]
    1a74:	4413      	add	r3, r2
    1a76:	b29b      	uxth	r3, r3
    1a78:	81fb      	strh	r3, [r7, #14]

    drawPixel(x0 + x, y0 + y, color);
    1a7a:	88fa      	ldrh	r2, [r7, #6]
    1a7c:	8abb      	ldrh	r3, [r7, #20]
    1a7e:	4413      	add	r3, r2
    1a80:	b299      	uxth	r1, r3
    1a82:	88ba      	ldrh	r2, [r7, #4]
    1a84:	8afb      	ldrh	r3, [r7, #22]
    1a86:	4413      	add	r3, r2
    1a88:	b29a      	uxth	r2, r3
    1a8a:	883b      	ldrh	r3, [r7, #0]
    1a8c:	4608      	mov	r0, r1
    1a8e:	4611      	mov	r1, r2
    1a90:	461a      	mov	r2, r3
    1a92:	f7ff fbcd 	bl	1230 <drawPixel>
    drawPixel(x0 - x, y0 + y, color);
    1a96:	88fa      	ldrh	r2, [r7, #6]
    1a98:	8abb      	ldrh	r3, [r7, #20]
    1a9a:	ebc3 0302 	rsb	r3, r3, r2
    1a9e:	b299      	uxth	r1, r3
    1aa0:	88ba      	ldrh	r2, [r7, #4]
    1aa2:	8afb      	ldrh	r3, [r7, #22]
    1aa4:	4413      	add	r3, r2
    1aa6:	b29a      	uxth	r2, r3
    1aa8:	883b      	ldrh	r3, [r7, #0]
    1aaa:	4608      	mov	r0, r1
    1aac:	4611      	mov	r1, r2
    1aae:	461a      	mov	r2, r3
    1ab0:	f7ff fbbe 	bl	1230 <drawPixel>
    drawPixel(x0 + x, y0 - y, color);
    1ab4:	88fa      	ldrh	r2, [r7, #6]
    1ab6:	8abb      	ldrh	r3, [r7, #20]
    1ab8:	4413      	add	r3, r2
    1aba:	b299      	uxth	r1, r3
    1abc:	88ba      	ldrh	r2, [r7, #4]
    1abe:	8afb      	ldrh	r3, [r7, #22]
    1ac0:	ebc3 0302 	rsb	r3, r3, r2
    1ac4:	b29a      	uxth	r2, r3
    1ac6:	883b      	ldrh	r3, [r7, #0]
    1ac8:	4608      	mov	r0, r1
    1aca:	4611      	mov	r1, r2
    1acc:	461a      	mov	r2, r3
    1ace:	f7ff fbaf 	bl	1230 <drawPixel>
    drawPixel(x0 - x, y0 - y, color);
    1ad2:	88fa      	ldrh	r2, [r7, #6]
    1ad4:	8abb      	ldrh	r3, [r7, #20]
    1ad6:	ebc3 0302 	rsb	r3, r3, r2
    1ada:	b299      	uxth	r1, r3
    1adc:	88ba      	ldrh	r2, [r7, #4]
    1ade:	8afb      	ldrh	r3, [r7, #22]
    1ae0:	ebc3 0302 	rsb	r3, r3, r2
    1ae4:	b29a      	uxth	r2, r3
    1ae6:	883b      	ldrh	r3, [r7, #0]
    1ae8:	4608      	mov	r0, r1
    1aea:	4611      	mov	r1, r2
    1aec:	461a      	mov	r2, r3
    1aee:	f7ff fb9f 	bl	1230 <drawPixel>
    drawPixel(x0 + y, y0 + x, color);
    1af2:	88fa      	ldrh	r2, [r7, #6]
    1af4:	8afb      	ldrh	r3, [r7, #22]
    1af6:	4413      	add	r3, r2
    1af8:	b299      	uxth	r1, r3
    1afa:	88ba      	ldrh	r2, [r7, #4]
    1afc:	8abb      	ldrh	r3, [r7, #20]
    1afe:	4413      	add	r3, r2
    1b00:	b29a      	uxth	r2, r3
    1b02:	883b      	ldrh	r3, [r7, #0]
    1b04:	4608      	mov	r0, r1
    1b06:	4611      	mov	r1, r2
    1b08:	461a      	mov	r2, r3
    1b0a:	f7ff fb91 	bl	1230 <drawPixel>
    drawPixel(x0 - y, y0 + x, color);
    1b0e:	88fa      	ldrh	r2, [r7, #6]
    1b10:	8afb      	ldrh	r3, [r7, #22]
    1b12:	ebc3 0302 	rsb	r3, r3, r2
    1b16:	b299      	uxth	r1, r3
    1b18:	88ba      	ldrh	r2, [r7, #4]
    1b1a:	8abb      	ldrh	r3, [r7, #20]
    1b1c:	4413      	add	r3, r2
    1b1e:	b29a      	uxth	r2, r3
    1b20:	883b      	ldrh	r3, [r7, #0]
    1b22:	4608      	mov	r0, r1
    1b24:	4611      	mov	r1, r2
    1b26:	461a      	mov	r2, r3
    1b28:	f7ff fb82 	bl	1230 <drawPixel>
    drawPixel(x0 + y, y0 - x, color);
    1b2c:	88fa      	ldrh	r2, [r7, #6]
    1b2e:	8afb      	ldrh	r3, [r7, #22]
    1b30:	4413      	add	r3, r2
    1b32:	b299      	uxth	r1, r3
    1b34:	88ba      	ldrh	r2, [r7, #4]
    1b36:	8abb      	ldrh	r3, [r7, #20]
    1b38:	ebc3 0302 	rsb	r3, r3, r2
    1b3c:	b29a      	uxth	r2, r3
    1b3e:	883b      	ldrh	r3, [r7, #0]
    1b40:	4608      	mov	r0, r1
    1b42:	4611      	mov	r1, r2
    1b44:	461a      	mov	r2, r3
    1b46:	f7ff fb73 	bl	1230 <drawPixel>
    drawPixel(x0 - y, y0 - x, color);
    1b4a:	88fa      	ldrh	r2, [r7, #6]
    1b4c:	8afb      	ldrh	r3, [r7, #22]
    1b4e:	ebc3 0302 	rsb	r3, r3, r2
    1b52:	b299      	uxth	r1, r3
    1b54:	88ba      	ldrh	r2, [r7, #4]
    1b56:	8abb      	ldrh	r3, [r7, #20]
    1b58:	ebc3 0302 	rsb	r3, r3, r2
    1b5c:	b29a      	uxth	r2, r3
    1b5e:	883b      	ldrh	r3, [r7, #0]
    1b60:	4608      	mov	r0, r1
    1b62:	4611      	mov	r1, r2
    1b64:	461a      	mov	r2, r3
    1b66:	f7ff fb63 	bl	1230 <drawPixel>
  drawPixel(x0  , y0+r, color);
  drawPixel(x0  , y0-r, color);
  drawPixel(x0+r, y0  , color);
  drawPixel(x0-r, y0  , color);

  while (x<y) {
    1b6a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
    1b6e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
    1b72:	429a      	cmp	r2, r3
    1b74:	f6ff af61 	blt.w	1a3a <drawCircle+0x9a>
    drawPixel(x0 + y, y0 + x, color);
    drawPixel(x0 - y, y0 + x, color);
    drawPixel(x0 + y, y0 - x, color);
    drawPixel(x0 - y, y0 - x, color);
  }
}
    1b78:	f107 0718 	add.w	r7, r7, #24
    1b7c:	46bd      	mov	sp, r7
    1b7e:	bd80      	pop	{r7, pc}

00001b80 <sendMessage>:

uint8_t g_rx_buff[RX_BUFF_SIZE];

//Takes in an array of uint8_t containing address and destination address
//Constructs frame appropriately and sends it out
void sendMessage(uint8_t* inputMessage, uint8_t inputMessageLength, uint16_t destAddr) {
    1b80:	b580      	push	{r7, lr}
    1b82:	b08a      	sub	sp, #40	; 0x28
    1b84:	af00      	add	r7, sp, #0
    1b86:	6078      	str	r0, [r7, #4]
    1b88:	4613      	mov	r3, r2
    1b8a:	460a      	mov	r2, r1
    1b8c:	70fa      	strb	r2, [r7, #3]
    1b8e:	803b      	strh	r3, [r7, #0]
	int i;
	uint8_t message[messageLength];
	message[0] = 0x7E;	//Delimiter, does not change
    1b90:	f04f 037e 	mov.w	r3, #126	; 0x7e
    1b94:	733b      	strb	r3, [r7, #12]
	message[1] = (messageLength - 4) >> 8;	//Length MSB
    1b96:	f04f 0300 	mov.w	r3, #0
    1b9a:	737b      	strb	r3, [r7, #13]
	message[2] = (messageLength - 4) & 0xFF;	//Length LSB
    1b9c:	f04f 0310 	mov.w	r3, #16
    1ba0:	73bb      	strb	r3, [r7, #14]
	message[3] = 0;	//Frame type: 0 = TX Request 64 bit addr
    1ba2:	f04f 0300 	mov.w	r3, #0
    1ba6:	73fb      	strb	r3, [r7, #15]
	message[4] = 1;	//Frame ID
    1ba8:	f04f 0301 	mov.w	r3, #1
    1bac:	743b      	strb	r3, [r7, #16]
	//5-12: Destination addresses
	for(i = 5; i < 11; ++i) {
    1bae:	f04f 0305 	mov.w	r3, #5
    1bb2:	623b      	str	r3, [r7, #32]
    1bb4:	e00b      	b.n	1bce <sendMessage+0x4e>
		message[i] = 0;
    1bb6:	6a3b      	ldr	r3, [r7, #32]
    1bb8:	f107 0128 	add.w	r1, r7, #40	; 0x28
    1bbc:	440b      	add	r3, r1
    1bbe:	f04f 0200 	mov.w	r2, #0
    1bc2:	f803 2c1c 	strb.w	r2, [r3, #-28]
	message[1] = (messageLength - 4) >> 8;	//Length MSB
	message[2] = (messageLength - 4) & 0xFF;	//Length LSB
	message[3] = 0;	//Frame type: 0 = TX Request 64 bit addr
	message[4] = 1;	//Frame ID
	//5-12: Destination addresses
	for(i = 5; i < 11; ++i) {
    1bc6:	6a3b      	ldr	r3, [r7, #32]
    1bc8:	f103 0301 	add.w	r3, r3, #1
    1bcc:	623b      	str	r3, [r7, #32]
    1bce:	6a3b      	ldr	r3, [r7, #32]
    1bd0:	2b0a      	cmp	r3, #10
    1bd2:	ddf0      	ble.n	1bb6 <sendMessage+0x36>
		message[i] = 0;
	}
	message[11] = (destAddr >> 8) & 0xFF;
    1bd4:	883b      	ldrh	r3, [r7, #0]
    1bd6:	ea4f 2313 	mov.w	r3, r3, lsr #8
    1bda:	b29b      	uxth	r3, r3
    1bdc:	b2db      	uxtb	r3, r3
    1bde:	75fb      	strb	r3, [r7, #23]
	message[12] = destAddr & 0xFF;
    1be0:	883b      	ldrh	r3, [r7, #0]
    1be2:	b2db      	uxtb	r3, r3
    1be4:	763b      	strb	r3, [r7, #24]
	message[13] = 0;	//Options
    1be6:	f04f 0300 	mov.w	r3, #0
    1bea:	767b      	strb	r3, [r7, #25]
	for(i = 0; i < inputMessageLength; ++i) {
    1bec:	f04f 0300 	mov.w	r3, #0
    1bf0:	623b      	str	r3, [r7, #32]
    1bf2:	e00f      	b.n	1c14 <sendMessage+0x94>
		message[i + 14] = *(inputMessage + i * sizeof(uint8_t));
    1bf4:	6a3b      	ldr	r3, [r7, #32]
    1bf6:	f103 030e 	add.w	r3, r3, #14
    1bfa:	6a39      	ldr	r1, [r7, #32]
    1bfc:	687a      	ldr	r2, [r7, #4]
    1bfe:	440a      	add	r2, r1
    1c00:	7812      	ldrb	r2, [r2, #0]
    1c02:	f107 0128 	add.w	r1, r7, #40	; 0x28
    1c06:	440b      	add	r3, r1
    1c08:	f803 2c1c 	strb.w	r2, [r3, #-28]
		message[i] = 0;
	}
	message[11] = (destAddr >> 8) & 0xFF;
	message[12] = destAddr & 0xFF;
	message[13] = 0;	//Options
	for(i = 0; i < inputMessageLength; ++i) {
    1c0c:	6a3b      	ldr	r3, [r7, #32]
    1c0e:	f103 0301 	add.w	r3, r3, #1
    1c12:	623b      	str	r3, [r7, #32]
    1c14:	78fa      	ldrb	r2, [r7, #3]
    1c16:	6a3b      	ldr	r3, [r7, #32]
    1c18:	429a      	cmp	r2, r3
    1c1a:	dceb      	bgt.n	1bf4 <sendMessage+0x74>
		message[i + 14] = *(inputMessage + i * sizeof(uint8_t));
	}
	uint8_t sum = 0;
    1c1c:	f04f 0300 	mov.w	r3, #0
    1c20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for(i = 3; i < messageLength - 1; ++i) {
    1c24:	f04f 0303 	mov.w	r3, #3
    1c28:	623b      	str	r3, [r7, #32]
    1c2a:	e00e      	b.n	1c4a <sendMessage+0xca>
		sum += message[i];
    1c2c:	6a3b      	ldr	r3, [r7, #32]
    1c2e:	f107 0228 	add.w	r2, r7, #40	; 0x28
    1c32:	4413      	add	r3, r2
    1c34:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
    1c38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    1c3c:	4413      	add	r3, r2
    1c3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	message[13] = 0;	//Options
	for(i = 0; i < inputMessageLength; ++i) {
		message[i + 14] = *(inputMessage + i * sizeof(uint8_t));
	}
	uint8_t sum = 0;
	for(i = 3; i < messageLength - 1; ++i) {
    1c42:	6a3b      	ldr	r3, [r7, #32]
    1c44:	f103 0301 	add.w	r3, r3, #1
    1c48:	623b      	str	r3, [r7, #32]
    1c4a:	6a3b      	ldr	r3, [r7, #32]
    1c4c:	2b12      	cmp	r3, #18
    1c4e:	dded      	ble.n	1c2c <sendMessage+0xac>
		sum += message[i];
	}
	message[messageLength - 1] = (0xFF - sum) & 0xFF;
    1c50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    1c54:	ea6f 0303 	mvn.w	r3, r3
    1c58:	b2db      	uxtb	r3, r3
    1c5a:	77fb      	strb	r3, [r7, #31]
	MSS_UART_polled_tx(&g_mss_uart1, message, sizeof(message));
    1c5c:	f107 030c 	add.w	r3, r7, #12
    1c60:	f240 0070 	movw	r0, #112	; 0x70
    1c64:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1c68:	4619      	mov	r1, r3
    1c6a:	f04f 0214 	mov.w	r2, #20
    1c6e:	f000 f817 	bl	1ca0 <MSS_UART_polled_tx>
}
    1c72:	f107 0728 	add.w	r7, r7, #40	; 0x28
    1c76:	46bd      	mov	sp, r7
    1c78:	bd80      	pop	{r7, pc}
    1c7a:	bf00      	nop

00001c7c <uart1_rx_handler>:

//When something is received, trigger an interrupt that fills g_rx_buff with the received data
void uart1_rx_handler( mss_uart_instance_t * this_uart ) {
    1c7c:	b580      	push	{r7, lr}
    1c7e:	b082      	sub	sp, #8
    1c80:	af00      	add	r7, sp, #0
    1c82:	6078      	str	r0, [r7, #4]
      MSS_UART_get_rx( this_uart, &g_rx_buff, sizeof(g_rx_buff) );
    1c84:	6878      	ldr	r0, [r7, #4]
    1c86:	f240 0130 	movw	r1, #48	; 0x30
    1c8a:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1c8e:	f04f 0240 	mov.w	r2, #64	; 0x40
    1c92:	f000 f85b 	bl	1d4c <MSS_UART_get_rx>
}
    1c96:	f107 0708 	add.w	r7, r7, #8
    1c9a:	46bd      	mov	sp, r7
    1c9c:	bd80      	pop	{r7, pc}
    1c9e:	bf00      	nop

00001ca0 <MSS_UART_polled_tx>:
(
    mss_uart_instance_t * this_uart,
    const uint8_t * pbuff,
    uint32_t tx_size
)
{
    1ca0:	e92d 05f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl}
    uint32_t char_idx = 0U;
    uint32_t size_sent;
    uint8_t status;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
    1ca4:	f240 0398 	movw	r3, #152	; 0x98
    1ca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1cac:	4298      	cmp	r0, r3
    1cae:	d006      	beq.n	1cbe <MSS_UART_polled_tx+0x1e>
    1cb0:	f240 0370 	movw	r3, #112	; 0x70
    1cb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1cb8:	4298      	cmp	r0, r3
    1cba:	d000      	beq.n	1cbe <MSS_UART_polled_tx+0x1e>
    1cbc:	be00      	bkpt	0x0000
    ASSERT( pbuff != ( (uint8_t *)0 ) );
    1cbe:	b901      	cbnz	r1, 1cc2 <MSS_UART_polled_tx+0x22>
    1cc0:	be00      	bkpt	0x0000
    ASSERT( tx_size > 0U );
    1cc2:	b902      	cbnz	r2, 1cc6 <MSS_UART_polled_tx+0x26>
    1cc4:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
    1cc6:	f240 0398 	movw	r3, #152	; 0x98
    1cca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1cce:	4298      	cmp	r0, r3
    1cd0:	d005      	beq.n	1cde <MSS_UART_polled_tx+0x3e>
    1cd2:	f240 0370 	movw	r3, #112	; 0x70
    1cd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1cda:	4298      	cmp	r0, r3
    1cdc:	d133      	bne.n	1d46 <MSS_UART_polled_tx+0xa6>
    1cde:	1e13      	subs	r3, r2, #0
    1ce0:	bf18      	it	ne
    1ce2:	2301      	movne	r3, #1
    1ce4:	2900      	cmp	r1, #0
    1ce6:	bf0c      	ite	eq
    1ce8:	2300      	moveq	r3, #0
    1cea:	f003 0301 	andne.w	r3, r3, #1
    1cee:	2b00      	cmp	r3, #0
    1cf0:	d029      	beq.n	1d46 <MSS_UART_polled_tx+0xa6>
    1cf2:	f04f 0700 	mov.w	r7, #0
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
    1cf6:	46b8      	mov	r8, r7
            if( status & MSS_UART_THRE )
            {
                uint32_t fill_size = TX_FIFO_SIZE;

                /* Calculate the number of bytes to transmit. */
                if ( tx_size < TX_FIFO_SIZE )
    1cf8:	f04f 0a10 	mov.w	sl, #16
         /* Remain in this loop until the entire input buffer
          * has been transferred to the UART.
          */
        do {
            /* Read the Line Status Register and update the sticky record */
            status = this_uart->hw_reg->LSR;
    1cfc:	6803      	ldr	r3, [r0, #0]
    1cfe:	7d1b      	ldrb	r3, [r3, #20]
            this_uart->status |= status;
    1d00:	f890 c00a 	ldrb.w	ip, [r0, #10]
    1d04:	ea43 0c0c 	orr.w	ip, r3, ip
    1d08:	f880 c00a 	strb.w	ip, [r0, #10]

            /* Check if TX FIFO is empty. */
            if( status & MSS_UART_THRE )
    1d0c:	f013 0f20 	tst.w	r3, #32
    1d10:	d017      	beq.n	1d42 <MSS_UART_polled_tx+0xa2>
            {
                uint32_t fill_size = TX_FIFO_SIZE;

                /* Calculate the number of bytes to transmit. */
                if ( tx_size < TX_FIFO_SIZE )
    1d12:	2a0f      	cmp	r2, #15
    1d14:	d904      	bls.n	1d20 <MSS_UART_polled_tx+0x80>
    1d16:	4656      	mov	r6, sl
    1d18:	46bc      	mov	ip, r7
    1d1a:	4643      	mov	r3, r8

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
                {
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx++];
    1d1c:	440f      	add	r7, r1
    1d1e:	e004      	b.n	1d2a <MSS_UART_polled_tx+0x8a>
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
    1d20:	b90a      	cbnz	r2, 1d26 <MSS_UART_polled_tx+0x86>
    1d22:	4643      	mov	r3, r8
    1d24:	e00b      	b.n	1d3e <MSS_UART_polled_tx+0x9e>
    1d26:	4616      	mov	r6, r2
    1d28:	e7f6      	b.n	1d18 <MSS_UART_polled_tx+0x78>
                {
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx++];
    1d2a:	6804      	ldr	r4, [r0, #0]
    1d2c:	5cfd      	ldrb	r5, [r7, r3]
    1d2e:	7025      	strb	r5, [r4, #0]
    1d30:	f10c 0c01 	add.w	ip, ip, #1
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
    1d34:	f103 0301 	add.w	r3, r3, #1
    1d38:	429e      	cmp	r6, r3
    1d3a:	d8f6      	bhi.n	1d2a <MSS_UART_polled_tx+0x8a>
    1d3c:	4667      	mov	r7, ip
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx++];
                }

                /* Calculate the number of untransmitted bytes remaining. */
                tx_size -= size_sent;
    1d3e:	ebc3 0202 	rsb	r2, r3, r2
            }
        }while( tx_size );
    1d42:	2a00      	cmp	r2, #0
    1d44:	d1da      	bne.n	1cfc <MSS_UART_polled_tx+0x5c>
    }
}
    1d46:	e8bd 05f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl}
    1d4a:	4770      	bx	lr

00001d4c <MSS_UART_get_rx>:
(
    mss_uart_instance_t * this_uart,
    uint8_t * rx_buff,
    size_t buff_size
)
{
    1d4c:	b410      	push	{r4}
    1d4e:	4603      	mov	r3, r0
    size_t rx_size = 0U;
    uint8_t status = 0U;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
    1d50:	f240 0098 	movw	r0, #152	; 0x98
    1d54:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1d58:	4283      	cmp	r3, r0
    1d5a:	d006      	beq.n	1d6a <MSS_UART_get_rx+0x1e>
    1d5c:	f240 0070 	movw	r0, #112	; 0x70
    1d60:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1d64:	4283      	cmp	r3, r0
    1d66:	d000      	beq.n	1d6a <MSS_UART_get_rx+0x1e>
    1d68:	be00      	bkpt	0x0000
    ASSERT( rx_buff != ((uint8_t *)0) );
    1d6a:	b901      	cbnz	r1, 1d6e <MSS_UART_get_rx+0x22>
    1d6c:	be00      	bkpt	0x0000
    ASSERT( buff_size > 0U );
    1d6e:	b902      	cbnz	r2, 1d72 <MSS_UART_get_rx+0x26>
    1d70:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
    1d72:	f240 0098 	movw	r0, #152	; 0x98
    1d76:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1d7a:	4283      	cmp	r3, r0
    1d7c:	d005      	beq.n	1d8a <MSS_UART_get_rx+0x3e>
    1d7e:	f240 0070 	movw	r0, #112	; 0x70
    1d82:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1d86:	4283      	cmp	r3, r0
    1d88:	d12a      	bne.n	1de0 <MSS_UART_get_rx+0x94>
          ( rx_buff != ((uint8_t *)0) ) && ( buff_size > 0U ) )
    1d8a:	1e10      	subs	r0, r2, #0
    1d8c:	bf18      	it	ne
    1d8e:	2001      	movne	r0, #1

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
    ASSERT( rx_buff != ((uint8_t *)0) );
    ASSERT( buff_size > 0U );

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
    1d90:	2900      	cmp	r1, #0
    1d92:	bf0c      	ite	eq
    1d94:	2400      	moveq	r4, #0
    1d96:	f000 0401 	andne.w	r4, r0, #1
    1d9a:	b30c      	cbz	r4, 1de0 <MSS_UART_get_rx+0x94>
          ( rx_buff != ((uint8_t *)0) ) && ( buff_size > 0U ) )
    {
        status = this_uart->hw_reg->LSR;
    1d9c:	681c      	ldr	r4, [r3, #0]
    1d9e:	f894 c014 	ldrb.w	ip, [r4, #20]
        this_uart->status |= status;
    1da2:	7a9c      	ldrb	r4, [r3, #10]
    1da4:	ea4c 0404 	orr.w	r4, ip, r4
    1da8:	729c      	strb	r4, [r3, #10]

        while (( (status & MSS_UART_DATA_READY) != 0U) &&
    1daa:	ea1c 0f00 	tst.w	ip, r0
    1dae:	d017      	beq.n	1de0 <MSS_UART_get_rx+0x94>
    1db0:	f04f 0000 	mov.w	r0, #0
               ( rx_size < buff_size ) )
        {
            rx_buff[rx_size] = this_uart->hw_reg->RBR;
    1db4:	681c      	ldr	r4, [r3, #0]
    1db6:	f894 c000 	ldrb.w	ip, [r4]
    1dba:	f801 c000 	strb.w	ip, [r1, r0]
            ++rx_size;
    1dbe:	f100 0001 	add.w	r0, r0, #1
            status = this_uart->hw_reg->LSR;
    1dc2:	681c      	ldr	r4, [r3, #0]
    1dc4:	f894 c014 	ldrb.w	ip, [r4, #20]
            this_uart->status |= status;
    1dc8:	7a9c      	ldrb	r4, [r3, #10]
    1dca:	ea4c 0404 	orr.w	r4, ip, r4
    1dce:	729c      	strb	r4, [r3, #10]
          ( rx_buff != ((uint8_t *)0) ) && ( buff_size > 0U ) )
    {
        status = this_uart->hw_reg->LSR;
        this_uart->status |= status;

        while (( (status & MSS_UART_DATA_READY) != 0U) &&
    1dd0:	4282      	cmp	r2, r0
    1dd2:	bf94      	ite	ls
    1dd4:	2400      	movls	r4, #0
    1dd6:	f00c 0401 	andhi.w	r4, ip, #1
    1dda:	2c00      	cmp	r4, #0
    1ddc:	d1ea      	bne.n	1db4 <MSS_UART_get_rx+0x68>
    1dde:	e001      	b.n	1de4 <MSS_UART_get_rx+0x98>
    1de0:	f04f 0000 	mov.w	r0, #0
            status = this_uart->hw_reg->LSR;
            this_uart->status |= status;
        }
    }
    return rx_size;
}
    1de4:	bc10      	pop	{r4}
    1de6:	4770      	bx	lr

00001de8 <MSS_UART_isr>:
static void
MSS_UART_isr
(
    mss_uart_instance_t * this_uart
)
{
    1de8:	b508      	push	{r3, lr}
    uint8_t iirf;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
    1dea:	f240 0398 	movw	r3, #152	; 0x98
    1dee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1df2:	4298      	cmp	r0, r3
    1df4:	d007      	beq.n	1e06 <MSS_UART_isr+0x1e>
    1df6:	f240 0370 	movw	r3, #112	; 0x70
    1dfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1dfe:	4298      	cmp	r0, r3
    1e00:	d001      	beq.n	1e06 <MSS_UART_isr+0x1e>
    1e02:	be00      	bkpt	0x0000
    1e04:	bd08      	pop	{r3, pc}

    if ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) )
    {
        iirf = this_uart->hw_reg->IIR & IIRF_MASK;
    1e06:	6803      	ldr	r3, [r0, #0]
    1e08:	7a1b      	ldrb	r3, [r3, #8]

        switch ( iirf )
    1e0a:	f003 030f 	and.w	r3, r3, #15
    1e0e:	2b0c      	cmp	r3, #12
    1e10:	d820      	bhi.n	1e54 <MSS_UART_isr+0x6c>
    1e12:	e8df f003 	tbb	[pc, r3]
    1e16:	1f07      	.short	0x1f07
    1e18:	1f131f0d 	.word	0x1f131f0d
    1e1c:	1f1f1f19 	.word	0x1f1f1f19
    1e20:	1f1f      	.short	0x1f1f
    1e22:	13          	.byte	0x13
    1e23:	00          	.byte	0x00
        {
            case IIRF_MODEM_STATUS:  /* Modem status interrupt */
            {
                ASSERT( NULL_HANDLER != this_uart->modemsts_handler );
    1e24:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1e26:	b90b      	cbnz	r3, 1e2c <MSS_UART_isr+0x44>
    1e28:	be00      	bkpt	0x0000
    1e2a:	bd08      	pop	{r3, pc}
                if( NULL_HANDLER != this_uart->modemsts_handler )
                {
                   (*(this_uart->modemsts_handler))( this_uart );
    1e2c:	4798      	blx	r3
    1e2e:	bd08      	pop	{r3, pc}
            }
            break;

            case IIRF_THRE: /* Transmitter Holding Register Empty */
            {
                ASSERT( NULL_HANDLER != this_uart->tx_handler );
    1e30:	6a03      	ldr	r3, [r0, #32]
    1e32:	b90b      	cbnz	r3, 1e38 <MSS_UART_isr+0x50>
    1e34:	be00      	bkpt	0x0000
    1e36:	bd08      	pop	{r3, pc}
                if ( NULL_HANDLER != this_uart->tx_handler )
                {
                    (*(this_uart->tx_handler))( this_uart );
    1e38:	4798      	blx	r3
    1e3a:	bd08      	pop	{r3, pc}
            break;

            case IIRF_RX_DATA:      /* Received Data Available */
            case IIRF_DATA_TIMEOUT: /* Received Data Timed-out */
            {
                ASSERT( NULL_HANDLER != this_uart->rx_handler );
    1e3c:	69c3      	ldr	r3, [r0, #28]
    1e3e:	b90b      	cbnz	r3, 1e44 <MSS_UART_isr+0x5c>
    1e40:	be00      	bkpt	0x0000
    1e42:	bd08      	pop	{r3, pc}
                if ( NULL_HANDLER != this_uart->rx_handler )
                {
                    (*(this_uart->rx_handler))( this_uart );
    1e44:	4798      	blx	r3
    1e46:	bd08      	pop	{r3, pc}
            }
            break;

            case IIRF_RX_LINE_STATUS:  /* Line Status Interrupt */
            {
                ASSERT( NULL_HANDLER != this_uart->linests_handler );
    1e48:	6983      	ldr	r3, [r0, #24]
    1e4a:	b90b      	cbnz	r3, 1e50 <MSS_UART_isr+0x68>
    1e4c:	be00      	bkpt	0x0000
    1e4e:	bd08      	pop	{r3, pc}
                if ( NULL_HANDLER != this_uart->linests_handler )
                {
                   (*(this_uart->linests_handler))( this_uart );
    1e50:	4798      	blx	r3
    1e52:	bd08      	pop	{r3, pc}
            }
            break;

            default:
            {
                ASSERT( INVALID_INTERRUPT );
    1e54:	be00      	bkpt	0x0000
    1e56:	bd08      	pop	{r3, pc}

00001e58 <default_tx_handler>:
static void
default_tx_handler
(
    mss_uart_instance_t * this_uart
)
{
    1e58:	b410      	push	{r4}
    uint8_t status;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
    1e5a:	f240 0398 	movw	r3, #152	; 0x98
    1e5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1e62:	4298      	cmp	r0, r3
    1e64:	d006      	beq.n	1e74 <default_tx_handler+0x1c>
    1e66:	f240 0370 	movw	r3, #112	; 0x70
    1e6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1e6e:	4298      	cmp	r0, r3
    1e70:	d000      	beq.n	1e74 <default_tx_handler+0x1c>
    1e72:	be00      	bkpt	0x0000
    ASSERT( ( (uint8_t *)0 ) != this_uart->tx_buffer );
    1e74:	68c2      	ldr	r2, [r0, #12]
    1e76:	b902      	cbnz	r2, 1e7a <default_tx_handler+0x22>
    1e78:	be00      	bkpt	0x0000
    ASSERT( 0U < this_uart->tx_buff_size );
    1e7a:	6901      	ldr	r1, [r0, #16]
    1e7c:	b901      	cbnz	r1, 1e80 <default_tx_handler+0x28>
    1e7e:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
    1e80:	f240 0398 	movw	r3, #152	; 0x98
    1e84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1e88:	4298      	cmp	r0, r3
    1e8a:	d005      	beq.n	1e98 <default_tx_handler+0x40>
    1e8c:	f240 0370 	movw	r3, #112	; 0x70
    1e90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1e94:	4298      	cmp	r0, r3
    1e96:	d130      	bne.n	1efa <default_tx_handler+0xa2>
    1e98:	2a00      	cmp	r2, #0
    1e9a:	d02e      	beq.n	1efa <default_tx_handler+0xa2>
    1e9c:	2900      	cmp	r1, #0
    1e9e:	d02c      	beq.n	1efa <default_tx_handler+0xa2>
        ( ( (uint8_t *)0 ) != this_uart->tx_buffer ) &&
        ( 0U < this_uart->tx_buff_size ) )
    {
        /* Read the Line Status Register and update the sticky record. */
        status = this_uart->hw_reg->LSR;
    1ea0:	6803      	ldr	r3, [r0, #0]
    1ea2:	7d1b      	ldrb	r3, [r3, #20]
        this_uart->status |= status;
    1ea4:	7a82      	ldrb	r2, [r0, #10]
    1ea6:	ea43 0202 	orr.w	r2, r3, r2
    1eaa:	7282      	strb	r2, [r0, #10]

        /*
         * This function should only be called as a result of a THRE interrupt.
         * Verify that this is true before proceeding to transmit data.
         */
        if ( status & MSS_UART_THRE )
    1eac:	f013 0f20 	tst.w	r3, #32
    1eb0:	d01a      	beq.n	1ee8 <default_tx_handler+0x90>
        {
            uint32_t i;
            uint32_t fill_size = TX_FIFO_SIZE;
            uint32_t tx_remain = this_uart->tx_buff_size - this_uart->tx_idx;
    1eb2:	6902      	ldr	r2, [r0, #16]
    1eb4:	6943      	ldr	r3, [r0, #20]
    1eb6:	ebc3 0302 	rsb	r3, r3, r2

            /* Calculate the number of bytes to transmit. */
            if ( tx_remain < TX_FIFO_SIZE )
    1eba:	2b0f      	cmp	r3, #15
    1ebc:	d904      	bls.n	1ec8 <default_tx_handler+0x70>
    1ebe:	f04f 0c10 	mov.w	ip, #16
    1ec2:	f04f 0300 	mov.w	r3, #0
    1ec6:	e002      	b.n	1ece <default_tx_handler+0x76>
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for ( i = 0U; i < fill_size; ++i )
    1ec8:	b173      	cbz	r3, 1ee8 <default_tx_handler+0x90>
    1eca:	469c      	mov	ip, r3
    1ecc:	e7f9      	b.n	1ec2 <default_tx_handler+0x6a>
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
    1ece:	6802      	ldr	r2, [r0, #0]
    1ed0:	68c4      	ldr	r4, [r0, #12]
    1ed2:	6941      	ldr	r1, [r0, #20]
    1ed4:	5c61      	ldrb	r1, [r4, r1]
    1ed6:	7011      	strb	r1, [r2, #0]
                ++this_uart->tx_idx;
    1ed8:	6942      	ldr	r2, [r0, #20]
    1eda:	f102 0201 	add.w	r2, r2, #1
    1ede:	6142      	str	r2, [r0, #20]
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for ( i = 0U; i < fill_size; ++i )
    1ee0:	f103 0301 	add.w	r3, r3, #1
    1ee4:	4563      	cmp	r3, ip
    1ee6:	d3f2      	bcc.n	1ece <default_tx_handler+0x76>
                ++this_uart->tx_idx;
            }
        }

        /* Flag Tx as complete if all data has been pushed into the Tx FIFO. */
        if ( this_uart->tx_idx == this_uart->tx_buff_size )
    1ee8:	6942      	ldr	r2, [r0, #20]
    1eea:	6903      	ldr	r3, [r0, #16]
    1eec:	429a      	cmp	r2, r3
        {
            this_uart->tx_buff_size = TX_COMPLETE;
    1eee:	bf01      	itttt	eq
    1ef0:	2300      	moveq	r3, #0
    1ef2:	6103      	streq	r3, [r0, #16]
            /* disables TX interrupt */
            this_uart->hw_reg_bit->IER_ETBEI = 0U;
    1ef4:	6842      	ldreq	r2, [r0, #4]
    1ef6:	f8c2 3084 	streq.w	r3, [r2, #132]	; 0x84
        }
    }
}
    1efa:	bc10      	pop	{r4}
    1efc:	4770      	bx	lr
    1efe:	bf00      	nop

00001f00 <MSS_UART_set_rx_handler>:
(
    mss_uart_instance_t *       this_uart,
    mss_uart_irq_handler_t      handler,
    mss_uart_rx_trig_level_t    trigger_level
)
{
    1f00:	b410      	push	{r4}
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
    1f02:	f240 0398 	movw	r3, #152	; 0x98
    1f06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1f0a:	4298      	cmp	r0, r3
    1f0c:	d006      	beq.n	1f1c <MSS_UART_set_rx_handler+0x1c>
    1f0e:	f240 0370 	movw	r3, #112	; 0x70
    1f12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1f16:	4298      	cmp	r0, r3
    1f18:	d000      	beq.n	1f1c <MSS_UART_set_rx_handler+0x1c>
    1f1a:	be00      	bkpt	0x0000
    ASSERT( handler != INVALID_IRQ_HANDLER );
    1f1c:	b901      	cbnz	r1, 1f20 <MSS_UART_set_rx_handler+0x20>
    1f1e:	be00      	bkpt	0x0000
    ASSERT( trigger_level < MSS_UART_FIFO_INVALID_TRIG_LEVEL );
    1f20:	2ac0      	cmp	r2, #192	; 0xc0
    1f22:	d900      	bls.n	1f26 <MSS_UART_set_rx_handler+0x26>
    1f24:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
    1f26:	f240 0398 	movw	r3, #152	; 0x98
    1f2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1f2e:	4298      	cmp	r0, r3
    1f30:	d005      	beq.n	1f3e <MSS_UART_set_rx_handler+0x3e>
    1f32:	f240 0370 	movw	r3, #112	; 0x70
    1f36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1f3a:	4298      	cmp	r0, r3
    1f3c:	d12f      	bne.n	1f9e <MSS_UART_set_rx_handler+0x9e>
    1f3e:	2ac0      	cmp	r2, #192	; 0xc0
    1f40:	bf8c      	ite	hi
    1f42:	2300      	movhi	r3, #0
    1f44:	2301      	movls	r3, #1
    1f46:	2900      	cmp	r1, #0
    1f48:	bf0c      	ite	eq
    1f4a:	2300      	moveq	r3, #0
    1f4c:	f003 0301 	andne.w	r3, r3, #1
    1f50:	b32b      	cbz	r3, 1f9e <MSS_UART_set_rx_handler+0x9e>
        ( handler != INVALID_IRQ_HANDLER) &&
        ( trigger_level < MSS_UART_FIFO_INVALID_TRIG_LEVEL) )
    {
        this_uart->rx_handler = handler;
    1f52:	61c1      	str	r1, [r0, #28]

        /* Set the receive interrupt trigger level. */
        /* Clear RX FIFO; Enable TXRDY and RXRDY for PDMA */
        this_uart->hw_reg->FCR = (uint8_t)(FCR_TRIG_LEVEL_MASK & (uint8_t)trigger_level) |
    1f54:	6803      	ldr	r3, [r0, #0]
    1f56:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    1f5a:	f042 020a 	orr.w	r2, r2, #10
    1f5e:	721a      	strb	r2, [r3, #8]
                              FCR_CLEAR_RX_FIFO_MASK | FCR_ENABLE_TXRDY_RXRDY_MASK;

        /* Clear any previously pended interrupts */
        NVIC_ClearPendingIRQ( this_uart->irqn );
    1f60:	8903      	ldrh	r3, [r0, #8]
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    1f62:	b219      	sxth	r1, r3
    1f64:	ea4f 1151 	mov.w	r1, r1, lsr #5
    1f68:	f003 031f 	and.w	r3, r3, #31
    1f6c:	f04f 0201 	mov.w	r2, #1
    1f70:	fa02 f403 	lsl.w	r4, r2, r3
    1f74:	f24e 1300 	movw	r3, #57600	; 0xe100
    1f78:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1f7c:	f101 0160 	add.w	r1, r1, #96	; 0x60
    1f80:	f843 4021 	str.w	r4, [r3, r1, lsl #2]

        /* Enable receive interrupt. */
        this_uart->hw_reg_bit->IER_ERBFI = 1U;
    1f84:	6841      	ldr	r1, [r0, #4]
    1f86:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80

        /* Enable UART instance interrupt in Cortex-M3 NVIC. */
        NVIC_EnableIRQ( this_uart->irqn );
    1f8a:	8901      	ldrh	r1, [r0, #8]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    1f8c:	b208      	sxth	r0, r1
    1f8e:	ea4f 1050 	mov.w	r0, r0, lsr #5
    1f92:	f001 011f 	and.w	r1, r1, #31
    1f96:	fa02 f201 	lsl.w	r2, r2, r1
    1f9a:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    }
}
    1f9e:	bc10      	pop	{r4}
    1fa0:	4770      	bx	lr
    1fa2:	bf00      	nop

00001fa4 <UART0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART0_IRQHandler( void )
#else
void UART0_IRQHandler( void )
#endif
{
    1fa4:	4668      	mov	r0, sp
    1fa6:	f020 0107 	bic.w	r1, r0, #7
    1faa:	468d      	mov	sp, r1
    1fac:	b501      	push	{r0, lr}
    MSS_UART_isr( &g_mss_uart0 );
    1fae:	f240 0098 	movw	r0, #152	; 0x98
    1fb2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1fb6:	f7ff ff17 	bl	1de8 <MSS_UART_isr>
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    1fba:	f24e 1300 	movw	r3, #57600	; 0xe100
    1fbe:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1fc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1fc6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC_ClearPendingIRQ( UART0_IRQn );
}
    1fca:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    1fce:	4685      	mov	sp, r0
    1fd0:	4770      	bx	lr
    1fd2:	bf00      	nop

00001fd4 <UART1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART1_IRQHandler( void )
#else
void UART1_IRQHandler( void )
#endif
{
    1fd4:	4668      	mov	r0, sp
    1fd6:	f020 0107 	bic.w	r1, r0, #7
    1fda:	468d      	mov	sp, r1
    1fdc:	b501      	push	{r0, lr}
    MSS_UART_isr( &g_mss_uart1 );
    1fde:	f240 0070 	movw	r0, #112	; 0x70
    1fe2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1fe6:	f7ff feff 	bl	1de8 <MSS_UART_isr>
    1fea:	f24e 1300 	movw	r3, #57600	; 0xe100
    1fee:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1ff2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1ff6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC_ClearPendingIRQ( UART1_IRQn );
}
    1ffa:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    1ffe:	4685      	mov	sp, r0
    2000:	4770      	bx	lr
    2002:	bf00      	nop

00002004 <MSS_UART_init>:
(
    mss_uart_instance_t* this_uart,
    uint32_t baud_rate,
    uint8_t line_config
)
{
    2004:	b570      	push	{r4, r5, r6, lr}
    2006:	4604      	mov	r4, r0
    2008:	460d      	mov	r5, r1
    200a:	4616      	mov	r6, r2
    uint32_t pclk_freq = 0U;
    uint32_t baud_value_l;

    /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
     * mss_uart_instance_t instances used to identify UART0 and UART1. */
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
    200c:	f240 0398 	movw	r3, #152	; 0x98
    2010:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2014:	4298      	cmp	r0, r3
    2016:	d006      	beq.n	2026 <MSS_UART_init+0x22>
    2018:	f240 0370 	movw	r3, #112	; 0x70
    201c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2020:	4298      	cmp	r0, r3
    2022:	d000      	beq.n	2026 <MSS_UART_init+0x22>
    2024:	be00      	bkpt	0x0000

    /* baud_rate should be greater than 0 */
    ASSERT( 0U < baud_rate );
    2026:	b905      	cbnz	r5, 202a <MSS_UART_init+0x26>
    2028:	be00      	bkpt	0x0000

    /* Force the value of the CMSIS global variables holding the various system
     * clock frequencies to be updated. */
    SystemCoreClockUpdate();
    202a:	f001 f97f 	bl	332c <SystemCoreClockUpdate>

    if ( this_uart == &g_mss_uart0 )
    202e:	f240 0398 	movw	r3, #152	; 0x98
    2032:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2036:	429c      	cmp	r4, r3
    2038:	d126      	bne.n	2088 <MSS_UART_init+0x84>
    {
        this_uart->hw_reg = UART0;
    203a:	f240 0398 	movw	r3, #152	; 0x98
    203e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2042:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2046:	601a      	str	r2, [r3, #0]
        this_uart->hw_reg_bit = UART0_BITBAND;
    2048:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    204c:	605a      	str	r2, [r3, #4]
        this_uart->irqn = UART0_IRQn;
    204e:	f04f 020a 	mov.w	r2, #10
    2052:	811a      	strh	r2, [r3, #8]

        pclk_freq = g_FrequencyPCLK0;
    2054:	f240 030c 	movw	r3, #12
    2058:	f2c2 0300 	movt	r3, #8192	; 0x2000
    205c:	6818      	ldr	r0, [r3, #0]

        /* reset UART0 */
        SYSREG->SOFT_RST_CR |= SYSREG_UART0_SOFTRESET_MASK;
    205e:	f242 0300 	movw	r3, #8192	; 0x2000
    2062:	f2ce 0304 	movt	r3, #57348	; 0xe004
    2066:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2068:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    206c:	631a      	str	r2, [r3, #48]	; 0x30
    206e:	f24e 1200 	movw	r2, #57600	; 0xe100
    2072:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2076:	f44f 6180 	mov.w	r1, #1024	; 0x400
    207a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
        /* Clear any previously pended UART0 interrupt */
        NVIC_ClearPendingIRQ( UART0_IRQn );
        /* Take UART0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_UART0_SOFTRESET_MASK;
    207e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2080:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    2084:	631a      	str	r2, [r3, #48]	; 0x30
    2086:	e025      	b.n	20d4 <MSS_UART_init+0xd0>
    }
    else
    {
        this_uart->hw_reg = UART1;
    2088:	f240 0300 	movw	r3, #0
    208c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2090:	6023      	str	r3, [r4, #0]
        this_uart->hw_reg_bit = UART1_BITBAND;
    2092:	f240 0300 	movw	r3, #0
    2096:	f2c4 2320 	movt	r3, #16928	; 0x4220
    209a:	6063      	str	r3, [r4, #4]
        this_uart->irqn = UART1_IRQn;
    209c:	f04f 030b 	mov.w	r3, #11
    20a0:	8123      	strh	r3, [r4, #8]

        pclk_freq = g_FrequencyPCLK1;
    20a2:	f240 0310 	movw	r3, #16
    20a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    20aa:	6818      	ldr	r0, [r3, #0]

        /* Reset UART1 */
        SYSREG->SOFT_RST_CR |= SYSREG_UART1_SOFTRESET_MASK;
    20ac:	f242 0300 	movw	r3, #8192	; 0x2000
    20b0:	f2ce 0304 	movt	r3, #57348	; 0xe004
    20b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    20b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    20ba:	631a      	str	r2, [r3, #48]	; 0x30
    20bc:	f24e 1200 	movw	r2, #57600	; 0xe100
    20c0:	f2ce 0200 	movt	r2, #57344	; 0xe000
    20c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    20c8:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
        /* Clear any previously pended UART1 interrupt */
        NVIC_ClearPendingIRQ( UART1_IRQn );
        /* Take UART1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_UART1_SOFTRESET_MASK;
    20cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    20ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    20d2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* disable interrupts */
    this_uart->hw_reg->IER = 0U;
    20d4:	6823      	ldr	r3, [r4, #0]
    20d6:	f04f 0200 	mov.w	r2, #0
    20da:	711a      	strb	r2, [r3, #4]
     * The baud value is computed using the following equation:
     *      baud_value_l = PCLK_Frequency / (baud_rate * 16)
     * The baud value is rounded up or down depending on what would be the remainder
     * of the divide by 16 operation.
     */
    if( 0U < baud_rate )
    20dc:	b915      	cbnz	r5, 20e4 <MSS_UART_init+0xe0>
    20de:	f04f 0501 	mov.w	r5, #1
    20e2:	e00f      	b.n	2104 <MSS_UART_init+0x100>
    {
        baud_value_l = (uint32_t)(pclk_freq / baud_rate);
    20e4:	fbb0 f5f5 	udiv	r5, r0, r5
        if( baud_value_l & 0x00000008U )
    20e8:	f015 0f08 	tst.w	r5, #8
        {
            /* remainder above 0.5 */
            baud_value_l = (baud_value_l >> 4U) + 1U;        
    20ec:	ea4f 1515 	mov.w	r5, r5, lsr #4
    20f0:	bf18      	it	ne
    20f2:	3501      	addne	r5, #1
            /* remainder below 0.5 */
            baud_value_l = (baud_value_l >> 4U);
        }
    
        /* Check if the baud rate is supported by the PCLK */
        ASSERT( baud_value_l <= UINT16_MAX);
    20f4:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
        if( baud_value_l <= (uint32_t)UINT16_MAX)
        {
            baud_value = (uint16_t)baud_value_l;
    20f8:	bf38      	it	cc
    20fa:	b2ad      	uxthcc	r5, r5
            /* remainder below 0.5 */
            baud_value_l = (baud_value_l >> 4U);
        }
    
        /* Check if the baud rate is supported by the PCLK */
        ASSERT( baud_value_l <= UINT16_MAX);
    20fc:	d302      	bcc.n	2104 <MSS_UART_init+0x100>
    20fe:	be00      	bkpt	0x0000
    2100:	f04f 0501 	mov.w	r5, #1
            baud_value = (uint16_t)baud_value_l;
        }
    }
    
    /* set divisor latch */
    this_uart->hw_reg_bit->LCR_DLAB = (uint32_t)1;
    2104:	6863      	ldr	r3, [r4, #4]
    2106:	f04f 0201 	mov.w	r2, #1
    210a:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

    /* msb of baud value */
    this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8);
    210e:	6823      	ldr	r3, [r4, #0]
    2110:	ea4f 2215 	mov.w	r2, r5, lsr #8
    2114:	711a      	strb	r2, [r3, #4]
    /* lsb of baud value */
    this_uart->hw_reg->DLR = (uint8_t)baud_value;
    2116:	6823      	ldr	r3, [r4, #0]
    2118:	b2ed      	uxtb	r5, r5
    211a:	701d      	strb	r5, [r3, #0]

    /* reset divisor latch */
    this_uart->hw_reg_bit->LCR_DLAB = (uint32_t)0;
    211c:	6862      	ldr	r2, [r4, #4]
    211e:	f04f 0300 	mov.w	r3, #0
    2122:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c

    /* set the line control register (bit length, stop bits, parity) */
    this_uart->hw_reg->LCR = line_config;
    2126:	6822      	ldr	r2, [r4, #0]
    2128:	7316      	strb	r6, [r2, #12]

    /* FIFO configuration */
    /* RX FIFO length = 1 byte, clear receiver FIFO, 
       clear transmitter FIFO, enable RXRDYN and TXRDYN pins. */
    this_uart->hw_reg->FCR = (uint8_t)MSS_UART_FIFO_SINGLE_BYTE | 
    212a:	6822      	ldr	r2, [r4, #0]
    212c:	f04f 010e 	mov.w	r1, #14
    2130:	7211      	strb	r1, [r2, #8]
                              FCR_CLEAR_RX_FIFO_MASK | FCR_CLEAR_TX_FIFO_MASK | 
                              FCR_ENABLE_TXRDY_RXRDY_MASK;
    /* disable loopback */
    this_uart->hw_reg_bit->MCR_LOOP = (uint32_t)0;
    2132:	6862      	ldr	r2, [r4, #4]
    2134:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210

    /* Instance setup */
    this_uart->tx_buff_size = TX_COMPLETE;
    2138:	6123      	str	r3, [r4, #16]
    this_uart->tx_buffer = (const uint8_t *)0;
    213a:	60e3      	str	r3, [r4, #12]
    this_uart->tx_idx = 0U;
    213c:	6163      	str	r3, [r4, #20]

    /* Default handlers for MSS UART interrupts */
    this_uart->rx_handler       = NULL_HANDLER;
    213e:	61e3      	str	r3, [r4, #28]
    this_uart->tx_handler       = default_tx_handler;
    2140:	f641 6259 	movw	r2, #7769	; 0x1e59
    2144:	f2c0 0200 	movt	r2, #0
    2148:	6222      	str	r2, [r4, #32]
    this_uart->linests_handler  = NULL_HANDLER;
    214a:	61a3      	str	r3, [r4, #24]
    this_uart->modemsts_handler = NULL_HANDLER;
    214c:	6263      	str	r3, [r4, #36]	; 0x24

    /* Initialize the sticky status */
    this_uart->status = 0U;
    214e:	72a3      	strb	r3, [r4, #10]
}
    2150:	bd70      	pop	{r4, r5, r6, pc}
    2152:	bf00      	nop

00002154 <recover_from_rx_overflow>:
 */
static void recover_from_rx_overflow
(
    mss_spi_instance_t * this_spi
)
{
    2154:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    uint32_t slave_select;
    
    /*
     * Read current SPI hardware block configuration.
     */
    control_reg = this_spi->hw_reg->CONTROL;
    2158:	6803      	ldr	r3, [r0, #0]
    215a:	f8d3 8000 	ldr.w	r8, [r3]
    clk_gen = this_spi->hw_reg->CLK_GEN;
    215e:	f8d3 c018 	ldr.w	ip, [r3, #24]
    frame_size = this_spi->hw_reg->TXRXDF_SIZE;
    2162:	685f      	ldr	r7, [r3, #4]
    control2 = this_spi->hw_reg->CONTROL2;
    2164:	6a9e      	ldr	r6, [r3, #40]	; 0x28
    packet_size = this_spi->hw_reg->PKTSIZE;
    2166:	6b1d      	ldr	r5, [r3, #48]	; 0x30
    cmd_size = this_spi->hw_reg->CMDSIZE;
    2168:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    slave_select = this_spi->hw_reg->SLAVE_SELECT;
    216a:	f8d3 a01c 	ldr.w	sl, [r3, #28]
     
    /*
     * Reset the SPI hardware block.
     */
    if(this_spi == &g_mss_spi0)
    216e:	f240 1344 	movw	r3, #324	; 0x144
    2172:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2176:	4298      	cmp	r0, r3
    2178:	d124      	bne.n	21c4 <recover_from_rx_overflow+0x70>
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI0_BASE);
    217a:	f240 1344 	movw	r3, #324	; 0x144
    217e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2182:	f241 0200 	movw	r2, #4096	; 0x1000
    2186:	f2c4 0200 	movt	r2, #16384	; 0x4000
    218a:	601a      	str	r2, [r3, #0]
        this_spi->irqn = SPI0_IRQn;
    218c:	f04f 010c 	mov.w	r1, #12
    2190:	8099      	strh	r1, [r3, #4]

        /* reset SPI0 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI0_SOFTRESET_MASK;
    2192:	f242 0300 	movw	r3, #8192	; 0x2000
    2196:	f2ce 0304 	movt	r3, #57348	; 0xe004
    219a:	6b19      	ldr	r1, [r3, #48]	; 0x30
    219c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
    21a0:	6319      	str	r1, [r3, #48]	; 0x30
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    21a2:	f24e 1100 	movw	r1, #57600	; 0xe100
    21a6:	f2ce 0100 	movt	r1, #57344	; 0xe000
    21aa:	f44f 5980 	mov.w	r9, #4096	; 0x1000
    21ae:	f8c1 9180 	str.w	r9, [r1, #384]	; 0x180
        /* Clear any previously pended SPI0 interrupt */
        NVIC_ClearPendingIRQ(SPI0_IRQn);
        /* Take SPI0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI0_SOFTRESET_MASK;
    21b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
    21b4:	f421 7100 	bic.w	r1, r1, #512	; 0x200
    21b8:	6319      	str	r1, [r3, #48]	; 0x30

        this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
    21ba:	6813      	ldr	r3, [r2, #0]
    21bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    21c0:	6013      	str	r3, [r2, #0]
    21c2:	e01f      	b.n	2204 <recover_from_rx_overflow+0xb0>
    }
    else
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI1_BASE);
    21c4:	f241 0200 	movw	r2, #4096	; 0x1000
    21c8:	f2c4 0201 	movt	r2, #16385	; 0x4001
    21cc:	6002      	str	r2, [r0, #0]
        this_spi->irqn = SPI1_IRQn;
    21ce:	f04f 030d 	mov.w	r3, #13
    21d2:	8083      	strh	r3, [r0, #4]
        
        /* reset SPI1 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI1_SOFTRESET_MASK;
    21d4:	f242 0300 	movw	r3, #8192	; 0x2000
    21d8:	f2ce 0304 	movt	r3, #57348	; 0xe004
    21dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
    21de:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
    21e2:	6319      	str	r1, [r3, #48]	; 0x30
    21e4:	f24e 1100 	movw	r1, #57600	; 0xe100
    21e8:	f2ce 0100 	movt	r1, #57344	; 0xe000
    21ec:	f44f 5900 	mov.w	r9, #8192	; 0x2000
    21f0:	f8c1 9180 	str.w	r9, [r1, #384]	; 0x180
        /* Clear any previously pended SPI1 interrupt */
        NVIC_ClearPendingIRQ(SPI1_IRQn);
        /* Take SPI1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI1_SOFTRESET_MASK;
    21f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
    21f6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
    21fa:	6319      	str	r1, [r3, #48]	; 0x30
        
        this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
    21fc:	6813      	ldr	r3, [r2, #0]
    21fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    2202:	6013      	str	r3, [r2, #0]
    }
    
    /*
     * Restore SPI hardware block configuration.
     */
    control_reg &= ~(uint32_t)CTRL_ENABLE_MASK;
    2204:	f028 0201 	bic.w	r2, r8, #1
    this_spi->hw_reg->CONTROL = control_reg;
    2208:	6803      	ldr	r3, [r0, #0]
    220a:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CLK_GEN = clk_gen;
    220c:	6803      	ldr	r3, [r0, #0]
    220e:	f8c3 c018 	str.w	ip, [r3, #24]
    this_spi->hw_reg->TXRXDF_SIZE = frame_size;
    2212:	6803      	ldr	r3, [r0, #0]
    2214:	605f      	str	r7, [r3, #4]
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
    2216:	6803      	ldr	r3, [r0, #0]
    2218:	681a      	ldr	r2, [r3, #0]
    221a:	f042 0201 	orr.w	r2, r2, #1
    221e:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CONTROL2 = control2;
    2220:	6803      	ldr	r3, [r0, #0]
    2222:	629e      	str	r6, [r3, #40]	; 0x28
    this_spi->hw_reg->PKTSIZE = packet_size;
    2224:	6803      	ldr	r3, [r0, #0]
    2226:	631d      	str	r5, [r3, #48]	; 0x30
    this_spi->hw_reg->CMDSIZE = cmd_size;
    2228:	6803      	ldr	r3, [r0, #0]
    222a:	635c      	str	r4, [r3, #52]	; 0x34
    this_spi->hw_reg->SLAVE_SELECT = slave_select;
    222c:	6803      	ldr	r3, [r0, #0]
    222e:	f8c3 a01c 	str.w	sl, [r3, #28]
}
    2232:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    2236:	4770      	bx	lr

00002238 <MSS_SPI_configure_master_mode>:
    mss_spi_slave_t         slave,
    mss_spi_protocol_mode_t protocol_mode,
    mss_spi_pclk_div_t      clk_rate,
    uint8_t                 frame_bit_length
)
{
    2238:	b4f0      	push	{r4, r5, r6, r7}
    223a:	f89d 5010 	ldrb.w	r5, [sp, #16]
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
    223e:	f240 1c44 	movw	ip, #324	; 0x144
    2242:	f2c2 0c00 	movt	ip, #8192	; 0x2000
    2246:	4560      	cmp	r0, ip
    2248:	d006      	beq.n	2258 <MSS_SPI_configure_master_mode+0x20>
    224a:	f240 0cc0 	movw	ip, #192	; 0xc0
    224e:	f2c2 0c00 	movt	ip, #8192	; 0x2000
    2252:	4560      	cmp	r0, ip
    2254:	d000      	beq.n	2258 <MSS_SPI_configure_master_mode+0x20>
    2256:	be00      	bkpt	0x0000
    ASSERT(slave < MSS_SPI_MAX_NB_OF_SLAVES);
    2258:	2907      	cmp	r1, #7
    225a:	d900      	bls.n	225e <MSS_SPI_configure_master_mode+0x26>
    225c:	be00      	bkpt	0x0000
    ASSERT(frame_bit_length <= MAX_FRAME_LENGTH);
    225e:	2d20      	cmp	r5, #32
    2260:	d900      	bls.n	2264 <MSS_SPI_configure_master_mode+0x2c>
    2262:	be00      	bkpt	0x0000
    
    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
    2264:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    2268:	fa0f f68c 	sxth.w	r6, ip
    226c:	ea4f 1656 	mov.w	r6, r6, lsr #5
    2270:	f00c 0c1f 	and.w	ip, ip, #31
    2274:	f04f 0701 	mov.w	r7, #1
    2278:	fa07 f70c 	lsl.w	r7, r7, ip
    227c:	f24e 1400 	movw	r4, #57600	; 0xe100
    2280:	f2ce 0400 	movt	r4, #57344	; 0xe000
    2284:	f106 0620 	add.w	r6, r6, #32
    2288:	f844 7026 	str.w	r7, [r4, r6, lsl #2]

    /* Reset slave transfer mode to unknown to wipe slate clean */
    this_spi->slave_xfer_mode = MSS_SPI_SLAVE_XFER_NONE;
    228c:	f04f 0c00 	mov.w	ip, #0
    2290:	f880 c080 	strb.w	ip, [r0, #128]	; 0x80

    /* Set the mode. */
    this_spi->hw_reg->CONTROL &= ~(uint32_t)CTRL_ENABLE_MASK;
    2294:	6804      	ldr	r4, [r0, #0]
    2296:	6826      	ldr	r6, [r4, #0]
    2298:	f026 0601 	bic.w	r6, r6, #1
    229c:	6026      	str	r6, [r4, #0]
    this_spi->hw_reg->CONTROL |= CTRL_MASTER_MASK;
    229e:	6804      	ldr	r4, [r0, #0]
    22a0:	6826      	ldr	r6, [r4, #0]
    22a2:	f046 0602 	orr.w	r6, r6, #2
    22a6:	6026      	str	r6, [r4, #0]
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
    22a8:	6804      	ldr	r4, [r0, #0]
    22aa:	6826      	ldr	r6, [r4, #0]
    22ac:	f046 0601 	orr.w	r6, r6, #1
    22b0:	6026      	str	r6, [r4, #0]
    /*
     * Keep track of the required register configuration for this slave. These
     * values will be used by the MSS_SPI_set_slave_select() function to configure
     * the master to match the slave being selected.
     */
    if(slave < MSS_SPI_MAX_NB_OF_SLAVES)     
    22b2:	2907      	cmp	r1, #7
    22b4:	d82d      	bhi.n	2312 <MSS_SPI_configure_master_mode+0xda>
         *
         * We only do it for Motorola modes and if you need the slave selected
         * deselected between frames in modes 0 or 2 then remove SPS_MASK from
         * below.
         */
        if((MSS_SPI_MODE0 == protocol_mode) || (MSS_SPI_MODE1 == protocol_mode) ||
    22b6:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
    22ba:	bf14      	ite	ne
    22bc:	2400      	movne	r4, #0
    22be:	2401      	moveq	r4, #1
    22c0:	4562      	cmp	r2, ip
    22c2:	bf08      	it	eq
    22c4:	f044 0401 	orreq.w	r4, r4, #1
    22c8:	b954      	cbnz	r4, 22e0 <MSS_SPI_configure_master_mode+0xa8>
    22ca:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
    22ce:	bf14      	ite	ne
    22d0:	2400      	movne	r4, #0
    22d2:	2401      	moveq	r4, #1
    22d4:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
    22d8:	bf08      	it	eq
    22da:	f044 0401 	orreq.w	r4, r4, #1
    22de:	b14c      	cbz	r4, 22f4 <MSS_SPI_configure_master_mode+0xbc>
           (MSS_SPI_MODE2 == protocol_mode) || (MSS_SPI_MODE3 == protocol_mode))
        {
            this_spi->slaves_cfg[slave].ctrl_reg = MASTER_MODE_MASK | SPS_MASK |
    22e0:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    22e4:	f240 1c02 	movw	ip, #258	; 0x102
    22e8:	f2c2 4c00 	movt	ip, #9216	; 0x2400
    22ec:	ea42 020c 	orr.w	r2, r2, ip
    22f0:	6362      	str	r2, [r4, #52]	; 0x34
         *
         * We only do it for Motorola modes and if you need the slave selected
         * deselected between frames in modes 0 or 2 then remove SPS_MASK from
         * below.
         */
        if((MSS_SPI_MODE0 == protocol_mode) || (MSS_SPI_MODE1 == protocol_mode) ||
    22f2:	e008      	b.n	2306 <MSS_SPI_configure_master_mode+0xce>
                                                   (uint32_t)protocol_mode | 
                                                   ((uint32_t)1 << TXRXDFCOUNT_SHIFT);
        }
        else
        {
            this_spi->slaves_cfg[slave].ctrl_reg = MASTER_MODE_MASK |
    22f4:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    22f8:	f240 1c02 	movw	ip, #258	; 0x102
    22fc:	f2c2 0c00 	movt	ip, #8192	; 0x2000
    2300:	ea42 020c 	orr.w	r2, r2, ip
    2304:	6362      	str	r2, [r4, #52]	; 0x34
                                                   BIGFIFO_MASK |
                                                   (uint32_t)protocol_mode | 
                                                   ((uint32_t)1 << TXRXDFCOUNT_SHIFT);
        }
        
        this_spi->slaves_cfg[slave].txrxdf_size_reg = frame_bit_length;
    2306:	f101 0106 	add.w	r1, r1, #6
    230a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    230e:	720d      	strb	r5, [r1, #8]
        this_spi->slaves_cfg[slave].clk_gen = (uint8_t)clk_rate;
    2310:	724b      	strb	r3, [r1, #9]
    }
    /* Reenable interrupts */
    NVIC_EnableIRQ( this_spi->irqn );
    2312:	8883      	ldrh	r3, [r0, #4]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    2314:	b21a      	sxth	r2, r3
    2316:	ea4f 1252 	mov.w	r2, r2, lsr #5
    231a:	f003 031f 	and.w	r3, r3, #31
    231e:	f04f 0101 	mov.w	r1, #1
    2322:	fa01 f103 	lsl.w	r1, r1, r3
    2326:	f24e 1300 	movw	r3, #57600	; 0xe100
    232a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    232e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    2332:	bcf0      	pop	{r4, r5, r6, r7}
    2334:	4770      	bx	lr
    2336:	bf00      	nop

00002338 <MSS_SPI_set_slave_select>:
void MSS_SPI_set_slave_select
(
    mss_spi_instance_t * this_spi,
    mss_spi_slave_t slave
)
{
    2338:	b538      	push	{r3, r4, r5, lr}
    233a:	4604      	mov	r4, r0
    uint32_t rx_overflow;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
    233c:	f240 1344 	movw	r3, #324	; 0x144
    2340:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2344:	4298      	cmp	r0, r3
    2346:	d006      	beq.n	2356 <MSS_SPI_set_slave_select+0x1e>
    2348:	f240 03c0 	movw	r3, #192	; 0xc0
    234c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2350:	4298      	cmp	r0, r3
    2352:	d000      	beq.n	2356 <MSS_SPI_set_slave_select+0x1e>
    2354:	be00      	bkpt	0x0000
    
    /* This function is only intended to be used with an SPI master. */
    ASSERT((this_spi->hw_reg->CONTROL & CTRL_MASTER_MASK) == CTRL_MASTER_MASK);
    2356:	6822      	ldr	r2, [r4, #0]
    2358:	6813      	ldr	r3, [r2, #0]
    235a:	f013 0f02 	tst.w	r3, #2
    235e:	d100      	bne.n	2362 <MSS_SPI_set_slave_select+0x2a>
    2360:	be00      	bkpt	0x0000
    
    ASSERT(this_spi->slaves_cfg[slave].ctrl_reg != NOT_CONFIGURED);
    2362:	460d      	mov	r5, r1
    2364:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
    2368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    236a:	f1b3 3fff 	cmp.w	r3, #4294967295
    236e:	d100      	bne.n	2372 <MSS_SPI_set_slave_select+0x3a>
    2370:	be00      	bkpt	0x0000

    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
    2372:	88a3      	ldrh	r3, [r4, #4]
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    2374:	b219      	sxth	r1, r3
    2376:	ea4f 1151 	mov.w	r1, r1, lsr #5
    237a:	f003 031f 	and.w	r3, r3, #31
    237e:	f04f 0001 	mov.w	r0, #1
    2382:	fa00 f003 	lsl.w	r0, r0, r3
    2386:	f24e 1300 	movw	r3, #57600	; 0xe100
    238a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    238e:	f101 0120 	add.w	r1, r1, #32
    2392:	f843 0021 	str.w	r0, [r3, r1, lsl #2]

    /* Recover from receive overflow. */
    rx_overflow = this_spi->hw_reg->STATUS & RX_OVERFLOW_MASK;
    2396:	6893      	ldr	r3, [r2, #8]
    if(rx_overflow)
    2398:	f013 0f04 	tst.w	r3, #4
    239c:	d002      	beq.n	23a4 <MSS_SPI_set_slave_select+0x6c>
    {
         recover_from_rx_overflow(this_spi);
    239e:	4620      	mov	r0, r4
    23a0:	f7ff fed8 	bl	2154 <recover_from_rx_overflow>
    }
    
    /* Set the clock rate. */
    this_spi->hw_reg->CONTROL &= ~(uint32_t)CTRL_ENABLE_MASK;
    23a4:	6823      	ldr	r3, [r4, #0]
    23a6:	681a      	ldr	r2, [r3, #0]
    23a8:	f022 0201 	bic.w	r2, r2, #1
    23ac:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CONTROL = this_spi->slaves_cfg[slave].ctrl_reg;
    23ae:	6822      	ldr	r2, [r4, #0]
    23b0:	f105 0306 	add.w	r3, r5, #6
    23b4:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    23b8:	6859      	ldr	r1, [r3, #4]
    23ba:	6011      	str	r1, [r2, #0]
    this_spi->hw_reg->CLK_GEN = this_spi->slaves_cfg[slave].clk_gen;
    23bc:	6822      	ldr	r2, [r4, #0]
    23be:	7a59      	ldrb	r1, [r3, #9]
    23c0:	6191      	str	r1, [r2, #24]
    this_spi->hw_reg->TXRXDF_SIZE = this_spi->slaves_cfg[slave].txrxdf_size_reg;
    23c2:	6822      	ldr	r2, [r4, #0]
    23c4:	7a1b      	ldrb	r3, [r3, #8]
    23c6:	6053      	str	r3, [r2, #4]
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
    23c8:	6823      	ldr	r3, [r4, #0]
    23ca:	681a      	ldr	r2, [r3, #0]
    23cc:	f042 0201 	orr.w	r2, r2, #1
    23d0:	601a      	str	r2, [r3, #0]
    
    /* Set slave select */
    this_spi->hw_reg->SLAVE_SELECT |= ((uint32_t)1 << (uint32_t)slave);
    23d2:	6822      	ldr	r2, [r4, #0]
    23d4:	69d1      	ldr	r1, [r2, #28]
    23d6:	f04f 0301 	mov.w	r3, #1
    23da:	fa03 f505 	lsl.w	r5, r3, r5
    23de:	ea45 0501 	orr.w	r5, r5, r1
    23e2:	61d5      	str	r5, [r2, #28]
    /* Reenable interrupts */
    NVIC_EnableIRQ( this_spi->irqn );
    23e4:	88a2      	ldrh	r2, [r4, #4]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    23e6:	b211      	sxth	r1, r2
    23e8:	ea4f 1151 	mov.w	r1, r1, lsr #5
    23ec:	f002 021f 	and.w	r2, r2, #31
    23f0:	fa03 f202 	lsl.w	r2, r3, r2
    23f4:	f24e 1300 	movw	r3, #57600	; 0xe100
    23f8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23fc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
    2400:	bd38      	pop	{r3, r4, r5, pc}
    2402:	bf00      	nop

00002404 <MSS_SPI_clear_slave_select>:
void MSS_SPI_clear_slave_select
(
    mss_spi_instance_t * this_spi,
    mss_spi_slave_t slave
)
{
    2404:	b538      	push	{r3, r4, r5, lr}
    2406:	4604      	mov	r4, r0
    2408:	460d      	mov	r5, r1
    uint32_t rx_overflow;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
    240a:	f240 1344 	movw	r3, #324	; 0x144
    240e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2412:	4298      	cmp	r0, r3
    2414:	d006      	beq.n	2424 <MSS_SPI_clear_slave_select+0x20>
    2416:	f240 03c0 	movw	r3, #192	; 0xc0
    241a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    241e:	4298      	cmp	r0, r3
    2420:	d000      	beq.n	2424 <MSS_SPI_clear_slave_select+0x20>
    2422:	be00      	bkpt	0x0000
    
    /* This function is only intended to be used with an SPI master. */
    ASSERT((this_spi->hw_reg->CONTROL & CTRL_MASTER_MASK) == CTRL_MASTER_MASK);
    2424:	6822      	ldr	r2, [r4, #0]
    2426:	6813      	ldr	r3, [r2, #0]
    2428:	f013 0f02 	tst.w	r3, #2
    242c:	d100      	bne.n	2430 <MSS_SPI_clear_slave_select+0x2c>
    242e:	be00      	bkpt	0x0000

    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
    2430:	88a3      	ldrh	r3, [r4, #4]
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    2432:	b219      	sxth	r1, r3
    2434:	ea4f 1151 	mov.w	r1, r1, lsr #5
    2438:	f003 031f 	and.w	r3, r3, #31
    243c:	f04f 0001 	mov.w	r0, #1
    2440:	fa00 f003 	lsl.w	r0, r0, r3
    2444:	f24e 1300 	movw	r3, #57600	; 0xe100
    2448:	f2ce 0300 	movt	r3, #57344	; 0xe000
    244c:	f101 0120 	add.w	r1, r1, #32
    2450:	f843 0021 	str.w	r0, [r3, r1, lsl #2]

    /* Recover from receive overflow. */
    rx_overflow = this_spi->hw_reg->STATUS & RX_OVERFLOW_MASK;
    2454:	6893      	ldr	r3, [r2, #8]
    if(rx_overflow)
    2456:	f013 0f04 	tst.w	r3, #4
    245a:	d002      	beq.n	2462 <MSS_SPI_clear_slave_select+0x5e>
    {
         recover_from_rx_overflow(this_spi);
    245c:	4620      	mov	r0, r4
    245e:	f7ff fe79 	bl	2154 <recover_from_rx_overflow>
    }
    
    this_spi->hw_reg->SLAVE_SELECT &= ~((uint32_t)1 << (uint32_t)slave);
    2462:	6822      	ldr	r2, [r4, #0]
    2464:	69d1      	ldr	r1, [r2, #28]
    2466:	f04f 0301 	mov.w	r3, #1
    246a:	fa03 f505 	lsl.w	r5, r3, r5
    246e:	ea21 0505 	bic.w	r5, r1, r5
    2472:	61d5      	str	r5, [r2, #28]
    /* Reenable interrupts */
    NVIC_EnableIRQ( this_spi->irqn );
    2474:	88a2      	ldrh	r2, [r4, #4]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    2476:	b211      	sxth	r1, r2
    2478:	ea4f 1151 	mov.w	r1, r1, lsr #5
    247c:	f002 021f 	and.w	r2, r2, #31
    2480:	fa03 f202 	lsl.w	r2, r3, r2
    2484:	f24e 1300 	movw	r3, #57600	; 0xe100
    2488:	f2ce 0300 	movt	r3, #57344	; 0xe000
    248c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
    2490:	bd38      	pop	{r3, r4, r5, pc}
    2492:	bf00      	nop

00002494 <MSS_SPI_transfer_frame>:
uint32_t MSS_SPI_transfer_frame
(
    mss_spi_instance_t * this_spi,
    uint32_t tx_bits
)
{
    2494:	b410      	push	{r4}
    2496:	b083      	sub	sp, #12
    volatile uint32_t dummy;
    uint32_t rx_fifo_empty;
    uint32_t rx_ready;
    uint32_t tx_done;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
    2498:	f240 1344 	movw	r3, #324	; 0x144
    249c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24a0:	4298      	cmp	r0, r3
    24a2:	d006      	beq.n	24b2 <MSS_SPI_transfer_frame+0x1e>
    24a4:	f240 03c0 	movw	r3, #192	; 0xc0
    24a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24ac:	4298      	cmp	r0, r3
    24ae:	d000      	beq.n	24b2 <MSS_SPI_transfer_frame+0x1e>
    24b0:	be00      	bkpt	0x0000
    
    /* This function is only intended to be used with an SPI master. */
    ASSERT((this_spi->hw_reg->CONTROL & CTRL_MASTER_MASK) == CTRL_MASTER_MASK);
    24b2:	6803      	ldr	r3, [r0, #0]
    24b4:	681a      	ldr	r2, [r3, #0]
    24b6:	f012 0f02 	tst.w	r2, #2
    24ba:	d100      	bne.n	24be <MSS_SPI_transfer_frame+0x2a>
    24bc:	be00      	bkpt	0x0000
    
    /* Ensure single frame transfer selected so interrupts work correctly */
    this_spi->hw_reg->CONTROL = (this_spi->hw_reg->CONTROL & ~TXRXDFCOUNT_MASK)
    24be:	681c      	ldr	r4, [r3, #0]
    24c0:	f240 02ff 	movw	r2, #255	; 0xff
    24c4:	f6cf 7200 	movt	r2, #65280	; 0xff00
    24c8:	ea04 0202 	and.w	r2, r4, r2
    24cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    24d0:	601a      	str	r2, [r3, #0]
                                | ((uint32_t)1u << TXRXDFCOUNT_SHIFT);

    /* Flush the Tx and Rx FIFOs. Please note this does not have any effect on A2F200. */
    this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
    24d2:	6803      	ldr	r3, [r0, #0]
    24d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    24d6:	f042 020c 	orr.w	r2, r2, #12
    24da:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Flush Rx FIFO in case we are executing on A2F200. */
    rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
    24dc:	6803      	ldr	r3, [r0, #0]
    24de:	689a      	ldr	r2, [r3, #8]
    while(0u == rx_fifo_empty)
    24e0:	f012 0f40 	tst.w	r2, #64	; 0x40
    24e4:	d107      	bne.n	24f6 <MSS_SPI_transfer_frame+0x62>
    {
        dummy = this_spi->hw_reg->RX_DATA;
    24e6:	691a      	ldr	r2, [r3, #16]
    24e8:	9201      	str	r2, [sp, #4]
        dummy = dummy;  /* Prevent Lint warning. */
    24ea:	9a01      	ldr	r2, [sp, #4]
    24ec:	9201      	str	r2, [sp, #4]
        rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
    24ee:	689a      	ldr	r2, [r3, #8]
    /* Flush the Tx and Rx FIFOs. Please note this does not have any effect on A2F200. */
    this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
    
    /* Flush Rx FIFO in case we are executing on A2F200. */
    rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
    while(0u == rx_fifo_empty)
    24f0:	f012 0f40 	tst.w	r2, #64	; 0x40
    24f4:	d0f7      	beq.n	24e6 <MSS_SPI_transfer_frame+0x52>
        dummy = dummy;  /* Prevent Lint warning. */
        rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
    }
    
    /* Send frame. */
    this_spi->hw_reg->TX_DATA = tx_bits;
    24f6:	6159      	str	r1, [r3, #20]
    
    /* Wait for frame Tx to complete. */
    tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
    24f8:	6803      	ldr	r3, [r0, #0]
    24fa:	689a      	ldr	r2, [r3, #8]
    while(0u == tx_done)
    24fc:	f012 0f01 	tst.w	r2, #1
    2500:	d103      	bne.n	250a <MSS_SPI_transfer_frame+0x76>
    {
        tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
    2502:	689a      	ldr	r2, [r3, #8]
    /* Send frame. */
    this_spi->hw_reg->TX_DATA = tx_bits;
    
    /* Wait for frame Tx to complete. */
    tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
    while(0u == tx_done)
    2504:	f012 0f01 	tst.w	r2, #1
    2508:	d0fb      	beq.n	2502 <MSS_SPI_transfer_frame+0x6e>
        tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
    }
    
    /* Read received frame. */
    /* Wait for Rx complete. */
    rx_ready = this_spi->hw_reg->STATUS & RX_DATA_READY_MASK;
    250a:	689a      	ldr	r2, [r3, #8]
    while(0u == rx_ready)
    250c:	f012 0f02 	tst.w	r2, #2
    2510:	d103      	bne.n	251a <MSS_SPI_transfer_frame+0x86>
    {
        rx_ready = this_spi->hw_reg->STATUS & RX_DATA_READY_MASK;
    2512:	689a      	ldr	r2, [r3, #8]
    }
    
    /* Read received frame. */
    /* Wait for Rx complete. */
    rx_ready = this_spi->hw_reg->STATUS & RX_DATA_READY_MASK;
    while(0u == rx_ready)
    2514:	f012 0f02 	tst.w	r2, #2
    2518:	d0fb      	beq.n	2512 <MSS_SPI_transfer_frame+0x7e>
    {
        rx_ready = this_spi->hw_reg->STATUS & RX_DATA_READY_MASK;
    }
    /* Return Rx data. */
    return( this_spi->hw_reg->RX_DATA );
    251a:	6918      	ldr	r0, [r3, #16]
}
    251c:	b003      	add	sp, #12
    251e:	bc10      	pop	{r4}
    2520:	4770      	bx	lr
    2522:	bf00      	nop

00002524 <fill_slave_tx_fifo>:
 */
static void fill_slave_tx_fifo
(
    mss_spi_instance_t * this_spi
)
{
    2524:	b410      	push	{r4}
    uint32_t guard = 0u;

    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
    2526:	6802      	ldr	r2, [r0, #0]
    2528:	6893      	ldr	r3, [r2, #8]
    252a:	f413 7f80 	tst.w	r3, #256	; 0x100
    252e:	d113      	bne.n	2558 <fill_slave_tx_fifo+0x34>
          (this_spi->slave_tx_idx < this_spi->slave_tx_size))
    2530:	6903      	ldr	r3, [r0, #16]
    2532:	68c1      	ldr	r1, [r0, #12]
    2534:	428b      	cmp	r3, r1
    2536:	d213      	bcs.n	2560 <fill_slave_tx_fifo+0x3c>
    {
        /* Sending from primary slave transmit buffer */
        this_spi->hw_reg->TX_DATA = this_spi->slave_tx_buffer[this_spi->slave_tx_idx];
    2538:	6881      	ldr	r1, [r0, #8]
    253a:	5ccb      	ldrb	r3, [r1, r3]
    253c:	6153      	str	r3, [r2, #20]
        ++this_spi->slave_tx_idx;
    253e:	6903      	ldr	r3, [r0, #16]
    2540:	f103 0301 	add.w	r3, r3, #1
    2544:	6103      	str	r3, [r0, #16]
    mss_spi_instance_t * this_spi
)
{
    uint32_t guard = 0u;

    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
    2546:	6802      	ldr	r2, [r0, #0]
    2548:	6891      	ldr	r1, [r2, #8]
    254a:	f411 7f80 	tst.w	r1, #256	; 0x100
    254e:	d103      	bne.n	2558 <fill_slave_tx_fifo+0x34>
          (this_spi->slave_tx_idx < this_spi->slave_tx_size))
    2550:	68c1      	ldr	r1, [r0, #12]
    2552:	4299      	cmp	r1, r3
    2554:	d8f0      	bhi.n	2538 <fill_slave_tx_fifo+0x14>
    2556:	e003      	b.n	2560 <fill_slave_tx_fifo+0x3c>
        /* Sending from primary slave transmit buffer */
        this_spi->hw_reg->TX_DATA = this_spi->slave_tx_buffer[this_spi->slave_tx_idx];
        ++this_spi->slave_tx_idx;
    }

    if(this_spi->slave_tx_idx >= this_spi->slave_tx_size)
    2558:	6902      	ldr	r2, [r0, #16]
    255a:	68c3      	ldr	r3, [r0, #12]
    255c:	429a      	cmp	r2, r3
    255e:	d317      	bcc.n	2590 <fill_slave_tx_fifo+0x6c>
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
    2560:	6802      	ldr	r2, [r0, #0]
    2562:	6893      	ldr	r3, [r2, #8]
    2564:	f413 7f80 	tst.w	r3, #256	; 0x100
    2568:	d112      	bne.n	2590 <fill_slave_tx_fifo+0x6c>
              (this_spi->resp_buff_tx_idx < this_spi->resp_buff_size))
    256a:	69c3      	ldr	r3, [r0, #28]
    256c:	6981      	ldr	r1, [r0, #24]
    256e:	428b      	cmp	r3, r1
    2570:	d20e      	bcs.n	2590 <fill_slave_tx_fifo+0x6c>
        {
            /* Sending from command response buffer */
            this_spi->hw_reg->TX_DATA = this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx];
    2572:	6941      	ldr	r1, [r0, #20]
    2574:	5ccb      	ldrb	r3, [r1, r3]
    2576:	6153      	str	r3, [r2, #20]
            ++this_spi->resp_buff_tx_idx;
    2578:	69c3      	ldr	r3, [r0, #28]
    257a:	f103 0301 	add.w	r3, r3, #1
    257e:	61c3      	str	r3, [r0, #28]
        ++this_spi->slave_tx_idx;
    }

    if(this_spi->slave_tx_idx >= this_spi->slave_tx_size)
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
    2580:	6802      	ldr	r2, [r0, #0]
    2582:	6891      	ldr	r1, [r2, #8]
    2584:	f411 7f80 	tst.w	r1, #256	; 0x100
    2588:	d102      	bne.n	2590 <fill_slave_tx_fifo+0x6c>
              (this_spi->resp_buff_tx_idx < this_spi->resp_buff_size))
    258a:	6981      	ldr	r1, [r0, #24]
    258c:	4299      	cmp	r1, r3
    258e:	d8f0      	bhi.n	2572 <fill_slave_tx_fifo+0x4e>
            this_spi->hw_reg->TX_DATA = this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx];
            ++this_spi->resp_buff_tx_idx;
        }
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
    2590:	6a43      	ldr	r3, [r0, #36]	; 0x24
    2592:	b1cb      	cbz	r3, 25c8 <fill_slave_tx_fifo+0xa4>
    2594:	6902      	ldr	r2, [r0, #16]
    2596:	68c3      	ldr	r3, [r0, #12]
    2598:	429a      	cmp	r2, r3
    259a:	d315      	bcc.n	25c8 <fill_slave_tx_fifo+0xa4>
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
    259c:	69c2      	ldr	r2, [r0, #28]
    259e:	6983      	ldr	r3, [r0, #24]
    25a0:	429a      	cmp	r2, r3
    25a2:	d311      	bcc.n	25c8 <fill_slave_tx_fifo+0xa4>
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
    25a4:	6803      	ldr	r3, [r0, #0]
    25a6:	689a      	ldr	r2, [r3, #8]
    25a8:	f412 7f80 	tst.w	r2, #256	; 0x100
    25ac:	d10c      	bne.n	25c8 <fill_slave_tx_fifo+0xa4>
    25ae:	f04f 0200 	mov.w	r2, #0
              (guard < BIG_FIFO_SIZE))
        {
            /* Nothing left so pad with 0s for consistency */
            this_spi->hw_reg->TX_DATA = 0x00u;
    25b2:	4614      	mov	r4, r2
    25b4:	615c      	str	r4, [r3, #20]
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
    25b6:	6803      	ldr	r3, [r0, #0]
    25b8:	6899      	ldr	r1, [r3, #8]
    25ba:	f411 7f80 	tst.w	r1, #256	; 0x100
    25be:	d103      	bne.n	25c8 <fill_slave_tx_fifo+0xa4>
             * We use the guard count to cover the unlikely event that we are
             * never seeing the TX FIFO full because the data is being pulled
             * out as fast as we can stuff it in. In this event we never spend
             * more than a full FIFOs worth of time spinning here.
             */
            guard++;
    25c0:	f102 0201 	add.w	r2, r2, #1
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
    25c4:	2a20      	cmp	r2, #32
    25c6:	d1f5      	bne.n	25b4 <fill_slave_tx_fifo+0x90>
             */
            guard++;
        }
    }

}
    25c8:	bc10      	pop	{r4}
    25ca:	4770      	bx	lr

000025cc <read_slave_rx_fifo>:
 */
static void read_slave_rx_fifo
(
    mss_spi_instance_t * this_spi
)
{
    25cc:	b510      	push	{r4, lr}
    25ce:	b082      	sub	sp, #8
    25d0:	4604      	mov	r4, r0
    volatile uint32_t rx_frame;
    
    if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
    25d2:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
    25d6:	2b02      	cmp	r3, #2
    25d8:	d10c      	bne.n	25f4 <read_slave_rx_fifo+0x28>
    25da:	e005      	b.n	25e8 <read_slave_rx_fifo+0x1c>
    {
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
        {
            /* Single frame handling mode. */
            rx_frame = this_spi->hw_reg->RX_DATA;
    25dc:	6913      	ldr	r3, [r2, #16]
    25de:	9301      	str	r3, [sp, #4]
            if(0u != this_spi->frame_rx_handler)
    25e0:	6f63      	ldr	r3, [r4, #116]	; 0x74
    25e2:	b113      	cbz	r3, 25ea <read_slave_rx_fifo+0x1e>
            {
                this_spi->frame_rx_handler( rx_frame );
    25e4:	9801      	ldr	r0, [sp, #4]
    25e6:	4798      	blx	r3
{
    volatile uint32_t rx_frame;
    
    if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
    {
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
    25e8:	6822      	ldr	r2, [r4, #0]
    25ea:	6893      	ldr	r3, [r2, #8]
    25ec:	f013 0f40 	tst.w	r3, #64	; 0x40
    25f0:	d0f4      	beq.n	25dc <read_slave_rx_fifo+0x10>
    25f2:	e023      	b.n	263c <read_slave_rx_fifo+0x70>
            {
                this_spi->frame_rx_handler( rx_frame );
            }
        }
    }
    else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
    25f4:	2b01      	cmp	r3, #1
        }
    }
    else
    {
        /* Should not happen... Just purge FIFO */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
    25f6:	6803      	ldr	r3, [r0, #0]
    25f8:	689a      	ldr	r2, [r3, #8]
            {
                this_spi->frame_rx_handler( rx_frame );
            }
        }
    }
    else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
    25fa:	d003      	beq.n	2604 <read_slave_rx_fifo+0x38>
        }
    }
    else
    {
        /* Should not happen... Just purge FIFO */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
    25fc:	f012 0f40 	tst.w	r2, #64	; 0x40
    2600:	d016      	beq.n	2630 <read_slave_rx_fifo+0x64>
    2602:	e01b      	b.n	263c <read_slave_rx_fifo+0x70>
        }
    }
    else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
    {
        /* Block handling mode. */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
    2604:	f012 0f40 	tst.w	r2, #64	; 0x40
    2608:	d118      	bne.n	263c <read_slave_rx_fifo+0x70>
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
    260a:	691b      	ldr	r3, [r3, #16]
    260c:	9301      	str	r3, [sp, #4]
            if(this_spi->slave_rx_idx < this_spi->slave_rx_size)
    260e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    2610:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2612:	4293      	cmp	r3, r2
            {
                this_spi->slave_rx_buffer[this_spi->slave_rx_idx] = (uint8_t)rx_frame;
    2614:	bf3e      	ittt	cc
    2616:	9901      	ldrcc	r1, [sp, #4]
    2618:	6aa2      	ldrcc	r2, [r4, #40]	; 0x28
    261a:	54d1      	strbcc	r1, [r2, r3]
            }

            ++this_spi->slave_rx_idx;
    261c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    261e:	f103 0301 	add.w	r3, r3, #1
    2622:	6323      	str	r3, [r4, #48]	; 0x30
        }
    }
    else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
    {
        /* Block handling mode. */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
    2624:	6823      	ldr	r3, [r4, #0]
    2626:	689a      	ldr	r2, [r3, #8]
    2628:	f012 0f40 	tst.w	r2, #64	; 0x40
    262c:	d0ed      	beq.n	260a <read_slave_rx_fifo+0x3e>
    262e:	e005      	b.n	263c <read_slave_rx_fifo+0x70>
    else
    {
        /* Should not happen... Just purge FIFO */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
    2630:	691a      	ldr	r2, [r3, #16]
    2632:	9201      	str	r2, [sp, #4]
        }
    }
    else
    {
        /* Should not happen... Just purge FIFO */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
    2634:	689a      	ldr	r2, [r3, #8]
    2636:	f012 0f40 	tst.w	r2, #64	; 0x40
    263a:	d0f9      	beq.n	2630 <read_slave_rx_fifo+0x64>
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
        }
    }
}
    263c:	b002      	add	sp, #8
    263e:	bd10      	pop	{r4, pc}

00002640 <mss_spi_isr>:
 */
static void mss_spi_isr
(
    mss_spi_instance_t * this_spi
)
{    
    2640:	b570      	push	{r4, r5, r6, lr}
    2642:	b082      	sub	sp, #8
    2644:	4604      	mov	r4, r0
    volatile uint32_t rx_frame;
    __I  uint32_t *this_mis = &this_spi->hw_reg->MIS;
    2646:	6805      	ldr	r5, [r0, #0]

    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
    2648:	f240 1344 	movw	r3, #324	; 0x144
    264c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2650:	4298      	cmp	r0, r3
    2652:	d006      	beq.n	2662 <mss_spi_isr+0x22>
    2654:	f240 03c0 	movw	r3, #192	; 0xc0
    2658:	f2c2 0300 	movt	r3, #8192	; 0x2000
    265c:	4298      	cmp	r0, r3
    265e:	d000      	beq.n	2662 <mss_spi_isr+0x22>
    2660:	be00      	bkpt	0x0000
  
    if(0u != (*this_mis & RXDONE_IRQ_MASK))
    2662:	6a2b      	ldr	r3, [r5, #32]
    2664:	f013 0f02 	tst.w	r3, #2
    2668:	d038      	beq.n	26dc <mss_spi_isr+0x9c>
    {
        if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
    266a:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
    266e:	2b02      	cmp	r3, #2
    2670:	d10c      	bne.n	268c <mss_spi_isr+0x4c>
    2672:	e005      	b.n	2680 <mss_spi_isr+0x40>
        {
            /* Single frame handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
    2674:	6913      	ldr	r3, [r2, #16]
    2676:	9301      	str	r3, [sp, #4]
                if(0u != this_spi->frame_rx_handler)
    2678:	6f63      	ldr	r3, [r4, #116]	; 0x74
    267a:	b113      	cbz	r3, 2682 <mss_spi_isr+0x42>
                {
                    this_spi->frame_rx_handler( rx_frame );
    267c:	9801      	ldr	r0, [sp, #4]
    267e:	4798      	blx	r3
    if(0u != (*this_mis & RXDONE_IRQ_MASK))
    {
        if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
        {
            /* Single frame handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
    2680:	6822      	ldr	r2, [r4, #0]
    2682:	6893      	ldr	r3, [r2, #8]
    2684:	f013 0f40 	tst.w	r3, #64	; 0x40
    2688:	d0f4      	beq.n	2674 <mss_spi_isr+0x34>
    268a:	e023      	b.n	26d4 <mss_spi_isr+0x94>
                {
                    this_spi->frame_rx_handler( rx_frame );
                }
            }
        }
        else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
    268c:	2b01      	cmp	r3, #1
            }
        }
        else
        {
            /* No slave handling in place so just purge FIFO */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
    268e:	68ab      	ldr	r3, [r5, #8]
                {
                    this_spi->frame_rx_handler( rx_frame );
                }
            }
        }
        else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
    2690:	d003      	beq.n	269a <mss_spi_isr+0x5a>
            }
        }
        else
        {
            /* No slave handling in place so just purge FIFO */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
    2692:	f013 0f40 	tst.w	r3, #64	; 0x40
    2696:	d017      	beq.n	26c8 <mss_spi_isr+0x88>
    2698:	e01c      	b.n	26d4 <mss_spi_isr+0x94>
            }
        }
        else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
        {
            /* Block handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
    269a:	f013 0f40 	tst.w	r3, #64	; 0x40
    269e:	d119      	bne.n	26d4 <mss_spi_isr+0x94>
    26a0:	462b      	mov	r3, r5
            {
                rx_frame = this_spi->hw_reg->RX_DATA;                /* Read from FIFO irrespective */
    26a2:	691b      	ldr	r3, [r3, #16]
    26a4:	9301      	str	r3, [sp, #4]
                if(this_spi->slave_rx_idx < this_spi->slave_rx_size) /* Write to array if required */
    26a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    26a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    26aa:	4293      	cmp	r3, r2
                {
                    this_spi->slave_rx_buffer[this_spi->slave_rx_idx] = (uint8_t)rx_frame;
    26ac:	bf3e      	ittt	cc
    26ae:	9901      	ldrcc	r1, [sp, #4]
    26b0:	6aa2      	ldrcc	r2, [r4, #40]	; 0x28
    26b2:	54d1      	strbcc	r1, [r2, r3]
                }

                ++this_spi->slave_rx_idx;            
    26b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    26b6:	f103 0301 	add.w	r3, r3, #1
    26ba:	6323      	str	r3, [r4, #48]	; 0x30
            }
        }
        else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
        {
            /* Block handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
    26bc:	6823      	ldr	r3, [r4, #0]
    26be:	689a      	ldr	r2, [r3, #8]
    26c0:	f012 0f40 	tst.w	r2, #64	; 0x40
    26c4:	d0ed      	beq.n	26a2 <mss_spi_isr+0x62>
    26c6:	e005      	b.n	26d4 <mss_spi_isr+0x94>
        else
        {
            /* No slave handling in place so just purge FIFO */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
    26c8:	692b      	ldr	r3, [r5, #16]
    26ca:	9301      	str	r3, [sp, #4]
            }
        }
        else
        {
            /* No slave handling in place so just purge FIFO */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
    26cc:	68ab      	ldr	r3, [r5, #8]
    26ce:	f013 0f40 	tst.w	r3, #64	; 0x40
    26d2:	d0f9      	beq.n	26c8 <mss_spi_isr+0x88>
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
            }
        }

        this_spi->hw_reg->INT_CLEAR = RXDONE_IRQ_MASK;
    26d4:	6823      	ldr	r3, [r4, #0]
    26d6:	f04f 0202 	mov.w	r2, #2
    26da:	60da      	str	r2, [r3, #12]
    }

   /* Handle transmit. */
    if(0u != (*this_mis & TXDONE_IRQ_MASK))
    26dc:	6a2b      	ldr	r3, [r5, #32]
    26de:	f013 0f01 	tst.w	r3, #1
    26e2:	d00e      	beq.n	2702 <mss_spi_isr+0xc2>
    {
        if( MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode )
    26e4:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
    26e8:	2b02      	cmp	r3, #2
    26ea:	d103      	bne.n	26f4 <mss_spi_isr+0xb4>
        {
           /* Reload slave tx frame into Tx data register. */
            this_spi->hw_reg->TX_DATA = this_spi->slave_tx_frame;
    26ec:	6823      	ldr	r3, [r4, #0]
    26ee:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    26f0:	615a      	str	r2, [r3, #20]
    26f2:	e002      	b.n	26fa <mss_spi_isr+0xba>
        }
        else /* Must be block mode so load FIFO to the max */
        {
            fill_slave_tx_fifo(this_spi);
    26f4:	4620      	mov	r0, r4
    26f6:	f7ff ff15 	bl	2524 <fill_slave_tx_fifo>
        }

        this_spi->hw_reg->INT_CLEAR = TXDONE_IRQ_MASK;
    26fa:	6823      	ldr	r3, [r4, #0]
    26fc:	f04f 0201 	mov.w	r2, #1
    2700:	60da      	str	r2, [r3, #12]
    }
    
    /* Handle command interrupt. */
    if(0u != (*this_mis & CMD_IRQ_MASK))
    2702:	6a2b      	ldr	r3, [r5, #32]
    2704:	f013 0f10 	tst.w	r3, #16
    2708:	d016      	beq.n	2738 <mss_spi_isr+0xf8>
    {
        read_slave_rx_fifo(this_spi);
    270a:	4620      	mov	r0, r4
    270c:	f7ff ff5e 	bl	25cc <read_slave_rx_fifo>
        
        /*
         * Call the command handler if one exists.
         */
        if(0u != this_spi->cmd_handler)
    2710:	6a23      	ldr	r3, [r4, #32]
    2712:	b12b      	cbz	r3, 2720 <mss_spi_isr+0xe0>
        {
            (*this_spi->cmd_handler)(this_spi->slave_rx_buffer, this_spi->slave_rx_idx);
    2714:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    2716:	6b21      	ldr	r1, [r4, #48]	; 0x30
    2718:	4798      	blx	r3
            fill_slave_tx_fifo(this_spi);
    271a:	4620      	mov	r0, r4
    271c:	f7ff ff02 	bl	2524 <fill_slave_tx_fifo>
        }
        /* Set cmd_done to indicate it is now safe to 0 fill TX FIFO */
        this_spi->cmd_done = 1u;
    2720:	f04f 0301 	mov.w	r3, #1
    2724:	6263      	str	r3, [r4, #36]	; 0x24
        /* Disable command interrupt until slave select becomes de-asserted to avoid retriggering. */
        this_spi->hw_reg->CONTROL2 &= ~(uint32_t)C2_ENABLE_CMD_IRQ_MASK;
    2726:	6823      	ldr	r3, [r4, #0]
    2728:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    272a:	f022 0210 	bic.w	r2, r2, #16
    272e:	629a      	str	r2, [r3, #40]	; 0x28
        this_spi->hw_reg->INT_CLEAR = CMD_IRQ_MASK;
    2730:	6823      	ldr	r3, [r4, #0]
    2732:	f04f 0210 	mov.w	r2, #16
    2736:	60da      	str	r2, [r3, #12]
    }

    if(0u != (*this_mis & RXOVFLOW_IRQ_MASK))
    2738:	6a2b      	ldr	r3, [r5, #32]
    273a:	f013 0f04 	tst.w	r3, #4
    273e:	d00b      	beq.n	2758 <mss_spi_isr+0x118>
    {
        /*
         * Receive overflow, not a lot we can do for this. Reset the receive
         *  FIFO, clear the interrupt and hope it doesn't happen again...
         */
        this_spi->hw_reg->COMMAND |= RX_FIFO_RESET_MASK;
    2740:	6823      	ldr	r3, [r4, #0]
    2742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2744:	f042 0204 	orr.w	r2, r2, #4
    2748:	62da      	str	r2, [r3, #44]	; 0x2c
        recover_from_rx_overflow(this_spi);
    274a:	4620      	mov	r0, r4
    274c:	f7ff fd02 	bl	2154 <recover_from_rx_overflow>
        this_spi->hw_reg->INT_CLEAR = RXOVFLOW_IRQ_MASK;
    2750:	6823      	ldr	r3, [r4, #0]
    2752:	f04f 0204 	mov.w	r2, #4
    2756:	60da      	str	r2, [r3, #12]
     * slave TX FIFO data setup (if there is one).
     * In block mode this will probably not be very successful as we will
     * be out of synch with the master but the reset on SSEND will hopefully
     * take care of that for the next transfer.
     */
    if(0u != (*this_mis & TXURUN_IRQ_MASK))
    2758:	6a2b      	ldr	r3, [r5, #32]
    275a:	f013 0f08 	tst.w	r3, #8
    275e:	d023      	beq.n	27a8 <mss_spi_isr+0x168>
    {
        this_spi->hw_reg->COMMAND |= TX_FIFO_RESET_MASK;
    2760:	6823      	ldr	r3, [r4, #0]
    2762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2764:	f042 0208 	orr.w	r2, r2, #8
    2768:	62da      	str	r2, [r3, #44]	; 0x2c
        if( MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode )
    276a:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
    276e:	2b02      	cmp	r3, #2
    2770:	d10e      	bne.n	2790 <mss_spi_isr+0x150>
        {
            this_spi->hw_reg->CONTROL = (this_spi->hw_reg->CONTROL & ~TXRXDFCOUNT_MASK)
    2772:	6822      	ldr	r2, [r4, #0]
    2774:	6811      	ldr	r1, [r2, #0]
    2776:	f240 03ff 	movw	r3, #255	; 0xff
    277a:	f6cf 7300 	movt	r3, #65280	; 0xff00
    277e:	ea01 0303 	and.w	r3, r1, r3
    2782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2786:	6013      	str	r3, [r2, #0]
                                        | ((uint32_t)1u << TXRXDFCOUNT_SHIFT);
           /* Reload slave tx frame into Tx data register. */
            this_spi->hw_reg->TX_DATA = this_spi->slave_tx_frame;
    2788:	6823      	ldr	r3, [r4, #0]
    278a:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    278c:	615a      	str	r2, [r3, #20]
    278e:	e007      	b.n	27a0 <mss_spi_isr+0x160>
        }
        else if( MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode )
    2790:	2b01      	cmp	r3, #1
    2792:	d105      	bne.n	27a0 <mss_spi_isr+0x160>
        {
            /* Block mode so reload FIFO to the max */
            this_spi->slave_tx_idx = 0u;
    2794:	f04f 0300 	mov.w	r3, #0
    2798:	6123      	str	r3, [r4, #16]
            fill_slave_tx_fifo(this_spi);
    279a:	4620      	mov	r0, r4
    279c:	f7ff fec2 	bl	2524 <fill_slave_tx_fifo>
        else
        {
            /* Not frame or block mode? Can't do anything here... */
        }

        this_spi->hw_reg->INT_CLEAR = TXURUN_IRQ_MASK;
    27a0:	6823      	ldr	r3, [r4, #0]
    27a2:	f04f 0208 	mov.w	r2, #8
    27a6:	60da      	str	r2, [r3, #12]
    /*
     * Handle slave select becoming de-asserted. Only enables if
     * we are operating in block mode, in frame mode we do everything
     * in the receive and transmit interrupt handlers.
     */
    if(0u != (*this_mis & SSEND_IRQ_MASK))
    27a8:	6a2b      	ldr	r3, [r5, #32]
    27aa:	f013 0f20 	tst.w	r3, #32
    27ae:	d029      	beq.n	2804 <mss_spi_isr+0x1c4>
    {
        uint32_t rx_size;
        
        read_slave_rx_fifo(this_spi);
    27b0:	4620      	mov	r0, r4
    27b2:	f7ff ff0b 	bl	25cc <read_slave_rx_fifo>
        rx_size = this_spi->slave_rx_idx;
    27b6:	6b26      	ldr	r6, [r4, #48]	; 0x30
        /*
         * Re-enable command interrupt if required and clear all the response
         * buffer state in readiness for next response. This must be done
         * before reloading the TX FIFO.
         */
        if(0u != this_spi->cmd_handler)
    27b8:	6a23      	ldr	r3, [r4, #32]
    27ba:	b173      	cbz	r3, 27da <mss_spi_isr+0x19a>
        {
            this_spi->cmd_done = 0u;
    27bc:	f04f 0300 	mov.w	r3, #0
    27c0:	6263      	str	r3, [r4, #36]	; 0x24
            this_spi->resp_tx_buffer = 0u;
    27c2:	6163      	str	r3, [r4, #20]
            this_spi->resp_buff_size = 0u;
    27c4:	61a3      	str	r3, [r4, #24]
            this_spi->resp_buff_tx_idx = 0u;
    27c6:	61e3      	str	r3, [r4, #28]
            this_spi->hw_reg->INT_CLEAR = CMD_IRQ_MASK;
    27c8:	6823      	ldr	r3, [r4, #0]
    27ca:	f04f 0210 	mov.w	r2, #16
    27ce:	60da      	str	r2, [r3, #12]
            this_spi->hw_reg->CONTROL2 |= C2_ENABLE_CMD_IRQ_MASK;
    27d0:	6823      	ldr	r3, [r4, #0]
    27d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    27d4:	f042 0210 	orr.w	r2, r2, #16
    27d8:	629a      	str	r2, [r3, #40]	; 0x28
        /* 
         * Reset the transmit index to 0 to restart transmit at the start of the
         * transmit buffer in the next transaction. This also requires flushing
         * the Tx FIFO and refilling it with the start of Tx data buffer.
         */
        this_spi->slave_tx_idx = 0u;
    27da:	f04f 0500 	mov.w	r5, #0
    27de:	6125      	str	r5, [r4, #16]
        this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
    27e0:	6823      	ldr	r3, [r4, #0]
    27e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    27e4:	f042 020c 	orr.w	r2, r2, #12
    27e8:	62da      	str	r2, [r3, #44]	; 0x2c
        fill_slave_tx_fifo(this_spi);
    27ea:	4620      	mov	r0, r4
    27ec:	f7ff fe9a 	bl	2524 <fill_slave_tx_fifo>
        
        /* Prepare to receive next packet. */
        this_spi->slave_rx_idx = 0u;
    27f0:	6325      	str	r5, [r4, #48]	; 0x30
        /*
         * Call the receive handler if one exists.
         */
        if(0u != this_spi->block_rx_handler)
    27f2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    27f4:	b113      	cbz	r3, 27fc <mss_spi_isr+0x1bc>
        {
            (*this_spi->block_rx_handler)(this_spi->slave_rx_buffer, rx_size);
    27f6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    27f8:	4631      	mov	r1, r6
    27fa:	4798      	blx	r3
        }
        
        this_spi->hw_reg->INT_CLEAR = SSEND_IRQ_MASK;
    27fc:	6823      	ldr	r3, [r4, #0]
    27fe:	f04f 0220 	mov.w	r2, #32
    2802:	60da      	str	r2, [r3, #12]
    }
}
    2804:	b002      	add	sp, #8
    2806:	bd70      	pop	{r4, r5, r6, pc}

00002808 <SPI0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void SPI0_IRQHandler(void)
#else
void SPI0_IRQHandler( void )
#endif
{
    2808:	4668      	mov	r0, sp
    280a:	f020 0107 	bic.w	r1, r0, #7
    280e:	468d      	mov	sp, r1
    2810:	b501      	push	{r0, lr}
    mss_spi_isr(&g_mss_spi0);
    2812:	f240 1044 	movw	r0, #324	; 0x144
    2816:	f2c2 0000 	movt	r0, #8192	; 0x2000
    281a:	f7ff ff11 	bl	2640 <mss_spi_isr>
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    281e:	f24e 1300 	movw	r3, #57600	; 0xe100
    2822:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2826:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    282a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC_ClearPendingIRQ(SPI0_IRQn);
}
    282e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    2832:	4685      	mov	sp, r0
    2834:	4770      	bx	lr
    2836:	bf00      	nop

00002838 <SPI1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void SPI1_IRQHandler(void)
#else
void SPI1_IRQHandler(void)
#endif
{
    2838:	4668      	mov	r0, sp
    283a:	f020 0107 	bic.w	r1, r0, #7
    283e:	468d      	mov	sp, r1
    2840:	b501      	push	{r0, lr}
    mss_spi_isr(&g_mss_spi1);
    2842:	f240 00c0 	movw	r0, #192	; 0xc0
    2846:	f2c2 0000 	movt	r0, #8192	; 0x2000
    284a:	f7ff fef9 	bl	2640 <mss_spi_isr>
    284e:	f24e 1300 	movw	r3, #57600	; 0xe100
    2852:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2856:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    285a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC_ClearPendingIRQ(SPI1_IRQn);
}
    285e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    2862:	4685      	mov	sp, r0
    2864:	4770      	bx	lr
    2866:	bf00      	nop

00002868 <MSS_SPI_init>:
 */
void MSS_SPI_init
(
    mss_spi_instance_t * this_spi
)
{
    2868:	b538      	push	{r3, r4, r5, lr}
    286a:	4604      	mov	r4, r0
    uint16_t slave;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
    286c:	f240 1344 	movw	r3, #324	; 0x144
    2870:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2874:	4298      	cmp	r0, r3
    2876:	d006      	beq.n	2886 <MSS_SPI_init+0x1e>
    2878:	f240 03c0 	movw	r3, #192	; 0xc0
    287c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2880:	4298      	cmp	r0, r3
    2882:	d000      	beq.n	2886 <MSS_SPI_init+0x1e>
    2884:	be00      	bkpt	0x0000
     * Initialize SPI driver instance data. Relies on the majority
     * of data requiring 0 for initial state so we just need to fill
     * with 0s and finish off with a small number of non zero values.
     */
    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
    2886:	88a3      	ldrh	r3, [r4, #4]
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    2888:	b21a      	sxth	r2, r3
    288a:	ea4f 1252 	mov.w	r2, r2, lsr #5
    288e:	f003 031f 	and.w	r3, r3, #31
    2892:	f04f 0501 	mov.w	r5, #1
    2896:	fa05 f103 	lsl.w	r1, r5, r3
    289a:	f24e 1300 	movw	r3, #57600	; 0xe100
    289e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    28a2:	f102 0220 	add.w	r2, r2, #32
    28a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    memset(this_spi, 0, sizeof(mss_spi_instance_t));
    28aa:	4620      	mov	r0, r4
    28ac:	f04f 0100 	mov.w	r1, #0
    28b0:	f04f 0284 	mov.w	r2, #132	; 0x84
    28b4:	f001 fd84 	bl	43c0 <memset>
    
    this_spi->cmd_done = 1u;
    28b8:	6265      	str	r5, [r4, #36]	; 0x24
    28ba:	f04f 0300 	mov.w	r3, #0

    for(slave = 0u; slave < (uint16_t)MSS_SPI_MAX_NB_OF_SLAVES; ++slave)
    {
        this_spi->slaves_cfg[slave].ctrl_reg = NOT_CONFIGURED;
    28be:	f04f 31ff 	mov.w	r1, #4294967295
    28c2:	eb04 0203 	add.w	r2, r4, r3
    28c6:	6351      	str	r1, [r2, #52]	; 0x34
    28c8:	f103 0308 	add.w	r3, r3, #8

    memset(this_spi, 0, sizeof(mss_spi_instance_t));
    
    this_spi->cmd_done = 1u;

    for(slave = 0u; slave < (uint16_t)MSS_SPI_MAX_NB_OF_SLAVES; ++slave)
    28cc:	2b40      	cmp	r3, #64	; 0x40
    28ce:	d1f8      	bne.n	28c2 <MSS_SPI_init+0x5a>
    {
        this_spi->slaves_cfg[slave].ctrl_reg = NOT_CONFIGURED;
    }

    if(this_spi == &g_mss_spi0)
    28d0:	f240 1344 	movw	r3, #324	; 0x144
    28d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28d8:	429c      	cmp	r4, r3
    28da:	d120      	bne.n	291e <MSS_SPI_init+0xb6>
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI0_BASE);
    28dc:	f240 1344 	movw	r3, #324	; 0x144
    28e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28e4:	f241 0200 	movw	r2, #4096	; 0x1000
    28e8:	f2c4 0200 	movt	r2, #16384	; 0x4000
    28ec:	601a      	str	r2, [r3, #0]
        this_spi->irqn = SPI0_IRQn;
    28ee:	f04f 020c 	mov.w	r2, #12
    28f2:	809a      	strh	r2, [r3, #4]

        /* reset SPI0 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI0_SOFTRESET_MASK;
    28f4:	f242 0300 	movw	r3, #8192	; 0x2000
    28f8:	f2ce 0304 	movt	r3, #57348	; 0xe004
    28fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    28fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    2902:	631a      	str	r2, [r3, #48]	; 0x30
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    2904:	f24e 1200 	movw	r2, #57600	; 0xe100
    2908:	f2ce 0200 	movt	r2, #57344	; 0xe000
    290c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    2910:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
        /* Clear any previously pended SPI0 interrupt */
        NVIC_ClearPendingIRQ(SPI0_IRQn);
        /* Take SPI0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI0_SOFTRESET_MASK;
    2914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2916:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    291a:	631a      	str	r2, [r3, #48]	; 0x30
    291c:	e01b      	b.n	2956 <MSS_SPI_init+0xee>
    }
    else
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI1_BASE);
    291e:	f241 0300 	movw	r3, #4096	; 0x1000
    2922:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2926:	6023      	str	r3, [r4, #0]
        this_spi->irqn = SPI1_IRQn;
    2928:	f04f 030d 	mov.w	r3, #13
    292c:	80a3      	strh	r3, [r4, #4]
        
        /* reset SPI1 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI1_SOFTRESET_MASK;
    292e:	f242 0300 	movw	r3, #8192	; 0x2000
    2932:	f2ce 0304 	movt	r3, #57348	; 0xe004
    2936:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2938:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    293c:	631a      	str	r2, [r3, #48]	; 0x30
    293e:	f24e 1200 	movw	r2, #57600	; 0xe100
    2942:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2946:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    294a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
        /* Clear any previously pended SPI1 interrupt */
        NVIC_ClearPendingIRQ(SPI1_IRQn);
        /* Take SPI1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI1_SOFTRESET_MASK;
    294e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2950:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    2954:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* De-assert reset bit. */
    this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
    2956:	6823      	ldr	r3, [r4, #0]
    2958:	681a      	ldr	r2, [r3, #0]
    295a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
    295e:	601a      	str	r2, [r3, #0]
}
    2960:	bd38      	pop	{r3, r4, r5, pc}
    2962:	bf00      	nop

00002964 <MSS_I2C_wait_complete>:
mss_i2c_status_t MSS_I2C_wait_complete
(
    mss_i2c_instance_t * this_i2c,
    uint32_t timeout_ms
)
{
    2964:	4603      	mov	r3, r0
	mss_i2c_status_t i2c_status;
    
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
    2966:	f240 12c8 	movw	r2, #456	; 0x1c8
    296a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    296e:	4290      	cmp	r0, r2
    2970:	d006      	beq.n	2980 <MSS_I2C_wait_complete+0x1c>
    2972:	f240 223c 	movw	r2, #572	; 0x23c
    2976:	f2c2 0200 	movt	r2, #8192	; 0x2000
    297a:	4290      	cmp	r0, r2
    297c:	d000      	beq.n	2980 <MSS_I2C_wait_complete+0x1c>
    297e:	be00      	bkpt	0x0000
    
    this_i2c->master_timeout_ms = timeout_ms;
    2980:	6419      	str	r1, [r3, #64]	; 0x40

    /* Run the loop until state returns I2C_FAILED  or I2C_SUCESS*/
    do {
        i2c_status = this_i2c->master_status;
    2982:	f893 003c 	ldrb.w	r0, [r3, #60]	; 0x3c
    } while(MSS_I2C_IN_PROGRESS == i2c_status);
    2986:	2801      	cmp	r0, #1
    2988:	d0fb      	beq.n	2982 <MSS_I2C_wait_complete+0x1e>

    return i2c_status;
}
    298a:	4770      	bx	lr

0000298c <enable_slave_if_required>:
static void enable_slave_if_required
(
    mss_i2c_instance_t * this_i2c
)
{
    if( this_i2c->is_slave_enabled )
    298c:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
    2990:	b11b      	cbz	r3, 299a <enable_slave_if_required+0xe>
    {
        this_i2c->hw_reg_bit->CTRL_AA = 1u;
    2992:	6983      	ldr	r3, [r0, #24]
    2994:	f04f 0201 	mov.w	r2, #1
    2998:	609a      	str	r2, [r3, #8]
    299a:	4770      	bx	lr

0000299c <mss_i2c_isr>:
 */
static void mss_i2c_isr
(
    mss_i2c_instance_t * this_i2c
)
{
    299c:	b530      	push	{r4, r5, lr}
    299e:	b083      	sub	sp, #12
    29a0:	4604      	mov	r4, r0
    volatile uint8_t status;
    uint8_t data;
    uint8_t hold_bus;
    uint8_t clear_irq = 1u;
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
    29a2:	f240 13c8 	movw	r3, #456	; 0x1c8
    29a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    29aa:	4298      	cmp	r0, r3
    29ac:	d006      	beq.n	29bc <mss_i2c_isr+0x20>
    29ae:	f240 233c 	movw	r3, #572	; 0x23c
    29b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    29b6:	4298      	cmp	r0, r3
    29b8:	d000      	beq.n	29bc <mss_i2c_isr+0x20>
    29ba:	be00      	bkpt	0x0000

    status = this_i2c->hw_reg->STATUS;
    29bc:	6962      	ldr	r2, [r4, #20]
    29be:	7913      	ldrb	r3, [r2, #4]
    29c0:	f88d 3007 	strb.w	r3, [sp, #7]

    switch( status )
    29c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    29c8:	f1a3 0308 	sub.w	r3, r3, #8
    29cc:	2bd0      	cmp	r3, #208	; 0xd0
    29ce:	f200 828e 	bhi.w	2eee <mss_i2c_isr+0x552>
    29d2:	e8df f013 	tbh	[pc, r3, lsl #1]
    29d6:	00d1      	.short	0x00d1
    29d8:	028c028c 	.word	0x028c028c
    29dc:	028c028c 	.word	0x028c028c
    29e0:	028c028c 	.word	0x028c028c
    29e4:	00d1028c 	.word	0x00d1028c
    29e8:	028c028c 	.word	0x028c028c
    29ec:	028c028c 	.word	0x028c028c
    29f0:	028c028c 	.word	0x028c028c
    29f4:	0106028c 	.word	0x0106028c
    29f8:	028c028c 	.word	0x028c028c
    29fc:	028c028c 	.word	0x028c028c
    2a00:	028c028c 	.word	0x028c028c
    2a04:	00f7028c 	.word	0x00f7028c
    2a08:	028c028c 	.word	0x028c028c
    2a0c:	028c028c 	.word	0x028c028c
    2a10:	028c028c 	.word	0x028c028c
    2a14:	0106028c 	.word	0x0106028c
    2a18:	028c028c 	.word	0x028c028c
    2a1c:	028c028c 	.word	0x028c028c
    2a20:	028c028c 	.word	0x028c028c
    2a24:	0144028c 	.word	0x0144028c
    2a28:	028c028c 	.word	0x028c028c
    2a2c:	028c028c 	.word	0x028c028c
    2a30:	028c028c 	.word	0x028c028c
    2a34:	00f2028c 	.word	0x00f2028c
    2a38:	028c028c 	.word	0x028c028c
    2a3c:	028c028c 	.word	0x028c028c
    2a40:	028c028c 	.word	0x028c028c
    2a44:	0153028c 	.word	0x0153028c
    2a48:	028c028c 	.word	0x028c028c
    2a4c:	028c028c 	.word	0x028c028c
    2a50:	028c028c 	.word	0x028c028c
    2a54:	016e028c 	.word	0x016e028c
    2a58:	028c028c 	.word	0x028c028c
    2a5c:	028c028c 	.word	0x028c028c
    2a60:	028c028c 	.word	0x028c028c
    2a64:	017d028c 	.word	0x017d028c
    2a68:	028c028c 	.word	0x028c028c
    2a6c:	028c028c 	.word	0x028c028c
    2a70:	028c028c 	.word	0x028c028c
    2a74:	018f028c 	.word	0x018f028c
    2a78:	028c028c 	.word	0x028c028c
    2a7c:	028c028c 	.word	0x028c028c
    2a80:	028c028c 	.word	0x028c028c
    2a84:	01d0028c 	.word	0x01d0028c
    2a88:	028c028c 	.word	0x028c028c
    2a8c:	028c028c 	.word	0x028c028c
    2a90:	028c028c 	.word	0x028c028c
    2a94:	01cc028c 	.word	0x01cc028c
    2a98:	028c028c 	.word	0x028c028c
    2a9c:	028c028c 	.word	0x028c028c
    2aa0:	028c028c 	.word	0x028c028c
    2aa4:	01d0028c 	.word	0x01d0028c
    2aa8:	028c028c 	.word	0x028c028c
    2aac:	028c028c 	.word	0x028c028c
    2ab0:	028c028c 	.word	0x028c028c
    2ab4:	01cc028c 	.word	0x01cc028c
    2ab8:	028c028c 	.word	0x028c028c
    2abc:	028c028c 	.word	0x028c028c
    2ac0:	028c028c 	.word	0x028c028c
    2ac4:	01e6028c 	.word	0x01e6028c
    2ac8:	028c028c 	.word	0x028c028c
    2acc:	028c028c 	.word	0x028c028c
    2ad0:	028c028c 	.word	0x028c028c
    2ad4:	01bb028c 	.word	0x01bb028c
    2ad8:	028c028c 	.word	0x028c028c
    2adc:	028c028c 	.word	0x028c028c
    2ae0:	028c028c 	.word	0x028c028c
    2ae4:	01e6028c 	.word	0x01e6028c
    2ae8:	028c028c 	.word	0x028c028c
    2aec:	028c028c 	.word	0x028c028c
    2af0:	028c028c 	.word	0x028c028c
    2af4:	01bb028c 	.word	0x01bb028c
    2af8:	028c028c 	.word	0x028c028c
    2afc:	028c028c 	.word	0x028c028c
    2b00:	028c028c 	.word	0x028c028c
    2b04:	01ff028c 	.word	0x01ff028c
    2b08:	028c028c 	.word	0x028c028c
    2b0c:	028c028c 	.word	0x028c028c
    2b10:	028c028c 	.word	0x028c028c
    2b14:	0248028c 	.word	0x0248028c
    2b18:	028c028c 	.word	0x028c028c
    2b1c:	028c028c 	.word	0x028c028c
    2b20:	028c028c 	.word	0x028c028c
    2b24:	0248028c 	.word	0x0248028c
    2b28:	028c028c 	.word	0x028c028c
    2b2c:	028c028c 	.word	0x028c028c
    2b30:	028c028c 	.word	0x028c028c
    2b34:	0248028c 	.word	0x0248028c
    2b38:	028c028c 	.word	0x028c028c
    2b3c:	028c028c 	.word	0x028c028c
    2b40:	028c028c 	.word	0x028c028c
    2b44:	027a028c 	.word	0x027a028c
    2b48:	028c028c 	.word	0x028c028c
    2b4c:	028c028c 	.word	0x028c028c
    2b50:	028c028c 	.word	0x028c028c
    2b54:	027a028c 	.word	0x027a028c
    2b58:	028c028c 	.word	0x028c028c
    2b5c:	028c028c 	.word	0x028c028c
    2b60:	028c028c 	.word	0x028c028c
    2b64:	028c028c 	.word	0x028c028c
    2b68:	028c028c 	.word	0x028c028c
    2b6c:	028c028c 	.word	0x028c028c
    2b70:	028c028c 	.word	0x028c028c
    2b74:	0239028c 	.word	0x0239028c
    {
        /************** MASTER TRANSMITTER / RECEIVER *******************/
      
        case ST_START: /* start has been xmt'd */
        case ST_RESTART: /* repeated start has been xmt'd */
            this_i2c->hw_reg_bit->CTRL_STA = 0u;
    2b78:	69a3      	ldr	r3, [r4, #24]
    2b7a:	f04f 0200 	mov.w	r2, #0
    2b7e:	615a      	str	r2, [r3, #20]
            this_i2c->hw_reg->DATA = (uint8_t)this_i2c->target_addr;
    2b80:	6963      	ldr	r3, [r4, #20]
    2b82:	7922      	ldrb	r2, [r4, #4]
    2b84:	721a      	strb	r2, [r3, #8]
            this_i2c->hw_reg_bit->DATA_DIR = this_i2c->dir;
    2b86:	69a3      	ldr	r3, [r4, #24]
    2b88:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2b8a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
            if ( this_i2c->dir == WRITE_DIR )
    2b8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2b90:	b90b      	cbnz	r3, 2b96 <mss_i2c_isr+0x1fa>
            {
                this_i2c->master_tx_idx = 0u;
    2b92:	62a3      	str	r3, [r4, #40]	; 0x28
    2b94:	e003      	b.n	2b9e <mss_i2c_isr+0x202>
            }
            else if ( this_i2c->dir == READ_DIR)
    2b96:	2b01      	cmp	r3, #1
            {
                this_i2c->master_rx_idx = 0u;
    2b98:	bf04      	itt	eq
    2b9a:	2300      	moveq	r3, #0
    2b9c:	63a3      	streq	r3, [r4, #56]	; 0x38
            /*
             * Clear the pending transaction. This condition will be true if the slave 
             * has acquired the bus to carry out pending master transaction which 
             * it had received during its slave transmission or reception mode. 
             */
            if(this_i2c->is_transaction_pending)
    2b9e:	f894 3071 	ldrb.w	r3, [r4, #113]	; 0x71
    2ba2:	b11b      	cbz	r3, 2bac <mss_i2c_isr+0x210>
            {
                this_i2c->is_transaction_pending = 0u;
    2ba4:	f04f 0300 	mov.w	r3, #0
    2ba8:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71

            /*
             * Make sure to update proper transaction after master START
             * or RESTART
             */
            if(this_i2c->transaction != this_i2c->pending_transaction)
    2bac:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
    2bb0:	7a22      	ldrb	r2, [r4, #8]
    2bb2:	429a      	cmp	r2, r3
            {
                this_i2c->transaction = this_i2c->pending_transaction;
    2bb4:	bf18      	it	ne
    2bb6:	7223      	strbne	r3, [r4, #8]
    2bb8:	e1af      	b.n	2f1a <mss_i2c_isr+0x57e>
            }
            break;
            
        case ST_LOST_ARB:
            /* Set start bit.  Let's keep trying!  Don't give up! */
            this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
    2bba:	69a3      	ldr	r3, [r4, #24]
    2bbc:	f04f 0201 	mov.w	r2, #1
    2bc0:	615a      	str	r2, [r3, #20]
            break;
    2bc2:	e1aa      	b.n	2f1a <mss_i2c_isr+0x57e>
            
        /******************* MASTER TRANSMITTER *************************/
        case ST_SLAW_NACK:
            /* SLA+W has been transmitted; not ACK has been received - let's stop. */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
    2bc4:	69a3      	ldr	r3, [r4, #24]
    2bc6:	f04f 0201 	mov.w	r2, #1
    2bca:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
    2bcc:	f04f 0302 	mov.w	r3, #2
    2bd0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
            this_i2c->transaction = NO_TRANSACTION;
    2bd4:	f04f 0300 	mov.w	r3, #0
    2bd8:	7223      	strb	r3, [r4, #8]
            enable_slave_if_required(this_i2c);
    2bda:	4620      	mov	r0, r4
    2bdc:	f7ff fed6 	bl	298c <enable_slave_if_required>
            break;
    2be0:	e19b      	b.n	2f1a <mss_i2c_isr+0x57e>
            
        case ST_SLAW_ACK:
        case ST_TX_DATA_ACK:
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
    2be2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2be4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    2be6:	428b      	cmp	r3, r1
    2be8:	d206      	bcs.n	2bf8 <mss_i2c_isr+0x25c>
            {    
                this_i2c->hw_reg->DATA = this_i2c->master_tx_buffer[this_i2c->master_tx_idx++];
    2bea:	6a21      	ldr	r1, [r4, #32]
    2bec:	5cc9      	ldrb	r1, [r1, r3]
    2bee:	7211      	strb	r1, [r2, #8]
    2bf0:	f103 0301 	add.w	r3, r3, #1
    2bf4:	62a3      	str	r3, [r4, #40]	; 0x28
    2bf6:	e190      	b.n	2f1a <mss_i2c_isr+0x57e>
            }
            else if ( this_i2c->transaction == MASTER_RANDOM_READ_TRANSACTION )
    2bf8:	7a23      	ldrb	r3, [r4, #8]
    2bfa:	2b03      	cmp	r3, #3
    2bfc:	d105      	bne.n	2c0a <mss_i2c_isr+0x26e>
            {
                /* We are finished sending the address offset part of a random read transaction.
                 * It is is time to send a restart in order to change direction. */
                 this_i2c->dir = READ_DIR;
    2bfe:	f04f 0301 	mov.w	r3, #1
    2c02:	62e3      	str	r3, [r4, #44]	; 0x2c
                 this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
    2c04:	69a2      	ldr	r2, [r4, #24]
    2c06:	6153      	str	r3, [r2, #20]
    2c08:	e187      	b.n	2f1a <mss_i2c_isr+0x57e>
            {
                /*
                 * Set the transaction back to NO_TRANSACTION to allow user to do further
                 * transaction
                 */
                this_i2c->transaction = NO_TRANSACTION;
    2c0a:	f04f 0300 	mov.w	r3, #0
    2c0e:	7223      	strb	r3, [r4, #8]
                hold_bus = this_i2c->options & MSS_I2C_HOLD_BUS;
    2c10:	7c23      	ldrb	r3, [r4, #16]
    2c12:	f003 0301 	and.w	r3, r3, #1

                /* Store the information of current I2C bus status in the bus_status*/
                this_i2c->bus_status  = hold_bus;
    2c16:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
                if ( hold_bus == 0u )
    2c1a:	b93b      	cbnz	r3, 2c2c <mss_i2c_isr+0x290>
                { 
                    this_i2c->hw_reg_bit->CTRL_STO = 0x01u; /*xmt stop condition */
    2c1c:	69a3      	ldr	r3, [r4, #24]
    2c1e:	f04f 0501 	mov.w	r5, #1
    2c22:	611d      	str	r5, [r3, #16]
                    enable_slave_if_required(this_i2c);
    2c24:	4620      	mov	r0, r4
    2c26:	f7ff feb1 	bl	298c <enable_slave_if_required>
    2c2a:	e013      	b.n	2c54 <mss_i2c_isr+0x2b8>
                }
                else
                {
                    NVIC_DisableIRQ( this_i2c->irqn );
    2c2c:	8a63      	ldrh	r3, [r4, #18]
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    2c2e:	b21a      	sxth	r2, r3
    2c30:	ea4f 1252 	mov.w	r2, r2, lsr #5
    2c34:	f003 031f 	and.w	r3, r3, #31
    2c38:	f04f 0101 	mov.w	r1, #1
    2c3c:	fa01 f103 	lsl.w	r1, r1, r3
    2c40:	f24e 1300 	movw	r3, #57600	; 0xe100
    2c44:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2c48:	f102 0220 	add.w	r2, r2, #32
    2c4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    2c50:	f04f 0500 	mov.w	r5, #0
                    clear_irq = 0u;
                }
                this_i2c->master_status = MSS_I2C_SUCCESS;
    2c54:	f04f 0300 	mov.w	r3, #0
    2c58:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    2c5c:	e15c      	b.n	2f18 <mss_i2c_isr+0x57c>
            /* data byte SENT, ACK to be received
             * In fact, this means we've received a NACK (This may not be 
             * obvious, but if we've rec'd an ACK then we would be in state 
             * 0x28!) hence, let's send a stop bit
             */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
    2c5e:	69a3      	ldr	r3, [r4, #24]
    2c60:	f04f 0201 	mov.w	r2, #1
    2c64:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
    2c66:	f04f 0302 	mov.w	r3, #2
    2c6a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
    2c6e:	f04f 0300 	mov.w	r3, #0
    2c72:	7223      	strb	r3, [r4, #8]
            enable_slave_if_required(this_i2c);
    2c74:	4620      	mov	r0, r4
    2c76:	f7ff fe89 	bl	298c <enable_slave_if_required>

            break;
    2c7a:	e14e      	b.n	2f1a <mss_i2c_isr+0x57e>
      /* STATUS codes 08H, 10H, 38H are all covered in MTX mode */
        case ST_SLAR_ACK: /* SLA+R tx'ed. */
            /* Let's make sure we ACK the first data byte received (set AA bit in CTRL) unless
             * the next byte is the last byte of the read transaction.
             */
            if(this_i2c->master_rx_size > 1u)
    2c7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2c7e:	2b01      	cmp	r3, #1
    2c80:	d904      	bls.n	2c8c <mss_i2c_isr+0x2f0>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
    2c82:	69a3      	ldr	r3, [r4, #24]
    2c84:	f04f 0201 	mov.w	r2, #1
    2c88:	609a      	str	r2, [r3, #8]
    2c8a:	e146      	b.n	2f1a <mss_i2c_isr+0x57e>
            }
            else if(1u == this_i2c->master_rx_size)
    2c8c:	2b01      	cmp	r3, #1
    2c8e:	d104      	bne.n	2c9a <mss_i2c_isr+0x2fe>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
    2c90:	69a3      	ldr	r3, [r4, #24]
    2c92:	f04f 0200 	mov.w	r2, #0
    2c96:	609a      	str	r2, [r3, #8]
    2c98:	e13f      	b.n	2f1a <mss_i2c_isr+0x57e>
            }
            else /* this_i2c->master_rx_size == 0u */
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
    2c9a:	69a2      	ldr	r2, [r4, #24]
    2c9c:	f04f 0301 	mov.w	r3, #1
    2ca0:	6093      	str	r3, [r2, #8]
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
    2ca2:	69a2      	ldr	r2, [r4, #24]
    2ca4:	6113      	str	r3, [r2, #16]
                this_i2c->master_status = MSS_I2C_SUCCESS;
    2ca6:	f04f 0300 	mov.w	r3, #0
    2caa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
                this_i2c->transaction = NO_TRANSACTION;
    2cae:	7223      	strb	r3, [r4, #8]
    2cb0:	e133      	b.n	2f1a <mss_i2c_isr+0x57e>
            }
            break;
            
        case ST_SLAR_NACK: /* SLA+R tx'ed; let's release the bus (send a stop condition) */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
    2cb2:	69a3      	ldr	r3, [r4, #24]
    2cb4:	f04f 0201 	mov.w	r2, #1
    2cb8:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
    2cba:	f04f 0302 	mov.w	r3, #2
    2cbe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
    2cc2:	f04f 0300 	mov.w	r3, #0
    2cc6:	7223      	strb	r3, [r4, #8]
            enable_slave_if_required(this_i2c);
    2cc8:	4620      	mov	r0, r4
    2cca:	f7ff fe5f 	bl	298c <enable_slave_if_required>
            break;
    2cce:	e124      	b.n	2f1a <mss_i2c_isr+0x57e>
          
        case ST_RX_DATA_ACK: /* Data byte received, ACK returned */
            /* First, get the data */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx++] = this_i2c->hw_reg->DATA;
    2cd0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2cd2:	7a11      	ldrb	r1, [r2, #8]
    2cd4:	6b22      	ldr	r2, [r4, #48]	; 0x30
    2cd6:	54d1      	strb	r1, [r2, r3]
    2cd8:	f103 0301 	add.w	r3, r3, #1
    2cdc:	63a3      	str	r3, [r4, #56]	; 0x38

            if( this_i2c->master_rx_idx >= (this_i2c->master_rx_size - 1u))
    2cde:	6b62      	ldr	r2, [r4, #52]	; 0x34
    2ce0:	f102 32ff 	add.w	r2, r2, #4294967295
    2ce4:	4293      	cmp	r3, r2
    2ce6:	f0c0 8118 	bcc.w	2f1a <mss_i2c_isr+0x57e>
            {
                /* If we're at the second last byte, let's set AA to 0 so
                 * we return a NACK at the last byte. */
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
    2cea:	69a3      	ldr	r3, [r4, #24]
    2cec:	f04f 0200 	mov.w	r2, #0
    2cf0:	609a      	str	r2, [r3, #8]
    2cf2:	e112      	b.n	2f1a <mss_i2c_isr+0x57e>
            }
            break;
            
        case ST_RX_DATA_NACK: /* Data byte received, NACK returned */
            /* Get the data, then send a stop condition */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx] = this_i2c->hw_reg->DATA;
    2cf4:	7a11      	ldrb	r1, [r2, #8]
    2cf6:	6b22      	ldr	r2, [r4, #48]	; 0x30
    2cf8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2cfa:	54d1      	strb	r1, [r2, r3]
          
            hold_bus = this_i2c->options &  MSS_I2C_HOLD_BUS; 
    2cfc:	7c23      	ldrb	r3, [r4, #16]
    2cfe:	f003 0301 	and.w	r3, r3, #1

            /* Store the information of current I2C bus status in the bus_status*/
            this_i2c->bus_status  = hold_bus;
    2d02:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
            if ( hold_bus == 0u )
    2d06:	b93b      	cbnz	r3, 2d18 <mss_i2c_isr+0x37c>
            { 
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;  /*xmt stop condition */
    2d08:	69a3      	ldr	r3, [r4, #24]
    2d0a:	f04f 0501 	mov.w	r5, #1
    2d0e:	611d      	str	r5, [r3, #16]

                /* Bus is released, now we can start listening to bus, if it is slave */
                   enable_slave_if_required(this_i2c);
    2d10:	4620      	mov	r0, r4
    2d12:	f7ff fe3b 	bl	298c <enable_slave_if_required>
    2d16:	e013      	b.n	2d40 <mss_i2c_isr+0x3a4>
            }
            else
            {
                NVIC_DisableIRQ( this_i2c->irqn );
    2d18:	8a63      	ldrh	r3, [r4, #18]
    2d1a:	b21a      	sxth	r2, r3
    2d1c:	ea4f 1252 	mov.w	r2, r2, lsr #5
    2d20:	f003 031f 	and.w	r3, r3, #31
    2d24:	f04f 0101 	mov.w	r1, #1
    2d28:	fa01 f103 	lsl.w	r1, r1, r3
    2d2c:	f24e 1300 	movw	r3, #57600	; 0xe100
    2d30:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2d34:	f102 0220 	add.w	r2, r2, #32
    2d38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    2d3c:	f04f 0500 	mov.w	r5, #0

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
    2d40:	f04f 0300 	mov.w	r3, #0
    2d44:	7223      	strb	r3, [r4, #8]
            this_i2c->master_status = MSS_I2C_SUCCESS;
    2d46:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
            break;
    2d4a:	e0e5      	b.n	2f18 <mss_i2c_isr+0x57c>
        
        /******************** SLAVE RECEIVER **************************/
        case ST_GCA_NACK: /* NACK after, GCA addressing */
        case ST_SLA_NACK: /* Re-enable AA (assert ack) bit for future transmissions */
            this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
    2d4c:	69a3      	ldr	r3, [r4, #24]
    2d4e:	f04f 0201 	mov.w	r2, #1
    2d52:	609a      	str	r2, [r3, #8]
            
            this_i2c->transaction = NO_TRANSACTION;
    2d54:	f04f 0300 	mov.w	r3, #0
    2d58:	7223      	strb	r3, [r4, #8]
            this_i2c->slave_status = MSS_I2C_SUCCESS;
    2d5a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
            
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
    2d5e:	f894 3071 	ldrb.w	r3, [r4, #113]	; 0x71
    2d62:	2b00      	cmp	r3, #0
    2d64:	f000 80d9 	beq.w	2f1a <mss_i2c_isr+0x57e>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
    2d68:	69a3      	ldr	r3, [r4, #24]
    2d6a:	615a      	str	r2, [r3, #20]
    2d6c:	e0d5      	b.n	2f1a <mss_i2c_isr+0x57e>
        case ST_SLV_LA: /* Arbitr. lost (SLA rec'd) */
            /*
             *  We lost arbitration and either the GCE or our address was the
             *  one received so pend the master operation we were starting.
             */
            this_i2c->is_transaction_pending = 1u;
    2d6e:	f04f 0301 	mov.w	r3, #1
    2d72:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
            /* Fall through to normal ST processing as we are now in slave mode */

        case ST_GCA: /* General call address received, ACK returned */
        case ST_SLAVE_SLAW: /* SLA+W received, ACK returned */

            this_i2c->transaction = WRITE_SLAVE_TRANSACTION;
    2d76:	f04f 0304 	mov.w	r3, #4
    2d7a:	7223      	strb	r3, [r4, #8]
            this_i2c->slave_rx_idx = 0u;
    2d7c:	f04f 0300 	mov.w	r3, #0
    2d80:	65a3      	str	r3, [r4, #88]	; 0x58
            this_i2c->random_read_addr = 0u;
    2d82:	60e3      	str	r3, [r4, #12]

             /* If Start Bit is set, clear it, but store that information since it is because of
              * pending transaction
              */
            if(this_i2c->hw_reg_bit->CTRL_STA)
    2d84:	69a3      	ldr	r3, [r4, #24]
    2d86:	695a      	ldr	r2, [r3, #20]
    2d88:	b132      	cbz	r2, 2d98 <mss_i2c_isr+0x3fc>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 0u ;
    2d8a:	f04f 0200 	mov.w	r2, #0
    2d8e:	615a      	str	r2, [r3, #20]
                this_i2c->is_transaction_pending = 1u;
    2d90:	f04f 0301 	mov.w	r3, #1
    2d94:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
            }
            this_i2c->slave_status = MSS_I2C_IN_PROGRESS;
    2d98:	f04f 0301 	mov.w	r3, #1
    2d9c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
#ifdef MSS_I2C_INCLUDE_SLA_IN_RX_PAYLOAD
            /* Fall through to put address as first byte in payload buffer */
#else
            /* Only break from this case if the slave address must NOT be included at the
             * beginning of the received write data. */
            break;
    2da0:	e0bb      	b.n	2f1a <mss_i2c_isr+0x57e>
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
    2da2:	6d21      	ldr	r1, [r4, #80]	; 0x50
    2da4:	b161      	cbz	r1, 2dc0 <mss_i2c_isr+0x424>
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
    2da6:	6da3      	ldr	r3, [r4, #88]	; 0x58
    2da8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    2daa:	4283      	cmp	r3, r0
    2dac:	d20d      	bcs.n	2dca <mss_i2c_isr+0x42e>
            {
                data = this_i2c->hw_reg->DATA;
    2dae:	7a12      	ldrb	r2, [r2, #8]
                this_i2c->slave_rx_buffer[this_i2c->slave_rx_idx++] = data;
    2db0:	54ca      	strb	r2, [r1, r3]
    2db2:	f103 0301 	add.w	r3, r3, #1
    2db6:	65a3      	str	r3, [r4, #88]	; 0x58
                {
                    /* Ignore the slave address byte in the random read address
                       computation in the case where INCLUDE_SLA_IN_RX_PAYLOAD
                       is defined. */
#endif
                    this_i2c->random_read_addr = (this_i2c->random_read_addr << 8) + data;
    2db8:	68e3      	ldr	r3, [r4, #12]
    2dba:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    2dbe:	60e2      	str	r2, [r4, #12]
#ifdef MSS_I2C_INCLUDE_SLA_IN_RX_PAYLOAD
                }
#endif
            }
            
            if (this_i2c->slave_rx_idx >= this_i2c->slave_rx_size)
    2dc0:	6da2      	ldr	r2, [r4, #88]	; 0x58
    2dc2:	6d63      	ldr	r3, [r4, #84]	; 0x54
    2dc4:	429a      	cmp	r2, r3
    2dc6:	f0c0 80a8 	bcc.w	2f1a <mss_i2c_isr+0x57e>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;   /* send a NACK when done (next reception) */
    2dca:	69a3      	ldr	r3, [r4, #24]
    2dcc:	f04f 0200 	mov.w	r2, #0
    2dd0:	609a      	str	r2, [r3, #8]
    2dd2:	e0a2      	b.n	2f1a <mss_i2c_isr+0x57e>
            /* STOP or repeated START occurred. */
            /* We cannot be sure if the transaction has actually completed as
             * this hardware state reports that either a STOP or repeated START
             * condition has occurred. We assume that this is a repeated START
             * if the transaction was a write from the master to this point.*/
            if ( this_i2c->transaction == WRITE_SLAVE_TRANSACTION )
    2dd4:	7a23      	ldrb	r3, [r4, #8]
    2dd6:	2b04      	cmp	r3, #4
    2dd8:	d121      	bne.n	2e1e <mss_i2c_isr+0x482>
            {
                if ( this_i2c->slave_rx_idx == this_i2c->slave_mem_offset_length )
    2dda:	6da2      	ldr	r2, [r4, #88]	; 0x58
    2ddc:	6e23      	ldr	r3, [r4, #96]	; 0x60
    2dde:	429a      	cmp	r2, r3
                {
                    this_i2c->slave_tx_idx = this_i2c->random_read_addr;
    2de0:	bf04      	itt	eq
    2de2:	68e3      	ldreq	r3, [r4, #12]
    2de4:	64e3      	streq	r3, [r4, #76]	; 0x4c
                }
                {
                    /* Call the slave's write transaction handler if it exists. */
                    if ( this_i2c->slave_write_handler != 0u )
    2de6:	6e63      	ldr	r3, [r4, #100]	; 0x64
    2de8:	b1a3      	cbz	r3, 2e14 <mss_i2c_isr+0x478>
                    {
                        mss_i2c_slave_handler_ret_t h_ret;
                        h_ret = this_i2c->slave_write_handler( this_i2c, this_i2c->slave_rx_buffer, (uint16_t)this_i2c->slave_rx_idx );
    2dea:	4620      	mov	r0, r4
    2dec:	6d21      	ldr	r1, [r4, #80]	; 0x50
    2dee:	f8b4 2058 	ldrh.w	r2, [r4, #88]	; 0x58
    2df2:	4798      	blx	r3
                        if ( MSS_I2C_REENABLE_SLAVE_RX == h_ret )
    2df4:	b938      	cbnz	r0, 2e06 <mss_i2c_isr+0x46a>
                        {
                            /* There is a small risk that the write handler could
                             * call MSS_I2C_disable_slave() but return
                             * MSS_I2C_REENABLE_SLAVE_RX in error so we only
                             * enable ACKs if still in slave mode. */
                             enable_slave_if_required(this_i2c);
    2df6:	4620      	mov	r0, r4
    2df8:	f7ff fdc8 	bl	298c <enable_slave_if_required>
                             this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
    2dfc:	69a3      	ldr	r3, [r4, #24]
    2dfe:	f04f 0201 	mov.w	r2, #1
    2e02:	609a      	str	r2, [r3, #8]
    2e04:	e011      	b.n	2e2a <mss_i2c_isr+0x48e>
                        }
                        else
                        {
                            this_i2c->hw_reg_bit->CTRL_AA = 0u;
    2e06:	69a2      	ldr	r2, [r4, #24]
    2e08:	f04f 0300 	mov.w	r3, #0
    2e0c:	6093      	str	r3, [r2, #8]
                            /* Clear slave mode flag as well otherwise in mixed
                             * master/slave applications, the AA bit will get set by
                             * subsequent master operations. */
                            this_i2c->is_slave_enabled = 0u;
    2e0e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    2e12:	e00a      	b.n	2e2a <mss_i2c_isr+0x48e>
                        }
                    }
                    else
                    {
                        /* Re-enable address acknowledge in case we were ready to nack the next received byte. */
                        this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
    2e14:	69a3      	ldr	r3, [r4, #24]
    2e16:	f04f 0201 	mov.w	r2, #1
    2e1a:	609a      	str	r2, [r3, #8]
    2e1c:	e005      	b.n	2e2a <mss_i2c_isr+0x48e>
            {
                /*
                 * Reset slave_tx_idx so that a subsequent read will result in the slave's
                 * transmit buffer being sent from the first byte.
                 */
                this_i2c->slave_tx_idx = 0u;
    2e1e:	f04f 0300 	mov.w	r3, #0
    2e22:	64e3      	str	r3, [r4, #76]	; 0x4c
                /*
                 * See if we need to re-enable acknowledgement as some error conditions, such
                 * as a master prematurely ending a transfer, can see us get here with AA set
                 * to 0 which will disable slave operation if we are not careful.
                 */
                enable_slave_if_required(this_i2c);
    2e24:	4620      	mov	r0, r4
    2e26:	f7ff fdb1 	bl	298c <enable_slave_if_required>
            }

            /* Mark any previous master write transaction as complete. */
            this_i2c->slave_status = MSS_I2C_SUCCESS;
    2e2a:	f04f 0300 	mov.w	r3, #0
    2e2e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c

            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
    2e32:	f894 3071 	ldrb.w	r3, [r4, #113]	; 0x71
    2e36:	b11b      	cbz	r3, 2e40 <mss_i2c_isr+0x4a4>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
    2e38:	69a3      	ldr	r3, [r4, #24]
    2e3a:	f04f 0201 	mov.w	r2, #1
    2e3e:	615a      	str	r2, [r3, #20]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
    2e40:	f04f 0300 	mov.w	r3, #0
    2e44:	7223      	strb	r3, [r4, #8]
            break;
    2e46:	e068      	b.n	2f1a <mss_i2c_isr+0x57e>
        case ST_SLV_RST: /* SMBUS ONLY: timeout state. must clear interrupt */
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction.
             */
            this_i2c->transaction = NO_TRANSACTION;
    2e48:	f04f 0300 	mov.w	r3, #0
    2e4c:	7223      	strb	r3, [r4, #8]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
    2e4e:	64e3      	str	r3, [r4, #76]	; 0x4c
            /*
             * Clear status to I2C_FAILED only if there was an operation in progress.
             */
            if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
    2e50:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    2e54:	2b01      	cmp	r3, #1
            {
                this_i2c->slave_status = MSS_I2C_FAILED;
    2e56:	bf04      	itt	eq
    2e58:	2302      	moveq	r3, #2
    2e5a:	f884 305c 	strbeq.w	r3, [r4, #92]	; 0x5c
            }

            enable_slave_if_required(this_i2c); /* Make sure AA is set correctly */
    2e5e:	4620      	mov	r0, r4
    2e60:	f7ff fd94 	bl	298c <enable_slave_if_required>

            break;
    2e64:	e059      	b.n	2f1a <mss_i2c_isr+0x57e>
            
        /****************** SLAVE TRANSMITTER **************************/
        case ST_SLAVE_SLAR_ACK: /* SLA+R received, ACK returned */
        case ST_SLARW_LA:   /* Arbitration lost, SLA+R received, ACK returned */
        case ST_RACK: /* Data tx'ed, ACK received */
            if ( status == ST_SLAVE_SLAR_ACK )
    2e66:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2e6a:	2ba8      	cmp	r3, #168	; 0xa8
    2e6c:	d113      	bne.n	2e96 <mss_i2c_isr+0x4fa>
            {
                this_i2c->transaction = READ_SLAVE_TRANSACTION;
    2e6e:	f04f 0305 	mov.w	r3, #5
    2e72:	7223      	strb	r3, [r4, #8]
                this_i2c->random_read_addr = 0u;
    2e74:	f04f 0300 	mov.w	r3, #0
    2e78:	60e3      	str	r3, [r4, #12]

                this_i2c->slave_status = MSS_I2C_IN_PROGRESS;
    2e7a:	f04f 0301 	mov.w	r3, #1
    2e7e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c

                /* If Start Bit is set, clear it, but store that information since it is because of
                 * pending transaction
                 */
                if(this_i2c->hw_reg_bit->CTRL_STA)
    2e82:	69a3      	ldr	r3, [r4, #24]
    2e84:	695a      	ldr	r2, [r3, #20]
    2e86:	b132      	cbz	r2, 2e96 <mss_i2c_isr+0x4fa>
                {
                    this_i2c->hw_reg_bit->CTRL_STA = 0u ;
    2e88:	f04f 0200 	mov.w	r2, #0
    2e8c:	615a      	str	r2, [r3, #20]
                    this_i2c->is_transaction_pending = 1u;
    2e8e:	f04f 0301 	mov.w	r3, #1
    2e92:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
                }
            }
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size)
    2e96:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    2e98:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    2e9a:	4293      	cmp	r3, r2
            {
                /* Ensure 0xFF is returned to the master when the slave specifies
                 * an empty transmit buffer. */
                this_i2c->hw_reg->DATA = 0xFFu;
    2e9c:	bf23      	ittte	cs
    2e9e:	6963      	ldrcs	r3, [r4, #20]
    2ea0:	f04f 32ff 	movcs.w	r2, #4294967295
    2ea4:	721a      	strbcs	r2, [r3, #8]
            }
            else
            {
                /* Load the data the data byte to be sent to the master. */
                this_i2c->hw_reg->DATA = this_i2c->slave_tx_buffer[this_i2c->slave_tx_idx++];
    2ea6:	6962      	ldrcc	r2, [r4, #20]
    2ea8:	bf3f      	itttt	cc
    2eaa:	6c61      	ldrcc	r1, [r4, #68]	; 0x44
    2eac:	5cc9      	ldrbcc	r1, [r1, r3]
    2eae:	7211      	strbcc	r1, [r2, #8]
    2eb0:	3301      	addcc	r3, #1
    2eb2:	bf38      	it	cc
    2eb4:	64e3      	strcc	r3, [r4, #76]	; 0x4c
            }
            /* Determine if this is the last data byte to send to the master. */
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size) /* last byte? */
    2eb6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    2eb8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    2eba:	429a      	cmp	r2, r3
    2ebc:	d32d      	bcc.n	2f1a <mss_i2c_isr+0x57e>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
    2ebe:	69a2      	ldr	r2, [r4, #24]
    2ec0:	f04f 0300 	mov.w	r3, #0
    2ec4:	6093      	str	r3, [r2, #8]
                /* Next read transaction will result in slave's transmit buffer
                 * being sent from the first byte. */
                this_i2c->slave_tx_idx = 0u;
    2ec6:	64e3      	str	r3, [r4, #76]	; 0x4c
    2ec8:	e027      	b.n	2f1a <mss_i2c_isr+0x57e>
        case ST_SLAVE_RNACK:    /* Data byte has been transmitted; not-ACK has been received. */
        case ST_FINAL: /* Last Data byte tx'ed, ACK received */
            /* We assume that the transaction will be stopped by the master.
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte. */
            this_i2c->slave_tx_idx = 0u;
    2eca:	f04f 0300 	mov.w	r3, #0
    2ece:	64e3      	str	r3, [r4, #76]	; 0x4c
            this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
    2ed0:	69a2      	ldr	r2, [r4, #24]
    2ed2:	f04f 0101 	mov.w	r1, #1
    2ed6:	6091      	str	r1, [r2, #8]

            /*  Mark previous state as complete */
            this_i2c->slave_status = MSS_I2C_SUCCESS;
    2ed8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c

            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
    2edc:	f894 3071 	ldrb.w	r3, [r4, #113]	; 0x71
    2ee0:	b10b      	cbz	r3, 2ee6 <mss_i2c_isr+0x54a>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
    2ee2:	69a3      	ldr	r3, [r4, #24]
    2ee4:	6159      	str	r1, [r3, #20]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
    2ee6:	f04f 0300 	mov.w	r3, #0
    2eea:	7223      	strb	r3, [r4, #8]
            break;
    2eec:	e015      	b.n	2f1a <mss_i2c_isr+0x57e>
        case ST_RESET_ACTIVATED:
        case ST_BUS_ERROR: /* Bus error during MST or selected slave modes */
        default:
            /* Some undefined state has encountered. Clear Start bit to make
             * sure, next good transaction happen */
            this_i2c->hw_reg_bit->CTRL_STA = 0x00u;
    2eee:	69a2      	ldr	r2, [r4, #24]
    2ef0:	f04f 0300 	mov.w	r3, #0
    2ef4:	6153      	str	r3, [r2, #20]
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
    2ef6:	7223      	strb	r3, [r4, #8]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
    2ef8:	64e3      	str	r3, [r4, #76]	; 0x4c
            /*
             * Clear statuses to I2C_FAILED only if there was an operation in progress.
             */
            if(MSS_I2C_IN_PROGRESS == this_i2c->master_status)
    2efa:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    2efe:	2b01      	cmp	r3, #1
            {
                this_i2c->master_status = MSS_I2C_FAILED;
    2f00:	bf04      	itt	eq
    2f02:	2302      	moveq	r3, #2
    2f04:	f884 303c 	strbeq.w	r3, [r4, #60]	; 0x3c
            }

            if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
    2f08:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    2f0c:	2b01      	cmp	r3, #1
            {
                this_i2c->slave_status = MSS_I2C_FAILED;
    2f0e:	bf04      	itt	eq
    2f10:	2302      	moveq	r3, #2
    2f12:	f884 305c 	strbeq.w	r3, [r4, #92]	; 0x5c
    2f16:	e000      	b.n	2f1a <mss_i2c_isr+0x57e>


            break;
    }
    
    if ( clear_irq )
    2f18:	b11d      	cbz	r5, 2f22 <mss_i2c_isr+0x586>
    {
        /* clear interrupt. */
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
    2f1a:	69a3      	ldr	r3, [r4, #24]
    2f1c:	f04f 0200 	mov.w	r2, #0
    2f20:	60da      	str	r2, [r3, #12]
    }
    
    /* Read the status register to ensure the last I2C registers write took place
     * in a system built around a bus making use of posted writes. */
    status = this_i2c->hw_reg->STATUS;
    2f22:	6963      	ldr	r3, [r4, #20]
    2f24:	791b      	ldrb	r3, [r3, #4]
    2f26:	f88d 3007 	strb.w	r3, [sp, #7]
}
    2f2a:	b003      	add	sp, #12
    2f2c:	bd30      	pop	{r4, r5, pc}
    2f2e:	bf00      	nop

00002f30 <I2C0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void I2C0_IRQHandler( void )
#else
void I2C0_IRQHandler( void )
#endif
{
    2f30:	4668      	mov	r0, sp
    2f32:	f020 0107 	bic.w	r1, r0, #7
    2f36:	468d      	mov	sp, r1
    2f38:	b501      	push	{r0, lr}
    mss_i2c_isr( &g_mss_i2c0 );
    2f3a:	f240 10c8 	movw	r0, #456	; 0x1c8
    2f3e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2f42:	f7ff fd2b 	bl	299c <mss_i2c_isr>
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    2f46:	f24e 1300 	movw	r3, #57600	; 0xe100
    2f4a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2f4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2f52:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC_ClearPendingIRQ( I2C0_IRQn );
}
    2f56:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    2f5a:	4685      	mov	sp, r0
    2f5c:	4770      	bx	lr
    2f5e:	bf00      	nop

00002f60 <I2C1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void I2C1_IRQHandler( void )
#else
void I2C1_IRQHandler( void )
#endif
{
    2f60:	4668      	mov	r0, sp
    2f62:	f020 0107 	bic.w	r1, r0, #7
    2f66:	468d      	mov	sp, r1
    2f68:	b501      	push	{r0, lr}
    mss_i2c_isr( &g_mss_i2c1 );
    2f6a:	f240 203c 	movw	r0, #572	; 0x23c
    2f6e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2f72:	f7ff fd13 	bl	299c <mss_i2c_isr>
    2f76:	f24e 1300 	movw	r3, #57600	; 0xe100
    2f7a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2f7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2f82:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC_ClearPendingIRQ( I2C1_IRQn );
}
    2f86:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    2f8a:	4685      	mov	sp, r0
    2f8c:	4770      	bx	lr
    2f8e:	bf00      	nop

00002f90 <disable_interrupts>:
}
/*------------------------------------------------------------------------------
 *
 */
static uint32_t disable_interrupts( void )
{
    2f90:	b510      	push	{r4, lr}
    uint32_t primask;
    primask = __get_PRIMASK();
    2f92:	f000 f9c1 	bl	3318 <__get_PRIMASK>
    2f96:	4604      	mov	r4, r0
    __set_PRIMASK(1u);
    2f98:	f04f 0001 	mov.w	r0, #1
    2f9c:	f000 f9c0 	bl	3320 <__set_PRIMASK>
    return primask;
}
    2fa0:	4620      	mov	r0, r4
    2fa2:	bd10      	pop	{r4, pc}

00002fa4 <restore_interrupts>:

/*------------------------------------------------------------------------------
 *
 */
static void restore_interrupts( uint32_t primask )
{
    2fa4:	b508      	push	{r3, lr}
    __set_PRIMASK( primask );
    2fa6:	f000 f9bb 	bl	3320 <__set_PRIMASK>
}
    2faa:	bd08      	pop	{r3, pc}

00002fac <MSS_I2C_read>:
    uint8_t serial_addr,
    uint8_t * read_buffer,
    uint16_t read_size,
    uint8_t options
)
{
    2fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2fb0:	b082      	sub	sp, #8
    2fb2:	4604      	mov	r4, r0
    2fb4:	460d      	mov	r5, r1
    2fb6:	4616      	mov	r6, r2
    2fb8:	461f      	mov	r7, r3
    2fba:	f89d 8020 	ldrb.w	r8, [sp, #32]
    uint32_t primask;
    volatile uint8_t stat_ctrl;

    ASSERT((this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1));
    2fbe:	f240 13c8 	movw	r3, #456	; 0x1c8
    2fc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2fc6:	4298      	cmp	r0, r3
    2fc8:	d006      	beq.n	2fd8 <MSS_I2C_read+0x2c>
    2fca:	f240 233c 	movw	r3, #572	; 0x23c
    2fce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2fd2:	4298      	cmp	r0, r3
    2fd4:	d000      	beq.n	2fd8 <MSS_I2C_read+0x2c>
    2fd6:	be00      	bkpt	0x0000

    primask = disable_interrupts();
    2fd8:	f7ff ffda 	bl	2f90 <disable_interrupts>
    
    /* Update the transaction only when there is no transaction going on I2C */
    if( this_i2c->transaction == NO_TRANSACTION)
    2fdc:	7a23      	ldrb	r3, [r4, #8]
    2fde:	b913      	cbnz	r3, 2fe6 <MSS_I2C_read+0x3a>
    {
      this_i2c->transaction = MASTER_READ_TRANSACTION;
    2fe0:	f04f 0302 	mov.w	r3, #2
    2fe4:	7223      	strb	r3, [r4, #8]
    }

    /* Update the Pending transaction information so that transaction can restarted */
    this_i2c->pending_transaction = MASTER_READ_TRANSACTION ;
    2fe6:	f04f 0302 	mov.w	r3, #2
    2fea:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
    2fee:	ea4f 0545 	mov.w	r5, r5, lsl #1
    2ff2:	6065      	str	r5, [r4, #4]

    this_i2c->dir = READ_DIR;
    2ff4:	f04f 0301 	mov.w	r3, #1
    2ff8:	62e3      	str	r3, [r4, #44]	; 0x2c

    this_i2c->master_rx_buffer = read_buffer;
    2ffa:	6326      	str	r6, [r4, #48]	; 0x30
    this_i2c->master_rx_size = read_size;
    2ffc:	6367      	str	r7, [r4, #52]	; 0x34
    this_i2c->master_rx_idx = 0u;
    2ffe:	f04f 0200 	mov.w	r2, #0
    3002:	63a2      	str	r2, [r4, #56]	; 0x38
    
    /* Set I2C status in progress */
    this_i2c->master_status = MSS_I2C_IN_PROGRESS;
    3004:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    this_i2c->options = options;
    3008:	f884 8010 	strb.w	r8, [r4, #16]

    if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
    300c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    3010:	2b01      	cmp	r3, #1
    {
        this_i2c->is_transaction_pending = 1u;
    3012:	bf0f      	iteee	eq
    3014:	f884 3071 	strbeq.w	r3, [r4, #113]	; 0x71
    }
    else
    {
        this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
    3018:	69a3      	ldrne	r3, [r4, #24]
    301a:	2201      	movne	r2, #1
    301c:	615a      	strne	r2, [r3, #20]
    /*
     * Clear interrupts if required (depends on repeated starts).
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( MSS_I2C_HOLD_BUS == this_i2c->bus_status )
    301e:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
    3022:	2b01      	cmp	r3, #1
    3024:	d11d      	bne.n	3062 <MSS_I2C_read+0xb6>
    {
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
    3026:	69a3      	ldr	r3, [r4, #24]
    3028:	f04f 0200 	mov.w	r2, #0
    302c:	60da      	str	r2, [r3, #12]
        stat_ctrl = this_i2c->hw_reg->STATUS;
    302e:	6963      	ldr	r3, [r4, #20]
    3030:	791b      	ldrb	r3, [r3, #4]
    3032:	f88d 3007 	strb.w	r3, [sp, #7]
        stat_ctrl = stat_ctrl;  /* Avoids Lint warning */
    3036:	f89d 3007 	ldrb.w	r3, [sp, #7]
    303a:	f88d 3007 	strb.w	r3, [sp, #7]
        NVIC_ClearPendingIRQ( this_i2c->irqn );
    303e:	8a63      	ldrh	r3, [r4, #18]
    3040:	b21a      	sxth	r2, r3
    3042:	ea4f 1252 	mov.w	r2, r2, lsr #5
    3046:	f003 031f 	and.w	r3, r3, #31
    304a:	f04f 0101 	mov.w	r1, #1
    304e:	fa01 f103 	lsl.w	r1, r1, r3
    3052:	f24e 1300 	movw	r3, #57600	; 0xe100
    3056:	f2ce 0300 	movt	r3, #57344	; 0xe000
    305a:	f102 0260 	add.w	r2, r2, #96	; 0x60
    305e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
    
    /* Enable the interrupt. ( Re-enable) */
    NVIC_EnableIRQ( this_i2c->irqn );
    3062:	8a63      	ldrh	r3, [r4, #18]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    3064:	b21a      	sxth	r2, r3
    3066:	ea4f 1252 	mov.w	r2, r2, lsr #5
    306a:	f003 031f 	and.w	r3, r3, #31
    306e:	f04f 0101 	mov.w	r1, #1
    3072:	fa01 f103 	lsl.w	r1, r1, r3
    3076:	f24e 1300 	movw	r3, #57600	; 0xe100
    307a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    307e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    restore_interrupts( primask );
    3082:	f7ff ff8f 	bl	2fa4 <restore_interrupts>
}
    3086:	b002      	add	sp, #8
    3088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000308c <MSS_I2C_write>:
    uint8_t serial_addr,
    const uint8_t * write_buffer,
    uint16_t write_size,
    uint8_t options
)
{
    308c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3090:	b082      	sub	sp, #8
    3092:	4604      	mov	r4, r0
    3094:	460d      	mov	r5, r1
    3096:	4616      	mov	r6, r2
    3098:	461f      	mov	r7, r3
    309a:	f89d 8020 	ldrb.w	r8, [sp, #32]
    uint32_t primask;
    volatile uint8_t stat_ctrl;

    ASSERT((this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1));
    309e:	f240 13c8 	movw	r3, #456	; 0x1c8
    30a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30a6:	4298      	cmp	r0, r3
    30a8:	d006      	beq.n	30b8 <MSS_I2C_write+0x2c>
    30aa:	f240 233c 	movw	r3, #572	; 0x23c
    30ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30b2:	4298      	cmp	r0, r3
    30b4:	d000      	beq.n	30b8 <MSS_I2C_write+0x2c>
    30b6:	be00      	bkpt	0x0000

    primask = disable_interrupts();
    30b8:	f7ff ff6a 	bl	2f90 <disable_interrupts>

    /* Update the transaction only when there is no transaction going on I2C */
    if( this_i2c->transaction == NO_TRANSACTION)
    30bc:	7a23      	ldrb	r3, [r4, #8]
    30be:	b913      	cbnz	r3, 30c6 <MSS_I2C_write+0x3a>
    {
      this_i2c->transaction = MASTER_WRITE_TRANSACTION;
    30c0:	f04f 0301 	mov.w	r3, #1
    30c4:	7223      	strb	r3, [r4, #8]
    }

    /* Update the Pending transaction information so that transaction can restarted */
    this_i2c->pending_transaction = MASTER_WRITE_TRANSACTION ;
    30c6:	f04f 0301 	mov.w	r3, #1
    30ca:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
    30ce:	fa05 f503 	lsl.w	r5, r5, r3
    30d2:	6065      	str	r5, [r4, #4]

    this_i2c->dir = WRITE_DIR;
    30d4:	f04f 0200 	mov.w	r2, #0
    30d8:	62e2      	str	r2, [r4, #44]	; 0x2c

    this_i2c->master_tx_buffer = write_buffer;
    30da:	6226      	str	r6, [r4, #32]
    this_i2c->master_tx_size = write_size;
    30dc:	6267      	str	r7, [r4, #36]	; 0x24
    this_i2c->master_tx_idx = 0u;
    30de:	62a2      	str	r2, [r4, #40]	; 0x28

    /* Set I2C status in progress */
    this_i2c->master_status = MSS_I2C_IN_PROGRESS;
    30e0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    this_i2c->options = options;
    30e4:	f884 8010 	strb.w	r8, [r4, #16]

    if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
    30e8:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    30ec:	2b01      	cmp	r3, #1
    {
        this_i2c->is_transaction_pending = 1u;
    30ee:	bf0f      	iteee	eq
    30f0:	f884 3071 	strbeq.w	r3, [r4, #113]	; 0x71
    }
    else
    {
        this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
    30f4:	69a3      	ldrne	r3, [r4, #24]
    30f6:	2201      	movne	r2, #1
    30f8:	615a      	strne	r2, [r3, #20]
    /*
     * Clear interrupts if required (depends on repeated starts).
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( MSS_I2C_HOLD_BUS == this_i2c->bus_status )
    30fa:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
    30fe:	2b01      	cmp	r3, #1
    3100:	d11d      	bne.n	313e <MSS_I2C_write+0xb2>
    {
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
    3102:	69a3      	ldr	r3, [r4, #24]
    3104:	f04f 0200 	mov.w	r2, #0
    3108:	60da      	str	r2, [r3, #12]
        stat_ctrl = this_i2c->hw_reg->STATUS;
    310a:	6963      	ldr	r3, [r4, #20]
    310c:	791b      	ldrb	r3, [r3, #4]
    310e:	f88d 3007 	strb.w	r3, [sp, #7]
        stat_ctrl = stat_ctrl;  /* Avoids Lint warning */
    3112:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3116:	f88d 3007 	strb.w	r3, [sp, #7]
        NVIC_ClearPendingIRQ( this_i2c->irqn );
    311a:	8a63      	ldrh	r3, [r4, #18]
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    311c:	b21a      	sxth	r2, r3
    311e:	ea4f 1252 	mov.w	r2, r2, lsr #5
    3122:	f003 031f 	and.w	r3, r3, #31
    3126:	f04f 0101 	mov.w	r1, #1
    312a:	fa01 f103 	lsl.w	r1, r1, r3
    312e:	f24e 1300 	movw	r3, #57600	; 0xe100
    3132:	f2ce 0300 	movt	r3, #57344	; 0xe000
    3136:	f102 0260 	add.w	r2, r2, #96	; 0x60
    313a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    /* Enable the interrupt. ( Re-enable) */
    NVIC_EnableIRQ( this_i2c->irqn );
    313e:	8a63      	ldrh	r3, [r4, #18]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    3140:	b21a      	sxth	r2, r3
    3142:	ea4f 1252 	mov.w	r2, r2, lsr #5
    3146:	f003 031f 	and.w	r3, r3, #31
    314a:	f04f 0101 	mov.w	r1, #1
    314e:	fa01 f103 	lsl.w	r1, r1, r3
    3152:	f24e 1300 	movw	r3, #57600	; 0xe100
    3156:	f2ce 0300 	movt	r3, #57344	; 0xe000
    315a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    restore_interrupts( primask );
    315e:	f7ff ff21 	bl	2fa4 <restore_interrupts>
}
    3162:	b002      	add	sp, #8
    3164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00003168 <MSS_I2C_init>:
(
    mss_i2c_instance_t * this_i2c,
    uint8_t ser_address,
    mss_i2c_clock_divider_t ser_clock_speed
)
{
    3168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    316c:	4604      	mov	r4, r0
    316e:	460e      	mov	r6, r1
    3170:	4615      	mov	r5, r2
    uint32_t primask;
    uint_fast16_t clock_speed = (uint_fast16_t)ser_clock_speed;
    
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
    3172:	f240 13c8 	movw	r3, #456	; 0x1c8
    3176:	f2c2 0300 	movt	r3, #8192	; 0x2000
    317a:	4298      	cmp	r0, r3
    317c:	d007      	beq.n	318e <MSS_I2C_init+0x26>
    317e:	f240 233c 	movw	r3, #572	; 0x23c
    3182:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3186:	4298      	cmp	r0, r3
    3188:	d04f      	beq.n	322a <MSS_I2C_init+0xc2>
    318a:	be00      	bkpt	0x0000
    318c:	e04d      	b.n	322a <MSS_I2C_init+0xc2>
     * Initialize all items of the this_i2c data structure to zero. This
     * initializes all state variables to their init value. It relies on
     * the fact that NO_TRANSACTION, I2C_SUCCESS and I2C_RELEASE_BUS all
     * have an actual value of zero.
     */
    primask = disable_interrupts();
    318e:	f7ff feff 	bl	2f90 <disable_interrupts>
    3192:	4607      	mov	r7, r0
    memset(this_i2c, 0, sizeof(mss_i2c_instance_t));
    3194:	f240 18c8 	movw	r8, #456	; 0x1c8
    3198:	f2c2 0800 	movt	r8, #8192	; 0x2000
    319c:	4640      	mov	r0, r8
    319e:	f04f 0100 	mov.w	r1, #0
    31a2:	f04f 0274 	mov.w	r2, #116	; 0x74
    31a6:	f001 f90b 	bl	43c0 <memset>
    
    if ( this_i2c == &g_mss_i2c0 )
    {
        this_i2c->irqn = I2C0_IRQn;
    31aa:	f04f 030e 	mov.w	r3, #14
    31ae:	f8a8 3012 	strh.w	r3, [r8, #18]
        this_i2c->hw_reg = I2C0;
    31b2:	f242 0300 	movw	r3, #8192	; 0x2000
    31b6:	f2c4 0300 	movt	r3, #16384	; 0x4000
    31ba:	f8c8 3014 	str.w	r3, [r8, #20]
        this_i2c->hw_reg_bit = I2C0_BITBAND;
    31be:	f240 0300 	movw	r3, #0
    31c2:	f2c4 2304 	movt	r3, #16900	; 0x4204
    31c6:	f8c8 3018 	str.w	r3, [r8, #24]
        
        /* reset I2C0 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C0_SOFTRESET_MASK;
    31ca:	f242 0300 	movw	r3, #8192	; 0x2000
    31ce:	f2ce 0304 	movt	r3, #57348	; 0xe004
    31d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    31d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    31d8:	631a      	str	r2, [r3, #48]	; 0x30
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    31da:	f24e 1200 	movw	r2, #57600	; 0xe100
    31de:	f2ce 0200 	movt	r2, #57344	; 0xe000
    31e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    31e6:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
        /* Clear any previously pended I2C0 interrupt */
        NVIC_ClearPendingIRQ( I2C0_IRQn );
        /* Take I2C0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C0_SOFTRESET_MASK;
    31ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    31ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    31f0:	631a      	str	r2, [r3, #48]	; 0x30
        /* Take I2C1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C1_SOFTRESET_MASK;
    }
    
    /* Use same base address for SMBus bitband access */
    this_i2c->hw_smb_reg_bit = (I2C_SMBus_BitBand_TypeDef *)this_i2c->hw_reg_bit;
    31f2:	69a3      	ldr	r3, [r4, #24]
    31f4:	61e3      	str	r3, [r4, #28]

    /* Update Serial address of the device */
    this_i2c->ser_address = (uint_fast8_t)ser_address << 1u;
    31f6:	ea4f 0646 	mov.w	r6, r6, lsl #1
    31fa:	6026      	str	r6, [r4, #0]

    this_i2c->hw_reg_bit->CTRL_CR2 = (uint32_t)((clock_speed >> 2u) & 0x01u);
    31fc:	f3c5 0280 	ubfx	r2, r5, #2, #1
    3200:	61da      	str	r2, [r3, #28]
    this_i2c->hw_reg_bit->CTRL_CR1 = (uint32_t)((clock_speed >> 1u) & 0x01u);
    3202:	69a3      	ldr	r3, [r4, #24]
    3204:	f3c5 0240 	ubfx	r2, r5, #1, #1
    3208:	605a      	str	r2, [r3, #4]
    this_i2c->hw_reg_bit->CTRL_CR0 = (uint32_t)(clock_speed & 0x01u);
    320a:	69a3      	ldr	r3, [r4, #24]
    320c:	f005 0501 	and.w	r5, r5, #1
    3210:	601d      	str	r5, [r3, #0]
    this_i2c->hw_reg->ADDR = (uint8_t)this_i2c->ser_address;
    3212:	6963      	ldr	r3, [r4, #20]
    3214:	7822      	ldrb	r2, [r4, #0]
    3216:	731a      	strb	r2, [r3, #12]
    this_i2c->hw_reg_bit->CTRL_ENS1 = 0x01u; /* set enable bit */
    3218:	69a3      	ldr	r3, [r4, #24]
    321a:	f04f 0201 	mov.w	r2, #1
    321e:	619a      	str	r2, [r3, #24]
    restore_interrupts( primask );
    3220:	4638      	mov	r0, r7
    3222:	f7ff febf 	bl	2fa4 <restore_interrupts>
}
    3226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     * Initialize all items of the this_i2c data structure to zero. This
     * initializes all state variables to their init value. It relies on
     * the fact that NO_TRANSACTION, I2C_SUCCESS and I2C_RELEASE_BUS all
     * have an actual value of zero.
     */
    primask = disable_interrupts();
    322a:	f7ff feb1 	bl	2f90 <disable_interrupts>
    322e:	4607      	mov	r7, r0
    memset(this_i2c, 0, sizeof(mss_i2c_instance_t));
    3230:	4620      	mov	r0, r4
    3232:	f04f 0100 	mov.w	r1, #0
    3236:	f04f 0274 	mov.w	r2, #116	; 0x74
    323a:	f001 f8c1 	bl	43c0 <memset>
        /* Take I2C0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C0_SOFTRESET_MASK;
    }
    else
    {
        this_i2c->irqn = I2C1_IRQn;
    323e:	f04f 0311 	mov.w	r3, #17
    3242:	8263      	strh	r3, [r4, #18]
        this_i2c->hw_reg = I2C1;
    3244:	f242 0300 	movw	r3, #8192	; 0x2000
    3248:	f2c4 0301 	movt	r3, #16385	; 0x4001
    324c:	6163      	str	r3, [r4, #20]
        this_i2c->hw_reg_bit = I2C1_BITBAND;
    324e:	f240 0300 	movw	r3, #0
    3252:	f2c4 2324 	movt	r3, #16932	; 0x4224
    3256:	61a3      	str	r3, [r4, #24]
        
        /* reset I2C1 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C1_SOFTRESET_MASK;
    3258:	f242 0300 	movw	r3, #8192	; 0x2000
    325c:	f2ce 0304 	movt	r3, #57348	; 0xe004
    3260:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    3262:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    3266:	631a      	str	r2, [r3, #48]	; 0x30
    3268:	f24e 1200 	movw	r2, #57600	; 0xe100
    326c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    3270:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    3274:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
        /* Clear any previously pended I2C1 interrupt */
        NVIC_ClearPendingIRQ( I2C1_IRQn );
        /* Take I2C1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C1_SOFTRESET_MASK;
    3278:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    327a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    327e:	631a      	str	r2, [r3, #48]	; 0x30
    3280:	e7b7      	b.n	31f2 <MSS_I2C_init+0x8a>
    3282:	bf00      	nop

00003284 <MSS_GPIO_init>:
/*-------------------------------------------------------------------------*//**
 * MSS_GPIO_init
 * See "mss_gpio.h" for details of how to use this function.
 */
void MSS_GPIO_init( void )
{
    3284:	b410      	push	{r4}
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
    3286:	f242 0300 	movw	r3, #8192	; 0x2000
    328a:	f2ce 0304 	movt	r3, #57348	; 0xe004
    328e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    3290:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    3294:	631a      	str	r2, [r3, #48]	; 0x30
    3296:	f04f 0300 	mov.w	r3, #0
    /* Clear any previously pended MSS GPIO interrupt */
    for ( i = 0U; i < NB_OF_GPIO; ++i )
    {
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[i] );
    329a:	f244 5014 	movw	r0, #17684	; 0x4514
    329e:	f2c0 0000 	movt	r0, #0
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    32a2:	f04f 0c01 	mov.w	ip, #1
    32a6:	f24e 1400 	movw	r4, #57600	; 0xe100
    32aa:	f2ce 0400 	movt	r4, #57344	; 0xe000
    32ae:	5ac2      	ldrh	r2, [r0, r3]
    32b0:	b211      	sxth	r1, r2
    32b2:	ea4f 1151 	mov.w	r1, r1, lsr #5
    32b6:	f002 021f 	and.w	r2, r2, #31
    32ba:	fa0c f202 	lsl.w	r2, ip, r2
    32be:	f101 0160 	add.w	r1, r1, #96	; 0x60
    32c2:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
    32c6:	f103 0302 	add.w	r3, r3, #2
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
    /* Clear any previously pended MSS GPIO interrupt */
    for ( i = 0U; i < NB_OF_GPIO; ++i )
    32ca:	2b40      	cmp	r3, #64	; 0x40
    32cc:	d1ef      	bne.n	32ae <MSS_GPIO_init+0x2a>
    {
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[i] );
    }
    /* Take MSS GPIO hardware out of reset. */
    SYSREG->SOFT_RST_CR &= ~SYSREG_GPIO_SOFTRESET_MASK;
    32ce:	f242 0300 	movw	r3, #8192	; 0x2000
    32d2:	f2ce 0304 	movt	r3, #57348	; 0xe004
    32d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    32d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    32dc:	631a      	str	r2, [r3, #48]	; 0x30
}
    32de:	bc10      	pop	{r4}
    32e0:	4770      	bx	lr
    32e2:	bf00      	nop

000032e4 <MSS_GPIO_config>:
    uint32_t config
)
{
    uint32_t gpio_idx = (uint32_t)port_id;
    
    ASSERT( gpio_idx < NB_OF_GPIO );
    32e4:	281f      	cmp	r0, #31
    32e6:	d901      	bls.n	32ec <MSS_GPIO_config+0x8>
    32e8:	be00      	bkpt	0x0000
    32ea:	4770      	bx	lr

    if ( gpio_idx < NB_OF_GPIO )
    {
        *(g_config_reg_lut[gpio_idx]) = config;
    32ec:	f244 5354 	movw	r3, #17748	; 0x4554
    32f0:	f2c0 0300 	movt	r3, #0
    32f4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    32f8:	6019      	str	r1, [r3, #0]
    32fa:	4770      	bx	lr

000032fc <MSS_GPIO_set_output>:
    uint8_t             value
)
{
    uint32_t gpio_idx = (uint32_t)port_id;
    
    ASSERT( gpio_idx < NB_OF_GPIO );
    32fc:	281f      	cmp	r0, #31
    32fe:	d901      	bls.n	3304 <MSS_GPIO_set_output+0x8>
    3300:	be00      	bkpt	0x0000
    3302:	4770      	bx	lr
    
    if ( gpio_idx < NB_OF_GPIO )
    {
        GPIO_BITBAND->GPIO_OUT[gpio_idx] = (uint32_t)value;
    3304:	f240 0300 	movw	r3, #0
    3308:	f2c4 2326 	movt	r3, #16934	; 0x4226
    330c:	f500 6088 	add.w	r0, r0, #1088	; 0x440
    3310:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    3314:	4770      	bx	lr
    3316:	bf00      	nop

00003318 <__get_PRIMASK>:
 */
uint32_t __get_PRIMASK(void)
{
  uint32_t result=0;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3318:	f3ef 8010 	mrs	r0, PRIMASK
  return(result);
}
    331c:	4770      	bx	lr
    331e:	bf00      	nop

00003320 <__set_PRIMASK>:
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
    3320:	f380 8810 	msr	PRIMASK, r0
}
    3324:	4770      	bx	lr
    3326:	bf00      	nop

00003328 <SystemInit>:
    /*
     * Do not make use of global variables or make any asumptions regarding
     * memory content if modifying this function. The memory content has not been
     * initialised by the time this function is called by the start-up code.
     */
}
    3328:	4770      	bx	lr
    332a:	bf00      	nop

0000332c <SystemCoreClockUpdate>:

/***************************************************************************//**
 *
 */
void SystemCoreClockUpdate (void)
{
    332c:	b430      	push	{r4, r5}
    332e:	b084      	sub	sp, #16
    uint32_t PclkDiv0;
    uint32_t PclkDiv1;
    uint32_t AceDiv;
    uint32_t FabDiv;

    const uint32_t pclk_div_lut[4] = { 1uL, 2uL, 4uL, 1uL };
    3330:	f244 53d4 	movw	r3, #17876	; 0x45d4
    3334:	f2c0 0300 	movt	r3, #0
    3338:	46ec      	mov	ip, sp
    333a:	cb0f      	ldmia	r3!, {r0, r1, r2, r3}
    333c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    /* Read PCLK dividers from system registers. Multiply the value read from
     * system register by two to get actual divider value. */
    PclkDiv0 = pclk_div_lut[((SYSREG->MSS_CLK_CR >> PCLK0_DIV_SHIFT) & PCLK_DIV_MASK)];
    3340:	f242 0300 	movw	r3, #8192	; 0x2000
    3344:	f2ce 0304 	movt	r3, #57348	; 0xe004
    3348:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    334a:	f002 020c 	and.w	r2, r2, #12
    334e:	a904      	add	r1, sp, #16
    3350:	440a      	add	r2, r1
    3352:	f852 5c10 	ldr.w	r5, [r2, #-16]
    PclkDiv1 = pclk_div_lut[((SYSREG->MSS_CLK_CR >> PCLK1_DIV_SHIFT) & PCLK_DIV_MASK)];
    3356:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    3358:	f3c2 1201 	ubfx	r2, r2, #4, #2
    335c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3360:	f852 4c10 	ldr.w	r4, [r2, #-16]
    AceDiv = pclk_div_lut[((SYSREG->MSS_CLK_CR >> ACE_DIV_SHIFT) & PCLK_DIV_MASK)];
    3364:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    3366:	f3c2 1281 	ubfx	r2, r2, #6, #2
    336a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    336e:	f852 0c10 	ldr.w	r0, [r2, #-16]
    {
        /* Compute the FPGA fabric frequency divider. */
        uint32_t obdiv;
        uint32_t obdivhalf;
        
        obdiv = (SYSREG->MSS_CCC_DIV_CR >> OBDIV_SHIFT) & OBDIV_MASK;
    3372:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
        obdivhalf = (SYSREG->MSS_CCC_DIV_CR >> OBDIVHALF_SHIFT) & OBDIVHALF_MASK;
    3374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        FabDiv = obdiv + 1uL;
    3376:	f3c1 2104 	ubfx	r1, r1, #8, #5
    337a:	f101 0101 	add.w	r1, r1, #1
        if ( obdivhalf != 0uL )
    337e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
        {
            FabDiv = FabDiv * 2uL;
    3382:	bf18      	it	ne
    3384:	0049      	lslne	r1, r1, #1
    
    uint32_t * p_sysboot_key = SYSBOOT_KEY_ADDR;
    uint32_t * p_idcode = IDCODE_LOCATION;
    uint32_t idcode;
	
    idcode = *p_idcode & ~IDCODE_DEV_REV_MASK;
    3386:	f240 2330 	movw	r3, #560	; 0x230
    338a:	f2c6 0308 	movt	r3, #24584	; 0x6008
    338e:	681a      	ldr	r2, [r3, #0]
	
    if ( A2F060IFX_ID == idcode )
    3390:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
    3394:	f241 13cf 	movw	r3, #4559	; 0x11cf
    3398:	f2c0 53a1 	movt	r3, #1441	; 0x5a1
    339c:	429a      	cmp	r2, r3
    339e:	d105      	bne.n	33ac <SystemCoreClockUpdate+0x80>
    {
        uint32_t *p_fclk = SYSBOOT_A2F060_FCLK_ADDR;
        fclk = *p_fclk;
    33a0:	f64e 732c 	movw	r3, #61228	; 0xef2c
    33a4:	f2c6 0301 	movt	r3, #24577	; 0x6001
    33a8:	681b      	ldr	r3, [r3, #0]
    33aa:	e028      	b.n	33fe <SystemCoreClockUpdate+0xd2>
    }
    else if ( SYSBOOT_KEY_VALUE == *p_sysboot_key )
    33ac:	f640 031c 	movw	r3, #2076	; 0x81c
    33b0:	f2c6 0308 	movt	r3, #24584	; 0x6008
    33b4:	681a      	ldr	r2, [r3, #0]
    33b6:	f244 3341 	movw	r3, #17217	; 0x4341
    33ba:	f6c4 4354 	movt	r3, #19540	; 0x4c54
    33be:	429a      	cmp	r2, r3
    33c0:	d11e      	bne.n	3400 <SystemCoreClockUpdate+0xd4>
    {
        /* Actel system boot programmed, check if it has the FCLK value stored. */
        uint32_t *p_sysboot_version = SYSBOOT_VERSION_ADDR;
        uint32_t sysboot_version = *p_sysboot_version;
    33c2:	f640 0340 	movw	r3, #2112	; 0x840
    33c6:	f2c6 0308 	movt	r3, #24584	; 0x6008
    33ca:	681a      	ldr	r2, [r3, #0]
        
        sysboot_version &= SYSBOOT_VERSION_MASK;
    33cc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
        
        if ( sysboot_version >= MIN_SYSBOOT_VERSION )
    33d0:	f240 3300 	movw	r3, #768	; 0x300
    33d4:	f2c0 0301 	movt	r3, #1
    33d8:	429a      	cmp	r2, r3
    33da:	d911      	bls.n	3400 <SystemCoreClockUpdate+0xd4>
        {
            /* Handle change of eNVM location of FCLK between 1.3.x and 2.x.x versions of the system boot. */
            if ( sysboot_version < SYSBOOT_VERSION_2_X )
    33dc:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
    33e0:	d205      	bcs.n	33ee <SystemCoreClockUpdate+0xc2>
            {
                /* Read FCLK value from MSS configurator generated configuration
                 * data stored in eNVM spare pages as part of system boot version 1.3.x
                 * configuration tables. */
                uint32_t *p_fclk = SYSBOOT_1_3_FCLK_ADDR;
                fclk = *p_fclk;
    33e2:	f241 632c 	movw	r3, #5676	; 0x162c
    33e6:	f2c6 0308 	movt	r3, #24584	; 0x6008
    33ea:	681b      	ldr	r3, [r3, #0]
    33ec:	e007      	b.n	33fe <SystemCoreClockUpdate+0xd2>
            }
            else if ( sysboot_version < MAX_SYSBOOT_VERSION )
    33ee:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
    33f2:	d205      	bcs.n	3400 <SystemCoreClockUpdate+0xd4>
            {
                /* Read FCLK value from MSS configurator generated configuration
                 * data stored in eNVM spare pages as part of system boot version 2.x.x
                 * configuration tables. */
                uint32_t *p_fclk = SYSBOOT_2_x_FCLK_ADDR;
                fclk = *p_fclk;
    33f4:	f641 63ac 	movw	r3, #7852	; 0x1eac
    33f8:	f2c6 0308 	movt	r3, #24584	; 0x6008
    33fc:	681b      	ldr	r3, [r3, #0]
                fclk = 0uL;
            }
        }
    }
    
    if ( 0uL == fclk )
    33fe:	b923      	cbnz	r3, 340a <SystemCoreClockUpdate+0xde>
        /* 
         * Could not retrieve FCLK from system boot configuration data. Fall back
         * to using SMARTFUSION_FCLK_FREQ which must then be defined as part of
         * project settings.
         */
        ASSERT( SMARTFUSION_FCLK_FREQ_DEFINED );
    3400:	be00      	bkpt	0x0000
    3402:	f647 0340 	movw	r3, #30784	; 0x7840
    3406:	f2c0 137d 	movt	r3, #381	; 0x17d
    }
    
    /* Retrieve FCLK from eNVM spare pages if Actel system boot programmed as part of the system. */
    
    /* Read system clock from eNVM spare pages. */
    SystemCoreClock = GetSystemClock();
    340a:	f240 0214 	movw	r2, #20
    340e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3412:	6013      	str	r3, [r2, #0]
    g_FrequencyPCLK0 = SystemCoreClock / PclkDiv0;
    3414:	f240 020c 	movw	r2, #12
    3418:	f2c2 0200 	movt	r2, #8192	; 0x2000
    341c:	fbb3 f5f5 	udiv	r5, r3, r5
    3420:	6015      	str	r5, [r2, #0]
    g_FrequencyPCLK1 = SystemCoreClock / PclkDiv1;
    3422:	f240 0210 	movw	r2, #16
    3426:	f2c2 0200 	movt	r2, #8192	; 0x2000
    342a:	fbb3 f4f4 	udiv	r4, r3, r4
    342e:	6014      	str	r4, [r2, #0]
    g_FrequencyACE = SystemCoreClock / AceDiv;
    3430:	f240 0204 	movw	r2, #4
    3434:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3438:	fbb3 f0f0 	udiv	r0, r3, r0
    343c:	6010      	str	r0, [r2, #0]
    g_FrequencyFPGA = SystemCoreClock / FabDiv;
    343e:	f240 0208 	movw	r2, #8
    3442:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3446:	fbb3 f1f1 	udiv	r1, r3, r1
    344a:	6011      	str	r1, [r2, #0]
    
    /* Keep SystemFrequency as well as SystemCoreClock for legacy reasons. */
    SystemFrequency = SystemCoreClock;
    344c:	f240 0218 	movw	r2, #24
    3450:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3454:	6013      	str	r3, [r2, #0]
}
    3456:	b004      	add	sp, #16
    3458:	bc30      	pop	{r4, r5}
    345a:	4770      	bx	lr

0000345c <ACE_PPE_Flag0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag0_IRQHandler( void )
#else
void ACE_PPE_Flag0_IRQHandler( void )
#endif
{
    345c:	4668      	mov	r0, sp
    345e:	f020 0107 	bic.w	r1, r0, #7
    3462:	468d      	mov	sp, r1
    3464:	b401      	push	{r0}
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    3466:	f24e 1300 	movw	r3, #57600	; 0xe100
    346a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    346e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    3472:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG0 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag0_IRQn );
}
    3476:	bc01      	pop	{r0}
    3478:	4685      	mov	sp, r0
    347a:	4770      	bx	lr

0000347c <ACE_PPE_Flag1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag1_IRQHandler( void )
#else
void ACE_PPE_Flag1_IRQHandler( void )
#endif
{
    347c:	4668      	mov	r0, sp
    347e:	f020 0107 	bic.w	r1, r0, #7
    3482:	468d      	mov	sp, r1
    3484:	b401      	push	{r0}
    3486:	f24e 1300 	movw	r3, #57600	; 0xe100
    348a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    348e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    3492:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG1 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag1_IRQn );
}
    3496:	bc01      	pop	{r0}
    3498:	4685      	mov	sp, r0
    349a:	4770      	bx	lr

0000349c <ACE_PPE_Flag2_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag2_IRQHandler( void )
#else
void ACE_PPE_Flag2_IRQHandler( void )
#endif
{
    349c:	4668      	mov	r0, sp
    349e:	f020 0107 	bic.w	r1, r0, #7
    34a2:	468d      	mov	sp, r1
    34a4:	b401      	push	{r0}
    34a6:	f24e 1300 	movw	r3, #57600	; 0xe100
    34aa:	f2ce 0300 	movt	r3, #57344	; 0xe000
    34ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    34b2:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG2 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag2_IRQn );
}
    34b6:	bc01      	pop	{r0}
    34b8:	4685      	mov	sp, r0
    34ba:	4770      	bx	lr

000034bc <ACE_PPE_Flag3_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag3_IRQHandler( void )
#else
void ACE_PPE_Flag3_IRQHandler( void )
#endif
{
    34bc:	4668      	mov	r0, sp
    34be:	f020 0107 	bic.w	r1, r0, #7
    34c2:	468d      	mov	sp, r1
    34c4:	b401      	push	{r0}
    34c6:	f24e 1300 	movw	r3, #57600	; 0xe100
    34ca:	f2ce 0300 	movt	r3, #57344	; 0xe000
    34ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    34d2:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG3 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag3_IRQn );
}
    34d6:	bc01      	pop	{r0}
    34d8:	4685      	mov	sp, r0
    34da:	4770      	bx	lr

000034dc <ACE_PPE_Flag4_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag4_IRQHandler( void )
#else
void ACE_PPE_Flag4_IRQHandler( void )
#endif
{
    34dc:	4668      	mov	r0, sp
    34de:	f020 0107 	bic.w	r1, r0, #7
    34e2:	468d      	mov	sp, r1
    34e4:	b401      	push	{r0}
    34e6:	f24e 1300 	movw	r3, #57600	; 0xe100
    34ea:	f2ce 0300 	movt	r3, #57344	; 0xe000
    34ee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    34f2:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG4 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag4_IRQn );
}
    34f6:	bc01      	pop	{r0}
    34f8:	4685      	mov	sp, r0
    34fa:	4770      	bx	lr

000034fc <ACE_PPE_Flag5_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag5_IRQHandler( void )
#else
void ACE_PPE_Flag5_IRQHandler( void )
#endif
{
    34fc:	4668      	mov	r0, sp
    34fe:	f020 0107 	bic.w	r1, r0, #7
    3502:	468d      	mov	sp, r1
    3504:	b401      	push	{r0}
    3506:	f24e 1300 	movw	r3, #57600	; 0xe100
    350a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    350e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    3512:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG5 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag5_IRQn );
}
    3516:	bc01      	pop	{r0}
    3518:	4685      	mov	sp, r0
    351a:	4770      	bx	lr

0000351c <ACE_PPE_Flag6_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag6_IRQHandler( void )
#else
void ACE_PPE_Flag6_IRQHandler( void )
#endif
{
    351c:	4668      	mov	r0, sp
    351e:	f020 0107 	bic.w	r1, r0, #7
    3522:	468d      	mov	sp, r1
    3524:	b401      	push	{r0}
    3526:	f24e 1300 	movw	r3, #57600	; 0xe100
    352a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    352e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3532:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG6 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag6_IRQn );
}
    3536:	bc01      	pop	{r0}
    3538:	4685      	mov	sp, r0
    353a:	4770      	bx	lr

0000353c <ACE_PPE_Flag7_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag7_IRQHandler( void )
#else
void ACE_PPE_Flag7_IRQHandler( void )
#endif
{
    353c:	4668      	mov	r0, sp
    353e:	f020 0107 	bic.w	r1, r0, #7
    3542:	468d      	mov	sp, r1
    3544:	b401      	push	{r0}
    3546:	f24e 1300 	movw	r3, #57600	; 0xe100
    354a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    354e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    3552:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG7 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag7_IRQn );
}
    3556:	bc01      	pop	{r0}
    3558:	4685      	mov	sp, r0
    355a:	4770      	bx	lr

0000355c <ACE_PPE_Flag8_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag8_IRQHandler( void )
#else
void ACE_PPE_Flag8_IRQHandler( void )
#endif
{
    355c:	4668      	mov	r0, sp
    355e:	f020 0107 	bic.w	r1, r0, #7
    3562:	468d      	mov	sp, r1
    3564:	b401      	push	{r0}
    3566:	f24e 1300 	movw	r3, #57600	; 0xe100
    356a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    356e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3572:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG8 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag8_IRQn );
}
    3576:	bc01      	pop	{r0}
    3578:	4685      	mov	sp, r0
    357a:	4770      	bx	lr

0000357c <ACE_PPE_Flag9_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag9_IRQHandler( void )
#else
void ACE_PPE_Flag9_IRQHandler( void )
#endif
{
    357c:	4668      	mov	r0, sp
    357e:	f020 0107 	bic.w	r1, r0, #7
    3582:	468d      	mov	sp, r1
    3584:	b401      	push	{r0}
    3586:	f24e 1300 	movw	r3, #57600	; 0xe100
    358a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    358e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3592:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG9 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag9_IRQn );
}
    3596:	bc01      	pop	{r0}
    3598:	4685      	mov	sp, r0
    359a:	4770      	bx	lr

0000359c <ACE_PPE_Flag10_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag10_IRQHandler( void )
#else
void ACE_PPE_Flag10_IRQHandler( void )
#endif
{
    359c:	4668      	mov	r0, sp
    359e:	f020 0107 	bic.w	r1, r0, #7
    35a2:	468d      	mov	sp, r1
    35a4:	b401      	push	{r0}
    35a6:	f24e 1300 	movw	r3, #57600	; 0xe100
    35aa:	f2ce 0300 	movt	r3, #57344	; 0xe000
    35ae:	f04f 0201 	mov.w	r2, #1
    35b2:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG10 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag10_IRQn );
}
    35b6:	bc01      	pop	{r0}
    35b8:	4685      	mov	sp, r0
    35ba:	4770      	bx	lr

000035bc <ACE_PPE_Flag11_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag11_IRQHandler( void )
#else
void ACE_PPE_Flag11_IRQHandler( void )
#endif
{
    35bc:	4668      	mov	r0, sp
    35be:	f020 0107 	bic.w	r1, r0, #7
    35c2:	468d      	mov	sp, r1
    35c4:	b401      	push	{r0}
    35c6:	f24e 1300 	movw	r3, #57600	; 0xe100
    35ca:	f2ce 0300 	movt	r3, #57344	; 0xe000
    35ce:	f04f 0202 	mov.w	r2, #2
    35d2:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG11 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag11_IRQn );
}
    35d6:	bc01      	pop	{r0}
    35d8:	4685      	mov	sp, r0
    35da:	4770      	bx	lr

000035dc <ACE_PPE_Flag12_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag12_IRQHandler( void )
#else
void ACE_PPE_Flag12_IRQHandler( void )
#endif
{
    35dc:	4668      	mov	r0, sp
    35de:	f020 0107 	bic.w	r1, r0, #7
    35e2:	468d      	mov	sp, r1
    35e4:	b401      	push	{r0}
    35e6:	f24e 1300 	movw	r3, #57600	; 0xe100
    35ea:	f2ce 0300 	movt	r3, #57344	; 0xe000
    35ee:	f04f 0204 	mov.w	r2, #4
    35f2:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG12 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag12_IRQn );
}
    35f6:	bc01      	pop	{r0}
    35f8:	4685      	mov	sp, r0
    35fa:	4770      	bx	lr

000035fc <ACE_PPE_Flag13_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag13_IRQHandler( void )
#else
void ACE_PPE_Flag13_IRQHandler( void )
#endif
{
    35fc:	4668      	mov	r0, sp
    35fe:	f020 0107 	bic.w	r1, r0, #7
    3602:	468d      	mov	sp, r1
    3604:	b401      	push	{r0}
    3606:	f24e 1300 	movw	r3, #57600	; 0xe100
    360a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    360e:	f04f 0208 	mov.w	r2, #8
    3612:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG13 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag13_IRQn );
}
    3616:	bc01      	pop	{r0}
    3618:	4685      	mov	sp, r0
    361a:	4770      	bx	lr

0000361c <ACE_PPE_Flag14_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag14_IRQHandler( void )
#else
void ACE_PPE_Flag14_IRQHandler( void )
#endif
{
    361c:	4668      	mov	r0, sp
    361e:	f020 0107 	bic.w	r1, r0, #7
    3622:	468d      	mov	sp, r1
    3624:	b401      	push	{r0}
    3626:	f24e 1300 	movw	r3, #57600	; 0xe100
    362a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    362e:	f04f 0210 	mov.w	r2, #16
    3632:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG14 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag14_IRQn );
}
    3636:	bc01      	pop	{r0}
    3638:	4685      	mov	sp, r0
    363a:	4770      	bx	lr

0000363c <ACE_PPE_Flag15_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag15_IRQHandler( void )
#else
void ACE_PPE_Flag15_IRQHandler( void )
#endif
{
    363c:	4668      	mov	r0, sp
    363e:	f020 0107 	bic.w	r1, r0, #7
    3642:	468d      	mov	sp, r1
    3644:	b401      	push	{r0}
    3646:	f24e 1300 	movw	r3, #57600	; 0xe100
    364a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    364e:	f04f 0220 	mov.w	r2, #32
    3652:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG15 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag15_IRQn );
}
    3656:	bc01      	pop	{r0}
    3658:	4685      	mov	sp, r0
    365a:	4770      	bx	lr

0000365c <ACE_PPE_Flag16_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag16_IRQHandler( void )
#else
void ACE_PPE_Flag16_IRQHandler( void )
#endif
{
    365c:	4668      	mov	r0, sp
    365e:	f020 0107 	bic.w	r1, r0, #7
    3662:	468d      	mov	sp, r1
    3664:	b401      	push	{r0}
    3666:	f24e 1300 	movw	r3, #57600	; 0xe100
    366a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    366e:	f04f 0240 	mov.w	r2, #64	; 0x40
    3672:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG16 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag16_IRQn );
}
    3676:	bc01      	pop	{r0}
    3678:	4685      	mov	sp, r0
    367a:	4770      	bx	lr

0000367c <ACE_PPE_Flag17_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag17_IRQHandler( void )
#else
void ACE_PPE_Flag17_IRQHandler( void )
#endif
{
    367c:	4668      	mov	r0, sp
    367e:	f020 0107 	bic.w	r1, r0, #7
    3682:	468d      	mov	sp, r1
    3684:	b401      	push	{r0}
    3686:	f24e 1300 	movw	r3, #57600	; 0xe100
    368a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    368e:	f04f 0280 	mov.w	r2, #128	; 0x80
    3692:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG17 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag17_IRQn );
}
    3696:	bc01      	pop	{r0}
    3698:	4685      	mov	sp, r0
    369a:	4770      	bx	lr

0000369c <ACE_PPE_Flag18_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag18_IRQHandler( void )
#else
void ACE_PPE_Flag18_IRQHandler( void )
#endif
{
    369c:	4668      	mov	r0, sp
    369e:	f020 0107 	bic.w	r1, r0, #7
    36a2:	468d      	mov	sp, r1
    36a4:	b401      	push	{r0}
    36a6:	f24e 1300 	movw	r3, #57600	; 0xe100
    36aa:	f2ce 0300 	movt	r3, #57344	; 0xe000
    36ae:	f44f 7280 	mov.w	r2, #256	; 0x100
    36b2:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG18 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag18_IRQn );
}
    36b6:	bc01      	pop	{r0}
    36b8:	4685      	mov	sp, r0
    36ba:	4770      	bx	lr

000036bc <ACE_PPE_Flag19_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag19_IRQHandler( void )
#else
void ACE_PPE_Flag19_IRQHandler( void )
#endif
{
    36bc:	4668      	mov	r0, sp
    36be:	f020 0107 	bic.w	r1, r0, #7
    36c2:	468d      	mov	sp, r1
    36c4:	b401      	push	{r0}
    36c6:	f24e 1300 	movw	r3, #57600	; 0xe100
    36ca:	f2ce 0300 	movt	r3, #57344	; 0xe000
    36ce:	f44f 7200 	mov.w	r2, #512	; 0x200
    36d2:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG19 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag19_IRQn );
}
    36d6:	bc01      	pop	{r0}
    36d8:	4685      	mov	sp, r0
    36da:	4770      	bx	lr

000036dc <ACE_PPE_Flag20_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag20_IRQHandler( void )
#else
void ACE_PPE_Flag20_IRQHandler( void )
#endif
{
    36dc:	4668      	mov	r0, sp
    36de:	f020 0107 	bic.w	r1, r0, #7
    36e2:	468d      	mov	sp, r1
    36e4:	b401      	push	{r0}
    36e6:	f24e 1300 	movw	r3, #57600	; 0xe100
    36ea:	f2ce 0300 	movt	r3, #57344	; 0xe000
    36ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
    36f2:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG20 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag20_IRQn );
}
    36f6:	bc01      	pop	{r0}
    36f8:	4685      	mov	sp, r0
    36fa:	4770      	bx	lr

000036fc <ACE_PPE_Flag21_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag21_IRQHandler( void )
#else
void ACE_PPE_Flag21_IRQHandler( void )
#endif
{
    36fc:	4668      	mov	r0, sp
    36fe:	f020 0107 	bic.w	r1, r0, #7
    3702:	468d      	mov	sp, r1
    3704:	b401      	push	{r0}
    3706:	f24e 1300 	movw	r3, #57600	; 0xe100
    370a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    370e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    3712:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG21 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag21_IRQn );
}
    3716:	bc01      	pop	{r0}
    3718:	4685      	mov	sp, r0
    371a:	4770      	bx	lr

0000371c <ACE_PPE_Flag22_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag22_IRQHandler( void )
#else
void ACE_PPE_Flag22_IRQHandler( void )
#endif
{
    371c:	4668      	mov	r0, sp
    371e:	f020 0107 	bic.w	r1, r0, #7
    3722:	468d      	mov	sp, r1
    3724:	b401      	push	{r0}
    3726:	f24e 1300 	movw	r3, #57600	; 0xe100
    372a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    372e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    3732:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG22 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag22_IRQn );
}
    3736:	bc01      	pop	{r0}
    3738:	4685      	mov	sp, r0
    373a:	4770      	bx	lr

0000373c <ACE_PPE_Flag23_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag23_IRQHandler( void )
#else
void ACE_PPE_Flag23_IRQHandler( void )
#endif
{
    373c:	4668      	mov	r0, sp
    373e:	f020 0107 	bic.w	r1, r0, #7
    3742:	468d      	mov	sp, r1
    3744:	b401      	push	{r0}
    3746:	f24e 1300 	movw	r3, #57600	; 0xe100
    374a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    374e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    3752:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG23 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag23_IRQn );
}
    3756:	bc01      	pop	{r0}
    3758:	4685      	mov	sp, r0
    375a:	4770      	bx	lr

0000375c <ACE_PPE_Flag24_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag24_IRQHandler( void )
#else
void ACE_PPE_Flag24_IRQHandler( void )
#endif
{
    375c:	4668      	mov	r0, sp
    375e:	f020 0107 	bic.w	r1, r0, #7
    3762:	468d      	mov	sp, r1
    3764:	b401      	push	{r0}
    3766:	f24e 1300 	movw	r3, #57600	; 0xe100
    376a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    376e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3772:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG24 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag24_IRQn );
}
    3776:	bc01      	pop	{r0}
    3778:	4685      	mov	sp, r0
    377a:	4770      	bx	lr

0000377c <ACE_PPE_Flag25_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag25_IRQHandler( void )
#else
void ACE_PPE_Flag25_IRQHandler( void )
#endif
{
    377c:	4668      	mov	r0, sp
    377e:	f020 0107 	bic.w	r1, r0, #7
    3782:	468d      	mov	sp, r1
    3784:	b401      	push	{r0}
    3786:	f24e 1300 	movw	r3, #57600	; 0xe100
    378a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    378e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    3792:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG25 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag25_IRQn );
}
    3796:	bc01      	pop	{r0}
    3798:	4685      	mov	sp, r0
    379a:	4770      	bx	lr

0000379c <ACE_PPE_Flag26_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag26_IRQHandler( void )
#else
void ACE_PPE_Flag26_IRQHandler( void )
#endif
{
    379c:	4668      	mov	r0, sp
    379e:	f020 0107 	bic.w	r1, r0, #7
    37a2:	468d      	mov	sp, r1
    37a4:	b401      	push	{r0}
    37a6:	f24e 1300 	movw	r3, #57600	; 0xe100
    37aa:	f2ce 0300 	movt	r3, #57344	; 0xe000
    37ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    37b2:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG26 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag26_IRQn );
}
    37b6:	bc01      	pop	{r0}
    37b8:	4685      	mov	sp, r0
    37ba:	4770      	bx	lr

000037bc <ACE_PPE_Flag27_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag27_IRQHandler( void )
#else
void ACE_PPE_Flag27_IRQHandler( void )
#endif
{
    37bc:	4668      	mov	r0, sp
    37be:	f020 0107 	bic.w	r1, r0, #7
    37c2:	468d      	mov	sp, r1
    37c4:	b401      	push	{r0}
    37c6:	f24e 1300 	movw	r3, #57600	; 0xe100
    37ca:	f2ce 0300 	movt	r3, #57344	; 0xe000
    37ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    37d2:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG27 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag27_IRQn );
}
    37d6:	bc01      	pop	{r0}
    37d8:	4685      	mov	sp, r0
    37da:	4770      	bx	lr

000037dc <ACE_PPE_Flag28_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag28_IRQHandler( void )
#else
void ACE_PPE_Flag28_IRQHandler( void )
#endif
{
    37dc:	4668      	mov	r0, sp
    37de:	f020 0107 	bic.w	r1, r0, #7
    37e2:	468d      	mov	sp, r1
    37e4:	b401      	push	{r0}
    37e6:	f24e 1300 	movw	r3, #57600	; 0xe100
    37ea:	f2ce 0300 	movt	r3, #57344	; 0xe000
    37ee:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    37f2:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG28 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag28_IRQn );
}
    37f6:	bc01      	pop	{r0}
    37f8:	4685      	mov	sp, r0
    37fa:	4770      	bx	lr

000037fc <ACE_PPE_Flag29_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag29_IRQHandler( void )
#else
void ACE_PPE_Flag29_IRQHandler( void )
#endif
{
    37fc:	4668      	mov	r0, sp
    37fe:	f020 0107 	bic.w	r1, r0, #7
    3802:	468d      	mov	sp, r1
    3804:	b401      	push	{r0}
    3806:	f24e 1300 	movw	r3, #57600	; 0xe100
    380a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    380e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    3812:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG29 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag29_IRQn );
}
    3816:	bc01      	pop	{r0}
    3818:	4685      	mov	sp, r0
    381a:	4770      	bx	lr

0000381c <ACE_PPE_Flag30_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag30_IRQHandler( void )
#else
void ACE_PPE_Flag30_IRQHandler( void )
#endif
{
    381c:	4668      	mov	r0, sp
    381e:	f020 0107 	bic.w	r1, r0, #7
    3822:	468d      	mov	sp, r1
    3824:	b401      	push	{r0}
    3826:	f24e 1300 	movw	r3, #57600	; 0xe100
    382a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    382e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    3832:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG30 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag30_IRQn );
}
    3836:	bc01      	pop	{r0}
    3838:	4685      	mov	sp, r0
    383a:	4770      	bx	lr

0000383c <ACE_PPE_Flag31_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag31_IRQHandler( void )
#else
void ACE_PPE_Flag31_IRQHandler( void )
#endif
{
    383c:	4668      	mov	r0, sp
    383e:	f020 0107 	bic.w	r1, r0, #7
    3842:	468d      	mov	sp, r1
    3844:	b401      	push	{r0}
    3846:	f24e 1300 	movw	r3, #57600	; 0xe100
    384a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    384e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    3852:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG31 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag31_IRQn );
}
    3856:	bc01      	pop	{r0}
    3858:	4685      	mov	sp, r0
    385a:	4770      	bx	lr

0000385c <__aeabi_drsub>:
    385c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    3860:	e002      	b.n	3868 <__adddf3>
    3862:	bf00      	nop

00003864 <__aeabi_dsub>:
    3864:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00003868 <__adddf3>:
    3868:	b530      	push	{r4, r5, lr}
    386a:	ea4f 0441 	mov.w	r4, r1, lsl #1
    386e:	ea4f 0543 	mov.w	r5, r3, lsl #1
    3872:	ea94 0f05 	teq	r4, r5
    3876:	bf08      	it	eq
    3878:	ea90 0f02 	teqeq	r0, r2
    387c:	bf1f      	itttt	ne
    387e:	ea54 0c00 	orrsne.w	ip, r4, r0
    3882:	ea55 0c02 	orrsne.w	ip, r5, r2
    3886:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    388a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    388e:	f000 80e2 	beq.w	3a56 <__adddf3+0x1ee>
    3892:	ea4f 5454 	mov.w	r4, r4, lsr #21
    3896:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    389a:	bfb8      	it	lt
    389c:	426d      	neglt	r5, r5
    389e:	dd0c      	ble.n	38ba <__adddf3+0x52>
    38a0:	442c      	add	r4, r5
    38a2:	ea80 0202 	eor.w	r2, r0, r2
    38a6:	ea81 0303 	eor.w	r3, r1, r3
    38aa:	ea82 0000 	eor.w	r0, r2, r0
    38ae:	ea83 0101 	eor.w	r1, r3, r1
    38b2:	ea80 0202 	eor.w	r2, r0, r2
    38b6:	ea81 0303 	eor.w	r3, r1, r3
    38ba:	2d36      	cmp	r5, #54	; 0x36
    38bc:	bf88      	it	hi
    38be:	bd30      	pophi	{r4, r5, pc}
    38c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    38c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
    38c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    38cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    38d0:	d002      	beq.n	38d8 <__adddf3+0x70>
    38d2:	4240      	negs	r0, r0
    38d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    38d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    38dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
    38e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    38e4:	d002      	beq.n	38ec <__adddf3+0x84>
    38e6:	4252      	negs	r2, r2
    38e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    38ec:	ea94 0f05 	teq	r4, r5
    38f0:	f000 80a7 	beq.w	3a42 <__adddf3+0x1da>
    38f4:	f1a4 0401 	sub.w	r4, r4, #1
    38f8:	f1d5 0e20 	rsbs	lr, r5, #32
    38fc:	db0d      	blt.n	391a <__adddf3+0xb2>
    38fe:	fa02 fc0e 	lsl.w	ip, r2, lr
    3902:	fa22 f205 	lsr.w	r2, r2, r5
    3906:	1880      	adds	r0, r0, r2
    3908:	f141 0100 	adc.w	r1, r1, #0
    390c:	fa03 f20e 	lsl.w	r2, r3, lr
    3910:	1880      	adds	r0, r0, r2
    3912:	fa43 f305 	asr.w	r3, r3, r5
    3916:	4159      	adcs	r1, r3
    3918:	e00e      	b.n	3938 <__adddf3+0xd0>
    391a:	f1a5 0520 	sub.w	r5, r5, #32
    391e:	f10e 0e20 	add.w	lr, lr, #32
    3922:	2a01      	cmp	r2, #1
    3924:	fa03 fc0e 	lsl.w	ip, r3, lr
    3928:	bf28      	it	cs
    392a:	f04c 0c02 	orrcs.w	ip, ip, #2
    392e:	fa43 f305 	asr.w	r3, r3, r5
    3932:	18c0      	adds	r0, r0, r3
    3934:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    3938:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    393c:	d507      	bpl.n	394e <__adddf3+0xe6>
    393e:	f04f 0e00 	mov.w	lr, #0
    3942:	f1dc 0c00 	rsbs	ip, ip, #0
    3946:	eb7e 0000 	sbcs.w	r0, lr, r0
    394a:	eb6e 0101 	sbc.w	r1, lr, r1
    394e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    3952:	d31b      	bcc.n	398c <__adddf3+0x124>
    3954:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    3958:	d30c      	bcc.n	3974 <__adddf3+0x10c>
    395a:	0849      	lsrs	r1, r1, #1
    395c:	ea5f 0030 	movs.w	r0, r0, rrx
    3960:	ea4f 0c3c 	mov.w	ip, ip, rrx
    3964:	f104 0401 	add.w	r4, r4, #1
    3968:	ea4f 5244 	mov.w	r2, r4, lsl #21
    396c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    3970:	f080 809a 	bcs.w	3aa8 <__adddf3+0x240>
    3974:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    3978:	bf08      	it	eq
    397a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    397e:	f150 0000 	adcs.w	r0, r0, #0
    3982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    3986:	ea41 0105 	orr.w	r1, r1, r5
    398a:	bd30      	pop	{r4, r5, pc}
    398c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    3990:	4140      	adcs	r0, r0
    3992:	eb41 0101 	adc.w	r1, r1, r1
    3996:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    399a:	f1a4 0401 	sub.w	r4, r4, #1
    399e:	d1e9      	bne.n	3974 <__adddf3+0x10c>
    39a0:	f091 0f00 	teq	r1, #0
    39a4:	bf04      	itt	eq
    39a6:	4601      	moveq	r1, r0
    39a8:	2000      	moveq	r0, #0
    39aa:	fab1 f381 	clz	r3, r1
    39ae:	bf08      	it	eq
    39b0:	3320      	addeq	r3, #32
    39b2:	f1a3 030b 	sub.w	r3, r3, #11
    39b6:	f1b3 0220 	subs.w	r2, r3, #32
    39ba:	da0c      	bge.n	39d6 <__adddf3+0x16e>
    39bc:	320c      	adds	r2, #12
    39be:	dd08      	ble.n	39d2 <__adddf3+0x16a>
    39c0:	f102 0c14 	add.w	ip, r2, #20
    39c4:	f1c2 020c 	rsb	r2, r2, #12
    39c8:	fa01 f00c 	lsl.w	r0, r1, ip
    39cc:	fa21 f102 	lsr.w	r1, r1, r2
    39d0:	e00c      	b.n	39ec <__adddf3+0x184>
    39d2:	f102 0214 	add.w	r2, r2, #20
    39d6:	bfd8      	it	le
    39d8:	f1c2 0c20 	rsble	ip, r2, #32
    39dc:	fa01 f102 	lsl.w	r1, r1, r2
    39e0:	fa20 fc0c 	lsr.w	ip, r0, ip
    39e4:	bfdc      	itt	le
    39e6:	ea41 010c 	orrle.w	r1, r1, ip
    39ea:	4090      	lslle	r0, r2
    39ec:	1ae4      	subs	r4, r4, r3
    39ee:	bfa2      	ittt	ge
    39f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    39f4:	4329      	orrge	r1, r5
    39f6:	bd30      	popge	{r4, r5, pc}
    39f8:	ea6f 0404 	mvn.w	r4, r4
    39fc:	3c1f      	subs	r4, #31
    39fe:	da1c      	bge.n	3a3a <__adddf3+0x1d2>
    3a00:	340c      	adds	r4, #12
    3a02:	dc0e      	bgt.n	3a22 <__adddf3+0x1ba>
    3a04:	f104 0414 	add.w	r4, r4, #20
    3a08:	f1c4 0220 	rsb	r2, r4, #32
    3a0c:	fa20 f004 	lsr.w	r0, r0, r4
    3a10:	fa01 f302 	lsl.w	r3, r1, r2
    3a14:	ea40 0003 	orr.w	r0, r0, r3
    3a18:	fa21 f304 	lsr.w	r3, r1, r4
    3a1c:	ea45 0103 	orr.w	r1, r5, r3
    3a20:	bd30      	pop	{r4, r5, pc}
    3a22:	f1c4 040c 	rsb	r4, r4, #12
    3a26:	f1c4 0220 	rsb	r2, r4, #32
    3a2a:	fa20 f002 	lsr.w	r0, r0, r2
    3a2e:	fa01 f304 	lsl.w	r3, r1, r4
    3a32:	ea40 0003 	orr.w	r0, r0, r3
    3a36:	4629      	mov	r1, r5
    3a38:	bd30      	pop	{r4, r5, pc}
    3a3a:	fa21 f004 	lsr.w	r0, r1, r4
    3a3e:	4629      	mov	r1, r5
    3a40:	bd30      	pop	{r4, r5, pc}
    3a42:	f094 0f00 	teq	r4, #0
    3a46:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    3a4a:	bf06      	itte	eq
    3a4c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    3a50:	3401      	addeq	r4, #1
    3a52:	3d01      	subne	r5, #1
    3a54:	e74e      	b.n	38f4 <__adddf3+0x8c>
    3a56:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    3a5a:	bf18      	it	ne
    3a5c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    3a60:	d029      	beq.n	3ab6 <__adddf3+0x24e>
    3a62:	ea94 0f05 	teq	r4, r5
    3a66:	bf08      	it	eq
    3a68:	ea90 0f02 	teqeq	r0, r2
    3a6c:	d005      	beq.n	3a7a <__adddf3+0x212>
    3a6e:	ea54 0c00 	orrs.w	ip, r4, r0
    3a72:	bf04      	itt	eq
    3a74:	4619      	moveq	r1, r3
    3a76:	4610      	moveq	r0, r2
    3a78:	bd30      	pop	{r4, r5, pc}
    3a7a:	ea91 0f03 	teq	r1, r3
    3a7e:	bf1e      	ittt	ne
    3a80:	2100      	movne	r1, #0
    3a82:	2000      	movne	r0, #0
    3a84:	bd30      	popne	{r4, r5, pc}
    3a86:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    3a8a:	d105      	bne.n	3a98 <__adddf3+0x230>
    3a8c:	0040      	lsls	r0, r0, #1
    3a8e:	4149      	adcs	r1, r1
    3a90:	bf28      	it	cs
    3a92:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    3a96:	bd30      	pop	{r4, r5, pc}
    3a98:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    3a9c:	bf3c      	itt	cc
    3a9e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    3aa2:	bd30      	popcc	{r4, r5, pc}
    3aa4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    3aa8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    3aac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    3ab0:	f04f 0000 	mov.w	r0, #0
    3ab4:	bd30      	pop	{r4, r5, pc}
    3ab6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    3aba:	bf1a      	itte	ne
    3abc:	4619      	movne	r1, r3
    3abe:	4610      	movne	r0, r2
    3ac0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    3ac4:	bf1c      	itt	ne
    3ac6:	460b      	movne	r3, r1
    3ac8:	4602      	movne	r2, r0
    3aca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    3ace:	bf06      	itte	eq
    3ad0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    3ad4:	ea91 0f03 	teqeq	r1, r3
    3ad8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    3adc:	bd30      	pop	{r4, r5, pc}
    3ade:	bf00      	nop

00003ae0 <__aeabi_ui2d>:
    3ae0:	f090 0f00 	teq	r0, #0
    3ae4:	bf04      	itt	eq
    3ae6:	2100      	moveq	r1, #0
    3ae8:	4770      	bxeq	lr
    3aea:	b530      	push	{r4, r5, lr}
    3aec:	f44f 6480 	mov.w	r4, #1024	; 0x400
    3af0:	f104 0432 	add.w	r4, r4, #50	; 0x32
    3af4:	f04f 0500 	mov.w	r5, #0
    3af8:	f04f 0100 	mov.w	r1, #0
    3afc:	e750      	b.n	39a0 <__adddf3+0x138>
    3afe:	bf00      	nop

00003b00 <__aeabi_i2d>:
    3b00:	f090 0f00 	teq	r0, #0
    3b04:	bf04      	itt	eq
    3b06:	2100      	moveq	r1, #0
    3b08:	4770      	bxeq	lr
    3b0a:	b530      	push	{r4, r5, lr}
    3b0c:	f44f 6480 	mov.w	r4, #1024	; 0x400
    3b10:	f104 0432 	add.w	r4, r4, #50	; 0x32
    3b14:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    3b18:	bf48      	it	mi
    3b1a:	4240      	negmi	r0, r0
    3b1c:	f04f 0100 	mov.w	r1, #0
    3b20:	e73e      	b.n	39a0 <__adddf3+0x138>
    3b22:	bf00      	nop

00003b24 <__aeabi_f2d>:
    3b24:	0042      	lsls	r2, r0, #1
    3b26:	ea4f 01e2 	mov.w	r1, r2, asr #3
    3b2a:	ea4f 0131 	mov.w	r1, r1, rrx
    3b2e:	ea4f 7002 	mov.w	r0, r2, lsl #28
    3b32:	bf1f      	itttt	ne
    3b34:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    3b38:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    3b3c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    3b40:	4770      	bxne	lr
    3b42:	f092 0f00 	teq	r2, #0
    3b46:	bf14      	ite	ne
    3b48:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    3b4c:	4770      	bxeq	lr
    3b4e:	b530      	push	{r4, r5, lr}
    3b50:	f44f 7460 	mov.w	r4, #896	; 0x380
    3b54:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    3b58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    3b5c:	e720      	b.n	39a0 <__adddf3+0x138>
    3b5e:	bf00      	nop

00003b60 <__aeabi_ul2d>:
    3b60:	ea50 0201 	orrs.w	r2, r0, r1
    3b64:	bf08      	it	eq
    3b66:	4770      	bxeq	lr
    3b68:	b530      	push	{r4, r5, lr}
    3b6a:	f04f 0500 	mov.w	r5, #0
    3b6e:	e00a      	b.n	3b86 <__aeabi_l2d+0x16>

00003b70 <__aeabi_l2d>:
    3b70:	ea50 0201 	orrs.w	r2, r0, r1
    3b74:	bf08      	it	eq
    3b76:	4770      	bxeq	lr
    3b78:	b530      	push	{r4, r5, lr}
    3b7a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    3b7e:	d502      	bpl.n	3b86 <__aeabi_l2d+0x16>
    3b80:	4240      	negs	r0, r0
    3b82:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    3b86:	f44f 6480 	mov.w	r4, #1024	; 0x400
    3b8a:	f104 0432 	add.w	r4, r4, #50	; 0x32
    3b8e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    3b92:	f43f aedc 	beq.w	394e <__adddf3+0xe6>
    3b96:	f04f 0203 	mov.w	r2, #3
    3b9a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    3b9e:	bf18      	it	ne
    3ba0:	3203      	addne	r2, #3
    3ba2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    3ba6:	bf18      	it	ne
    3ba8:	3203      	addne	r2, #3
    3baa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    3bae:	f1c2 0320 	rsb	r3, r2, #32
    3bb2:	fa00 fc03 	lsl.w	ip, r0, r3
    3bb6:	fa20 f002 	lsr.w	r0, r0, r2
    3bba:	fa01 fe03 	lsl.w	lr, r1, r3
    3bbe:	ea40 000e 	orr.w	r0, r0, lr
    3bc2:	fa21 f102 	lsr.w	r1, r1, r2
    3bc6:	4414      	add	r4, r2
    3bc8:	e6c1      	b.n	394e <__adddf3+0xe6>
    3bca:	bf00      	nop

00003bcc <__aeabi_dmul>:
    3bcc:	b570      	push	{r4, r5, r6, lr}
    3bce:	f04f 0cff 	mov.w	ip, #255	; 0xff
    3bd2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    3bd6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    3bda:	bf1d      	ittte	ne
    3bdc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    3be0:	ea94 0f0c 	teqne	r4, ip
    3be4:	ea95 0f0c 	teqne	r5, ip
    3be8:	f000 f8de 	bleq	3da8 <__aeabi_dmul+0x1dc>
    3bec:	442c      	add	r4, r5
    3bee:	ea81 0603 	eor.w	r6, r1, r3
    3bf2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    3bf6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    3bfa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    3bfe:	bf18      	it	ne
    3c00:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    3c04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    3c08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    3c0c:	d038      	beq.n	3c80 <__aeabi_dmul+0xb4>
    3c0e:	fba0 ce02 	umull	ip, lr, r0, r2
    3c12:	f04f 0500 	mov.w	r5, #0
    3c16:	fbe1 e502 	umlal	lr, r5, r1, r2
    3c1a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    3c1e:	fbe0 e503 	umlal	lr, r5, r0, r3
    3c22:	f04f 0600 	mov.w	r6, #0
    3c26:	fbe1 5603 	umlal	r5, r6, r1, r3
    3c2a:	f09c 0f00 	teq	ip, #0
    3c2e:	bf18      	it	ne
    3c30:	f04e 0e01 	orrne.w	lr, lr, #1
    3c34:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    3c38:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    3c3c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    3c40:	d204      	bcs.n	3c4c <__aeabi_dmul+0x80>
    3c42:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    3c46:	416d      	adcs	r5, r5
    3c48:	eb46 0606 	adc.w	r6, r6, r6
    3c4c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    3c50:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    3c54:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    3c58:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    3c5c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    3c60:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    3c64:	bf88      	it	hi
    3c66:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    3c6a:	d81e      	bhi.n	3caa <__aeabi_dmul+0xde>
    3c6c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    3c70:	bf08      	it	eq
    3c72:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    3c76:	f150 0000 	adcs.w	r0, r0, #0
    3c7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    3c7e:	bd70      	pop	{r4, r5, r6, pc}
    3c80:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    3c84:	ea46 0101 	orr.w	r1, r6, r1
    3c88:	ea40 0002 	orr.w	r0, r0, r2
    3c8c:	ea81 0103 	eor.w	r1, r1, r3
    3c90:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    3c94:	bfc2      	ittt	gt
    3c96:	ebd4 050c 	rsbsgt	r5, r4, ip
    3c9a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    3c9e:	bd70      	popgt	{r4, r5, r6, pc}
    3ca0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    3ca4:	f04f 0e00 	mov.w	lr, #0
    3ca8:	3c01      	subs	r4, #1
    3caa:	f300 80ab 	bgt.w	3e04 <__aeabi_dmul+0x238>
    3cae:	f114 0f36 	cmn.w	r4, #54	; 0x36
    3cb2:	bfde      	ittt	le
    3cb4:	2000      	movle	r0, #0
    3cb6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    3cba:	bd70      	pople	{r4, r5, r6, pc}
    3cbc:	f1c4 0400 	rsb	r4, r4, #0
    3cc0:	3c20      	subs	r4, #32
    3cc2:	da35      	bge.n	3d30 <__aeabi_dmul+0x164>
    3cc4:	340c      	adds	r4, #12
    3cc6:	dc1b      	bgt.n	3d00 <__aeabi_dmul+0x134>
    3cc8:	f104 0414 	add.w	r4, r4, #20
    3ccc:	f1c4 0520 	rsb	r5, r4, #32
    3cd0:	fa00 f305 	lsl.w	r3, r0, r5
    3cd4:	fa20 f004 	lsr.w	r0, r0, r4
    3cd8:	fa01 f205 	lsl.w	r2, r1, r5
    3cdc:	ea40 0002 	orr.w	r0, r0, r2
    3ce0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    3ce4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    3ce8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    3cec:	fa21 f604 	lsr.w	r6, r1, r4
    3cf0:	eb42 0106 	adc.w	r1, r2, r6
    3cf4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    3cf8:	bf08      	it	eq
    3cfa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    3cfe:	bd70      	pop	{r4, r5, r6, pc}
    3d00:	f1c4 040c 	rsb	r4, r4, #12
    3d04:	f1c4 0520 	rsb	r5, r4, #32
    3d08:	fa00 f304 	lsl.w	r3, r0, r4
    3d0c:	fa20 f005 	lsr.w	r0, r0, r5
    3d10:	fa01 f204 	lsl.w	r2, r1, r4
    3d14:	ea40 0002 	orr.w	r0, r0, r2
    3d18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    3d1c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    3d20:	f141 0100 	adc.w	r1, r1, #0
    3d24:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    3d28:	bf08      	it	eq
    3d2a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    3d2e:	bd70      	pop	{r4, r5, r6, pc}
    3d30:	f1c4 0520 	rsb	r5, r4, #32
    3d34:	fa00 f205 	lsl.w	r2, r0, r5
    3d38:	ea4e 0e02 	orr.w	lr, lr, r2
    3d3c:	fa20 f304 	lsr.w	r3, r0, r4
    3d40:	fa01 f205 	lsl.w	r2, r1, r5
    3d44:	ea43 0302 	orr.w	r3, r3, r2
    3d48:	fa21 f004 	lsr.w	r0, r1, r4
    3d4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    3d50:	fa21 f204 	lsr.w	r2, r1, r4
    3d54:	ea20 0002 	bic.w	r0, r0, r2
    3d58:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    3d5c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    3d60:	bf08      	it	eq
    3d62:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    3d66:	bd70      	pop	{r4, r5, r6, pc}
    3d68:	f094 0f00 	teq	r4, #0
    3d6c:	d10f      	bne.n	3d8e <__aeabi_dmul+0x1c2>
    3d6e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    3d72:	0040      	lsls	r0, r0, #1
    3d74:	eb41 0101 	adc.w	r1, r1, r1
    3d78:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    3d7c:	bf08      	it	eq
    3d7e:	3c01      	subeq	r4, #1
    3d80:	d0f7      	beq.n	3d72 <__aeabi_dmul+0x1a6>
    3d82:	ea41 0106 	orr.w	r1, r1, r6
    3d86:	f095 0f00 	teq	r5, #0
    3d8a:	bf18      	it	ne
    3d8c:	4770      	bxne	lr
    3d8e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    3d92:	0052      	lsls	r2, r2, #1
    3d94:	eb43 0303 	adc.w	r3, r3, r3
    3d98:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    3d9c:	bf08      	it	eq
    3d9e:	3d01      	subeq	r5, #1
    3da0:	d0f7      	beq.n	3d92 <__aeabi_dmul+0x1c6>
    3da2:	ea43 0306 	orr.w	r3, r3, r6
    3da6:	4770      	bx	lr
    3da8:	ea94 0f0c 	teq	r4, ip
    3dac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    3db0:	bf18      	it	ne
    3db2:	ea95 0f0c 	teqne	r5, ip
    3db6:	d00c      	beq.n	3dd2 <__aeabi_dmul+0x206>
    3db8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    3dbc:	bf18      	it	ne
    3dbe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    3dc2:	d1d1      	bne.n	3d68 <__aeabi_dmul+0x19c>
    3dc4:	ea81 0103 	eor.w	r1, r1, r3
    3dc8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    3dcc:	f04f 0000 	mov.w	r0, #0
    3dd0:	bd70      	pop	{r4, r5, r6, pc}
    3dd2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    3dd6:	bf06      	itte	eq
    3dd8:	4610      	moveq	r0, r2
    3dda:	4619      	moveq	r1, r3
    3ddc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    3de0:	d019      	beq.n	3e16 <__aeabi_dmul+0x24a>
    3de2:	ea94 0f0c 	teq	r4, ip
    3de6:	d102      	bne.n	3dee <__aeabi_dmul+0x222>
    3de8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    3dec:	d113      	bne.n	3e16 <__aeabi_dmul+0x24a>
    3dee:	ea95 0f0c 	teq	r5, ip
    3df2:	d105      	bne.n	3e00 <__aeabi_dmul+0x234>
    3df4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    3df8:	bf1c      	itt	ne
    3dfa:	4610      	movne	r0, r2
    3dfc:	4619      	movne	r1, r3
    3dfe:	d10a      	bne.n	3e16 <__aeabi_dmul+0x24a>
    3e00:	ea81 0103 	eor.w	r1, r1, r3
    3e04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    3e08:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    3e0c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    3e10:	f04f 0000 	mov.w	r0, #0
    3e14:	bd70      	pop	{r4, r5, r6, pc}
    3e16:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    3e1a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    3e1e:	bd70      	pop	{r4, r5, r6, pc}

00003e20 <__aeabi_ddiv>:
    3e20:	b570      	push	{r4, r5, r6, lr}
    3e22:	f04f 0cff 	mov.w	ip, #255	; 0xff
    3e26:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    3e2a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    3e2e:	bf1d      	ittte	ne
    3e30:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    3e34:	ea94 0f0c 	teqne	r4, ip
    3e38:	ea95 0f0c 	teqne	r5, ip
    3e3c:	f000 f8a7 	bleq	3f8e <__aeabi_ddiv+0x16e>
    3e40:	eba4 0405 	sub.w	r4, r4, r5
    3e44:	ea81 0e03 	eor.w	lr, r1, r3
    3e48:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    3e4c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    3e50:	f000 8088 	beq.w	3f64 <__aeabi_ddiv+0x144>
    3e54:	ea4f 3303 	mov.w	r3, r3, lsl #12
    3e58:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    3e5c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    3e60:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    3e64:	ea4f 2202 	mov.w	r2, r2, lsl #8
    3e68:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    3e6c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    3e70:	ea4f 2600 	mov.w	r6, r0, lsl #8
    3e74:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    3e78:	429d      	cmp	r5, r3
    3e7a:	bf08      	it	eq
    3e7c:	4296      	cmpeq	r6, r2
    3e7e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    3e82:	f504 7440 	add.w	r4, r4, #768	; 0x300
    3e86:	d202      	bcs.n	3e8e <__aeabi_ddiv+0x6e>
    3e88:	085b      	lsrs	r3, r3, #1
    3e8a:	ea4f 0232 	mov.w	r2, r2, rrx
    3e8e:	1ab6      	subs	r6, r6, r2
    3e90:	eb65 0503 	sbc.w	r5, r5, r3
    3e94:	085b      	lsrs	r3, r3, #1
    3e96:	ea4f 0232 	mov.w	r2, r2, rrx
    3e9a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    3e9e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    3ea2:	ebb6 0e02 	subs.w	lr, r6, r2
    3ea6:	eb75 0e03 	sbcs.w	lr, r5, r3
    3eaa:	bf22      	ittt	cs
    3eac:	1ab6      	subcs	r6, r6, r2
    3eae:	4675      	movcs	r5, lr
    3eb0:	ea40 000c 	orrcs.w	r0, r0, ip
    3eb4:	085b      	lsrs	r3, r3, #1
    3eb6:	ea4f 0232 	mov.w	r2, r2, rrx
    3eba:	ebb6 0e02 	subs.w	lr, r6, r2
    3ebe:	eb75 0e03 	sbcs.w	lr, r5, r3
    3ec2:	bf22      	ittt	cs
    3ec4:	1ab6      	subcs	r6, r6, r2
    3ec6:	4675      	movcs	r5, lr
    3ec8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    3ecc:	085b      	lsrs	r3, r3, #1
    3ece:	ea4f 0232 	mov.w	r2, r2, rrx
    3ed2:	ebb6 0e02 	subs.w	lr, r6, r2
    3ed6:	eb75 0e03 	sbcs.w	lr, r5, r3
    3eda:	bf22      	ittt	cs
    3edc:	1ab6      	subcs	r6, r6, r2
    3ede:	4675      	movcs	r5, lr
    3ee0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    3ee4:	085b      	lsrs	r3, r3, #1
    3ee6:	ea4f 0232 	mov.w	r2, r2, rrx
    3eea:	ebb6 0e02 	subs.w	lr, r6, r2
    3eee:	eb75 0e03 	sbcs.w	lr, r5, r3
    3ef2:	bf22      	ittt	cs
    3ef4:	1ab6      	subcs	r6, r6, r2
    3ef6:	4675      	movcs	r5, lr
    3ef8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    3efc:	ea55 0e06 	orrs.w	lr, r5, r6
    3f00:	d018      	beq.n	3f34 <__aeabi_ddiv+0x114>
    3f02:	ea4f 1505 	mov.w	r5, r5, lsl #4
    3f06:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    3f0a:	ea4f 1606 	mov.w	r6, r6, lsl #4
    3f0e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    3f12:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    3f16:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    3f1a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    3f1e:	d1c0      	bne.n	3ea2 <__aeabi_ddiv+0x82>
    3f20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    3f24:	d10b      	bne.n	3f3e <__aeabi_ddiv+0x11e>
    3f26:	ea41 0100 	orr.w	r1, r1, r0
    3f2a:	f04f 0000 	mov.w	r0, #0
    3f2e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    3f32:	e7b6      	b.n	3ea2 <__aeabi_ddiv+0x82>
    3f34:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    3f38:	bf04      	itt	eq
    3f3a:	4301      	orreq	r1, r0
    3f3c:	2000      	moveq	r0, #0
    3f3e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    3f42:	bf88      	it	hi
    3f44:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    3f48:	f63f aeaf 	bhi.w	3caa <__aeabi_dmul+0xde>
    3f4c:	ebb5 0c03 	subs.w	ip, r5, r3
    3f50:	bf04      	itt	eq
    3f52:	ebb6 0c02 	subseq.w	ip, r6, r2
    3f56:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    3f5a:	f150 0000 	adcs.w	r0, r0, #0
    3f5e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    3f62:	bd70      	pop	{r4, r5, r6, pc}
    3f64:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    3f68:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    3f6c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    3f70:	bfc2      	ittt	gt
    3f72:	ebd4 050c 	rsbsgt	r5, r4, ip
    3f76:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    3f7a:	bd70      	popgt	{r4, r5, r6, pc}
    3f7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    3f80:	f04f 0e00 	mov.w	lr, #0
    3f84:	3c01      	subs	r4, #1
    3f86:	e690      	b.n	3caa <__aeabi_dmul+0xde>
    3f88:	ea45 0e06 	orr.w	lr, r5, r6
    3f8c:	e68d      	b.n	3caa <__aeabi_dmul+0xde>
    3f8e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    3f92:	ea94 0f0c 	teq	r4, ip
    3f96:	bf08      	it	eq
    3f98:	ea95 0f0c 	teqeq	r5, ip
    3f9c:	f43f af3b 	beq.w	3e16 <__aeabi_dmul+0x24a>
    3fa0:	ea94 0f0c 	teq	r4, ip
    3fa4:	d10a      	bne.n	3fbc <__aeabi_ddiv+0x19c>
    3fa6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    3faa:	f47f af34 	bne.w	3e16 <__aeabi_dmul+0x24a>
    3fae:	ea95 0f0c 	teq	r5, ip
    3fb2:	f47f af25 	bne.w	3e00 <__aeabi_dmul+0x234>
    3fb6:	4610      	mov	r0, r2
    3fb8:	4619      	mov	r1, r3
    3fba:	e72c      	b.n	3e16 <__aeabi_dmul+0x24a>
    3fbc:	ea95 0f0c 	teq	r5, ip
    3fc0:	d106      	bne.n	3fd0 <__aeabi_ddiv+0x1b0>
    3fc2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    3fc6:	f43f aefd 	beq.w	3dc4 <__aeabi_dmul+0x1f8>
    3fca:	4610      	mov	r0, r2
    3fcc:	4619      	mov	r1, r3
    3fce:	e722      	b.n	3e16 <__aeabi_dmul+0x24a>
    3fd0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    3fd4:	bf18      	it	ne
    3fd6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    3fda:	f47f aec5 	bne.w	3d68 <__aeabi_dmul+0x19c>
    3fde:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    3fe2:	f47f af0d 	bne.w	3e00 <__aeabi_dmul+0x234>
    3fe6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    3fea:	f47f aeeb 	bne.w	3dc4 <__aeabi_dmul+0x1f8>
    3fee:	e712      	b.n	3e16 <__aeabi_dmul+0x24a>

00003ff0 <__aeabi_d2f>:
    3ff0:	ea4f 0241 	mov.w	r2, r1, lsl #1
    3ff4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    3ff8:	bf24      	itt	cs
    3ffa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    3ffe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    4002:	d90d      	bls.n	4020 <__aeabi_d2f+0x30>
    4004:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    4008:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    400c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    4010:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    4014:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    4018:	bf08      	it	eq
    401a:	f020 0001 	biceq.w	r0, r0, #1
    401e:	4770      	bx	lr
    4020:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    4024:	d121      	bne.n	406a <__aeabi_d2f+0x7a>
    4026:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    402a:	bfbc      	itt	lt
    402c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    4030:	4770      	bxlt	lr
    4032:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    4036:	ea4f 5252 	mov.w	r2, r2, lsr #21
    403a:	f1c2 0218 	rsb	r2, r2, #24
    403e:	f1c2 0c20 	rsb	ip, r2, #32
    4042:	fa10 f30c 	lsls.w	r3, r0, ip
    4046:	fa20 f002 	lsr.w	r0, r0, r2
    404a:	bf18      	it	ne
    404c:	f040 0001 	orrne.w	r0, r0, #1
    4050:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    4054:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    4058:	fa03 fc0c 	lsl.w	ip, r3, ip
    405c:	ea40 000c 	orr.w	r0, r0, ip
    4060:	fa23 f302 	lsr.w	r3, r3, r2
    4064:	ea4f 0343 	mov.w	r3, r3, lsl #1
    4068:	e7cc      	b.n	4004 <__aeabi_d2f+0x14>
    406a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    406e:	d107      	bne.n	4080 <__aeabi_d2f+0x90>
    4070:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    4074:	bf1e      	ittt	ne
    4076:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    407a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    407e:	4770      	bxne	lr
    4080:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    4084:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    4088:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    408c:	4770      	bx	lr
    408e:	bf00      	nop

00004090 <__aeabi_fmul>:
    4090:	f04f 0cff 	mov.w	ip, #255	; 0xff
    4094:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    4098:	bf1e      	ittt	ne
    409a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    409e:	ea92 0f0c 	teqne	r2, ip
    40a2:	ea93 0f0c 	teqne	r3, ip
    40a6:	d06f      	beq.n	4188 <__aeabi_fmul+0xf8>
    40a8:	441a      	add	r2, r3
    40aa:	ea80 0c01 	eor.w	ip, r0, r1
    40ae:	0240      	lsls	r0, r0, #9
    40b0:	bf18      	it	ne
    40b2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    40b6:	d01e      	beq.n	40f6 <__aeabi_fmul+0x66>
    40b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    40bc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    40c0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    40c4:	fba0 3101 	umull	r3, r1, r0, r1
    40c8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    40cc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    40d0:	bf3e      	ittt	cc
    40d2:	0049      	lslcc	r1, r1, #1
    40d4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    40d8:	005b      	lslcc	r3, r3, #1
    40da:	ea40 0001 	orr.w	r0, r0, r1
    40de:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    40e2:	2afd      	cmp	r2, #253	; 0xfd
    40e4:	d81d      	bhi.n	4122 <__aeabi_fmul+0x92>
    40e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    40ea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    40ee:	bf08      	it	eq
    40f0:	f020 0001 	biceq.w	r0, r0, #1
    40f4:	4770      	bx	lr
    40f6:	f090 0f00 	teq	r0, #0
    40fa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    40fe:	bf08      	it	eq
    4100:	0249      	lsleq	r1, r1, #9
    4102:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    4106:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    410a:	3a7f      	subs	r2, #127	; 0x7f
    410c:	bfc2      	ittt	gt
    410e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    4112:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    4116:	4770      	bxgt	lr
    4118:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    411c:	f04f 0300 	mov.w	r3, #0
    4120:	3a01      	subs	r2, #1
    4122:	dc5d      	bgt.n	41e0 <__aeabi_fmul+0x150>
    4124:	f112 0f19 	cmn.w	r2, #25
    4128:	bfdc      	itt	le
    412a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    412e:	4770      	bxle	lr
    4130:	f1c2 0200 	rsb	r2, r2, #0
    4134:	0041      	lsls	r1, r0, #1
    4136:	fa21 f102 	lsr.w	r1, r1, r2
    413a:	f1c2 0220 	rsb	r2, r2, #32
    413e:	fa00 fc02 	lsl.w	ip, r0, r2
    4142:	ea5f 0031 	movs.w	r0, r1, rrx
    4146:	f140 0000 	adc.w	r0, r0, #0
    414a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    414e:	bf08      	it	eq
    4150:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    4154:	4770      	bx	lr
    4156:	f092 0f00 	teq	r2, #0
    415a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    415e:	bf02      	ittt	eq
    4160:	0040      	lsleq	r0, r0, #1
    4162:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    4166:	3a01      	subeq	r2, #1
    4168:	d0f9      	beq.n	415e <__aeabi_fmul+0xce>
    416a:	ea40 000c 	orr.w	r0, r0, ip
    416e:	f093 0f00 	teq	r3, #0
    4172:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    4176:	bf02      	ittt	eq
    4178:	0049      	lsleq	r1, r1, #1
    417a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    417e:	3b01      	subeq	r3, #1
    4180:	d0f9      	beq.n	4176 <__aeabi_fmul+0xe6>
    4182:	ea41 010c 	orr.w	r1, r1, ip
    4186:	e78f      	b.n	40a8 <__aeabi_fmul+0x18>
    4188:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    418c:	ea92 0f0c 	teq	r2, ip
    4190:	bf18      	it	ne
    4192:	ea93 0f0c 	teqne	r3, ip
    4196:	d00a      	beq.n	41ae <__aeabi_fmul+0x11e>
    4198:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    419c:	bf18      	it	ne
    419e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    41a2:	d1d8      	bne.n	4156 <__aeabi_fmul+0xc6>
    41a4:	ea80 0001 	eor.w	r0, r0, r1
    41a8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    41ac:	4770      	bx	lr
    41ae:	f090 0f00 	teq	r0, #0
    41b2:	bf17      	itett	ne
    41b4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    41b8:	4608      	moveq	r0, r1
    41ba:	f091 0f00 	teqne	r1, #0
    41be:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    41c2:	d014      	beq.n	41ee <__aeabi_fmul+0x15e>
    41c4:	ea92 0f0c 	teq	r2, ip
    41c8:	d101      	bne.n	41ce <__aeabi_fmul+0x13e>
    41ca:	0242      	lsls	r2, r0, #9
    41cc:	d10f      	bne.n	41ee <__aeabi_fmul+0x15e>
    41ce:	ea93 0f0c 	teq	r3, ip
    41d2:	d103      	bne.n	41dc <__aeabi_fmul+0x14c>
    41d4:	024b      	lsls	r3, r1, #9
    41d6:	bf18      	it	ne
    41d8:	4608      	movne	r0, r1
    41da:	d108      	bne.n	41ee <__aeabi_fmul+0x15e>
    41dc:	ea80 0001 	eor.w	r0, r0, r1
    41e0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    41e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    41e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    41ec:	4770      	bx	lr
    41ee:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    41f2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    41f6:	4770      	bx	lr

000041f8 <__aeabi_fdiv>:
    41f8:	f04f 0cff 	mov.w	ip, #255	; 0xff
    41fc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    4200:	bf1e      	ittt	ne
    4202:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    4206:	ea92 0f0c 	teqne	r2, ip
    420a:	ea93 0f0c 	teqne	r3, ip
    420e:	d069      	beq.n	42e4 <__aeabi_fdiv+0xec>
    4210:	eba2 0203 	sub.w	r2, r2, r3
    4214:	ea80 0c01 	eor.w	ip, r0, r1
    4218:	0249      	lsls	r1, r1, #9
    421a:	ea4f 2040 	mov.w	r0, r0, lsl #9
    421e:	d037      	beq.n	4290 <__aeabi_fdiv+0x98>
    4220:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4224:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    4228:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    422c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    4230:	428b      	cmp	r3, r1
    4232:	bf38      	it	cc
    4234:	005b      	lslcc	r3, r3, #1
    4236:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    423a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    423e:	428b      	cmp	r3, r1
    4240:	bf24      	itt	cs
    4242:	1a5b      	subcs	r3, r3, r1
    4244:	ea40 000c 	orrcs.w	r0, r0, ip
    4248:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    424c:	bf24      	itt	cs
    424e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    4252:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    4256:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    425a:	bf24      	itt	cs
    425c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    4260:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    4264:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    4268:	bf24      	itt	cs
    426a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    426e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    4272:	011b      	lsls	r3, r3, #4
    4274:	bf18      	it	ne
    4276:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    427a:	d1e0      	bne.n	423e <__aeabi_fdiv+0x46>
    427c:	2afd      	cmp	r2, #253	; 0xfd
    427e:	f63f af50 	bhi.w	4122 <__aeabi_fmul+0x92>
    4282:	428b      	cmp	r3, r1
    4284:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    4288:	bf08      	it	eq
    428a:	f020 0001 	biceq.w	r0, r0, #1
    428e:	4770      	bx	lr
    4290:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    4294:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    4298:	327f      	adds	r2, #127	; 0x7f
    429a:	bfc2      	ittt	gt
    429c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    42a0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    42a4:	4770      	bxgt	lr
    42a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    42aa:	f04f 0300 	mov.w	r3, #0
    42ae:	3a01      	subs	r2, #1
    42b0:	e737      	b.n	4122 <__aeabi_fmul+0x92>
    42b2:	f092 0f00 	teq	r2, #0
    42b6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    42ba:	bf02      	ittt	eq
    42bc:	0040      	lsleq	r0, r0, #1
    42be:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    42c2:	3a01      	subeq	r2, #1
    42c4:	d0f9      	beq.n	42ba <__aeabi_fdiv+0xc2>
    42c6:	ea40 000c 	orr.w	r0, r0, ip
    42ca:	f093 0f00 	teq	r3, #0
    42ce:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    42d2:	bf02      	ittt	eq
    42d4:	0049      	lsleq	r1, r1, #1
    42d6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    42da:	3b01      	subeq	r3, #1
    42dc:	d0f9      	beq.n	42d2 <__aeabi_fdiv+0xda>
    42de:	ea41 010c 	orr.w	r1, r1, ip
    42e2:	e795      	b.n	4210 <__aeabi_fdiv+0x18>
    42e4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    42e8:	ea92 0f0c 	teq	r2, ip
    42ec:	d108      	bne.n	4300 <__aeabi_fdiv+0x108>
    42ee:	0242      	lsls	r2, r0, #9
    42f0:	f47f af7d 	bne.w	41ee <__aeabi_fmul+0x15e>
    42f4:	ea93 0f0c 	teq	r3, ip
    42f8:	f47f af70 	bne.w	41dc <__aeabi_fmul+0x14c>
    42fc:	4608      	mov	r0, r1
    42fe:	e776      	b.n	41ee <__aeabi_fmul+0x15e>
    4300:	ea93 0f0c 	teq	r3, ip
    4304:	d104      	bne.n	4310 <__aeabi_fdiv+0x118>
    4306:	024b      	lsls	r3, r1, #9
    4308:	f43f af4c 	beq.w	41a4 <__aeabi_fmul+0x114>
    430c:	4608      	mov	r0, r1
    430e:	e76e      	b.n	41ee <__aeabi_fmul+0x15e>
    4310:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    4314:	bf18      	it	ne
    4316:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    431a:	d1ca      	bne.n	42b2 <__aeabi_fdiv+0xba>
    431c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    4320:	f47f af5c 	bne.w	41dc <__aeabi_fmul+0x14c>
    4324:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    4328:	f47f af3c 	bne.w	41a4 <__aeabi_fmul+0x114>
    432c:	e75f      	b.n	41ee <__aeabi_fmul+0x15e>
    432e:	bf00      	nop

00004330 <__aeabi_f2uiz>:
    4330:	0042      	lsls	r2, r0, #1
    4332:	d20e      	bcs.n	4352 <__aeabi_f2uiz+0x22>
    4334:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    4338:	d30b      	bcc.n	4352 <__aeabi_f2uiz+0x22>
    433a:	f04f 039e 	mov.w	r3, #158	; 0x9e
    433e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    4342:	d409      	bmi.n	4358 <__aeabi_f2uiz+0x28>
    4344:	ea4f 2300 	mov.w	r3, r0, lsl #8
    4348:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    434c:	fa23 f002 	lsr.w	r0, r3, r2
    4350:	4770      	bx	lr
    4352:	f04f 0000 	mov.w	r0, #0
    4356:	4770      	bx	lr
    4358:	f112 0f61 	cmn.w	r2, #97	; 0x61
    435c:	d101      	bne.n	4362 <__aeabi_f2uiz+0x32>
    435e:	0242      	lsls	r2, r0, #9
    4360:	d102      	bne.n	4368 <__aeabi_f2uiz+0x38>
    4362:	f04f 30ff 	mov.w	r0, #4294967295
    4366:	4770      	bx	lr
    4368:	f04f 0000 	mov.w	r0, #0
    436c:	4770      	bx	lr
    436e:	bf00      	nop

00004370 <__libc_init_array>:
    4370:	b570      	push	{r4, r5, r6, lr}
    4372:	f244 56fc 	movw	r6, #17916	; 0x45fc
    4376:	f244 55fc 	movw	r5, #17916	; 0x45fc
    437a:	f2c0 0600 	movt	r6, #0
    437e:	f2c0 0500 	movt	r5, #0
    4382:	1b76      	subs	r6, r6, r5
    4384:	10b6      	asrs	r6, r6, #2
    4386:	d006      	beq.n	4396 <__libc_init_array+0x26>
    4388:	2400      	movs	r4, #0
    438a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    438e:	3401      	adds	r4, #1
    4390:	4798      	blx	r3
    4392:	42a6      	cmp	r6, r4
    4394:	d8f9      	bhi.n	438a <__libc_init_array+0x1a>
    4396:	f244 55fc 	movw	r5, #17916	; 0x45fc
    439a:	f244 6600 	movw	r6, #17920	; 0x4600
    439e:	f2c0 0500 	movt	r5, #0
    43a2:	f2c0 0600 	movt	r6, #0
    43a6:	1b76      	subs	r6, r6, r5
    43a8:	f000 f91c 	bl	45e4 <_init>
    43ac:	10b6      	asrs	r6, r6, #2
    43ae:	d006      	beq.n	43be <__libc_init_array+0x4e>
    43b0:	2400      	movs	r4, #0
    43b2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    43b6:	3401      	adds	r4, #1
    43b8:	4798      	blx	r3
    43ba:	42a6      	cmp	r6, r4
    43bc:	d8f9      	bhi.n	43b2 <__libc_init_array+0x42>
    43be:	bd70      	pop	{r4, r5, r6, pc}

000043c0 <memset>:
    43c0:	2a03      	cmp	r2, #3
    43c2:	b2c9      	uxtb	r1, r1
    43c4:	b430      	push	{r4, r5}
    43c6:	d807      	bhi.n	43d8 <memset+0x18>
    43c8:	b122      	cbz	r2, 43d4 <memset+0x14>
    43ca:	2300      	movs	r3, #0
    43cc:	54c1      	strb	r1, [r0, r3]
    43ce:	3301      	adds	r3, #1
    43d0:	4293      	cmp	r3, r2
    43d2:	d1fb      	bne.n	43cc <memset+0xc>
    43d4:	bc30      	pop	{r4, r5}
    43d6:	4770      	bx	lr
    43d8:	eb00 0c02 	add.w	ip, r0, r2
    43dc:	4603      	mov	r3, r0
    43de:	e001      	b.n	43e4 <memset+0x24>
    43e0:	f803 1c01 	strb.w	r1, [r3, #-1]
    43e4:	f003 0403 	and.w	r4, r3, #3
    43e8:	461a      	mov	r2, r3
    43ea:	3301      	adds	r3, #1
    43ec:	2c00      	cmp	r4, #0
    43ee:	d1f7      	bne.n	43e0 <memset+0x20>
    43f0:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
    43f4:	ebc2 040c 	rsb	r4, r2, ip
    43f8:	fb03 f301 	mul.w	r3, r3, r1
    43fc:	e01f      	b.n	443e <memset+0x7e>
    43fe:	f842 3c40 	str.w	r3, [r2, #-64]
    4402:	f842 3c3c 	str.w	r3, [r2, #-60]
    4406:	f842 3c38 	str.w	r3, [r2, #-56]
    440a:	f842 3c34 	str.w	r3, [r2, #-52]
    440e:	f842 3c30 	str.w	r3, [r2, #-48]
    4412:	f842 3c2c 	str.w	r3, [r2, #-44]
    4416:	f842 3c28 	str.w	r3, [r2, #-40]
    441a:	f842 3c24 	str.w	r3, [r2, #-36]
    441e:	f842 3c20 	str.w	r3, [r2, #-32]
    4422:	f842 3c1c 	str.w	r3, [r2, #-28]
    4426:	f842 3c18 	str.w	r3, [r2, #-24]
    442a:	f842 3c14 	str.w	r3, [r2, #-20]
    442e:	f842 3c10 	str.w	r3, [r2, #-16]
    4432:	f842 3c0c 	str.w	r3, [r2, #-12]
    4436:	f842 3c08 	str.w	r3, [r2, #-8]
    443a:	f842 3c04 	str.w	r3, [r2, #-4]
    443e:	4615      	mov	r5, r2
    4440:	3240      	adds	r2, #64	; 0x40
    4442:	2c3f      	cmp	r4, #63	; 0x3f
    4444:	f1a4 0440 	sub.w	r4, r4, #64	; 0x40
    4448:	dcd9      	bgt.n	43fe <memset+0x3e>
    444a:	462a      	mov	r2, r5
    444c:	ebc5 040c 	rsb	r4, r5, ip
    4450:	e007      	b.n	4462 <memset+0xa2>
    4452:	f842 3c10 	str.w	r3, [r2, #-16]
    4456:	f842 3c0c 	str.w	r3, [r2, #-12]
    445a:	f842 3c08 	str.w	r3, [r2, #-8]
    445e:	f842 3c04 	str.w	r3, [r2, #-4]
    4462:	4615      	mov	r5, r2
    4464:	3210      	adds	r2, #16
    4466:	2c0f      	cmp	r4, #15
    4468:	f1a4 0410 	sub.w	r4, r4, #16
    446c:	dcf1      	bgt.n	4452 <memset+0x92>
    446e:	462a      	mov	r2, r5
    4470:	ebc5 050c 	rsb	r5, r5, ip
    4474:	e001      	b.n	447a <memset+0xba>
    4476:	f842 3c04 	str.w	r3, [r2, #-4]
    447a:	4614      	mov	r4, r2
    447c:	3204      	adds	r2, #4
    447e:	2d03      	cmp	r5, #3
    4480:	f1a5 0504 	sub.w	r5, r5, #4
    4484:	dcf7      	bgt.n	4476 <memset+0xb6>
    4486:	e001      	b.n	448c <memset+0xcc>
    4488:	f804 1b01 	strb.w	r1, [r4], #1
    448c:	4564      	cmp	r4, ip
    448e:	d3fb      	bcc.n	4488 <memset+0xc8>
    4490:	e7a0      	b.n	43d4 <memset+0x14>
    4492:	bf00      	nop

00004494 <C.18.4556>:
    4494:	ffff ffff 0000 0000                         ........

0000449c <C.33.4592>:
    449c:	1111 1111 0000 0000                         ........

000044a4 <initcmd>:
    44a4:	03ef 8003 cf02 0003 30c1 04ed 0364 8112     .........0..d...
    44b4:	03e8 0085 cb78 3905 002c 0234 01f7 ea20     ....x..9,.4... .
    44c4:	0002 c000 2301 01c1 c510 3e02 c728 8601     .....#.....>(...
    44d4:	0136 3748 0001 013a b155 0002 b618 0803     6.H7..:.U.......
    44e4:	2782 01f2 2600 0101 0fe0 310f 0c2b 080e     .'...&.....1+...
    44f4:	f14e 0737 0310 090e e100 000f 140e 1103     N.7.............
    4504:	3107 48c1 0f08 310c 0f36 8011 8029 0000     .1.H...16...)...

00004514 <g_gpio_irqn_lut>:
    4514:	0020 0021 0022 0023 0024 0025 0026 0027      .!.".#.$.%.&.'.
    4524:	0028 0029 002a 002b 002c 002d 002e 002f     (.).*.+.,.-.../.
    4534:	0030 0031 0032 0033 0034 0035 0036 0037     0.1.2.3.4.5.6.7.
    4544:	0038 0039 003a 003b 003c 003d 003e 003f     8.9.:.;.<.=.>.?.

00004554 <g_config_reg_lut>:
    4554:	3000 4001 3004 4001 3008 4001 300c 4001     .0.@.0.@.0.@.0.@
    4564:	3010 4001 3014 4001 3018 4001 301c 4001     .0.@.0.@.0.@.0.@
    4574:	3020 4001 3024 4001 3028 4001 302c 4001      0.@$0.@(0.@,0.@
    4584:	3030 4001 3034 4001 3038 4001 303c 4001     00.@40.@80.@<0.@
    4594:	3040 4001 3044 4001 3048 4001 304c 4001     @0.@D0.@H0.@L0.@
    45a4:	3050 4001 3054 4001 3058 4001 305c 4001     P0.@T0.@X0.@\0.@
    45b4:	3060 4001 3064 4001 3068 4001 306c 4001     `0.@d0.@h0.@l0.@
    45c4:	3070 4001 3074 4001 3078 4001 307c 4001     p0.@t0.@x0.@|0.@

000045d4 <C.16.2565>:
    45d4:	0001 0000 0002 0000 0004 0000 0001 0000     ................

000045e4 <_init>:
    45e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45e6:	bf00      	nop
    45e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    45ea:	bc08      	pop	{r3}
    45ec:	469e      	mov	lr, r3
    45ee:	4770      	bx	lr

000045f0 <_fini>:
    45f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45f2:	bf00      	nop
    45f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    45f6:	bc08      	pop	{r3}
    45f8:	469e      	mov	lr, r3
    45fa:	4770      	bx	lr

000045fc <__frame_dummy_init_array_entry>:
    45fc:	0485 0000                                   ....

00004600 <__do_global_dtors_aux_fini_array_entry>:
    4600:	0471 0000                                   q...
