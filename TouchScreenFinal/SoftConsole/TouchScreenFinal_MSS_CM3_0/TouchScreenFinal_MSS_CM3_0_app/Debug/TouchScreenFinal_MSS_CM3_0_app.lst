
TouchScreenFinal_MSS_CM3_0_app:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000037ac  20000000  20000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000064  200037ac  200037ac  0000b7ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001b8  20003810  20003810  0000b810  2**2
                  ALLOC
  3 .stack        00003000  200039c8  200039c8  0000b810  2**0
                  ALLOC
  4 .comment      00000204  00000000  00000000  0000b810  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000007e0  00000000  00000000  0000ba14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001551  00000000  00000000  0000c1f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000c147  00000000  00000000  0000d745  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000013ee  00000000  00000000  0001988c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000041bc  00000000  00000000  0001ac7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001b70  00000000  00000000  0001ee38  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004484  00000000  00000000  000209a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002cb7  00000000  00000000  00024e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 0004db25  00000000  00000000  00027ae3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000025  00000000  00000000  00075608  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 00000788  00000000  00000000  0007562d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

20000000 <__text_start>:
20000000:	20010000 	.word	0x20010000
20000004:	20000299 	.word	0x20000299
20000008:	20000309 	.word	0x20000309
2000000c:	2000030b 	.word	0x2000030b
20000010:	2000030d 	.word	0x2000030d
20000014:	2000030f 	.word	0x2000030f
20000018:	20000311 	.word	0x20000311
	...
2000002c:	20000313 	.word	0x20000313
20000030:	20000315 	.word	0x20000315
20000034:	00000000 	.word	0x00000000
20000038:	20000317 	.word	0x20000317
2000003c:	20000319 	.word	0x20000319
20000040:	2000031b 	.word	0x2000031b
20000044:	2000031d 	.word	0x2000031d
20000048:	2000031f 	.word	0x2000031f
2000004c:	20000321 	.word	0x20000321
20000050:	20000323 	.word	0x20000323
20000054:	20000325 	.word	0x20000325
20000058:	20000327 	.word	0x20000327
2000005c:	20000329 	.word	0x20000329
20000060:	2000032b 	.word	0x2000032b
20000064:	2000032d 	.word	0x2000032d
20000068:	20001795 	.word	0x20001795
2000006c:	200017c1 	.word	0x200017c1
20000070:	20002311 	.word	0x20002311
20000074:	2000233d 	.word	0x2000233d
20000078:	20000337 	.word	0x20000337
2000007c:	20000339 	.word	0x20000339
20000080:	2000033b 	.word	0x2000033b
20000084:	2000033d 	.word	0x2000033d
20000088:	2000033f 	.word	0x2000033f
2000008c:	20000341 	.word	0x20000341
20000090:	20000343 	.word	0x20000343
20000094:	20000345 	.word	0x20000345
20000098:	20000347 	.word	0x20000347
2000009c:	20000349 	.word	0x20000349
200000a0:	2000034b 	.word	0x2000034b
	...
200000bc:	2000034d 	.word	0x2000034d
200000c0:	2000034f 	.word	0x2000034f
200000c4:	20000351 	.word	0x20000351
200000c8:	20000353 	.word	0x20000353
200000cc:	20000355 	.word	0x20000355
200000d0:	20000357 	.word	0x20000357
200000d4:	20000359 	.word	0x20000359
200000d8:	2000035b 	.word	0x2000035b
200000dc:	2000035d 	.word	0x2000035d
200000e0:	2000035f 	.word	0x2000035f
200000e4:	20000361 	.word	0x20000361
200000e8:	20000363 	.word	0x20000363
200000ec:	20000365 	.word	0x20000365
200000f0:	20000367 	.word	0x20000367
200000f4:	20000369 	.word	0x20000369
200000f8:	2000036b 	.word	0x2000036b
200000fc:	2000036d 	.word	0x2000036d
20000100:	2000036f 	.word	0x2000036f
20000104:	20000371 	.word	0x20000371
20000108:	20000373 	.word	0x20000373
2000010c:	20000375 	.word	0x20000375
20000110:	20000377 	.word	0x20000377
20000114:	20000379 	.word	0x20000379
20000118:	2000037b 	.word	0x2000037b
2000011c:	2000037d 	.word	0x2000037d
20000120:	2000037f 	.word	0x2000037f
20000124:	20000381 	.word	0x20000381
20000128:	20000383 	.word	0x20000383
2000012c:	20000385 	.word	0x20000385
20000130:	20000387 	.word	0x20000387
20000134:	20000389 	.word	0x20000389
20000138:	2000038b 	.word	0x2000038b
2000013c:	2000038d 	.word	0x2000038d
20000140:	2000038f 	.word	0x2000038f
20000144:	20000391 	.word	0x20000391
20000148:	20000393 	.word	0x20000393
2000014c:	20000395 	.word	0x20000395
20000150:	20000397 	.word	0x20000397
20000154:	20000399 	.word	0x20000399
20000158:	2000039b 	.word	0x2000039b
2000015c:	2000039d 	.word	0x2000039d
20000160:	2000039f 	.word	0x2000039f
20000164:	200003a1 	.word	0x200003a1
20000168:	200003a3 	.word	0x200003a3
2000016c:	200003a5 	.word	0x200003a5
20000170:	200003a7 	.word	0x200003a7
20000174:	200003a9 	.word	0x200003a9
20000178:	200003ab 	.word	0x200003ab
2000017c:	200003ad 	.word	0x200003ad
20000180:	200003af 	.word	0x200003af
20000184:	200003b1 	.word	0x200003b1
20000188:	200003b3 	.word	0x200003b3
2000018c:	200003b5 	.word	0x200003b5
20000190:	200003b7 	.word	0x200003b7
20000194:	200003b9 	.word	0x200003b9
20000198:	200003bb 	.word	0x200003bb
2000019c:	200003bd 	.word	0x200003bd
200001a0:	200003bf 	.word	0x200003bf
200001a4:	200003c1 	.word	0x200003c1
200001a8:	200003c3 	.word	0x200003c3
200001ac:	200003c5 	.word	0x200003c5
200001b0:	200003c7 	.word	0x200003c7
200001b4:	200003c9 	.word	0x200003c9
200001b8:	200003cb 	.word	0x200003cb
200001bc:	200003cd 	.word	0x200003cd
200001c0:	200003cf 	.word	0x200003cf
200001c4:	200003d1 	.word	0x200003d1
200001c8:	200003d3 	.word	0x200003d3
200001cc:	200003d5 	.word	0x200003d5
200001d0:	200003d7 	.word	0x200003d7
200001d4:	200003d9 	.word	0x200003d9
200001d8:	200003db 	.word	0x200003db
200001dc:	200003dd 	.word	0x200003dd
200001e0:	200003df 	.word	0x200003df
200001e4:	200003e1 	.word	0x200003e1
200001e8:	200003e3 	.word	0x200003e3
200001ec:	200003e5 	.word	0x200003e5
200001f0:	200003e7 	.word	0x200003e7
200001f4:	200003e9 	.word	0x200003e9
200001f8:	200003eb 	.word	0x200003eb
200001fc:	200003ed 	.word	0x200003ed
20000200:	200003ef 	.word	0x200003ef
20000204:	200003f1 	.word	0x200003f1
20000208:	200003f3 	.word	0x200003f3
2000020c:	200003f5 	.word	0x200003f5
20000210:	200003f7 	.word	0x200003f7
20000214:	200003f9 	.word	0x200003f9
20000218:	200029b9 	.word	0x200029b9
2000021c:	200029e1 	.word	0x200029e1
20000220:	20002a09 	.word	0x20002a09
20000224:	20002a31 	.word	0x20002a31
20000228:	20002a59 	.word	0x20002a59
2000022c:	20002a81 	.word	0x20002a81
20000230:	20002aa9 	.word	0x20002aa9
20000234:	20002ad1 	.word	0x20002ad1
20000238:	20002af9 	.word	0x20002af9
2000023c:	20002b21 	.word	0x20002b21
20000240:	20002b49 	.word	0x20002b49
20000244:	20002b71 	.word	0x20002b71
20000248:	20002b99 	.word	0x20002b99
2000024c:	20002bc1 	.word	0x20002bc1
20000250:	20002be9 	.word	0x20002be9
20000254:	20002c11 	.word	0x20002c11
20000258:	20002c39 	.word	0x20002c39
2000025c:	20002c61 	.word	0x20002c61
20000260:	20002c89 	.word	0x20002c89
20000264:	20002cb1 	.word	0x20002cb1
20000268:	20002cd9 	.word	0x20002cd9
2000026c:	20002d01 	.word	0x20002d01
20000270:	20002d29 	.word	0x20002d29
20000274:	20002d51 	.word	0x20002d51
20000278:	20002d79 	.word	0x20002d79
2000027c:	20002da1 	.word	0x20002da1
20000280:	20002dc9 	.word	0x20002dc9
20000284:	20002df1 	.word	0x20002df1
20000288:	20002e19 	.word	0x20002e19
2000028c:	20002e41 	.word	0x20002e41
20000290:	20002e69 	.word	0x20002e69
20000294:	20002e91 	.word	0x20002e91

20000298 <Reset_Handler>:
20000298:	4868      	ldr	r0, [pc, #416]	; (2000043c <ACE_ADC2_FifoEmpty_IRQHandler+0x44>)
2000029a:	4780      	blx	r0
2000029c:	4868      	ldr	r0, [pc, #416]	; (20000440 <ACE_ADC2_FifoEmpty_IRQHandler+0x48>)
2000029e:	2800      	cmp	r0, #0
200002a0:	d10b      	bne.n	200002ba <copy_data>
200002a2:	4868      	ldr	r0, [pc, #416]	; (20000444 <ACE_ADC2_FifoEmpty_IRQHandler+0x4c>)
200002a4:	4968      	ldr	r1, [pc, #416]	; (20000448 <ACE_ADC2_FifoEmpty_IRQHandler+0x50>)
200002a6:	4a69      	ldr	r2, [pc, #420]	; (2000044c <ACE_ADC2_FifoEmpty_IRQHandler+0x54>)
200002a8:	4288      	cmp	r0, r1
200002aa:	d006      	beq.n	200002ba <copy_data>

200002ac <copy_code_loop>:
200002ac:	4291      	cmp	r1, r2
200002ae:	bf1c      	itt	ne
200002b0:	f850 3b04 	ldrne.w	r3, [r0], #4
200002b4:	f841 3b04 	strne.w	r3, [r1], #4
200002b8:	d1f8      	bne.n	200002ac <copy_code_loop>

200002ba <copy_data>:
200002ba:	4865      	ldr	r0, [pc, #404]	; (20000450 <ACE_ADC2_FifoEmpty_IRQHandler+0x58>)
200002bc:	4965      	ldr	r1, [pc, #404]	; (20000454 <ACE_ADC2_FifoEmpty_IRQHandler+0x5c>)
200002be:	4a66      	ldr	r2, [pc, #408]	; (20000458 <ACE_ADC2_FifoEmpty_IRQHandler+0x60>)
200002c0:	4288      	cmp	r0, r1
200002c2:	d006      	beq.n	200002d2 <clear_bss>

200002c4 <copy_data_loop>:
200002c4:	4291      	cmp	r1, r2
200002c6:	bf1c      	itt	ne
200002c8:	f850 3b04 	ldrne.w	r3, [r0], #4
200002cc:	f841 3b04 	strne.w	r3, [r1], #4
200002d0:	d1f8      	bne.n	200002c4 <copy_data_loop>

200002d2 <clear_bss>:
200002d2:	4862      	ldr	r0, [pc, #392]	; (2000045c <ACE_ADC2_FifoEmpty_IRQHandler+0x64>)
200002d4:	4962      	ldr	r1, [pc, #392]	; (20000460 <ACE_ADC2_FifoEmpty_IRQHandler+0x68>)
200002d6:	4a63      	ldr	r2, [pc, #396]	; (20000464 <ACE_ADC2_FifoEmpty_IRQHandler+0x6c>)

200002d8 <clear_bss_loop>:
200002d8:	4291      	cmp	r1, r2
200002da:	bf18      	it	ne
200002dc:	f841 0b04 	strne.w	r0, [r1], #4
200002e0:	d1fa      	bne.n	200002d8 <clear_bss_loop>
	...

200002f0 <call_glob_ctor>:
200002f0:	f8df 0174 	ldr.w	r0, [pc, #372]	; 20000468 <ACE_ADC2_FifoEmpty_IRQHandler+0x70>
200002f4:	f20f 0e03 	addw	lr, pc, #3
200002f8:	4700      	bx	r0

200002fa <branch_to_main>:
200002fa:	f04f 0000 	mov.w	r0, #0
200002fe:	f04f 0100 	mov.w	r1, #0
20000302:	f8df f168 	ldr.w	pc, [pc, #360]	; 2000046c <ACE_ADC2_FifoEmpty_IRQHandler+0x74>

20000306 <ExitLoop>:
20000306:	e7fe      	b.n	20000306 <ExitLoop>

20000308 <NMI_Handler>:
20000308:	e7fe      	b.n	20000308 <NMI_Handler>

2000030a <HardFault_Handler>:
2000030a:	e7fe      	b.n	2000030a <HardFault_Handler>

2000030c <MemManage_Handler>:
2000030c:	e7fe      	b.n	2000030c <MemManage_Handler>

2000030e <BusFault_Handler>:
2000030e:	e7fe      	b.n	2000030e <BusFault_Handler>

20000310 <UsageFault_Handler>:
20000310:	e7fe      	b.n	20000310 <UsageFault_Handler>

20000312 <SVC_Handler>:
20000312:	e7fe      	b.n	20000312 <SVC_Handler>

20000314 <DebugMon_Handler>:
20000314:	e7fe      	b.n	20000314 <DebugMon_Handler>

20000316 <PendSV_Handler>:
20000316:	e7fe      	b.n	20000316 <PendSV_Handler>

20000318 <SysTick_Handler>:
20000318:	e7fe      	b.n	20000318 <SysTick_Handler>

2000031a <WdogWakeup_IRQHandler>:
2000031a:	e7fe      	b.n	2000031a <WdogWakeup_IRQHandler>

2000031c <BrownOut_1_5V_IRQHandler>:
2000031c:	e7fe      	b.n	2000031c <BrownOut_1_5V_IRQHandler>

2000031e <BrownOut_3_3V_IRQHandler>:
2000031e:	e7fe      	b.n	2000031e <BrownOut_3_3V_IRQHandler>

20000320 <RTC_Match_IRQHandler>:
20000320:	e7fe      	b.n	20000320 <RTC_Match_IRQHandler>

20000322 <RTCIF_Pub_IRQHandler>:
20000322:	e7fe      	b.n	20000322 <RTCIF_Pub_IRQHandler>

20000324 <EthernetMAC_IRQHandler>:
20000324:	e7fe      	b.n	20000324 <EthernetMAC_IRQHandler>

20000326 <IAP_IRQHandler>:
20000326:	e7fe      	b.n	20000326 <IAP_IRQHandler>

20000328 <ENVM0_IRQHandler>:
20000328:	e7fe      	b.n	20000328 <ENVM0_IRQHandler>

2000032a <ENVM1_IRQHandler>:
2000032a:	e7fe      	b.n	2000032a <ENVM1_IRQHandler>

2000032c <DMA_IRQHandler>:
2000032c:	e7fe      	b.n	2000032c <DMA_IRQHandler>
2000032e:	e7fe      	b.n	2000032e <DMA_IRQHandler+0x2>
20000330:	e7fe      	b.n	20000330 <DMA_IRQHandler+0x4>
20000332:	e7fe      	b.n	20000332 <DMA_IRQHandler+0x6>
20000334:	e7fe      	b.n	20000334 <DMA_IRQHandler+0x8>

20000336 <I2C0_IRQHandler>:
20000336:	e7fe      	b.n	20000336 <I2C0_IRQHandler>

20000338 <I2C0_SMBAlert_IRQHandler>:
20000338:	e7fe      	b.n	20000338 <I2C0_SMBAlert_IRQHandler>

2000033a <I2C0_SMBus_IRQHandler>:
2000033a:	e7fe      	b.n	2000033a <I2C0_SMBus_IRQHandler>

2000033c <I2C1_IRQHandler>:
2000033c:	e7fe      	b.n	2000033c <I2C1_IRQHandler>

2000033e <I2C1_SMBAlert_IRQHandler>:
2000033e:	e7fe      	b.n	2000033e <I2C1_SMBAlert_IRQHandler>

20000340 <I2C1_SMBus_IRQHandler>:
20000340:	e7fe      	b.n	20000340 <I2C1_SMBus_IRQHandler>

20000342 <Timer1_IRQHandler>:
20000342:	e7fe      	b.n	20000342 <Timer1_IRQHandler>

20000344 <Timer2_IRQHandler>:
20000344:	e7fe      	b.n	20000344 <Timer2_IRQHandler>

20000346 <PLL_Lock_IRQHandler>:
20000346:	e7fe      	b.n	20000346 <PLL_Lock_IRQHandler>

20000348 <PLL_LockLost_IRQHandler>:
20000348:	e7fe      	b.n	20000348 <PLL_LockLost_IRQHandler>

2000034a <CommError_IRQHandler>:
2000034a:	e7fe      	b.n	2000034a <CommError_IRQHandler>

2000034c <Fabric_IRQHandler>:
2000034c:	e7fe      	b.n	2000034c <Fabric_IRQHandler>

2000034e <GPIO0_IRQHandler>:
2000034e:	e7fe      	b.n	2000034e <GPIO0_IRQHandler>

20000350 <GPIO1_IRQHandler>:
20000350:	e7fe      	b.n	20000350 <GPIO1_IRQHandler>

20000352 <GPIO2_IRQHandler>:
20000352:	e7fe      	b.n	20000352 <GPIO2_IRQHandler>

20000354 <GPIO3_IRQHandler>:
20000354:	e7fe      	b.n	20000354 <GPIO3_IRQHandler>

20000356 <GPIO4_IRQHandler>:
20000356:	e7fe      	b.n	20000356 <GPIO4_IRQHandler>

20000358 <GPIO5_IRQHandler>:
20000358:	e7fe      	b.n	20000358 <GPIO5_IRQHandler>

2000035a <GPIO6_IRQHandler>:
2000035a:	e7fe      	b.n	2000035a <GPIO6_IRQHandler>

2000035c <GPIO7_IRQHandler>:
2000035c:	e7fe      	b.n	2000035c <GPIO7_IRQHandler>

2000035e <GPIO8_IRQHandler>:
2000035e:	e7fe      	b.n	2000035e <GPIO8_IRQHandler>

20000360 <GPIO9_IRQHandler>:
20000360:	e7fe      	b.n	20000360 <GPIO9_IRQHandler>

20000362 <GPIO10_IRQHandler>:
20000362:	e7fe      	b.n	20000362 <GPIO10_IRQHandler>

20000364 <GPIO11_IRQHandler>:
20000364:	e7fe      	b.n	20000364 <GPIO11_IRQHandler>

20000366 <GPIO12_IRQHandler>:
20000366:	e7fe      	b.n	20000366 <GPIO12_IRQHandler>

20000368 <GPIO13_IRQHandler>:
20000368:	e7fe      	b.n	20000368 <GPIO13_IRQHandler>

2000036a <GPIO14_IRQHandler>:
2000036a:	e7fe      	b.n	2000036a <GPIO14_IRQHandler>

2000036c <GPIO15_IRQHandler>:
2000036c:	e7fe      	b.n	2000036c <GPIO15_IRQHandler>

2000036e <GPIO16_IRQHandler>:
2000036e:	e7fe      	b.n	2000036e <GPIO16_IRQHandler>

20000370 <GPIO17_IRQHandler>:
20000370:	e7fe      	b.n	20000370 <GPIO17_IRQHandler>

20000372 <GPIO18_IRQHandler>:
20000372:	e7fe      	b.n	20000372 <GPIO18_IRQHandler>

20000374 <GPIO19_IRQHandler>:
20000374:	e7fe      	b.n	20000374 <GPIO19_IRQHandler>

20000376 <GPIO20_IRQHandler>:
20000376:	e7fe      	b.n	20000376 <GPIO20_IRQHandler>

20000378 <GPIO21_IRQHandler>:
20000378:	e7fe      	b.n	20000378 <GPIO21_IRQHandler>

2000037a <GPIO22_IRQHandler>:
2000037a:	e7fe      	b.n	2000037a <GPIO22_IRQHandler>

2000037c <GPIO23_IRQHandler>:
2000037c:	e7fe      	b.n	2000037c <GPIO23_IRQHandler>

2000037e <GPIO24_IRQHandler>:
2000037e:	e7fe      	b.n	2000037e <GPIO24_IRQHandler>

20000380 <GPIO25_IRQHandler>:
20000380:	e7fe      	b.n	20000380 <GPIO25_IRQHandler>

20000382 <GPIO26_IRQHandler>:
20000382:	e7fe      	b.n	20000382 <GPIO26_IRQHandler>

20000384 <GPIO27_IRQHandler>:
20000384:	e7fe      	b.n	20000384 <GPIO27_IRQHandler>

20000386 <GPIO28_IRQHandler>:
20000386:	e7fe      	b.n	20000386 <GPIO28_IRQHandler>

20000388 <GPIO29_IRQHandler>:
20000388:	e7fe      	b.n	20000388 <GPIO29_IRQHandler>

2000038a <GPIO30_IRQHandler>:
2000038a:	e7fe      	b.n	2000038a <GPIO30_IRQHandler>

2000038c <GPIO31_IRQHandler>:
2000038c:	e7fe      	b.n	2000038c <GPIO31_IRQHandler>

2000038e <ACE_PC0_Flag0_IRQHandler>:
2000038e:	e7fe      	b.n	2000038e <ACE_PC0_Flag0_IRQHandler>

20000390 <ACE_PC0_Flag1_IRQHandler>:
20000390:	e7fe      	b.n	20000390 <ACE_PC0_Flag1_IRQHandler>

20000392 <ACE_PC0_Flag2_IRQHandler>:
20000392:	e7fe      	b.n	20000392 <ACE_PC0_Flag2_IRQHandler>

20000394 <ACE_PC0_Flag3_IRQHandler>:
20000394:	e7fe      	b.n	20000394 <ACE_PC0_Flag3_IRQHandler>

20000396 <ACE_PC1_Flag0_IRQHandler>:
20000396:	e7fe      	b.n	20000396 <ACE_PC1_Flag0_IRQHandler>

20000398 <ACE_PC1_Flag1_IRQHandler>:
20000398:	e7fe      	b.n	20000398 <ACE_PC1_Flag1_IRQHandler>

2000039a <ACE_PC1_Flag2_IRQHandler>:
2000039a:	e7fe      	b.n	2000039a <ACE_PC1_Flag2_IRQHandler>

2000039c <ACE_PC1_Flag3_IRQHandler>:
2000039c:	e7fe      	b.n	2000039c <ACE_PC1_Flag3_IRQHandler>

2000039e <ACE_PC2_Flag0_IRQHandler>:
2000039e:	e7fe      	b.n	2000039e <ACE_PC2_Flag0_IRQHandler>

200003a0 <ACE_PC2_Flag1_IRQHandler>:
200003a0:	e7fe      	b.n	200003a0 <ACE_PC2_Flag1_IRQHandler>

200003a2 <ACE_PC2_Flag2_IRQHandler>:
200003a2:	e7fe      	b.n	200003a2 <ACE_PC2_Flag2_IRQHandler>

200003a4 <ACE_PC2_Flag3_IRQHandler>:
200003a4:	e7fe      	b.n	200003a4 <ACE_PC2_Flag3_IRQHandler>

200003a6 <ACE_ADC0_DataValid_IRQHandler>:
200003a6:	e7fe      	b.n	200003a6 <ACE_ADC0_DataValid_IRQHandler>

200003a8 <ACE_ADC1_DataValid_IRQHandler>:
200003a8:	e7fe      	b.n	200003a8 <ACE_ADC1_DataValid_IRQHandler>

200003aa <ACE_ADC2_DataValid_IRQHandler>:
200003aa:	e7fe      	b.n	200003aa <ACE_ADC2_DataValid_IRQHandler>

200003ac <ACE_ADC0_CalDone_IRQHandler>:
200003ac:	e7fe      	b.n	200003ac <ACE_ADC0_CalDone_IRQHandler>

200003ae <ACE_ADC1_CalDone_IRQHandler>:
200003ae:	e7fe      	b.n	200003ae <ACE_ADC1_CalDone_IRQHandler>

200003b0 <ACE_ADC2_CalDone_IRQHandler>:
200003b0:	e7fe      	b.n	200003b0 <ACE_ADC2_CalDone_IRQHandler>

200003b2 <ACE_ADC0_CalStart_IRQHandler>:
200003b2:	e7fe      	b.n	200003b2 <ACE_ADC0_CalStart_IRQHandler>

200003b4 <ACE_ADC1_CalStart_IRQHandler>:
200003b4:	e7fe      	b.n	200003b4 <ACE_ADC1_CalStart_IRQHandler>

200003b6 <ACE_ADC2_CalStart_IRQHandler>:
200003b6:	e7fe      	b.n	200003b6 <ACE_ADC2_CalStart_IRQHandler>

200003b8 <ACE_Comp0_Fall_IRQHandler>:
200003b8:	e7fe      	b.n	200003b8 <ACE_Comp0_Fall_IRQHandler>

200003ba <ACE_Comp1_Fall_IRQHandler>:
200003ba:	e7fe      	b.n	200003ba <ACE_Comp1_Fall_IRQHandler>

200003bc <ACE_Comp2_Fall_IRQHandler>:
200003bc:	e7fe      	b.n	200003bc <ACE_Comp2_Fall_IRQHandler>

200003be <ACE_Comp3_Fall_IRQHandler>:
200003be:	e7fe      	b.n	200003be <ACE_Comp3_Fall_IRQHandler>

200003c0 <ACE_Comp4_Fall_IRQHandler>:
200003c0:	e7fe      	b.n	200003c0 <ACE_Comp4_Fall_IRQHandler>

200003c2 <ACE_Comp5_Fall_IRQHandler>:
200003c2:	e7fe      	b.n	200003c2 <ACE_Comp5_Fall_IRQHandler>

200003c4 <ACE_Comp6_Fall_IRQHandler>:
200003c4:	e7fe      	b.n	200003c4 <ACE_Comp6_Fall_IRQHandler>

200003c6 <ACE_Comp7_Fall_IRQHandler>:
200003c6:	e7fe      	b.n	200003c6 <ACE_Comp7_Fall_IRQHandler>

200003c8 <ACE_Comp8_Fall_IRQHandler>:
200003c8:	e7fe      	b.n	200003c8 <ACE_Comp8_Fall_IRQHandler>

200003ca <ACE_Comp9_Fall_IRQHandler>:
200003ca:	e7fe      	b.n	200003ca <ACE_Comp9_Fall_IRQHandler>

200003cc <ACE_Comp10_Fall_IRQHandler>:
200003cc:	e7fe      	b.n	200003cc <ACE_Comp10_Fall_IRQHandler>

200003ce <ACE_Comp11_Fall_IRQHandler>:
200003ce:	e7fe      	b.n	200003ce <ACE_Comp11_Fall_IRQHandler>

200003d0 <ACE_Comp0_Rise_IRQHandler>:
200003d0:	e7fe      	b.n	200003d0 <ACE_Comp0_Rise_IRQHandler>

200003d2 <ACE_Comp1_Rise_IRQHandler>:
200003d2:	e7fe      	b.n	200003d2 <ACE_Comp1_Rise_IRQHandler>

200003d4 <ACE_Comp2_Rise_IRQHandler>:
200003d4:	e7fe      	b.n	200003d4 <ACE_Comp2_Rise_IRQHandler>

200003d6 <ACE_Comp3_Rise_IRQHandler>:
200003d6:	e7fe      	b.n	200003d6 <ACE_Comp3_Rise_IRQHandler>

200003d8 <ACE_Comp4_Rise_IRQHandler>:
200003d8:	e7fe      	b.n	200003d8 <ACE_Comp4_Rise_IRQHandler>

200003da <ACE_Comp5_Rise_IRQHandler>:
200003da:	e7fe      	b.n	200003da <ACE_Comp5_Rise_IRQHandler>

200003dc <ACE_Comp6_Rise_IRQHandler>:
200003dc:	e7fe      	b.n	200003dc <ACE_Comp6_Rise_IRQHandler>

200003de <ACE_Comp7_Rise_IRQHandler>:
200003de:	e7fe      	b.n	200003de <ACE_Comp7_Rise_IRQHandler>

200003e0 <ACE_Comp8_Rise_IRQHandler>:
200003e0:	e7fe      	b.n	200003e0 <ACE_Comp8_Rise_IRQHandler>

200003e2 <ACE_Comp9_Rise_IRQHandler>:
200003e2:	e7fe      	b.n	200003e2 <ACE_Comp9_Rise_IRQHandler>

200003e4 <ACE_Comp10_Rise_IRQHandler>:
200003e4:	e7fe      	b.n	200003e4 <ACE_Comp10_Rise_IRQHandler>

200003e6 <ACE_Comp11_Rise_IRQHandler>:
200003e6:	e7fe      	b.n	200003e6 <ACE_Comp11_Rise_IRQHandler>

200003e8 <ACE_ADC0_FifoFull_IRQHandler>:
200003e8:	e7fe      	b.n	200003e8 <ACE_ADC0_FifoFull_IRQHandler>

200003ea <ACE_ADC0_FifoAFull_IRQHandler>:
200003ea:	e7fe      	b.n	200003ea <ACE_ADC0_FifoAFull_IRQHandler>

200003ec <ACE_ADC0_FifoEmpty_IRQHandler>:
200003ec:	e7fe      	b.n	200003ec <ACE_ADC0_FifoEmpty_IRQHandler>

200003ee <ACE_ADC1_FifoFull_IRQHandler>:
200003ee:	e7fe      	b.n	200003ee <ACE_ADC1_FifoFull_IRQHandler>

200003f0 <ACE_ADC1_FifoAFull_IRQHandler>:
200003f0:	e7fe      	b.n	200003f0 <ACE_ADC1_FifoAFull_IRQHandler>

200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>:
200003f2:	e7fe      	b.n	200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>

200003f4 <ACE_ADC2_FifoFull_IRQHandler>:
200003f4:	e7fe      	b.n	200003f4 <ACE_ADC2_FifoFull_IRQHandler>

200003f6 <ACE_ADC2_FifoAFull_IRQHandler>:
200003f6:	e7fe      	b.n	200003f6 <ACE_ADC2_FifoAFull_IRQHandler>

200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>:
200003f8:	e7fe      	b.n	200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>
200003fa:	e7fe      	b.n	200003fa <ACE_ADC2_FifoEmpty_IRQHandler+0x2>
200003fc:	e7fe      	b.n	200003fc <ACE_ADC2_FifoEmpty_IRQHandler+0x4>
200003fe:	e7fe      	b.n	200003fe <ACE_ADC2_FifoEmpty_IRQHandler+0x6>
20000400:	e7fe      	b.n	20000400 <ACE_ADC2_FifoEmpty_IRQHandler+0x8>
20000402:	e7fe      	b.n	20000402 <ACE_ADC2_FifoEmpty_IRQHandler+0xa>
20000404:	e7fe      	b.n	20000404 <ACE_ADC2_FifoEmpty_IRQHandler+0xc>
20000406:	e7fe      	b.n	20000406 <ACE_ADC2_FifoEmpty_IRQHandler+0xe>
20000408:	e7fe      	b.n	20000408 <ACE_ADC2_FifoEmpty_IRQHandler+0x10>
2000040a:	e7fe      	b.n	2000040a <ACE_ADC2_FifoEmpty_IRQHandler+0x12>
2000040c:	e7fe      	b.n	2000040c <ACE_ADC2_FifoEmpty_IRQHandler+0x14>
2000040e:	e7fe      	b.n	2000040e <ACE_ADC2_FifoEmpty_IRQHandler+0x16>
20000410:	e7fe      	b.n	20000410 <ACE_ADC2_FifoEmpty_IRQHandler+0x18>
20000412:	e7fe      	b.n	20000412 <ACE_ADC2_FifoEmpty_IRQHandler+0x1a>
20000414:	e7fe      	b.n	20000414 <ACE_ADC2_FifoEmpty_IRQHandler+0x1c>
20000416:	e7fe      	b.n	20000416 <ACE_ADC2_FifoEmpty_IRQHandler+0x1e>
20000418:	e7fe      	b.n	20000418 <ACE_ADC2_FifoEmpty_IRQHandler+0x20>
2000041a:	e7fe      	b.n	2000041a <ACE_ADC2_FifoEmpty_IRQHandler+0x22>
2000041c:	e7fe      	b.n	2000041c <ACE_ADC2_FifoEmpty_IRQHandler+0x24>
2000041e:	e7fe      	b.n	2000041e <ACE_ADC2_FifoEmpty_IRQHandler+0x26>
20000420:	e7fe      	b.n	20000420 <ACE_ADC2_FifoEmpty_IRQHandler+0x28>
20000422:	e7fe      	b.n	20000422 <ACE_ADC2_FifoEmpty_IRQHandler+0x2a>
20000424:	e7fe      	b.n	20000424 <ACE_ADC2_FifoEmpty_IRQHandler+0x2c>
20000426:	e7fe      	b.n	20000426 <ACE_ADC2_FifoEmpty_IRQHandler+0x2e>
20000428:	e7fe      	b.n	20000428 <ACE_ADC2_FifoEmpty_IRQHandler+0x30>
2000042a:	e7fe      	b.n	2000042a <ACE_ADC2_FifoEmpty_IRQHandler+0x32>
2000042c:	e7fe      	b.n	2000042c <ACE_ADC2_FifoEmpty_IRQHandler+0x34>
2000042e:	e7fe      	b.n	2000042e <ACE_ADC2_FifoEmpty_IRQHandler+0x36>
20000430:	e7fe      	b.n	20000430 <ACE_ADC2_FifoEmpty_IRQHandler+0x38>
20000432:	e7fe      	b.n	20000432 <ACE_ADC2_FifoEmpty_IRQHandler+0x3a>
20000434:	e7fe      	b.n	20000434 <ACE_ADC2_FifoEmpty_IRQHandler+0x3c>
20000436:	e7fe      	b.n	20000436 <ACE_ADC2_FifoEmpty_IRQHandler+0x3e>
20000438:	e7fe      	b.n	20000438 <ACE_ADC2_FifoEmpty_IRQHandler+0x40>
2000043a:	0000      	.short	0x0000
2000043c:	20002565 	.word	0x20002565
20000440:	00000000 	.word	0x00000000
20000444:	20000000 	.word	0x20000000
20000448:	20000000 	.word	0x20000000
2000044c:	200037ac 	.word	0x200037ac
20000450:	200037ac 	.word	0x200037ac
20000454:	200037ac 	.word	0x200037ac
20000458:	20003810 	.word	0x20003810
2000045c:	00000000 	.word	0x00000000
20000460:	20003810 	.word	0x20003810
20000464:	200039c8 	.word	0x200039c8
20000468:	200033c1 	.word	0x200033c1
2000046c:	200004a1 	.word	0x200004a1

20000470 <__do_global_dtors_aux>:
20000470:	f643 0310 	movw	r3, #14352	; 0x3810
20000474:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000478:	781a      	ldrb	r2, [r3, #0]
2000047a:	b90a      	cbnz	r2, 20000480 <__do_global_dtors_aux+0x10>
2000047c:	2001      	movs	r0, #1
2000047e:	7018      	strb	r0, [r3, #0]
20000480:	4770      	bx	lr
20000482:	bf00      	nop

20000484 <frame_dummy>:
20000484:	f243 70ac 	movw	r0, #14252	; 0x37ac
20000488:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000048c:	b508      	push	{r3, lr}
2000048e:	6803      	ldr	r3, [r0, #0]
20000490:	b12b      	cbz	r3, 2000049e <frame_dummy+0x1a>
20000492:	f240 0300 	movw	r3, #0
20000496:	f2c0 0300 	movt	r3, #0
2000049a:	b103      	cbz	r3, 2000049e <frame_dummy+0x1a>
2000049c:	4798      	blx	r3
2000049e:	bd08      	pop	{r3, pc}

200004a0 <main>:
#include "xbee.h"

uint8_t message[5] = "hello";

int main()
{
200004a0:	b580      	push	{r7, lr}
200004a2:	b084      	sub	sp, #16
200004a4:	af02      	add	r7, sp, #8
	MSS_UART_init(&g_mss_uart1, MSS_UART_57600_BAUD, MSS_UART_DATA_8_BITS | MSS_UART_NO_PARITY | MSS_UART_ONE_STOP_BIT);
200004a6:	f643 006c 	movw	r0, #14444	; 0x386c
200004aa:	f2c2 0000 	movt	r0, #8192	; 0x2000
200004ae:	f44f 4161 	mov.w	r1, #57600	; 0xe100
200004b2:	f04f 0203 	mov.w	r2, #3
200004b6:	f000 fe25 	bl	20001104 <MSS_UART_init>
	MSS_UART_set_rx_handler( &g_mss_uart1, uart1_rx_handler, MSS_UART_FIFO_SINGLE_BYTE);
200004ba:	f643 006c 	movw	r0, #14444	; 0x386c
200004be:	f2c2 0000 	movt	r0, #8192	; 0x2000
200004c2:	f241 016d 	movw	r1, #4205	; 0x106d
200004c6:	f2c2 0100 	movt	r1, #8192	; 0x2000
200004ca:	f04f 0200 	mov.w	r2, #0
200004ce:	f001 f90d 	bl	200016ec <MSS_UART_set_rx_handler>
	touchscreen_begin();
200004d2:	f000 f93d 	bl	20000750 <touchscreen_begin>

	drawFillScreen(ILI9341_BLUE);
200004d6:	f04f 001f 	mov.w	r0, #31
200004da:	f000 faf9 	bl	20000ad0 <drawFillScreen>
	drawRectanglePixel(5, 5, 110, 152, ILI9341_WHITE);
200004de:	f64f 73ff 	movw	r3, #65535	; 0xffff
200004e2:	9300      	str	r3, [sp, #0]
200004e4:	f04f 0005 	mov.w	r0, #5
200004e8:	f04f 0105 	mov.w	r1, #5
200004ec:	f04f 026e 	mov.w	r2, #110	; 0x6e
200004f0:	f04f 0398 	mov.w	r3, #152	; 0x98
200004f4:	f000 fabe 	bl	20000a74 <drawRectanglePixel>
	drawRectanglePixel(5, 165, 110, 152, ILI9341_WHITE);
200004f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
200004fc:	9300      	str	r3, [sp, #0]
200004fe:	f04f 0005 	mov.w	r0, #5
20000502:	f04f 01a5 	mov.w	r1, #165	; 0xa5
20000506:	f04f 026e 	mov.w	r2, #110	; 0x6e
2000050a:	f04f 0398 	mov.w	r3, #152	; 0x98
2000050e:	f000 fab1 	bl	20000a74 <drawRectanglePixel>
	drawRectanglePixel(120, 5, 115, 312, ILI9341_WHITE);
20000512:	f64f 73ff 	movw	r3, #65535	; 0xffff
20000516:	9300      	str	r3, [sp, #0]
20000518:	f04f 0078 	mov.w	r0, #120	; 0x78
2000051c:	f04f 0105 	mov.w	r1, #5
20000520:	f04f 0273 	mov.w	r2, #115	; 0x73
20000524:	f44f 739c 	mov.w	r3, #312	; 0x138
20000528:	f000 faa4 	bl	20000a74 <drawRectanglePixel>

	drawText1(ILI9341_BLACK);
2000052c:	f04f 0000 	mov.w	r0, #0
20000530:	f000 fae4 	bl	20000afc <drawText1>
	drawText2(ILI9341_BLACK);
20000534:	f04f 0000 	mov.w	r0, #0
20000538:	f000 fb02 	bl	20000b40 <drawText2>
	drawText3(ILI9341_BLACK);
2000053c:	f04f 0000 	mov.w	r0, #0
20000540:	f000 fb2c 	bl	20000b9c <drawText3>

	while( 1 )
	{
		int x = getX();
20000544:	f000 f978 	bl	20000838 <getX>
20000548:	4603      	mov	r3, r0
2000054a:	b29b      	uxth	r3, r3
2000054c:	b21b      	sxth	r3, r3
2000054e:	603b      	str	r3, [r7, #0]
		int y = getY();
20000550:	f000 f9f2 	bl	20000938 <getY>
20000554:	4603      	mov	r3, r0
20000556:	b29b      	uxth	r3, r3
20000558:	b21b      	sxth	r3, r3
2000055a:	607b      	str	r3, [r7, #4]
		sendMessage(&message, 5, 0x000);
2000055c:	f243 70b0 	movw	r0, #14256	; 0x37b0
20000560:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000564:	f04f 0105 	mov.w	r1, #5
20000568:	f04f 0200 	mov.w	r2, #0
2000056c:	f000 fd00 	bl	20000f70 <sendMessage>

		if(x && y){
20000570:	683b      	ldr	r3, [r7, #0]
20000572:	2b00      	cmp	r3, #0
20000574:	d031      	beq.n	200005da <main+0x13a>
20000576:	687b      	ldr	r3, [r7, #4]
20000578:	2b00      	cmp	r3, #0
2000057a:	d02e      	beq.n	200005da <main+0x13a>
			if(abs(getX() - x) < 5 && abs(getY() - y) <5){
2000057c:	f000 f95c 	bl	20000838 <getX>
20000580:	4603      	mov	r3, r0
20000582:	b29b      	uxth	r3, r3
20000584:	b21a      	sxth	r2, r3
20000586:	683b      	ldr	r3, [r7, #0]
20000588:	ebc3 0302 	rsb	r3, r3, r2
2000058c:	2b00      	cmp	r3, #0
2000058e:	bfb8      	it	lt
20000590:	425b      	neglt	r3, r3
20000592:	2b04      	cmp	r3, #4
20000594:	dc21      	bgt.n	200005da <main+0x13a>
20000596:	f000 f9cf 	bl	20000938 <getY>
2000059a:	4603      	mov	r3, r0
2000059c:	b29b      	uxth	r3, r3
2000059e:	b21a      	sxth	r2, r3
200005a0:	687b      	ldr	r3, [r7, #4]
200005a2:	ebc3 0302 	rsb	r3, r3, r2
200005a6:	2b00      	cmp	r3, #0
200005a8:	bfb8      	it	lt
200005aa:	425b      	neglt	r3, r3
200005ac:	2b04      	cmp	r3, #4
200005ae:	dc14      	bgt.n	200005da <main+0x13a>
				drawRectanglePixel(x-2, y-2, 4, 4, ILI9341_YELLOW);
200005b0:	683b      	ldr	r3, [r7, #0]
200005b2:	b29b      	uxth	r3, r3
200005b4:	f1a3 0302 	sub.w	r3, r3, #2
200005b8:	b29a      	uxth	r2, r3
200005ba:	687b      	ldr	r3, [r7, #4]
200005bc:	b29b      	uxth	r3, r3
200005be:	f1a3 0302 	sub.w	r3, r3, #2
200005c2:	b29b      	uxth	r3, r3
200005c4:	f64f 71e0 	movw	r1, #65504	; 0xffe0
200005c8:	9100      	str	r1, [sp, #0]
200005ca:	4610      	mov	r0, r2
200005cc:	4619      	mov	r1, r3
200005ce:	f04f 0204 	mov.w	r2, #4
200005d2:	f04f 0304 	mov.w	r3, #4
200005d6:	f000 fa4d 	bl	20000a74 <drawRectanglePixel>

			}

		}
		delay(1);
200005da:	f04f 0001 	mov.w	r0, #1
200005de:	f000 fb63 	bl	20000ca8 <delay>
	}
200005e2:	e7af      	b.n	20000544 <main+0xa4>

200005e4 <NVIC_DisableIRQ>:
 * 
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
200005e4:	b480      	push	{r7}
200005e6:	b083      	sub	sp, #12
200005e8:	af00      	add	r7, sp, #0
200005ea:	4603      	mov	r3, r0
200005ec:	80fb      	strh	r3, [r7, #6]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
200005ee:	f24e 1300 	movw	r3, #57600	; 0xe100
200005f2:	f2ce 0300 	movt	r3, #57344	; 0xe000
200005f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
200005fa:	ea4f 1252 	mov.w	r2, r2, lsr #5
200005fe:	88f9      	ldrh	r1, [r7, #6]
20000600:	f001 011f 	and.w	r1, r1, #31
20000604:	f04f 0001 	mov.w	r0, #1
20000608:	fa00 f101 	lsl.w	r1, r0, r1
2000060c:	f102 0220 	add.w	r2, r2, #32
20000610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000614:	f107 070c 	add.w	r7, r7, #12
20000618:	46bd      	mov	sp, r7
2000061a:	bc80      	pop	{r7}
2000061c:	4770      	bx	lr
2000061e:	bf00      	nop

20000620 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20000620:	b480      	push	{r7}
20000622:	b083      	sub	sp, #12
20000624:	af00      	add	r7, sp, #0
20000626:	4603      	mov	r3, r0
20000628:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
2000062a:	f24e 1300 	movw	r3, #57600	; 0xe100
2000062e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000632:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20000636:	ea4f 1252 	mov.w	r2, r2, lsr #5
2000063a:	88f9      	ldrh	r1, [r7, #6]
2000063c:	f001 011f 	and.w	r1, r1, #31
20000640:	f04f 0001 	mov.w	r0, #1
20000644:	fa00 f101 	lsl.w	r1, r0, r1
20000648:	f102 0260 	add.w	r2, r2, #96	; 0x60
2000064c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000650:	f107 070c 	add.w	r7, r7, #12
20000654:	46bd      	mov	sp, r7
20000656:	bc80      	pop	{r7}
20000658:	4770      	bx	lr
2000065a:	bf00      	nop

2000065c <MSS_TIM1_init>:
    one-shot mode. Allowed values for this parameter are:
        - MSS_TIMER_PERIODIC_MODE
        - MSS_TIMER_ONE_SHOT_MODE
 */
static __INLINE void MSS_TIM1_init( mss_timer_mode_t mode )
{
2000065c:	b580      	push	{r7, lr}
2000065e:	b082      	sub	sp, #8
20000660:	af00      	add	r7, sp, #0
20000662:	4603      	mov	r3, r0
20000664:	71fb      	strb	r3, [r7, #7]
    NVIC_DisableIRQ( Timer1_IRQn );             /* Disable timer 1 irq in the Cortex-M3 NVIC */  
20000666:	f04f 0014 	mov.w	r0, #20
2000066a:	f7ff ffbb 	bl	200005e4 <NVIC_DisableIRQ>
    
    SYSREG->SOFT_RST_CR &= ~SYSREG_TIMER_SOFTRESET_MASK; /* Take timer block out of reset */
2000066e:	f242 0300 	movw	r3, #8192	; 0x2000
20000672:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000676:	f242 0200 	movw	r2, #8192	; 0x2000
2000067a:	f2ce 0204 	movt	r2, #57348	; 0xe004
2000067e:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000680:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20000684:	631a      	str	r2, [r3, #48]	; 0x30
    
    TIMER->TIM64_MODE = 0U;                     /* switch to 32 bits mode */
20000686:	f245 0300 	movw	r3, #20480	; 0x5000
2000068a:	f2c4 0300 	movt	r3, #16384	; 0x4000
2000068e:	f04f 0200 	mov.w	r2, #0
20000692:	655a      	str	r2, [r3, #84]	; 0x54
    
    TIMER_BITBAND->TIM1ENABLE = 0U;             /* disable timer */
20000694:	f240 0300 	movw	r3, #0
20000698:	f2c4 230a 	movt	r3, #16906	; 0x420a
2000069c:	f04f 0200 	mov.w	r2, #0
200006a0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    TIMER_BITBAND->TIM1INTEN = 0U;              /* disable interrupt */
200006a4:	f240 0300 	movw	r3, #0
200006a8:	f2c4 230a 	movt	r3, #16906	; 0x420a
200006ac:	f04f 0200 	mov.w	r2, #0
200006b0:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    TIMER_BITBAND->TIM1MODE = (uint32_t)mode;   /* set mode (continuous/one-shot) */
200006b4:	f240 0300 	movw	r3, #0
200006b8:	f2c4 230a 	movt	r3, #16906	; 0x420a
200006bc:	79fa      	ldrb	r2, [r7, #7]
200006be:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    
    TIMER->TIM1_RIS = 1U;                       /* clear timer 1 interrupt */
200006c2:	f245 0300 	movw	r3, #20480	; 0x5000
200006c6:	f2c4 0300 	movt	r3, #16384	; 0x4000
200006ca:	f04f 0201 	mov.w	r2, #1
200006ce:	611a      	str	r2, [r3, #16]
    NVIC_ClearPendingIRQ( Timer1_IRQn );        /* clear timer 1 interrupt within NVIC */
200006d0:	f04f 0014 	mov.w	r0, #20
200006d4:	f7ff ffa4 	bl	20000620 <NVIC_ClearPendingIRQ>
}
200006d8:	f107 0708 	add.w	r7, r7, #8
200006dc:	46bd      	mov	sp, r7
200006de:	bd80      	pop	{r7, pc}

200006e0 <MSS_TIM1_start>:
  MSS_TIM1_load_immediate() or MSS_TIM1_load_background() functions. 
  Note: The MSS_TIM1_start() function is also used to resume the down-counter
        if previously stopped using MSS_TIM1_stop() function.
 */
static __INLINE void MSS_TIM1_start( void )
{
200006e0:	b480      	push	{r7}
200006e2:	af00      	add	r7, sp, #0
    TIMER_BITBAND->TIM1ENABLE = 1U;    /* enable timer */
200006e4:	f240 0300 	movw	r3, #0
200006e8:	f2c4 230a 	movt	r3, #16906	; 0x420a
200006ec:	f04f 0201 	mov.w	r2, #1
200006f0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
200006f4:	46bd      	mov	sp, r7
200006f6:	bc80      	pop	{r7}
200006f8:	4770      	bx	lr
200006fa:	bf00      	nop

200006fc <MSS_TIM1_stop>:
/*-------------------------------------------------------------------------*//**
  The MSS_TIM1_stop() function disables Timer 1 and stops its down-counter
  decrementing.
 */
static __INLINE void MSS_TIM1_stop( void )
{
200006fc:	b480      	push	{r7}
200006fe:	af00      	add	r7, sp, #0
    TIMER_BITBAND->TIM1ENABLE = 0U;    /* disable timer */
20000700:	f240 0300 	movw	r3, #0
20000704:	f2c4 230a 	movt	r3, #16906	; 0x420a
20000708:	f04f 0200 	mov.w	r2, #0
2000070c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
20000710:	46bd      	mov	sp, r7
20000712:	bc80      	pop	{r7}
20000714:	4770      	bx	lr
20000716:	bf00      	nop

20000718 <MSS_TIM1_get_current_value>:
  
  @return
    This function returns the 32-bits current value of the Timer 1 down-counter.
 */
static __INLINE uint32_t MSS_TIM1_get_current_value( void )
{
20000718:	b480      	push	{r7}
2000071a:	af00      	add	r7, sp, #0
    return TIMER->TIM1_VAL;
2000071c:	f245 0300 	movw	r3, #20480	; 0x5000
20000720:	f2c4 0300 	movt	r3, #16384	; 0x4000
20000724:	681b      	ldr	r3, [r3, #0]
}
20000726:	4618      	mov	r0, r3
20000728:	46bd      	mov	sp, r7
2000072a:	bc80      	pop	{r7}
2000072c:	4770      	bx	lr
2000072e:	bf00      	nop

20000730 <MSS_TIM1_load_immediate>:
  @param load_value
    The load_value parameter specifies the value from which the Timer 1 
    down-counter will start decrementing.
 */
static __INLINE void MSS_TIM1_load_immediate( uint32_t load_value )
{
20000730:	b480      	push	{r7}
20000732:	b083      	sub	sp, #12
20000734:	af00      	add	r7, sp, #0
20000736:	6078      	str	r0, [r7, #4]
    TIMER->TIM1_LOADVAL = load_value;
20000738:	f245 0300 	movw	r3, #20480	; 0x5000
2000073c:	f2c4 0300 	movt	r3, #16384	; 0x4000
20000740:	687a      	ldr	r2, [r7, #4]
20000742:	605a      	str	r2, [r3, #4]
}
20000744:	f107 070c 	add.w	r7, r7, #12
20000748:	46bd      	mov	sp, r7
2000074a:	bc80      	pop	{r7}
2000074c:	4770      	bx	lr
2000074e:	bf00      	nop

20000750 <touchscreen_begin>:
    0x31, 0xC1, 0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F,
  ILI9341_SLPOUT  , 0x80,                // Exit Sleep
  ILI9341_DISPON  , 0x80,                // Display on
  0x00                                   // End of list
};
void touchscreen_begin(){
20000750:	b580      	push	{r7, lr}
20000752:	b082      	sub	sp, #8
20000754:	af00      	add	r7, sp, #0

	uint8_t cmd, x, numArgs;
	const uint8_t *addr = initcmd;
20000756:	f243 538c 	movw	r3, #13708	; 0x358c
2000075a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000075e:	607b      	str	r3, [r7, #4]

	MSS_SPI_init(&g_mss_spi1);
20000760:	f643 00bc 	movw	r0, #14524	; 0x38bc
20000764:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000768:	f001 f898 	bl	2000189c <MSS_SPI_init>
	MSS_GPIO_init();
2000076c:	f001 fe1a 	bl	200023a4 <MSS_GPIO_init>
	ACE_init();
20000770:	f001 fe8c 	bl	2000248c <ACE_init>
	MSS_GPIO_config(DC, MSS_GPIO_OUTPUT_MODE);
20000774:	f04f 0000 	mov.w	r0, #0
20000778:	f04f 0105 	mov.w	r1, #5
2000077c:	f001 fe48 	bl	20002410 <MSS_GPIO_config>
	ace_y = ACE_get_channel_handle((const uint8_t*)"ADCDirectInput_0");
20000780:	f243 50fc 	movw	r0, #13820	; 0x35fc
20000784:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000788:	f001 fe88 	bl	2000249c <ACE_get_channel_handle>
2000078c:	4603      	mov	r3, r0
2000078e:	461a      	mov	r2, r3
20000790:	f643 0329 	movw	r3, #14377	; 0x3829
20000794:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000798:	701a      	strb	r2, [r3, #0]
	ace_x = ACE_get_channel_handle((const uint8_t*)"ADCDirectInput_1");
2000079a:	f243 6010 	movw	r0, #13840	; 0x3610
2000079e:	f2c2 0000 	movt	r0, #8192	; 0x2000
200007a2:	f001 fe7b 	bl	2000249c <ACE_get_channel_handle>
200007a6:	4603      	mov	r3, r0
200007a8:	461a      	mov	r2, r3
200007aa:	f643 0328 	movw	r3, #14376	; 0x3828
200007ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
200007b2:	701a      	strb	r2, [r3, #0]
	
	configureSPI(8);
200007b4:	f04f 0008 	mov.w	r0, #8
200007b8:	f000 fb68 	bl	20000e8c <configureSPI>
	set_SPI_CS();
200007bc:	f000 fbac 	bl	20000f18 <set_SPI_CS>
	sendCommandOnly(ILI9341_SWRESET);
200007c0:	f04f 0001 	mov.w	r0, #1
200007c4:	f000 faae 	bl	20000d24 <sendCommandOnly>
	delay(150);
200007c8:	f04f 0096 	mov.w	r0, #150	; 0x96
200007cc:	f000 fa6c 	bl	20000ca8 <delay>

	while((cmd = pgm_read_byte(addr++)) > 0) {
200007d0:	e01d      	b.n	2000080e <touchscreen_begin+0xbe>
		x = pgm_read_byte(addr++);
200007d2:	687b      	ldr	r3, [r7, #4]
200007d4:	781b      	ldrb	r3, [r3, #0]
200007d6:	70bb      	strb	r3, [r7, #2]
200007d8:	687b      	ldr	r3, [r7, #4]
200007da:	f103 0301 	add.w	r3, r3, #1
200007de:	607b      	str	r3, [r7, #4]
		numArgs = x & 0x7F;
200007e0:	78bb      	ldrb	r3, [r7, #2]
200007e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
200007e6:	70fb      	strb	r3, [r7, #3]
		sendCommand(cmd, addr, numArgs);
200007e8:	787a      	ldrb	r2, [r7, #1]
200007ea:	78fb      	ldrb	r3, [r7, #3]
200007ec:	4610      	mov	r0, r2
200007ee:	6879      	ldr	r1, [r7, #4]
200007f0:	461a      	mov	r2, r3
200007f2:	f000 fa29 	bl	20000c48 <sendCommand>
		addr += numArgs;
200007f6:	78fb      	ldrb	r3, [r7, #3]
200007f8:	687a      	ldr	r2, [r7, #4]
200007fa:	4413      	add	r3, r2
200007fc:	607b      	str	r3, [r7, #4]
		if(x & 0x80) delay(150);
200007fe:	78bb      	ldrb	r3, [r7, #2]
20000800:	b25b      	sxtb	r3, r3
20000802:	2b00      	cmp	r3, #0
20000804:	da03      	bge.n	2000080e <touchscreen_begin+0xbe>
20000806:	f04f 0096 	mov.w	r0, #150	; 0x96
2000080a:	f000 fa4d 	bl	20000ca8 <delay>
	configureSPI(8);
	set_SPI_CS();
	sendCommandOnly(ILI9341_SWRESET);
	delay(150);

	while((cmd = pgm_read_byte(addr++)) > 0) {
2000080e:	687b      	ldr	r3, [r7, #4]
20000810:	781b      	ldrb	r3, [r3, #0]
20000812:	707b      	strb	r3, [r7, #1]
20000814:	787b      	ldrb	r3, [r7, #1]
20000816:	2b00      	cmp	r3, #0
20000818:	bf0c      	ite	eq
2000081a:	2300      	moveq	r3, #0
2000081c:	2301      	movne	r3, #1
2000081e:	b2db      	uxtb	r3, r3
20000820:	687a      	ldr	r2, [r7, #4]
20000822:	f102 0201 	add.w	r2, r2, #1
20000826:	607a      	str	r2, [r7, #4]
20000828:	2b00      	cmp	r3, #0
2000082a:	d1d2      	bne.n	200007d2 <touchscreen_begin+0x82>
		numArgs = x & 0x7F;
		sendCommand(cmd, addr, numArgs);
		addr += numArgs;
		if(x & 0x80) delay(150);
	}
	clear_SPI_CS();
2000082c:	f000 fb80 	bl	20000f30 <clear_SPI_CS>

}
20000830:	f107 0708 	add.w	r7, r7, #8
20000834:	46bd      	mov	sp, r7
20000836:	bd80      	pop	{r7, pc}

20000838 <getX>:
int16_t getX(){
20000838:	b580      	push	{r7, lr}
2000083a:	b082      	sub	sp, #8
2000083c:	af00      	add	r7, sp, #0
	int samples[2];
	MSS_GPIO_set_output(yn, 0);
2000083e:	f04f 0006 	mov.w	r0, #6
20000842:	f04f 0100 	mov.w	r1, #0
20000846:	f001 fe01 	bl	2000244c <MSS_GPIO_set_output>
	MSS_GPIO_config(yp, MSS_GPIO_INPUT_MODE);
2000084a:	f04f 0005 	mov.w	r0, #5
2000084e:	f04f 0102 	mov.w	r1, #2
20000852:	f001 fddd 	bl	20002410 <MSS_GPIO_config>
	MSS_GPIO_config(yn, MSS_GPIO_INPUT_MODE);
20000856:	f04f 0006 	mov.w	r0, #6
2000085a:	f04f 0102 	mov.w	r1, #2
2000085e:	f001 fdd7 	bl	20002410 <MSS_GPIO_config>
	MSS_GPIO_config(xp, MSS_GPIO_OUTPUT_MODE);
20000862:	f04f 0007 	mov.w	r0, #7
20000866:	f04f 0105 	mov.w	r1, #5
2000086a:	f001 fdd1 	bl	20002410 <MSS_GPIO_config>
	MSS_GPIO_config(xn, MSS_GPIO_OUTPUT_MODE);
2000086e:	f04f 0008 	mov.w	r0, #8
20000872:	f04f 0105 	mov.w	r1, #5
20000876:	f001 fdcb 	bl	20002410 <MSS_GPIO_config>

	MSS_GPIO_set_output(xp, 1);
2000087a:	f04f 0007 	mov.w	r0, #7
2000087e:	f04f 0101 	mov.w	r1, #1
20000882:	f001 fde3 	bl	2000244c <MSS_GPIO_set_output>
	MSS_GPIO_set_output(xn, 0);
20000886:	f04f 0008 	mov.w	r0, #8
2000088a:	f04f 0100 	mov.w	r1, #0
2000088e:	f001 fddd 	bl	2000244c <MSS_GPIO_set_output>
	delayMicro(500);
20000892:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
20000896:	f000 fa27 	bl	20000ce8 <delayMicro>

	samples[0] = ACE_get_ppe_sample(ace_y);
2000089a:	f643 0329 	movw	r3, #14377	; 0x3829
2000089e:	f2c2 0300 	movt	r3, #8192	; 0x2000
200008a2:	781b      	ldrb	r3, [r3, #0]
200008a4:	4618      	mov	r0, r3
200008a6:	f001 fe33 	bl	20002510 <ACE_get_ppe_sample>
200008aa:	4603      	mov	r3, r0
200008ac:	603b      	str	r3, [r7, #0]
	samples[1] = ACE_get_ppe_sample(ace_y);
200008ae:	f643 0329 	movw	r3, #14377	; 0x3829
200008b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200008b6:	781b      	ldrb	r3, [r3, #0]
200008b8:	4618      	mov	r0, r3
200008ba:	f001 fe29 	bl	20002510 <ACE_get_ppe_sample>
200008be:	4603      	mov	r3, r0
200008c0:	607b      	str	r3, [r7, #4]

	if (samples[0] - samples[1] < -4 || samples[0] - samples[1] > 4) {
200008c2:	683a      	ldr	r2, [r7, #0]
200008c4:	687b      	ldr	r3, [r7, #4]
200008c6:	ebc3 0302 	rsb	r3, r3, r2
200008ca:	f113 0f04 	cmn.w	r3, #4
200008ce:	db05      	blt.n	200008dc <getX+0xa4>
200008d0:	683a      	ldr	r2, [r7, #0]
200008d2:	687b      	ldr	r3, [r7, #4]
200008d4:	ebc3 0302 	rsb	r3, r3, r2
200008d8:	2b04      	cmp	r3, #4
200008da:	dd02      	ble.n	200008e2 <getX+0xaa>
	  return -1;
200008dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
200008e0:	e01f      	b.n	20000922 <getX+0xea>
   } else {
	 samples[1] = (samples[0] + samples[1]) >> 1; // average 2 samples
200008e2:	683a      	ldr	r2, [r7, #0]
200008e4:	687b      	ldr	r3, [r7, #4]
200008e6:	4413      	add	r3, r2
200008e8:	ea4f 0363 	mov.w	r3, r3, asr #1
200008ec:	607b      	str	r3, [r7, #4]
   }

	MSS_GPIO_set_output(xp, 0);
200008ee:	f04f 0007 	mov.w	r0, #7
200008f2:	f04f 0100 	mov.w	r1, #0
200008f6:	f001 fda9 	bl	2000244c <MSS_GPIO_set_output>
	return ((samples[1]/4080.0f)*240);
200008fa:	687b      	ldr	r3, [r7, #4]
200008fc:	4618      	mov	r0, r3
200008fe:	f002 fb95 	bl	2000302c <__aeabi_i2f>
20000902:	4603      	mov	r3, r0
20000904:	4618      	mov	r0, r3
20000906:	490a      	ldr	r1, [pc, #40]	; (20000930 <getX+0xf8>)
20000908:	f002 fc98 	bl	2000323c <__aeabi_fdiv>
2000090c:	4603      	mov	r3, r0
2000090e:	4618      	mov	r0, r3
20000910:	4908      	ldr	r1, [pc, #32]	; (20000934 <getX+0xfc>)
20000912:	f002 fbdf 	bl	200030d4 <__aeabi_fmul>
20000916:	4603      	mov	r3, r0
20000918:	4618      	mov	r0, r3
2000091a:	f002 fd2b 	bl	20003374 <__aeabi_f2iz>
2000091e:	4603      	mov	r3, r0
20000920:	b29b      	uxth	r3, r3
20000922:	b21b      	sxth	r3, r3
}
20000924:	4618      	mov	r0, r3
20000926:	f107 0708 	add.w	r7, r7, #8
2000092a:	46bd      	mov	sp, r7
2000092c:	bd80      	pop	{r7, pc}
2000092e:	bf00      	nop
20000930:	457f0000 	.word	0x457f0000
20000934:	43700000 	.word	0x43700000

20000938 <getY>:

int16_t getY(){
20000938:	b580      	push	{r7, lr}
2000093a:	b082      	sub	sp, #8
2000093c:	af00      	add	r7, sp, #0
	int samples[2];

	MSS_GPIO_config(yp, MSS_GPIO_OUTPUT_MODE);
2000093e:	f04f 0005 	mov.w	r0, #5
20000942:	f04f 0105 	mov.w	r1, #5
20000946:	f001 fd63 	bl	20002410 <MSS_GPIO_config>
	MSS_GPIO_config(yn, MSS_GPIO_OUTPUT_MODE);
2000094a:	f04f 0006 	mov.w	r0, #6
2000094e:	f04f 0105 	mov.w	r1, #5
20000952:	f001 fd5d 	bl	20002410 <MSS_GPIO_config>
	MSS_GPIO_config(xp, MSS_GPIO_INPUT_MODE);
20000956:	f04f 0007 	mov.w	r0, #7
2000095a:	f04f 0102 	mov.w	r1, #2
2000095e:	f001 fd57 	bl	20002410 <MSS_GPIO_config>
	MSS_GPIO_config(xn, MSS_GPIO_INPUT_MODE);
20000962:	f04f 0008 	mov.w	r0, #8
20000966:	f04f 0102 	mov.w	r1, #2
2000096a:	f001 fd51 	bl	20002410 <MSS_GPIO_config>

	MSS_GPIO_set_output(yp, 1);
2000096e:	f04f 0005 	mov.w	r0, #5
20000972:	f04f 0101 	mov.w	r1, #1
20000976:	f001 fd69 	bl	2000244c <MSS_GPIO_set_output>
	MSS_GPIO_set_output(yn, 0);
2000097a:	f04f 0006 	mov.w	r0, #6
2000097e:	f04f 0100 	mov.w	r1, #0
20000982:	f001 fd63 	bl	2000244c <MSS_GPIO_set_output>

	delayMicro(500);
20000986:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
2000098a:	f000 f9ad 	bl	20000ce8 <delayMicro>

	samples[0] = ACE_get_ppe_sample(ace_x);
2000098e:	f643 0328 	movw	r3, #14376	; 0x3828
20000992:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000996:	781b      	ldrb	r3, [r3, #0]
20000998:	4618      	mov	r0, r3
2000099a:	f001 fdb9 	bl	20002510 <ACE_get_ppe_sample>
2000099e:	4603      	mov	r3, r0
200009a0:	603b      	str	r3, [r7, #0]
	samples[1] = ACE_get_ppe_sample(ace_x);
200009a2:	f643 0328 	movw	r3, #14376	; 0x3828
200009a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200009aa:	781b      	ldrb	r3, [r3, #0]
200009ac:	4618      	mov	r0, r3
200009ae:	f001 fdaf 	bl	20002510 <ACE_get_ppe_sample>
200009b2:	4603      	mov	r3, r0
200009b4:	607b      	str	r3, [r7, #4]

    if (samples[0] - samples[1] < -4 || samples[0] - samples[1] > 4) {
200009b6:	683a      	ldr	r2, [r7, #0]
200009b8:	687b      	ldr	r3, [r7, #4]
200009ba:	ebc3 0302 	rsb	r3, r3, r2
200009be:	f113 0f04 	cmn.w	r3, #4
200009c2:	db05      	blt.n	200009d0 <getY+0x98>
200009c4:	683a      	ldr	r2, [r7, #0]
200009c6:	687b      	ldr	r3, [r7, #4]
200009c8:	ebc3 0302 	rsb	r3, r3, r2
200009cc:	2b04      	cmp	r3, #4
200009ce:	dd02      	ble.n	200009d6 <getY+0x9e>
	  return -1;
200009d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
200009d4:	e01f      	b.n	20000a16 <getY+0xde>
   } else {
	 samples[1] = (samples[0] + samples[1]) >> 1; // average 2 samples
200009d6:	683a      	ldr	r2, [r7, #0]
200009d8:	687b      	ldr	r3, [r7, #4]
200009da:	4413      	add	r3, r2
200009dc:	ea4f 0363 	mov.w	r3, r3, asr #1
200009e0:	607b      	str	r3, [r7, #4]
   }

	MSS_GPIO_set_output(yp, 0);
200009e2:	f04f 0005 	mov.w	r0, #5
200009e6:	f04f 0100 	mov.w	r1, #0
200009ea:	f001 fd2f 	bl	2000244c <MSS_GPIO_set_output>

	return ((samples[1]/4080.0f)*320);
200009ee:	687b      	ldr	r3, [r7, #4]
200009f0:	4618      	mov	r0, r3
200009f2:	f002 fb1b 	bl	2000302c <__aeabi_i2f>
200009f6:	4603      	mov	r3, r0
200009f8:	4618      	mov	r0, r3
200009fa:	490a      	ldr	r1, [pc, #40]	; (20000a24 <getY+0xec>)
200009fc:	f002 fc1e 	bl	2000323c <__aeabi_fdiv>
20000a00:	4603      	mov	r3, r0
20000a02:	4618      	mov	r0, r3
20000a04:	4908      	ldr	r1, [pc, #32]	; (20000a28 <getY+0xf0>)
20000a06:	f002 fb65 	bl	200030d4 <__aeabi_fmul>
20000a0a:	4603      	mov	r3, r0
20000a0c:	4618      	mov	r0, r3
20000a0e:	f002 fcb1 	bl	20003374 <__aeabi_f2iz>
20000a12:	4603      	mov	r3, r0
20000a14:	b29b      	uxth	r3, r3
20000a16:	b21b      	sxth	r3, r3
}
20000a18:	4618      	mov	r0, r3
20000a1a:	f107 0708 	add.w	r7, r7, #8
20000a1e:	46bd      	mov	sp, r7
20000a20:	bd80      	pop	{r7, pc}
20000a22:	bf00      	nop
20000a24:	457f0000 	.word	0x457f0000
20000a28:	43a00000 	.word	0x43a00000

20000a2c <drawPixel>:
	MSS_GPIO_set_output(yn, 0);

   return z;
}

void drawPixel(uint16_t x, uint16_t y, uint16_t color){
20000a2c:	b580      	push	{r7, lr}
20000a2e:	b082      	sub	sp, #8
20000a30:	af00      	add	r7, sp, #0
20000a32:	4613      	mov	r3, r2
20000a34:	4602      	mov	r2, r0
20000a36:	80fa      	strh	r2, [r7, #6]
20000a38:	460a      	mov	r2, r1
20000a3a:	80ba      	strh	r2, [r7, #4]
20000a3c:	807b      	strh	r3, [r7, #2]

	set_SPI_CS();
20000a3e:	f000 fa6b 	bl	20000f18 <set_SPI_CS>
	setAddr(x, y, x+1, y+1);
20000a42:	88fb      	ldrh	r3, [r7, #6]
20000a44:	f103 0301 	add.w	r3, r3, #1
20000a48:	b29a      	uxth	r2, r3
20000a4a:	88bb      	ldrh	r3, [r7, #4]
20000a4c:	f103 0301 	add.w	r3, r3, #1
20000a50:	b29b      	uxth	r3, r3
20000a52:	88f8      	ldrh	r0, [r7, #6]
20000a54:	88b9      	ldrh	r1, [r7, #4]
20000a56:	f000 f8cf 	bl	20000bf8 <setAddr>
	set_DC_HIGH();
20000a5a:	f000 fa75 	bl	20000f48 <set_DC_HIGH>
	sendSPI16(color);
20000a5e:	887b      	ldrh	r3, [r7, #2]
20000a60:	4618      	mov	r0, r3
20000a62:	f000 fa3d 	bl	20000ee0 <sendSPI16>
	clear_SPI_CS();
20000a66:	f000 fa63 	bl	20000f30 <clear_SPI_CS>
}
20000a6a:	f107 0708 	add.w	r7, r7, #8
20000a6e:	46bd      	mov	sp, r7
20000a70:	bd80      	pop	{r7, pc}
20000a72:	bf00      	nop

20000a74 <drawRectanglePixel>:
			sendData(&color, 16);
		}
		sendData(&color, 16);
	}
}
void drawRectanglePixel(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color){
20000a74:	b580      	push	{r7, lr}
20000a76:	b086      	sub	sp, #24
20000a78:	af02      	add	r7, sp, #8
20000a7a:	80f8      	strh	r0, [r7, #6]
20000a7c:	80b9      	strh	r1, [r7, #4]
20000a7e:	807a      	strh	r2, [r7, #2]
20000a80:	803b      	strh	r3, [r7, #0]
	uint16_t i;

	 for (i=x; i<x+w; i++) {
20000a82:	88fb      	ldrh	r3, [r7, #6]
20000a84:	81fb      	strh	r3, [r7, #14]
20000a86:	e018      	b.n	20000aba <drawRectanglePixel+0x46>
	        writeLine(i, y, i, y+h-1, color);
20000a88:	89f8      	ldrh	r0, [r7, #14]
20000a8a:	88b9      	ldrh	r1, [r7, #4]
20000a8c:	89fa      	ldrh	r2, [r7, #14]
20000a8e:	f8b7 c004 	ldrh.w	ip, [r7, #4]
20000a92:	883b      	ldrh	r3, [r7, #0]
20000a94:	4463      	add	r3, ip
20000a96:	b29b      	uxth	r3, r3
20000a98:	f103 33ff 	add.w	r3, r3, #4294967295
20000a9c:	b29b      	uxth	r3, r3
20000a9e:	b200      	sxth	r0, r0
20000aa0:	b209      	sxth	r1, r1
20000aa2:	b212      	sxth	r2, r2
20000aa4:	b21b      	sxth	r3, r3
20000aa6:	f8b7 c018 	ldrh.w	ip, [r7, #24]
20000aaa:	f8cd c000 	str.w	ip, [sp]
20000aae:	f000 f94f 	bl	20000d50 <writeLine>
	}
}
void drawRectanglePixel(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color){
	uint16_t i;

	 for (i=x; i<x+w; i++) {
20000ab2:	89fb      	ldrh	r3, [r7, #14]
20000ab4:	f103 0301 	add.w	r3, r3, #1
20000ab8:	81fb      	strh	r3, [r7, #14]
20000aba:	89fa      	ldrh	r2, [r7, #14]
20000abc:	88f9      	ldrh	r1, [r7, #6]
20000abe:	887b      	ldrh	r3, [r7, #2]
20000ac0:	440b      	add	r3, r1
20000ac2:	429a      	cmp	r2, r3
20000ac4:	dbe0      	blt.n	20000a88 <drawRectanglePixel+0x14>
	        writeLine(i, y, i, y+h-1, color);
	    }
}		
20000ac6:	f107 0710 	add.w	r7, r7, #16
20000aca:	46bd      	mov	sp, r7
20000acc:	bd80      	pop	{r7, pc}
20000ace:	bf00      	nop

20000ad0 <drawFillScreen>:

void drawFillScreen(uint16_t color){
20000ad0:	b580      	push	{r7, lr}
20000ad2:	b084      	sub	sp, #16
20000ad4:	af02      	add	r7, sp, #8
20000ad6:	4603      	mov	r3, r0
20000ad8:	80fb      	strh	r3, [r7, #6]
	drawRectanglePixel(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT, color);
20000ada:	88fb      	ldrh	r3, [r7, #6]
20000adc:	9300      	str	r3, [sp, #0]
20000ade:	f04f 0000 	mov.w	r0, #0
20000ae2:	f04f 0100 	mov.w	r1, #0
20000ae6:	f04f 02f0 	mov.w	r2, #240	; 0xf0
20000aea:	f44f 73a0 	mov.w	r3, #320	; 0x140
20000aee:	f7ff ffc1 	bl	20000a74 <drawRectanglePixel>
}
20000af2:	f107 0708 	add.w	r7, r7, #8
20000af6:	46bd      	mov	sp, r7
20000af8:	bd80      	pop	{r7, pc}
20000afa:	bf00      	nop

20000afc <drawText1>:

void drawText1(uint16_t color){
20000afc:	b580      	push	{r7, lr}
20000afe:	b084      	sub	sp, #16
20000b00:	af02      	add	r7, sp, #8
20000b02:	4603      	mov	r3, r0
20000b04:	80fb      	strh	r3, [r7, #6]
	drawRectanglePixel(40, 210, 5, 25, color);
20000b06:	88fb      	ldrh	r3, [r7, #6]
20000b08:	9300      	str	r3, [sp, #0]
20000b0a:	f04f 0028 	mov.w	r0, #40	; 0x28
20000b0e:	f04f 01d2 	mov.w	r1, #210	; 0xd2
20000b12:	f04f 0205 	mov.w	r2, #5
20000b16:	f04f 0319 	mov.w	r3, #25
20000b1a:	f7ff ffab 	bl	20000a74 <drawRectanglePixel>
	drawRectanglePixel(40, 220, 30, 5, color);
20000b1e:	88fb      	ldrh	r3, [r7, #6]
20000b20:	9300      	str	r3, [sp, #0]
20000b22:	f04f 0028 	mov.w	r0, #40	; 0x28
20000b26:	f04f 01dc 	mov.w	r1, #220	; 0xdc
20000b2a:	f04f 021e 	mov.w	r2, #30
20000b2e:	f04f 0305 	mov.w	r3, #5
20000b32:	f7ff ff9f 	bl	20000a74 <drawRectanglePixel>


}
20000b36:	f107 0708 	add.w	r7, r7, #8
20000b3a:	46bd      	mov	sp, r7
20000b3c:	bd80      	pop	{r7, pc}
20000b3e:	bf00      	nop

20000b40 <drawText2>:

void drawText2(uint16_t color){
20000b40:	b580      	push	{r7, lr}
20000b42:	b084      	sub	sp, #16
20000b44:	af02      	add	r7, sp, #8
20000b46:	4603      	mov	r3, r0
20000b48:	80fb      	strh	r3, [r7, #6]
	drawRectanglePixel(40, 110, 5, 20, color);
20000b4a:	88fb      	ldrh	r3, [r7, #6]
20000b4c:	9300      	str	r3, [sp, #0]
20000b4e:	f04f 0028 	mov.w	r0, #40	; 0x28
20000b52:	f04f 016e 	mov.w	r1, #110	; 0x6e
20000b56:	f04f 0205 	mov.w	r2, #5
20000b5a:	f04f 0314 	mov.w	r3, #20
20000b5e:	f7ff ff89 	bl	20000a74 <drawRectanglePixel>
	drawRectanglePixel(40, 130, 30, 5, color);
20000b62:	88fb      	ldrh	r3, [r7, #6]
20000b64:	9300      	str	r3, [sp, #0]
20000b66:	f04f 0028 	mov.w	r0, #40	; 0x28
20000b6a:	f04f 0182 	mov.w	r1, #130	; 0x82
20000b6e:	f04f 021e 	mov.w	r2, #30
20000b72:	f04f 0305 	mov.w	r3, #5
20000b76:	f7ff ff7d 	bl	20000a74 <drawRectanglePixel>
	drawRectanglePixel(65, 110, 5, 20, color);
20000b7a:	88fb      	ldrh	r3, [r7, #6]
20000b7c:	9300      	str	r3, [sp, #0]
20000b7e:	f04f 0041 	mov.w	r0, #65	; 0x41
20000b82:	f04f 016e 	mov.w	r1, #110	; 0x6e
20000b86:	f04f 0205 	mov.w	r2, #5
20000b8a:	f04f 0314 	mov.w	r3, #20
20000b8e:	f7ff ff71 	bl	20000a74 <drawRectanglePixel>

}
20000b92:	f107 0708 	add.w	r7, r7, #8
20000b96:	46bd      	mov	sp, r7
20000b98:	bd80      	pop	{r7, pc}
20000b9a:	bf00      	nop

20000b9c <drawText3>:

void drawText3(uint16_t color){
20000b9c:	b580      	push	{r7, lr}
20000b9e:	b084      	sub	sp, #16
20000ba0:	af02      	add	r7, sp, #8
20000ba2:	4603      	mov	r3, r0
20000ba4:	80fb      	strh	r3, [r7, #6]
	drawRectanglePixel(160, 160, 30, 5, color);
20000ba6:	88fb      	ldrh	r3, [r7, #6]
20000ba8:	9300      	str	r3, [sp, #0]
20000baa:	f04f 00a0 	mov.w	r0, #160	; 0xa0
20000bae:	f04f 01a0 	mov.w	r1, #160	; 0xa0
20000bb2:	f04f 021e 	mov.w	r2, #30
20000bb6:	f04f 0305 	mov.w	r3, #5
20000bba:	f7ff ff5b 	bl	20000a74 <drawRectanglePixel>
	drawRectanglePixel(160, 160, 5, 20, color);
20000bbe:	88fb      	ldrh	r3, [r7, #6]
20000bc0:	9300      	str	r3, [sp, #0]
20000bc2:	f04f 00a0 	mov.w	r0, #160	; 0xa0
20000bc6:	f04f 01a0 	mov.w	r1, #160	; 0xa0
20000bca:	f04f 0205 	mov.w	r2, #5
20000bce:	f04f 0314 	mov.w	r3, #20
20000bd2:	f7ff ff4f 	bl	20000a74 <drawRectanglePixel>
	drawRectanglePixel(165, 160, 5, 20, color);
20000bd6:	88fb      	ldrh	r3, [r7, #6]
20000bd8:	9300      	str	r3, [sp, #0]
20000bda:	f04f 00a5 	mov.w	r0, #165	; 0xa5
20000bde:	f04f 01a0 	mov.w	r1, #160	; 0xa0
20000be2:	f04f 0205 	mov.w	r2, #5
20000be6:	f04f 0314 	mov.w	r3, #20
20000bea:	f7ff ff43 	bl	20000a74 <drawRectanglePixel>
}
20000bee:	f107 0708 	add.w	r7, r7, #8
20000bf2:	46bd      	mov	sp, r7
20000bf4:	bd80      	pop	{r7, pc}
20000bf6:	bf00      	nop

20000bf8 <setAddr>:

void setAddr(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1){
20000bf8:	b580      	push	{r7, lr}
20000bfa:	b082      	sub	sp, #8
20000bfc:	af00      	add	r7, sp, #0
20000bfe:	80f8      	strh	r0, [r7, #6]
20000c00:	80b9      	strh	r1, [r7, #4]
20000c02:	807a      	strh	r2, [r7, #2]
20000c04:	803b      	strh	r3, [r7, #0]
	
	sendCommandOnly(ILI9341_CASET);
20000c06:	f04f 002a 	mov.w	r0, #42	; 0x2a
20000c0a:	f000 f88b 	bl	20000d24 <sendCommandOnly>
	sendSPI16(x0);
20000c0e:	88fb      	ldrh	r3, [r7, #6]
20000c10:	4618      	mov	r0, r3
20000c12:	f000 f965 	bl	20000ee0 <sendSPI16>
	sendSPI16(x1);
20000c16:	887b      	ldrh	r3, [r7, #2]
20000c18:	4618      	mov	r0, r3
20000c1a:	f000 f961 	bl	20000ee0 <sendSPI16>
	sendCommandOnly(ILI9341_PASET);
20000c1e:	f04f 002b 	mov.w	r0, #43	; 0x2b
20000c22:	f000 f87f 	bl	20000d24 <sendCommandOnly>
	sendSPI16(y0);
20000c26:	88bb      	ldrh	r3, [r7, #4]
20000c28:	4618      	mov	r0, r3
20000c2a:	f000 f959 	bl	20000ee0 <sendSPI16>
	sendSPI16(y1);
20000c2e:	883b      	ldrh	r3, [r7, #0]
20000c30:	4618      	mov	r0, r3
20000c32:	f000 f955 	bl	20000ee0 <sendSPI16>
	sendCommandOnly(ILI9341_RAMWR);
20000c36:	f04f 002c 	mov.w	r0, #44	; 0x2c
20000c3a:	f000 f873 	bl	20000d24 <sendCommandOnly>
}
20000c3e:	f107 0708 	add.w	r7, r7, #8
20000c42:	46bd      	mov	sp, r7
20000c44:	bd80      	pop	{r7, pc}
20000c46:	bf00      	nop

20000c48 <sendCommand>:

void sendCommand(uint8_t commandByte, uint8_t *dataBytes, uint8_t numDataBytes){
20000c48:	b580      	push	{r7, lr}
20000c4a:	b086      	sub	sp, #24
20000c4c:	af00      	add	r7, sp, #0
20000c4e:	60b9      	str	r1, [r7, #8]
20000c50:	4613      	mov	r3, r2
20000c52:	4602      	mov	r2, r0
20000c54:	73fa      	strb	r2, [r7, #15]
20000c56:	71fb      	strb	r3, [r7, #7]
		int i=0;
20000c58:	f04f 0300 	mov.w	r3, #0
20000c5c:	617b      	str	r3, [r7, #20]
		configureSPI(8);
20000c5e:	f04f 0008 	mov.w	r0, #8
20000c62:	f000 f913 	bl	20000e8c <configureSPI>

	    set_DC_LOW(); // Command mode
20000c66:	f000 f979 	bl	20000f5c <set_DC_LOW>
	    sendSPI(commandByte); // Send the command byte
20000c6a:	7bfb      	ldrb	r3, [r7, #15]
20000c6c:	4618      	mov	r0, r3
20000c6e:	f000 f925 	bl	20000ebc <sendSPI>

	    set_DC_HIGH();
20000c72:	f000 f969 	bl	20000f48 <set_DC_HIGH>
	    for (i=0; i<numDataBytes; i++) {
20000c76:	f04f 0300 	mov.w	r3, #0
20000c7a:	617b      	str	r3, [r7, #20]
20000c7c:	e00c      	b.n	20000c98 <sendCommand+0x50>
	      sendSPI(*dataBytes); // Send the data bytes
20000c7e:	68bb      	ldr	r3, [r7, #8]
20000c80:	781b      	ldrb	r3, [r3, #0]
20000c82:	4618      	mov	r0, r3
20000c84:	f000 f91a 	bl	20000ebc <sendSPI>
	      dataBytes++;
20000c88:	68bb      	ldr	r3, [r7, #8]
20000c8a:	f103 0301 	add.w	r3, r3, #1
20000c8e:	60bb      	str	r3, [r7, #8]

	    set_DC_LOW(); // Command mode
	    sendSPI(commandByte); // Send the command byte

	    set_DC_HIGH();
	    for (i=0; i<numDataBytes; i++) {
20000c90:	697b      	ldr	r3, [r7, #20]
20000c92:	f103 0301 	add.w	r3, r3, #1
20000c96:	617b      	str	r3, [r7, #20]
20000c98:	79fa      	ldrb	r2, [r7, #7]
20000c9a:	697b      	ldr	r3, [r7, #20]
20000c9c:	429a      	cmp	r2, r3
20000c9e:	dcee      	bgt.n	20000c7e <sendCommand+0x36>
	      sendSPI(*dataBytes); // Send the data bytes
	      dataBytes++;
	    }
}
20000ca0:	f107 0718 	add.w	r7, r7, #24
20000ca4:	46bd      	mov	sp, r7
20000ca6:	bd80      	pop	{r7, pc}

20000ca8 <delay>:
		dataBytes++;
	}
	clear_SPI_CS();
}

void delay(uint32_t time){
20000ca8:	b580      	push	{r7, lr}
20000caa:	b082      	sub	sp, #8
20000cac:	af00      	add	r7, sp, #0
20000cae:	6078      	str	r0, [r7, #4]

	MSS_TIM1_init(MSS_TIMER_ONE_SHOT_MODE);
20000cb0:	f04f 0001 	mov.w	r0, #1
20000cb4:	f7ff fcd2 	bl	2000065c <MSS_TIM1_init>
	MSS_TIM1_load_immediate(time*100000);
20000cb8:	687a      	ldr	r2, [r7, #4]
20000cba:	f248 63a0 	movw	r3, #34464	; 0x86a0
20000cbe:	f2c0 0301 	movt	r3, #1
20000cc2:	fb03 f302 	mul.w	r3, r3, r2
20000cc6:	4618      	mov	r0, r3
20000cc8:	f7ff fd32 	bl	20000730 <MSS_TIM1_load_immediate>
	MSS_TIM1_start();
20000ccc:	f7ff fd08 	bl	200006e0 <MSS_TIM1_start>

	while(MSS_TIM1_get_current_value()>0){
20000cd0:	f7ff fd22 	bl	20000718 <MSS_TIM1_get_current_value>
20000cd4:	4603      	mov	r3, r0
20000cd6:	2b00      	cmp	r3, #0
20000cd8:	d1fa      	bne.n	20000cd0 <delay+0x28>
		//do nothing

	}
	MSS_TIM1_stop();
20000cda:	f7ff fd0f 	bl	200006fc <MSS_TIM1_stop>
}
20000cde:	f107 0708 	add.w	r7, r7, #8
20000ce2:	46bd      	mov	sp, r7
20000ce4:	bd80      	pop	{r7, pc}
20000ce6:	bf00      	nop

20000ce8 <delayMicro>:

void delayMicro(uint32_t time){
20000ce8:	b580      	push	{r7, lr}
20000cea:	b082      	sub	sp, #8
20000cec:	af00      	add	r7, sp, #0
20000cee:	6078      	str	r0, [r7, #4]

	MSS_TIM1_init(MSS_TIMER_ONE_SHOT_MODE);
20000cf0:	f04f 0001 	mov.w	r0, #1
20000cf4:	f7ff fcb2 	bl	2000065c <MSS_TIM1_init>
	MSS_TIM1_load_immediate(time*100);
20000cf8:	687b      	ldr	r3, [r7, #4]
20000cfa:	f04f 0264 	mov.w	r2, #100	; 0x64
20000cfe:	fb02 f303 	mul.w	r3, r2, r3
20000d02:	4618      	mov	r0, r3
20000d04:	f7ff fd14 	bl	20000730 <MSS_TIM1_load_immediate>
	MSS_TIM1_start();
20000d08:	f7ff fcea 	bl	200006e0 <MSS_TIM1_start>

	while(MSS_TIM1_get_current_value()>0){
20000d0c:	f7ff fd04 	bl	20000718 <MSS_TIM1_get_current_value>
20000d10:	4603      	mov	r3, r0
20000d12:	2b00      	cmp	r3, #0
20000d14:	d1fa      	bne.n	20000d0c <delayMicro+0x24>
		//do nothing

	}
	MSS_TIM1_stop();
20000d16:	f7ff fcf1 	bl	200006fc <MSS_TIM1_stop>
}
20000d1a:	f107 0708 	add.w	r7, r7, #8
20000d1e:	46bd      	mov	sp, r7
20000d20:	bd80      	pop	{r7, pc}
20000d22:	bf00      	nop

20000d24 <sendCommandOnly>:


void sendCommandOnly(uint8_t commandByte){
20000d24:	b580      	push	{r7, lr}
20000d26:	b082      	sub	sp, #8
20000d28:	af00      	add	r7, sp, #0
20000d2a:	4603      	mov	r3, r0
20000d2c:	71fb      	strb	r3, [r7, #7]

	set_DC_LOW();
20000d2e:	f000 f915 	bl	20000f5c <set_DC_LOW>
	configureSPI(8);
20000d32:	f04f 0008 	mov.w	r0, #8
20000d36:	f000 f8a9 	bl	20000e8c <configureSPI>
	sendSPI(commandByte);
20000d3a:	79fb      	ldrb	r3, [r7, #7]
20000d3c:	4618      	mov	r0, r3
20000d3e:	f000 f8bd 	bl	20000ebc <sendSPI>
	set_DC_HIGH();
20000d42:	f000 f901 	bl	20000f48 <set_DC_HIGH>
}
20000d46:	f107 0708 	add.w	r7, r7, #8
20000d4a:	46bd      	mov	sp, r7
20000d4c:	bd80      	pop	{r7, pc}
20000d4e:	bf00      	nop

20000d50 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color){
20000d50:	b580      	push	{r7, lr}
20000d52:	b088      	sub	sp, #32
20000d54:	af00      	add	r7, sp, #0
20000d56:	80f8      	strh	r0, [r7, #6]
20000d58:	80b9      	strh	r1, [r7, #4]
20000d5a:	807a      	strh	r2, [r7, #2]
20000d5c:	803b      	strh	r3, [r7, #0]

    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
20000d5e:	f9b7 2000 	ldrsh.w	r2, [r7]
20000d62:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
20000d66:	ebc3 0302 	rsb	r3, r3, r2
20000d6a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
20000d6e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
20000d72:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
20000d76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
20000d7a:	ebc3 0301 	rsb	r3, r3, r1
20000d7e:	2b00      	cmp	r3, #0
20000d80:	bfb8      	it	lt
20000d82:	425b      	neglt	r3, r3
20000d84:	429a      	cmp	r2, r3
20000d86:	bfd4      	ite	le
20000d88:	2300      	movle	r3, #0
20000d8a:	2301      	movgt	r3, #1
20000d8c:	81fb      	strh	r3, [r7, #14]
    if (steep) {
20000d8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
20000d92:	2b00      	cmp	r3, #0
20000d94:	d00b      	beq.n	20000dae <writeLine+0x5e>
        _swap_int16_t(x0, y0);
20000d96:	88fb      	ldrh	r3, [r7, #6]
20000d98:	833b      	strh	r3, [r7, #24]
20000d9a:	88bb      	ldrh	r3, [r7, #4]
20000d9c:	80fb      	strh	r3, [r7, #6]
20000d9e:	8b3b      	ldrh	r3, [r7, #24]
20000da0:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
20000da2:	887b      	ldrh	r3, [r7, #2]
20000da4:	837b      	strh	r3, [r7, #26]
20000da6:	883b      	ldrh	r3, [r7, #0]
20000da8:	807b      	strh	r3, [r7, #2]
20000daa:	8b7b      	ldrh	r3, [r7, #26]
20000dac:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
20000dae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20000db2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
20000db6:	429a      	cmp	r2, r3
20000db8:	dd0b      	ble.n	20000dd2 <writeLine+0x82>
        _swap_int16_t(x0, x1);
20000dba:	88fb      	ldrh	r3, [r7, #6]
20000dbc:	83bb      	strh	r3, [r7, #28]
20000dbe:	887b      	ldrh	r3, [r7, #2]
20000dc0:	80fb      	strh	r3, [r7, #6]
20000dc2:	8bbb      	ldrh	r3, [r7, #28]
20000dc4:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
20000dc6:	88bb      	ldrh	r3, [r7, #4]
20000dc8:	83fb      	strh	r3, [r7, #30]
20000dca:	883b      	ldrh	r3, [r7, #0]
20000dcc:	80bb      	strh	r3, [r7, #4]
20000dce:	8bfb      	ldrh	r3, [r7, #30]
20000dd0:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
20000dd2:	887a      	ldrh	r2, [r7, #2]
20000dd4:	88fb      	ldrh	r3, [r7, #6]
20000dd6:	ebc3 0302 	rsb	r3, r3, r2
20000dda:	b29b      	uxth	r3, r3
20000ddc:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
20000dde:	f9b7 2000 	ldrsh.w	r2, [r7]
20000de2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
20000de6:	ebc3 0302 	rsb	r3, r3, r2
20000dea:	2b00      	cmp	r3, #0
20000dec:	bfb8      	it	lt
20000dee:	425b      	neglt	r3, r3
20000df0:	827b      	strh	r3, [r7, #18]

    int16_t err = dx / 2;
20000df2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
20000df6:	ea4f 72d3 	mov.w	r2, r3, lsr #31
20000dfa:	4413      	add	r3, r2
20000dfc:	ea4f 0363 	mov.w	r3, r3, asr #1
20000e00:	82bb      	strh	r3, [r7, #20]
    int16_t ystep;

    if (y0 < y1) {
20000e02:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
20000e06:	f9b7 3000 	ldrsh.w	r3, [r7]
20000e0a:	429a      	cmp	r2, r3
20000e0c:	da03      	bge.n	20000e16 <writeLine+0xc6>
        ystep = 1;
20000e0e:	f04f 0301 	mov.w	r3, #1
20000e12:	82fb      	strh	r3, [r7, #22]
    } else {
        ystep = -1;
    }

    for (; x0<=x1; x0++) {
20000e14:	e030      	b.n	20000e78 <writeLine+0x128>
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
20000e16:	f64f 73ff 	movw	r3, #65535	; 0xffff
20000e1a:	82fb      	strh	r3, [r7, #22]
    }

    for (; x0<=x1; x0++) {
20000e1c:	e02c      	b.n	20000e78 <writeLine+0x128>
        if (steep) {
20000e1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
20000e22:	2b00      	cmp	r3, #0
20000e24:	d008      	beq.n	20000e38 <writeLine+0xe8>
            drawPixel(y0, x0, color);
20000e26:	88b9      	ldrh	r1, [r7, #4]
20000e28:	88fa      	ldrh	r2, [r7, #6]
20000e2a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
20000e2c:	4608      	mov	r0, r1
20000e2e:	4611      	mov	r1, r2
20000e30:	461a      	mov	r2, r3
20000e32:	f7ff fdfb 	bl	20000a2c <drawPixel>
20000e36:	e007      	b.n	20000e48 <writeLine+0xf8>
        } else {
            drawPixel(x0, y0, color);
20000e38:	88f9      	ldrh	r1, [r7, #6]
20000e3a:	88ba      	ldrh	r2, [r7, #4]
20000e3c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
20000e3e:	4608      	mov	r0, r1
20000e40:	4611      	mov	r1, r2
20000e42:	461a      	mov	r2, r3
20000e44:	f7ff fdf2 	bl	20000a2c <drawPixel>
        }
        err -= dy;
20000e48:	8aba      	ldrh	r2, [r7, #20]
20000e4a:	8a7b      	ldrh	r3, [r7, #18]
20000e4c:	ebc3 0302 	rsb	r3, r3, r2
20000e50:	b29b      	uxth	r3, r3
20000e52:	82bb      	strh	r3, [r7, #20]
        if (err < 0) {
20000e54:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
20000e58:	2b00      	cmp	r3, #0
20000e5a:	da09      	bge.n	20000e70 <writeLine+0x120>
            y0 += ystep;
20000e5c:	88ba      	ldrh	r2, [r7, #4]
20000e5e:	8afb      	ldrh	r3, [r7, #22]
20000e60:	4413      	add	r3, r2
20000e62:	b29b      	uxth	r3, r3
20000e64:	80bb      	strh	r3, [r7, #4]
            err += dx;
20000e66:	8aba      	ldrh	r2, [r7, #20]
20000e68:	8a3b      	ldrh	r3, [r7, #16]
20000e6a:	4413      	add	r3, r2
20000e6c:	b29b      	uxth	r3, r3
20000e6e:	82bb      	strh	r3, [r7, #20]
        ystep = 1;
    } else {
        ystep = -1;
    }

    for (; x0<=x1; x0++) {
20000e70:	88fb      	ldrh	r3, [r7, #6]
20000e72:	f103 0301 	add.w	r3, r3, #1
20000e76:	80fb      	strh	r3, [r7, #6]
20000e78:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20000e7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
20000e80:	429a      	cmp	r2, r3
20000e82:	ddcc      	ble.n	20000e1e <writeLine+0xce>
        if (err < 0) {
            y0 += ystep;
            err += dx;
        }
    }
}
20000e84:	f107 0720 	add.w	r7, r7, #32
20000e88:	46bd      	mov	sp, r7
20000e8a:	bd80      	pop	{r7, pc}

20000e8c <configureSPI>:


void configureSPI(uint8_t frameSize){
20000e8c:	b580      	push	{r7, lr}
20000e8e:	b084      	sub	sp, #16
20000e90:	af02      	add	r7, sp, #8
20000e92:	4603      	mov	r3, r0
20000e94:	71fb      	strb	r3, [r7, #7]
	MSS_SPI_configure_master_mode(
20000e96:	79fb      	ldrb	r3, [r7, #7]
20000e98:	9300      	str	r3, [sp, #0]
20000e9a:	f643 00bc 	movw	r0, #14524	; 0x38bc
20000e9e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000ea2:	f04f 0100 	mov.w	r1, #0
20000ea6:	f04f 0200 	mov.w	r2, #0
20000eaa:	f04f 0302 	mov.w	r3, #2
20000eae:	f000 fe3f 	bl	20001b30 <MSS_SPI_configure_master_mode>
		MSS_SPI_SLAVE_0,
		MSS_SPI_MODE0,
		MSS_SPI_PCLK_DIV_8,
		frameSize
	);
}
20000eb2:	f107 0708 	add.w	r7, r7, #8
20000eb6:	46bd      	mov	sp, r7
20000eb8:	bd80      	pop	{r7, pc}
20000eba:	bf00      	nop

20000ebc <sendSPI>:

void sendSPI(uint8_t data){
20000ebc:	b580      	push	{r7, lr}
20000ebe:	b082      	sub	sp, #8
20000ec0:	af00      	add	r7, sp, #0
20000ec2:	4603      	mov	r3, r0
20000ec4:	71fb      	strb	r3, [r7, #7]
	
	MSS_SPI_transfer_frame( &g_mss_spi1, data);
20000ec6:	79fb      	ldrb	r3, [r7, #7]
20000ec8:	f643 00bc 	movw	r0, #14524	; 0x38bc
20000ecc:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000ed0:	4619      	mov	r1, r3
20000ed2:	f000 ff89 	bl	20001de8 <MSS_SPI_transfer_frame>
	
}
20000ed6:	f107 0708 	add.w	r7, r7, #8
20000eda:	46bd      	mov	sp, r7
20000edc:	bd80      	pop	{r7, pc}
20000ede:	bf00      	nop

20000ee0 <sendSPI16>:

void sendSPI16(uint16_t data){
20000ee0:	b580      	push	{r7, lr}
20000ee2:	b082      	sub	sp, #8
20000ee4:	af00      	add	r7, sp, #0
20000ee6:	4603      	mov	r3, r0
20000ee8:	80fb      	strh	r3, [r7, #6]
	MSS_SPI_transfer_frame(&g_mss_spi1, data>>8);
20000eea:	88fb      	ldrh	r3, [r7, #6]
20000eec:	ea4f 2313 	mov.w	r3, r3, lsr #8
20000ef0:	b29b      	uxth	r3, r3
20000ef2:	f643 00bc 	movw	r0, #14524	; 0x38bc
20000ef6:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000efa:	4619      	mov	r1, r3
20000efc:	f000 ff74 	bl	20001de8 <MSS_SPI_transfer_frame>
	MSS_SPI_transfer_frame(&g_mss_spi1, data);
20000f00:	88fb      	ldrh	r3, [r7, #6]
20000f02:	f643 00bc 	movw	r0, #14524	; 0x38bc
20000f06:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000f0a:	4619      	mov	r1, r3
20000f0c:	f000 ff6c 	bl	20001de8 <MSS_SPI_transfer_frame>
}
20000f10:	f107 0708 	add.w	r7, r7, #8
20000f14:	46bd      	mov	sp, r7
20000f16:	bd80      	pop	{r7, pc}

20000f18 <set_SPI_CS>:

void set_SPI_CS(){
20000f18:	b580      	push	{r7, lr}
20000f1a:	af00      	add	r7, sp, #0
	MSS_SPI_set_slave_select(&g_mss_spi1, MSS_SPI_SLAVE_0);
20000f1c:	f643 00bc 	movw	r0, #14524	; 0x38bc
20000f20:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000f24:	f04f 0100 	mov.w	r1, #0
20000f28:	f000 fe92 	bl	20001c50 <MSS_SPI_set_slave_select>
}
20000f2c:	bd80      	pop	{r7, pc}
20000f2e:	bf00      	nop

20000f30 <clear_SPI_CS>:

void clear_SPI_CS(){
20000f30:	b580      	push	{r7, lr}
20000f32:	af00      	add	r7, sp, #0
	MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
20000f34:	f643 00bc 	movw	r0, #14524	; 0x38bc
20000f38:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000f3c:	f04f 0100 	mov.w	r1, #0
20000f40:	f000 ff0a 	bl	20001d58 <MSS_SPI_clear_slave_select>
}
20000f44:	bd80      	pop	{r7, pc}
20000f46:	bf00      	nop

20000f48 <set_DC_HIGH>:

void set_DC_HIGH(){
20000f48:	b580      	push	{r7, lr}
20000f4a:	af00      	add	r7, sp, #0
	MSS_GPIO_set_output(DC, 1);
20000f4c:	f04f 0000 	mov.w	r0, #0
20000f50:	f04f 0101 	mov.w	r1, #1
20000f54:	f001 fa7a 	bl	2000244c <MSS_GPIO_set_output>
}
20000f58:	bd80      	pop	{r7, pc}
20000f5a:	bf00      	nop

20000f5c <set_DC_LOW>:

void set_DC_LOW(){
20000f5c:	b580      	push	{r7, lr}
20000f5e:	af00      	add	r7, sp, #0
	MSS_GPIO_set_output(DC, 0);
20000f60:	f04f 0000 	mov.w	r0, #0
20000f64:	f04f 0100 	mov.w	r1, #0
20000f68:	f001 fa70 	bl	2000244c <MSS_GPIO_set_output>
}
20000f6c:	bd80      	pop	{r7, pc}
20000f6e:	bf00      	nop

20000f70 <sendMessage>:

uint8_t g_rx_buff[RX_BUFF_SIZE];

//Takes in an array of uint8_t containing address and destination address
//Constructs frame appropriately and sends it out
void sendMessage(uint8_t* inputMessage, uint8_t inputMessageLength, uint16_t destAddr) {
20000f70:	b580      	push	{r7, lr}
20000f72:	b08a      	sub	sp, #40	; 0x28
20000f74:	af00      	add	r7, sp, #0
20000f76:	6078      	str	r0, [r7, #4]
20000f78:	4613      	mov	r3, r2
20000f7a:	460a      	mov	r2, r1
20000f7c:	70fa      	strb	r2, [r7, #3]
20000f7e:	803b      	strh	r3, [r7, #0]
	int i;
	uint8_t message[messageLength];
	message[0] = 0x7E;	//Delimiter, does not change
20000f80:	f04f 037e 	mov.w	r3, #126	; 0x7e
20000f84:	733b      	strb	r3, [r7, #12]
	message[1] = (messageLength - 4) >> 8;	//Length MSB
20000f86:	f04f 0300 	mov.w	r3, #0
20000f8a:	737b      	strb	r3, [r7, #13]
	message[2] = (messageLength - 4) & 0xFF;	//Length LSB
20000f8c:	f04f 0310 	mov.w	r3, #16
20000f90:	73bb      	strb	r3, [r7, #14]
	message[3] = 0;	//Frame type: 0 = TX Request 64 bit addr
20000f92:	f04f 0300 	mov.w	r3, #0
20000f96:	73fb      	strb	r3, [r7, #15]
	message[4] = 1;	//Frame ID
20000f98:	f04f 0301 	mov.w	r3, #1
20000f9c:	743b      	strb	r3, [r7, #16]
	//5-12: Destination addresses
	for(i = 5; i < 11; ++i) {
20000f9e:	f04f 0305 	mov.w	r3, #5
20000fa2:	623b      	str	r3, [r7, #32]
20000fa4:	e00b      	b.n	20000fbe <sendMessage+0x4e>
		message[i] = 0;
20000fa6:	6a3b      	ldr	r3, [r7, #32]
20000fa8:	f107 0128 	add.w	r1, r7, #40	; 0x28
20000fac:	440b      	add	r3, r1
20000fae:	f04f 0200 	mov.w	r2, #0
20000fb2:	f803 2c1c 	strb.w	r2, [r3, #-28]
	message[1] = (messageLength - 4) >> 8;	//Length MSB
	message[2] = (messageLength - 4) & 0xFF;	//Length LSB
	message[3] = 0;	//Frame type: 0 = TX Request 64 bit addr
	message[4] = 1;	//Frame ID
	//5-12: Destination addresses
	for(i = 5; i < 11; ++i) {
20000fb6:	6a3b      	ldr	r3, [r7, #32]
20000fb8:	f103 0301 	add.w	r3, r3, #1
20000fbc:	623b      	str	r3, [r7, #32]
20000fbe:	6a3b      	ldr	r3, [r7, #32]
20000fc0:	2b0a      	cmp	r3, #10
20000fc2:	ddf0      	ble.n	20000fa6 <sendMessage+0x36>
		message[i] = 0;
	}
	message[11] = (destAddr >> 8) & 0xFF;
20000fc4:	883b      	ldrh	r3, [r7, #0]
20000fc6:	ea4f 2313 	mov.w	r3, r3, lsr #8
20000fca:	b29b      	uxth	r3, r3
20000fcc:	b2db      	uxtb	r3, r3
20000fce:	75fb      	strb	r3, [r7, #23]
	message[12] = destAddr & 0xFF;
20000fd0:	883b      	ldrh	r3, [r7, #0]
20000fd2:	b2db      	uxtb	r3, r3
20000fd4:	763b      	strb	r3, [r7, #24]
	message[13] = 0;	//Options
20000fd6:	f04f 0300 	mov.w	r3, #0
20000fda:	767b      	strb	r3, [r7, #25]
	for(i = 0; i < inputMessageLength; ++i) {
20000fdc:	f04f 0300 	mov.w	r3, #0
20000fe0:	623b      	str	r3, [r7, #32]
20000fe2:	e00f      	b.n	20001004 <sendMessage+0x94>
		message[i + 14] = *(inputMessage + i * sizeof(uint8_t));
20000fe4:	6a3b      	ldr	r3, [r7, #32]
20000fe6:	f103 030e 	add.w	r3, r3, #14
20000fea:	6a39      	ldr	r1, [r7, #32]
20000fec:	687a      	ldr	r2, [r7, #4]
20000fee:	440a      	add	r2, r1
20000ff0:	7812      	ldrb	r2, [r2, #0]
20000ff2:	f107 0128 	add.w	r1, r7, #40	; 0x28
20000ff6:	440b      	add	r3, r1
20000ff8:	f803 2c1c 	strb.w	r2, [r3, #-28]
		message[i] = 0;
	}
	message[11] = (destAddr >> 8) & 0xFF;
	message[12] = destAddr & 0xFF;
	message[13] = 0;	//Options
	for(i = 0; i < inputMessageLength; ++i) {
20000ffc:	6a3b      	ldr	r3, [r7, #32]
20000ffe:	f103 0301 	add.w	r3, r3, #1
20001002:	623b      	str	r3, [r7, #32]
20001004:	78fa      	ldrb	r2, [r7, #3]
20001006:	6a3b      	ldr	r3, [r7, #32]
20001008:	429a      	cmp	r2, r3
2000100a:	dceb      	bgt.n	20000fe4 <sendMessage+0x74>
		message[i + 14] = *(inputMessage + i * sizeof(uint8_t));
	}
	uint8_t sum = 0;
2000100c:	f04f 0300 	mov.w	r3, #0
20001010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for(i = 3; i < messageLength - 1; ++i) {
20001014:	f04f 0303 	mov.w	r3, #3
20001018:	623b      	str	r3, [r7, #32]
2000101a:	e00e      	b.n	2000103a <sendMessage+0xca>
		sum += message[i];
2000101c:	6a3b      	ldr	r3, [r7, #32]
2000101e:	f107 0228 	add.w	r2, r7, #40	; 0x28
20001022:	4413      	add	r3, r2
20001024:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
20001028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
2000102c:	4413      	add	r3, r2
2000102e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	message[13] = 0;	//Options
	for(i = 0; i < inputMessageLength; ++i) {
		message[i + 14] = *(inputMessage + i * sizeof(uint8_t));
	}
	uint8_t sum = 0;
	for(i = 3; i < messageLength - 1; ++i) {
20001032:	6a3b      	ldr	r3, [r7, #32]
20001034:	f103 0301 	add.w	r3, r3, #1
20001038:	623b      	str	r3, [r7, #32]
2000103a:	6a3b      	ldr	r3, [r7, #32]
2000103c:	2b12      	cmp	r3, #18
2000103e:	dded      	ble.n	2000101c <sendMessage+0xac>
		sum += message[i];
	}
	message[messageLength - 1] = (0xFF - sum) & 0xFF;
20001040:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
20001044:	ea6f 0303 	mvn.w	r3, r3
20001048:	b2db      	uxtb	r3, r3
2000104a:	77fb      	strb	r3, [r7, #31]
	MSS_UART_polled_tx(&g_mss_uart1, message, sizeof(message));
2000104c:	f107 030c 	add.w	r3, r7, #12
20001050:	f643 006c 	movw	r0, #14444	; 0x386c
20001054:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001058:	4619      	mov	r1, r3
2000105a:	f04f 0214 	mov.w	r2, #20
2000105e:	f000 f953 	bl	20001308 <MSS_UART_polled_tx>
}
20001062:	f107 0728 	add.w	r7, r7, #40	; 0x28
20001066:	46bd      	mov	sp, r7
20001068:	bd80      	pop	{r7, pc}
2000106a:	bf00      	nop

2000106c <uart1_rx_handler>:

//When something is received, trigger an interrupt that fills g_rx_buff with the received data
void uart1_rx_handler( mss_uart_instance_t * this_uart ) {
2000106c:	b580      	push	{r7, lr}
2000106e:	b082      	sub	sp, #8
20001070:	af00      	add	r7, sp, #0
20001072:	6078      	str	r0, [r7, #4]
      MSS_UART_get_rx( this_uart, &g_rx_buff, sizeof(g_rx_buff) );
20001074:	6878      	ldr	r0, [r7, #4]
20001076:	f643 012c 	movw	r1, #14380	; 0x382c
2000107a:	f2c2 0100 	movt	r1, #8192	; 0x2000
2000107e:	f04f 0240 	mov.w	r2, #64	; 0x40
20001082:	f000 f9b3 	bl	200013ec <MSS_UART_get_rx>
}
20001086:	f107 0708 	add.w	r7, r7, #8
2000108a:	46bd      	mov	sp, r7
2000108c:	bd80      	pop	{r7, pc}
2000108e:	bf00      	nop

20001090 <NVIC_EnableIRQ>:
 *
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
20001090:	b480      	push	{r7}
20001092:	b083      	sub	sp, #12
20001094:	af00      	add	r7, sp, #0
20001096:	4603      	mov	r3, r0
20001098:	80fb      	strh	r3, [r7, #6]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
2000109a:	f24e 1300 	movw	r3, #57600	; 0xe100
2000109e:	f2ce 0300 	movt	r3, #57344	; 0xe000
200010a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
200010a6:	ea4f 1252 	mov.w	r2, r2, lsr #5
200010aa:	88f9      	ldrh	r1, [r7, #6]
200010ac:	f001 011f 	and.w	r1, r1, #31
200010b0:	f04f 0001 	mov.w	r0, #1
200010b4:	fa00 f101 	lsl.w	r1, r0, r1
200010b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
200010bc:	f107 070c 	add.w	r7, r7, #12
200010c0:	46bd      	mov	sp, r7
200010c2:	bc80      	pop	{r7}
200010c4:	4770      	bx	lr
200010c6:	bf00      	nop

200010c8 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
200010c8:	b480      	push	{r7}
200010ca:	b083      	sub	sp, #12
200010cc:	af00      	add	r7, sp, #0
200010ce:	4603      	mov	r3, r0
200010d0:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
200010d2:	f24e 1300 	movw	r3, #57600	; 0xe100
200010d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
200010da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
200010de:	ea4f 1252 	mov.w	r2, r2, lsr #5
200010e2:	88f9      	ldrh	r1, [r7, #6]
200010e4:	f001 011f 	and.w	r1, r1, #31
200010e8:	f04f 0001 	mov.w	r0, #1
200010ec:	fa00 f101 	lsl.w	r1, r0, r1
200010f0:	f102 0260 	add.w	r2, r2, #96	; 0x60
200010f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
200010f8:	f107 070c 	add.w	r7, r7, #12
200010fc:	46bd      	mov	sp, r7
200010fe:	bc80      	pop	{r7}
20001100:	4770      	bx	lr
20001102:	bf00      	nop

20001104 <MSS_UART_init>:
(
    mss_uart_instance_t* this_uart,
    uint32_t baud_rate,
    uint8_t line_config
)
{
20001104:	b580      	push	{r7, lr}
20001106:	b088      	sub	sp, #32
20001108:	af00      	add	r7, sp, #0
2000110a:	60f8      	str	r0, [r7, #12]
2000110c:	60b9      	str	r1, [r7, #8]
2000110e:	4613      	mov	r3, r2
20001110:	71fb      	strb	r3, [r7, #7]
    uint16_t baud_value = 1U;
20001112:	f04f 0301 	mov.w	r3, #1
20001116:	82fb      	strh	r3, [r7, #22]
    uint32_t pclk_freq = 0U;
20001118:	f04f 0300 	mov.w	r3, #0
2000111c:	61bb      	str	r3, [r7, #24]
    uint32_t baud_value_l;

    /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
     * mss_uart_instance_t instances used to identify UART0 and UART1. */
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
2000111e:	68fa      	ldr	r2, [r7, #12]
20001120:	f643 0394 	movw	r3, #14484	; 0x3894
20001124:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001128:	429a      	cmp	r2, r3
2000112a:	d007      	beq.n	2000113c <MSS_UART_init+0x38>
2000112c:	68fa      	ldr	r2, [r7, #12]
2000112e:	f643 036c 	movw	r3, #14444	; 0x386c
20001132:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001136:	429a      	cmp	r2, r3
20001138:	d000      	beq.n	2000113c <MSS_UART_init+0x38>
2000113a:	be00      	bkpt	0x0000

    /* baud_rate should be greater than 0 */
    ASSERT( 0U < baud_rate );
2000113c:	68bb      	ldr	r3, [r7, #8]
2000113e:	2b00      	cmp	r3, #0
20001140:	d100      	bne.n	20001144 <MSS_UART_init+0x40>
20001142:	be00      	bkpt	0x0000

    /* Force the value of the CMSIS global variables holding the various system
     * clock frequencies to be updated. */
    SystemCoreClockUpdate();
20001144:	f001 fa14 	bl	20002570 <SystemCoreClockUpdate>

    if ( this_uart == &g_mss_uart0 )
20001148:	68fa      	ldr	r2, [r7, #12]
2000114a:	f643 0394 	movw	r3, #14484	; 0x3894
2000114e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001152:	429a      	cmp	r2, r3
20001154:	d12e      	bne.n	200011b4 <MSS_UART_init+0xb0>
    {
        this_uart->hw_reg = UART0;
20001156:	68fb      	ldr	r3, [r7, #12]
20001158:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
2000115c:	601a      	str	r2, [r3, #0]
        this_uart->hw_reg_bit = UART0_BITBAND;
2000115e:	68fb      	ldr	r3, [r7, #12]
20001160:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
20001164:	605a      	str	r2, [r3, #4]
        this_uart->irqn = UART0_IRQn;
20001166:	68fb      	ldr	r3, [r7, #12]
20001168:	f04f 020a 	mov.w	r2, #10
2000116c:	811a      	strh	r2, [r3, #8]

        pclk_freq = g_FrequencyPCLK0;
2000116e:	f243 73c0 	movw	r3, #14272	; 0x37c0
20001172:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001176:	681b      	ldr	r3, [r3, #0]
20001178:	61bb      	str	r3, [r7, #24]

        /* reset UART0 */
        SYSREG->SOFT_RST_CR |= SYSREG_UART0_SOFTRESET_MASK;
2000117a:	f242 0300 	movw	r3, #8192	; 0x2000
2000117e:	f2ce 0304 	movt	r3, #57348	; 0xe004
20001182:	f242 0200 	movw	r2, #8192	; 0x2000
20001186:	f2ce 0204 	movt	r2, #57348	; 0xe004
2000118a:	6b12      	ldr	r2, [r2, #48]	; 0x30
2000118c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
20001190:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended UART0 interrupt */
        NVIC_ClearPendingIRQ( UART0_IRQn );
20001192:	f04f 000a 	mov.w	r0, #10
20001196:	f7ff ff97 	bl	200010c8 <NVIC_ClearPendingIRQ>
        /* Take UART0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_UART0_SOFTRESET_MASK;
2000119a:	f242 0300 	movw	r3, #8192	; 0x2000
2000119e:	f2ce 0304 	movt	r3, #57348	; 0xe004
200011a2:	f242 0200 	movw	r2, #8192	; 0x2000
200011a6:	f2ce 0204 	movt	r2, #57348	; 0xe004
200011aa:	6b12      	ldr	r2, [r2, #48]	; 0x30
200011ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
200011b0:	631a      	str	r2, [r3, #48]	; 0x30
200011b2:	e031      	b.n	20001218 <MSS_UART_init+0x114>
    }
    else
    {
        this_uart->hw_reg = UART1;
200011b4:	68fa      	ldr	r2, [r7, #12]
200011b6:	f240 0300 	movw	r3, #0
200011ba:	f2c4 0301 	movt	r3, #16385	; 0x4001
200011be:	6013      	str	r3, [r2, #0]
        this_uart->hw_reg_bit = UART1_BITBAND;
200011c0:	68fa      	ldr	r2, [r7, #12]
200011c2:	f240 0300 	movw	r3, #0
200011c6:	f2c4 2320 	movt	r3, #16928	; 0x4220
200011ca:	6053      	str	r3, [r2, #4]
        this_uart->irqn = UART1_IRQn;
200011cc:	68fb      	ldr	r3, [r7, #12]
200011ce:	f04f 020b 	mov.w	r2, #11
200011d2:	811a      	strh	r2, [r3, #8]

        pclk_freq = g_FrequencyPCLK1;
200011d4:	f243 73c4 	movw	r3, #14276	; 0x37c4
200011d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200011dc:	681b      	ldr	r3, [r3, #0]
200011de:	61bb      	str	r3, [r7, #24]

        /* Reset UART1 */
        SYSREG->SOFT_RST_CR |= SYSREG_UART1_SOFTRESET_MASK;
200011e0:	f242 0300 	movw	r3, #8192	; 0x2000
200011e4:	f2ce 0304 	movt	r3, #57348	; 0xe004
200011e8:	f242 0200 	movw	r2, #8192	; 0x2000
200011ec:	f2ce 0204 	movt	r2, #57348	; 0xe004
200011f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
200011f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
200011f6:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended UART1 interrupt */
        NVIC_ClearPendingIRQ( UART1_IRQn );
200011f8:	f04f 000b 	mov.w	r0, #11
200011fc:	f7ff ff64 	bl	200010c8 <NVIC_ClearPendingIRQ>
        /* Take UART1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_UART1_SOFTRESET_MASK;
20001200:	f242 0300 	movw	r3, #8192	; 0x2000
20001204:	f2ce 0304 	movt	r3, #57348	; 0xe004
20001208:	f242 0200 	movw	r2, #8192	; 0x2000
2000120c:	f2ce 0204 	movt	r2, #57348	; 0xe004
20001210:	6b12      	ldr	r2, [r2, #48]	; 0x30
20001212:	f422 7280 	bic.w	r2, r2, #256	; 0x100
20001216:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* disable interrupts */
    this_uart->hw_reg->IER = 0U;
20001218:	68fb      	ldr	r3, [r7, #12]
2000121a:	681b      	ldr	r3, [r3, #0]
2000121c:	f04f 0200 	mov.w	r2, #0
20001220:	711a      	strb	r2, [r3, #4]
     * The baud value is computed using the following equation:
     *      baud_value_l = PCLK_Frequency / (baud_rate * 16)
     * The baud value is rounded up or down depending on what would be the remainder
     * of the divide by 16 operation.
     */
    if( 0U < baud_rate )
20001222:	68bb      	ldr	r3, [r7, #8]
20001224:	2b00      	cmp	r3, #0
20001226:	d021      	beq.n	2000126c <MSS_UART_init+0x168>
    {
        baud_value_l = (uint32_t)(pclk_freq / baud_rate);
20001228:	69ba      	ldr	r2, [r7, #24]
2000122a:	68bb      	ldr	r3, [r7, #8]
2000122c:	fbb2 f3f3 	udiv	r3, r2, r3
20001230:	61fb      	str	r3, [r7, #28]
        if( baud_value_l & 0x00000008U )
20001232:	69fb      	ldr	r3, [r7, #28]
20001234:	f003 0308 	and.w	r3, r3, #8
20001238:	2b00      	cmp	r3, #0
2000123a:	d006      	beq.n	2000124a <MSS_UART_init+0x146>
        {
            /* remainder above 0.5 */
            baud_value_l = (baud_value_l >> 4U) + 1U;        
2000123c:	69fb      	ldr	r3, [r7, #28]
2000123e:	ea4f 1313 	mov.w	r3, r3, lsr #4
20001242:	f103 0301 	add.w	r3, r3, #1
20001246:	61fb      	str	r3, [r7, #28]
20001248:	e003      	b.n	20001252 <MSS_UART_init+0x14e>
        }
        else
        {
            /* remainder below 0.5 */
            baud_value_l = (baud_value_l >> 4U);
2000124a:	69fb      	ldr	r3, [r7, #28]
2000124c:	ea4f 1313 	mov.w	r3, r3, lsr #4
20001250:	61fb      	str	r3, [r7, #28]
        }
    
        /* Check if the baud rate is supported by the PCLK */
        ASSERT( baud_value_l <= UINT16_MAX);
20001252:	69fa      	ldr	r2, [r7, #28]
20001254:	f64f 73ff 	movw	r3, #65535	; 0xffff
20001258:	429a      	cmp	r2, r3
2000125a:	d900      	bls.n	2000125e <MSS_UART_init+0x15a>
2000125c:	be00      	bkpt	0x0000
        if( baud_value_l <= (uint32_t)UINT16_MAX)
2000125e:	69fa      	ldr	r2, [r7, #28]
20001260:	f64f 73ff 	movw	r3, #65535	; 0xffff
20001264:	429a      	cmp	r2, r3
20001266:	d801      	bhi.n	2000126c <MSS_UART_init+0x168>
        {
            baud_value = (uint16_t)baud_value_l;
20001268:	69fb      	ldr	r3, [r7, #28]
2000126a:	82fb      	strh	r3, [r7, #22]
        }
    }
    
    /* set divisor latch */
    this_uart->hw_reg_bit->LCR_DLAB = (uint32_t)1;
2000126c:	68fb      	ldr	r3, [r7, #12]
2000126e:	685b      	ldr	r3, [r3, #4]
20001270:	f04f 0201 	mov.w	r2, #1
20001274:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

    /* msb of baud value */
    this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8);
20001278:	68fb      	ldr	r3, [r7, #12]
2000127a:	681b      	ldr	r3, [r3, #0]
2000127c:	8afa      	ldrh	r2, [r7, #22]
2000127e:	ea4f 2212 	mov.w	r2, r2, lsr #8
20001282:	b292      	uxth	r2, r2
20001284:	b2d2      	uxtb	r2, r2
20001286:	711a      	strb	r2, [r3, #4]
    /* lsb of baud value */
    this_uart->hw_reg->DLR = (uint8_t)baud_value;
20001288:	68fb      	ldr	r3, [r7, #12]
2000128a:	681b      	ldr	r3, [r3, #0]
2000128c:	8afa      	ldrh	r2, [r7, #22]
2000128e:	b2d2      	uxtb	r2, r2
20001290:	701a      	strb	r2, [r3, #0]

    /* reset divisor latch */
    this_uart->hw_reg_bit->LCR_DLAB = (uint32_t)0;
20001292:	68fb      	ldr	r3, [r7, #12]
20001294:	685b      	ldr	r3, [r3, #4]
20001296:	f04f 0200 	mov.w	r2, #0
2000129a:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

    /* set the line control register (bit length, stop bits, parity) */
    this_uart->hw_reg->LCR = line_config;
2000129e:	68fb      	ldr	r3, [r7, #12]
200012a0:	681b      	ldr	r3, [r3, #0]
200012a2:	79fa      	ldrb	r2, [r7, #7]
200012a4:	731a      	strb	r2, [r3, #12]

    /* FIFO configuration */
    /* RX FIFO length = 1 byte, clear receiver FIFO, 
       clear transmitter FIFO, enable RXRDYN and TXRDYN pins. */
    this_uart->hw_reg->FCR = (uint8_t)MSS_UART_FIFO_SINGLE_BYTE | 
200012a6:	68fb      	ldr	r3, [r7, #12]
200012a8:	681b      	ldr	r3, [r3, #0]
200012aa:	f04f 020e 	mov.w	r2, #14
200012ae:	721a      	strb	r2, [r3, #8]
                              FCR_CLEAR_RX_FIFO_MASK | FCR_CLEAR_TX_FIFO_MASK | 
                              FCR_ENABLE_TXRDY_RXRDY_MASK;
    /* disable loopback */
    this_uart->hw_reg_bit->MCR_LOOP = (uint32_t)0;
200012b0:	68fb      	ldr	r3, [r7, #12]
200012b2:	685b      	ldr	r3, [r3, #4]
200012b4:	f04f 0200 	mov.w	r2, #0
200012b8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

    /* Instance setup */
    this_uart->tx_buff_size = TX_COMPLETE;
200012bc:	68fb      	ldr	r3, [r7, #12]
200012be:	f04f 0200 	mov.w	r2, #0
200012c2:	611a      	str	r2, [r3, #16]
    this_uart->tx_buffer = (const uint8_t *)0;
200012c4:	68fb      	ldr	r3, [r7, #12]
200012c6:	f04f 0200 	mov.w	r2, #0
200012ca:	60da      	str	r2, [r3, #12]
    this_uart->tx_idx = 0U;
200012cc:	68fb      	ldr	r3, [r7, #12]
200012ce:	f04f 0200 	mov.w	r2, #0
200012d2:	615a      	str	r2, [r3, #20]

    /* Default handlers for MSS UART interrupts */
    this_uart->rx_handler       = NULL_HANDLER;
200012d4:	68fb      	ldr	r3, [r7, #12]
200012d6:	f04f 0200 	mov.w	r2, #0
200012da:	61da      	str	r2, [r3, #28]
    this_uart->tx_handler       = default_tx_handler;
200012dc:	68fa      	ldr	r2, [r7, #12]
200012de:	f241 53e5 	movw	r3, #5605	; 0x15e5
200012e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200012e6:	6213      	str	r3, [r2, #32]
    this_uart->linests_handler  = NULL_HANDLER;
200012e8:	68fb      	ldr	r3, [r7, #12]
200012ea:	f04f 0200 	mov.w	r2, #0
200012ee:	619a      	str	r2, [r3, #24]
    this_uart->modemsts_handler = NULL_HANDLER;
200012f0:	68fb      	ldr	r3, [r7, #12]
200012f2:	f04f 0200 	mov.w	r2, #0
200012f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Initialize the sticky status */
    this_uart->status = 0U;
200012f8:	68fb      	ldr	r3, [r7, #12]
200012fa:	f04f 0200 	mov.w	r2, #0
200012fe:	729a      	strb	r2, [r3, #10]
}
20001300:	f107 0720 	add.w	r7, r7, #32
20001304:	46bd      	mov	sp, r7
20001306:	bd80      	pop	{r7, pc}

20001308 <MSS_UART_polled_tx>:
(
    mss_uart_instance_t * this_uart,
    const uint8_t * pbuff,
    uint32_t tx_size
)
{
20001308:	b480      	push	{r7}
2000130a:	b089      	sub	sp, #36	; 0x24
2000130c:	af00      	add	r7, sp, #0
2000130e:	60f8      	str	r0, [r7, #12]
20001310:	60b9      	str	r1, [r7, #8]
20001312:	607a      	str	r2, [r7, #4]
    uint32_t char_idx = 0U;
20001314:	f04f 0300 	mov.w	r3, #0
20001318:	613b      	str	r3, [r7, #16]
    uint32_t size_sent;
    uint8_t status;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
2000131a:	68fa      	ldr	r2, [r7, #12]
2000131c:	f643 0394 	movw	r3, #14484	; 0x3894
20001320:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001324:	429a      	cmp	r2, r3
20001326:	d007      	beq.n	20001338 <MSS_UART_polled_tx+0x30>
20001328:	68fa      	ldr	r2, [r7, #12]
2000132a:	f643 036c 	movw	r3, #14444	; 0x386c
2000132e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001332:	429a      	cmp	r2, r3
20001334:	d000      	beq.n	20001338 <MSS_UART_polled_tx+0x30>
20001336:	be00      	bkpt	0x0000
    ASSERT( pbuff != ( (uint8_t *)0 ) );
20001338:	68bb      	ldr	r3, [r7, #8]
2000133a:	2b00      	cmp	r3, #0
2000133c:	d100      	bne.n	20001340 <MSS_UART_polled_tx+0x38>
2000133e:	be00      	bkpt	0x0000
    ASSERT( tx_size > 0U );
20001340:	687b      	ldr	r3, [r7, #4]
20001342:	2b00      	cmp	r3, #0
20001344:	d100      	bne.n	20001348 <MSS_UART_polled_tx+0x40>
20001346:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20001348:	68fa      	ldr	r2, [r7, #12]
2000134a:	f643 0394 	movw	r3, #14484	; 0x3894
2000134e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001352:	429a      	cmp	r2, r3
20001354:	d006      	beq.n	20001364 <MSS_UART_polled_tx+0x5c>
20001356:	68fa      	ldr	r2, [r7, #12]
20001358:	f643 036c 	movw	r3, #14444	; 0x386c
2000135c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001360:	429a      	cmp	r2, r3
20001362:	d13d      	bne.n	200013e0 <MSS_UART_polled_tx+0xd8>
20001364:	68bb      	ldr	r3, [r7, #8]
20001366:	2b00      	cmp	r3, #0
20001368:	d03a      	beq.n	200013e0 <MSS_UART_polled_tx+0xd8>
2000136a:	687b      	ldr	r3, [r7, #4]
2000136c:	2b00      	cmp	r3, #0
2000136e:	d037      	beq.n	200013e0 <MSS_UART_polled_tx+0xd8>
         /* Remain in this loop until the entire input buffer
          * has been transferred to the UART.
          */
        do {
            /* Read the Line Status Register and update the sticky record */
            status = this_uart->hw_reg->LSR;
20001370:	68fb      	ldr	r3, [r7, #12]
20001372:	681b      	ldr	r3, [r3, #0]
20001374:	7d1b      	ldrb	r3, [r3, #20]
20001376:	76fb      	strb	r3, [r7, #27]
            this_uart->status |= status;
20001378:	68fb      	ldr	r3, [r7, #12]
2000137a:	7a9a      	ldrb	r2, [r3, #10]
2000137c:	7efb      	ldrb	r3, [r7, #27]
2000137e:	ea42 0303 	orr.w	r3, r2, r3
20001382:	b2da      	uxtb	r2, r3
20001384:	68fb      	ldr	r3, [r7, #12]
20001386:	729a      	strb	r2, [r3, #10]

            /* Check if TX FIFO is empty. */
            if( status & MSS_UART_THRE )
20001388:	7efb      	ldrb	r3, [r7, #27]
2000138a:	f003 0320 	and.w	r3, r3, #32
2000138e:	2b00      	cmp	r3, #0
20001390:	d023      	beq.n	200013da <MSS_UART_polled_tx+0xd2>
            {
                uint32_t fill_size = TX_FIFO_SIZE;
20001392:	f04f 0310 	mov.w	r3, #16
20001396:	61fb      	str	r3, [r7, #28]

                /* Calculate the number of bytes to transmit. */
                if ( tx_size < TX_FIFO_SIZE )
20001398:	687b      	ldr	r3, [r7, #4]
2000139a:	2b0f      	cmp	r3, #15
2000139c:	d801      	bhi.n	200013a2 <MSS_UART_polled_tx+0x9a>
                {
                    fill_size = tx_size;
2000139e:	687b      	ldr	r3, [r7, #4]
200013a0:	61fb      	str	r3, [r7, #28]
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
200013a2:	f04f 0300 	mov.w	r3, #0
200013a6:	617b      	str	r3, [r7, #20]
200013a8:	e00e      	b.n	200013c8 <MSS_UART_polled_tx+0xc0>
                {
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx++];
200013aa:	68fb      	ldr	r3, [r7, #12]
200013ac:	681b      	ldr	r3, [r3, #0]
200013ae:	68b9      	ldr	r1, [r7, #8]
200013b0:	693a      	ldr	r2, [r7, #16]
200013b2:	440a      	add	r2, r1
200013b4:	7812      	ldrb	r2, [r2, #0]
200013b6:	701a      	strb	r2, [r3, #0]
200013b8:	693b      	ldr	r3, [r7, #16]
200013ba:	f103 0301 	add.w	r3, r3, #1
200013be:	613b      	str	r3, [r7, #16]
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
200013c0:	697b      	ldr	r3, [r7, #20]
200013c2:	f103 0301 	add.w	r3, r3, #1
200013c6:	617b      	str	r3, [r7, #20]
200013c8:	697a      	ldr	r2, [r7, #20]
200013ca:	69fb      	ldr	r3, [r7, #28]
200013cc:	429a      	cmp	r2, r3
200013ce:	d3ec      	bcc.n	200013aa <MSS_UART_polled_tx+0xa2>
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx++];
                }

                /* Calculate the number of untransmitted bytes remaining. */
                tx_size -= size_sent;
200013d0:	687a      	ldr	r2, [r7, #4]
200013d2:	697b      	ldr	r3, [r7, #20]
200013d4:	ebc3 0302 	rsb	r3, r3, r2
200013d8:	607b      	str	r3, [r7, #4]
            }
        }while( tx_size );
200013da:	687b      	ldr	r3, [r7, #4]
200013dc:	2b00      	cmp	r3, #0
200013de:	d1c7      	bne.n	20001370 <MSS_UART_polled_tx+0x68>
    }
}
200013e0:	f107 0724 	add.w	r7, r7, #36	; 0x24
200013e4:	46bd      	mov	sp, r7
200013e6:	bc80      	pop	{r7}
200013e8:	4770      	bx	lr
200013ea:	bf00      	nop

200013ec <MSS_UART_get_rx>:
(
    mss_uart_instance_t * this_uart,
    uint8_t * rx_buff,
    size_t buff_size
)
{
200013ec:	b480      	push	{r7}
200013ee:	b087      	sub	sp, #28
200013f0:	af00      	add	r7, sp, #0
200013f2:	60f8      	str	r0, [r7, #12]
200013f4:	60b9      	str	r1, [r7, #8]
200013f6:	607a      	str	r2, [r7, #4]
    size_t rx_size = 0U;
200013f8:	f04f 0300 	mov.w	r3, #0
200013fc:	613b      	str	r3, [r7, #16]
    uint8_t status = 0U;
200013fe:	f04f 0300 	mov.w	r3, #0
20001402:	75fb      	strb	r3, [r7, #23]

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20001404:	68fa      	ldr	r2, [r7, #12]
20001406:	f643 0394 	movw	r3, #14484	; 0x3894
2000140a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000140e:	429a      	cmp	r2, r3
20001410:	d007      	beq.n	20001422 <MSS_UART_get_rx+0x36>
20001412:	68fa      	ldr	r2, [r7, #12]
20001414:	f643 036c 	movw	r3, #14444	; 0x386c
20001418:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000141c:	429a      	cmp	r2, r3
2000141e:	d000      	beq.n	20001422 <MSS_UART_get_rx+0x36>
20001420:	be00      	bkpt	0x0000
    ASSERT( rx_buff != ((uint8_t *)0) );
20001422:	68bb      	ldr	r3, [r7, #8]
20001424:	2b00      	cmp	r3, #0
20001426:	d100      	bne.n	2000142a <MSS_UART_get_rx+0x3e>
20001428:	be00      	bkpt	0x0000
    ASSERT( buff_size > 0U );
2000142a:	687b      	ldr	r3, [r7, #4]
2000142c:	2b00      	cmp	r3, #0
2000142e:	d100      	bne.n	20001432 <MSS_UART_get_rx+0x46>
20001430:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20001432:	68fa      	ldr	r2, [r7, #12]
20001434:	f643 0394 	movw	r3, #14484	; 0x3894
20001438:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000143c:	429a      	cmp	r2, r3
2000143e:	d006      	beq.n	2000144e <MSS_UART_get_rx+0x62>
20001440:	68fa      	ldr	r2, [r7, #12]
20001442:	f643 036c 	movw	r3, #14444	; 0x386c
20001446:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000144a:	429a      	cmp	r2, r3
2000144c:	d134      	bne.n	200014b8 <MSS_UART_get_rx+0xcc>
2000144e:	68bb      	ldr	r3, [r7, #8]
20001450:	2b00      	cmp	r3, #0
20001452:	d031      	beq.n	200014b8 <MSS_UART_get_rx+0xcc>
20001454:	687b      	ldr	r3, [r7, #4]
20001456:	2b00      	cmp	r3, #0
20001458:	d02e      	beq.n	200014b8 <MSS_UART_get_rx+0xcc>
          ( rx_buff != ((uint8_t *)0) ) && ( buff_size > 0U ) )
    {
        status = this_uart->hw_reg->LSR;
2000145a:	68fb      	ldr	r3, [r7, #12]
2000145c:	681b      	ldr	r3, [r3, #0]
2000145e:	7d1b      	ldrb	r3, [r3, #20]
20001460:	75fb      	strb	r3, [r7, #23]
        this_uart->status |= status;
20001462:	68fb      	ldr	r3, [r7, #12]
20001464:	7a9a      	ldrb	r2, [r3, #10]
20001466:	7dfb      	ldrb	r3, [r7, #23]
20001468:	ea42 0303 	orr.w	r3, r2, r3
2000146c:	b2da      	uxtb	r2, r3
2000146e:	68fb      	ldr	r3, [r7, #12]
20001470:	729a      	strb	r2, [r3, #10]

        while (( (status & MSS_UART_DATA_READY) != 0U) &&
20001472:	e017      	b.n	200014a4 <MSS_UART_get_rx+0xb8>
               ( rx_size < buff_size ) )
        {
            rx_buff[rx_size] = this_uart->hw_reg->RBR;
20001474:	68ba      	ldr	r2, [r7, #8]
20001476:	693b      	ldr	r3, [r7, #16]
20001478:	4413      	add	r3, r2
2000147a:	68fa      	ldr	r2, [r7, #12]
2000147c:	6812      	ldr	r2, [r2, #0]
2000147e:	7812      	ldrb	r2, [r2, #0]
20001480:	b2d2      	uxtb	r2, r2
20001482:	701a      	strb	r2, [r3, #0]
            ++rx_size;
20001484:	693b      	ldr	r3, [r7, #16]
20001486:	f103 0301 	add.w	r3, r3, #1
2000148a:	613b      	str	r3, [r7, #16]
            status = this_uart->hw_reg->LSR;
2000148c:	68fb      	ldr	r3, [r7, #12]
2000148e:	681b      	ldr	r3, [r3, #0]
20001490:	7d1b      	ldrb	r3, [r3, #20]
20001492:	75fb      	strb	r3, [r7, #23]
            this_uart->status |= status;
20001494:	68fb      	ldr	r3, [r7, #12]
20001496:	7a9a      	ldrb	r2, [r3, #10]
20001498:	7dfb      	ldrb	r3, [r7, #23]
2000149a:	ea42 0303 	orr.w	r3, r2, r3
2000149e:	b2da      	uxtb	r2, r3
200014a0:	68fb      	ldr	r3, [r7, #12]
200014a2:	729a      	strb	r2, [r3, #10]
          ( rx_buff != ((uint8_t *)0) ) && ( buff_size > 0U ) )
    {
        status = this_uart->hw_reg->LSR;
        this_uart->status |= status;

        while (( (status & MSS_UART_DATA_READY) != 0U) &&
200014a4:	7dfb      	ldrb	r3, [r7, #23]
200014a6:	f003 0301 	and.w	r3, r3, #1
200014aa:	b2db      	uxtb	r3, r3
200014ac:	2b00      	cmp	r3, #0
200014ae:	d003      	beq.n	200014b8 <MSS_UART_get_rx+0xcc>
200014b0:	693a      	ldr	r2, [r7, #16]
200014b2:	687b      	ldr	r3, [r7, #4]
200014b4:	429a      	cmp	r2, r3
200014b6:	d3dd      	bcc.n	20001474 <MSS_UART_get_rx+0x88>
            ++rx_size;
            status = this_uart->hw_reg->LSR;
            this_uart->status |= status;
        }
    }
    return rx_size;
200014b8:	693b      	ldr	r3, [r7, #16]
}
200014ba:	4618      	mov	r0, r3
200014bc:	f107 071c 	add.w	r7, r7, #28
200014c0:	46bd      	mov	sp, r7
200014c2:	bc80      	pop	{r7}
200014c4:	4770      	bx	lr
200014c6:	bf00      	nop

200014c8 <MSS_UART_isr>:
static void
MSS_UART_isr
(
    mss_uart_instance_t * this_uart
)
{
200014c8:	b580      	push	{r7, lr}
200014ca:	b084      	sub	sp, #16
200014cc:	af00      	add	r7, sp, #0
200014ce:	6078      	str	r0, [r7, #4]
    uint8_t iirf;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
200014d0:	687a      	ldr	r2, [r7, #4]
200014d2:	f643 0394 	movw	r3, #14484	; 0x3894
200014d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200014da:	429a      	cmp	r2, r3
200014dc:	d007      	beq.n	200014ee <MSS_UART_isr+0x26>
200014de:	687a      	ldr	r2, [r7, #4]
200014e0:	f643 036c 	movw	r3, #14444	; 0x386c
200014e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200014e8:	429a      	cmp	r2, r3
200014ea:	d000      	beq.n	200014ee <MSS_UART_isr+0x26>
200014ec:	be00      	bkpt	0x0000

    if ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) )
200014ee:	687a      	ldr	r2, [r7, #4]
200014f0:	f643 0394 	movw	r3, #14484	; 0x3894
200014f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200014f8:	429a      	cmp	r2, r3
200014fa:	d006      	beq.n	2000150a <MSS_UART_isr+0x42>
200014fc:	687a      	ldr	r2, [r7, #4]
200014fe:	f643 036c 	movw	r3, #14444	; 0x386c
20001502:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001506:	429a      	cmp	r2, r3
20001508:	d167      	bne.n	200015da <MSS_UART_isr+0x112>
    {
        iirf = this_uart->hw_reg->IIR & IIRF_MASK;
2000150a:	687b      	ldr	r3, [r7, #4]
2000150c:	681b      	ldr	r3, [r3, #0]
2000150e:	7a1b      	ldrb	r3, [r3, #8]
20001510:	b2db      	uxtb	r3, r3
20001512:	f003 030f 	and.w	r3, r3, #15
20001516:	73fb      	strb	r3, [r7, #15]

        switch ( iirf )
20001518:	7bfb      	ldrb	r3, [r7, #15]
2000151a:	2b0c      	cmp	r3, #12
2000151c:	d854      	bhi.n	200015c8 <MSS_UART_isr+0x100>
2000151e:	a201      	add	r2, pc, #4	; (adr r2, 20001524 <MSS_UART_isr+0x5c>)
20001520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20001524:	20001559 	.word	0x20001559
20001528:	200015c9 	.word	0x200015c9
2000152c:	20001575 	.word	0x20001575
20001530:	200015c9 	.word	0x200015c9
20001534:	20001591 	.word	0x20001591
20001538:	200015c9 	.word	0x200015c9
2000153c:	200015ad 	.word	0x200015ad
20001540:	200015c9 	.word	0x200015c9
20001544:	200015c9 	.word	0x200015c9
20001548:	200015c9 	.word	0x200015c9
2000154c:	200015c9 	.word	0x200015c9
20001550:	200015c9 	.word	0x200015c9
20001554:	20001591 	.word	0x20001591
        {
            case IIRF_MODEM_STATUS:  /* Modem status interrupt */
            {
                ASSERT( NULL_HANDLER != this_uart->modemsts_handler );
20001558:	687b      	ldr	r3, [r7, #4]
2000155a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000155c:	2b00      	cmp	r3, #0
2000155e:	d100      	bne.n	20001562 <MSS_UART_isr+0x9a>
20001560:	be00      	bkpt	0x0000
                if( NULL_HANDLER != this_uart->modemsts_handler )
20001562:	687b      	ldr	r3, [r7, #4]
20001564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001566:	2b00      	cmp	r3, #0
20001568:	d030      	beq.n	200015cc <MSS_UART_isr+0x104>
                {
                   (*(this_uart->modemsts_handler))( this_uart );
2000156a:	687b      	ldr	r3, [r7, #4]
2000156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000156e:	6878      	ldr	r0, [r7, #4]
20001570:	4798      	blx	r3
                }
            }
            break;
20001572:	e032      	b.n	200015da <MSS_UART_isr+0x112>

            case IIRF_THRE: /* Transmitter Holding Register Empty */
            {
                ASSERT( NULL_HANDLER != this_uart->tx_handler );
20001574:	687b      	ldr	r3, [r7, #4]
20001576:	6a1b      	ldr	r3, [r3, #32]
20001578:	2b00      	cmp	r3, #0
2000157a:	d100      	bne.n	2000157e <MSS_UART_isr+0xb6>
2000157c:	be00      	bkpt	0x0000
                if ( NULL_HANDLER != this_uart->tx_handler )
2000157e:	687b      	ldr	r3, [r7, #4]
20001580:	6a1b      	ldr	r3, [r3, #32]
20001582:	2b00      	cmp	r3, #0
20001584:	d024      	beq.n	200015d0 <MSS_UART_isr+0x108>
                {
                    (*(this_uart->tx_handler))( this_uart );
20001586:	687b      	ldr	r3, [r7, #4]
20001588:	6a1b      	ldr	r3, [r3, #32]
2000158a:	6878      	ldr	r0, [r7, #4]
2000158c:	4798      	blx	r3
                }
            }
            break;
2000158e:	e024      	b.n	200015da <MSS_UART_isr+0x112>

            case IIRF_RX_DATA:      /* Received Data Available */
            case IIRF_DATA_TIMEOUT: /* Received Data Timed-out */
            {
                ASSERT( NULL_HANDLER != this_uart->rx_handler );
20001590:	687b      	ldr	r3, [r7, #4]
20001592:	69db      	ldr	r3, [r3, #28]
20001594:	2b00      	cmp	r3, #0
20001596:	d100      	bne.n	2000159a <MSS_UART_isr+0xd2>
20001598:	be00      	bkpt	0x0000
                if ( NULL_HANDLER != this_uart->rx_handler )
2000159a:	687b      	ldr	r3, [r7, #4]
2000159c:	69db      	ldr	r3, [r3, #28]
2000159e:	2b00      	cmp	r3, #0
200015a0:	d018      	beq.n	200015d4 <MSS_UART_isr+0x10c>
                {
                    (*(this_uart->rx_handler))( this_uart );
200015a2:	687b      	ldr	r3, [r7, #4]
200015a4:	69db      	ldr	r3, [r3, #28]
200015a6:	6878      	ldr	r0, [r7, #4]
200015a8:	4798      	blx	r3
                }
            }
            break;
200015aa:	e016      	b.n	200015da <MSS_UART_isr+0x112>

            case IIRF_RX_LINE_STATUS:  /* Line Status Interrupt */
            {
                ASSERT( NULL_HANDLER != this_uart->linests_handler );
200015ac:	687b      	ldr	r3, [r7, #4]
200015ae:	699b      	ldr	r3, [r3, #24]
200015b0:	2b00      	cmp	r3, #0
200015b2:	d100      	bne.n	200015b6 <MSS_UART_isr+0xee>
200015b4:	be00      	bkpt	0x0000
                if ( NULL_HANDLER != this_uart->linests_handler )
200015b6:	687b      	ldr	r3, [r7, #4]
200015b8:	699b      	ldr	r3, [r3, #24]
200015ba:	2b00      	cmp	r3, #0
200015bc:	d00c      	beq.n	200015d8 <MSS_UART_isr+0x110>
                {
                   (*(this_uart->linests_handler))( this_uart );
200015be:	687b      	ldr	r3, [r7, #4]
200015c0:	699b      	ldr	r3, [r3, #24]
200015c2:	6878      	ldr	r0, [r7, #4]
200015c4:	4798      	blx	r3
                }
            }
            break;
200015c6:	e008      	b.n	200015da <MSS_UART_isr+0x112>

            default:
            {
                ASSERT( INVALID_INTERRUPT );
200015c8:	be00      	bkpt	0x0000
200015ca:	e006      	b.n	200015da <MSS_UART_isr+0x112>
                if( NULL_HANDLER != this_uart->modemsts_handler )
                {
                   (*(this_uart->modemsts_handler))( this_uart );
                }
            }
            break;
200015cc:	bf00      	nop
200015ce:	e004      	b.n	200015da <MSS_UART_isr+0x112>
                if ( NULL_HANDLER != this_uart->tx_handler )
                {
                    (*(this_uart->tx_handler))( this_uart );
                }
            }
            break;
200015d0:	bf00      	nop
200015d2:	e002      	b.n	200015da <MSS_UART_isr+0x112>
                if ( NULL_HANDLER != this_uart->rx_handler )
                {
                    (*(this_uart->rx_handler))( this_uart );
                }
            }
            break;
200015d4:	bf00      	nop
200015d6:	e000      	b.n	200015da <MSS_UART_isr+0x112>
                if ( NULL_HANDLER != this_uart->linests_handler )
                {
                   (*(this_uart->linests_handler))( this_uart );
                }
            }
            break;
200015d8:	bf00      	nop
                ASSERT( INVALID_INTERRUPT );
            }
            break;
        }
    }
}
200015da:	f107 0710 	add.w	r7, r7, #16
200015de:	46bd      	mov	sp, r7
200015e0:	bd80      	pop	{r7, pc}
200015e2:	bf00      	nop

200015e4 <default_tx_handler>:
static void
default_tx_handler
(
    mss_uart_instance_t * this_uart
)
{
200015e4:	b480      	push	{r7}
200015e6:	b087      	sub	sp, #28
200015e8:	af00      	add	r7, sp, #0
200015ea:	6078      	str	r0, [r7, #4]
    uint8_t status;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
200015ec:	687a      	ldr	r2, [r7, #4]
200015ee:	f643 0394 	movw	r3, #14484	; 0x3894
200015f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200015f6:	429a      	cmp	r2, r3
200015f8:	d007      	beq.n	2000160a <default_tx_handler+0x26>
200015fa:	687a      	ldr	r2, [r7, #4]
200015fc:	f643 036c 	movw	r3, #14444	; 0x386c
20001600:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001604:	429a      	cmp	r2, r3
20001606:	d000      	beq.n	2000160a <default_tx_handler+0x26>
20001608:	be00      	bkpt	0x0000
    ASSERT( ( (uint8_t *)0 ) != this_uart->tx_buffer );
2000160a:	687b      	ldr	r3, [r7, #4]
2000160c:	68db      	ldr	r3, [r3, #12]
2000160e:	2b00      	cmp	r3, #0
20001610:	d100      	bne.n	20001614 <default_tx_handler+0x30>
20001612:	be00      	bkpt	0x0000
    ASSERT( 0U < this_uart->tx_buff_size );
20001614:	687b      	ldr	r3, [r7, #4]
20001616:	691b      	ldr	r3, [r3, #16]
20001618:	2b00      	cmp	r3, #0
2000161a:	d100      	bne.n	2000161e <default_tx_handler+0x3a>
2000161c:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
2000161e:	687a      	ldr	r2, [r7, #4]
20001620:	f643 0394 	movw	r3, #14484	; 0x3894
20001624:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001628:	429a      	cmp	r2, r3
2000162a:	d006      	beq.n	2000163a <default_tx_handler+0x56>
2000162c:	687a      	ldr	r2, [r7, #4]
2000162e:	f643 036c 	movw	r3, #14444	; 0x386c
20001632:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001636:	429a      	cmp	r2, r3
20001638:	d152      	bne.n	200016e0 <default_tx_handler+0xfc>
        ( ( (uint8_t *)0 ) != this_uart->tx_buffer ) &&
2000163a:	687b      	ldr	r3, [r7, #4]
2000163c:	68db      	ldr	r3, [r3, #12]

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
    ASSERT( ( (uint8_t *)0 ) != this_uart->tx_buffer );
    ASSERT( 0U < this_uart->tx_buff_size );

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
2000163e:	2b00      	cmp	r3, #0
20001640:	d04e      	beq.n	200016e0 <default_tx_handler+0xfc>
        ( ( (uint8_t *)0 ) != this_uart->tx_buffer ) &&
        ( 0U < this_uart->tx_buff_size ) )
20001642:	687b      	ldr	r3, [r7, #4]
20001644:	691b      	ldr	r3, [r3, #16]

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
    ASSERT( ( (uint8_t *)0 ) != this_uart->tx_buffer );
    ASSERT( 0U < this_uart->tx_buff_size );

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20001646:	2b00      	cmp	r3, #0
20001648:	d04a      	beq.n	200016e0 <default_tx_handler+0xfc>
        ( ( (uint8_t *)0 ) != this_uart->tx_buffer ) &&
        ( 0U < this_uart->tx_buff_size ) )
    {
        /* Read the Line Status Register and update the sticky record. */
        status = this_uart->hw_reg->LSR;
2000164a:	687b      	ldr	r3, [r7, #4]
2000164c:	681b      	ldr	r3, [r3, #0]
2000164e:	7d1b      	ldrb	r3, [r3, #20]
20001650:	72fb      	strb	r3, [r7, #11]
        this_uart->status |= status;
20001652:	687b      	ldr	r3, [r7, #4]
20001654:	7a9a      	ldrb	r2, [r3, #10]
20001656:	7afb      	ldrb	r3, [r7, #11]
20001658:	ea42 0303 	orr.w	r3, r2, r3
2000165c:	b2da      	uxtb	r2, r3
2000165e:	687b      	ldr	r3, [r7, #4]
20001660:	729a      	strb	r2, [r3, #10]

        /*
         * This function should only be called as a result of a THRE interrupt.
         * Verify that this is true before proceeding to transmit data.
         */
        if ( status & MSS_UART_THRE )
20001662:	7afb      	ldrb	r3, [r7, #11]
20001664:	f003 0320 	and.w	r3, r3, #32
20001668:	2b00      	cmp	r3, #0
2000166a:	d029      	beq.n	200016c0 <default_tx_handler+0xdc>
        {
            uint32_t i;
            uint32_t fill_size = TX_FIFO_SIZE;
2000166c:	f04f 0310 	mov.w	r3, #16
20001670:	613b      	str	r3, [r7, #16]
            uint32_t tx_remain = this_uart->tx_buff_size - this_uart->tx_idx;
20001672:	687b      	ldr	r3, [r7, #4]
20001674:	691a      	ldr	r2, [r3, #16]
20001676:	687b      	ldr	r3, [r7, #4]
20001678:	695b      	ldr	r3, [r3, #20]
2000167a:	ebc3 0302 	rsb	r3, r3, r2
2000167e:	617b      	str	r3, [r7, #20]

            /* Calculate the number of bytes to transmit. */
            if ( tx_remain < TX_FIFO_SIZE )
20001680:	697b      	ldr	r3, [r7, #20]
20001682:	2b0f      	cmp	r3, #15
20001684:	d801      	bhi.n	2000168a <default_tx_handler+0xa6>
            {
                fill_size = tx_remain;
20001686:	697b      	ldr	r3, [r7, #20]
20001688:	613b      	str	r3, [r7, #16]
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for ( i = 0U; i < fill_size; ++i )
2000168a:	f04f 0300 	mov.w	r3, #0
2000168e:	60fb      	str	r3, [r7, #12]
20001690:	e012      	b.n	200016b8 <default_tx_handler+0xd4>
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
20001692:	687b      	ldr	r3, [r7, #4]
20001694:	681b      	ldr	r3, [r3, #0]
20001696:	687a      	ldr	r2, [r7, #4]
20001698:	68d1      	ldr	r1, [r2, #12]
2000169a:	687a      	ldr	r2, [r7, #4]
2000169c:	6952      	ldr	r2, [r2, #20]
2000169e:	440a      	add	r2, r1
200016a0:	7812      	ldrb	r2, [r2, #0]
200016a2:	701a      	strb	r2, [r3, #0]
                ++this_uart->tx_idx;
200016a4:	687b      	ldr	r3, [r7, #4]
200016a6:	695b      	ldr	r3, [r3, #20]
200016a8:	f103 0201 	add.w	r2, r3, #1
200016ac:	687b      	ldr	r3, [r7, #4]
200016ae:	615a      	str	r2, [r3, #20]
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for ( i = 0U; i < fill_size; ++i )
200016b0:	68fb      	ldr	r3, [r7, #12]
200016b2:	f103 0301 	add.w	r3, r3, #1
200016b6:	60fb      	str	r3, [r7, #12]
200016b8:	68fa      	ldr	r2, [r7, #12]
200016ba:	693b      	ldr	r3, [r7, #16]
200016bc:	429a      	cmp	r2, r3
200016be:	d3e8      	bcc.n	20001692 <default_tx_handler+0xae>
                ++this_uart->tx_idx;
            }
        }

        /* Flag Tx as complete if all data has been pushed into the Tx FIFO. */
        if ( this_uart->tx_idx == this_uart->tx_buff_size )
200016c0:	687b      	ldr	r3, [r7, #4]
200016c2:	695a      	ldr	r2, [r3, #20]
200016c4:	687b      	ldr	r3, [r7, #4]
200016c6:	691b      	ldr	r3, [r3, #16]
200016c8:	429a      	cmp	r2, r3
200016ca:	d109      	bne.n	200016e0 <default_tx_handler+0xfc>
        {
            this_uart->tx_buff_size = TX_COMPLETE;
200016cc:	687b      	ldr	r3, [r7, #4]
200016ce:	f04f 0200 	mov.w	r2, #0
200016d2:	611a      	str	r2, [r3, #16]
            /* disables TX interrupt */
            this_uart->hw_reg_bit->IER_ETBEI = 0U;
200016d4:	687b      	ldr	r3, [r7, #4]
200016d6:	685b      	ldr	r3, [r3, #4]
200016d8:	f04f 0200 	mov.w	r2, #0
200016dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        }
    }
}
200016e0:	f107 071c 	add.w	r7, r7, #28
200016e4:	46bd      	mov	sp, r7
200016e6:	bc80      	pop	{r7}
200016e8:	4770      	bx	lr
200016ea:	bf00      	nop

200016ec <MSS_UART_set_rx_handler>:
(
    mss_uart_instance_t *       this_uart,
    mss_uart_irq_handler_t      handler,
    mss_uart_rx_trig_level_t    trigger_level
)
{
200016ec:	b580      	push	{r7, lr}
200016ee:	b084      	sub	sp, #16
200016f0:	af00      	add	r7, sp, #0
200016f2:	60f8      	str	r0, [r7, #12]
200016f4:	60b9      	str	r1, [r7, #8]
200016f6:	4613      	mov	r3, r2
200016f8:	71fb      	strb	r3, [r7, #7]
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
200016fa:	68fa      	ldr	r2, [r7, #12]
200016fc:	f643 0394 	movw	r3, #14484	; 0x3894
20001700:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001704:	429a      	cmp	r2, r3
20001706:	d007      	beq.n	20001718 <MSS_UART_set_rx_handler+0x2c>
20001708:	68fa      	ldr	r2, [r7, #12]
2000170a:	f643 036c 	movw	r3, #14444	; 0x386c
2000170e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001712:	429a      	cmp	r2, r3
20001714:	d000      	beq.n	20001718 <MSS_UART_set_rx_handler+0x2c>
20001716:	be00      	bkpt	0x0000
    ASSERT( handler != INVALID_IRQ_HANDLER );
20001718:	68bb      	ldr	r3, [r7, #8]
2000171a:	2b00      	cmp	r3, #0
2000171c:	d100      	bne.n	20001720 <MSS_UART_set_rx_handler+0x34>
2000171e:	be00      	bkpt	0x0000
    ASSERT( trigger_level < MSS_UART_FIFO_INVALID_TRIG_LEVEL );
20001720:	79fb      	ldrb	r3, [r7, #7]
20001722:	2bc0      	cmp	r3, #192	; 0xc0
20001724:	d900      	bls.n	20001728 <MSS_UART_set_rx_handler+0x3c>
20001726:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20001728:	68fa      	ldr	r2, [r7, #12]
2000172a:	f643 0394 	movw	r3, #14484	; 0x3894
2000172e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001732:	429a      	cmp	r2, r3
20001734:	d006      	beq.n	20001744 <MSS_UART_set_rx_handler+0x58>
20001736:	68fa      	ldr	r2, [r7, #12]
20001738:	f643 036c 	movw	r3, #14444	; 0x386c
2000173c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001740:	429a      	cmp	r2, r3
20001742:	d123      	bne.n	2000178c <MSS_UART_set_rx_handler+0xa0>
20001744:	68bb      	ldr	r3, [r7, #8]
20001746:	2b00      	cmp	r3, #0
20001748:	d020      	beq.n	2000178c <MSS_UART_set_rx_handler+0xa0>
2000174a:	79fb      	ldrb	r3, [r7, #7]
2000174c:	2bc0      	cmp	r3, #192	; 0xc0
2000174e:	d81d      	bhi.n	2000178c <MSS_UART_set_rx_handler+0xa0>
        ( handler != INVALID_IRQ_HANDLER) &&
        ( trigger_level < MSS_UART_FIFO_INVALID_TRIG_LEVEL) )
    {
        this_uart->rx_handler = handler;
20001750:	68fb      	ldr	r3, [r7, #12]
20001752:	68ba      	ldr	r2, [r7, #8]
20001754:	61da      	str	r2, [r3, #28]

        /* Set the receive interrupt trigger level. */
        /* Clear RX FIFO; Enable TXRDY and RXRDY for PDMA */
        this_uart->hw_reg->FCR = (uint8_t)(FCR_TRIG_LEVEL_MASK & (uint8_t)trigger_level) |
20001756:	68fb      	ldr	r3, [r7, #12]
20001758:	681a      	ldr	r2, [r3, #0]
2000175a:	79fb      	ldrb	r3, [r7, #7]
2000175c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
20001760:	f043 030a 	orr.w	r3, r3, #10
20001764:	b2db      	uxtb	r3, r3
20001766:	7213      	strb	r3, [r2, #8]
                              FCR_CLEAR_RX_FIFO_MASK | FCR_ENABLE_TXRDY_RXRDY_MASK;

        /* Clear any previously pended interrupts */
        NVIC_ClearPendingIRQ( this_uart->irqn );
20001768:	68fb      	ldr	r3, [r7, #12]
2000176a:	891b      	ldrh	r3, [r3, #8]
2000176c:	b21b      	sxth	r3, r3
2000176e:	4618      	mov	r0, r3
20001770:	f7ff fcaa 	bl	200010c8 <NVIC_ClearPendingIRQ>

        /* Enable receive interrupt. */
        this_uart->hw_reg_bit->IER_ERBFI = 1U;
20001774:	68fb      	ldr	r3, [r7, #12]
20001776:	685b      	ldr	r3, [r3, #4]
20001778:	f04f 0201 	mov.w	r2, #1
2000177c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Enable UART instance interrupt in Cortex-M3 NVIC. */
        NVIC_EnableIRQ( this_uart->irqn );
20001780:	68fb      	ldr	r3, [r7, #12]
20001782:	891b      	ldrh	r3, [r3, #8]
20001784:	b21b      	sxth	r3, r3
20001786:	4618      	mov	r0, r3
20001788:	f7ff fc82 	bl	20001090 <NVIC_EnableIRQ>
    }
}
2000178c:	f107 0710 	add.w	r7, r7, #16
20001790:	46bd      	mov	sp, r7
20001792:	bd80      	pop	{r7, pc}

20001794 <UART0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART0_IRQHandler( void )
#else
void UART0_IRQHandler( void )
#endif
{
20001794:	4668      	mov	r0, sp
20001796:	f020 0107 	bic.w	r1, r0, #7
2000179a:	468d      	mov	sp, r1
2000179c:	b589      	push	{r0, r3, r7, lr}
2000179e:	af00      	add	r7, sp, #0
    MSS_UART_isr( &g_mss_uart0 );
200017a0:	f643 0094 	movw	r0, #14484	; 0x3894
200017a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
200017a8:	f7ff fe8e 	bl	200014c8 <MSS_UART_isr>
    NVIC_ClearPendingIRQ( UART0_IRQn );
200017ac:	f04f 000a 	mov.w	r0, #10
200017b0:	f7ff fc8a 	bl	200010c8 <NVIC_ClearPendingIRQ>
}
200017b4:	46bd      	mov	sp, r7
200017b6:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200017ba:	4685      	mov	sp, r0
200017bc:	4770      	bx	lr
200017be:	bf00      	nop

200017c0 <UART1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART1_IRQHandler( void )
#else
void UART1_IRQHandler( void )
#endif
{
200017c0:	4668      	mov	r0, sp
200017c2:	f020 0107 	bic.w	r1, r0, #7
200017c6:	468d      	mov	sp, r1
200017c8:	b589      	push	{r0, r3, r7, lr}
200017ca:	af00      	add	r7, sp, #0
    MSS_UART_isr( &g_mss_uart1 );
200017cc:	f643 006c 	movw	r0, #14444	; 0x386c
200017d0:	f2c2 0000 	movt	r0, #8192	; 0x2000
200017d4:	f7ff fe78 	bl	200014c8 <MSS_UART_isr>
    NVIC_ClearPendingIRQ( UART1_IRQn );
200017d8:	f04f 000b 	mov.w	r0, #11
200017dc:	f7ff fc74 	bl	200010c8 <NVIC_ClearPendingIRQ>
}
200017e0:	46bd      	mov	sp, r7
200017e2:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200017e6:	4685      	mov	sp, r0
200017e8:	4770      	bx	lr
200017ea:	bf00      	nop

200017ec <NVIC_EnableIRQ>:
 *
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
200017ec:	b480      	push	{r7}
200017ee:	b083      	sub	sp, #12
200017f0:	af00      	add	r7, sp, #0
200017f2:	4603      	mov	r3, r0
200017f4:	80fb      	strh	r3, [r7, #6]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
200017f6:	f24e 1300 	movw	r3, #57600	; 0xe100
200017fa:	f2ce 0300 	movt	r3, #57344	; 0xe000
200017fe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20001802:	ea4f 1252 	mov.w	r2, r2, lsr #5
20001806:	88f9      	ldrh	r1, [r7, #6]
20001808:	f001 011f 	and.w	r1, r1, #31
2000180c:	f04f 0001 	mov.w	r0, #1
20001810:	fa00 f101 	lsl.w	r1, r0, r1
20001814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20001818:	f107 070c 	add.w	r7, r7, #12
2000181c:	46bd      	mov	sp, r7
2000181e:	bc80      	pop	{r7}
20001820:	4770      	bx	lr
20001822:	bf00      	nop

20001824 <NVIC_DisableIRQ>:
 * 
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
20001824:	b480      	push	{r7}
20001826:	b083      	sub	sp, #12
20001828:	af00      	add	r7, sp, #0
2000182a:	4603      	mov	r3, r0
2000182c:	80fb      	strh	r3, [r7, #6]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
2000182e:	f24e 1300 	movw	r3, #57600	; 0xe100
20001832:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001836:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
2000183a:	ea4f 1252 	mov.w	r2, r2, lsr #5
2000183e:	88f9      	ldrh	r1, [r7, #6]
20001840:	f001 011f 	and.w	r1, r1, #31
20001844:	f04f 0001 	mov.w	r0, #1
20001848:	fa00 f101 	lsl.w	r1, r0, r1
2000184c:	f102 0220 	add.w	r2, r2, #32
20001850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20001854:	f107 070c 	add.w	r7, r7, #12
20001858:	46bd      	mov	sp, r7
2000185a:	bc80      	pop	{r7}
2000185c:	4770      	bx	lr
2000185e:	bf00      	nop

20001860 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20001860:	b480      	push	{r7}
20001862:	b083      	sub	sp, #12
20001864:	af00      	add	r7, sp, #0
20001866:	4603      	mov	r3, r0
20001868:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
2000186a:	f24e 1300 	movw	r3, #57600	; 0xe100
2000186e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001872:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20001876:	ea4f 1252 	mov.w	r2, r2, lsr #5
2000187a:	88f9      	ldrh	r1, [r7, #6]
2000187c:	f001 011f 	and.w	r1, r1, #31
20001880:	f04f 0001 	mov.w	r0, #1
20001884:	fa00 f101 	lsl.w	r1, r0, r1
20001888:	f102 0260 	add.w	r2, r2, #96	; 0x60
2000188c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20001890:	f107 070c 	add.w	r7, r7, #12
20001894:	46bd      	mov	sp, r7
20001896:	bc80      	pop	{r7}
20001898:	4770      	bx	lr
2000189a:	bf00      	nop

2000189c <MSS_SPI_init>:
 */
void MSS_SPI_init
(
    mss_spi_instance_t * this_spi
)
{
2000189c:	b580      	push	{r7, lr}
2000189e:	b084      	sub	sp, #16
200018a0:	af00      	add	r7, sp, #0
200018a2:	6078      	str	r0, [r7, #4]
    uint16_t slave;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
200018a4:	687a      	ldr	r2, [r7, #4]
200018a6:	f643 1340 	movw	r3, #14656	; 0x3940
200018aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200018ae:	429a      	cmp	r2, r3
200018b0:	d007      	beq.n	200018c2 <MSS_SPI_init+0x26>
200018b2:	687a      	ldr	r2, [r7, #4]
200018b4:	f643 03bc 	movw	r3, #14524	; 0x38bc
200018b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200018bc:	429a      	cmp	r2, r3
200018be:	d000      	beq.n	200018c2 <MSS_SPI_init+0x26>
200018c0:	be00      	bkpt	0x0000
     * Initialize SPI driver instance data. Relies on the majority
     * of data requiring 0 for initial state so we just need to fill
     * with 0s and finish off with a small number of non zero values.
     */
    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
200018c2:	687b      	ldr	r3, [r7, #4]
200018c4:	889b      	ldrh	r3, [r3, #4]
200018c6:	b21b      	sxth	r3, r3
200018c8:	4618      	mov	r0, r3
200018ca:	f7ff ffab 	bl	20001824 <NVIC_DisableIRQ>

    memset(this_spi, 0, sizeof(mss_spi_instance_t));
200018ce:	6878      	ldr	r0, [r7, #4]
200018d0:	f04f 0100 	mov.w	r1, #0
200018d4:	f04f 0284 	mov.w	r2, #132	; 0x84
200018d8:	f001 fd9a 	bl	20003410 <memset>
    
    this_spi->cmd_done = 1u;
200018dc:	687b      	ldr	r3, [r7, #4]
200018de:	f04f 0201 	mov.w	r2, #1
200018e2:	625a      	str	r2, [r3, #36]	; 0x24

    for(slave = 0u; slave < (uint16_t)MSS_SPI_MAX_NB_OF_SLAVES; ++slave)
200018e4:	f04f 0300 	mov.w	r3, #0
200018e8:	81fb      	strh	r3, [r7, #14]
200018ea:	e00d      	b.n	20001908 <MSS_SPI_init+0x6c>
    {
        this_spi->slaves_cfg[slave].ctrl_reg = NOT_CONFIGURED;
200018ec:	89fb      	ldrh	r3, [r7, #14]
200018ee:	687a      	ldr	r2, [r7, #4]
200018f0:	f103 0306 	add.w	r3, r3, #6
200018f4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
200018f8:	4413      	add	r3, r2
200018fa:	f04f 32ff 	mov.w	r2, #4294967295
200018fe:	605a      	str	r2, [r3, #4]

    memset(this_spi, 0, sizeof(mss_spi_instance_t));
    
    this_spi->cmd_done = 1u;

    for(slave = 0u; slave < (uint16_t)MSS_SPI_MAX_NB_OF_SLAVES; ++slave)
20001900:	89fb      	ldrh	r3, [r7, #14]
20001902:	f103 0301 	add.w	r3, r3, #1
20001906:	81fb      	strh	r3, [r7, #14]
20001908:	89fb      	ldrh	r3, [r7, #14]
2000190a:	2b07      	cmp	r3, #7
2000190c:	d9ee      	bls.n	200018ec <MSS_SPI_init+0x50>
    {
        this_spi->slaves_cfg[slave].ctrl_reg = NOT_CONFIGURED;
    }

    if(this_spi == &g_mss_spi0)
2000190e:	687a      	ldr	r2, [r7, #4]
20001910:	f643 1340 	movw	r3, #14656	; 0x3940
20001914:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001918:	429a      	cmp	r2, r3
2000191a:	d126      	bne.n	2000196a <MSS_SPI_init+0xce>
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI0_BASE);
2000191c:	687a      	ldr	r2, [r7, #4]
2000191e:	f241 0300 	movw	r3, #4096	; 0x1000
20001922:	f2c4 0300 	movt	r3, #16384	; 0x4000
20001926:	6013      	str	r3, [r2, #0]
        this_spi->irqn = SPI0_IRQn;
20001928:	687b      	ldr	r3, [r7, #4]
2000192a:	f04f 020c 	mov.w	r2, #12
2000192e:	809a      	strh	r2, [r3, #4]

        /* reset SPI0 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI0_SOFTRESET_MASK;
20001930:	f242 0300 	movw	r3, #8192	; 0x2000
20001934:	f2ce 0304 	movt	r3, #57348	; 0xe004
20001938:	f242 0200 	movw	r2, #8192	; 0x2000
2000193c:	f2ce 0204 	movt	r2, #57348	; 0xe004
20001940:	6b12      	ldr	r2, [r2, #48]	; 0x30
20001942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
20001946:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended SPI0 interrupt */
        NVIC_ClearPendingIRQ(SPI0_IRQn);
20001948:	f04f 000c 	mov.w	r0, #12
2000194c:	f7ff ff88 	bl	20001860 <NVIC_ClearPendingIRQ>
        /* Take SPI0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI0_SOFTRESET_MASK;
20001950:	f242 0300 	movw	r3, #8192	; 0x2000
20001954:	f2ce 0304 	movt	r3, #57348	; 0xe004
20001958:	f242 0200 	movw	r2, #8192	; 0x2000
2000195c:	f2ce 0204 	movt	r2, #57348	; 0xe004
20001960:	6b12      	ldr	r2, [r2, #48]	; 0x30
20001962:	f422 7200 	bic.w	r2, r2, #512	; 0x200
20001966:	631a      	str	r2, [r3, #48]	; 0x30
20001968:	e025      	b.n	200019b6 <MSS_SPI_init+0x11a>
    }
    else
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI1_BASE);
2000196a:	687a      	ldr	r2, [r7, #4]
2000196c:	f241 0300 	movw	r3, #4096	; 0x1000
20001970:	f2c4 0301 	movt	r3, #16385	; 0x4001
20001974:	6013      	str	r3, [r2, #0]
        this_spi->irqn = SPI1_IRQn;
20001976:	687b      	ldr	r3, [r7, #4]
20001978:	f04f 020d 	mov.w	r2, #13
2000197c:	809a      	strh	r2, [r3, #4]
        
        /* reset SPI1 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI1_SOFTRESET_MASK;
2000197e:	f242 0300 	movw	r3, #8192	; 0x2000
20001982:	f2ce 0304 	movt	r3, #57348	; 0xe004
20001986:	f242 0200 	movw	r2, #8192	; 0x2000
2000198a:	f2ce 0204 	movt	r2, #57348	; 0xe004
2000198e:	6b12      	ldr	r2, [r2, #48]	; 0x30
20001990:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
20001994:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended SPI1 interrupt */
        NVIC_ClearPendingIRQ(SPI1_IRQn);
20001996:	f04f 000d 	mov.w	r0, #13
2000199a:	f7ff ff61 	bl	20001860 <NVIC_ClearPendingIRQ>
        /* Take SPI1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI1_SOFTRESET_MASK;
2000199e:	f242 0300 	movw	r3, #8192	; 0x2000
200019a2:	f2ce 0304 	movt	r3, #57348	; 0xe004
200019a6:	f242 0200 	movw	r2, #8192	; 0x2000
200019aa:	f2ce 0204 	movt	r2, #57348	; 0xe004
200019ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
200019b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
200019b4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* De-assert reset bit. */
    this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
200019b6:	687b      	ldr	r3, [r7, #4]
200019b8:	681b      	ldr	r3, [r3, #0]
200019ba:	687a      	ldr	r2, [r7, #4]
200019bc:	6812      	ldr	r2, [r2, #0]
200019be:	6812      	ldr	r2, [r2, #0]
200019c0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
200019c4:	601a      	str	r2, [r3, #0]
}
200019c6:	f107 0710 	add.w	r7, r7, #16
200019ca:	46bd      	mov	sp, r7
200019cc:	bd80      	pop	{r7, pc}
200019ce:	bf00      	nop

200019d0 <recover_from_rx_overflow>:
 */
static void recover_from_rx_overflow
(
    mss_spi_instance_t * this_spi
)
{
200019d0:	b580      	push	{r7, lr}
200019d2:	b08a      	sub	sp, #40	; 0x28
200019d4:	af00      	add	r7, sp, #0
200019d6:	6078      	str	r0, [r7, #4]
    uint32_t slave_select;
    
    /*
     * Read current SPI hardware block configuration.
     */
    control_reg = this_spi->hw_reg->CONTROL;
200019d8:	687b      	ldr	r3, [r7, #4]
200019da:	681b      	ldr	r3, [r3, #0]
200019dc:	681b      	ldr	r3, [r3, #0]
200019de:	60fb      	str	r3, [r7, #12]
    clk_gen = this_spi->hw_reg->CLK_GEN;
200019e0:	687b      	ldr	r3, [r7, #4]
200019e2:	681b      	ldr	r3, [r3, #0]
200019e4:	699b      	ldr	r3, [r3, #24]
200019e6:	613b      	str	r3, [r7, #16]
    frame_size = this_spi->hw_reg->TXRXDF_SIZE;
200019e8:	687b      	ldr	r3, [r7, #4]
200019ea:	681b      	ldr	r3, [r3, #0]
200019ec:	685b      	ldr	r3, [r3, #4]
200019ee:	617b      	str	r3, [r7, #20]
    control2 = this_spi->hw_reg->CONTROL2;
200019f0:	687b      	ldr	r3, [r7, #4]
200019f2:	681b      	ldr	r3, [r3, #0]
200019f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
200019f6:	61bb      	str	r3, [r7, #24]
    packet_size = this_spi->hw_reg->PKTSIZE;
200019f8:	687b      	ldr	r3, [r7, #4]
200019fa:	681b      	ldr	r3, [r3, #0]
200019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200019fe:	61fb      	str	r3, [r7, #28]
    cmd_size = this_spi->hw_reg->CMDSIZE;
20001a00:	687b      	ldr	r3, [r7, #4]
20001a02:	681b      	ldr	r3, [r3, #0]
20001a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20001a06:	623b      	str	r3, [r7, #32]
    slave_select = this_spi->hw_reg->SLAVE_SELECT;
20001a08:	687b      	ldr	r3, [r7, #4]
20001a0a:	681b      	ldr	r3, [r3, #0]
20001a0c:	69db      	ldr	r3, [r3, #28]
20001a0e:	627b      	str	r3, [r7, #36]	; 0x24
     
    /*
     * Reset the SPI hardware block.
     */
    if(this_spi == &g_mss_spi0)
20001a10:	687a      	ldr	r2, [r7, #4]
20001a12:	f643 1340 	movw	r3, #14656	; 0x3940
20001a16:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001a1a:	429a      	cmp	r2, r3
20001a1c:	d12e      	bne.n	20001a7c <recover_from_rx_overflow+0xac>
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI0_BASE);
20001a1e:	687a      	ldr	r2, [r7, #4]
20001a20:	f241 0300 	movw	r3, #4096	; 0x1000
20001a24:	f2c4 0300 	movt	r3, #16384	; 0x4000
20001a28:	6013      	str	r3, [r2, #0]
        this_spi->irqn = SPI0_IRQn;
20001a2a:	687b      	ldr	r3, [r7, #4]
20001a2c:	f04f 020c 	mov.w	r2, #12
20001a30:	809a      	strh	r2, [r3, #4]

        /* reset SPI0 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI0_SOFTRESET_MASK;
20001a32:	f242 0300 	movw	r3, #8192	; 0x2000
20001a36:	f2ce 0304 	movt	r3, #57348	; 0xe004
20001a3a:	f242 0200 	movw	r2, #8192	; 0x2000
20001a3e:	f2ce 0204 	movt	r2, #57348	; 0xe004
20001a42:	6b12      	ldr	r2, [r2, #48]	; 0x30
20001a44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
20001a48:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended SPI0 interrupt */
        NVIC_ClearPendingIRQ(SPI0_IRQn);
20001a4a:	f04f 000c 	mov.w	r0, #12
20001a4e:	f7ff ff07 	bl	20001860 <NVIC_ClearPendingIRQ>
        /* Take SPI0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI0_SOFTRESET_MASK;
20001a52:	f242 0300 	movw	r3, #8192	; 0x2000
20001a56:	f2ce 0304 	movt	r3, #57348	; 0xe004
20001a5a:	f242 0200 	movw	r2, #8192	; 0x2000
20001a5e:	f2ce 0204 	movt	r2, #57348	; 0xe004
20001a62:	6b12      	ldr	r2, [r2, #48]	; 0x30
20001a64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
20001a68:	631a      	str	r2, [r3, #48]	; 0x30

        this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
20001a6a:	687b      	ldr	r3, [r7, #4]
20001a6c:	681b      	ldr	r3, [r3, #0]
20001a6e:	687a      	ldr	r2, [r7, #4]
20001a70:	6812      	ldr	r2, [r2, #0]
20001a72:	6812      	ldr	r2, [r2, #0]
20001a74:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
20001a78:	601a      	str	r2, [r3, #0]
20001a7a:	e02d      	b.n	20001ad8 <recover_from_rx_overflow+0x108>
    }
    else
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI1_BASE);
20001a7c:	687a      	ldr	r2, [r7, #4]
20001a7e:	f241 0300 	movw	r3, #4096	; 0x1000
20001a82:	f2c4 0301 	movt	r3, #16385	; 0x4001
20001a86:	6013      	str	r3, [r2, #0]
        this_spi->irqn = SPI1_IRQn;
20001a88:	687b      	ldr	r3, [r7, #4]
20001a8a:	f04f 020d 	mov.w	r2, #13
20001a8e:	809a      	strh	r2, [r3, #4]
        
        /* reset SPI1 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI1_SOFTRESET_MASK;
20001a90:	f242 0300 	movw	r3, #8192	; 0x2000
20001a94:	f2ce 0304 	movt	r3, #57348	; 0xe004
20001a98:	f242 0200 	movw	r2, #8192	; 0x2000
20001a9c:	f2ce 0204 	movt	r2, #57348	; 0xe004
20001aa0:	6b12      	ldr	r2, [r2, #48]	; 0x30
20001aa2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
20001aa6:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended SPI1 interrupt */
        NVIC_ClearPendingIRQ(SPI1_IRQn);
20001aa8:	f04f 000d 	mov.w	r0, #13
20001aac:	f7ff fed8 	bl	20001860 <NVIC_ClearPendingIRQ>
        /* Take SPI1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI1_SOFTRESET_MASK;
20001ab0:	f242 0300 	movw	r3, #8192	; 0x2000
20001ab4:	f2ce 0304 	movt	r3, #57348	; 0xe004
20001ab8:	f242 0200 	movw	r2, #8192	; 0x2000
20001abc:	f2ce 0204 	movt	r2, #57348	; 0xe004
20001ac0:	6b12      	ldr	r2, [r2, #48]	; 0x30
20001ac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
20001ac6:	631a      	str	r2, [r3, #48]	; 0x30
        
        this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
20001ac8:	687b      	ldr	r3, [r7, #4]
20001aca:	681b      	ldr	r3, [r3, #0]
20001acc:	687a      	ldr	r2, [r7, #4]
20001ace:	6812      	ldr	r2, [r2, #0]
20001ad0:	6812      	ldr	r2, [r2, #0]
20001ad2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
20001ad6:	601a      	str	r2, [r3, #0]
    }
    
    /*
     * Restore SPI hardware block configuration.
     */
    control_reg &= ~(uint32_t)CTRL_ENABLE_MASK;
20001ad8:	68fb      	ldr	r3, [r7, #12]
20001ada:	f023 0301 	bic.w	r3, r3, #1
20001ade:	60fb      	str	r3, [r7, #12]
    this_spi->hw_reg->CONTROL = control_reg;
20001ae0:	687b      	ldr	r3, [r7, #4]
20001ae2:	681b      	ldr	r3, [r3, #0]
20001ae4:	68fa      	ldr	r2, [r7, #12]
20001ae6:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CLK_GEN = clk_gen;
20001ae8:	687b      	ldr	r3, [r7, #4]
20001aea:	681b      	ldr	r3, [r3, #0]
20001aec:	693a      	ldr	r2, [r7, #16]
20001aee:	619a      	str	r2, [r3, #24]
    this_spi->hw_reg->TXRXDF_SIZE = frame_size;
20001af0:	687b      	ldr	r3, [r7, #4]
20001af2:	681b      	ldr	r3, [r3, #0]
20001af4:	697a      	ldr	r2, [r7, #20]
20001af6:	605a      	str	r2, [r3, #4]
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
20001af8:	687b      	ldr	r3, [r7, #4]
20001afa:	681b      	ldr	r3, [r3, #0]
20001afc:	687a      	ldr	r2, [r7, #4]
20001afe:	6812      	ldr	r2, [r2, #0]
20001b00:	6812      	ldr	r2, [r2, #0]
20001b02:	f042 0201 	orr.w	r2, r2, #1
20001b06:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CONTROL2 = control2;
20001b08:	687b      	ldr	r3, [r7, #4]
20001b0a:	681b      	ldr	r3, [r3, #0]
20001b0c:	69ba      	ldr	r2, [r7, #24]
20001b0e:	629a      	str	r2, [r3, #40]	; 0x28
    this_spi->hw_reg->PKTSIZE = packet_size;
20001b10:	687b      	ldr	r3, [r7, #4]
20001b12:	681b      	ldr	r3, [r3, #0]
20001b14:	69fa      	ldr	r2, [r7, #28]
20001b16:	631a      	str	r2, [r3, #48]	; 0x30
    this_spi->hw_reg->CMDSIZE = cmd_size;
20001b18:	687b      	ldr	r3, [r7, #4]
20001b1a:	681b      	ldr	r3, [r3, #0]
20001b1c:	6a3a      	ldr	r2, [r7, #32]
20001b1e:	635a      	str	r2, [r3, #52]	; 0x34
    this_spi->hw_reg->SLAVE_SELECT = slave_select;
20001b20:	687b      	ldr	r3, [r7, #4]
20001b22:	681b      	ldr	r3, [r3, #0]
20001b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001b26:	61da      	str	r2, [r3, #28]
}
20001b28:	f107 0728 	add.w	r7, r7, #40	; 0x28
20001b2c:	46bd      	mov	sp, r7
20001b2e:	bd80      	pop	{r7, pc}

20001b30 <MSS_SPI_configure_master_mode>:
    mss_spi_slave_t         slave,
    mss_spi_protocol_mode_t protocol_mode,
    mss_spi_pclk_div_t      clk_rate,
    uint8_t                 frame_bit_length
)
{
20001b30:	b580      	push	{r7, lr}
20001b32:	b084      	sub	sp, #16
20001b34:	af00      	add	r7, sp, #0
20001b36:	60f8      	str	r0, [r7, #12]
20001b38:	607a      	str	r2, [r7, #4]
20001b3a:	460a      	mov	r2, r1
20001b3c:	72fa      	strb	r2, [r7, #11]
20001b3e:	70fb      	strb	r3, [r7, #3]
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20001b40:	68fa      	ldr	r2, [r7, #12]
20001b42:	f643 1340 	movw	r3, #14656	; 0x3940
20001b46:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001b4a:	429a      	cmp	r2, r3
20001b4c:	d007      	beq.n	20001b5e <MSS_SPI_configure_master_mode+0x2e>
20001b4e:	68fa      	ldr	r2, [r7, #12]
20001b50:	f643 03bc 	movw	r3, #14524	; 0x38bc
20001b54:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001b58:	429a      	cmp	r2, r3
20001b5a:	d000      	beq.n	20001b5e <MSS_SPI_configure_master_mode+0x2e>
20001b5c:	be00      	bkpt	0x0000
    ASSERT(slave < MSS_SPI_MAX_NB_OF_SLAVES);
20001b5e:	7afb      	ldrb	r3, [r7, #11]
20001b60:	2b07      	cmp	r3, #7
20001b62:	d900      	bls.n	20001b66 <MSS_SPI_configure_master_mode+0x36>
20001b64:	be00      	bkpt	0x0000
    ASSERT(frame_bit_length <= MAX_FRAME_LENGTH);
20001b66:	7e3b      	ldrb	r3, [r7, #24]
20001b68:	2b20      	cmp	r3, #32
20001b6a:	d900      	bls.n	20001b6e <MSS_SPI_configure_master_mode+0x3e>
20001b6c:	be00      	bkpt	0x0000
    
    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
20001b6e:	68fb      	ldr	r3, [r7, #12]
20001b70:	889b      	ldrh	r3, [r3, #4]
20001b72:	b21b      	sxth	r3, r3
20001b74:	4618      	mov	r0, r3
20001b76:	f7ff fe55 	bl	20001824 <NVIC_DisableIRQ>

    /* Reset slave transfer mode to unknown to wipe slate clean */
    this_spi->slave_xfer_mode = MSS_SPI_SLAVE_XFER_NONE;
20001b7a:	68fb      	ldr	r3, [r7, #12]
20001b7c:	f04f 0200 	mov.w	r2, #0
20001b80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set the mode. */
    this_spi->hw_reg->CONTROL &= ~(uint32_t)CTRL_ENABLE_MASK;
20001b84:	68fb      	ldr	r3, [r7, #12]
20001b86:	681b      	ldr	r3, [r3, #0]
20001b88:	68fa      	ldr	r2, [r7, #12]
20001b8a:	6812      	ldr	r2, [r2, #0]
20001b8c:	6812      	ldr	r2, [r2, #0]
20001b8e:	f022 0201 	bic.w	r2, r2, #1
20001b92:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CONTROL |= CTRL_MASTER_MASK;
20001b94:	68fb      	ldr	r3, [r7, #12]
20001b96:	681b      	ldr	r3, [r3, #0]
20001b98:	68fa      	ldr	r2, [r7, #12]
20001b9a:	6812      	ldr	r2, [r2, #0]
20001b9c:	6812      	ldr	r2, [r2, #0]
20001b9e:	f042 0202 	orr.w	r2, r2, #2
20001ba2:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
20001ba4:	68fb      	ldr	r3, [r7, #12]
20001ba6:	681b      	ldr	r3, [r3, #0]
20001ba8:	68fa      	ldr	r2, [r7, #12]
20001baa:	6812      	ldr	r2, [r2, #0]
20001bac:	6812      	ldr	r2, [r2, #0]
20001bae:	f042 0201 	orr.w	r2, r2, #1
20001bb2:	601a      	str	r2, [r3, #0]
    /*
     * Keep track of the required register configuration for this slave. These
     * values will be used by the MSS_SPI_set_slave_select() function to configure
     * the master to match the slave being selected.
     */
    if(slave < MSS_SPI_MAX_NB_OF_SLAVES)     
20001bb4:	7afb      	ldrb	r3, [r7, #11]
20001bb6:	2b07      	cmp	r3, #7
20001bb8:	d83f      	bhi.n	20001c3a <MSS_SPI_configure_master_mode+0x10a>
         *
         * We only do it for Motorola modes and if you need the slave selected
         * deselected between frames in modes 0 or 2 then remove SPS_MASK from
         * below.
         */
        if((MSS_SPI_MODE0 == protocol_mode) || (MSS_SPI_MODE1 == protocol_mode) ||
20001bba:	687b      	ldr	r3, [r7, #4]
20001bbc:	2b00      	cmp	r3, #0
20001bbe:	d00b      	beq.n	20001bd8 <MSS_SPI_configure_master_mode+0xa8>
20001bc0:	687b      	ldr	r3, [r7, #4]
20001bc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
20001bc6:	d007      	beq.n	20001bd8 <MSS_SPI_configure_master_mode+0xa8>
20001bc8:	687b      	ldr	r3, [r7, #4]
20001bca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
20001bce:	d003      	beq.n	20001bd8 <MSS_SPI_configure_master_mode+0xa8>
20001bd0:	687b      	ldr	r3, [r7, #4]
20001bd2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
20001bd6:	d10f      	bne.n	20001bf8 <MSS_SPI_configure_master_mode+0xc8>
           (MSS_SPI_MODE2 == protocol_mode) || (MSS_SPI_MODE3 == protocol_mode))
        {
            this_spi->slaves_cfg[slave].ctrl_reg = MASTER_MODE_MASK | SPS_MASK |
20001bd8:	7afa      	ldrb	r2, [r7, #11]
20001bda:	6879      	ldr	r1, [r7, #4]
20001bdc:	f240 1302 	movw	r3, #258	; 0x102
20001be0:	f2c2 4300 	movt	r3, #9216	; 0x2400
20001be4:	ea41 0303 	orr.w	r3, r1, r3
20001be8:	68f9      	ldr	r1, [r7, #12]
20001bea:	f102 0206 	add.w	r2, r2, #6
20001bee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
20001bf2:	440a      	add	r2, r1
20001bf4:	6053      	str	r3, [r2, #4]
         *
         * We only do it for Motorola modes and if you need the slave selected
         * deselected between frames in modes 0 or 2 then remove SPS_MASK from
         * below.
         */
        if((MSS_SPI_MODE0 == protocol_mode) || (MSS_SPI_MODE1 == protocol_mode) ||
20001bf6:	e00e      	b.n	20001c16 <MSS_SPI_configure_master_mode+0xe6>
                                                   (uint32_t)protocol_mode | 
                                                   ((uint32_t)1 << TXRXDFCOUNT_SHIFT);
        }
        else
        {
            this_spi->slaves_cfg[slave].ctrl_reg = MASTER_MODE_MASK |
20001bf8:	7afa      	ldrb	r2, [r7, #11]
20001bfa:	6879      	ldr	r1, [r7, #4]
20001bfc:	f240 1302 	movw	r3, #258	; 0x102
20001c00:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001c04:	ea41 0303 	orr.w	r3, r1, r3
20001c08:	68f9      	ldr	r1, [r7, #12]
20001c0a:	f102 0206 	add.w	r2, r2, #6
20001c0e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
20001c12:	440a      	add	r2, r1
20001c14:	6053      	str	r3, [r2, #4]
                                                   BIGFIFO_MASK |
                                                   (uint32_t)protocol_mode | 
                                                   ((uint32_t)1 << TXRXDFCOUNT_SHIFT);
        }
        
        this_spi->slaves_cfg[slave].txrxdf_size_reg = frame_bit_length;
20001c16:	7afb      	ldrb	r3, [r7, #11]
20001c18:	68fa      	ldr	r2, [r7, #12]
20001c1a:	f103 0306 	add.w	r3, r3, #6
20001c1e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20001c22:	4413      	add	r3, r2
20001c24:	7e3a      	ldrb	r2, [r7, #24]
20001c26:	721a      	strb	r2, [r3, #8]
        this_spi->slaves_cfg[slave].clk_gen = (uint8_t)clk_rate;
20001c28:	7afb      	ldrb	r3, [r7, #11]
20001c2a:	68fa      	ldr	r2, [r7, #12]
20001c2c:	f103 0306 	add.w	r3, r3, #6
20001c30:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20001c34:	4413      	add	r3, r2
20001c36:	78fa      	ldrb	r2, [r7, #3]
20001c38:	725a      	strb	r2, [r3, #9]
    }
    /* Reenable interrupts */
    NVIC_EnableIRQ( this_spi->irqn );
20001c3a:	68fb      	ldr	r3, [r7, #12]
20001c3c:	889b      	ldrh	r3, [r3, #4]
20001c3e:	b21b      	sxth	r3, r3
20001c40:	4618      	mov	r0, r3
20001c42:	f7ff fdd3 	bl	200017ec <NVIC_EnableIRQ>
}
20001c46:	f107 0710 	add.w	r7, r7, #16
20001c4a:	46bd      	mov	sp, r7
20001c4c:	bd80      	pop	{r7, pc}
20001c4e:	bf00      	nop

20001c50 <MSS_SPI_set_slave_select>:
void MSS_SPI_set_slave_select
(
    mss_spi_instance_t * this_spi,
    mss_spi_slave_t slave
)
{
20001c50:	b580      	push	{r7, lr}
20001c52:	b084      	sub	sp, #16
20001c54:	af00      	add	r7, sp, #0
20001c56:	6078      	str	r0, [r7, #4]
20001c58:	460b      	mov	r3, r1
20001c5a:	70fb      	strb	r3, [r7, #3]
    uint32_t rx_overflow;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20001c5c:	687a      	ldr	r2, [r7, #4]
20001c5e:	f643 1340 	movw	r3, #14656	; 0x3940
20001c62:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001c66:	429a      	cmp	r2, r3
20001c68:	d007      	beq.n	20001c7a <MSS_SPI_set_slave_select+0x2a>
20001c6a:	687a      	ldr	r2, [r7, #4]
20001c6c:	f643 03bc 	movw	r3, #14524	; 0x38bc
20001c70:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001c74:	429a      	cmp	r2, r3
20001c76:	d000      	beq.n	20001c7a <MSS_SPI_set_slave_select+0x2a>
20001c78:	be00      	bkpt	0x0000
    
    /* This function is only intended to be used with an SPI master. */
    ASSERT((this_spi->hw_reg->CONTROL & CTRL_MASTER_MASK) == CTRL_MASTER_MASK);
20001c7a:	687b      	ldr	r3, [r7, #4]
20001c7c:	681b      	ldr	r3, [r3, #0]
20001c7e:	681b      	ldr	r3, [r3, #0]
20001c80:	f003 0302 	and.w	r3, r3, #2
20001c84:	2b00      	cmp	r3, #0
20001c86:	d100      	bne.n	20001c8a <MSS_SPI_set_slave_select+0x3a>
20001c88:	be00      	bkpt	0x0000
    
    ASSERT(this_spi->slaves_cfg[slave].ctrl_reg != NOT_CONFIGURED);
20001c8a:	78fb      	ldrb	r3, [r7, #3]
20001c8c:	687a      	ldr	r2, [r7, #4]
20001c8e:	f103 0306 	add.w	r3, r3, #6
20001c92:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20001c96:	4413      	add	r3, r2
20001c98:	685b      	ldr	r3, [r3, #4]
20001c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
20001c9e:	d100      	bne.n	20001ca2 <MSS_SPI_set_slave_select+0x52>
20001ca0:	be00      	bkpt	0x0000

    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
20001ca2:	687b      	ldr	r3, [r7, #4]
20001ca4:	889b      	ldrh	r3, [r3, #4]
20001ca6:	b21b      	sxth	r3, r3
20001ca8:	4618      	mov	r0, r3
20001caa:	f7ff fdbb 	bl	20001824 <NVIC_DisableIRQ>

    /* Recover from receive overflow. */
    rx_overflow = this_spi->hw_reg->STATUS & RX_OVERFLOW_MASK;
20001cae:	687b      	ldr	r3, [r7, #4]
20001cb0:	681b      	ldr	r3, [r3, #0]
20001cb2:	689b      	ldr	r3, [r3, #8]
20001cb4:	f003 0304 	and.w	r3, r3, #4
20001cb8:	60fb      	str	r3, [r7, #12]
    if(rx_overflow)
20001cba:	68fb      	ldr	r3, [r7, #12]
20001cbc:	2b00      	cmp	r3, #0
20001cbe:	d002      	beq.n	20001cc6 <MSS_SPI_set_slave_select+0x76>
    {
         recover_from_rx_overflow(this_spi);
20001cc0:	6878      	ldr	r0, [r7, #4]
20001cc2:	f7ff fe85 	bl	200019d0 <recover_from_rx_overflow>
    }
    
    /* Set the clock rate. */
    this_spi->hw_reg->CONTROL &= ~(uint32_t)CTRL_ENABLE_MASK;
20001cc6:	687b      	ldr	r3, [r7, #4]
20001cc8:	681b      	ldr	r3, [r3, #0]
20001cca:	687a      	ldr	r2, [r7, #4]
20001ccc:	6812      	ldr	r2, [r2, #0]
20001cce:	6812      	ldr	r2, [r2, #0]
20001cd0:	f022 0201 	bic.w	r2, r2, #1
20001cd4:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CONTROL = this_spi->slaves_cfg[slave].ctrl_reg;
20001cd6:	687b      	ldr	r3, [r7, #4]
20001cd8:	681a      	ldr	r2, [r3, #0]
20001cda:	78fb      	ldrb	r3, [r7, #3]
20001cdc:	6879      	ldr	r1, [r7, #4]
20001cde:	f103 0306 	add.w	r3, r3, #6
20001ce2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20001ce6:	440b      	add	r3, r1
20001ce8:	685b      	ldr	r3, [r3, #4]
20001cea:	6013      	str	r3, [r2, #0]
    this_spi->hw_reg->CLK_GEN = this_spi->slaves_cfg[slave].clk_gen;
20001cec:	687b      	ldr	r3, [r7, #4]
20001cee:	681a      	ldr	r2, [r3, #0]
20001cf0:	78fb      	ldrb	r3, [r7, #3]
20001cf2:	6879      	ldr	r1, [r7, #4]
20001cf4:	f103 0306 	add.w	r3, r3, #6
20001cf8:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20001cfc:	440b      	add	r3, r1
20001cfe:	7a5b      	ldrb	r3, [r3, #9]
20001d00:	6193      	str	r3, [r2, #24]
    this_spi->hw_reg->TXRXDF_SIZE = this_spi->slaves_cfg[slave].txrxdf_size_reg;
20001d02:	687b      	ldr	r3, [r7, #4]
20001d04:	681a      	ldr	r2, [r3, #0]
20001d06:	78fb      	ldrb	r3, [r7, #3]
20001d08:	6879      	ldr	r1, [r7, #4]
20001d0a:	f103 0306 	add.w	r3, r3, #6
20001d0e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20001d12:	440b      	add	r3, r1
20001d14:	7a1b      	ldrb	r3, [r3, #8]
20001d16:	6053      	str	r3, [r2, #4]
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
20001d18:	687b      	ldr	r3, [r7, #4]
20001d1a:	681b      	ldr	r3, [r3, #0]
20001d1c:	687a      	ldr	r2, [r7, #4]
20001d1e:	6812      	ldr	r2, [r2, #0]
20001d20:	6812      	ldr	r2, [r2, #0]
20001d22:	f042 0201 	orr.w	r2, r2, #1
20001d26:	601a      	str	r2, [r3, #0]
    
    /* Set slave select */
    this_spi->hw_reg->SLAVE_SELECT |= ((uint32_t)1 << (uint32_t)slave);
20001d28:	687b      	ldr	r3, [r7, #4]
20001d2a:	681b      	ldr	r3, [r3, #0]
20001d2c:	687a      	ldr	r2, [r7, #4]
20001d2e:	6812      	ldr	r2, [r2, #0]
20001d30:	69d1      	ldr	r1, [r2, #28]
20001d32:	78fa      	ldrb	r2, [r7, #3]
20001d34:	f04f 0001 	mov.w	r0, #1
20001d38:	fa00 f202 	lsl.w	r2, r0, r2
20001d3c:	ea41 0202 	orr.w	r2, r1, r2
20001d40:	61da      	str	r2, [r3, #28]
    /* Reenable interrupts */
    NVIC_EnableIRQ( this_spi->irqn );
20001d42:	687b      	ldr	r3, [r7, #4]
20001d44:	889b      	ldrh	r3, [r3, #4]
20001d46:	b21b      	sxth	r3, r3
20001d48:	4618      	mov	r0, r3
20001d4a:	f7ff fd4f 	bl	200017ec <NVIC_EnableIRQ>
}
20001d4e:	f107 0710 	add.w	r7, r7, #16
20001d52:	46bd      	mov	sp, r7
20001d54:	bd80      	pop	{r7, pc}
20001d56:	bf00      	nop

20001d58 <MSS_SPI_clear_slave_select>:
void MSS_SPI_clear_slave_select
(
    mss_spi_instance_t * this_spi,
    mss_spi_slave_t slave
)
{
20001d58:	b580      	push	{r7, lr}
20001d5a:	b084      	sub	sp, #16
20001d5c:	af00      	add	r7, sp, #0
20001d5e:	6078      	str	r0, [r7, #4]
20001d60:	460b      	mov	r3, r1
20001d62:	70fb      	strb	r3, [r7, #3]
    uint32_t rx_overflow;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20001d64:	687a      	ldr	r2, [r7, #4]
20001d66:	f643 1340 	movw	r3, #14656	; 0x3940
20001d6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001d6e:	429a      	cmp	r2, r3
20001d70:	d007      	beq.n	20001d82 <MSS_SPI_clear_slave_select+0x2a>
20001d72:	687a      	ldr	r2, [r7, #4]
20001d74:	f643 03bc 	movw	r3, #14524	; 0x38bc
20001d78:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001d7c:	429a      	cmp	r2, r3
20001d7e:	d000      	beq.n	20001d82 <MSS_SPI_clear_slave_select+0x2a>
20001d80:	be00      	bkpt	0x0000
    
    /* This function is only intended to be used with an SPI master. */
    ASSERT((this_spi->hw_reg->CONTROL & CTRL_MASTER_MASK) == CTRL_MASTER_MASK);
20001d82:	687b      	ldr	r3, [r7, #4]
20001d84:	681b      	ldr	r3, [r3, #0]
20001d86:	681b      	ldr	r3, [r3, #0]
20001d88:	f003 0302 	and.w	r3, r3, #2
20001d8c:	2b00      	cmp	r3, #0
20001d8e:	d100      	bne.n	20001d92 <MSS_SPI_clear_slave_select+0x3a>
20001d90:	be00      	bkpt	0x0000

    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
20001d92:	687b      	ldr	r3, [r7, #4]
20001d94:	889b      	ldrh	r3, [r3, #4]
20001d96:	b21b      	sxth	r3, r3
20001d98:	4618      	mov	r0, r3
20001d9a:	f7ff fd43 	bl	20001824 <NVIC_DisableIRQ>

    /* Recover from receive overflow. */
    rx_overflow = this_spi->hw_reg->STATUS & RX_OVERFLOW_MASK;
20001d9e:	687b      	ldr	r3, [r7, #4]
20001da0:	681b      	ldr	r3, [r3, #0]
20001da2:	689b      	ldr	r3, [r3, #8]
20001da4:	f003 0304 	and.w	r3, r3, #4
20001da8:	60fb      	str	r3, [r7, #12]
    if(rx_overflow)
20001daa:	68fb      	ldr	r3, [r7, #12]
20001dac:	2b00      	cmp	r3, #0
20001dae:	d002      	beq.n	20001db6 <MSS_SPI_clear_slave_select+0x5e>
    {
         recover_from_rx_overflow(this_spi);
20001db0:	6878      	ldr	r0, [r7, #4]
20001db2:	f7ff fe0d 	bl	200019d0 <recover_from_rx_overflow>
    }
    
    this_spi->hw_reg->SLAVE_SELECT &= ~((uint32_t)1 << (uint32_t)slave);
20001db6:	687b      	ldr	r3, [r7, #4]
20001db8:	681b      	ldr	r3, [r3, #0]
20001dba:	687a      	ldr	r2, [r7, #4]
20001dbc:	6812      	ldr	r2, [r2, #0]
20001dbe:	69d1      	ldr	r1, [r2, #28]
20001dc0:	78fa      	ldrb	r2, [r7, #3]
20001dc2:	f04f 0001 	mov.w	r0, #1
20001dc6:	fa00 f202 	lsl.w	r2, r0, r2
20001dca:	ea6f 0202 	mvn.w	r2, r2
20001dce:	ea01 0202 	and.w	r2, r1, r2
20001dd2:	61da      	str	r2, [r3, #28]
    /* Reenable interrupts */
    NVIC_EnableIRQ( this_spi->irqn );
20001dd4:	687b      	ldr	r3, [r7, #4]
20001dd6:	889b      	ldrh	r3, [r3, #4]
20001dd8:	b21b      	sxth	r3, r3
20001dda:	4618      	mov	r0, r3
20001ddc:	f7ff fd06 	bl	200017ec <NVIC_EnableIRQ>
}
20001de0:	f107 0710 	add.w	r7, r7, #16
20001de4:	46bd      	mov	sp, r7
20001de6:	bd80      	pop	{r7, pc}

20001de8 <MSS_SPI_transfer_frame>:
uint32_t MSS_SPI_transfer_frame
(
    mss_spi_instance_t * this_spi,
    uint32_t tx_bits
)
{
20001de8:	b480      	push	{r7}
20001dea:	b087      	sub	sp, #28
20001dec:	af00      	add	r7, sp, #0
20001dee:	6078      	str	r0, [r7, #4]
20001df0:	6039      	str	r1, [r7, #0]
    volatile uint32_t dummy;
    uint32_t rx_fifo_empty;
    uint32_t rx_ready;
    uint32_t tx_done;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20001df2:	687a      	ldr	r2, [r7, #4]
20001df4:	f643 1340 	movw	r3, #14656	; 0x3940
20001df8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001dfc:	429a      	cmp	r2, r3
20001dfe:	d007      	beq.n	20001e10 <MSS_SPI_transfer_frame+0x28>
20001e00:	687a      	ldr	r2, [r7, #4]
20001e02:	f643 03bc 	movw	r3, #14524	; 0x38bc
20001e06:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001e0a:	429a      	cmp	r2, r3
20001e0c:	d000      	beq.n	20001e10 <MSS_SPI_transfer_frame+0x28>
20001e0e:	be00      	bkpt	0x0000
    
    /* This function is only intended to be used with an SPI master. */
    ASSERT((this_spi->hw_reg->CONTROL & CTRL_MASTER_MASK) == CTRL_MASTER_MASK);
20001e10:	687b      	ldr	r3, [r7, #4]
20001e12:	681b      	ldr	r3, [r3, #0]
20001e14:	681b      	ldr	r3, [r3, #0]
20001e16:	f003 0302 	and.w	r3, r3, #2
20001e1a:	2b00      	cmp	r3, #0
20001e1c:	d100      	bne.n	20001e20 <MSS_SPI_transfer_frame+0x38>
20001e1e:	be00      	bkpt	0x0000
    
    /* Ensure single frame transfer selected so interrupts work correctly */
    this_spi->hw_reg->CONTROL = (this_spi->hw_reg->CONTROL & ~TXRXDFCOUNT_MASK)
20001e20:	687b      	ldr	r3, [r7, #4]
20001e22:	681a      	ldr	r2, [r3, #0]
20001e24:	687b      	ldr	r3, [r7, #4]
20001e26:	681b      	ldr	r3, [r3, #0]
20001e28:	6819      	ldr	r1, [r3, #0]
20001e2a:	f240 03ff 	movw	r3, #255	; 0xff
20001e2e:	f6cf 7300 	movt	r3, #65280	; 0xff00
20001e32:	ea01 0303 	and.w	r3, r1, r3
20001e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
20001e3a:	6013      	str	r3, [r2, #0]
                                | ((uint32_t)1u << TXRXDFCOUNT_SHIFT);

    /* Flush the Tx and Rx FIFOs. Please note this does not have any effect on A2F200. */
    this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
20001e3c:	687b      	ldr	r3, [r7, #4]
20001e3e:	681b      	ldr	r3, [r3, #0]
20001e40:	687a      	ldr	r2, [r7, #4]
20001e42:	6812      	ldr	r2, [r2, #0]
20001e44:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
20001e46:	f042 020c 	orr.w	r2, r2, #12
20001e4a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Flush Rx FIFO in case we are executing on A2F200. */
    rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
20001e4c:	687b      	ldr	r3, [r7, #4]
20001e4e:	681b      	ldr	r3, [r3, #0]
20001e50:	689b      	ldr	r3, [r3, #8]
20001e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
20001e56:	60fb      	str	r3, [r7, #12]
    while(0u == rx_fifo_empty)
20001e58:	e00b      	b.n	20001e72 <MSS_SPI_transfer_frame+0x8a>
    {
        dummy = this_spi->hw_reg->RX_DATA;
20001e5a:	687b      	ldr	r3, [r7, #4]
20001e5c:	681b      	ldr	r3, [r3, #0]
20001e5e:	691b      	ldr	r3, [r3, #16]
20001e60:	60bb      	str	r3, [r7, #8]
        dummy = dummy;  /* Prevent Lint warning. */
20001e62:	68bb      	ldr	r3, [r7, #8]
20001e64:	60bb      	str	r3, [r7, #8]
        rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
20001e66:	687b      	ldr	r3, [r7, #4]
20001e68:	681b      	ldr	r3, [r3, #0]
20001e6a:	689b      	ldr	r3, [r3, #8]
20001e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
20001e70:	60fb      	str	r3, [r7, #12]
    /* Flush the Tx and Rx FIFOs. Please note this does not have any effect on A2F200. */
    this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
    
    /* Flush Rx FIFO in case we are executing on A2F200. */
    rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
    while(0u == rx_fifo_empty)
20001e72:	68fb      	ldr	r3, [r7, #12]
20001e74:	2b00      	cmp	r3, #0
20001e76:	d0f0      	beq.n	20001e5a <MSS_SPI_transfer_frame+0x72>
        dummy = dummy;  /* Prevent Lint warning. */
        rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
    }
    
    /* Send frame. */
    this_spi->hw_reg->TX_DATA = tx_bits;
20001e78:	687b      	ldr	r3, [r7, #4]
20001e7a:	681b      	ldr	r3, [r3, #0]
20001e7c:	683a      	ldr	r2, [r7, #0]
20001e7e:	615a      	str	r2, [r3, #20]
    
    /* Wait for frame Tx to complete. */
    tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
20001e80:	687b      	ldr	r3, [r7, #4]
20001e82:	681b      	ldr	r3, [r3, #0]
20001e84:	689b      	ldr	r3, [r3, #8]
20001e86:	f003 0301 	and.w	r3, r3, #1
20001e8a:	617b      	str	r3, [r7, #20]
    while(0u == tx_done)
20001e8c:	e005      	b.n	20001e9a <MSS_SPI_transfer_frame+0xb2>
    {
        tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
20001e8e:	687b      	ldr	r3, [r7, #4]
20001e90:	681b      	ldr	r3, [r3, #0]
20001e92:	689b      	ldr	r3, [r3, #8]
20001e94:	f003 0301 	and.w	r3, r3, #1
20001e98:	617b      	str	r3, [r7, #20]
    /* Send frame. */
    this_spi->hw_reg->TX_DATA = tx_bits;
    
    /* Wait for frame Tx to complete. */
    tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
    while(0u == tx_done)
20001e9a:	697b      	ldr	r3, [r7, #20]
20001e9c:	2b00      	cmp	r3, #0
20001e9e:	d0f6      	beq.n	20001e8e <MSS_SPI_transfer_frame+0xa6>
        tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
    }
    
    /* Read received frame. */
    /* Wait for Rx complete. */
    rx_ready = this_spi->hw_reg->STATUS & RX_DATA_READY_MASK;
20001ea0:	687b      	ldr	r3, [r7, #4]
20001ea2:	681b      	ldr	r3, [r3, #0]
20001ea4:	689b      	ldr	r3, [r3, #8]
20001ea6:	f003 0302 	and.w	r3, r3, #2
20001eaa:	613b      	str	r3, [r7, #16]
    while(0u == rx_ready)
20001eac:	e005      	b.n	20001eba <MSS_SPI_transfer_frame+0xd2>
    {
        rx_ready = this_spi->hw_reg->STATUS & RX_DATA_READY_MASK;
20001eae:	687b      	ldr	r3, [r7, #4]
20001eb0:	681b      	ldr	r3, [r3, #0]
20001eb2:	689b      	ldr	r3, [r3, #8]
20001eb4:	f003 0302 	and.w	r3, r3, #2
20001eb8:	613b      	str	r3, [r7, #16]
    }
    
    /* Read received frame. */
    /* Wait for Rx complete. */
    rx_ready = this_spi->hw_reg->STATUS & RX_DATA_READY_MASK;
    while(0u == rx_ready)
20001eba:	693b      	ldr	r3, [r7, #16]
20001ebc:	2b00      	cmp	r3, #0
20001ebe:	d0f6      	beq.n	20001eae <MSS_SPI_transfer_frame+0xc6>
    {
        rx_ready = this_spi->hw_reg->STATUS & RX_DATA_READY_MASK;
    }
    /* Return Rx data. */
    return( this_spi->hw_reg->RX_DATA );
20001ec0:	687b      	ldr	r3, [r7, #4]
20001ec2:	681b      	ldr	r3, [r3, #0]
20001ec4:	691b      	ldr	r3, [r3, #16]
}
20001ec6:	4618      	mov	r0, r3
20001ec8:	f107 071c 	add.w	r7, r7, #28
20001ecc:	46bd      	mov	sp, r7
20001ece:	bc80      	pop	{r7}
20001ed0:	4770      	bx	lr
20001ed2:	bf00      	nop

20001ed4 <fill_slave_tx_fifo>:
 */
static void fill_slave_tx_fifo
(
    mss_spi_instance_t * this_spi
)
{
20001ed4:	b480      	push	{r7}
20001ed6:	b085      	sub	sp, #20
20001ed8:	af00      	add	r7, sp, #0
20001eda:	6078      	str	r0, [r7, #4]
    uint32_t guard = 0u;
20001edc:	f04f 0300 	mov.w	r3, #0
20001ee0:	60fb      	str	r3, [r7, #12]

    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20001ee2:	e00e      	b.n	20001f02 <fill_slave_tx_fifo+0x2e>
          (this_spi->slave_tx_idx < this_spi->slave_tx_size))
    {
        /* Sending from primary slave transmit buffer */
        this_spi->hw_reg->TX_DATA = this_spi->slave_tx_buffer[this_spi->slave_tx_idx];
20001ee4:	687b      	ldr	r3, [r7, #4]
20001ee6:	681b      	ldr	r3, [r3, #0]
20001ee8:	687a      	ldr	r2, [r7, #4]
20001eea:	6891      	ldr	r1, [r2, #8]
20001eec:	687a      	ldr	r2, [r7, #4]
20001eee:	6912      	ldr	r2, [r2, #16]
20001ef0:	440a      	add	r2, r1
20001ef2:	7812      	ldrb	r2, [r2, #0]
20001ef4:	615a      	str	r2, [r3, #20]
        ++this_spi->slave_tx_idx;
20001ef6:	687b      	ldr	r3, [r7, #4]
20001ef8:	691b      	ldr	r3, [r3, #16]
20001efa:	f103 0201 	add.w	r2, r3, #1
20001efe:	687b      	ldr	r3, [r7, #4]
20001f00:	611a      	str	r2, [r3, #16]
    mss_spi_instance_t * this_spi
)
{
    uint32_t guard = 0u;

    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20001f02:	687b      	ldr	r3, [r7, #4]
20001f04:	681b      	ldr	r3, [r3, #0]
20001f06:	689b      	ldr	r3, [r3, #8]
20001f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
20001f0c:	2b00      	cmp	r3, #0
20001f0e:	d105      	bne.n	20001f1c <fill_slave_tx_fifo+0x48>
          (this_spi->slave_tx_idx < this_spi->slave_tx_size))
20001f10:	687b      	ldr	r3, [r7, #4]
20001f12:	691a      	ldr	r2, [r3, #16]
20001f14:	687b      	ldr	r3, [r7, #4]
20001f16:	68db      	ldr	r3, [r3, #12]
    mss_spi_instance_t * this_spi
)
{
    uint32_t guard = 0u;

    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20001f18:	429a      	cmp	r2, r3
20001f1a:	d3e3      	bcc.n	20001ee4 <fill_slave_tx_fifo+0x10>
        /* Sending from primary slave transmit buffer */
        this_spi->hw_reg->TX_DATA = this_spi->slave_tx_buffer[this_spi->slave_tx_idx];
        ++this_spi->slave_tx_idx;
    }

    if(this_spi->slave_tx_idx >= this_spi->slave_tx_size)
20001f1c:	687b      	ldr	r3, [r7, #4]
20001f1e:	691a      	ldr	r2, [r3, #16]
20001f20:	687b      	ldr	r3, [r7, #4]
20001f22:	68db      	ldr	r3, [r3, #12]
20001f24:	429a      	cmp	r2, r3
20001f26:	d31c      	bcc.n	20001f62 <fill_slave_tx_fifo+0x8e>
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20001f28:	e00e      	b.n	20001f48 <fill_slave_tx_fifo+0x74>
              (this_spi->resp_buff_tx_idx < this_spi->resp_buff_size))
        {
            /* Sending from command response buffer */
            this_spi->hw_reg->TX_DATA = this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx];
20001f2a:	687b      	ldr	r3, [r7, #4]
20001f2c:	681b      	ldr	r3, [r3, #0]
20001f2e:	687a      	ldr	r2, [r7, #4]
20001f30:	6951      	ldr	r1, [r2, #20]
20001f32:	687a      	ldr	r2, [r7, #4]
20001f34:	69d2      	ldr	r2, [r2, #28]
20001f36:	440a      	add	r2, r1
20001f38:	7812      	ldrb	r2, [r2, #0]
20001f3a:	615a      	str	r2, [r3, #20]
            ++this_spi->resp_buff_tx_idx;
20001f3c:	687b      	ldr	r3, [r7, #4]
20001f3e:	69db      	ldr	r3, [r3, #28]
20001f40:	f103 0201 	add.w	r2, r3, #1
20001f44:	687b      	ldr	r3, [r7, #4]
20001f46:	61da      	str	r2, [r3, #28]
        ++this_spi->slave_tx_idx;
    }

    if(this_spi->slave_tx_idx >= this_spi->slave_tx_size)
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20001f48:	687b      	ldr	r3, [r7, #4]
20001f4a:	681b      	ldr	r3, [r3, #0]
20001f4c:	689b      	ldr	r3, [r3, #8]
20001f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
20001f52:	2b00      	cmp	r3, #0
20001f54:	d105      	bne.n	20001f62 <fill_slave_tx_fifo+0x8e>
              (this_spi->resp_buff_tx_idx < this_spi->resp_buff_size))
20001f56:	687b      	ldr	r3, [r7, #4]
20001f58:	69da      	ldr	r2, [r3, #28]
20001f5a:	687b      	ldr	r3, [r7, #4]
20001f5c:	699b      	ldr	r3, [r3, #24]
        ++this_spi->slave_tx_idx;
    }

    if(this_spi->slave_tx_idx >= this_spi->slave_tx_size)
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20001f5e:	429a      	cmp	r2, r3
20001f60:	d3e3      	bcc.n	20001f2a <fill_slave_tx_fifo+0x56>
            this_spi->hw_reg->TX_DATA = this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx];
            ++this_spi->resp_buff_tx_idx;
        }
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
20001f62:	687b      	ldr	r3, [r7, #4]
20001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001f66:	2b00      	cmp	r3, #0
20001f68:	d01f      	beq.n	20001faa <fill_slave_tx_fifo+0xd6>
20001f6a:	687b      	ldr	r3, [r7, #4]
20001f6c:	691a      	ldr	r2, [r3, #16]
20001f6e:	687b      	ldr	r3, [r7, #4]
20001f70:	68db      	ldr	r3, [r3, #12]
20001f72:	429a      	cmp	r2, r3
20001f74:	d319      	bcc.n	20001faa <fill_slave_tx_fifo+0xd6>
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
20001f76:	687b      	ldr	r3, [r7, #4]
20001f78:	69da      	ldr	r2, [r3, #28]
20001f7a:	687b      	ldr	r3, [r7, #4]
20001f7c:	699b      	ldr	r3, [r3, #24]
            this_spi->hw_reg->TX_DATA = this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx];
            ++this_spi->resp_buff_tx_idx;
        }
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
20001f7e:	429a      	cmp	r2, r3
20001f80:	d313      	bcc.n	20001faa <fill_slave_tx_fifo+0xd6>
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20001f82:	e008      	b.n	20001f96 <fill_slave_tx_fifo+0xc2>
              (guard < BIG_FIFO_SIZE))
        {
            /* Nothing left so pad with 0s for consistency */
            this_spi->hw_reg->TX_DATA = 0x00u;
20001f84:	687b      	ldr	r3, [r7, #4]
20001f86:	681b      	ldr	r3, [r3, #0]
20001f88:	f04f 0200 	mov.w	r2, #0
20001f8c:	615a      	str	r2, [r3, #20]
             * We use the guard count to cover the unlikely event that we are
             * never seeing the TX FIFO full because the data is being pulled
             * out as fast as we can stuff it in. In this event we never spend
             * more than a full FIFOs worth of time spinning here.
             */
            guard++;
20001f8e:	68fb      	ldr	r3, [r7, #12]
20001f90:	f103 0301 	add.w	r3, r3, #1
20001f94:	60fb      	str	r3, [r7, #12]
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20001f96:	687b      	ldr	r3, [r7, #4]
20001f98:	681b      	ldr	r3, [r3, #0]
20001f9a:	689b      	ldr	r3, [r3, #8]
20001f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
20001fa0:	2b00      	cmp	r3, #0
20001fa2:	d102      	bne.n	20001faa <fill_slave_tx_fifo+0xd6>
20001fa4:	68fb      	ldr	r3, [r7, #12]
20001fa6:	2b1f      	cmp	r3, #31
20001fa8:	d9ec      	bls.n	20001f84 <fill_slave_tx_fifo+0xb0>
             */
            guard++;
        }
    }

}
20001faa:	f107 0714 	add.w	r7, r7, #20
20001fae:	46bd      	mov	sp, r7
20001fb0:	bc80      	pop	{r7}
20001fb2:	4770      	bx	lr

20001fb4 <read_slave_rx_fifo>:
 */
static void read_slave_rx_fifo
(
    mss_spi_instance_t * this_spi
)
{
20001fb4:	b580      	push	{r7, lr}
20001fb6:	b084      	sub	sp, #16
20001fb8:	af00      	add	r7, sp, #0
20001fba:	6078      	str	r0, [r7, #4]
    volatile uint32_t rx_frame;
    
    if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
20001fbc:	687b      	ldr	r3, [r7, #4]
20001fbe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
20001fc2:	2b02      	cmp	r3, #2
20001fc4:	d115      	bne.n	20001ff2 <read_slave_rx_fifo+0x3e>
    {
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
20001fc6:	e00c      	b.n	20001fe2 <read_slave_rx_fifo+0x2e>
        {
            /* Single frame handling mode. */
            rx_frame = this_spi->hw_reg->RX_DATA;
20001fc8:	687b      	ldr	r3, [r7, #4]
20001fca:	681b      	ldr	r3, [r3, #0]
20001fcc:	691b      	ldr	r3, [r3, #16]
20001fce:	60fb      	str	r3, [r7, #12]
            if(0u != this_spi->frame_rx_handler)
20001fd0:	687b      	ldr	r3, [r7, #4]
20001fd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20001fd4:	2b00      	cmp	r3, #0
20001fd6:	d004      	beq.n	20001fe2 <read_slave_rx_fifo+0x2e>
            {
                this_spi->frame_rx_handler( rx_frame );
20001fd8:	687b      	ldr	r3, [r7, #4]
20001fda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20001fdc:	68fa      	ldr	r2, [r7, #12]
20001fde:	4610      	mov	r0, r2
20001fe0:	4798      	blx	r3
{
    volatile uint32_t rx_frame;
    
    if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
    {
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
20001fe2:	687b      	ldr	r3, [r7, #4]
20001fe4:	681b      	ldr	r3, [r3, #0]
20001fe6:	689b      	ldr	r3, [r3, #8]
20001fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
20001fec:	2b00      	cmp	r3, #0
20001fee:	d0eb      	beq.n	20001fc8 <read_slave_rx_fifo+0x14>
20001ff0:	e032      	b.n	20002058 <read_slave_rx_fifo+0xa4>
            {
                this_spi->frame_rx_handler( rx_frame );
            }
        }
    }
    else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
20001ff2:	687b      	ldr	r3, [r7, #4]
20001ff4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
20001ff8:	2b01      	cmp	r3, #1
20001ffa:	d125      	bne.n	20002048 <read_slave_rx_fifo+0x94>
    {
        /* Block handling mode. */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
20001ffc:	e017      	b.n	2000202e <read_slave_rx_fifo+0x7a>
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
20001ffe:	687b      	ldr	r3, [r7, #4]
20002000:	681b      	ldr	r3, [r3, #0]
20002002:	691b      	ldr	r3, [r3, #16]
20002004:	60fb      	str	r3, [r7, #12]
            if(this_spi->slave_rx_idx < this_spi->slave_rx_size)
20002006:	687b      	ldr	r3, [r7, #4]
20002008:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2000200a:	687b      	ldr	r3, [r7, #4]
2000200c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000200e:	429a      	cmp	r2, r3
20002010:	d207      	bcs.n	20002022 <read_slave_rx_fifo+0x6e>
            {
                this_spi->slave_rx_buffer[this_spi->slave_rx_idx] = (uint8_t)rx_frame;
20002012:	687b      	ldr	r3, [r7, #4]
20002014:	6a9a      	ldr	r2, [r3, #40]	; 0x28
20002016:	687b      	ldr	r3, [r7, #4]
20002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000201a:	4413      	add	r3, r2
2000201c:	68fa      	ldr	r2, [r7, #12]
2000201e:	b2d2      	uxtb	r2, r2
20002020:	701a      	strb	r2, [r3, #0]
            }

            ++this_spi->slave_rx_idx;
20002022:	687b      	ldr	r3, [r7, #4]
20002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20002026:	f103 0201 	add.w	r2, r3, #1
2000202a:	687b      	ldr	r3, [r7, #4]
2000202c:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
    else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
    {
        /* Block handling mode. */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
2000202e:	687b      	ldr	r3, [r7, #4]
20002030:	681b      	ldr	r3, [r3, #0]
20002032:	689b      	ldr	r3, [r3, #8]
20002034:	f003 0340 	and.w	r3, r3, #64	; 0x40
20002038:	2b00      	cmp	r3, #0
2000203a:	d0e0      	beq.n	20001ffe <read_slave_rx_fifo+0x4a>
2000203c:	e00c      	b.n	20002058 <read_slave_rx_fifo+0xa4>
    else
    {
        /* Should not happen... Just purge FIFO */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
2000203e:	687b      	ldr	r3, [r7, #4]
20002040:	681b      	ldr	r3, [r3, #0]
20002042:	691b      	ldr	r3, [r3, #16]
20002044:	60fb      	str	r3, [r7, #12]
20002046:	e000      	b.n	2000204a <read_slave_rx_fifo+0x96>
        }
    }
    else
    {
        /* Should not happen... Just purge FIFO */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
20002048:	bf00      	nop
2000204a:	687b      	ldr	r3, [r7, #4]
2000204c:	681b      	ldr	r3, [r3, #0]
2000204e:	689b      	ldr	r3, [r3, #8]
20002050:	f003 0340 	and.w	r3, r3, #64	; 0x40
20002054:	2b00      	cmp	r3, #0
20002056:	d0f2      	beq.n	2000203e <read_slave_rx_fifo+0x8a>
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
        }
    }
}
20002058:	f107 0710 	add.w	r7, r7, #16
2000205c:	46bd      	mov	sp, r7
2000205e:	bd80      	pop	{r7, pc}

20002060 <mss_spi_isr>:
 */
static void mss_spi_isr
(
    mss_spi_instance_t * this_spi
)
{    
20002060:	b580      	push	{r7, lr}
20002062:	b086      	sub	sp, #24
20002064:	af00      	add	r7, sp, #0
20002066:	6078      	str	r0, [r7, #4]
    volatile uint32_t rx_frame;
    __I  uint32_t *this_mis = &this_spi->hw_reg->MIS;
20002068:	687b      	ldr	r3, [r7, #4]
2000206a:	681b      	ldr	r3, [r3, #0]
2000206c:	f103 0320 	add.w	r3, r3, #32
20002070:	613b      	str	r3, [r7, #16]

    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20002072:	687a      	ldr	r2, [r7, #4]
20002074:	f643 1340 	movw	r3, #14656	; 0x3940
20002078:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000207c:	429a      	cmp	r2, r3
2000207e:	d007      	beq.n	20002090 <mss_spi_isr+0x30>
20002080:	687a      	ldr	r2, [r7, #4]
20002082:	f643 03bc 	movw	r3, #14524	; 0x38bc
20002086:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000208a:	429a      	cmp	r2, r3
2000208c:	d000      	beq.n	20002090 <mss_spi_isr+0x30>
2000208e:	be00      	bkpt	0x0000
  
    if(0u != (*this_mis & RXDONE_IRQ_MASK))
20002090:	693b      	ldr	r3, [r7, #16]
20002092:	681b      	ldr	r3, [r3, #0]
20002094:	f003 0302 	and.w	r3, r3, #2
20002098:	2b00      	cmp	r3, #0
2000209a:	d052      	beq.n	20002142 <mss_spi_isr+0xe2>
    {
        if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
2000209c:	687b      	ldr	r3, [r7, #4]
2000209e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
200020a2:	2b02      	cmp	r3, #2
200020a4:	d115      	bne.n	200020d2 <mss_spi_isr+0x72>
        {
            /* Single frame handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
200020a6:	e00c      	b.n	200020c2 <mss_spi_isr+0x62>
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
200020a8:	687b      	ldr	r3, [r7, #4]
200020aa:	681b      	ldr	r3, [r3, #0]
200020ac:	691b      	ldr	r3, [r3, #16]
200020ae:	60fb      	str	r3, [r7, #12]
                if(0u != this_spi->frame_rx_handler)
200020b0:	687b      	ldr	r3, [r7, #4]
200020b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
200020b4:	2b00      	cmp	r3, #0
200020b6:	d004      	beq.n	200020c2 <mss_spi_isr+0x62>
                {
                    this_spi->frame_rx_handler( rx_frame );
200020b8:	687b      	ldr	r3, [r7, #4]
200020ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
200020bc:	68fa      	ldr	r2, [r7, #12]
200020be:	4610      	mov	r0, r2
200020c0:	4798      	blx	r3
    if(0u != (*this_mis & RXDONE_IRQ_MASK))
    {
        if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
        {
            /* Single frame handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
200020c2:	687b      	ldr	r3, [r7, #4]
200020c4:	681b      	ldr	r3, [r3, #0]
200020c6:	689b      	ldr	r3, [r3, #8]
200020c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
200020cc:	2b00      	cmp	r3, #0
200020ce:	d0eb      	beq.n	200020a8 <mss_spi_isr+0x48>
200020d0:	e032      	b.n	20002138 <mss_spi_isr+0xd8>
                {
                    this_spi->frame_rx_handler( rx_frame );
                }
            }
        }
        else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
200020d2:	687b      	ldr	r3, [r7, #4]
200020d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
200020d8:	2b01      	cmp	r3, #1
200020da:	d125      	bne.n	20002128 <mss_spi_isr+0xc8>
        {
            /* Block handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
200020dc:	e017      	b.n	2000210e <mss_spi_isr+0xae>
            {
                rx_frame = this_spi->hw_reg->RX_DATA;                /* Read from FIFO irrespective */
200020de:	687b      	ldr	r3, [r7, #4]
200020e0:	681b      	ldr	r3, [r3, #0]
200020e2:	691b      	ldr	r3, [r3, #16]
200020e4:	60fb      	str	r3, [r7, #12]
                if(this_spi->slave_rx_idx < this_spi->slave_rx_size) /* Write to array if required */
200020e6:	687b      	ldr	r3, [r7, #4]
200020e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200020ea:	687b      	ldr	r3, [r7, #4]
200020ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200020ee:	429a      	cmp	r2, r3
200020f0:	d207      	bcs.n	20002102 <mss_spi_isr+0xa2>
                {
                    this_spi->slave_rx_buffer[this_spi->slave_rx_idx] = (uint8_t)rx_frame;
200020f2:	687b      	ldr	r3, [r7, #4]
200020f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
200020f6:	687b      	ldr	r3, [r7, #4]
200020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200020fa:	4413      	add	r3, r2
200020fc:	68fa      	ldr	r2, [r7, #12]
200020fe:	b2d2      	uxtb	r2, r2
20002100:	701a      	strb	r2, [r3, #0]
                }

                ++this_spi->slave_rx_idx;            
20002102:	687b      	ldr	r3, [r7, #4]
20002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20002106:	f103 0201 	add.w	r2, r3, #1
2000210a:	687b      	ldr	r3, [r7, #4]
2000210c:	631a      	str	r2, [r3, #48]	; 0x30
            }
        }
        else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
        {
            /* Block handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
2000210e:	687b      	ldr	r3, [r7, #4]
20002110:	681b      	ldr	r3, [r3, #0]
20002112:	689b      	ldr	r3, [r3, #8]
20002114:	f003 0340 	and.w	r3, r3, #64	; 0x40
20002118:	2b00      	cmp	r3, #0
2000211a:	d0e0      	beq.n	200020de <mss_spi_isr+0x7e>
2000211c:	e00c      	b.n	20002138 <mss_spi_isr+0xd8>
        else
        {
            /* No slave handling in place so just purge FIFO */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
2000211e:	687b      	ldr	r3, [r7, #4]
20002120:	681b      	ldr	r3, [r3, #0]
20002122:	691b      	ldr	r3, [r3, #16]
20002124:	60fb      	str	r3, [r7, #12]
20002126:	e000      	b.n	2000212a <mss_spi_isr+0xca>
            }
        }
        else
        {
            /* No slave handling in place so just purge FIFO */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
20002128:	bf00      	nop
2000212a:	687b      	ldr	r3, [r7, #4]
2000212c:	681b      	ldr	r3, [r3, #0]
2000212e:	689b      	ldr	r3, [r3, #8]
20002130:	f003 0340 	and.w	r3, r3, #64	; 0x40
20002134:	2b00      	cmp	r3, #0
20002136:	d0f2      	beq.n	2000211e <mss_spi_isr+0xbe>
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
            }
        }

        this_spi->hw_reg->INT_CLEAR = RXDONE_IRQ_MASK;
20002138:	687b      	ldr	r3, [r7, #4]
2000213a:	681b      	ldr	r3, [r3, #0]
2000213c:	f04f 0202 	mov.w	r2, #2
20002140:	60da      	str	r2, [r3, #12]
    }

   /* Handle transmit. */
    if(0u != (*this_mis & TXDONE_IRQ_MASK))
20002142:	693b      	ldr	r3, [r7, #16]
20002144:	681b      	ldr	r3, [r3, #0]
20002146:	f003 0301 	and.w	r3, r3, #1
2000214a:	b2db      	uxtb	r3, r3
2000214c:	2b00      	cmp	r3, #0
2000214e:	d012      	beq.n	20002176 <mss_spi_isr+0x116>
    {
        if( MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode )
20002150:	687b      	ldr	r3, [r7, #4]
20002152:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
20002156:	2b02      	cmp	r3, #2
20002158:	d105      	bne.n	20002166 <mss_spi_isr+0x106>
        {
           /* Reload slave tx frame into Tx data register. */
            this_spi->hw_reg->TX_DATA = this_spi->slave_tx_frame;
2000215a:	687b      	ldr	r3, [r7, #4]
2000215c:	681b      	ldr	r3, [r3, #0]
2000215e:	687a      	ldr	r2, [r7, #4]
20002160:	6f92      	ldr	r2, [r2, #120]	; 0x78
20002162:	615a      	str	r2, [r3, #20]
20002164:	e002      	b.n	2000216c <mss_spi_isr+0x10c>
        }
        else /* Must be block mode so load FIFO to the max */
        {
            fill_slave_tx_fifo(this_spi);
20002166:	6878      	ldr	r0, [r7, #4]
20002168:	f7ff feb4 	bl	20001ed4 <fill_slave_tx_fifo>
        }

        this_spi->hw_reg->INT_CLEAR = TXDONE_IRQ_MASK;
2000216c:	687b      	ldr	r3, [r7, #4]
2000216e:	681b      	ldr	r3, [r3, #0]
20002170:	f04f 0201 	mov.w	r2, #1
20002174:	60da      	str	r2, [r3, #12]
    }
    
    /* Handle command interrupt. */
    if(0u != (*this_mis & CMD_IRQ_MASK))
20002176:	693b      	ldr	r3, [r7, #16]
20002178:	681b      	ldr	r3, [r3, #0]
2000217a:	f003 0310 	and.w	r3, r3, #16
2000217e:	2b00      	cmp	r3, #0
20002180:	d023      	beq.n	200021ca <mss_spi_isr+0x16a>
    {
        read_slave_rx_fifo(this_spi);
20002182:	6878      	ldr	r0, [r7, #4]
20002184:	f7ff ff16 	bl	20001fb4 <read_slave_rx_fifo>
        
        /*
         * Call the command handler if one exists.
         */
        if(0u != this_spi->cmd_handler)
20002188:	687b      	ldr	r3, [r7, #4]
2000218a:	6a1b      	ldr	r3, [r3, #32]
2000218c:	2b00      	cmp	r3, #0
2000218e:	d00b      	beq.n	200021a8 <mss_spi_isr+0x148>
        {
            (*this_spi->cmd_handler)(this_spi->slave_rx_buffer, this_spi->slave_rx_idx);
20002190:	687b      	ldr	r3, [r7, #4]
20002192:	6a1b      	ldr	r3, [r3, #32]
20002194:	687a      	ldr	r2, [r7, #4]
20002196:	6a91      	ldr	r1, [r2, #40]	; 0x28
20002198:	687a      	ldr	r2, [r7, #4]
2000219a:	6b12      	ldr	r2, [r2, #48]	; 0x30
2000219c:	4608      	mov	r0, r1
2000219e:	4611      	mov	r1, r2
200021a0:	4798      	blx	r3
            fill_slave_tx_fifo(this_spi);
200021a2:	6878      	ldr	r0, [r7, #4]
200021a4:	f7ff fe96 	bl	20001ed4 <fill_slave_tx_fifo>
        }
        /* Set cmd_done to indicate it is now safe to 0 fill TX FIFO */
        this_spi->cmd_done = 1u;
200021a8:	687b      	ldr	r3, [r7, #4]
200021aa:	f04f 0201 	mov.w	r2, #1
200021ae:	625a      	str	r2, [r3, #36]	; 0x24
        /* Disable command interrupt until slave select becomes de-asserted to avoid retriggering. */
        this_spi->hw_reg->CONTROL2 &= ~(uint32_t)C2_ENABLE_CMD_IRQ_MASK;
200021b0:	687b      	ldr	r3, [r7, #4]
200021b2:	681b      	ldr	r3, [r3, #0]
200021b4:	687a      	ldr	r2, [r7, #4]
200021b6:	6812      	ldr	r2, [r2, #0]
200021b8:	6a92      	ldr	r2, [r2, #40]	; 0x28
200021ba:	f022 0210 	bic.w	r2, r2, #16
200021be:	629a      	str	r2, [r3, #40]	; 0x28
        this_spi->hw_reg->INT_CLEAR = CMD_IRQ_MASK;
200021c0:	687b      	ldr	r3, [r7, #4]
200021c2:	681b      	ldr	r3, [r3, #0]
200021c4:	f04f 0210 	mov.w	r2, #16
200021c8:	60da      	str	r2, [r3, #12]
    }

    if(0u != (*this_mis & RXOVFLOW_IRQ_MASK))
200021ca:	693b      	ldr	r3, [r7, #16]
200021cc:	681b      	ldr	r3, [r3, #0]
200021ce:	f003 0304 	and.w	r3, r3, #4
200021d2:	2b00      	cmp	r3, #0
200021d4:	d00f      	beq.n	200021f6 <mss_spi_isr+0x196>
    {
        /*
         * Receive overflow, not a lot we can do for this. Reset the receive
         *  FIFO, clear the interrupt and hope it doesn't happen again...
         */
        this_spi->hw_reg->COMMAND |= RX_FIFO_RESET_MASK;
200021d6:	687b      	ldr	r3, [r7, #4]
200021d8:	681b      	ldr	r3, [r3, #0]
200021da:	687a      	ldr	r2, [r7, #4]
200021dc:	6812      	ldr	r2, [r2, #0]
200021de:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
200021e0:	f042 0204 	orr.w	r2, r2, #4
200021e4:	62da      	str	r2, [r3, #44]	; 0x2c
        recover_from_rx_overflow(this_spi);
200021e6:	6878      	ldr	r0, [r7, #4]
200021e8:	f7ff fbf2 	bl	200019d0 <recover_from_rx_overflow>
        this_spi->hw_reg->INT_CLEAR = RXOVFLOW_IRQ_MASK;
200021ec:	687b      	ldr	r3, [r7, #4]
200021ee:	681b      	ldr	r3, [r3, #0]
200021f0:	f04f 0204 	mov.w	r2, #4
200021f4:	60da      	str	r2, [r3, #12]
     * slave TX FIFO data setup (if there is one).
     * In block mode this will probably not be very successful as we will
     * be out of synch with the master but the reset on SSEND will hopefully
     * take care of that for the next transfer.
     */
    if(0u != (*this_mis & TXURUN_IRQ_MASK))
200021f6:	693b      	ldr	r3, [r7, #16]
200021f8:	681b      	ldr	r3, [r3, #0]
200021fa:	f003 0308 	and.w	r3, r3, #8
200021fe:	2b00      	cmp	r3, #0
20002200:	d031      	beq.n	20002266 <mss_spi_isr+0x206>
    {
        this_spi->hw_reg->COMMAND |= TX_FIFO_RESET_MASK;
20002202:	687b      	ldr	r3, [r7, #4]
20002204:	681b      	ldr	r3, [r3, #0]
20002206:	687a      	ldr	r2, [r7, #4]
20002208:	6812      	ldr	r2, [r2, #0]
2000220a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
2000220c:	f042 0208 	orr.w	r2, r2, #8
20002210:	62da      	str	r2, [r3, #44]	; 0x2c
        if( MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode )
20002212:	687b      	ldr	r3, [r7, #4]
20002214:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
20002218:	2b02      	cmp	r3, #2
2000221a:	d113      	bne.n	20002244 <mss_spi_isr+0x1e4>
        {
            this_spi->hw_reg->CONTROL = (this_spi->hw_reg->CONTROL & ~TXRXDFCOUNT_MASK)
2000221c:	687b      	ldr	r3, [r7, #4]
2000221e:	681a      	ldr	r2, [r3, #0]
20002220:	687b      	ldr	r3, [r7, #4]
20002222:	681b      	ldr	r3, [r3, #0]
20002224:	6819      	ldr	r1, [r3, #0]
20002226:	f240 03ff 	movw	r3, #255	; 0xff
2000222a:	f6cf 7300 	movt	r3, #65280	; 0xff00
2000222e:	ea01 0303 	and.w	r3, r1, r3
20002232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
20002236:	6013      	str	r3, [r2, #0]
                                        | ((uint32_t)1u << TXRXDFCOUNT_SHIFT);
           /* Reload slave tx frame into Tx data register. */
            this_spi->hw_reg->TX_DATA = this_spi->slave_tx_frame;
20002238:	687b      	ldr	r3, [r7, #4]
2000223a:	681b      	ldr	r3, [r3, #0]
2000223c:	687a      	ldr	r2, [r7, #4]
2000223e:	6f92      	ldr	r2, [r2, #120]	; 0x78
20002240:	615a      	str	r2, [r3, #20]
20002242:	e00b      	b.n	2000225c <mss_spi_isr+0x1fc>
        }
        else if( MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode )
20002244:	687b      	ldr	r3, [r7, #4]
20002246:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
2000224a:	2b01      	cmp	r3, #1
2000224c:	d106      	bne.n	2000225c <mss_spi_isr+0x1fc>
        {
            /* Block mode so reload FIFO to the max */
            this_spi->slave_tx_idx = 0u;
2000224e:	687b      	ldr	r3, [r7, #4]
20002250:	f04f 0200 	mov.w	r2, #0
20002254:	611a      	str	r2, [r3, #16]
            fill_slave_tx_fifo(this_spi);
20002256:	6878      	ldr	r0, [r7, #4]
20002258:	f7ff fe3c 	bl	20001ed4 <fill_slave_tx_fifo>
        else
        {
            /* Not frame or block mode? Can't do anything here... */
        }

        this_spi->hw_reg->INT_CLEAR = TXURUN_IRQ_MASK;
2000225c:	687b      	ldr	r3, [r7, #4]
2000225e:	681b      	ldr	r3, [r3, #0]
20002260:	f04f 0208 	mov.w	r2, #8
20002264:	60da      	str	r2, [r3, #12]
    /*
     * Handle slave select becoming de-asserted. Only enables if
     * we are operating in block mode, in frame mode we do everything
     * in the receive and transmit interrupt handlers.
     */
    if(0u != (*this_mis & SSEND_IRQ_MASK))
20002266:	693b      	ldr	r3, [r7, #16]
20002268:	681b      	ldr	r3, [r3, #0]
2000226a:	f003 0320 	and.w	r3, r3, #32
2000226e:	2b00      	cmp	r3, #0
20002270:	d049      	beq.n	20002306 <mss_spi_isr+0x2a6>
    {
        uint32_t rx_size;
        
        read_slave_rx_fifo(this_spi);
20002272:	6878      	ldr	r0, [r7, #4]
20002274:	f7ff fe9e 	bl	20001fb4 <read_slave_rx_fifo>
        rx_size = this_spi->slave_rx_idx;
20002278:	687b      	ldr	r3, [r7, #4]
2000227a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000227c:	617b      	str	r3, [r7, #20]
        /*
         * Re-enable command interrupt if required and clear all the response
         * buffer state in readiness for next response. This must be done
         * before reloading the TX FIFO.
         */
        if(0u != this_spi->cmd_handler)
2000227e:	687b      	ldr	r3, [r7, #4]
20002280:	6a1b      	ldr	r3, [r3, #32]
20002282:	2b00      	cmp	r3, #0
20002284:	d01c      	beq.n	200022c0 <mss_spi_isr+0x260>
        {
            this_spi->cmd_done = 0u;
20002286:	687b      	ldr	r3, [r7, #4]
20002288:	f04f 0200 	mov.w	r2, #0
2000228c:	625a      	str	r2, [r3, #36]	; 0x24
            this_spi->resp_tx_buffer = 0u;
2000228e:	687b      	ldr	r3, [r7, #4]
20002290:	f04f 0200 	mov.w	r2, #0
20002294:	615a      	str	r2, [r3, #20]
            this_spi->resp_buff_size = 0u;
20002296:	687b      	ldr	r3, [r7, #4]
20002298:	f04f 0200 	mov.w	r2, #0
2000229c:	619a      	str	r2, [r3, #24]
            this_spi->resp_buff_tx_idx = 0u;
2000229e:	687b      	ldr	r3, [r7, #4]
200022a0:	f04f 0200 	mov.w	r2, #0
200022a4:	61da      	str	r2, [r3, #28]
            this_spi->hw_reg->INT_CLEAR = CMD_IRQ_MASK;
200022a6:	687b      	ldr	r3, [r7, #4]
200022a8:	681b      	ldr	r3, [r3, #0]
200022aa:	f04f 0210 	mov.w	r2, #16
200022ae:	60da      	str	r2, [r3, #12]
            this_spi->hw_reg->CONTROL2 |= C2_ENABLE_CMD_IRQ_MASK;
200022b0:	687b      	ldr	r3, [r7, #4]
200022b2:	681b      	ldr	r3, [r3, #0]
200022b4:	687a      	ldr	r2, [r7, #4]
200022b6:	6812      	ldr	r2, [r2, #0]
200022b8:	6a92      	ldr	r2, [r2, #40]	; 0x28
200022ba:	f042 0210 	orr.w	r2, r2, #16
200022be:	629a      	str	r2, [r3, #40]	; 0x28
        /* 
         * Reset the transmit index to 0 to restart transmit at the start of the
         * transmit buffer in the next transaction. This also requires flushing
         * the Tx FIFO and refilling it with the start of Tx data buffer.
         */
        this_spi->slave_tx_idx = 0u;
200022c0:	687b      	ldr	r3, [r7, #4]
200022c2:	f04f 0200 	mov.w	r2, #0
200022c6:	611a      	str	r2, [r3, #16]
        this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
200022c8:	687b      	ldr	r3, [r7, #4]
200022ca:	681b      	ldr	r3, [r3, #0]
200022cc:	687a      	ldr	r2, [r7, #4]
200022ce:	6812      	ldr	r2, [r2, #0]
200022d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
200022d2:	f042 020c 	orr.w	r2, r2, #12
200022d6:	62da      	str	r2, [r3, #44]	; 0x2c
        fill_slave_tx_fifo(this_spi);
200022d8:	6878      	ldr	r0, [r7, #4]
200022da:	f7ff fdfb 	bl	20001ed4 <fill_slave_tx_fifo>
        
        /* Prepare to receive next packet. */
        this_spi->slave_rx_idx = 0u;
200022de:	687b      	ldr	r3, [r7, #4]
200022e0:	f04f 0200 	mov.w	r2, #0
200022e4:	631a      	str	r2, [r3, #48]	; 0x30
        /*
         * Call the receive handler if one exists.
         */
        if(0u != this_spi->block_rx_handler)
200022e6:	687b      	ldr	r3, [r7, #4]
200022e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
200022ea:	2b00      	cmp	r3, #0
200022ec:	d006      	beq.n	200022fc <mss_spi_isr+0x29c>
        {
            (*this_spi->block_rx_handler)(this_spi->slave_rx_buffer, rx_size);
200022ee:	687b      	ldr	r3, [r7, #4]
200022f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
200022f2:	687a      	ldr	r2, [r7, #4]
200022f4:	6a92      	ldr	r2, [r2, #40]	; 0x28
200022f6:	4610      	mov	r0, r2
200022f8:	6979      	ldr	r1, [r7, #20]
200022fa:	4798      	blx	r3
        }
        
        this_spi->hw_reg->INT_CLEAR = SSEND_IRQ_MASK;
200022fc:	687b      	ldr	r3, [r7, #4]
200022fe:	681b      	ldr	r3, [r3, #0]
20002300:	f04f 0220 	mov.w	r2, #32
20002304:	60da      	str	r2, [r3, #12]
    }
}
20002306:	f107 0718 	add.w	r7, r7, #24
2000230a:	46bd      	mov	sp, r7
2000230c:	bd80      	pop	{r7, pc}
2000230e:	bf00      	nop

20002310 <SPI0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void SPI0_IRQHandler(void)
#else
void SPI0_IRQHandler( void )
#endif
{
20002310:	4668      	mov	r0, sp
20002312:	f020 0107 	bic.w	r1, r0, #7
20002316:	468d      	mov	sp, r1
20002318:	b589      	push	{r0, r3, r7, lr}
2000231a:	af00      	add	r7, sp, #0
    mss_spi_isr(&g_mss_spi0);
2000231c:	f643 1040 	movw	r0, #14656	; 0x3940
20002320:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002324:	f7ff fe9c 	bl	20002060 <mss_spi_isr>
    NVIC_ClearPendingIRQ(SPI0_IRQn);
20002328:	f04f 000c 	mov.w	r0, #12
2000232c:	f7ff fa98 	bl	20001860 <NVIC_ClearPendingIRQ>
}
20002330:	46bd      	mov	sp, r7
20002332:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002336:	4685      	mov	sp, r0
20002338:	4770      	bx	lr
2000233a:	bf00      	nop

2000233c <SPI1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void SPI1_IRQHandler(void)
#else
void SPI1_IRQHandler(void)
#endif
{
2000233c:	4668      	mov	r0, sp
2000233e:	f020 0107 	bic.w	r1, r0, #7
20002342:	468d      	mov	sp, r1
20002344:	b589      	push	{r0, r3, r7, lr}
20002346:	af00      	add	r7, sp, #0
    mss_spi_isr(&g_mss_spi1);
20002348:	f643 00bc 	movw	r0, #14524	; 0x38bc
2000234c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002350:	f7ff fe86 	bl	20002060 <mss_spi_isr>
    NVIC_ClearPendingIRQ(SPI1_IRQn);
20002354:	f04f 000d 	mov.w	r0, #13
20002358:	f7ff fa82 	bl	20001860 <NVIC_ClearPendingIRQ>
}
2000235c:	46bd      	mov	sp, r7
2000235e:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002362:	4685      	mov	sp, r0
20002364:	4770      	bx	lr
20002366:	bf00      	nop

20002368 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20002368:	b480      	push	{r7}
2000236a:	b083      	sub	sp, #12
2000236c:	af00      	add	r7, sp, #0
2000236e:	4603      	mov	r3, r0
20002370:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20002372:	f24e 1300 	movw	r3, #57600	; 0xe100
20002376:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000237a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
2000237e:	ea4f 1252 	mov.w	r2, r2, lsr #5
20002382:	88f9      	ldrh	r1, [r7, #6]
20002384:	f001 011f 	and.w	r1, r1, #31
20002388:	f04f 0001 	mov.w	r0, #1
2000238c:	fa00 f101 	lsl.w	r1, r0, r1
20002390:	f102 0260 	add.w	r2, r2, #96	; 0x60
20002394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20002398:	f107 070c 	add.w	r7, r7, #12
2000239c:	46bd      	mov	sp, r7
2000239e:	bc80      	pop	{r7}
200023a0:	4770      	bx	lr
200023a2:	bf00      	nop

200023a4 <MSS_GPIO_init>:
/*-------------------------------------------------------------------------*//**
 * MSS_GPIO_init
 * See "mss_gpio.h" for details of how to use this function.
 */
void MSS_GPIO_init( void )
{
200023a4:	b580      	push	{r7, lr}
200023a6:	b082      	sub	sp, #8
200023a8:	af00      	add	r7, sp, #0
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
200023aa:	f242 0300 	movw	r3, #8192	; 0x2000
200023ae:	f2ce 0304 	movt	r3, #57348	; 0xe004
200023b2:	f242 0200 	movw	r2, #8192	; 0x2000
200023b6:	f2ce 0204 	movt	r2, #57348	; 0xe004
200023ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
200023bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
200023c0:	631a      	str	r2, [r3, #48]	; 0x30
    /* Clear any previously pended MSS GPIO interrupt */
    for ( i = 0U; i < NB_OF_GPIO; ++i )
200023c2:	f04f 0300 	mov.w	r3, #0
200023c6:	607b      	str	r3, [r7, #4]
200023c8:	e00e      	b.n	200023e8 <MSS_GPIO_init+0x44>
    {
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[i] );
200023ca:	687a      	ldr	r2, [r7, #4]
200023cc:	f243 63a4 	movw	r3, #13988	; 0x36a4
200023d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023d4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
200023d8:	b21b      	sxth	r3, r3
200023da:	4618      	mov	r0, r3
200023dc:	f7ff ffc4 	bl	20002368 <NVIC_ClearPendingIRQ>
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
    /* Clear any previously pended MSS GPIO interrupt */
    for ( i = 0U; i < NB_OF_GPIO; ++i )
200023e0:	687b      	ldr	r3, [r7, #4]
200023e2:	f103 0301 	add.w	r3, r3, #1
200023e6:	607b      	str	r3, [r7, #4]
200023e8:	687b      	ldr	r3, [r7, #4]
200023ea:	2b1f      	cmp	r3, #31
200023ec:	d9ed      	bls.n	200023ca <MSS_GPIO_init+0x26>
    {
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[i] );
    }
    /* Take MSS GPIO hardware out of reset. */
    SYSREG->SOFT_RST_CR &= ~SYSREG_GPIO_SOFTRESET_MASK;
200023ee:	f242 0300 	movw	r3, #8192	; 0x2000
200023f2:	f2ce 0304 	movt	r3, #57348	; 0xe004
200023f6:	f242 0200 	movw	r2, #8192	; 0x2000
200023fa:	f2ce 0204 	movt	r2, #57348	; 0xe004
200023fe:	6b12      	ldr	r2, [r2, #48]	; 0x30
20002400:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
20002404:	631a      	str	r2, [r3, #48]	; 0x30
}
20002406:	f107 0708 	add.w	r7, r7, #8
2000240a:	46bd      	mov	sp, r7
2000240c:	bd80      	pop	{r7, pc}
2000240e:	bf00      	nop

20002410 <MSS_GPIO_config>:
void MSS_GPIO_config
(
    mss_gpio_id_t port_id,
    uint32_t config
)
{
20002410:	b480      	push	{r7}
20002412:	b085      	sub	sp, #20
20002414:	af00      	add	r7, sp, #0
20002416:	4603      	mov	r3, r0
20002418:	6039      	str	r1, [r7, #0]
2000241a:	71fb      	strb	r3, [r7, #7]
    uint32_t gpio_idx = (uint32_t)port_id;
2000241c:	79fb      	ldrb	r3, [r7, #7]
2000241e:	60fb      	str	r3, [r7, #12]
    
    ASSERT( gpio_idx < NB_OF_GPIO );
20002420:	68fb      	ldr	r3, [r7, #12]
20002422:	2b1f      	cmp	r3, #31
20002424:	d900      	bls.n	20002428 <MSS_GPIO_config+0x18>
20002426:	be00      	bkpt	0x0000

    if ( gpio_idx < NB_OF_GPIO )
20002428:	68fb      	ldr	r3, [r7, #12]
2000242a:	2b1f      	cmp	r3, #31
2000242c:	d808      	bhi.n	20002440 <MSS_GPIO_config+0x30>
    {
        *(g_config_reg_lut[gpio_idx]) = config;
2000242e:	68fa      	ldr	r2, [r7, #12]
20002430:	f243 6324 	movw	r3, #13860	; 0x3624
20002434:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000243c:	683a      	ldr	r2, [r7, #0]
2000243e:	601a      	str	r2, [r3, #0]
    }
}
20002440:	f107 0714 	add.w	r7, r7, #20
20002444:	46bd      	mov	sp, r7
20002446:	bc80      	pop	{r7}
20002448:	4770      	bx	lr
2000244a:	bf00      	nop

2000244c <MSS_GPIO_set_output>:
void MSS_GPIO_set_output
(
    mss_gpio_id_t       port_id,
    uint8_t             value
)
{
2000244c:	b480      	push	{r7}
2000244e:	b085      	sub	sp, #20
20002450:	af00      	add	r7, sp, #0
20002452:	4602      	mov	r2, r0
20002454:	460b      	mov	r3, r1
20002456:	71fa      	strb	r2, [r7, #7]
20002458:	71bb      	strb	r3, [r7, #6]
    uint32_t gpio_idx = (uint32_t)port_id;
2000245a:	79fb      	ldrb	r3, [r7, #7]
2000245c:	60fb      	str	r3, [r7, #12]
    
    ASSERT( gpio_idx < NB_OF_GPIO );
2000245e:	68fb      	ldr	r3, [r7, #12]
20002460:	2b1f      	cmp	r3, #31
20002462:	d900      	bls.n	20002466 <MSS_GPIO_set_output+0x1a>
20002464:	be00      	bkpt	0x0000
    
    if ( gpio_idx < NB_OF_GPIO )
20002466:	68fb      	ldr	r3, [r7, #12]
20002468:	2b1f      	cmp	r3, #31
2000246a:	d809      	bhi.n	20002480 <MSS_GPIO_set_output+0x34>
    {
        GPIO_BITBAND->GPIO_OUT[gpio_idx] = (uint32_t)value;
2000246c:	f240 0300 	movw	r3, #0
20002470:	f2c4 2326 	movt	r3, #16934	; 0x4226
20002474:	68fa      	ldr	r2, [r7, #12]
20002476:	79b9      	ldrb	r1, [r7, #6]
20002478:	f502 6288 	add.w	r2, r2, #1088	; 0x440
2000247c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
}
20002480:	f107 0714 	add.w	r7, r7, #20
20002484:	46bd      	mov	sp, r7
20002486:	bc80      	pop	{r7}
20002488:	4770      	bx	lr
2000248a:	bf00      	nop

2000248c <ACE_init>:

/*-------------------------------------------------------------------------*//**
  See "mss_ace.h" for details of how to use this function.
 */
void ACE_init( void )
{
2000248c:	b580      	push	{r7, lr}
2000248e:	af00      	add	r7, sp, #0
    /* Initialize driver's internal data. */
    ace_init_flags();
20002490:	f000 fa82 	bl	20002998 <ace_init_flags>
    
    /* Initialize the data structures used by conversion functions. */
    ace_init_convert();
20002494:	f000 f988 	bl	200027a8 <ace_init_convert>
}
20002498:	bd80      	pop	{r7, pc}
2000249a:	bf00      	nop

2000249c <ACE_get_channel_handle>:
ace_channel_handle_t
ACE_get_channel_handle
(
    const uint8_t * p_sz_channel_name
)
{
2000249c:	b580      	push	{r7, lr}
2000249e:	b084      	sub	sp, #16
200024a0:	af00      	add	r7, sp, #0
200024a2:	6078      	str	r0, [r7, #4]
    uint16_t channel_idx;
    ace_channel_handle_t channel_handle = INVALID_CHANNEL_HANDLE;
200024a4:	f04f 0304 	mov.w	r3, #4
200024a8:	72fb      	strb	r3, [r7, #11]
    
    for ( channel_idx = 0u;  channel_idx < (uint16_t)ACE_NB_OF_INPUT_CHANNELS; ++channel_idx )
200024aa:	f04f 0300 	mov.w	r3, #0
200024ae:	813b      	strh	r3, [r7, #8]
200024b0:	e025      	b.n	200024fe <ACE_get_channel_handle+0x62>
    {
        if ( g_ace_channel_desc_table[channel_idx].p_sz_channel_name != 0 )
200024b2:	893a      	ldrh	r2, [r7, #8]
200024b4:	f243 73d0 	movw	r3, #14288	; 0x37d0
200024b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200024bc:	ea4f 1202 	mov.w	r2, r2, lsl #4
200024c0:	4413      	add	r3, r2
200024c2:	681b      	ldr	r3, [r3, #0]
200024c4:	2b00      	cmp	r3, #0
200024c6:	d016      	beq.n	200024f6 <ACE_get_channel_handle+0x5a>
        {
            int32_t diff;
            diff = strncmp( (const char*)p_sz_channel_name, (const char*)g_ace_channel_desc_table[channel_idx].p_sz_channel_name, (size_t)MAX_CHANNEL_NAME_LENGTH );
200024c8:	893a      	ldrh	r2, [r7, #8]
200024ca:	f243 73d0 	movw	r3, #14288	; 0x37d0
200024ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
200024d2:	ea4f 1202 	mov.w	r2, r2, lsl #4
200024d6:	4413      	add	r3, r2
200024d8:	681b      	ldr	r3, [r3, #0]
200024da:	6878      	ldr	r0, [r7, #4]
200024dc:	4619      	mov	r1, r3
200024de:	f04f 0210 	mov.w	r2, #16
200024e2:	f000 ffff 	bl	200034e4 <strncmp>
200024e6:	4603      	mov	r3, r0
200024e8:	60fb      	str	r3, [r7, #12]
            if ( 0 == diff )
200024ea:	68fb      	ldr	r3, [r7, #12]
200024ec:	2b00      	cmp	r3, #0
200024ee:	d102      	bne.n	200024f6 <ACE_get_channel_handle+0x5a>
            {
                /* channel name found. */
                channel_handle = (ace_channel_handle_t)channel_idx;
200024f0:	893b      	ldrh	r3, [r7, #8]
200024f2:	72fb      	strb	r3, [r7, #11]
                break;
200024f4:	e006      	b.n	20002504 <ACE_get_channel_handle+0x68>
)
{
    uint16_t channel_idx;
    ace_channel_handle_t channel_handle = INVALID_CHANNEL_HANDLE;
    
    for ( channel_idx = 0u;  channel_idx < (uint16_t)ACE_NB_OF_INPUT_CHANNELS; ++channel_idx )
200024f6:	893b      	ldrh	r3, [r7, #8]
200024f8:	f103 0301 	add.w	r3, r3, #1
200024fc:	813b      	strh	r3, [r7, #8]
200024fe:	893b      	ldrh	r3, [r7, #8]
20002500:	2b03      	cmp	r3, #3
20002502:	d9d6      	bls.n	200024b2 <ACE_get_channel_handle+0x16>
                channel_handle = (ace_channel_handle_t)channel_idx;
                break;
            }
        }
    }
    return channel_handle;
20002504:	7afb      	ldrb	r3, [r7, #11]
}
20002506:	4618      	mov	r0, r3
20002508:	f107 0710 	add.w	r7, r7, #16
2000250c:	46bd      	mov	sp, r7
2000250e:	bd80      	pop	{r7, pc}

20002510 <ACE_get_ppe_sample>:
uint16_t
ACE_get_ppe_sample
(
    ace_channel_handle_t channel_handle
)
{
20002510:	b480      	push	{r7}
20002512:	b085      	sub	sp, #20
20002514:	af00      	add	r7, sp, #0
20002516:	4603      	mov	r3, r0
20002518:	71fb      	strb	r3, [r7, #7]
    uint16_t sample;
    uint16_t ppe_offset;
    
    ppe_offset = g_ace_channel_desc_table[channel_handle].signal_ppe_offset;
2000251a:	79fa      	ldrb	r2, [r7, #7]
2000251c:	f243 73d0 	movw	r3, #14288	; 0x37d0
20002520:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002524:	ea4f 1202 	mov.w	r2, r2, lsl #4
20002528:	4413      	add	r3, r2
2000252a:	88db      	ldrh	r3, [r3, #6]
2000252c:	81fb      	strh	r3, [r7, #14]
    sample = (uint16_t)(ACE->PPE_RAM_DATA[ppe_offset] >> 16u);
2000252e:	f240 0300 	movw	r3, #0
20002532:	f2c4 0302 	movt	r3, #16386	; 0x4002
20002536:	89fa      	ldrh	r2, [r7, #14]
20002538:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
2000253c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20002540:	ea4f 4313 	mov.w	r3, r3, lsr #16
20002544:	81bb      	strh	r3, [r7, #12]
    
    /* Check that the PPE processing did not result into a negative value.*/
    if((sample & 0x8000u) > 0u)
20002546:	89bb      	ldrh	r3, [r7, #12]
20002548:	b21b      	sxth	r3, r3
2000254a:	2b00      	cmp	r3, #0
2000254c:	da02      	bge.n	20002554 <ACE_get_ppe_sample+0x44>
    {
        /* Normalize negative value to zero. */
        sample = 0u;
2000254e:	f04f 0300 	mov.w	r3, #0
20002552:	81bb      	strh	r3, [r7, #12]
    }
    
    return sample;
20002554:	89bb      	ldrh	r3, [r7, #12]
}
20002556:	4618      	mov	r0, r3
20002558:	f107 0714 	add.w	r7, r7, #20
2000255c:	46bd      	mov	sp, r7
2000255e:	bc80      	pop	{r7}
20002560:	4770      	bx	lr
20002562:	bf00      	nop

20002564 <SystemInit>:

/***************************************************************************//**
 * See system_a2fxxxm3f.h for details.
 */
void SystemInit(void)
{
20002564:	b480      	push	{r7}
20002566:	af00      	add	r7, sp, #0
    /*
     * Do not make use of global variables or make any asumptions regarding
     * memory content if modifying this function. The memory content has not been
     * initialised by the time this function is called by the start-up code.
     */
}
20002568:	46bd      	mov	sp, r7
2000256a:	bc80      	pop	{r7}
2000256c:	4770      	bx	lr
2000256e:	bf00      	nop

20002570 <SystemCoreClockUpdate>:

/***************************************************************************//**
 *
 */
void SystemCoreClockUpdate (void)
{
20002570:	b580      	push	{r7, lr}
20002572:	b08a      	sub	sp, #40	; 0x28
20002574:	af00      	add	r7, sp, #0
    uint32_t PclkDiv0;
    uint32_t PclkDiv1;
    uint32_t AceDiv;
    uint32_t FabDiv;

    const uint32_t pclk_div_lut[4] = { 1uL, 2uL, 4uL, 1uL };
20002576:	f243 63e4 	movw	r3, #14052	; 0x36e4
2000257a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000257e:	46bc      	mov	ip, r7
20002580:	cb0f      	ldmia	r3!, {r0, r1, r2, r3}
20002582:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    /* Read PCLK dividers from system registers. Multiply the value read from
     * system register by two to get actual divider value. */
    PclkDiv0 = pclk_div_lut[((SYSREG->MSS_CLK_CR >> PCLK0_DIV_SHIFT) & PCLK_DIV_MASK)];
20002586:	f242 0300 	movw	r3, #8192	; 0x2000
2000258a:	f2ce 0304 	movt	r3, #57348	; 0xe004
2000258e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20002590:	ea4f 0393 	mov.w	r3, r3, lsr #2
20002594:	f003 0303 	and.w	r3, r3, #3
20002598:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000259c:	f107 0228 	add.w	r2, r7, #40	; 0x28
200025a0:	4413      	add	r3, r2
200025a2:	f853 3c28 	ldr.w	r3, [r3, #-40]
200025a6:	613b      	str	r3, [r7, #16]
    PclkDiv1 = pclk_div_lut[((SYSREG->MSS_CLK_CR >> PCLK1_DIV_SHIFT) & PCLK_DIV_MASK)];
200025a8:	f242 0300 	movw	r3, #8192	; 0x2000
200025ac:	f2ce 0304 	movt	r3, #57348	; 0xe004
200025b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
200025b2:	ea4f 1313 	mov.w	r3, r3, lsr #4
200025b6:	f003 0303 	and.w	r3, r3, #3
200025ba:	ea4f 0383 	mov.w	r3, r3, lsl #2
200025be:	f107 0228 	add.w	r2, r7, #40	; 0x28
200025c2:	4413      	add	r3, r2
200025c4:	f853 3c28 	ldr.w	r3, [r3, #-40]
200025c8:	617b      	str	r3, [r7, #20]
    AceDiv = pclk_div_lut[((SYSREG->MSS_CLK_CR >> ACE_DIV_SHIFT) & PCLK_DIV_MASK)];
200025ca:	f242 0300 	movw	r3, #8192	; 0x2000
200025ce:	f2ce 0304 	movt	r3, #57348	; 0xe004
200025d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
200025d4:	ea4f 1393 	mov.w	r3, r3, lsr #6
200025d8:	f003 0303 	and.w	r3, r3, #3
200025dc:	ea4f 0383 	mov.w	r3, r3, lsl #2
200025e0:	f107 0228 	add.w	r2, r7, #40	; 0x28
200025e4:	4413      	add	r3, r2
200025e6:	f853 3c28 	ldr.w	r3, [r3, #-40]
200025ea:	61bb      	str	r3, [r7, #24]
    {
        /* Compute the FPGA fabric frequency divider. */
        uint32_t obdiv;
        uint32_t obdivhalf;
        
        obdiv = (SYSREG->MSS_CCC_DIV_CR >> OBDIV_SHIFT) & OBDIV_MASK;
200025ec:	f242 0300 	movw	r3, #8192	; 0x2000
200025f0:	f2ce 0304 	movt	r3, #57348	; 0xe004
200025f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200025f6:	ea4f 2313 	mov.w	r3, r3, lsr #8
200025fa:	f003 031f 	and.w	r3, r3, #31
200025fe:	623b      	str	r3, [r7, #32]
        obdivhalf = (SYSREG->MSS_CCC_DIV_CR >> OBDIVHALF_SHIFT) & OBDIVHALF_MASK;
20002600:	f242 0300 	movw	r3, #8192	; 0x2000
20002604:	f2ce 0304 	movt	r3, #57348	; 0xe004
20002608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2000260a:	ea4f 3353 	mov.w	r3, r3, lsr #13
2000260e:	f003 0301 	and.w	r3, r3, #1
20002612:	627b      	str	r3, [r7, #36]	; 0x24
        FabDiv = obdiv + 1uL;
20002614:	6a3b      	ldr	r3, [r7, #32]
20002616:	f103 0301 	add.w	r3, r3, #1
2000261a:	61fb      	str	r3, [r7, #28]
        if ( obdivhalf != 0uL )
2000261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000261e:	2b00      	cmp	r3, #0
20002620:	d003      	beq.n	2000262a <SystemCoreClockUpdate+0xba>
        {
            FabDiv = FabDiv * 2uL;
20002622:	69fb      	ldr	r3, [r7, #28]
20002624:	ea4f 0343 	mov.w	r3, r3, lsl #1
20002628:	61fb      	str	r3, [r7, #28]
    }
    
    /* Retrieve FCLK from eNVM spare pages if Actel system boot programmed as part of the system. */
    
    /* Read system clock from eNVM spare pages. */
    SystemCoreClock = GetSystemClock();
2000262a:	f000 f849 	bl	200026c0 <GetSystemClock>
2000262e:	4602      	mov	r2, r0
20002630:	f243 73bc 	movw	r3, #14268	; 0x37bc
20002634:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002638:	601a      	str	r2, [r3, #0]
    g_FrequencyPCLK0 = SystemCoreClock / PclkDiv0;
2000263a:	f243 73bc 	movw	r3, #14268	; 0x37bc
2000263e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002642:	681a      	ldr	r2, [r3, #0]
20002644:	693b      	ldr	r3, [r7, #16]
20002646:	fbb2 f2f3 	udiv	r2, r2, r3
2000264a:	f243 73c0 	movw	r3, #14272	; 0x37c0
2000264e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002652:	601a      	str	r2, [r3, #0]
    g_FrequencyPCLK1 = SystemCoreClock / PclkDiv1;
20002654:	f243 73bc 	movw	r3, #14268	; 0x37bc
20002658:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000265c:	681a      	ldr	r2, [r3, #0]
2000265e:	697b      	ldr	r3, [r7, #20]
20002660:	fbb2 f2f3 	udiv	r2, r2, r3
20002664:	f243 73c4 	movw	r3, #14276	; 0x37c4
20002668:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000266c:	601a      	str	r2, [r3, #0]
    g_FrequencyACE = SystemCoreClock / AceDiv;
2000266e:	f243 73bc 	movw	r3, #14268	; 0x37bc
20002672:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002676:	681a      	ldr	r2, [r3, #0]
20002678:	69bb      	ldr	r3, [r7, #24]
2000267a:	fbb2 f2f3 	udiv	r2, r2, r3
2000267e:	f243 73c8 	movw	r3, #14280	; 0x37c8
20002682:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002686:	601a      	str	r2, [r3, #0]
    g_FrequencyFPGA = SystemCoreClock / FabDiv;
20002688:	f243 73bc 	movw	r3, #14268	; 0x37bc
2000268c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002690:	681a      	ldr	r2, [r3, #0]
20002692:	69fb      	ldr	r3, [r7, #28]
20002694:	fbb2 f2f3 	udiv	r2, r2, r3
20002698:	f243 73cc 	movw	r3, #14284	; 0x37cc
2000269c:	f2c2 0300 	movt	r3, #8192	; 0x2000
200026a0:	601a      	str	r2, [r3, #0]
    
    /* Keep SystemFrequency as well as SystemCoreClock for legacy reasons. */
    SystemFrequency = SystemCoreClock;
200026a2:	f243 73bc 	movw	r3, #14268	; 0x37bc
200026a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200026aa:	681a      	ldr	r2, [r3, #0]
200026ac:	f243 73b8 	movw	r3, #14264	; 0x37b8
200026b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200026b4:	601a      	str	r2, [r3, #0]
}
200026b6:	f107 0728 	add.w	r7, r7, #40	; 0x28
200026ba:	46bd      	mov	sp, r7
200026bc:	bd80      	pop	{r7, pc}
200026be:	bf00      	nop

200026c0 <GetSystemClock>:
 * retrieved from eNVM spare pages.
 * The FCLK frequency value selected in the MSS Configurator software tool is
 * stored in eNVM spare pages as part of the Actel system boot configuration data.
 */
uint32_t GetSystemClock( void )
{
200026c0:	b480      	push	{r7}
200026c2:	b08b      	sub	sp, #44	; 0x2c
200026c4:	af00      	add	r7, sp, #0
    uint32_t fclk = 0uL;
200026c6:	f04f 0300 	mov.w	r3, #0
200026ca:	607b      	str	r3, [r7, #4]
    
    uint32_t * p_sysboot_key = SYSBOOT_KEY_ADDR;
200026cc:	f640 031c 	movw	r3, #2076	; 0x81c
200026d0:	f2c6 0308 	movt	r3, #24584	; 0x6008
200026d4:	60bb      	str	r3, [r7, #8]
    uint32_t * p_idcode = IDCODE_LOCATION;
200026d6:	f240 2330 	movw	r3, #560	; 0x230
200026da:	f2c6 0308 	movt	r3, #24584	; 0x6008
200026de:	60fb      	str	r3, [r7, #12]
    uint32_t idcode;
	
    idcode = *p_idcode & ~IDCODE_DEV_REV_MASK;
200026e0:	68fb      	ldr	r3, [r7, #12]
200026e2:	681b      	ldr	r3, [r3, #0]
200026e4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
200026e8:	613b      	str	r3, [r7, #16]
	
    if ( A2F060IFX_ID == idcode )
200026ea:	693a      	ldr	r2, [r7, #16]
200026ec:	f241 13cf 	movw	r3, #4559	; 0x11cf
200026f0:	f2c0 53a1 	movt	r3, #1441	; 0x5a1
200026f4:	429a      	cmp	r2, r3
200026f6:	d108      	bne.n	2000270a <GetSystemClock+0x4a>
    {
        uint32_t *p_fclk = SYSBOOT_A2F060_FCLK_ADDR;
200026f8:	f64e 732c 	movw	r3, #61228	; 0xef2c
200026fc:	f2c6 0301 	movt	r3, #24577	; 0x6001
20002700:	617b      	str	r3, [r7, #20]
        fclk = *p_fclk;
20002702:	697b      	ldr	r3, [r7, #20]
20002704:	681b      	ldr	r3, [r3, #0]
20002706:	607b      	str	r3, [r7, #4]
20002708:	e03d      	b.n	20002786 <GetSystemClock+0xc6>
    }
    else if ( SYSBOOT_KEY_VALUE == *p_sysboot_key )
2000270a:	68bb      	ldr	r3, [r7, #8]
2000270c:	681a      	ldr	r2, [r3, #0]
2000270e:	f244 3341 	movw	r3, #17217	; 0x4341
20002712:	f6c4 4354 	movt	r3, #19540	; 0x4c54
20002716:	429a      	cmp	r2, r3
20002718:	d135      	bne.n	20002786 <GetSystemClock+0xc6>
    {
        /* Actel system boot programmed, check if it has the FCLK value stored. */
        uint32_t *p_sysboot_version = SYSBOOT_VERSION_ADDR;
2000271a:	f640 0340 	movw	r3, #2112	; 0x840
2000271e:	f2c6 0308 	movt	r3, #24584	; 0x6008
20002722:	61bb      	str	r3, [r7, #24]
        uint32_t sysboot_version = *p_sysboot_version;
20002724:	69bb      	ldr	r3, [r7, #24]
20002726:	681b      	ldr	r3, [r3, #0]
20002728:	61fb      	str	r3, [r7, #28]
        
        sysboot_version &= SYSBOOT_VERSION_MASK;
2000272a:	69fb      	ldr	r3, [r7, #28]
2000272c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
20002730:	61fb      	str	r3, [r7, #28]
        
        if ( sysboot_version >= MIN_SYSBOOT_VERSION )
20002732:	69fa      	ldr	r2, [r7, #28]
20002734:	f240 3300 	movw	r3, #768	; 0x300
20002738:	f2c0 0301 	movt	r3, #1
2000273c:	429a      	cmp	r2, r3
2000273e:	d922      	bls.n	20002786 <GetSystemClock+0xc6>
        {
            /* Handle change of eNVM location of FCLK between 1.3.x and 2.x.x versions of the system boot. */
            if ( sysboot_version < SYSBOOT_VERSION_2_X )
20002740:	69fa      	ldr	r2, [r7, #28]
20002742:	f64f 73ff 	movw	r3, #65535	; 0xffff
20002746:	f2c0 0301 	movt	r3, #1
2000274a:	429a      	cmp	r2, r3
2000274c:	d808      	bhi.n	20002760 <GetSystemClock+0xa0>
            {
                /* Read FCLK value from MSS configurator generated configuration
                 * data stored in eNVM spare pages as part of system boot version 1.3.x
                 * configuration tables. */
                uint32_t *p_fclk = SYSBOOT_1_3_FCLK_ADDR;
2000274e:	f241 632c 	movw	r3, #5676	; 0x162c
20002752:	f2c6 0308 	movt	r3, #24584	; 0x6008
20002756:	623b      	str	r3, [r7, #32]
                fclk = *p_fclk;
20002758:	6a3b      	ldr	r3, [r7, #32]
2000275a:	681b      	ldr	r3, [r3, #0]
2000275c:	607b      	str	r3, [r7, #4]
2000275e:	e012      	b.n	20002786 <GetSystemClock+0xc6>
            }
            else if ( sysboot_version < MAX_SYSBOOT_VERSION )
20002760:	69fa      	ldr	r2, [r7, #28]
20002762:	f64f 73ff 	movw	r3, #65535	; 0xffff
20002766:	f2c0 0302 	movt	r3, #2
2000276a:	429a      	cmp	r2, r3
2000276c:	d808      	bhi.n	20002780 <GetSystemClock+0xc0>
            {
                /* Read FCLK value from MSS configurator generated configuration
                 * data stored in eNVM spare pages as part of system boot version 2.x.x
                 * configuration tables. */
                uint32_t *p_fclk = SYSBOOT_2_x_FCLK_ADDR;
2000276e:	f641 63ac 	movw	r3, #7852	; 0x1eac
20002772:	f2c6 0308 	movt	r3, #24584	; 0x6008
20002776:	627b      	str	r3, [r7, #36]	; 0x24
                fclk = *p_fclk;
20002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000277a:	681b      	ldr	r3, [r3, #0]
2000277c:	607b      	str	r3, [r7, #4]
2000277e:	e002      	b.n	20002786 <GetSystemClock+0xc6>
            }
            else
            {
                fclk = 0uL;
20002780:	f04f 0300 	mov.w	r3, #0
20002784:	607b      	str	r3, [r7, #4]
            }
        }
    }
    
    if ( 0uL == fclk )
20002786:	687b      	ldr	r3, [r7, #4]
20002788:	2b00      	cmp	r3, #0
2000278a:	d105      	bne.n	20002798 <GetSystemClock+0xd8>
        /* 
         * Could not retrieve FCLK from system boot configuration data. Fall back
         * to using SMARTFUSION_FCLK_FREQ which must then be defined as part of
         * project settings.
         */
        ASSERT( SMARTFUSION_FCLK_FREQ_DEFINED );
2000278c:	be00      	bkpt	0x0000
        fclk = SMARTFUSION_FCLK_FREQ;
2000278e:	f647 0340 	movw	r3, #30784	; 0x7840
20002792:	f2c0 137d 	movt	r3, #381	; 0x17d
20002796:	607b      	str	r3, [r7, #4]
    }
    
    return fclk;
20002798:	687b      	ldr	r3, [r7, #4]
}
2000279a:	4618      	mov	r0, r3
2000279c:	f107 072c 	add.w	r7, r7, #44	; 0x2c
200027a0:	46bd      	mov	sp, r7
200027a2:	bc80      	pop	{r7}
200027a4:	4770      	bx	lr
200027a6:	bf00      	nop

200027a8 <ace_init_convert>:

/*-------------------------------------------------------------------------*//**
 *
 */
void ace_init_convert(void)
{
200027a8:	b480      	push	{r7}
200027aa:	b087      	sub	sp, #28
200027ac:	af00      	add	r7, sp, #0
    uint8_t abps_idx;
    int32_t channel;
    uint32_t saved_pc2_ctrl;
    
    /* Pause the SSE PC2 while accesses to ACB from APB3 are taking place. */
    saved_pc2_ctrl = ACE->PC2_CTRL;
200027ae:	f240 0300 	movw	r3, #0
200027b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
200027b6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
200027ba:	60fb      	str	r3, [r7, #12]
    ACE->PC2_CTRL = 0u;
200027bc:	f240 0300 	movw	r3, #0
200027c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
200027c4:	f04f 0200 	mov.w	r2, #0
200027c8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    
    /* Populate the g_gdec_lut look-up table. */
    for(abps_idx = 0u; abps_idx < MAX_NB_OF_APBS; ++abps_idx)
200027cc:	f04f 0300 	mov.w	r3, #0
200027d0:	71fb      	strb	r3, [r7, #7]
200027d2:	e039      	b.n	20002848 <ace_init_convert+0xa0>
    {
        uint8_t quad_id;
        uint8_t acb_config_byte;
        uint8_t channel_is_abps2;
        
        quad_id = abps_idx / 2u;
200027d4:	79fb      	ldrb	r3, [r7, #7]
200027d6:	ea4f 0353 	mov.w	r3, r3, lsr #1
200027da:	747b      	strb	r3, [r7, #17]
        acb_config_byte = ACE->ACB_DATA[quad_id].b8;
200027dc:	f240 0200 	movw	r2, #0
200027e0:	f2c4 0202 	movt	r2, #16386	; 0x4002
200027e4:	7c79      	ldrb	r1, [r7, #17]
200027e6:	460b      	mov	r3, r1
200027e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
200027ec:	440b      	add	r3, r1
200027ee:	ea4f 1303 	mov.w	r3, r3, lsl #4
200027f2:	4413      	add	r3, r2
200027f4:	f503 7308 	add.w	r3, r3, #544	; 0x220
200027f8:	791b      	ldrb	r3, [r3, #4]
200027fa:	74bb      	strb	r3, [r7, #18]
        channel_is_abps2 = abps_idx & 0x01u;
200027fc:	79fb      	ldrb	r3, [r7, #7]
200027fe:	f003 0301 	and.w	r3, r3, #1
20002802:	74fb      	strb	r3, [r7, #19]
        if(channel_is_abps2)
20002804:	7cfb      	ldrb	r3, [r7, #19]
20002806:	2b00      	cmp	r3, #0
20002808:	d00d      	beq.n	20002826 <ace_init_convert+0x7e>
        {
            /* ABPS2 */
            g_gdec_lut[abps_idx] = (acb_config_byte >> 5u) & 0x03u;
2000280a:	79f9      	ldrb	r1, [r7, #7]
2000280c:	7cbb      	ldrb	r3, [r7, #18]
2000280e:	ea4f 1353 	mov.w	r3, r3, lsr #5
20002812:	b2db      	uxtb	r3, r3
20002814:	461a      	mov	r2, r3
20002816:	f002 0203 	and.w	r2, r2, #3
2000281a:	f643 0314 	movw	r3, #14356	; 0x3814
2000281e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002822:	545a      	strb	r2, [r3, r1]
20002824:	e00c      	b.n	20002840 <ace_init_convert+0x98>
        }
        else
        {
            /* ABPS1 */
            g_gdec_lut[abps_idx] = (acb_config_byte >> 1u) & 0x03u;
20002826:	79f9      	ldrb	r1, [r7, #7]
20002828:	7cbb      	ldrb	r3, [r7, #18]
2000282a:	ea4f 0353 	mov.w	r3, r3, lsr #1
2000282e:	b2db      	uxtb	r3, r3
20002830:	461a      	mov	r2, r3
20002832:	f002 0203 	and.w	r2, r2, #3
20002836:	f643 0314 	movw	r3, #14356	; 0x3814
2000283a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000283e:	545a      	strb	r2, [r3, r1]
    /* Pause the SSE PC2 while accesses to ACB from APB3 are taking place. */
    saved_pc2_ctrl = ACE->PC2_CTRL;
    ACE->PC2_CTRL = 0u;
    
    /* Populate the g_gdec_lut look-up table. */
    for(abps_idx = 0u; abps_idx < MAX_NB_OF_APBS; ++abps_idx)
20002840:	79fb      	ldrb	r3, [r7, #7]
20002842:	f103 0301 	add.w	r3, r3, #1
20002846:	71fb      	strb	r3, [r7, #7]
20002848:	79fb      	ldrb	r3, [r7, #7]
2000284a:	2b09      	cmp	r3, #9
2000284c:	d9c2      	bls.n	200027d4 <ace_init_convert+0x2c>
            g_gdec_lut[abps_idx] = (acb_config_byte >> 1u) & 0x03u;
        }
    }
    
    /* Populate the channel_type_lut_h look-up table. */
    for(channel = 0; channel < ACE_NB_OF_INPUT_CHANNELS; ++channel)
2000284e:	f04f 0300 	mov.w	r3, #0
20002852:	60bb      	str	r3, [r7, #8]
20002854:	e073      	b.n	2000293e <ace_init_convert+0x196>
        uint8_t quad_id;
        uint8_t acb_config_byte;
        adc_channel_id_t channel_id;
        channel_type_t channel_type;
    
        channel_id = g_ace_channel_desc_table[channel].signal_id;
20002856:	68ba      	ldr	r2, [r7, #8]
20002858:	f243 73d0 	movw	r3, #14288	; 0x37d0
2000285c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002860:	ea4f 1202 	mov.w	r2, r2, lsl #4
20002864:	4413      	add	r3, r2
20002866:	791b      	ldrb	r3, [r3, #4]
20002868:	75bb      	strb	r3, [r7, #22]
        quad_id = channel_quad_lut[channel_id];
2000286a:	7dba      	ldrb	r2, [r7, #22]
2000286c:	f243 735c 	movw	r3, #14172	; 0x375c
20002870:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002874:	5c9b      	ldrb	r3, [r3, r2]
20002876:	753b      	strb	r3, [r7, #20]
        
        switch (channel_type_lut[channel_id])
20002878:	7dba      	ldrb	r2, [r7, #22]
2000287a:	f243 732c 	movw	r3, #14124	; 0x372c
2000287e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002882:	5c9b      	ldrb	r3, [r3, r2]
20002884:	2b01      	cmp	r3, #1
20002886:	d007      	beq.n	20002898 <ace_init_convert+0xf0>
20002888:	2b02      	cmp	r3, #2
2000288a:	d027      	beq.n	200028dc <ace_init_convert+0x134>
2000288c:	2b00      	cmp	r3, #0
2000288e:	d147      	bne.n	20002920 <ace_init_convert+0x178>
        {
            case VOLTAGE_CHANNEL:
                channel_type = VOLTAGE;
20002890:	f04f 0300 	mov.w	r3, #0
20002894:	75fb      	strb	r3, [r7, #23]
                break;
20002896:	e047      	b.n	20002928 <ace_init_convert+0x180>
                
            case CURRENT_CHANNEL:
                ASSERT( quad_id != INVALID_QUAD_ID );
20002898:	7d3b      	ldrb	r3, [r7, #20]
2000289a:	2bff      	cmp	r3, #255	; 0xff
2000289c:	d100      	bne.n	200028a0 <ace_init_convert+0xf8>
2000289e:	be00      	bkpt	0x0000
                acb_config_byte = ACE->ACB_DATA[quad_id].b9;
200028a0:	f240 0200 	movw	r2, #0
200028a4:	f2c4 0202 	movt	r2, #16386	; 0x4002
200028a8:	7d39      	ldrb	r1, [r7, #20]
200028aa:	460b      	mov	r3, r1
200028ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
200028b0:	440b      	add	r3, r1
200028b2:	ea4f 1303 	mov.w	r3, r3, lsl #4
200028b6:	4413      	add	r3, r2
200028b8:	f503 7308 	add.w	r3, r3, #544	; 0x220
200028bc:	7a1b      	ldrb	r3, [r3, #8]
200028be:	757b      	strb	r3, [r7, #21]
                if ( acb_config_byte & 0x01u )
200028c0:	7d7b      	ldrb	r3, [r7, #21]
200028c2:	f003 0301 	and.w	r3, r3, #1
200028c6:	b2db      	uxtb	r3, r3
200028c8:	2b00      	cmp	r3, #0
200028ca:	d003      	beq.n	200028d4 <ace_init_convert+0x12c>
                {
                    channel_type = VOLTAGE;
200028cc:	f04f 0300 	mov.w	r3, #0
200028d0:	75fb      	strb	r3, [r7, #23]
                }
                else
                {
                    channel_type = CURRENT;
                }
                break;
200028d2:	e029      	b.n	20002928 <ace_init_convert+0x180>
                {
                    channel_type = VOLTAGE;
                }
                else
                {
                    channel_type = CURRENT;
200028d4:	f04f 0301 	mov.w	r3, #1
200028d8:	75fb      	strb	r3, [r7, #23]
                }
                break;
200028da:	e025      	b.n	20002928 <ace_init_convert+0x180>
            
            case TEMPERATURE_CHANNEL:
                ASSERT( quad_id != INVALID_QUAD_ID );
200028dc:	7d3b      	ldrb	r3, [r7, #20]
200028de:	2bff      	cmp	r3, #255	; 0xff
200028e0:	d100      	bne.n	200028e4 <ace_init_convert+0x13c>
200028e2:	be00      	bkpt	0x0000
                acb_config_byte = ACE->ACB_DATA[quad_id].b10;
200028e4:	f240 0200 	movw	r2, #0
200028e8:	f2c4 0202 	movt	r2, #16386	; 0x4002
200028ec:	7d39      	ldrb	r1, [r7, #20]
200028ee:	460b      	mov	r3, r1
200028f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
200028f4:	440b      	add	r3, r1
200028f6:	ea4f 1303 	mov.w	r3, r3, lsl #4
200028fa:	4413      	add	r3, r2
200028fc:	f503 730a 	add.w	r3, r3, #552	; 0x228
20002900:	791b      	ldrb	r3, [r3, #4]
20002902:	757b      	strb	r3, [r7, #21]
                if ( acb_config_byte & 0x01u )
20002904:	7d7b      	ldrb	r3, [r7, #21]
20002906:	f003 0301 	and.w	r3, r3, #1
2000290a:	b2db      	uxtb	r3, r3
2000290c:	2b00      	cmp	r3, #0
2000290e:	d003      	beq.n	20002918 <ace_init_convert+0x170>
                {
                    channel_type = VOLTAGE;
20002910:	f04f 0300 	mov.w	r3, #0
20002914:	75fb      	strb	r3, [r7, #23]
                }
                else
                {
                    channel_type = TEMPERATURE;
                }
                break;
20002916:	e007      	b.n	20002928 <ace_init_convert+0x180>
                {
                    channel_type = VOLTAGE;
                }
                else
                {
                    channel_type = TEMPERATURE;
20002918:	f04f 0302 	mov.w	r3, #2
2000291c:	75fb      	strb	r3, [r7, #23]
                }
                break;
2000291e:	e003      	b.n	20002928 <ace_init_convert+0x180>
                
            default:
                ASSERT(0);
20002920:	be00      	bkpt	0x0000
                channel_type = VOLTAGE;
20002922:	f04f 0300 	mov.w	r3, #0
20002926:	75fb      	strb	r3, [r7, #23]
                break;
        }
        
        channel_type_lut_h[channel] = channel_type;
20002928:	68ba      	ldr	r2, [r7, #8]
2000292a:	f643 0320 	movw	r3, #14368	; 0x3820
2000292e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002932:	7df9      	ldrb	r1, [r7, #23]
20002934:	5499      	strb	r1, [r3, r2]
            g_gdec_lut[abps_idx] = (acb_config_byte >> 1u) & 0x03u;
        }
    }
    
    /* Populate the channel_type_lut_h look-up table. */
    for(channel = 0; channel < ACE_NB_OF_INPUT_CHANNELS; ++channel)
20002936:	68bb      	ldr	r3, [r7, #8]
20002938:	f103 0301 	add.w	r3, r3, #1
2000293c:	60bb      	str	r3, [r7, #8]
2000293e:	68bb      	ldr	r3, [r7, #8]
20002940:	2b03      	cmp	r3, #3
20002942:	dd88      	ble.n	20002856 <ace_init_convert+0xae>
        
        channel_type_lut_h[channel] = channel_type;
    }
    
    /* Restore SSE PC2 operations. */
    ACE->PC2_CTRL = saved_pc2_ctrl;
20002944:	f240 0300 	movw	r3, #0
20002948:	f2c4 0302 	movt	r3, #16386	; 0x4002
2000294c:	68fa      	ldr	r2, [r7, #12]
2000294e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
20002952:	f107 071c 	add.w	r7, r7, #28
20002956:	46bd      	mov	sp, r7
20002958:	bc80      	pop	{r7}
2000295a:	4770      	bx	lr

2000295c <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
2000295c:	b480      	push	{r7}
2000295e:	b083      	sub	sp, #12
20002960:	af00      	add	r7, sp, #0
20002962:	4603      	mov	r3, r0
20002964:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20002966:	f24e 1300 	movw	r3, #57600	; 0xe100
2000296a:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000296e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20002972:	ea4f 1252 	mov.w	r2, r2, lsr #5
20002976:	88f9      	ldrh	r1, [r7, #6]
20002978:	f001 011f 	and.w	r1, r1, #31
2000297c:	f04f 0001 	mov.w	r0, #1
20002980:	fa00 f101 	lsl.w	r1, r0, r1
20002984:	f102 0260 	add.w	r2, r2, #96	; 0x60
20002988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
2000298c:	f107 070c 	add.w	r7, r7, #12
20002990:	46bd      	mov	sp, r7
20002992:	bc80      	pop	{r7}
20002994:	4770      	bx	lr
20002996:	bf00      	nop

20002998 <ace_init_flags>:
/*-------------------------------------------------------------------------*//**
  Intialise the ACE driver's internal data structures used by flag control
  functions.
 */
void ace_init_flags( void )
{
20002998:	b480      	push	{r7}
2000299a:	af00      	add	r7, sp, #0
        }
        
        g_ppe_global_flags_isr = 0u;
    }
#endif
}
2000299c:	46bd      	mov	sp, r7
2000299e:	bc80      	pop	{r7}
200029a0:	4770      	bx	lr
200029a2:	bf00      	nop

200029a4 <process_flag_irq>:
/*-------------------------------------------------------------------------*//**
 * Actual PPE flag interrupt service routines:
 */

static void process_flag_irq( uint8_t threshold_flag_id )
{
200029a4:	b480      	push	{r7}
200029a6:	b083      	sub	sp, #12
200029a8:	af00      	add	r7, sp, #0
200029aa:	4603      	mov	r3, r0
200029ac:	71fb      	strb	r3, [r7, #7]
            dummy_read = *(flags_irq_clear_regs_lut[flag_group]);
            ++dummy_read;
        }
    }
#endif
}
200029ae:	f107 070c 	add.w	r7, r7, #12
200029b2:	46bd      	mov	sp, r7
200029b4:	bc80      	pop	{r7}
200029b6:	4770      	bx	lr

200029b8 <ACE_PPE_Flag0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag0_IRQHandler( void )
#else
void ACE_PPE_Flag0_IRQHandler( void )
#endif
{
200029b8:	4668      	mov	r0, sp
200029ba:	f020 0107 	bic.w	r1, r0, #7
200029be:	468d      	mov	sp, r1
200029c0:	b589      	push	{r0, r3, r7, lr}
200029c2:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG0 );
200029c4:	f04f 0000 	mov.w	r0, #0
200029c8:	f7ff ffec 	bl	200029a4 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag0_IRQn );
200029cc:	f04f 0076 	mov.w	r0, #118	; 0x76
200029d0:	f7ff ffc4 	bl	2000295c <NVIC_ClearPendingIRQ>
}
200029d4:	46bd      	mov	sp, r7
200029d6:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200029da:	4685      	mov	sp, r0
200029dc:	4770      	bx	lr
200029de:	bf00      	nop

200029e0 <ACE_PPE_Flag1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag1_IRQHandler( void )
#else
void ACE_PPE_Flag1_IRQHandler( void )
#endif
{
200029e0:	4668      	mov	r0, sp
200029e2:	f020 0107 	bic.w	r1, r0, #7
200029e6:	468d      	mov	sp, r1
200029e8:	b589      	push	{r0, r3, r7, lr}
200029ea:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG1 );
200029ec:	f04f 0001 	mov.w	r0, #1
200029f0:	f7ff ffd8 	bl	200029a4 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag1_IRQn );
200029f4:	f04f 0077 	mov.w	r0, #119	; 0x77
200029f8:	f7ff ffb0 	bl	2000295c <NVIC_ClearPendingIRQ>
}
200029fc:	46bd      	mov	sp, r7
200029fe:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002a02:	4685      	mov	sp, r0
20002a04:	4770      	bx	lr
20002a06:	bf00      	nop

20002a08 <ACE_PPE_Flag2_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag2_IRQHandler( void )
#else
void ACE_PPE_Flag2_IRQHandler( void )
#endif
{
20002a08:	4668      	mov	r0, sp
20002a0a:	f020 0107 	bic.w	r1, r0, #7
20002a0e:	468d      	mov	sp, r1
20002a10:	b589      	push	{r0, r3, r7, lr}
20002a12:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG2 );
20002a14:	f04f 0002 	mov.w	r0, #2
20002a18:	f7ff ffc4 	bl	200029a4 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag2_IRQn );
20002a1c:	f04f 0078 	mov.w	r0, #120	; 0x78
20002a20:	f7ff ff9c 	bl	2000295c <NVIC_ClearPendingIRQ>
}
20002a24:	46bd      	mov	sp, r7
20002a26:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002a2a:	4685      	mov	sp, r0
20002a2c:	4770      	bx	lr
20002a2e:	bf00      	nop

20002a30 <ACE_PPE_Flag3_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag3_IRQHandler( void )
#else
void ACE_PPE_Flag3_IRQHandler( void )
#endif
{
20002a30:	4668      	mov	r0, sp
20002a32:	f020 0107 	bic.w	r1, r0, #7
20002a36:	468d      	mov	sp, r1
20002a38:	b589      	push	{r0, r3, r7, lr}
20002a3a:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG3 );
20002a3c:	f04f 0003 	mov.w	r0, #3
20002a40:	f7ff ffb0 	bl	200029a4 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag3_IRQn );
20002a44:	f04f 0079 	mov.w	r0, #121	; 0x79
20002a48:	f7ff ff88 	bl	2000295c <NVIC_ClearPendingIRQ>
}
20002a4c:	46bd      	mov	sp, r7
20002a4e:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002a52:	4685      	mov	sp, r0
20002a54:	4770      	bx	lr
20002a56:	bf00      	nop

20002a58 <ACE_PPE_Flag4_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag4_IRQHandler( void )
#else
void ACE_PPE_Flag4_IRQHandler( void )
#endif
{
20002a58:	4668      	mov	r0, sp
20002a5a:	f020 0107 	bic.w	r1, r0, #7
20002a5e:	468d      	mov	sp, r1
20002a60:	b589      	push	{r0, r3, r7, lr}
20002a62:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG4 );
20002a64:	f04f 0004 	mov.w	r0, #4
20002a68:	f7ff ff9c 	bl	200029a4 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag4_IRQn );
20002a6c:	f04f 007a 	mov.w	r0, #122	; 0x7a
20002a70:	f7ff ff74 	bl	2000295c <NVIC_ClearPendingIRQ>
}
20002a74:	46bd      	mov	sp, r7
20002a76:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002a7a:	4685      	mov	sp, r0
20002a7c:	4770      	bx	lr
20002a7e:	bf00      	nop

20002a80 <ACE_PPE_Flag5_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag5_IRQHandler( void )
#else
void ACE_PPE_Flag5_IRQHandler( void )
#endif
{
20002a80:	4668      	mov	r0, sp
20002a82:	f020 0107 	bic.w	r1, r0, #7
20002a86:	468d      	mov	sp, r1
20002a88:	b589      	push	{r0, r3, r7, lr}
20002a8a:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG5 );
20002a8c:	f04f 0005 	mov.w	r0, #5
20002a90:	f7ff ff88 	bl	200029a4 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag5_IRQn );
20002a94:	f04f 007b 	mov.w	r0, #123	; 0x7b
20002a98:	f7ff ff60 	bl	2000295c <NVIC_ClearPendingIRQ>
}
20002a9c:	46bd      	mov	sp, r7
20002a9e:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002aa2:	4685      	mov	sp, r0
20002aa4:	4770      	bx	lr
20002aa6:	bf00      	nop

20002aa8 <ACE_PPE_Flag6_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag6_IRQHandler( void )
#else
void ACE_PPE_Flag6_IRQHandler( void )
#endif
{
20002aa8:	4668      	mov	r0, sp
20002aaa:	f020 0107 	bic.w	r1, r0, #7
20002aae:	468d      	mov	sp, r1
20002ab0:	b589      	push	{r0, r3, r7, lr}
20002ab2:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG6 );
20002ab4:	f04f 0006 	mov.w	r0, #6
20002ab8:	f7ff ff74 	bl	200029a4 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag6_IRQn );
20002abc:	f04f 007c 	mov.w	r0, #124	; 0x7c
20002ac0:	f7ff ff4c 	bl	2000295c <NVIC_ClearPendingIRQ>
}
20002ac4:	46bd      	mov	sp, r7
20002ac6:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002aca:	4685      	mov	sp, r0
20002acc:	4770      	bx	lr
20002ace:	bf00      	nop

20002ad0 <ACE_PPE_Flag7_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag7_IRQHandler( void )
#else
void ACE_PPE_Flag7_IRQHandler( void )
#endif
{
20002ad0:	4668      	mov	r0, sp
20002ad2:	f020 0107 	bic.w	r1, r0, #7
20002ad6:	468d      	mov	sp, r1
20002ad8:	b589      	push	{r0, r3, r7, lr}
20002ada:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG7 );
20002adc:	f04f 0007 	mov.w	r0, #7
20002ae0:	f7ff ff60 	bl	200029a4 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag7_IRQn );
20002ae4:	f04f 007d 	mov.w	r0, #125	; 0x7d
20002ae8:	f7ff ff38 	bl	2000295c <NVIC_ClearPendingIRQ>
}
20002aec:	46bd      	mov	sp, r7
20002aee:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002af2:	4685      	mov	sp, r0
20002af4:	4770      	bx	lr
20002af6:	bf00      	nop

20002af8 <ACE_PPE_Flag8_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag8_IRQHandler( void )
#else
void ACE_PPE_Flag8_IRQHandler( void )
#endif
{
20002af8:	4668      	mov	r0, sp
20002afa:	f020 0107 	bic.w	r1, r0, #7
20002afe:	468d      	mov	sp, r1
20002b00:	b589      	push	{r0, r3, r7, lr}
20002b02:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG8 );
20002b04:	f04f 0008 	mov.w	r0, #8
20002b08:	f7ff ff4c 	bl	200029a4 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag8_IRQn );
20002b0c:	f04f 007e 	mov.w	r0, #126	; 0x7e
20002b10:	f7ff ff24 	bl	2000295c <NVIC_ClearPendingIRQ>
}
20002b14:	46bd      	mov	sp, r7
20002b16:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002b1a:	4685      	mov	sp, r0
20002b1c:	4770      	bx	lr
20002b1e:	bf00      	nop

20002b20 <ACE_PPE_Flag9_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag9_IRQHandler( void )
#else
void ACE_PPE_Flag9_IRQHandler( void )
#endif
{
20002b20:	4668      	mov	r0, sp
20002b22:	f020 0107 	bic.w	r1, r0, #7
20002b26:	468d      	mov	sp, r1
20002b28:	b589      	push	{r0, r3, r7, lr}
20002b2a:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG9 );
20002b2c:	f04f 0009 	mov.w	r0, #9
20002b30:	f7ff ff38 	bl	200029a4 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag9_IRQn );
20002b34:	f04f 007f 	mov.w	r0, #127	; 0x7f
20002b38:	f7ff ff10 	bl	2000295c <NVIC_ClearPendingIRQ>
}
20002b3c:	46bd      	mov	sp, r7
20002b3e:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002b42:	4685      	mov	sp, r0
20002b44:	4770      	bx	lr
20002b46:	bf00      	nop

20002b48 <ACE_PPE_Flag10_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag10_IRQHandler( void )
#else
void ACE_PPE_Flag10_IRQHandler( void )
#endif
{
20002b48:	4668      	mov	r0, sp
20002b4a:	f020 0107 	bic.w	r1, r0, #7
20002b4e:	468d      	mov	sp, r1
20002b50:	b589      	push	{r0, r3, r7, lr}
20002b52:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG10 );
20002b54:	f04f 000a 	mov.w	r0, #10
20002b58:	f7ff ff24 	bl	200029a4 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag10_IRQn );
20002b5c:	f04f 0080 	mov.w	r0, #128	; 0x80
20002b60:	f7ff fefc 	bl	2000295c <NVIC_ClearPendingIRQ>
}
20002b64:	46bd      	mov	sp, r7
20002b66:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002b6a:	4685      	mov	sp, r0
20002b6c:	4770      	bx	lr
20002b6e:	bf00      	nop

20002b70 <ACE_PPE_Flag11_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag11_IRQHandler( void )
#else
void ACE_PPE_Flag11_IRQHandler( void )
#endif
{
20002b70:	4668      	mov	r0, sp
20002b72:	f020 0107 	bic.w	r1, r0, #7
20002b76:	468d      	mov	sp, r1
20002b78:	b589      	push	{r0, r3, r7, lr}
20002b7a:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG11 );
20002b7c:	f04f 000b 	mov.w	r0, #11
20002b80:	f7ff ff10 	bl	200029a4 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag11_IRQn );
20002b84:	f04f 0081 	mov.w	r0, #129	; 0x81
20002b88:	f7ff fee8 	bl	2000295c <NVIC_ClearPendingIRQ>
}
20002b8c:	46bd      	mov	sp, r7
20002b8e:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002b92:	4685      	mov	sp, r0
20002b94:	4770      	bx	lr
20002b96:	bf00      	nop

20002b98 <ACE_PPE_Flag12_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag12_IRQHandler( void )
#else
void ACE_PPE_Flag12_IRQHandler( void )
#endif
{
20002b98:	4668      	mov	r0, sp
20002b9a:	f020 0107 	bic.w	r1, r0, #7
20002b9e:	468d      	mov	sp, r1
20002ba0:	b589      	push	{r0, r3, r7, lr}
20002ba2:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG12 );
20002ba4:	f04f 000c 	mov.w	r0, #12
20002ba8:	f7ff fefc 	bl	200029a4 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag12_IRQn );
20002bac:	f04f 0082 	mov.w	r0, #130	; 0x82
20002bb0:	f7ff fed4 	bl	2000295c <NVIC_ClearPendingIRQ>
}
20002bb4:	46bd      	mov	sp, r7
20002bb6:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002bba:	4685      	mov	sp, r0
20002bbc:	4770      	bx	lr
20002bbe:	bf00      	nop

20002bc0 <ACE_PPE_Flag13_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag13_IRQHandler( void )
#else
void ACE_PPE_Flag13_IRQHandler( void )
#endif
{
20002bc0:	4668      	mov	r0, sp
20002bc2:	f020 0107 	bic.w	r1, r0, #7
20002bc6:	468d      	mov	sp, r1
20002bc8:	b589      	push	{r0, r3, r7, lr}
20002bca:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG13 );
20002bcc:	f04f 000d 	mov.w	r0, #13
20002bd0:	f7ff fee8 	bl	200029a4 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag13_IRQn );
20002bd4:	f04f 0083 	mov.w	r0, #131	; 0x83
20002bd8:	f7ff fec0 	bl	2000295c <NVIC_ClearPendingIRQ>
}
20002bdc:	46bd      	mov	sp, r7
20002bde:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002be2:	4685      	mov	sp, r0
20002be4:	4770      	bx	lr
20002be6:	bf00      	nop

20002be8 <ACE_PPE_Flag14_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag14_IRQHandler( void )
#else
void ACE_PPE_Flag14_IRQHandler( void )
#endif
{
20002be8:	4668      	mov	r0, sp
20002bea:	f020 0107 	bic.w	r1, r0, #7
20002bee:	468d      	mov	sp, r1
20002bf0:	b589      	push	{r0, r3, r7, lr}
20002bf2:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG14 );
20002bf4:	f04f 000e 	mov.w	r0, #14
20002bf8:	f7ff fed4 	bl	200029a4 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag14_IRQn );
20002bfc:	f04f 0084 	mov.w	r0, #132	; 0x84
20002c00:	f7ff feac 	bl	2000295c <NVIC_ClearPendingIRQ>
}
20002c04:	46bd      	mov	sp, r7
20002c06:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002c0a:	4685      	mov	sp, r0
20002c0c:	4770      	bx	lr
20002c0e:	bf00      	nop

20002c10 <ACE_PPE_Flag15_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag15_IRQHandler( void )
#else
void ACE_PPE_Flag15_IRQHandler( void )
#endif
{
20002c10:	4668      	mov	r0, sp
20002c12:	f020 0107 	bic.w	r1, r0, #7
20002c16:	468d      	mov	sp, r1
20002c18:	b589      	push	{r0, r3, r7, lr}
20002c1a:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG15 );
20002c1c:	f04f 000f 	mov.w	r0, #15
20002c20:	f7ff fec0 	bl	200029a4 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag15_IRQn );
20002c24:	f04f 0085 	mov.w	r0, #133	; 0x85
20002c28:	f7ff fe98 	bl	2000295c <NVIC_ClearPendingIRQ>
}
20002c2c:	46bd      	mov	sp, r7
20002c2e:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002c32:	4685      	mov	sp, r0
20002c34:	4770      	bx	lr
20002c36:	bf00      	nop

20002c38 <ACE_PPE_Flag16_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag16_IRQHandler( void )
#else
void ACE_PPE_Flag16_IRQHandler( void )
#endif
{
20002c38:	4668      	mov	r0, sp
20002c3a:	f020 0107 	bic.w	r1, r0, #7
20002c3e:	468d      	mov	sp, r1
20002c40:	b589      	push	{r0, r3, r7, lr}
20002c42:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG16 );
20002c44:	f04f 0010 	mov.w	r0, #16
20002c48:	f7ff feac 	bl	200029a4 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag16_IRQn );
20002c4c:	f04f 0086 	mov.w	r0, #134	; 0x86
20002c50:	f7ff fe84 	bl	2000295c <NVIC_ClearPendingIRQ>
}
20002c54:	46bd      	mov	sp, r7
20002c56:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002c5a:	4685      	mov	sp, r0
20002c5c:	4770      	bx	lr
20002c5e:	bf00      	nop

20002c60 <ACE_PPE_Flag17_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag17_IRQHandler( void )
#else
void ACE_PPE_Flag17_IRQHandler( void )
#endif
{
20002c60:	4668      	mov	r0, sp
20002c62:	f020 0107 	bic.w	r1, r0, #7
20002c66:	468d      	mov	sp, r1
20002c68:	b589      	push	{r0, r3, r7, lr}
20002c6a:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG17 );
20002c6c:	f04f 0011 	mov.w	r0, #17
20002c70:	f7ff fe98 	bl	200029a4 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag17_IRQn );
20002c74:	f04f 0087 	mov.w	r0, #135	; 0x87
20002c78:	f7ff fe70 	bl	2000295c <NVIC_ClearPendingIRQ>
}
20002c7c:	46bd      	mov	sp, r7
20002c7e:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002c82:	4685      	mov	sp, r0
20002c84:	4770      	bx	lr
20002c86:	bf00      	nop

20002c88 <ACE_PPE_Flag18_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag18_IRQHandler( void )
#else
void ACE_PPE_Flag18_IRQHandler( void )
#endif
{
20002c88:	4668      	mov	r0, sp
20002c8a:	f020 0107 	bic.w	r1, r0, #7
20002c8e:	468d      	mov	sp, r1
20002c90:	b589      	push	{r0, r3, r7, lr}
20002c92:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG18 );
20002c94:	f04f 0012 	mov.w	r0, #18
20002c98:	f7ff fe84 	bl	200029a4 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag18_IRQn );
20002c9c:	f04f 0088 	mov.w	r0, #136	; 0x88
20002ca0:	f7ff fe5c 	bl	2000295c <NVIC_ClearPendingIRQ>
}
20002ca4:	46bd      	mov	sp, r7
20002ca6:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002caa:	4685      	mov	sp, r0
20002cac:	4770      	bx	lr
20002cae:	bf00      	nop

20002cb0 <ACE_PPE_Flag19_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag19_IRQHandler( void )
#else
void ACE_PPE_Flag19_IRQHandler( void )
#endif
{
20002cb0:	4668      	mov	r0, sp
20002cb2:	f020 0107 	bic.w	r1, r0, #7
20002cb6:	468d      	mov	sp, r1
20002cb8:	b589      	push	{r0, r3, r7, lr}
20002cba:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG19 );
20002cbc:	f04f 0013 	mov.w	r0, #19
20002cc0:	f7ff fe70 	bl	200029a4 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag19_IRQn );
20002cc4:	f04f 0089 	mov.w	r0, #137	; 0x89
20002cc8:	f7ff fe48 	bl	2000295c <NVIC_ClearPendingIRQ>
}
20002ccc:	46bd      	mov	sp, r7
20002cce:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002cd2:	4685      	mov	sp, r0
20002cd4:	4770      	bx	lr
20002cd6:	bf00      	nop

20002cd8 <ACE_PPE_Flag20_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag20_IRQHandler( void )
#else
void ACE_PPE_Flag20_IRQHandler( void )
#endif
{
20002cd8:	4668      	mov	r0, sp
20002cda:	f020 0107 	bic.w	r1, r0, #7
20002cde:	468d      	mov	sp, r1
20002ce0:	b589      	push	{r0, r3, r7, lr}
20002ce2:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG20 );
20002ce4:	f04f 0014 	mov.w	r0, #20
20002ce8:	f7ff fe5c 	bl	200029a4 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag20_IRQn );
20002cec:	f04f 008a 	mov.w	r0, #138	; 0x8a
20002cf0:	f7ff fe34 	bl	2000295c <NVIC_ClearPendingIRQ>
}
20002cf4:	46bd      	mov	sp, r7
20002cf6:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002cfa:	4685      	mov	sp, r0
20002cfc:	4770      	bx	lr
20002cfe:	bf00      	nop

20002d00 <ACE_PPE_Flag21_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag21_IRQHandler( void )
#else
void ACE_PPE_Flag21_IRQHandler( void )
#endif
{
20002d00:	4668      	mov	r0, sp
20002d02:	f020 0107 	bic.w	r1, r0, #7
20002d06:	468d      	mov	sp, r1
20002d08:	b589      	push	{r0, r3, r7, lr}
20002d0a:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG21 );
20002d0c:	f04f 0015 	mov.w	r0, #21
20002d10:	f7ff fe48 	bl	200029a4 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag21_IRQn );
20002d14:	f04f 008b 	mov.w	r0, #139	; 0x8b
20002d18:	f7ff fe20 	bl	2000295c <NVIC_ClearPendingIRQ>
}
20002d1c:	46bd      	mov	sp, r7
20002d1e:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002d22:	4685      	mov	sp, r0
20002d24:	4770      	bx	lr
20002d26:	bf00      	nop

20002d28 <ACE_PPE_Flag22_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag22_IRQHandler( void )
#else
void ACE_PPE_Flag22_IRQHandler( void )
#endif
{
20002d28:	4668      	mov	r0, sp
20002d2a:	f020 0107 	bic.w	r1, r0, #7
20002d2e:	468d      	mov	sp, r1
20002d30:	b589      	push	{r0, r3, r7, lr}
20002d32:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG22 );
20002d34:	f04f 0016 	mov.w	r0, #22
20002d38:	f7ff fe34 	bl	200029a4 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag22_IRQn );
20002d3c:	f04f 008c 	mov.w	r0, #140	; 0x8c
20002d40:	f7ff fe0c 	bl	2000295c <NVIC_ClearPendingIRQ>
}
20002d44:	46bd      	mov	sp, r7
20002d46:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002d4a:	4685      	mov	sp, r0
20002d4c:	4770      	bx	lr
20002d4e:	bf00      	nop

20002d50 <ACE_PPE_Flag23_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag23_IRQHandler( void )
#else
void ACE_PPE_Flag23_IRQHandler( void )
#endif
{
20002d50:	4668      	mov	r0, sp
20002d52:	f020 0107 	bic.w	r1, r0, #7
20002d56:	468d      	mov	sp, r1
20002d58:	b589      	push	{r0, r3, r7, lr}
20002d5a:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG23 );
20002d5c:	f04f 0017 	mov.w	r0, #23
20002d60:	f7ff fe20 	bl	200029a4 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag23_IRQn );
20002d64:	f04f 008d 	mov.w	r0, #141	; 0x8d
20002d68:	f7ff fdf8 	bl	2000295c <NVIC_ClearPendingIRQ>
}
20002d6c:	46bd      	mov	sp, r7
20002d6e:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002d72:	4685      	mov	sp, r0
20002d74:	4770      	bx	lr
20002d76:	bf00      	nop

20002d78 <ACE_PPE_Flag24_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag24_IRQHandler( void )
#else
void ACE_PPE_Flag24_IRQHandler( void )
#endif
{
20002d78:	4668      	mov	r0, sp
20002d7a:	f020 0107 	bic.w	r1, r0, #7
20002d7e:	468d      	mov	sp, r1
20002d80:	b589      	push	{r0, r3, r7, lr}
20002d82:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG24 );
20002d84:	f04f 0018 	mov.w	r0, #24
20002d88:	f7ff fe0c 	bl	200029a4 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag24_IRQn );
20002d8c:	f04f 008e 	mov.w	r0, #142	; 0x8e
20002d90:	f7ff fde4 	bl	2000295c <NVIC_ClearPendingIRQ>
}
20002d94:	46bd      	mov	sp, r7
20002d96:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002d9a:	4685      	mov	sp, r0
20002d9c:	4770      	bx	lr
20002d9e:	bf00      	nop

20002da0 <ACE_PPE_Flag25_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag25_IRQHandler( void )
#else
void ACE_PPE_Flag25_IRQHandler( void )
#endif
{
20002da0:	4668      	mov	r0, sp
20002da2:	f020 0107 	bic.w	r1, r0, #7
20002da6:	468d      	mov	sp, r1
20002da8:	b589      	push	{r0, r3, r7, lr}
20002daa:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG25 );
20002dac:	f04f 0019 	mov.w	r0, #25
20002db0:	f7ff fdf8 	bl	200029a4 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag25_IRQn );
20002db4:	f04f 008f 	mov.w	r0, #143	; 0x8f
20002db8:	f7ff fdd0 	bl	2000295c <NVIC_ClearPendingIRQ>
}
20002dbc:	46bd      	mov	sp, r7
20002dbe:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002dc2:	4685      	mov	sp, r0
20002dc4:	4770      	bx	lr
20002dc6:	bf00      	nop

20002dc8 <ACE_PPE_Flag26_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag26_IRQHandler( void )
#else
void ACE_PPE_Flag26_IRQHandler( void )
#endif
{
20002dc8:	4668      	mov	r0, sp
20002dca:	f020 0107 	bic.w	r1, r0, #7
20002dce:	468d      	mov	sp, r1
20002dd0:	b589      	push	{r0, r3, r7, lr}
20002dd2:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG26 );
20002dd4:	f04f 001a 	mov.w	r0, #26
20002dd8:	f7ff fde4 	bl	200029a4 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag26_IRQn );
20002ddc:	f04f 0090 	mov.w	r0, #144	; 0x90
20002de0:	f7ff fdbc 	bl	2000295c <NVIC_ClearPendingIRQ>
}
20002de4:	46bd      	mov	sp, r7
20002de6:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002dea:	4685      	mov	sp, r0
20002dec:	4770      	bx	lr
20002dee:	bf00      	nop

20002df0 <ACE_PPE_Flag27_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag27_IRQHandler( void )
#else
void ACE_PPE_Flag27_IRQHandler( void )
#endif
{
20002df0:	4668      	mov	r0, sp
20002df2:	f020 0107 	bic.w	r1, r0, #7
20002df6:	468d      	mov	sp, r1
20002df8:	b589      	push	{r0, r3, r7, lr}
20002dfa:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG27 );
20002dfc:	f04f 001b 	mov.w	r0, #27
20002e00:	f7ff fdd0 	bl	200029a4 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag27_IRQn );
20002e04:	f04f 0091 	mov.w	r0, #145	; 0x91
20002e08:	f7ff fda8 	bl	2000295c <NVIC_ClearPendingIRQ>
}
20002e0c:	46bd      	mov	sp, r7
20002e0e:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002e12:	4685      	mov	sp, r0
20002e14:	4770      	bx	lr
20002e16:	bf00      	nop

20002e18 <ACE_PPE_Flag28_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag28_IRQHandler( void )
#else
void ACE_PPE_Flag28_IRQHandler( void )
#endif
{
20002e18:	4668      	mov	r0, sp
20002e1a:	f020 0107 	bic.w	r1, r0, #7
20002e1e:	468d      	mov	sp, r1
20002e20:	b589      	push	{r0, r3, r7, lr}
20002e22:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG28 );
20002e24:	f04f 001c 	mov.w	r0, #28
20002e28:	f7ff fdbc 	bl	200029a4 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag28_IRQn );
20002e2c:	f04f 0092 	mov.w	r0, #146	; 0x92
20002e30:	f7ff fd94 	bl	2000295c <NVIC_ClearPendingIRQ>
}
20002e34:	46bd      	mov	sp, r7
20002e36:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002e3a:	4685      	mov	sp, r0
20002e3c:	4770      	bx	lr
20002e3e:	bf00      	nop

20002e40 <ACE_PPE_Flag29_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag29_IRQHandler( void )
#else
void ACE_PPE_Flag29_IRQHandler( void )
#endif
{
20002e40:	4668      	mov	r0, sp
20002e42:	f020 0107 	bic.w	r1, r0, #7
20002e46:	468d      	mov	sp, r1
20002e48:	b589      	push	{r0, r3, r7, lr}
20002e4a:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG29 );
20002e4c:	f04f 001d 	mov.w	r0, #29
20002e50:	f7ff fda8 	bl	200029a4 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag29_IRQn );
20002e54:	f04f 0093 	mov.w	r0, #147	; 0x93
20002e58:	f7ff fd80 	bl	2000295c <NVIC_ClearPendingIRQ>
}
20002e5c:	46bd      	mov	sp, r7
20002e5e:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002e62:	4685      	mov	sp, r0
20002e64:	4770      	bx	lr
20002e66:	bf00      	nop

20002e68 <ACE_PPE_Flag30_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag30_IRQHandler( void )
#else
void ACE_PPE_Flag30_IRQHandler( void )
#endif
{
20002e68:	4668      	mov	r0, sp
20002e6a:	f020 0107 	bic.w	r1, r0, #7
20002e6e:	468d      	mov	sp, r1
20002e70:	b589      	push	{r0, r3, r7, lr}
20002e72:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG30 );
20002e74:	f04f 001e 	mov.w	r0, #30
20002e78:	f7ff fd94 	bl	200029a4 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag30_IRQn );
20002e7c:	f04f 0094 	mov.w	r0, #148	; 0x94
20002e80:	f7ff fd6c 	bl	2000295c <NVIC_ClearPendingIRQ>
}
20002e84:	46bd      	mov	sp, r7
20002e86:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002e8a:	4685      	mov	sp, r0
20002e8c:	4770      	bx	lr
20002e8e:	bf00      	nop

20002e90 <ACE_PPE_Flag31_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag31_IRQHandler( void )
#else
void ACE_PPE_Flag31_IRQHandler( void )
#endif
{
20002e90:	4668      	mov	r0, sp
20002e92:	f020 0107 	bic.w	r1, r0, #7
20002e96:	468d      	mov	sp, r1
20002e98:	b589      	push	{r0, r3, r7, lr}
20002e9a:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG31 );
20002e9c:	f04f 001f 	mov.w	r0, #31
20002ea0:	f7ff fd80 	bl	200029a4 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag31_IRQn );
20002ea4:	f04f 0095 	mov.w	r0, #149	; 0x95
20002ea8:	f7ff fd58 	bl	2000295c <NVIC_ClearPendingIRQ>
}
20002eac:	46bd      	mov	sp, r7
20002eae:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002eb2:	4685      	mov	sp, r0
20002eb4:	4770      	bx	lr
20002eb6:	bf00      	nop

20002eb8 <__aeabi_frsub>:
20002eb8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
20002ebc:	e002      	b.n	20002ec4 <__addsf3>
20002ebe:	bf00      	nop

20002ec0 <__aeabi_fsub>:
20002ec0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

20002ec4 <__addsf3>:
20002ec4:	0042      	lsls	r2, r0, #1
20002ec6:	bf1f      	itttt	ne
20002ec8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
20002ecc:	ea92 0f03 	teqne	r2, r3
20002ed0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
20002ed4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
20002ed8:	d06a      	beq.n	20002fb0 <__addsf3+0xec>
20002eda:	ea4f 6212 	mov.w	r2, r2, lsr #24
20002ede:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
20002ee2:	bfc1      	itttt	gt
20002ee4:	18d2      	addgt	r2, r2, r3
20002ee6:	4041      	eorgt	r1, r0
20002ee8:	4048      	eorgt	r0, r1
20002eea:	4041      	eorgt	r1, r0
20002eec:	bfb8      	it	lt
20002eee:	425b      	neglt	r3, r3
20002ef0:	2b19      	cmp	r3, #25
20002ef2:	bf88      	it	hi
20002ef4:	4770      	bxhi	lr
20002ef6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
20002efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
20002efe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
20002f02:	bf18      	it	ne
20002f04:	4240      	negne	r0, r0
20002f06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
20002f0a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
20002f0e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
20002f12:	bf18      	it	ne
20002f14:	4249      	negne	r1, r1
20002f16:	ea92 0f03 	teq	r2, r3
20002f1a:	d03f      	beq.n	20002f9c <__addsf3+0xd8>
20002f1c:	f1a2 0201 	sub.w	r2, r2, #1
20002f20:	fa41 fc03 	asr.w	ip, r1, r3
20002f24:	eb10 000c 	adds.w	r0, r0, ip
20002f28:	f1c3 0320 	rsb	r3, r3, #32
20002f2c:	fa01 f103 	lsl.w	r1, r1, r3
20002f30:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
20002f34:	d502      	bpl.n	20002f3c <__addsf3+0x78>
20002f36:	4249      	negs	r1, r1
20002f38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
20002f3c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
20002f40:	d313      	bcc.n	20002f6a <__addsf3+0xa6>
20002f42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
20002f46:	d306      	bcc.n	20002f56 <__addsf3+0x92>
20002f48:	0840      	lsrs	r0, r0, #1
20002f4a:	ea4f 0131 	mov.w	r1, r1, rrx
20002f4e:	f102 0201 	add.w	r2, r2, #1
20002f52:	2afe      	cmp	r2, #254	; 0xfe
20002f54:	d251      	bcs.n	20002ffa <__addsf3+0x136>
20002f56:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
20002f5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
20002f5e:	bf08      	it	eq
20002f60:	f020 0001 	biceq.w	r0, r0, #1
20002f64:	ea40 0003 	orr.w	r0, r0, r3
20002f68:	4770      	bx	lr
20002f6a:	0049      	lsls	r1, r1, #1
20002f6c:	eb40 0000 	adc.w	r0, r0, r0
20002f70:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
20002f74:	f1a2 0201 	sub.w	r2, r2, #1
20002f78:	d1ed      	bne.n	20002f56 <__addsf3+0x92>
20002f7a:	fab0 fc80 	clz	ip, r0
20002f7e:	f1ac 0c08 	sub.w	ip, ip, #8
20002f82:	ebb2 020c 	subs.w	r2, r2, ip
20002f86:	fa00 f00c 	lsl.w	r0, r0, ip
20002f8a:	bfaa      	itet	ge
20002f8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
20002f90:	4252      	neglt	r2, r2
20002f92:	4318      	orrge	r0, r3
20002f94:	bfbc      	itt	lt
20002f96:	40d0      	lsrlt	r0, r2
20002f98:	4318      	orrlt	r0, r3
20002f9a:	4770      	bx	lr
20002f9c:	f092 0f00 	teq	r2, #0
20002fa0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
20002fa4:	bf06      	itte	eq
20002fa6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
20002faa:	3201      	addeq	r2, #1
20002fac:	3b01      	subne	r3, #1
20002fae:	e7b5      	b.n	20002f1c <__addsf3+0x58>
20002fb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
20002fb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
20002fb8:	bf18      	it	ne
20002fba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
20002fbe:	d021      	beq.n	20003004 <__addsf3+0x140>
20002fc0:	ea92 0f03 	teq	r2, r3
20002fc4:	d004      	beq.n	20002fd0 <__addsf3+0x10c>
20002fc6:	f092 0f00 	teq	r2, #0
20002fca:	bf08      	it	eq
20002fcc:	4608      	moveq	r0, r1
20002fce:	4770      	bx	lr
20002fd0:	ea90 0f01 	teq	r0, r1
20002fd4:	bf1c      	itt	ne
20002fd6:	2000      	movne	r0, #0
20002fd8:	4770      	bxne	lr
20002fda:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
20002fde:	d104      	bne.n	20002fea <__addsf3+0x126>
20002fe0:	0040      	lsls	r0, r0, #1
20002fe2:	bf28      	it	cs
20002fe4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
20002fe8:	4770      	bx	lr
20002fea:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
20002fee:	bf3c      	itt	cc
20002ff0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
20002ff4:	4770      	bxcc	lr
20002ff6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
20002ffa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
20002ffe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
20003002:	4770      	bx	lr
20003004:	ea7f 6222 	mvns.w	r2, r2, asr #24
20003008:	bf16      	itet	ne
2000300a:	4608      	movne	r0, r1
2000300c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
20003010:	4601      	movne	r1, r0
20003012:	0242      	lsls	r2, r0, #9
20003014:	bf06      	itte	eq
20003016:	ea5f 2341 	movseq.w	r3, r1, lsl #9
2000301a:	ea90 0f01 	teqeq	r0, r1
2000301e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
20003022:	4770      	bx	lr

20003024 <__aeabi_ui2f>:
20003024:	f04f 0300 	mov.w	r3, #0
20003028:	e004      	b.n	20003034 <__aeabi_i2f+0x8>
2000302a:	bf00      	nop

2000302c <__aeabi_i2f>:
2000302c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
20003030:	bf48      	it	mi
20003032:	4240      	negmi	r0, r0
20003034:	ea5f 0c00 	movs.w	ip, r0
20003038:	bf08      	it	eq
2000303a:	4770      	bxeq	lr
2000303c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
20003040:	4601      	mov	r1, r0
20003042:	f04f 0000 	mov.w	r0, #0
20003046:	e01c      	b.n	20003082 <__aeabi_l2f+0x2a>

20003048 <__aeabi_ul2f>:
20003048:	ea50 0201 	orrs.w	r2, r0, r1
2000304c:	bf08      	it	eq
2000304e:	4770      	bxeq	lr
20003050:	f04f 0300 	mov.w	r3, #0
20003054:	e00a      	b.n	2000306c <__aeabi_l2f+0x14>
20003056:	bf00      	nop

20003058 <__aeabi_l2f>:
20003058:	ea50 0201 	orrs.w	r2, r0, r1
2000305c:	bf08      	it	eq
2000305e:	4770      	bxeq	lr
20003060:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
20003064:	d502      	bpl.n	2000306c <__aeabi_l2f+0x14>
20003066:	4240      	negs	r0, r0
20003068:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
2000306c:	ea5f 0c01 	movs.w	ip, r1
20003070:	bf02      	ittt	eq
20003072:	4684      	moveq	ip, r0
20003074:	4601      	moveq	r1, r0
20003076:	2000      	moveq	r0, #0
20003078:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
2000307c:	bf08      	it	eq
2000307e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
20003082:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
20003086:	fabc f28c 	clz	r2, ip
2000308a:	3a08      	subs	r2, #8
2000308c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
20003090:	db10      	blt.n	200030b4 <__aeabi_l2f+0x5c>
20003092:	fa01 fc02 	lsl.w	ip, r1, r2
20003096:	4463      	add	r3, ip
20003098:	fa00 fc02 	lsl.w	ip, r0, r2
2000309c:	f1c2 0220 	rsb	r2, r2, #32
200030a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
200030a4:	fa20 f202 	lsr.w	r2, r0, r2
200030a8:	eb43 0002 	adc.w	r0, r3, r2
200030ac:	bf08      	it	eq
200030ae:	f020 0001 	biceq.w	r0, r0, #1
200030b2:	4770      	bx	lr
200030b4:	f102 0220 	add.w	r2, r2, #32
200030b8:	fa01 fc02 	lsl.w	ip, r1, r2
200030bc:	f1c2 0220 	rsb	r2, r2, #32
200030c0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
200030c4:	fa21 f202 	lsr.w	r2, r1, r2
200030c8:	eb43 0002 	adc.w	r0, r3, r2
200030cc:	bf08      	it	eq
200030ce:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
200030d2:	4770      	bx	lr

200030d4 <__aeabi_fmul>:
200030d4:	f04f 0cff 	mov.w	ip, #255	; 0xff
200030d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
200030dc:	bf1e      	ittt	ne
200030de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
200030e2:	ea92 0f0c 	teqne	r2, ip
200030e6:	ea93 0f0c 	teqne	r3, ip
200030ea:	d06f      	beq.n	200031cc <__aeabi_fmul+0xf8>
200030ec:	441a      	add	r2, r3
200030ee:	ea80 0c01 	eor.w	ip, r0, r1
200030f2:	0240      	lsls	r0, r0, #9
200030f4:	bf18      	it	ne
200030f6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
200030fa:	d01e      	beq.n	2000313a <__aeabi_fmul+0x66>
200030fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
20003100:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
20003104:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
20003108:	fba0 3101 	umull	r3, r1, r0, r1
2000310c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
20003110:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
20003114:	bf3e      	ittt	cc
20003116:	0049      	lslcc	r1, r1, #1
20003118:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
2000311c:	005b      	lslcc	r3, r3, #1
2000311e:	ea40 0001 	orr.w	r0, r0, r1
20003122:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
20003126:	2afd      	cmp	r2, #253	; 0xfd
20003128:	d81d      	bhi.n	20003166 <__aeabi_fmul+0x92>
2000312a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
2000312e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
20003132:	bf08      	it	eq
20003134:	f020 0001 	biceq.w	r0, r0, #1
20003138:	4770      	bx	lr
2000313a:	f090 0f00 	teq	r0, #0
2000313e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
20003142:	bf08      	it	eq
20003144:	0249      	lsleq	r1, r1, #9
20003146:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
2000314a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
2000314e:	3a7f      	subs	r2, #127	; 0x7f
20003150:	bfc2      	ittt	gt
20003152:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
20003156:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
2000315a:	4770      	bxgt	lr
2000315c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
20003160:	f04f 0300 	mov.w	r3, #0
20003164:	3a01      	subs	r2, #1
20003166:	dc5d      	bgt.n	20003224 <__aeabi_fmul+0x150>
20003168:	f112 0f19 	cmn.w	r2, #25
2000316c:	bfdc      	itt	le
2000316e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
20003172:	4770      	bxle	lr
20003174:	f1c2 0200 	rsb	r2, r2, #0
20003178:	0041      	lsls	r1, r0, #1
2000317a:	fa21 f102 	lsr.w	r1, r1, r2
2000317e:	f1c2 0220 	rsb	r2, r2, #32
20003182:	fa00 fc02 	lsl.w	ip, r0, r2
20003186:	ea5f 0031 	movs.w	r0, r1, rrx
2000318a:	f140 0000 	adc.w	r0, r0, #0
2000318e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
20003192:	bf08      	it	eq
20003194:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
20003198:	4770      	bx	lr
2000319a:	f092 0f00 	teq	r2, #0
2000319e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
200031a2:	bf02      	ittt	eq
200031a4:	0040      	lsleq	r0, r0, #1
200031a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
200031aa:	3a01      	subeq	r2, #1
200031ac:	d0f9      	beq.n	200031a2 <__aeabi_fmul+0xce>
200031ae:	ea40 000c 	orr.w	r0, r0, ip
200031b2:	f093 0f00 	teq	r3, #0
200031b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
200031ba:	bf02      	ittt	eq
200031bc:	0049      	lsleq	r1, r1, #1
200031be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
200031c2:	3b01      	subeq	r3, #1
200031c4:	d0f9      	beq.n	200031ba <__aeabi_fmul+0xe6>
200031c6:	ea41 010c 	orr.w	r1, r1, ip
200031ca:	e78f      	b.n	200030ec <__aeabi_fmul+0x18>
200031cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
200031d0:	ea92 0f0c 	teq	r2, ip
200031d4:	bf18      	it	ne
200031d6:	ea93 0f0c 	teqne	r3, ip
200031da:	d00a      	beq.n	200031f2 <__aeabi_fmul+0x11e>
200031dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
200031e0:	bf18      	it	ne
200031e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
200031e6:	d1d8      	bne.n	2000319a <__aeabi_fmul+0xc6>
200031e8:	ea80 0001 	eor.w	r0, r0, r1
200031ec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
200031f0:	4770      	bx	lr
200031f2:	f090 0f00 	teq	r0, #0
200031f6:	bf17      	itett	ne
200031f8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
200031fc:	4608      	moveq	r0, r1
200031fe:	f091 0f00 	teqne	r1, #0
20003202:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
20003206:	d014      	beq.n	20003232 <__aeabi_fmul+0x15e>
20003208:	ea92 0f0c 	teq	r2, ip
2000320c:	d101      	bne.n	20003212 <__aeabi_fmul+0x13e>
2000320e:	0242      	lsls	r2, r0, #9
20003210:	d10f      	bne.n	20003232 <__aeabi_fmul+0x15e>
20003212:	ea93 0f0c 	teq	r3, ip
20003216:	d103      	bne.n	20003220 <__aeabi_fmul+0x14c>
20003218:	024b      	lsls	r3, r1, #9
2000321a:	bf18      	it	ne
2000321c:	4608      	movne	r0, r1
2000321e:	d108      	bne.n	20003232 <__aeabi_fmul+0x15e>
20003220:	ea80 0001 	eor.w	r0, r0, r1
20003224:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
20003228:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
2000322c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
20003230:	4770      	bx	lr
20003232:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
20003236:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
2000323a:	4770      	bx	lr

2000323c <__aeabi_fdiv>:
2000323c:	f04f 0cff 	mov.w	ip, #255	; 0xff
20003240:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
20003244:	bf1e      	ittt	ne
20003246:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
2000324a:	ea92 0f0c 	teqne	r2, ip
2000324e:	ea93 0f0c 	teqne	r3, ip
20003252:	d069      	beq.n	20003328 <__aeabi_fdiv+0xec>
20003254:	eba2 0203 	sub.w	r2, r2, r3
20003258:	ea80 0c01 	eor.w	ip, r0, r1
2000325c:	0249      	lsls	r1, r1, #9
2000325e:	ea4f 2040 	mov.w	r0, r0, lsl #9
20003262:	d037      	beq.n	200032d4 <__aeabi_fdiv+0x98>
20003264:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
20003268:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
2000326c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
20003270:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
20003274:	428b      	cmp	r3, r1
20003276:	bf38      	it	cc
20003278:	005b      	lslcc	r3, r3, #1
2000327a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
2000327e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
20003282:	428b      	cmp	r3, r1
20003284:	bf24      	itt	cs
20003286:	1a5b      	subcs	r3, r3, r1
20003288:	ea40 000c 	orrcs.w	r0, r0, ip
2000328c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
20003290:	bf24      	itt	cs
20003292:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
20003296:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
2000329a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
2000329e:	bf24      	itt	cs
200032a0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
200032a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
200032a8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
200032ac:	bf24      	itt	cs
200032ae:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
200032b2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
200032b6:	011b      	lsls	r3, r3, #4
200032b8:	bf18      	it	ne
200032ba:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
200032be:	d1e0      	bne.n	20003282 <__aeabi_fdiv+0x46>
200032c0:	2afd      	cmp	r2, #253	; 0xfd
200032c2:	f63f af50 	bhi.w	20003166 <__aeabi_fmul+0x92>
200032c6:	428b      	cmp	r3, r1
200032c8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
200032cc:	bf08      	it	eq
200032ce:	f020 0001 	biceq.w	r0, r0, #1
200032d2:	4770      	bx	lr
200032d4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
200032d8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
200032dc:	327f      	adds	r2, #127	; 0x7f
200032de:	bfc2      	ittt	gt
200032e0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
200032e4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
200032e8:	4770      	bxgt	lr
200032ea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
200032ee:	f04f 0300 	mov.w	r3, #0
200032f2:	3a01      	subs	r2, #1
200032f4:	e737      	b.n	20003166 <__aeabi_fmul+0x92>
200032f6:	f092 0f00 	teq	r2, #0
200032fa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
200032fe:	bf02      	ittt	eq
20003300:	0040      	lsleq	r0, r0, #1
20003302:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
20003306:	3a01      	subeq	r2, #1
20003308:	d0f9      	beq.n	200032fe <__aeabi_fdiv+0xc2>
2000330a:	ea40 000c 	orr.w	r0, r0, ip
2000330e:	f093 0f00 	teq	r3, #0
20003312:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
20003316:	bf02      	ittt	eq
20003318:	0049      	lsleq	r1, r1, #1
2000331a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
2000331e:	3b01      	subeq	r3, #1
20003320:	d0f9      	beq.n	20003316 <__aeabi_fdiv+0xda>
20003322:	ea41 010c 	orr.w	r1, r1, ip
20003326:	e795      	b.n	20003254 <__aeabi_fdiv+0x18>
20003328:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
2000332c:	ea92 0f0c 	teq	r2, ip
20003330:	d108      	bne.n	20003344 <__aeabi_fdiv+0x108>
20003332:	0242      	lsls	r2, r0, #9
20003334:	f47f af7d 	bne.w	20003232 <__aeabi_fmul+0x15e>
20003338:	ea93 0f0c 	teq	r3, ip
2000333c:	f47f af70 	bne.w	20003220 <__aeabi_fmul+0x14c>
20003340:	4608      	mov	r0, r1
20003342:	e776      	b.n	20003232 <__aeabi_fmul+0x15e>
20003344:	ea93 0f0c 	teq	r3, ip
20003348:	d104      	bne.n	20003354 <__aeabi_fdiv+0x118>
2000334a:	024b      	lsls	r3, r1, #9
2000334c:	f43f af4c 	beq.w	200031e8 <__aeabi_fmul+0x114>
20003350:	4608      	mov	r0, r1
20003352:	e76e      	b.n	20003232 <__aeabi_fmul+0x15e>
20003354:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
20003358:	bf18      	it	ne
2000335a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
2000335e:	d1ca      	bne.n	200032f6 <__aeabi_fdiv+0xba>
20003360:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
20003364:	f47f af5c 	bne.w	20003220 <__aeabi_fmul+0x14c>
20003368:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
2000336c:	f47f af3c 	bne.w	200031e8 <__aeabi_fmul+0x114>
20003370:	e75f      	b.n	20003232 <__aeabi_fmul+0x15e>
20003372:	bf00      	nop

20003374 <__aeabi_f2iz>:
20003374:	ea4f 0240 	mov.w	r2, r0, lsl #1
20003378:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
2000337c:	d30f      	bcc.n	2000339e <__aeabi_f2iz+0x2a>
2000337e:	f04f 039e 	mov.w	r3, #158	; 0x9e
20003382:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
20003386:	d90d      	bls.n	200033a4 <__aeabi_f2iz+0x30>
20003388:	ea4f 2300 	mov.w	r3, r0, lsl #8
2000338c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
20003390:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
20003394:	fa23 f002 	lsr.w	r0, r3, r2
20003398:	bf18      	it	ne
2000339a:	4240      	negne	r0, r0
2000339c:	4770      	bx	lr
2000339e:	f04f 0000 	mov.w	r0, #0
200033a2:	4770      	bx	lr
200033a4:	f112 0f61 	cmn.w	r2, #97	; 0x61
200033a8:	d101      	bne.n	200033ae <__aeabi_f2iz+0x3a>
200033aa:	0242      	lsls	r2, r0, #9
200033ac:	d105      	bne.n	200033ba <__aeabi_f2iz+0x46>
200033ae:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
200033b2:	bf08      	it	eq
200033b4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
200033b8:	4770      	bx	lr
200033ba:	f04f 0000 	mov.w	r0, #0
200033be:	4770      	bx	lr

200033c0 <__libc_init_array>:
200033c0:	b570      	push	{r4, r5, r6, lr}
200033c2:	f243 76a4 	movw	r6, #14244	; 0x37a4
200033c6:	f243 75a4 	movw	r5, #14244	; 0x37a4
200033ca:	f2c2 0600 	movt	r6, #8192	; 0x2000
200033ce:	f2c2 0500 	movt	r5, #8192	; 0x2000
200033d2:	1b76      	subs	r6, r6, r5
200033d4:	10b6      	asrs	r6, r6, #2
200033d6:	d006      	beq.n	200033e6 <__libc_init_array+0x26>
200033d8:	2400      	movs	r4, #0
200033da:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
200033de:	3401      	adds	r4, #1
200033e0:	4798      	blx	r3
200033e2:	42a6      	cmp	r6, r4
200033e4:	d8f9      	bhi.n	200033da <__libc_init_array+0x1a>
200033e6:	f243 75a4 	movw	r5, #14244	; 0x37a4
200033ea:	f243 76a8 	movw	r6, #14248	; 0x37a8
200033ee:	f2c2 0500 	movt	r5, #8192	; 0x2000
200033f2:	f2c2 0600 	movt	r6, #8192	; 0x2000
200033f6:	1b76      	subs	r6, r6, r5
200033f8:	f000 f9c8 	bl	2000378c <_init>
200033fc:	10b6      	asrs	r6, r6, #2
200033fe:	d006      	beq.n	2000340e <__libc_init_array+0x4e>
20003400:	2400      	movs	r4, #0
20003402:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
20003406:	3401      	adds	r4, #1
20003408:	4798      	blx	r3
2000340a:	42a6      	cmp	r6, r4
2000340c:	d8f9      	bhi.n	20003402 <__libc_init_array+0x42>
2000340e:	bd70      	pop	{r4, r5, r6, pc}

20003410 <memset>:
20003410:	2a03      	cmp	r2, #3
20003412:	b2c9      	uxtb	r1, r1
20003414:	b430      	push	{r4, r5}
20003416:	d807      	bhi.n	20003428 <memset+0x18>
20003418:	b122      	cbz	r2, 20003424 <memset+0x14>
2000341a:	2300      	movs	r3, #0
2000341c:	54c1      	strb	r1, [r0, r3]
2000341e:	3301      	adds	r3, #1
20003420:	4293      	cmp	r3, r2
20003422:	d1fb      	bne.n	2000341c <memset+0xc>
20003424:	bc30      	pop	{r4, r5}
20003426:	4770      	bx	lr
20003428:	eb00 0c02 	add.w	ip, r0, r2
2000342c:	4603      	mov	r3, r0
2000342e:	e001      	b.n	20003434 <memset+0x24>
20003430:	f803 1c01 	strb.w	r1, [r3, #-1]
20003434:	f003 0403 	and.w	r4, r3, #3
20003438:	461a      	mov	r2, r3
2000343a:	3301      	adds	r3, #1
2000343c:	2c00      	cmp	r4, #0
2000343e:	d1f7      	bne.n	20003430 <memset+0x20>
20003440:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
20003444:	ebc2 040c 	rsb	r4, r2, ip
20003448:	fb03 f301 	mul.w	r3, r3, r1
2000344c:	e01f      	b.n	2000348e <memset+0x7e>
2000344e:	f842 3c40 	str.w	r3, [r2, #-64]
20003452:	f842 3c3c 	str.w	r3, [r2, #-60]
20003456:	f842 3c38 	str.w	r3, [r2, #-56]
2000345a:	f842 3c34 	str.w	r3, [r2, #-52]
2000345e:	f842 3c30 	str.w	r3, [r2, #-48]
20003462:	f842 3c2c 	str.w	r3, [r2, #-44]
20003466:	f842 3c28 	str.w	r3, [r2, #-40]
2000346a:	f842 3c24 	str.w	r3, [r2, #-36]
2000346e:	f842 3c20 	str.w	r3, [r2, #-32]
20003472:	f842 3c1c 	str.w	r3, [r2, #-28]
20003476:	f842 3c18 	str.w	r3, [r2, #-24]
2000347a:	f842 3c14 	str.w	r3, [r2, #-20]
2000347e:	f842 3c10 	str.w	r3, [r2, #-16]
20003482:	f842 3c0c 	str.w	r3, [r2, #-12]
20003486:	f842 3c08 	str.w	r3, [r2, #-8]
2000348a:	f842 3c04 	str.w	r3, [r2, #-4]
2000348e:	4615      	mov	r5, r2
20003490:	3240      	adds	r2, #64	; 0x40
20003492:	2c3f      	cmp	r4, #63	; 0x3f
20003494:	f1a4 0440 	sub.w	r4, r4, #64	; 0x40
20003498:	dcd9      	bgt.n	2000344e <memset+0x3e>
2000349a:	462a      	mov	r2, r5
2000349c:	ebc5 040c 	rsb	r4, r5, ip
200034a0:	e007      	b.n	200034b2 <memset+0xa2>
200034a2:	f842 3c10 	str.w	r3, [r2, #-16]
200034a6:	f842 3c0c 	str.w	r3, [r2, #-12]
200034aa:	f842 3c08 	str.w	r3, [r2, #-8]
200034ae:	f842 3c04 	str.w	r3, [r2, #-4]
200034b2:	4615      	mov	r5, r2
200034b4:	3210      	adds	r2, #16
200034b6:	2c0f      	cmp	r4, #15
200034b8:	f1a4 0410 	sub.w	r4, r4, #16
200034bc:	dcf1      	bgt.n	200034a2 <memset+0x92>
200034be:	462a      	mov	r2, r5
200034c0:	ebc5 050c 	rsb	r5, r5, ip
200034c4:	e001      	b.n	200034ca <memset+0xba>
200034c6:	f842 3c04 	str.w	r3, [r2, #-4]
200034ca:	4614      	mov	r4, r2
200034cc:	3204      	adds	r2, #4
200034ce:	2d03      	cmp	r5, #3
200034d0:	f1a5 0504 	sub.w	r5, r5, #4
200034d4:	dcf7      	bgt.n	200034c6 <memset+0xb6>
200034d6:	e001      	b.n	200034dc <memset+0xcc>
200034d8:	f804 1b01 	strb.w	r1, [r4], #1
200034dc:	4564      	cmp	r4, ip
200034de:	d3fb      	bcc.n	200034d8 <memset+0xc8>
200034e0:	e7a0      	b.n	20003424 <memset+0x14>
200034e2:	bf00      	nop

200034e4 <strncmp>:
200034e4:	b430      	push	{r4, r5}
200034e6:	4613      	mov	r3, r2
200034e8:	2a00      	cmp	r2, #0
200034ea:	d043      	beq.n	20003574 <strncmp+0x90>
200034ec:	ea41 0200 	orr.w	r2, r1, r0
200034f0:	f012 0f03 	tst.w	r2, #3
200034f4:	d125      	bne.n	20003542 <strncmp+0x5e>
200034f6:	2b03      	cmp	r3, #3
200034f8:	4604      	mov	r4, r0
200034fa:	460d      	mov	r5, r1
200034fc:	d93d      	bls.n	2000357a <strncmp+0x96>
200034fe:	6802      	ldr	r2, [r0, #0]
20003500:	6809      	ldr	r1, [r1, #0]
20003502:	428a      	cmp	r2, r1
20003504:	d139      	bne.n	2000357a <strncmp+0x96>
20003506:	3b04      	subs	r3, #4
20003508:	d034      	beq.n	20003574 <strncmp+0x90>
2000350a:	f1a2 3101 	sub.w	r1, r2, #16843009	; 0x1010101
2000350e:	ea21 0202 	bic.w	r2, r1, r2
20003512:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
20003516:	d00d      	beq.n	20003534 <strncmp+0x50>
20003518:	e02c      	b.n	20003574 <strncmp+0x90>
2000351a:	6822      	ldr	r2, [r4, #0]
2000351c:	6829      	ldr	r1, [r5, #0]
2000351e:	f1a2 3001 	sub.w	r0, r2, #16843009	; 0x1010101
20003522:	428a      	cmp	r2, r1
20003524:	ea20 0002 	bic.w	r0, r0, r2
20003528:	d127      	bne.n	2000357a <strncmp+0x96>
2000352a:	3b04      	subs	r3, #4
2000352c:	d022      	beq.n	20003574 <strncmp+0x90>
2000352e:	f010 3f80 	tst.w	r0, #2155905152	; 0x80808080
20003532:	d11f      	bne.n	20003574 <strncmp+0x90>
20003534:	3404      	adds	r4, #4
20003536:	3504      	adds	r5, #4
20003538:	2b03      	cmp	r3, #3
2000353a:	d8ee      	bhi.n	2000351a <strncmp+0x36>
2000353c:	4620      	mov	r0, r4
2000353e:	4629      	mov	r1, r5
20003540:	b1f3      	cbz	r3, 20003580 <strncmp+0x9c>
20003542:	7804      	ldrb	r4, [r0, #0]
20003544:	3b01      	subs	r3, #1
20003546:	f891 c000 	ldrb.w	ip, [r1]
2000354a:	4564      	cmp	r4, ip
2000354c:	d10f      	bne.n	2000356e <strncmp+0x8a>
2000354e:	b18b      	cbz	r3, 20003574 <strncmp+0x90>
20003550:	b184      	cbz	r4, 20003574 <strncmp+0x90>
20003552:	3b01      	subs	r3, #1
20003554:	2200      	movs	r2, #0
20003556:	e002      	b.n	2000355e <strncmp+0x7a>
20003558:	b163      	cbz	r3, 20003574 <strncmp+0x90>
2000355a:	b15c      	cbz	r4, 20003574 <strncmp+0x90>
2000355c:	3b01      	subs	r3, #1
2000355e:	1884      	adds	r4, r0, r2
20003560:	188d      	adds	r5, r1, r2
20003562:	3201      	adds	r2, #1
20003564:	7864      	ldrb	r4, [r4, #1]
20003566:	f895 c001 	ldrb.w	ip, [r5, #1]
2000356a:	4564      	cmp	r4, ip
2000356c:	d0f4      	beq.n	20003558 <strncmp+0x74>
2000356e:	ebcc 0004 	rsb	r0, ip, r4
20003572:	e000      	b.n	20003576 <strncmp+0x92>
20003574:	2000      	movs	r0, #0
20003576:	bc30      	pop	{r4, r5}
20003578:	4770      	bx	lr
2000357a:	4620      	mov	r0, r4
2000357c:	4629      	mov	r1, r5
2000357e:	e7e0      	b.n	20003542 <strncmp+0x5e>
20003580:	7824      	ldrb	r4, [r4, #0]
20003582:	f895 c000 	ldrb.w	ip, [r5]
20003586:	ebcc 0004 	rsb	r0, ip, r4
2000358a:	e7f4      	b.n	20003576 <strncmp+0x92>

2000358c <initcmd>:
2000358c:	03ef 8003 cf02 0003 30c1 04ed 0364 8112     .........0..d...
2000359c:	03e8 0085 cb78 3905 002c 0234 01f7 ea20     ....x..9,.4... .
200035ac:	0002 c000 2301 01c1 c510 3e02 c728 8601     .....#.....>(...
200035bc:	0136 3748 0001 013a b155 0002 b618 0803     6.H7..:.U.......
200035cc:	2782 01f2 2600 0101 0fe0 310f 0c2b 080e     .'...&.....1+...
200035dc:	f14e 0737 0310 090e e100 000f 140e 1103     N.7.............
200035ec:	3107 48c1 0f08 310c 0f36 8011 8029 0000     .1.H...16...)...
200035fc:	4441 4443 7269 6365 4974 706e 7475 305f     ADCDirectInput_0
2000360c:	0000 0000 4441 4443 7269 6365 4974 706e     ....ADCDirectInp
2000361c:	7475 315f 0000 0000                         ut_1....

20003624 <g_config_reg_lut>:
20003624:	3000 4001 3004 4001 3008 4001 300c 4001     .0.@.0.@.0.@.0.@
20003634:	3010 4001 3014 4001 3018 4001 301c 4001     .0.@.0.@.0.@.0.@
20003644:	3020 4001 3024 4001 3028 4001 302c 4001      0.@$0.@(0.@,0.@
20003654:	3030 4001 3034 4001 3038 4001 303c 4001     00.@40.@80.@<0.@
20003664:	3040 4001 3044 4001 3048 4001 304c 4001     @0.@D0.@H0.@L0.@
20003674:	3050 4001 3054 4001 3058 4001 305c 4001     P0.@T0.@X0.@\0.@
20003684:	3060 4001 3064 4001 3068 4001 306c 4001     `0.@d0.@h0.@l0.@
20003694:	3070 4001 3074 4001 3078 4001 307c 4001     p0.@t0.@x0.@|0.@

200036a4 <g_gpio_irqn_lut>:
200036a4:	0020 0021 0022 0023 0024 0025 0026 0027      .!.".#.$.%.&.'.
200036b4:	0028 0029 002a 002b 002c 002d 002e 002f     (.).*.+.,.-.../.
200036c4:	0030 0031 0032 0033 0034 0035 0036 0037     0.1.2.3.4.5.6.7.
200036d4:	0038 0039 003a 003b 003c 003d 003e 003f     8.9.:.;.<.=.>.?.

200036e4 <C.18.2576>:
200036e4:	0001 0000 0002 0000 0004 0000 0001 0000     ................

200036f4 <g_ace_channel_0_name>:
200036f4:	4441 4443 7269 6365 4974 706e 7475 305f     ADCDirectInput_0
20003704:	0000 0000                                   ....

20003708 <g_ace_channel_1_name>:
20003708:	4453 5f44 0030 0000                         SDD_0...

20003710 <g_ace_channel_2_name>:
20003710:	4441 4443 7269 6365 4974 706e 7475 315f     ADCDirectInput_1
20003720:	0000 0000                                   ....

20003724 <g_ace_channel_3_name>:
20003724:	4453 5f44 0031 0000                         SDD_1...

2000372c <channel_type_lut>:
2000372c:	0000 0100 0002 0100 0002 0000 ff00 00ff     ................
2000373c:	0000 0100 0002 0100 0002 0000 ff00 00ff     ................
2000374c:	0000 0100 ff02 ffff 00ff 0000 ff00 00ff     ................

2000375c <channel_quad_lut>:
2000375c:	00ff 0000 0100 0101 ff01 ffff ffff ffff     ................
2000376c:	02ff 0202 0302 0303 ff03 ffff ffff ffff     ................
2000377c:	04ff 0404 ff04 ffff ffff ffff ffff ffff     ................

2000378c <_init>:
2000378c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000378e:	bf00      	nop
20003790:	bcf8      	pop	{r3, r4, r5, r6, r7}
20003792:	bc08      	pop	{r3}
20003794:	469e      	mov	lr, r3
20003796:	4770      	bx	lr

20003798 <_fini>:
20003798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000379a:	bf00      	nop
2000379c:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000379e:	bc08      	pop	{r3}
200037a0:	469e      	mov	lr, r3
200037a2:	4770      	bx	lr

200037a4 <__frame_dummy_init_array_entry>:
200037a4:	0485 2000                                   ... 

200037a8 <__do_global_dtors_aux_fini_array_entry>:
200037a8:	0471 2000                                   q.. 
