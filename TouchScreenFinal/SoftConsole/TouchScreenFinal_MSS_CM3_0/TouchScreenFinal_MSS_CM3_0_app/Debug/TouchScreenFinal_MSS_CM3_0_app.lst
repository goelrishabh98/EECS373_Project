
TouchScreenFinal_MSS_CM3_0_app:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .init         00000470  00000000  60000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         0000412c  00000470  60000470  00008470  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         0000001c  20000000  6000459c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000294  2000001c  600045b8  0001001c  2**2
                  ALLOC
  4 .comment      0000025a  00000000  00000000  0001001c  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000009a8  00000000  00000000  00010276  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001a1b  00000000  00000000  00010c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000fa15  00000000  00000000  00012639  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001cdf  00000000  00000000  0002204e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005344  00000000  00000000  00023d2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000019e8  00000000  00000000  00029074  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004def  00000000  00000000  0002aa5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003b2b  00000000  00000000  0002f84b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 0005d06b  00000000  00000000  00033376  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000025  00000000  00000000  000903e1  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 000009d0  00000000  00000000  00090406  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .init:

00000000 <__vector_table_vma_base_address>:
	  writeRegister8(STMPE_INT_CTRL,
	                 STMPE_INT_CTRL_POL_HIGH | STMPE_INT_CTRL_ENABLE);


}
int16_t getX(){
   0:	20010000 	.word	0x20010000
   4:	00000299 	.word	0x00000299
	MSS_TIM1_stop();
}

void delayMicro(uint32_t time){

	MSS_TIM1_init(MSS_TIMER_ONE_SHOT_MODE);
   8:	00000309 	.word	0x00000309
	    }
}

void sendCommand16(uint8_t commandByte, uint16_t *dataBytes){

	set_SPI_CS();
   c:	0000030b 	.word	0x0000030b
	set_DC_LOW();
  10:	0000030d 	.word	0x0000030d
	configureSPI(8);
  14:	0000030f 	.word	0x0000030f

int16_t getZ(uint16_t x){
	int16_t z;

	MSS_GPIO_config(yp, MSS_GPIO_INPUT_MODE);
	MSS_GPIO_config(yn, MSS_GPIO_OUTPUT_MODE);
  18:	00000311 	.word	0x00000311
	...
int16_t getX(){
	int samples[2];
	MSS_GPIO_set_output(yn, 0);
	MSS_GPIO_config(yp, MSS_GPIO_INPUT_MODE);
	MSS_GPIO_config(yn, MSS_GPIO_INPUT_MODE);
	MSS_GPIO_config(xp, MSS_GPIO_OUTPUT_MODE);
  2c:	00000313 	.word	0x00000313
      heap_end = &_end;
    }
    
    prev_heap_end = heap_end;
    asm volatile ("MRS %0, msp" : "=r" (stack_ptr) );
    if (heap_end + incr > stack_ptr)
  30:	00000315 	.word	0x00000315
    }
    
    /*--------------------------------------------------------------------------
     * Output text to the UART.
     */
    MSS_UART_polled_tx( &g_mss_uart0, (uint8_t *)ptr, len );
  34:	00000000 	.word	0x00000000
  38:	00000317 	.word	0x00000317
  3c:	00000319 	.word	0x00000319
  40:	0000031b 	.word	0x0000031b
    
    return len;
#else   /* ACTEL_STDIO_THRU_UART */
    return 0;
#endif  /* ACTEL_STDIO_THRU_UART */
}
  44:	0000031d 	.word	0x0000031d
	MSS_GPIO_config(yn, MSS_GPIO_OUTPUT_MODE);
	MSS_GPIO_config(xp, MSS_GPIO_OUTPUT_MODE);
	MSS_GPIO_config(xn, MSS_GPIO_INPUT_MODE);

	MSS_GPIO_set_output(xp, 0);
	MSS_GPIO_set_output(yn, 1);
  48:	0000031f 	.word	0x0000031f
    prev_heap_end = heap_end;
    asm volatile ("MRS %0, msp" : "=r" (stack_ptr) );
    if (heap_end + incr > stack_ptr)
    {
      _write_r ((void *)0, 1, "Heap and stack collision\n", 25);
      _exit (1);
  4c:	00000321 	.word	0x00000321
  50:	00000323 	.word	0x00000323
    }
  
    heap_end += incr;
  54:	00000325 	.word	0x00000325
  58:	00000327 	.word	0x00000327
  5c:	00000329 	.word	0x00000329
    return (caddr_t) prev_heap_end;
}
  60:	0000032b 	.word	0x0000032b
	MSS_GPIO_set_output(xn, 0);
	delayMicro(500);



	if (samples[0] - samples[1] < -4 || samples[0] - samples[1] > 4) {
  64:	0000032d 	.word	0x0000032d

	MSS_GPIO_set_output(xp, 0);
	MSS_GPIO_set_output(yn, 1);

	int z1 = ACE_get_ppe_sample(ace_x);
	int z2 = ACE_get_ppe_sample(ace_y);
  68:	00001f3d 	.word	0x00001f3d
	MSS_GPIO_set_output(yn, 0);

	delayMicro(500);

	samples[0] = ACE_get_ppe_sample(ace_x);
	samples[1] = ACE_get_ppe_sample(ace_x);
  6c:	00001f6d 	.word	0x00001f6d
  70:	000027a1 	.word	0x000027a1
  74:	000027d1 	.word	0x000027d1
  78:	00002ec9 	.word	0x00002ec9
	delayMicro(500);



	if (samples[0] - samples[1] < -4 || samples[0] - samples[1] > 4) {
	  return -1;
  7c:	00000339 	.word	0x00000339
	delayMicro(500);

	samples[0] = ACE_get_ppe_sample(ace_x);
	samples[1] = ACE_get_ppe_sample(ace_x);

    if (samples[0] - samples[1] < -4 || samples[0] - samples[1] > 4) {
  80:	0000033b 	.word	0x0000033b


	if (samples[0] - samples[1] < -4 || samples[0] - samples[1] > 4) {
	  return -1;
   } else {
	 samples[1] = (samples[0] + samples[1]) >> 1; // average 2 samples
  84:	00002ef9 	.word	0x00002ef9
	int z2 = ACE_get_ppe_sample(ace_y);

	if (rxplate != 0) {
	 // now read the x
	 float rtouch;
	 rtouch = z2;
  88:	0000033f 	.word	0x0000033f
  8c:	00000341 	.word	0x00000341
	  return -1;
   } else {
	 samples[1] = (samples[0] + samples[1]) >> 1; // average 2 samples
   }

	MSS_GPIO_set_output(xp, 0);
  90:	00000343 	.word	0x00000343

	if (rxplate != 0) {
	 // now read the x
	 float rtouch;
	 rtouch = z2;
	 rtouch /= z1;
  94:	00000345 	.word	0x00000345

	samples[0] = ACE_get_ppe_sample(ace_x);
	samples[1] = ACE_get_ppe_sample(ace_x);

    if (samples[0] - samples[1] < -4 || samples[0] - samples[1] > 4) {
	  return -1;
  98:	00000347 	.word	0x00000347
   } else {
	 samples[1] = (samples[0] + samples[1]) >> 1; // average 2 samples
   }

	MSS_GPIO_set_output(xp, 0);
	return ((samples[1]/4080.0f)*240);
  9c:	00000349 	.word	0x00000349
	samples[1] = ACE_get_ppe_sample(ace_x);

    if (samples[0] - samples[1] < -4 || samples[0] - samples[1] > 4) {
	  return -1;
   } else {
	 samples[1] = (samples[0] + samples[1]) >> 1; // average 2 samples
  a0:	0000034b 	.word	0x0000034b
	...
   }

	MSS_GPIO_set_output(yp, 0);

	return ((samples[1]/4080.0f)*320);
  bc:	0000034d 	.word	0x0000034d
  c0:	0000034f 	.word	0x0000034f
	 samples[1] = (samples[0] + samples[1]) >> 1; // average 2 samples
   }

	MSS_GPIO_set_output(xp, 0);
	return ((samples[1]/4080.0f)*240);
}
  c4:	00000351 	.word	0x00000351
	 float rtouch;
	 rtouch = z2;
	 rtouch /= z1;
	 rtouch -= 1;
	 rtouch *= x;
	 rtouch *= rxplate;
  c8:	00000353 	.word	0x00000353
  cc:	00000355 	.word	0x00000355
  d0:	00000357 	.word	0x00000357
  d4:	00000359 	.word	0x00000359
    /* Perform the remainder of the transfer by sending a byte every time a byte
     * has been received. This should ensure that no Rx overflow can happen in
     * case of an interrupt occurs during this function. */
    while(transfer_idx < transfer_size)
    {
        rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
  d8:	0000035b 	.word	0x0000035b
  dc:	0000035d 	.word	0x0000035d
        if(0u == rx_fifo_empty)
  e0:	0000035f 	.word	0x0000035f
        {
            /* Process received byte. */
            rx_raw = this_spi->hw_reg->RX_DATA;
  e4:	00000361 	.word	0x00000361
            if(transfer_idx >= cmd_byte_size)
  e8:	00000363 	.word	0x00000363
            {
                if(rx_idx < rd_byte_size)
  ec:	00000365 	.word	0x00000365
            this_spi->hw_reg->TX_DATA = this_spi->slave_tx_buffer[this_spi->slave_tx_idx];
        }
        else if(0u != this_spi->cmd_done)
        {
            /* Fill with 0s if no need to insert command response */
            this_spi->hw_reg->TX_DATA = 0x00u;
  f0:	00000367 	.word	0x00000367
    {
        if(this_spi->slave_tx_idx < this_spi->slave_tx_size)
        {
            this_spi->hw_reg->TX_DATA = this_spi->slave_tx_buffer[this_spi->slave_tx_idx];
        }
        else if(0u != this_spi->cmd_done)
  f4:	00000369 	.word	0x00000369
            {
                if(rx_idx < rd_byte_size)
                {
                    rd_buffer[rx_idx] = (uint8_t)rx_raw;   
                }
                ++rx_idx;
  f8:	0000036b 	.word	0x0000036b
            }
            ++transfer_idx;
  fc:	0000036d 	.word	0x0000036d
    /* Load the transmit FIFO. */
    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) && (0u == done))
    {
        if(this_spi->slave_tx_idx < this_spi->slave_tx_size)
        {
            this_spi->hw_reg->TX_DATA = this_spi->slave_tx_buffer[this_spi->slave_tx_idx];
 100:	0000036f 	.word	0x0000036f
                    rd_buffer[rx_idx] = (uint8_t)rx_raw;   
                }
                ++rx_idx;
            }
            ++transfer_idx;
            --transit;
 104:	00000371 	.word	0x00000371
        }

        tx_fifo_full = this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK;
 108:	00000373 	.word	0x00000373
 10c:	00000375 	.word	0x00000375
            this_spi->hw_reg->TX_DATA = this_spi->slave_tx_buffer[this_spi->slave_tx_idx];
        }
        else if(0u != this_spi->cmd_done)
        {
            /* Fill with 0s if no need to insert command response */
            this_spi->hw_reg->TX_DATA = 0x00u;
 110:	00000377 	.word	0x00000377
        }

        tx_fifo_full = this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK;
        if(0u == tx_fifo_full)
        {
            if(transit < RX_FIFO_SIZE)
 114:	00000379 	.word	0x00000379
            {
                /* Send another byte. */
                if(tx_idx < cmd_byte_size)
 118:	0000037b 	.word	0x0000037b
                {
                    this_spi->hw_reg->TX_DATA = cmd_buffer[tx_idx];
 11c:	0000037d 	.word	0x0000037d
 120:	0000037f 	.word	0x0000037f
                    ++tx_idx;
 124:	00000381 	.word	0x00000381
 128:	00000383 	.word	0x00000383
                    ++transit;
 12c:	00000385 	.word	0x00000385
 130:	00000387 	.word	0x00000387
                }
                else
                {
                    if(tx_idx < transfer_size)
 134:	00000389 	.word	0x00000389
                    {
                        this_spi->hw_reg->TX_DATA = 0x00u;
 138:	0000038b 	.word	0x0000038b
                        ++tx_idx;
 13c:	0000038d 	.word	0x0000038d
 140:	0000038f 	.word	0x0000038f
                        ++transit;
 144:	00000391 	.word	0x00000391
        this_spi->hw_reg->INT_CLEAR = TXDONE_IRQ_MASK;
        this_spi->hw_reg->CONTROL |= CTRL_TX_IRQ_EN_MASK;
    }
    else
    {
        this_spi->hw_reg->COMMAND |= AUTOFILL_MASK;
 148:	00000393 	.word	0x00000393
        }
    }
    /* Perform the remainder of the transfer by sending a byte every time a byte
     * has been received. This should ensure that no Rx overflow can happen in
     * case of an interrupt occurs during this function. */
    while(transfer_idx < transfer_size)
 14c:	00000395 	.word	0x00000395
    {
        this_spi->hw_reg->COMMAND |= AUTOFILL_MASK;
    }
    
    /* Ensure command interrupt disabled if no handler */
    if(0u == this_spi->cmd_handler)
 150:	00000397 	.word	0x00000397
    {
        this_spi->hw_reg->CONTROL2 &= ~(uint32_t)C2_ENABLE_CMD_IRQ_MASK;
 154:	00000399 	.word	0x00000399
 158:	0000039b 	.word	0x0000039b
 15c:	0000039d 	.word	0x0000039d
     * the next transaction.
     *
     * Make sure to clear any pending ssend ints otherwise we will trigger
     * an immediate interrupt.
     */
    this_spi->hw_reg->INT_CLEAR = SSEND_IRQ_MASK;
 160:	0000039f 	.word	0x0000039f
 164:	000003a1 	.word	0x000003a1
    this_spi->hw_reg->CONTROL2 |= C2_ENABLE_SSEND_IRQ_MASK;
 168:	000003a3 	.word	0x000003a3
 16c:	000003a5 	.word	0x000003a5
    
    /* Clear down ints to avoid stale ints triggering when we enable them below */
    this_spi->hw_reg->INT_CLEAR = TXURUN_IRQ_MASK | RXOVFLOW_IRQ_MASK |
 170:	000003a7 	.word	0x000003a7
 174:	000003a9 	.word	0x000003a9
                                  RXDONE_IRQ_MASK;
    /*
     * Enable TX underrun and RX overflow interrupts to improve error
     * recovery and enable Rx interrupt.
     */
    this_spi->hw_reg->CONTROL |= CTRL_RX_IRQ_EN_MASK | CTRL_URUN_IRQ_EN_MASK |
 178:	000003ab 	.word	0x000003ab
 17c:	000003ad 	.word	0x000003ad
 180:	000003af 	.word	0x000003af
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 184:	000003b1 	.word	0x000003b1
 188:	000003b3 	.word	0x000003b3
 18c:	000003b5 	.word	0x000003b5
 190:	000003b7 	.word	0x000003b7
 194:	000003b9 	.word	0x000003b9
 198:	000003bb 	.word	0x000003bb
 19c:	000003bd 	.word	0x000003bd
 1a0:	000003bf 	.word	0x000003bf
                                 CTRL_OVFLOW_IRQ_EN_MASK;

    NVIC_EnableIRQ(this_spi->irqn);
}
 1a4:	000003c1 	.word	0x000003c1
 1a8:	000003c3 	.word	0x000003c3
 1ac:	000003c5 	.word	0x000003c5
 1b0:	000003c7 	.word	0x000003c7
 1b4:	000003c9 	.word	0x000003c9
 1b8:	000003cb 	.word	0x000003cb
 1bc:	000003cd 	.word	0x000003cd
 1c0:	000003cf 	.word	0x000003cf
 1c4:	000003d1 	.word	0x000003d1
 1c8:	000003d3 	.word	0x000003d3
 1cc:	000003d5 	.word	0x000003d5
 1d0:	000003d7 	.word	0x000003d7
 1d4:	000003d9 	.word	0x000003d9
 1d8:	000003db 	.word	0x000003db
 1dc:	000003dd 	.word	0x000003dd
 1e0:	000003df 	.word	0x000003df
 1e4:	000003e1 	.word	0x000003e1
 1e8:	000003e3 	.word	0x000003e3
 1ec:	000003e5 	.word	0x000003e5
 1f0:	000003e7 	.word	0x000003e7
 1f4:	000003e9 	.word	0x000003e9
 1f8:	000003eb 	.word	0x000003eb
 1fc:	000003ed 	.word	0x000003ed
 200:	000003ef 	.word	0x000003ef
 204:	000003f1 	.word	0x000003f1
 208:	000003f3 	.word	0x000003f3
 20c:	000003f5 	.word	0x000003f5
 210:	000003f7 	.word	0x000003f7
 214:	000003f9 	.word	0x000003f9
 218:	000033f5 	.word	0x000033f5
 21c:	00003415 	.word	0x00003415
 220:	00003435 	.word	0x00003435
 224:	00003455 	.word	0x00003455
 228:	00003475 	.word	0x00003475
 22c:	00003495 	.word	0x00003495
 230:	000034b5 	.word	0x000034b5
 234:	000034d5 	.word	0x000034d5
 238:	000034f5 	.word	0x000034f5
 23c:	00003515 	.word	0x00003515
 240:	00003535 	.word	0x00003535
 244:	00003555 	.word	0x00003555
 248:	00003575 	.word	0x00003575
 24c:	00003595 	.word	0x00003595
 250:	000035b5 	.word	0x000035b5
 254:	000035d5 	.word	0x000035d5
 258:	000035f5 	.word	0x000035f5
 25c:	00003615 	.word	0x00003615
 260:	00003635 	.word	0x00003635
 264:	00003655 	.word	0x00003655
 268:	00003675 	.word	0x00003675
 26c:	00003695 	.word	0x00003695
 270:	000036b5 	.word	0x000036b5
 274:	000036d5 	.word	0x000036d5
 278:	000036f5 	.word	0x000036f5
 27c:	00003715 	.word	0x00003715
 280:	00003735 	.word	0x00003735
 284:	00003755 	.word	0x00003755
 288:	00003775 	.word	0x00003775
 28c:	00003795 	.word	0x00003795
 290:	000037b5 	.word	0x000037b5
 294:	000037d5 	.word	0x000037d5

00000298 <Reset_Handler>:
 298:	4868      	ldr	r0, [pc, #416]	; (43c <ACE_ADC2_FifoEmpty_IRQHandler+0x44>)
 29a:	4780      	blx	r0
 29c:	4868      	ldr	r0, [pc, #416]	; (440 <ACE_ADC2_FifoEmpty_IRQHandler+0x48>)
 29e:	2800      	cmp	r0, #0
 2a0:	d10b      	bne.n	2ba <copy_data>
 2a2:	4868      	ldr	r0, [pc, #416]	; (444 <ACE_ADC2_FifoEmpty_IRQHandler+0x4c>)
 2a4:	4968      	ldr	r1, [pc, #416]	; (448 <ACE_ADC2_FifoEmpty_IRQHandler+0x50>)
 2a6:	4a69      	ldr	r2, [pc, #420]	; (44c <ACE_ADC2_FifoEmpty_IRQHandler+0x54>)
 2a8:	4288      	cmp	r0, r1
 2aa:	d006      	beq.n	2ba <copy_data>

000002ac <copy_code_loop>:
 2ac:	4291      	cmp	r1, r2
 2ae:	bf1c      	itt	ne
 2b0:	f850 3b04 	ldrne.w	r3, [r0], #4
 2b4:	f841 3b04 	strne.w	r3, [r1], #4
 2b8:	d1f8      	bne.n	2ac <copy_code_loop>

000002ba <copy_data>:
 2ba:	4865      	ldr	r0, [pc, #404]	; (450 <ACE_ADC2_FifoEmpty_IRQHandler+0x58>)
 2bc:	4965      	ldr	r1, [pc, #404]	; (454 <ACE_ADC2_FifoEmpty_IRQHandler+0x5c>)
 2be:	4a66      	ldr	r2, [pc, #408]	; (458 <ACE_ADC2_FifoEmpty_IRQHandler+0x60>)
 2c0:	4288      	cmp	r0, r1
 2c2:	d006      	beq.n	2d2 <clear_bss>

000002c4 <copy_data_loop>:
 2c4:	4291      	cmp	r1, r2
 2c6:	bf1c      	itt	ne
 2c8:	f850 3b04 	ldrne.w	r3, [r0], #4
 2cc:	f841 3b04 	strne.w	r3, [r1], #4
 2d0:	d1f8      	bne.n	2c4 <copy_data_loop>

000002d2 <clear_bss>:
 2d2:	4862      	ldr	r0, [pc, #392]	; (45c <ACE_ADC2_FifoEmpty_IRQHandler+0x64>)
 2d4:	4962      	ldr	r1, [pc, #392]	; (460 <ACE_ADC2_FifoEmpty_IRQHandler+0x68>)
 2d6:	4a63      	ldr	r2, [pc, #396]	; (464 <ACE_ADC2_FifoEmpty_IRQHandler+0x6c>)

000002d8 <clear_bss_loop>:
 2d8:	4291      	cmp	r1, r2
 2da:	bf18      	it	ne
 2dc:	f841 0b04 	strne.w	r0, [r1], #4
 2e0:	d1fa      	bne.n	2d8 <clear_bss_loop>
	...

000002f0 <call_glob_ctor>:
 2f0:	f8df 0174 	ldr.w	r0, [pc, #372]	; 468 <ACE_ADC2_FifoEmpty_IRQHandler+0x70>
 2f4:	f20f 0e03 	addw	lr, pc, #3
 2f8:	4700      	bx	r0

000002fa <branch_to_main>:
 2fa:	f04f 0000 	mov.w	r0, #0
 2fe:	f04f 0100 	mov.w	r1, #0
 302:	f8df f168 	ldr.w	pc, [pc, #360]	; 46c <ACE_ADC2_FifoEmpty_IRQHandler+0x74>

00000306 <ExitLoop>:
 306:	e7fe      	b.n	306 <ExitLoop>

00000308 <NMI_Handler>:
 308:	e7fe      	b.n	308 <NMI_Handler>

0000030a <HardFault_Handler>:
 30a:	e7fe      	b.n	30a <HardFault_Handler>

0000030c <MemManage_Handler>:
 30c:	e7fe      	b.n	30c <MemManage_Handler>

0000030e <BusFault_Handler>:
 30e:	e7fe      	b.n	30e <BusFault_Handler>

00000310 <UsageFault_Handler>:
 310:	e7fe      	b.n	310 <UsageFault_Handler>

00000312 <SVC_Handler>:
 312:	e7fe      	b.n	312 <SVC_Handler>

00000314 <DebugMon_Handler>:
 314:	e7fe      	b.n	314 <DebugMon_Handler>

00000316 <PendSV_Handler>:
 316:	e7fe      	b.n	316 <PendSV_Handler>

00000318 <SysTick_Handler>:
 318:	e7fe      	b.n	318 <SysTick_Handler>

0000031a <WdogWakeup_IRQHandler>:
 31a:	e7fe      	b.n	31a <WdogWakeup_IRQHandler>

0000031c <BrownOut_1_5V_IRQHandler>:
 31c:	e7fe      	b.n	31c <BrownOut_1_5V_IRQHandler>

0000031e <BrownOut_3_3V_IRQHandler>:
 31e:	e7fe      	b.n	31e <BrownOut_3_3V_IRQHandler>

00000320 <RTC_Match_IRQHandler>:
 320:	e7fe      	b.n	320 <RTC_Match_IRQHandler>

00000322 <RTCIF_Pub_IRQHandler>:
 322:	e7fe      	b.n	322 <RTCIF_Pub_IRQHandler>

00000324 <EthernetMAC_IRQHandler>:
 324:	e7fe      	b.n	324 <EthernetMAC_IRQHandler>

00000326 <IAP_IRQHandler>:
 326:	e7fe      	b.n	326 <IAP_IRQHandler>

00000328 <ENVM0_IRQHandler>:
 328:	e7fe      	b.n	328 <ENVM0_IRQHandler>

0000032a <ENVM1_IRQHandler>:
 32a:	e7fe      	b.n	32a <ENVM1_IRQHandler>

0000032c <DMA_IRQHandler>:
 32c:	e7fe      	b.n	32c <DMA_IRQHandler>
 32e:	e7fe      	b.n	32e <DMA_IRQHandler+0x2>
 330:	e7fe      	b.n	330 <DMA_IRQHandler+0x4>
 332:	e7fe      	b.n	332 <DMA_IRQHandler+0x6>
 334:	e7fe      	b.n	334 <DMA_IRQHandler+0x8>
 336:	e7fe      	b.n	336 <DMA_IRQHandler+0xa>

00000338 <I2C0_SMBAlert_IRQHandler>:
 338:	e7fe      	b.n	338 <I2C0_SMBAlert_IRQHandler>

0000033a <I2C0_SMBus_IRQHandler>:
 33a:	e7fe      	b.n	33a <I2C0_SMBus_IRQHandler>
 33c:	e7fe      	b.n	33c <I2C0_SMBus_IRQHandler+0x2>

0000033e <I2C1_SMBAlert_IRQHandler>:
 33e:	e7fe      	b.n	33e <I2C1_SMBAlert_IRQHandler>

00000340 <I2C1_SMBus_IRQHandler>:
 340:	e7fe      	b.n	340 <I2C1_SMBus_IRQHandler>

00000342 <Timer1_IRQHandler>:
 342:	e7fe      	b.n	342 <Timer1_IRQHandler>

00000344 <Timer2_IRQHandler>:
 344:	e7fe      	b.n	344 <Timer2_IRQHandler>

00000346 <PLL_Lock_IRQHandler>:
 346:	e7fe      	b.n	346 <PLL_Lock_IRQHandler>

00000348 <PLL_LockLost_IRQHandler>:
 348:	e7fe      	b.n	348 <PLL_LockLost_IRQHandler>

0000034a <CommError_IRQHandler>:
 34a:	e7fe      	b.n	34a <CommError_IRQHandler>

0000034c <Fabric_IRQHandler>:
 34c:	e7fe      	b.n	34c <Fabric_IRQHandler>

0000034e <GPIO0_IRQHandler>:
 34e:	e7fe      	b.n	34e <GPIO0_IRQHandler>

00000350 <GPIO1_IRQHandler>:
 350:	e7fe      	b.n	350 <GPIO1_IRQHandler>

00000352 <GPIO2_IRQHandler>:
 352:	e7fe      	b.n	352 <GPIO2_IRQHandler>

00000354 <GPIO3_IRQHandler>:
 354:	e7fe      	b.n	354 <GPIO3_IRQHandler>

00000356 <GPIO4_IRQHandler>:
 356:	e7fe      	b.n	356 <GPIO4_IRQHandler>

00000358 <GPIO5_IRQHandler>:
 358:	e7fe      	b.n	358 <GPIO5_IRQHandler>

0000035a <GPIO6_IRQHandler>:
 35a:	e7fe      	b.n	35a <GPIO6_IRQHandler>

0000035c <GPIO7_IRQHandler>:
 35c:	e7fe      	b.n	35c <GPIO7_IRQHandler>

0000035e <GPIO8_IRQHandler>:
 35e:	e7fe      	b.n	35e <GPIO8_IRQHandler>

00000360 <GPIO9_IRQHandler>:
 360:	e7fe      	b.n	360 <GPIO9_IRQHandler>

00000362 <GPIO10_IRQHandler>:
 362:	e7fe      	b.n	362 <GPIO10_IRQHandler>

00000364 <GPIO11_IRQHandler>:
 364:	e7fe      	b.n	364 <GPIO11_IRQHandler>

00000366 <GPIO12_IRQHandler>:
 366:	e7fe      	b.n	366 <GPIO12_IRQHandler>

00000368 <GPIO13_IRQHandler>:
 368:	e7fe      	b.n	368 <GPIO13_IRQHandler>

0000036a <GPIO14_IRQHandler>:
 36a:	e7fe      	b.n	36a <GPIO14_IRQHandler>

0000036c <GPIO15_IRQHandler>:
 36c:	e7fe      	b.n	36c <GPIO15_IRQHandler>

0000036e <GPIO16_IRQHandler>:
 36e:	e7fe      	b.n	36e <GPIO16_IRQHandler>

00000370 <GPIO17_IRQHandler>:
 370:	e7fe      	b.n	370 <GPIO17_IRQHandler>

00000372 <GPIO18_IRQHandler>:
 372:	e7fe      	b.n	372 <GPIO18_IRQHandler>

00000374 <GPIO19_IRQHandler>:
 374:	e7fe      	b.n	374 <GPIO19_IRQHandler>

00000376 <GPIO20_IRQHandler>:
 376:	e7fe      	b.n	376 <GPIO20_IRQHandler>

00000378 <GPIO21_IRQHandler>:
 378:	e7fe      	b.n	378 <GPIO21_IRQHandler>

0000037a <GPIO22_IRQHandler>:
 37a:	e7fe      	b.n	37a <GPIO22_IRQHandler>

0000037c <GPIO23_IRQHandler>:
 37c:	e7fe      	b.n	37c <GPIO23_IRQHandler>

0000037e <GPIO24_IRQHandler>:
 37e:	e7fe      	b.n	37e <GPIO24_IRQHandler>

00000380 <GPIO25_IRQHandler>:
 380:	e7fe      	b.n	380 <GPIO25_IRQHandler>

00000382 <GPIO26_IRQHandler>:
 382:	e7fe      	b.n	382 <GPIO26_IRQHandler>

00000384 <GPIO27_IRQHandler>:
 384:	e7fe      	b.n	384 <GPIO27_IRQHandler>

00000386 <GPIO28_IRQHandler>:
 386:	e7fe      	b.n	386 <GPIO28_IRQHandler>

00000388 <GPIO29_IRQHandler>:
 388:	e7fe      	b.n	388 <GPIO29_IRQHandler>

0000038a <GPIO30_IRQHandler>:
 38a:	e7fe      	b.n	38a <GPIO30_IRQHandler>

0000038c <GPIO31_IRQHandler>:
 38c:	e7fe      	b.n	38c <GPIO31_IRQHandler>

0000038e <ACE_PC0_Flag0_IRQHandler>:
 38e:	e7fe      	b.n	38e <ACE_PC0_Flag0_IRQHandler>

00000390 <ACE_PC0_Flag1_IRQHandler>:
 390:	e7fe      	b.n	390 <ACE_PC0_Flag1_IRQHandler>

00000392 <ACE_PC0_Flag2_IRQHandler>:
 392:	e7fe      	b.n	392 <ACE_PC0_Flag2_IRQHandler>

00000394 <ACE_PC0_Flag3_IRQHandler>:
 394:	e7fe      	b.n	394 <ACE_PC0_Flag3_IRQHandler>

00000396 <ACE_PC1_Flag0_IRQHandler>:
 396:	e7fe      	b.n	396 <ACE_PC1_Flag0_IRQHandler>

00000398 <ACE_PC1_Flag1_IRQHandler>:
 398:	e7fe      	b.n	398 <ACE_PC1_Flag1_IRQHandler>

0000039a <ACE_PC1_Flag2_IRQHandler>:
 39a:	e7fe      	b.n	39a <ACE_PC1_Flag2_IRQHandler>

0000039c <ACE_PC1_Flag3_IRQHandler>:
 39c:	e7fe      	b.n	39c <ACE_PC1_Flag3_IRQHandler>

0000039e <ACE_PC2_Flag0_IRQHandler>:
 39e:	e7fe      	b.n	39e <ACE_PC2_Flag0_IRQHandler>

000003a0 <ACE_PC2_Flag1_IRQHandler>:
 3a0:	e7fe      	b.n	3a0 <ACE_PC2_Flag1_IRQHandler>

000003a2 <ACE_PC2_Flag2_IRQHandler>:
 3a2:	e7fe      	b.n	3a2 <ACE_PC2_Flag2_IRQHandler>

000003a4 <ACE_PC2_Flag3_IRQHandler>:
 3a4:	e7fe      	b.n	3a4 <ACE_PC2_Flag3_IRQHandler>

000003a6 <ACE_ADC0_DataValid_IRQHandler>:
 3a6:	e7fe      	b.n	3a6 <ACE_ADC0_DataValid_IRQHandler>

000003a8 <ACE_ADC1_DataValid_IRQHandler>:
 3a8:	e7fe      	b.n	3a8 <ACE_ADC1_DataValid_IRQHandler>

000003aa <ACE_ADC2_DataValid_IRQHandler>:
 3aa:	e7fe      	b.n	3aa <ACE_ADC2_DataValid_IRQHandler>

000003ac <ACE_ADC0_CalDone_IRQHandler>:
 3ac:	e7fe      	b.n	3ac <ACE_ADC0_CalDone_IRQHandler>

000003ae <ACE_ADC1_CalDone_IRQHandler>:
 3ae:	e7fe      	b.n	3ae <ACE_ADC1_CalDone_IRQHandler>

000003b0 <ACE_ADC2_CalDone_IRQHandler>:
 3b0:	e7fe      	b.n	3b0 <ACE_ADC2_CalDone_IRQHandler>

000003b2 <ACE_ADC0_CalStart_IRQHandler>:
 3b2:	e7fe      	b.n	3b2 <ACE_ADC0_CalStart_IRQHandler>

000003b4 <ACE_ADC1_CalStart_IRQHandler>:
 3b4:	e7fe      	b.n	3b4 <ACE_ADC1_CalStart_IRQHandler>

000003b6 <ACE_ADC2_CalStart_IRQHandler>:
 3b6:	e7fe      	b.n	3b6 <ACE_ADC2_CalStart_IRQHandler>

000003b8 <ACE_Comp0_Fall_IRQHandler>:
 3b8:	e7fe      	b.n	3b8 <ACE_Comp0_Fall_IRQHandler>

000003ba <ACE_Comp1_Fall_IRQHandler>:
 3ba:	e7fe      	b.n	3ba <ACE_Comp1_Fall_IRQHandler>

000003bc <ACE_Comp2_Fall_IRQHandler>:
 3bc:	e7fe      	b.n	3bc <ACE_Comp2_Fall_IRQHandler>

000003be <ACE_Comp3_Fall_IRQHandler>:
 3be:	e7fe      	b.n	3be <ACE_Comp3_Fall_IRQHandler>

000003c0 <ACE_Comp4_Fall_IRQHandler>:
 3c0:	e7fe      	b.n	3c0 <ACE_Comp4_Fall_IRQHandler>

000003c2 <ACE_Comp5_Fall_IRQHandler>:
 3c2:	e7fe      	b.n	3c2 <ACE_Comp5_Fall_IRQHandler>

000003c4 <ACE_Comp6_Fall_IRQHandler>:
 3c4:	e7fe      	b.n	3c4 <ACE_Comp6_Fall_IRQHandler>

000003c6 <ACE_Comp7_Fall_IRQHandler>:
 3c6:	e7fe      	b.n	3c6 <ACE_Comp7_Fall_IRQHandler>

000003c8 <ACE_Comp8_Fall_IRQHandler>:
 3c8:	e7fe      	b.n	3c8 <ACE_Comp8_Fall_IRQHandler>

000003ca <ACE_Comp9_Fall_IRQHandler>:
 3ca:	e7fe      	b.n	3ca <ACE_Comp9_Fall_IRQHandler>

000003cc <ACE_Comp10_Fall_IRQHandler>:
 3cc:	e7fe      	b.n	3cc <ACE_Comp10_Fall_IRQHandler>

000003ce <ACE_Comp11_Fall_IRQHandler>:
 3ce:	e7fe      	b.n	3ce <ACE_Comp11_Fall_IRQHandler>

000003d0 <ACE_Comp0_Rise_IRQHandler>:
 3d0:	e7fe      	b.n	3d0 <ACE_Comp0_Rise_IRQHandler>

000003d2 <ACE_Comp1_Rise_IRQHandler>:
 3d2:	e7fe      	b.n	3d2 <ACE_Comp1_Rise_IRQHandler>

000003d4 <ACE_Comp2_Rise_IRQHandler>:
 3d4:	e7fe      	b.n	3d4 <ACE_Comp2_Rise_IRQHandler>

000003d6 <ACE_Comp3_Rise_IRQHandler>:
 3d6:	e7fe      	b.n	3d6 <ACE_Comp3_Rise_IRQHandler>

000003d8 <ACE_Comp4_Rise_IRQHandler>:
 3d8:	e7fe      	b.n	3d8 <ACE_Comp4_Rise_IRQHandler>

000003da <ACE_Comp5_Rise_IRQHandler>:
 3da:	e7fe      	b.n	3da <ACE_Comp5_Rise_IRQHandler>

000003dc <ACE_Comp6_Rise_IRQHandler>:
 3dc:	e7fe      	b.n	3dc <ACE_Comp6_Rise_IRQHandler>

000003de <ACE_Comp7_Rise_IRQHandler>:
 3de:	e7fe      	b.n	3de <ACE_Comp7_Rise_IRQHandler>

000003e0 <ACE_Comp8_Rise_IRQHandler>:
 3e0:	e7fe      	b.n	3e0 <ACE_Comp8_Rise_IRQHandler>

000003e2 <ACE_Comp9_Rise_IRQHandler>:
 3e2:	e7fe      	b.n	3e2 <ACE_Comp9_Rise_IRQHandler>

000003e4 <ACE_Comp10_Rise_IRQHandler>:
 3e4:	e7fe      	b.n	3e4 <ACE_Comp10_Rise_IRQHandler>

000003e6 <ACE_Comp11_Rise_IRQHandler>:
 3e6:	e7fe      	b.n	3e6 <ACE_Comp11_Rise_IRQHandler>

000003e8 <ACE_ADC0_FifoFull_IRQHandler>:
 3e8:	e7fe      	b.n	3e8 <ACE_ADC0_FifoFull_IRQHandler>

000003ea <ACE_ADC0_FifoAFull_IRQHandler>:
 3ea:	e7fe      	b.n	3ea <ACE_ADC0_FifoAFull_IRQHandler>

000003ec <ACE_ADC0_FifoEmpty_IRQHandler>:
 3ec:	e7fe      	b.n	3ec <ACE_ADC0_FifoEmpty_IRQHandler>

000003ee <ACE_ADC1_FifoFull_IRQHandler>:
 3ee:	e7fe      	b.n	3ee <ACE_ADC1_FifoFull_IRQHandler>

000003f0 <ACE_ADC1_FifoAFull_IRQHandler>:
 3f0:	e7fe      	b.n	3f0 <ACE_ADC1_FifoAFull_IRQHandler>

000003f2 <ACE_ADC1_FifoEmpty_IRQHandler>:
 3f2:	e7fe      	b.n	3f2 <ACE_ADC1_FifoEmpty_IRQHandler>

000003f4 <ACE_ADC2_FifoFull_IRQHandler>:
 3f4:	e7fe      	b.n	3f4 <ACE_ADC2_FifoFull_IRQHandler>

000003f6 <ACE_ADC2_FifoAFull_IRQHandler>:
 3f6:	e7fe      	b.n	3f6 <ACE_ADC2_FifoAFull_IRQHandler>

000003f8 <ACE_ADC2_FifoEmpty_IRQHandler>:
 3f8:	e7fe      	b.n	3f8 <ACE_ADC2_FifoEmpty_IRQHandler>
 3fa:	e7fe      	b.n	3fa <ACE_ADC2_FifoEmpty_IRQHandler+0x2>
 3fc:	e7fe      	b.n	3fc <ACE_ADC2_FifoEmpty_IRQHandler+0x4>
 3fe:	e7fe      	b.n	3fe <ACE_ADC2_FifoEmpty_IRQHandler+0x6>
 400:	e7fe      	b.n	400 <ACE_ADC2_FifoEmpty_IRQHandler+0x8>
 402:	e7fe      	b.n	402 <ACE_ADC2_FifoEmpty_IRQHandler+0xa>
 404:	e7fe      	b.n	404 <ACE_ADC2_FifoEmpty_IRQHandler+0xc>
 406:	e7fe      	b.n	406 <ACE_ADC2_FifoEmpty_IRQHandler+0xe>
 408:	e7fe      	b.n	408 <ACE_ADC2_FifoEmpty_IRQHandler+0x10>
 40a:	e7fe      	b.n	40a <ACE_ADC2_FifoEmpty_IRQHandler+0x12>
 40c:	e7fe      	b.n	40c <ACE_ADC2_FifoEmpty_IRQHandler+0x14>
 40e:	e7fe      	b.n	40e <ACE_ADC2_FifoEmpty_IRQHandler+0x16>
 410:	e7fe      	b.n	410 <ACE_ADC2_FifoEmpty_IRQHandler+0x18>
 412:	e7fe      	b.n	412 <ACE_ADC2_FifoEmpty_IRQHandler+0x1a>
 414:	e7fe      	b.n	414 <ACE_ADC2_FifoEmpty_IRQHandler+0x1c>
 416:	e7fe      	b.n	416 <ACE_ADC2_FifoEmpty_IRQHandler+0x1e>
 418:	e7fe      	b.n	418 <ACE_ADC2_FifoEmpty_IRQHandler+0x20>
 41a:	e7fe      	b.n	41a <ACE_ADC2_FifoEmpty_IRQHandler+0x22>
 41c:	e7fe      	b.n	41c <ACE_ADC2_FifoEmpty_IRQHandler+0x24>
 41e:	e7fe      	b.n	41e <ACE_ADC2_FifoEmpty_IRQHandler+0x26>
 420:	e7fe      	b.n	420 <ACE_ADC2_FifoEmpty_IRQHandler+0x28>
 422:	e7fe      	b.n	422 <ACE_ADC2_FifoEmpty_IRQHandler+0x2a>
 424:	e7fe      	b.n	424 <ACE_ADC2_FifoEmpty_IRQHandler+0x2c>
 426:	e7fe      	b.n	426 <ACE_ADC2_FifoEmpty_IRQHandler+0x2e>
 428:	e7fe      	b.n	428 <ACE_ADC2_FifoEmpty_IRQHandler+0x30>
 42a:	e7fe      	b.n	42a <ACE_ADC2_FifoEmpty_IRQHandler+0x32>
 42c:	e7fe      	b.n	42c <ACE_ADC2_FifoEmpty_IRQHandler+0x34>
 42e:	e7fe      	b.n	42e <ACE_ADC2_FifoEmpty_IRQHandler+0x36>
 430:	e7fe      	b.n	430 <ACE_ADC2_FifoEmpty_IRQHandler+0x38>
 432:	e7fe      	b.n	432 <ACE_ADC2_FifoEmpty_IRQHandler+0x3a>
 434:	e7fe      	b.n	434 <ACE_ADC2_FifoEmpty_IRQHandler+0x3c>
 436:	e7fe      	b.n	436 <ACE_ADC2_FifoEmpty_IRQHandler+0x3e>
 438:	e7fe      	b.n	438 <ACE_ADC2_FifoEmpty_IRQHandler+0x40>
 43a:	0000      	.short	0x0000
 43c:	000032c1 	.word	0x000032c1
 440:	00000001 	.word	0x00000001
 444:	60000470 	.word	0x60000470
 448:	00000470 	.word	0x00000470
 44c:	0000459c 	.word	0x0000459c
 450:	6000459c 	.word	0x6000459c
 454:	20000000 	.word	0x20000000
 458:	2000001c 	.word	0x2000001c
 45c:	00000000 	.word	0x00000000
 460:	2000001c 	.word	0x2000001c
 464:	200002b0 	.word	0x200002b0
 468:	00004309 	.word	0x00004309
 46c:	000004a1 	.word	0x000004a1

Disassembly of section .text:

00000470 <__do_global_dtors_aux>:
     470:	f240 031c 	movw	r3, #28
     474:	f2c2 0300 	movt	r3, #8192	; 0x2000
     478:	781a      	ldrb	r2, [r3, #0]
     47a:	b90a      	cbnz	r2, 480 <__do_global_dtors_aux+0x10>
     47c:	2001      	movs	r0, #1
     47e:	7018      	strb	r0, [r3, #0]
     480:	4770      	bx	lr
     482:	bf00      	nop

00000484 <frame_dummy>:
     484:	f240 0000 	movw	r0, #0
     488:	f2c2 0000 	movt	r0, #8192	; 0x2000
     48c:	b508      	push	{r3, lr}
     48e:	6803      	ldr	r3, [r0, #0]
     490:	b12b      	cbz	r3, 49e <frame_dummy+0x1a>
     492:	f240 0300 	movw	r3, #0
     496:	f2c0 0300 	movt	r3, #0
     49a:	b103      	cbz	r3, 49e <frame_dummy+0x1a>
     49c:	4798      	blx	r3
     49e:	bd08      	pop	{r3, pc}

000004a0 <main>:
uint8_t message[5] = "hello";
uint16_t x, y;
uint8_t z;

int main()
{
     4a0:	b590      	push	{r4, r7, lr}
     4a2:	b093      	sub	sp, #76	; 0x4c
     4a4:	af02      	add	r7, sp, #8
	int menu = -1, t= 0;
     4a6:	f04f 33ff 	mov.w	r3, #4294967295
     4aa:	61bb      	str	r3, [r7, #24]
     4ac:	f04f 0300 	mov.w	r3, #0
     4b0:	61fb      	str	r3, [r7, #28]
	int count = 0;
     4b2:	f04f 0300 	mov.w	r3, #0
     4b6:	623b      	str	r3, [r7, #32]
	int maxX = 0, maxY =0, minX = 5000, minY = 5000;
     4b8:	f04f 0300 	mov.w	r3, #0
     4bc:	627b      	str	r3, [r7, #36]	; 0x24
     4be:	f04f 0300 	mov.w	r3, #0
     4c2:	62bb      	str	r3, [r7, #40]	; 0x28
     4c4:	f241 3388 	movw	r3, #5000	; 0x1388
     4c8:	62fb      	str	r3, [r7, #44]	; 0x2c
     4ca:	f241 3388 	movw	r3, #5000	; 0x1388
     4ce:	633b      	str	r3, [r7, #48]	; 0x30
	MSS_UART_init(&g_mss_uart1, MSS_UART_57600_BAUD, MSS_UART_DATA_8_BITS | MSS_UART_NO_PARITY | MSS_UART_ONE_STOP_BIT);
     4d0:	f240 0070 	movw	r0, #112	; 0x70
     4d4:	f2c2 0000 	movt	r0, #8192	; 0x2000
     4d8:	f44f 4161 	mov.w	r1, #57600	; 0xe100
     4dc:	f04f 0203 	mov.w	r2, #3
     4e0:	f001 fd5c 	bl	1f9c <MSS_UART_init>
	MSS_UART_set_rx_handler( &g_mss_uart1, uart1_rx_handler, MSS_UART_FIFO_SINGLE_BYTE);
     4e4:	f240 0070 	movw	r0, #112	; 0x70
     4e8:	f2c2 0000 	movt	r0, #8192	; 0x2000
     4ec:	f641 4115 	movw	r1, #7189	; 0x1c15
     4f0:	f2c0 0100 	movt	r1, #0
     4f4:	f04f 0200 	mov.w	r2, #0
     4f8:	f001 fcce 	bl	1e98 <MSS_UART_set_rx_handler>
	touchscreen_begin();
     4fc:	f000 fd2e 	bl	f5c <touchscreen_begin>

	drawFillScreen(ILI9341_BLUE);
     500:	f04f 001f 	mov.w	r0, #31
     504:	f000 fef2 	bl	12ec <drawFillScreen>
	drawRectangle(5, 5, 110, 152, ILI9341_YELLOW);
     508:	f64f 73e0 	movw	r3, #65504	; 0xffe0
     50c:	9300      	str	r3, [sp, #0]
     50e:	f04f 0005 	mov.w	r0, #5
     512:	f04f 0105 	mov.w	r1, #5
     516:	f04f 026e 	mov.w	r2, #110	; 0x6e
     51a:	f04f 0398 	mov.w	r3, #152	; 0x98
     51e:	f000 fe77 	bl	1210 <drawRectangle>
	drawRectangle(5, 165, 110, 152, ILI9341_YELLOW);
     522:	f64f 73e0 	movw	r3, #65504	; 0xffe0
     526:	9300      	str	r3, [sp, #0]
     528:	f04f 0005 	mov.w	r0, #5
     52c:	f04f 01a5 	mov.w	r1, #165	; 0xa5
     530:	f04f 026e 	mov.w	r2, #110	; 0x6e
     534:	f04f 0398 	mov.w	r3, #152	; 0x98
     538:	f000 fe6a 	bl	1210 <drawRectangle>
	drawRectangle(120, 5, 115, 312, ILI9341_YELLOW);
     53c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
     540:	9300      	str	r3, [sp, #0]
     542:	f04f 0078 	mov.w	r0, #120	; 0x78
     546:	f04f 0105 	mov.w	r1, #5
     54a:	f04f 0273 	mov.w	r2, #115	; 0x73
     54e:	f44f 739c 	mov.w	r3, #312	; 0x138
     552:	f000 fe5d 	bl	1210 <drawRectangle>

	drawText1(ILI9341_BLACK);
     556:	f04f 0000 	mov.w	r0, #0
     55a:	f000 ff01 	bl	1360 <drawText1>
	drawText2(ILI9341_BLACK);
     55e:	f04f 0000 	mov.w	r0, #0
     562:	f000 ff1f 	bl	13a4 <drawText2>
	drawText3(ILI9341_BLACK);
     566:	f04f 0000 	mov.w	r0, #0
     56a:	f000 ff49 	bl	1400 <drawText3>

	while(1){

		while(menu == -1){
     56e:	e0ef      	b.n	750 <main+0x2b0>
				while (touched()) {
					// read x & y & z;
					while (! bufferEmpty()) {
					uint8_t buf[5] = {0xFF, 0xFF, 0xFF, 0xFF, 0x00};
     570:	f244 422c 	movw	r2, #17452	; 0x442c
     574:	f2c0 0200 	movt	r2, #0
     578:	f107 0310 	add.w	r3, r7, #16
     57c:	e892 0003 	ldmia.w	r2, {r0, r1}
     580:	6018      	str	r0, [r3, #0]
     582:	f103 0304 	add.w	r3, r3, #4
     586:	7019      	strb	r1, [r3, #0]

					  readTouch(&x, &y, &z);
     588:	f240 0020 	movw	r0, #32
     58c:	f2c2 0000 	movt	r0, #8192	; 0x2000
     590:	f240 012a 	movw	r1, #42	; 0x2a
     594:	f2c2 0100 	movt	r1, #8192	; 0x2000
     598:	f240 0228 	movw	r2, #40	; 0x28
     59c:	f2c2 0200 	movt	r2, #8192	; 0x2000
     5a0:	f000 fdb4 	bl	110c <readTouch>
					 //printf("x: %d   y: %d \n\r", x, y);
					  x -= 200;
     5a4:	f240 0320 	movw	r3, #32
     5a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     5ac:	881b      	ldrh	r3, [r3, #0]
     5ae:	f1a3 03c8 	sub.w	r3, r3, #200	; 0xc8
     5b2:	b29a      	uxth	r2, r3
     5b4:	f240 0320 	movw	r3, #32
     5b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     5bc:	801a      	strh	r2, [r3, #0]
					  y -= 320;
     5be:	f240 032a 	movw	r3, #42	; 0x2a
     5c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     5c6:	881b      	ldrh	r3, [r3, #0]
     5c8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
     5cc:	b29a      	uxth	r2, r3
     5ce:	f240 032a 	movw	r3, #42	; 0x2a
     5d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     5d6:	801a      	strh	r2, [r3, #0]

					  float temp = x/3730.0;
     5d8:	f240 0320 	movw	r3, #32
     5dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
     5e0:	881b      	ldrh	r3, [r3, #0]
     5e2:	4618      	mov	r0, r3
     5e4:	f003 fa58 	bl	3a98 <__aeabi_i2d>
     5e8:	4602      	mov	r2, r0
     5ea:	460b      	mov	r3, r1
     5ec:	4610      	mov	r0, r2
     5ee:	4619      	mov	r1, r3
     5f0:	f20f 73e4 	addw	r3, pc, #2020	; 0x7e4
     5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
     5f8:	f003 fbde 	bl	3db8 <__aeabi_ddiv>
     5fc:	4602      	mov	r2, r0
     5fe:	460b      	mov	r3, r1
     600:	4610      	mov	r0, r2
     602:	4619      	mov	r1, r3
     604:	f003 fcc0 	bl	3f88 <__aeabi_d2f>
     608:	4603      	mov	r3, r0
     60a:	637b      	str	r3, [r7, #52]	; 0x34
					  temp *= 240;
     60c:	6b78      	ldr	r0, [r7, #52]	; 0x34
     60e:	f8df 17d8 	ldr.w	r1, [pc, #2008]	; de8 <main+0x948>
     612:	f003 fd09 	bl	4028 <__aeabi_fmul>
     616:	4603      	mov	r3, r0
     618:	637b      	str	r3, [r7, #52]	; 0x34
					  x = temp;
     61a:	6b78      	ldr	r0, [r7, #52]	; 0x34
     61c:	f003 fe54 	bl	42c8 <__aeabi_f2uiz>
     620:	4603      	mov	r3, r0
     622:	b29a      	uxth	r2, r3
     624:	f240 0320 	movw	r3, #32
     628:	f2c2 0300 	movt	r3, #8192	; 0x2000
     62c:	801a      	strh	r2, [r3, #0]

					  temp = y/3605.0;
     62e:	f240 032a 	movw	r3, #42	; 0x2a
     632:	f2c2 0300 	movt	r3, #8192	; 0x2000
     636:	881b      	ldrh	r3, [r3, #0]
     638:	4618      	mov	r0, r3
     63a:	f003 fa2d 	bl	3a98 <__aeabi_i2d>
     63e:	4602      	mov	r2, r0
     640:	460b      	mov	r3, r1
     642:	4610      	mov	r0, r2
     644:	4619      	mov	r1, r3
     646:	f20f 7398 	addw	r3, pc, #1944	; 0x798
     64a:	e9d3 2300 	ldrd	r2, r3, [r3]
     64e:	f003 fbb3 	bl	3db8 <__aeabi_ddiv>
     652:	4602      	mov	r2, r0
     654:	460b      	mov	r3, r1
     656:	4610      	mov	r0, r2
     658:	4619      	mov	r1, r3
     65a:	f003 fc95 	bl	3f88 <__aeabi_d2f>
     65e:	4603      	mov	r3, r0
     660:	637b      	str	r3, [r7, #52]	; 0x34
					  temp *= 320;
     662:	6b78      	ldr	r0, [r7, #52]	; 0x34
     664:	f8df 1784 	ldr.w	r1, [pc, #1924]	; dec <main+0x94c>
     668:	f003 fcde 	bl	4028 <__aeabi_fmul>
     66c:	4603      	mov	r3, r0
     66e:	637b      	str	r3, [r7, #52]	; 0x34
					  y = temp;
     670:	6b78      	ldr	r0, [r7, #52]	; 0x34
     672:	f003 fe29 	bl	42c8 <__aeabi_f2uiz>
     676:	4603      	mov	r3, r0
     678:	b29a      	uxth	r2, r3
     67a:	f240 032a 	movw	r3, #42	; 0x2a
     67e:	f2c2 0300 	movt	r3, #8192	; 0x2000
     682:	801a      	strh	r2, [r3, #0]

					  x = 240 - x;
     684:	f240 0320 	movw	r3, #32
     688:	f2c2 0300 	movt	r3, #8192	; 0x2000
     68c:	881b      	ldrh	r3, [r3, #0]
     68e:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
     692:	b29a      	uxth	r2, r3
     694:	f240 0320 	movw	r3, #32
     698:	f2c2 0300 	movt	r3, #8192	; 0x2000
     69c:	801a      	strh	r2, [r3, #0]
					  y = 320 - y;
     69e:	f240 032a 	movw	r3, #42	; 0x2a
     6a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     6a6:	881b      	ldrh	r3, [r3, #0]
     6a8:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
     6ac:	b29a      	uxth	r2, r3
     6ae:	f240 032a 	movw	r3, #42	; 0x2a
     6b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     6b6:	801a      	strh	r2, [r3, #0]

					  //printf("x: %d   y: %d \n\r", x, y);
					  if(x>120){
     6b8:	f240 0320 	movw	r3, #32
     6bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
     6c0:	881b      	ldrh	r3, [r3, #0]
     6c2:	2b78      	cmp	r3, #120	; 0x78
     6c4:	d90f      	bls.n	6e6 <main+0x246>
						  menu = 0;
     6c6:	f04f 0300 	mov.w	r3, #0
     6ca:	61bb      	str	r3, [r7, #24]
						  buf[4] = '~';
     6cc:	f04f 037e 	mov.w	r3, #126	; 0x7e
     6d0:	753b      	strb	r3, [r7, #20]
						  sendMessage(buf, 5, 0x000);
     6d2:	f107 0310 	add.w	r3, r7, #16
     6d6:	4618      	mov	r0, r3
     6d8:	f04f 0105 	mov.w	r1, #5
     6dc:	f04f 0200 	mov.w	r2, #0
     6e0:	f001 fa1a 	bl	1b18 <sendMessage>
     6e4:	e027      	b.n	736 <main+0x296>

					  }
					  else if(y> 160){
     6e6:	f240 032a 	movw	r3, #42	; 0x2a
     6ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
     6ee:	881b      	ldrh	r3, [r3, #0]
     6f0:	2ba0      	cmp	r3, #160	; 0xa0
     6f2:	d90f      	bls.n	714 <main+0x274>
						  menu = 1;
     6f4:	f04f 0301 	mov.w	r3, #1
     6f8:	61bb      	str	r3, [r7, #24]
						  buf[4] = '%';
     6fa:	f04f 0325 	mov.w	r3, #37	; 0x25
     6fe:	753b      	strb	r3, [r7, #20]
						  sendMessage(buf, 5, 0x000);
     700:	f107 0310 	add.w	r3, r7, #16
     704:	4618      	mov	r0, r3
     706:	f04f 0105 	mov.w	r1, #5
     70a:	f04f 0200 	mov.w	r2, #0
     70e:	f001 fa03 	bl	1b18 <sendMessage>
     712:	e010      	b.n	736 <main+0x296>

					  }
					  else{
						  menu = 2;
     714:	f04f 0302 	mov.w	r3, #2
     718:	61bb      	str	r3, [r7, #24]
						  buf[4] = '_';
     71a:	f04f 035f 	mov.w	r3, #95	; 0x5f
     71e:	753b      	strb	r3, [r7, #20]
						  sendMessage(buf, 5, 0x000);
     720:	f107 0310 	add.w	r3, r7, #16
     724:	4618      	mov	r0, r3
     726:	f04f 0105 	mov.w	r1, #5
     72a:	f04f 0200 	mov.w	r2, #0
     72e:	f001 f9f3 	bl	1b18 <sendMessage>
     732:	e000      	b.n	736 <main+0x296>
	while(1){

		while(menu == -1){
				while (touched()) {
					// read x & y & z;
					while (! bufferEmpty()) {
     734:	bf00      	nop
     736:	f001 f893 	bl	1860 <bufferEmpty>
     73a:	4603      	mov	r3, r0
     73c:	2b00      	cmp	r3, #0
     73e:	f43f af17 	beq.w	570 <main+0xd0>
     742:	e000      	b.n	746 <main+0x2a6>
	drawText3(ILI9341_BLACK);

	while(1){

		while(menu == -1){
				while (touched()) {
     744:	bf00      	nop
     746:	f000 fd33 	bl	11b0 <touched>
     74a:	4603      	mov	r3, r0
     74c:	2b00      	cmp	r3, #0
     74e:	d1f1      	bne.n	734 <main+0x294>
	drawText2(ILI9341_BLACK);
	drawText3(ILI9341_BLACK);

	while(1){

		while(menu == -1){
     750:	69bb      	ldr	r3, [r7, #24]
     752:	f1b3 3fff 	cmp.w	r3, #4294967295
     756:	d0f5      	beq.n	744 <main+0x2a4>
				}

			}


			while (!bufferEmpty()){
     758:	e00d      	b.n	776 <main+0x2d6>
				readTouch(&x, &y, &z);
     75a:	f240 0020 	movw	r0, #32
     75e:	f2c2 0000 	movt	r0, #8192	; 0x2000
     762:	f240 012a 	movw	r1, #42	; 0x2a
     766:	f2c2 0100 	movt	r1, #8192	; 0x2000
     76a:	f240 0228 	movw	r2, #40	; 0x28
     76e:	f2c2 0200 	movt	r2, #8192	; 0x2000
     772:	f000 fccb 	bl	110c <readTouch>
				}

			}


			while (!bufferEmpty()){
     776:	f001 f873 	bl	1860 <bufferEmpty>
     77a:	4603      	mov	r3, r0
     77c:	2b00      	cmp	r3, #0
     77e:	d0ec      	beq.n	75a <main+0x2ba>
				readTouch(&x, &y, &z);
			}

			if(menu == 0){
     780:	69bb      	ldr	r3, [r7, #24]
     782:	2b00      	cmp	r3, #0
     784:	d104      	bne.n	790 <main+0x2f0>
					drawFillScreen(ILI9341_WHITE);
     786:	f64f 70ff 	movw	r0, #65535	; 0xffff
     78a:	f000 fdaf 	bl	12ec <drawFillScreen>
				//drawCircle
				drawCircle(160,240 , 20, ILI9341_BLACK);

			}

			while(menu == 2){
     78e:	e20b      	b.n	ba8 <main+0x708>
			}

			if(menu == 0){
					drawFillScreen(ILI9341_WHITE);
			}
			else if(menu == 1){
     790:	69bb      	ldr	r3, [r7, #24]
     792:	2b01      	cmp	r3, #1
     794:	d104      	bne.n	7a0 <main+0x300>
				drawFillScreen(ILI9341_BLACK);
     796:	f04f 0000 	mov.w	r0, #0
     79a:	f000 fda7 	bl	12ec <drawFillScreen>
				//drawCircle
				drawCircle(160,240 , 20, ILI9341_BLACK);

			}

			while(menu == 2){
     79e:	e203      	b.n	ba8 <main+0x708>
			}
			else if(menu == 1){
				drawFillScreen(ILI9341_BLACK);
			}
			else{
				drawFillScreen(ILI9341_GREEN);
     7a0:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
     7a4:	f000 fda2 	bl	12ec <drawFillScreen>
				drawRectangle(5, 5, 110, 152, ILI9341_WHITE);
     7a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
     7ac:	9300      	str	r3, [sp, #0]
     7ae:	f04f 0005 	mov.w	r0, #5
     7b2:	f04f 0105 	mov.w	r1, #5
     7b6:	f04f 026e 	mov.w	r2, #110	; 0x6e
     7ba:	f04f 0398 	mov.w	r3, #152	; 0x98
     7be:	f000 fd27 	bl	1210 <drawRectangle>
				drawRectangle(5, 165, 110, 152, ILI9341_WHITE);
     7c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
     7c6:	9300      	str	r3, [sp, #0]
     7c8:	f04f 0005 	mov.w	r0, #5
     7cc:	f04f 01a5 	mov.w	r1, #165	; 0xa5
     7d0:	f04f 026e 	mov.w	r2, #110	; 0x6e
     7d4:	f04f 0398 	mov.w	r3, #152	; 0x98
     7d8:	f000 fd1a 	bl	1210 <drawRectangle>
				drawRectangle(120, 5, 115, 152, ILI9341_WHITE);
     7dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
     7e0:	9300      	str	r3, [sp, #0]
     7e2:	f04f 0078 	mov.w	r0, #120	; 0x78
     7e6:	f04f 0105 	mov.w	r1, #5
     7ea:	f04f 0273 	mov.w	r2, #115	; 0x73
     7ee:	f04f 0398 	mov.w	r3, #152	; 0x98
     7f2:	f000 fd0d 	bl	1210 <drawRectangle>
				drawRectangle(120, 165, 115, 152, ILI9341_WHITE);
     7f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
     7fa:	9300      	str	r3, [sp, #0]
     7fc:	f04f 0078 	mov.w	r0, #120	; 0x78
     800:	f04f 01a5 	mov.w	r1, #165	; 0xa5
     804:	f04f 0273 	mov.w	r2, #115	; 0x73
     808:	f04f 0398 	mov.w	r3, #152	; 0x98
     80c:	f000 fd00 	bl	1210 <drawRectangle>

				//draw box
				drawRectangle(40, 60, 3, 35, ILI9341_BLACK);
     810:	f04f 0300 	mov.w	r3, #0
     814:	9300      	str	r3, [sp, #0]
     816:	f04f 0028 	mov.w	r0, #40	; 0x28
     81a:	f04f 013c 	mov.w	r1, #60	; 0x3c
     81e:	f04f 0203 	mov.w	r2, #3
     822:	f04f 0323 	mov.w	r3, #35	; 0x23
     826:	f000 fcf3 	bl	1210 <drawRectangle>
				drawRectangle(40, 90, 35, 3, ILI9341_BLACK);
     82a:	f04f 0300 	mov.w	r3, #0
     82e:	9300      	str	r3, [sp, #0]
     830:	f04f 0028 	mov.w	r0, #40	; 0x28
     834:	f04f 015a 	mov.w	r1, #90	; 0x5a
     838:	f04f 0223 	mov.w	r2, #35	; 0x23
     83c:	f04f 0303 	mov.w	r3, #3
     840:	f000 fce6 	bl	1210 <drawRectangle>
				drawRectangle(40, 60, 35, 3, ILI9341_BLACK);
     844:	f04f 0300 	mov.w	r3, #0
     848:	9300      	str	r3, [sp, #0]
     84a:	f04f 0028 	mov.w	r0, #40	; 0x28
     84e:	f04f 013c 	mov.w	r1, #60	; 0x3c
     852:	f04f 0223 	mov.w	r2, #35	; 0x23
     856:	f04f 0303 	mov.w	r3, #3
     85a:	f000 fcd9 	bl	1210 <drawRectangle>
				drawRectangle(70, 60, 3, 35, ILI9341_BLACK);
     85e:	f04f 0300 	mov.w	r3, #0
     862:	9300      	str	r3, [sp, #0]
     864:	f04f 0046 	mov.w	r0, #70	; 0x46
     868:	f04f 013c 	mov.w	r1, #60	; 0x3c
     86c:	f04f 0203 	mov.w	r2, #3
     870:	f04f 0323 	mov.w	r3, #35	; 0x23
     874:	f000 fccc 	bl	1210 <drawRectangle>

				//drawCircle
				drawCircle(160,240 , 20, ILI9341_BLACK);
     878:	f04f 00a0 	mov.w	r0, #160	; 0xa0
     87c:	f04f 01f0 	mov.w	r1, #240	; 0xf0
     880:	f04f 0214 	mov.w	r2, #20
     884:	f04f 0300 	mov.w	r3, #0
     888:	f001 f856 	bl	1938 <drawCircle>

			}

			while(menu == 2){
     88c:	e18c      	b.n	ba8 <main+0x708>
				uint8_t buf[5] = {0x11, 0x11, 0x11, 0x11, 0x00};
     88e:	f244 4234 	movw	r2, #17460	; 0x4434
     892:	f2c0 0200 	movt	r2, #0
     896:	f107 0308 	add.w	r3, r7, #8
     89a:	e892 0003 	ldmia.w	r2, {r0, r1}
     89e:	6018      	str	r0, [r3, #0]
     8a0:	f103 0304 	add.w	r3, r3, #4
     8a4:	7019      	strb	r1, [r3, #0]

				if (touched()) {
     8a6:	f000 fc83 	bl	11b0 <touched>
     8aa:	4603      	mov	r3, r0
     8ac:	2b00      	cmp	r3, #0
     8ae:	f000 817b 	beq.w	ba8 <main+0x708>
								// read x & y & z;
								while (! bufferEmpty()) {
     8b2:	e173      	b.n	b9c <main+0x6fc>

								  readTouch(&x, &y, &z);
     8b4:	f240 0020 	movw	r0, #32
     8b8:	f2c2 0000 	movt	r0, #8192	; 0x2000
     8bc:	f240 012a 	movw	r1, #42	; 0x2a
     8c0:	f2c2 0100 	movt	r1, #8192	; 0x2000
     8c4:	f240 0228 	movw	r2, #40	; 0x28
     8c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
     8cc:	f000 fc1e 	bl	110c <readTouch>
								 //printf("x: %d   y: %d \n\r", x, y);
								  x -= 200;
     8d0:	f240 0320 	movw	r3, #32
     8d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     8d8:	881b      	ldrh	r3, [r3, #0]
     8da:	f1a3 03c8 	sub.w	r3, r3, #200	; 0xc8
     8de:	b29a      	uxth	r2, r3
     8e0:	f240 0320 	movw	r3, #32
     8e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     8e8:	801a      	strh	r2, [r3, #0]
								  y -= 320;
     8ea:	f240 032a 	movw	r3, #42	; 0x2a
     8ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
     8f2:	881b      	ldrh	r3, [r3, #0]
     8f4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
     8f8:	b29a      	uxth	r2, r3
     8fa:	f240 032a 	movw	r3, #42	; 0x2a
     8fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
     902:	801a      	strh	r2, [r3, #0]

								  float temp = x/3730.0;
     904:	f240 0320 	movw	r3, #32
     908:	f2c2 0300 	movt	r3, #8192	; 0x2000
     90c:	881b      	ldrh	r3, [r3, #0]
     90e:	4618      	mov	r0, r3
     910:	f003 f8c2 	bl	3a98 <__aeabi_i2d>
     914:	4602      	mov	r2, r0
     916:	460b      	mov	r3, r1
     918:	4610      	mov	r0, r2
     91a:	4619      	mov	r1, r3
     91c:	f20f 43b8 	addw	r3, pc, #1208	; 0x4b8
     920:	e9d3 2300 	ldrd	r2, r3, [r3]
     924:	f003 fa48 	bl	3db8 <__aeabi_ddiv>
     928:	4602      	mov	r2, r0
     92a:	460b      	mov	r3, r1
     92c:	4610      	mov	r0, r2
     92e:	4619      	mov	r1, r3
     930:	f003 fb2a 	bl	3f88 <__aeabi_d2f>
     934:	4603      	mov	r3, r0
     936:	63bb      	str	r3, [r7, #56]	; 0x38
								  temp *= 240;
     938:	6bb8      	ldr	r0, [r7, #56]	; 0x38
     93a:	f8df 14ac 	ldr.w	r1, [pc, #1196]	; de8 <main+0x948>
     93e:	f003 fb73 	bl	4028 <__aeabi_fmul>
     942:	4603      	mov	r3, r0
     944:	63bb      	str	r3, [r7, #56]	; 0x38
								  x = temp;
     946:	6bb8      	ldr	r0, [r7, #56]	; 0x38
     948:	f003 fcbe 	bl	42c8 <__aeabi_f2uiz>
     94c:	4603      	mov	r3, r0
     94e:	b29a      	uxth	r2, r3
     950:	f240 0320 	movw	r3, #32
     954:	f2c2 0300 	movt	r3, #8192	; 0x2000
     958:	801a      	strh	r2, [r3, #0]

								  temp = y/3605.0;
     95a:	f240 032a 	movw	r3, #42	; 0x2a
     95e:	f2c2 0300 	movt	r3, #8192	; 0x2000
     962:	881b      	ldrh	r3, [r3, #0]
     964:	4618      	mov	r0, r3
     966:	f003 f897 	bl	3a98 <__aeabi_i2d>
     96a:	4602      	mov	r2, r0
     96c:	460b      	mov	r3, r1
     96e:	4610      	mov	r0, r2
     970:	4619      	mov	r1, r3
     972:	f20f 436c 	addw	r3, pc, #1132	; 0x46c
     976:	e9d3 2300 	ldrd	r2, r3, [r3]
     97a:	f003 fa1d 	bl	3db8 <__aeabi_ddiv>
     97e:	4602      	mov	r2, r0
     980:	460b      	mov	r3, r1
     982:	4610      	mov	r0, r2
     984:	4619      	mov	r1, r3
     986:	f003 faff 	bl	3f88 <__aeabi_d2f>
     98a:	4603      	mov	r3, r0
     98c:	63bb      	str	r3, [r7, #56]	; 0x38
								  temp *= 320;
     98e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
     990:	f8df 1458 	ldr.w	r1, [pc, #1112]	; dec <main+0x94c>
     994:	f003 fb48 	bl	4028 <__aeabi_fmul>
     998:	4603      	mov	r3, r0
     99a:	63bb      	str	r3, [r7, #56]	; 0x38
								  y = temp;
     99c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
     99e:	f003 fc93 	bl	42c8 <__aeabi_f2uiz>
     9a2:	4603      	mov	r3, r0
     9a4:	b29a      	uxth	r2, r3
     9a6:	f240 032a 	movw	r3, #42	; 0x2a
     9aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
     9ae:	801a      	strh	r2, [r3, #0]

								  x = 240 - x;
     9b0:	f240 0320 	movw	r3, #32
     9b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     9b8:	881b      	ldrh	r3, [r3, #0]
     9ba:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
     9be:	b29a      	uxth	r2, r3
     9c0:	f240 0320 	movw	r3, #32
     9c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     9c8:	801a      	strh	r2, [r3, #0]
								  y = 320 - y;
     9ca:	f240 032a 	movw	r3, #42	; 0x2a
     9ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
     9d2:	881b      	ldrh	r3, [r3, #0]
     9d4:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
     9d8:	b29a      	uxth	r2, r3
     9da:	f240 032a 	movw	r3, #42	; 0x2a
     9de:	f2c2 0300 	movt	r3, #8192	; 0x2000
     9e2:	801a      	strh	r2, [r3, #0]

								  //printf("x: %d   y: %d \n\r", x, y);
								  drawRectanglePixel(x, y, 2, 2, ILI9341_BLUE);
     9e4:	f240 0320 	movw	r3, #32
     9e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     9ec:	881a      	ldrh	r2, [r3, #0]
     9ee:	f240 032a 	movw	r3, #42	; 0x2a
     9f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     9f6:	881b      	ldrh	r3, [r3, #0]
     9f8:	f04f 011f 	mov.w	r1, #31
     9fc:	9100      	str	r1, [sp, #0]
     9fe:	4610      	mov	r0, r2
     a00:	4619      	mov	r1, r3
     a02:	f04f 0202 	mov.w	r2, #2
     a06:	f04f 0302 	mov.w	r3, #2
     a0a:	f000 fc41 	bl	1290 <drawRectanglePixel>
								  if(x>120){
     a0e:	f240 0320 	movw	r3, #32
     a12:	f2c2 0300 	movt	r3, #8192	; 0x2000
     a16:	881b      	ldrh	r3, [r3, #0]
     a18:	2b78      	cmp	r3, #120	; 0x78
     a1a:	d948      	bls.n	aae <main+0x60e>
									  if(y>165){
     a1c:	f240 032a 	movw	r3, #42	; 0x2a
     a20:	f2c2 0300 	movt	r3, #8192	; 0x2000
     a24:	881b      	ldrh	r3, [r3, #0]
     a26:	2ba5      	cmp	r3, #165	; 0xa5
     a28:	d920      	bls.n	a6c <main+0x5cc>
										  //send box

										  buf[4] = '(';
     a2a:	f04f 0328 	mov.w	r3, #40	; 0x28
     a2e:	733b      	strb	r3, [r7, #12]
										  sendMessage(buf, 5, 0x000);
     a30:	f107 0308 	add.w	r3, r7, #8
     a34:	4618      	mov	r0, r3
     a36:	f04f 0105 	mov.w	r1, #5
     a3a:	f04f 0200 	mov.w	r2, #0
     a3e:	f001 f86b 	bl	1b18 <sendMessage>
										  while (!bufferEmpty()){
     a42:	e00d      	b.n	a60 <main+0x5c0>
									  				readTouch(&x, &y, &z);
     a44:	f240 0020 	movw	r0, #32
     a48:	f2c2 0000 	movt	r0, #8192	; 0x2000
     a4c:	f240 012a 	movw	r1, #42	; 0x2a
     a50:	f2c2 0100 	movt	r1, #8192	; 0x2000
     a54:	f240 0228 	movw	r2, #40	; 0x28
     a58:	f2c2 0200 	movt	r2, #8192	; 0x2000
     a5c:	f000 fb56 	bl	110c <readTouch>
									  if(y>165){
										  //send box

										  buf[4] = '(';
										  sendMessage(buf, 5, 0x000);
										  while (!bufferEmpty()){
     a60:	f000 fefe 	bl	1860 <bufferEmpty>
     a64:	4603      	mov	r3, r0
     a66:	2b00      	cmp	r3, #0
     a68:	d0ec      	beq.n	a44 <main+0x5a4>
									  }
									  else{
										  //send tri
										  buf[4] = '<';
										  sendMessage(buf, 5, 0x000);
										  while (!bufferEmpty()){
     a6a:	e097      	b.n	b9c <main+0x6fc>
										  										  			}

									  }
									  else{
										  //send tri
										  buf[4] = '<';
     a6c:	f04f 033c 	mov.w	r3, #60	; 0x3c
     a70:	733b      	strb	r3, [r7, #12]
										  sendMessage(buf, 5, 0x000);
     a72:	f107 0308 	add.w	r3, r7, #8
     a76:	4618      	mov	r0, r3
     a78:	f04f 0105 	mov.w	r1, #5
     a7c:	f04f 0200 	mov.w	r2, #0
     a80:	f001 f84a 	bl	1b18 <sendMessage>
										  while (!bufferEmpty()){
     a84:	e00d      	b.n	aa2 <main+0x602>
										  			readTouch(&x, &y, &z);
     a86:	f240 0020 	movw	r0, #32
     a8a:	f2c2 0000 	movt	r0, #8192	; 0x2000
     a8e:	f240 012a 	movw	r1, #42	; 0x2a
     a92:	f2c2 0100 	movt	r1, #8192	; 0x2000
     a96:	f240 0228 	movw	r2, #40	; 0x28
     a9a:	f2c2 0200 	movt	r2, #8192	; 0x2000
     a9e:	f000 fb35 	bl	110c <readTouch>
									  }
									  else{
										  //send tri
										  buf[4] = '<';
										  sendMessage(buf, 5, 0x000);
										  while (!bufferEmpty()){
     aa2:	f000 fedd 	bl	1860 <bufferEmpty>
     aa6:	4603      	mov	r3, r0
     aa8:	2b00      	cmp	r3, #0
     aaa:	d0ec      	beq.n	a86 <main+0x5e6>
     aac:	e076      	b.n	b9c <main+0x6fc>

									  }

								  }
								  else{
									  if(y<165){
     aae:	f240 032a 	movw	r3, #42	; 0x2a
     ab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ab6:	881b      	ldrh	r3, [r3, #0]
     ab8:	2ba4      	cmp	r3, #164	; 0xa4
     aba:	d82f      	bhi.n	b1c <main+0x67c>
										  //send Circle
										  buf[4] = '[';
     abc:	f04f 035b 	mov.w	r3, #91	; 0x5b
     ac0:	733b      	strb	r3, [r7, #12]
										  sendMessage(buf, 5, 0x000);
     ac2:	f107 0308 	add.w	r3, r7, #8
     ac6:	4618      	mov	r0, r3
     ac8:	f04f 0105 	mov.w	r1, #5
     acc:	f04f 0200 	mov.w	r2, #0
     ad0:	f001 f822 	bl	1b18 <sendMessage>
										  while (!bufferEmpty()){
     ad4:	e00d      	b.n	af2 <main+0x652>
										  				readTouch(&x, &y, &z);
     ad6:	f240 0020 	movw	r0, #32
     ada:	f2c2 0000 	movt	r0, #8192	; 0x2000
     ade:	f240 012a 	movw	r1, #42	; 0x2a
     ae2:	f2c2 0100 	movt	r1, #8192	; 0x2000
     ae6:	f240 0228 	movw	r2, #40	; 0x28
     aea:	f2c2 0200 	movt	r2, #8192	; 0x2000
     aee:	f000 fb0d 	bl	110c <readTouch>
								  else{
									  if(y<165){
										  //send Circle
										  buf[4] = '[';
										  sendMessage(buf, 5, 0x000);
										  while (!bufferEmpty()){
     af2:	f000 feb5 	bl	1860 <bufferEmpty>
     af6:	4603      	mov	r3, r0
     af8:	2b00      	cmp	r3, #0
     afa:	d0ec      	beq.n	ad6 <main+0x636>
     afc:	e04e      	b.n	b9c <main+0x6fc>
										  										  			}

									  }
									  else{
										  while (!bufferEmpty()){
										  				readTouch(&x, &y, &z);
     afe:	f240 0020 	movw	r0, #32
     b02:	f2c2 0000 	movt	r0, #8192	; 0x2000
     b06:	f240 012a 	movw	r1, #42	; 0x2a
     b0a:	f2c2 0100 	movt	r1, #8192	; 0x2000
     b0e:	f240 0228 	movw	r2, #40	; 0x28
     b12:	f2c2 0200 	movt	r2, #8192	; 0x2000
     b16:	f000 faf9 	bl	110c <readTouch>
     b1a:	e000      	b.n	b1e <main+0x67e>
										  				readTouch(&x, &y, &z);
										  										  			}

									  }
									  else{
										  while (!bufferEmpty()){
     b1c:	bf00      	nop
     b1e:	f000 fe9f 	bl	1860 <bufferEmpty>
     b22:	4603      	mov	r3, r0
     b24:	2b00      	cmp	r3, #0
     b26:	d0ea      	beq.n	afe <main+0x65e>
										  				readTouch(&x, &y, &z);
										  			}
										  menu = -1;
     b28:	f04f 33ff 	mov.w	r3, #4294967295
     b2c:	61bb      	str	r3, [r7, #24]
										  drawFillScreen(ILI9341_BLUE);
     b2e:	f04f 001f 	mov.w	r0, #31
     b32:	f000 fbdb 	bl	12ec <drawFillScreen>
										  	drawRectangle(5, 5, 110, 152, ILI9341_YELLOW);
     b36:	f64f 73e0 	movw	r3, #65504	; 0xffe0
     b3a:	9300      	str	r3, [sp, #0]
     b3c:	f04f 0005 	mov.w	r0, #5
     b40:	f04f 0105 	mov.w	r1, #5
     b44:	f04f 026e 	mov.w	r2, #110	; 0x6e
     b48:	f04f 0398 	mov.w	r3, #152	; 0x98
     b4c:	f000 fb60 	bl	1210 <drawRectangle>
										  	drawRectangle(5, 165, 110, 152, ILI9341_YELLOW);
     b50:	f64f 73e0 	movw	r3, #65504	; 0xffe0
     b54:	9300      	str	r3, [sp, #0]
     b56:	f04f 0005 	mov.w	r0, #5
     b5a:	f04f 01a5 	mov.w	r1, #165	; 0xa5
     b5e:	f04f 026e 	mov.w	r2, #110	; 0x6e
     b62:	f04f 0398 	mov.w	r3, #152	; 0x98
     b66:	f000 fb53 	bl	1210 <drawRectangle>
										  	drawRectangle(120, 5, 115, 312, ILI9341_YELLOW);
     b6a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
     b6e:	9300      	str	r3, [sp, #0]
     b70:	f04f 0078 	mov.w	r0, #120	; 0x78
     b74:	f04f 0105 	mov.w	r1, #5
     b78:	f04f 0273 	mov.w	r2, #115	; 0x73
     b7c:	f44f 739c 	mov.w	r3, #312	; 0x138
     b80:	f000 fb46 	bl	1210 <drawRectangle>

										  	drawText1(ILI9341_BLACK);
     b84:	f04f 0000 	mov.w	r0, #0
     b88:	f000 fbea 	bl	1360 <drawText1>
										  	drawText2(ILI9341_BLACK);
     b8c:	f04f 0000 	mov.w	r0, #0
     b90:	f000 fc08 	bl	13a4 <drawText2>
										  	drawText3(ILI9341_BLACK);
     b94:	f04f 0000 	mov.w	r0, #0
     b98:	f000 fc32 	bl	1400 <drawText3>
			while(menu == 2){
				uint8_t buf[5] = {0x11, 0x11, 0x11, 0x11, 0x00};

				if (touched()) {
								// read x & y & z;
								while (! bufferEmpty()) {
     b9c:	f000 fe60 	bl	1860 <bufferEmpty>
     ba0:	4603      	mov	r3, r0
     ba2:	2b00      	cmp	r3, #0
     ba4:	f43f ae86 	beq.w	8b4 <main+0x414>
				//drawCircle
				drawCircle(160,240 , 20, ILI9341_BLACK);

			}

			while(menu == 2){
     ba8:	69bb      	ldr	r3, [r7, #24]
     baa:	2b02      	cmp	r3, #2
     bac:	f43f ae6f 	beq.w	88e <main+0x3ee>

								}
							}
			}

			while( menu == 0 )
     bb0:	e10c      	b.n	dcc <main+0x92c>
		{  			while (touched()) {
						// read x & y & z;
						while (! bufferEmpty()) {

							readTouch(&x, &y, &z);
     bb2:	f240 0020 	movw	r0, #32
     bb6:	f2c2 0000 	movt	r0, #8192	; 0x2000
     bba:	f240 012a 	movw	r1, #42	; 0x2a
     bbe:	f2c2 0100 	movt	r1, #8192	; 0x2000
     bc2:	f240 0228 	movw	r2, #40	; 0x28
     bc6:	f2c2 0200 	movt	r2, #8192	; 0x2000
     bca:	f000 fa9f 	bl	110c <readTouch>
							 //printf("x: %d   y: %d \n\r", x, y);
							  x -= 200;
     bce:	f240 0320 	movw	r3, #32
     bd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     bd6:	881b      	ldrh	r3, [r3, #0]
     bd8:	f1a3 03c8 	sub.w	r3, r3, #200	; 0xc8
     bdc:	b29a      	uxth	r2, r3
     bde:	f240 0320 	movw	r3, #32
     be2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     be6:	801a      	strh	r2, [r3, #0]
							  y -= 320;
     be8:	f240 032a 	movw	r3, #42	; 0x2a
     bec:	f2c2 0300 	movt	r3, #8192	; 0x2000
     bf0:	881b      	ldrh	r3, [r3, #0]
     bf2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
     bf6:	b29a      	uxth	r2, r3
     bf8:	f240 032a 	movw	r3, #42	; 0x2a
     bfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
     c00:	801a      	strh	r2, [r3, #0]

							  float temp = x/3730.0;
     c02:	f240 0320 	movw	r3, #32
     c06:	f2c2 0300 	movt	r3, #8192	; 0x2000
     c0a:	881b      	ldrh	r3, [r3, #0]
     c0c:	4618      	mov	r0, r3
     c0e:	f002 ff43 	bl	3a98 <__aeabi_i2d>
     c12:	4602      	mov	r2, r0
     c14:	460b      	mov	r3, r1
     c16:	4610      	mov	r0, r2
     c18:	4619      	mov	r1, r3
     c1a:	a36f      	add	r3, pc, #444	; (adr r3, dd8 <main+0x938>)
     c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
     c20:	f003 f8ca 	bl	3db8 <__aeabi_ddiv>
     c24:	4602      	mov	r2, r0
     c26:	460b      	mov	r3, r1
     c28:	4610      	mov	r0, r2
     c2a:	4619      	mov	r1, r3
     c2c:	f003 f9ac 	bl	3f88 <__aeabi_d2f>
     c30:	4603      	mov	r3, r0
     c32:	63fb      	str	r3, [r7, #60]	; 0x3c
							  temp *= 240;
     c34:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
     c36:	496c      	ldr	r1, [pc, #432]	; (de8 <main+0x948>)
     c38:	f003 f9f6 	bl	4028 <__aeabi_fmul>
     c3c:	4603      	mov	r3, r0
     c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
							  x = temp;
     c40:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
     c42:	f003 fb41 	bl	42c8 <__aeabi_f2uiz>
     c46:	4603      	mov	r3, r0
     c48:	b29a      	uxth	r2, r3
     c4a:	f240 0320 	movw	r3, #32
     c4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
     c52:	801a      	strh	r2, [r3, #0]

							  temp = y/3605.0;
     c54:	f240 032a 	movw	r3, #42	; 0x2a
     c58:	f2c2 0300 	movt	r3, #8192	; 0x2000
     c5c:	881b      	ldrh	r3, [r3, #0]
     c5e:	4618      	mov	r0, r3
     c60:	f002 ff1a 	bl	3a98 <__aeabi_i2d>
     c64:	4602      	mov	r2, r0
     c66:	460b      	mov	r3, r1
     c68:	4610      	mov	r0, r2
     c6a:	4619      	mov	r1, r3
     c6c:	a35c      	add	r3, pc, #368	; (adr r3, de0 <main+0x940>)
     c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
     c72:	f003 f8a1 	bl	3db8 <__aeabi_ddiv>
     c76:	4602      	mov	r2, r0
     c78:	460b      	mov	r3, r1
     c7a:	4610      	mov	r0, r2
     c7c:	4619      	mov	r1, r3
     c7e:	f003 f983 	bl	3f88 <__aeabi_d2f>
     c82:	4603      	mov	r3, r0
     c84:	63fb      	str	r3, [r7, #60]	; 0x3c
							  temp *= 320;
     c86:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
     c88:	4958      	ldr	r1, [pc, #352]	; (dec <main+0x94c>)
     c8a:	f003 f9cd 	bl	4028 <__aeabi_fmul>
     c8e:	4603      	mov	r3, r0
     c90:	63fb      	str	r3, [r7, #60]	; 0x3c
							  y = temp;
     c92:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
     c94:	f003 fb18 	bl	42c8 <__aeabi_f2uiz>
     c98:	4603      	mov	r3, r0
     c9a:	b29a      	uxth	r2, r3
     c9c:	f240 032a 	movw	r3, #42	; 0x2a
     ca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ca4:	801a      	strh	r2, [r3, #0]

							  x = 240 - x;
     ca6:	f240 0320 	movw	r3, #32
     caa:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cae:	881b      	ldrh	r3, [r3, #0]
     cb0:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
     cb4:	b29a      	uxth	r2, r3
     cb6:	f240 0320 	movw	r3, #32
     cba:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cbe:	801a      	strh	r2, [r3, #0]
							  y = 320 - y;
     cc0:	f240 032a 	movw	r3, #42	; 0x2a
     cc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cc8:	881b      	ldrh	r3, [r3, #0]
     cca:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
     cce:	b29a      	uxth	r2, r3
     cd0:	f240 032a 	movw	r3, #42	; 0x2a
     cd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cd8:	801a      	strh	r2, [r3, #0]

							  //printf("x: %d   y: %d \n\r", x, y);
						  if(!t){
     cda:	69fb      	ldr	r3, [r7, #28]
     cdc:	2b00      	cmp	r3, #0
     cde:	d148      	bne.n	d72 <main+0x8d2>
							  if(count < 250){
     ce0:	6a3b      	ldr	r3, [r7, #32]
     ce2:	2bf9      	cmp	r3, #249	; 0xf9
     ce4:	dc4a      	bgt.n	d7c <main+0x8dc>

								  drawRectanglePixel(x, y, 6, 6, ILI9341_BLUE);
     ce6:	f240 0320 	movw	r3, #32
     cea:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cee:	881a      	ldrh	r2, [r3, #0]
     cf0:	f240 032a 	movw	r3, #42	; 0x2a
     cf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cf8:	881b      	ldrh	r3, [r3, #0]
     cfa:	f04f 011f 	mov.w	r1, #31
     cfe:	9100      	str	r1, [sp, #0]
     d00:	4610      	mov	r0, r2
     d02:	4619      	mov	r1, r3
     d04:	f04f 0206 	mov.w	r2, #6
     d08:	f04f 0306 	mov.w	r3, #6
     d0c:	f000 fac0 	bl	1290 <drawRectanglePixel>
								  uint8_t buf[5] = {0,0,0,255-scaleX(x),scaleY(y)};
     d10:	f240 0320 	movw	r3, #32
     d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d18:	881b      	ldrh	r3, [r3, #0]
     d1a:	4618      	mov	r0, r3
     d1c:	f000 fdac 	bl	1878 <scaleX>
     d20:	4603      	mov	r3, r0
     d22:	ea6f 0303 	mvn.w	r3, r3
     d26:	b2dc      	uxtb	r4, r3
     d28:	f240 032a 	movw	r3, #42	; 0x2a
     d2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d30:	881b      	ldrh	r3, [r3, #0]
     d32:	4618      	mov	r0, r3
     d34:	f000 fdd0 	bl	18d8 <scaleY>
     d38:	4603      	mov	r3, r0
     d3a:	f04f 0200 	mov.w	r2, #0
     d3e:	703a      	strb	r2, [r7, #0]
     d40:	f04f 0200 	mov.w	r2, #0
     d44:	707a      	strb	r2, [r7, #1]
     d46:	f04f 0200 	mov.w	r2, #0
     d4a:	70ba      	strb	r2, [r7, #2]
     d4c:	4622      	mov	r2, r4
     d4e:	70fa      	strb	r2, [r7, #3]
     d50:	713b      	strb	r3, [r7, #4]
								  sendMessage(buf, 5, 0x000);
     d52:	463b      	mov	r3, r7
     d54:	4618      	mov	r0, r3
     d56:	f04f 0105 	mov.w	r1, #5
     d5a:	f04f 0200 	mov.w	r2, #0
     d5e:	f000 fedb 	bl	1b18 <sendMessage>

								  count++;
     d62:	6a3b      	ldr	r3, [r7, #32]
     d64:	f103 0301 	add.w	r3, r3, #1
     d68:	623b      	str	r3, [r7, #32]
								  t = 0;
     d6a:	f04f 0300 	mov.w	r3, #0
     d6e:	61fb      	str	r3, [r7, #28]
     d70:	e007      	b.n	d82 <main+0x8e2>
							  }


								  }
								  else{
									  t++;
     d72:	69fb      	ldr	r3, [r7, #28]
     d74:	f103 0301 	add.w	r3, r3, #1
     d78:	61fb      	str	r3, [r7, #28]
     d7a:	e002      	b.n	d82 <main+0x8e2>
								  drawRectanglePixel(x, y, 6, 6, ILI9341_BLUE);
								  uint8_t buf[5] = {0,0,0,255-scaleX(x),scaleY(y)};
								  sendMessage(buf, 5, 0x000);

								  count++;
								  t = 0;
     d7c:	bf00      	nop
     d7e:	e000      	b.n	d82 <main+0x8e2>
			}

			while( menu == 0 )
		{  			while (touched()) {
						// read x & y & z;
						while (! bufferEmpty()) {
     d80:	bf00      	nop
     d82:	f000 fd6d 	bl	1860 <bufferEmpty>
     d86:	4603      	mov	r3, r0
     d88:	2b00      	cmp	r3, #0
     d8a:	f43f af12 	beq.w	bb2 <main+0x712>
     d8e:	e000      	b.n	d92 <main+0x8f2>
								}
							}
			}

			while( menu == 0 )
		{  			while (touched()) {
     d90:	bf00      	nop
     d92:	f000 fa0d 	bl	11b0 <touched>
     d96:	4603      	mov	r3, r0
     d98:	2b00      	cmp	r3, #0
     d9a:	d1f1      	bne.n	d80 <main+0x8e0>


								}
								//writeRegister8(STMPE_INT_STA, 0xFF); // reset all ints, in this example unneeded depending in use
							  }
							while (!bufferEmpty()){
     d9c:	e00d      	b.n	dba <main+0x91a>
									readTouch(&x, &y, &z);
     d9e:	f240 0020 	movw	r0, #32
     da2:	f2c2 0000 	movt	r0, #8192	; 0x2000
     da6:	f240 012a 	movw	r1, #42	; 0x2a
     daa:	f2c2 0100 	movt	r1, #8192	; 0x2000
     dae:	f240 0228 	movw	r2, #40	; 0x28
     db2:	f2c2 0200 	movt	r2, #8192	; 0x2000
     db6:	f000 f9a9 	bl	110c <readTouch>


								}
								//writeRegister8(STMPE_INT_STA, 0xFF); // reset all ints, in this example unneeded depending in use
							  }
							while (!bufferEmpty()){
     dba:	f000 fd51 	bl	1860 <bufferEmpty>
     dbe:	4603      	mov	r3, r0
     dc0:	2b00      	cmp	r3, #0
     dc2:	d0ec      	beq.n	d9e <main+0x8fe>
									readTouch(&x, &y, &z);
								}
							  delay(1);
     dc4:	f04f 0001 	mov.w	r0, #1
     dc8:	f000 fba0 	bl	150c <delay>

								}
							}
			}

			while( menu == 0 )
     dcc:	69bb      	ldr	r3, [r7, #24]
     dce:	2b00      	cmp	r3, #0
     dd0:	d0de      	beq.n	d90 <main+0x8f0>




				}
	}
     dd2:	bf00      	nop
	drawText2(ILI9341_BLACK);
	drawText3(ILI9341_BLACK);

	while(1){

		while(menu == -1){
     dd4:	e4bc      	b.n	750 <main+0x2b0>
     dd6:	bf00      	nop
     dd8:	00000000 	.word	0x00000000
     ddc:	40ad2400 	.word	0x40ad2400
     de0:	00000000 	.word	0x00000000
     de4:	40ac2a00 	.word	0x40ac2a00
     de8:	43700000 	.word	0x43700000
     dec:	43a00000 	.word	0x43a00000

00000df0 <NVIC_DisableIRQ>:
 * 
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
     df0:	b480      	push	{r7}
     df2:	b083      	sub	sp, #12
     df4:	af00      	add	r7, sp, #0
     df6:	4603      	mov	r3, r0
     df8:	80fb      	strh	r3, [r7, #6]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
     dfa:	f24e 1300 	movw	r3, #57600	; 0xe100
     dfe:	f2ce 0300 	movt	r3, #57344	; 0xe000
     e02:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
     e06:	ea4f 1252 	mov.w	r2, r2, lsr #5
     e0a:	88f9      	ldrh	r1, [r7, #6]
     e0c:	f001 011f 	and.w	r1, r1, #31
     e10:	f04f 0001 	mov.w	r0, #1
     e14:	fa00 f101 	lsl.w	r1, r0, r1
     e18:	f102 0220 	add.w	r2, r2, #32
     e1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
     e20:	f107 070c 	add.w	r7, r7, #12
     e24:	46bd      	mov	sp, r7
     e26:	bc80      	pop	{r7}
     e28:	4770      	bx	lr
     e2a:	bf00      	nop

00000e2c <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
     e2c:	b480      	push	{r7}
     e2e:	b083      	sub	sp, #12
     e30:	af00      	add	r7, sp, #0
     e32:	4603      	mov	r3, r0
     e34:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     e36:	f24e 1300 	movw	r3, #57600	; 0xe100
     e3a:	f2ce 0300 	movt	r3, #57344	; 0xe000
     e3e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
     e42:	ea4f 1252 	mov.w	r2, r2, lsr #5
     e46:	88f9      	ldrh	r1, [r7, #6]
     e48:	f001 011f 	and.w	r1, r1, #31
     e4c:	f04f 0001 	mov.w	r0, #1
     e50:	fa00 f101 	lsl.w	r1, r0, r1
     e54:	f102 0260 	add.w	r2, r2, #96	; 0x60
     e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
     e5c:	f107 070c 	add.w	r7, r7, #12
     e60:	46bd      	mov	sp, r7
     e62:	bc80      	pop	{r7}
     e64:	4770      	bx	lr
     e66:	bf00      	nop

00000e68 <MSS_TIM1_init>:
    one-shot mode. Allowed values for this parameter are:
        - MSS_TIMER_PERIODIC_MODE
        - MSS_TIMER_ONE_SHOT_MODE
 */
static __INLINE void MSS_TIM1_init( mss_timer_mode_t mode )
{
     e68:	b580      	push	{r7, lr}
     e6a:	b082      	sub	sp, #8
     e6c:	af00      	add	r7, sp, #0
     e6e:	4603      	mov	r3, r0
     e70:	71fb      	strb	r3, [r7, #7]
    NVIC_DisableIRQ( Timer1_IRQn );             /* Disable timer 1 irq in the Cortex-M3 NVIC */  
     e72:	f04f 0014 	mov.w	r0, #20
     e76:	f7ff ffbb 	bl	df0 <NVIC_DisableIRQ>
    
    SYSREG->SOFT_RST_CR &= ~SYSREG_TIMER_SOFTRESET_MASK; /* Take timer block out of reset */
     e7a:	f242 0300 	movw	r3, #8192	; 0x2000
     e7e:	f2ce 0304 	movt	r3, #57348	; 0xe004
     e82:	f242 0200 	movw	r2, #8192	; 0x2000
     e86:	f2ce 0204 	movt	r2, #57348	; 0xe004
     e8a:	6b12      	ldr	r2, [r2, #48]	; 0x30
     e8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
     e90:	631a      	str	r2, [r3, #48]	; 0x30
    
    TIMER->TIM64_MODE = 0U;                     /* switch to 32 bits mode */
     e92:	f245 0300 	movw	r3, #20480	; 0x5000
     e96:	f2c4 0300 	movt	r3, #16384	; 0x4000
     e9a:	f04f 0200 	mov.w	r2, #0
     e9e:	655a      	str	r2, [r3, #84]	; 0x54
    
    TIMER_BITBAND->TIM1ENABLE = 0U;             /* disable timer */
     ea0:	f240 0300 	movw	r3, #0
     ea4:	f2c4 230a 	movt	r3, #16906	; 0x420a
     ea8:	f04f 0200 	mov.w	r2, #0
     eac:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    TIMER_BITBAND->TIM1INTEN = 0U;              /* disable interrupt */
     eb0:	f240 0300 	movw	r3, #0
     eb4:	f2c4 230a 	movt	r3, #16906	; 0x420a
     eb8:	f04f 0200 	mov.w	r2, #0
     ebc:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    TIMER_BITBAND->TIM1MODE = (uint32_t)mode;   /* set mode (continuous/one-shot) */
     ec0:	f240 0300 	movw	r3, #0
     ec4:	f2c4 230a 	movt	r3, #16906	; 0x420a
     ec8:	79fa      	ldrb	r2, [r7, #7]
     eca:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    
    TIMER->TIM1_RIS = 1U;                       /* clear timer 1 interrupt */
     ece:	f245 0300 	movw	r3, #20480	; 0x5000
     ed2:	f2c4 0300 	movt	r3, #16384	; 0x4000
     ed6:	f04f 0201 	mov.w	r2, #1
     eda:	611a      	str	r2, [r3, #16]
    NVIC_ClearPendingIRQ( Timer1_IRQn );        /* clear timer 1 interrupt within NVIC */
     edc:	f04f 0014 	mov.w	r0, #20
     ee0:	f7ff ffa4 	bl	e2c <NVIC_ClearPendingIRQ>
}
     ee4:	f107 0708 	add.w	r7, r7, #8
     ee8:	46bd      	mov	sp, r7
     eea:	bd80      	pop	{r7, pc}

00000eec <MSS_TIM1_start>:
  MSS_TIM1_load_immediate() or MSS_TIM1_load_background() functions. 
  Note: The MSS_TIM1_start() function is also used to resume the down-counter
        if previously stopped using MSS_TIM1_stop() function.
 */
static __INLINE void MSS_TIM1_start( void )
{
     eec:	b480      	push	{r7}
     eee:	af00      	add	r7, sp, #0
    TIMER_BITBAND->TIM1ENABLE = 1U;    /* enable timer */
     ef0:	f240 0300 	movw	r3, #0
     ef4:	f2c4 230a 	movt	r3, #16906	; 0x420a
     ef8:	f04f 0201 	mov.w	r2, #1
     efc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
     f00:	46bd      	mov	sp, r7
     f02:	bc80      	pop	{r7}
     f04:	4770      	bx	lr
     f06:	bf00      	nop

00000f08 <MSS_TIM1_stop>:
/*-------------------------------------------------------------------------*//**
  The MSS_TIM1_stop() function disables Timer 1 and stops its down-counter
  decrementing.
 */
static __INLINE void MSS_TIM1_stop( void )
{
     f08:	b480      	push	{r7}
     f0a:	af00      	add	r7, sp, #0
    TIMER_BITBAND->TIM1ENABLE = 0U;    /* disable timer */
     f0c:	f240 0300 	movw	r3, #0
     f10:	f2c4 230a 	movt	r3, #16906	; 0x420a
     f14:	f04f 0200 	mov.w	r2, #0
     f18:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
     f1c:	46bd      	mov	sp, r7
     f1e:	bc80      	pop	{r7}
     f20:	4770      	bx	lr
     f22:	bf00      	nop

00000f24 <MSS_TIM1_get_current_value>:
  
  @return
    This function returns the 32-bits current value of the Timer 1 down-counter.
 */
static __INLINE uint32_t MSS_TIM1_get_current_value( void )
{
     f24:	b480      	push	{r7}
     f26:	af00      	add	r7, sp, #0
    return TIMER->TIM1_VAL;
     f28:	f245 0300 	movw	r3, #20480	; 0x5000
     f2c:	f2c4 0300 	movt	r3, #16384	; 0x4000
     f30:	681b      	ldr	r3, [r3, #0]
}
     f32:	4618      	mov	r0, r3
     f34:	46bd      	mov	sp, r7
     f36:	bc80      	pop	{r7}
     f38:	4770      	bx	lr
     f3a:	bf00      	nop

00000f3c <MSS_TIM1_load_immediate>:
  @param load_value
    The load_value parameter specifies the value from which the Timer 1 
    down-counter will start decrementing.
 */
static __INLINE void MSS_TIM1_load_immediate( uint32_t load_value )
{
     f3c:	b480      	push	{r7}
     f3e:	b083      	sub	sp, #12
     f40:	af00      	add	r7, sp, #0
     f42:	6078      	str	r0, [r7, #4]
    TIMER->TIM1_LOADVAL = load_value;
     f44:	f245 0300 	movw	r3, #20480	; 0x5000
     f48:	f2c4 0300 	movt	r3, #16384	; 0x4000
     f4c:	687a      	ldr	r2, [r7, #4]
     f4e:	605a      	str	r2, [r3, #4]
}
     f50:	f107 070c 	add.w	r7, r7, #12
     f54:	46bd      	mov	sp, r7
     f56:	bc80      	pop	{r7}
     f58:	4770      	bx	lr
     f5a:	bf00      	nop

00000f5c <touchscreen_begin>:
    0x31, 0xC1, 0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F,
  ILI9341_SLPOUT  , 0x80,                // Exit Sleep
  ILI9341_DISPON  , 0x80,                // Display on
  0x00                                   // End of list
};
void touchscreen_begin(){
     f5c:	b580      	push	{r7, lr}
     f5e:	b094      	sub	sp, #80	; 0x50
     f60:	af00      	add	r7, sp, #0

	uint8_t cmd, x, numArgs;
	uint8_t i;
	uint8_t temp[65];
	const uint8_t *addr = initcmd;
     f62:	f244 433c 	movw	r3, #17468	; 0x443c
     f66:	f2c0 0300 	movt	r3, #0
     f6a:	64fb      	str	r3, [r7, #76]	; 0x4c

	MSS_SPI_init(&g_mss_spi1);
     f6c:	f240 00c0 	movw	r0, #192	; 0xc0
     f70:	f2c2 0000 	movt	r0, #8192	; 0x2000
     f74:	f001 fc44 	bl	2800 <MSS_SPI_init>
	MSS_I2C_init(&g_mss_i2c1 , TOUCH_ADDR, MSS_I2C_PCLK_DIV_256 );
     f78:	f240 203c 	movw	r0, #572	; 0x23c
     f7c:	f2c2 0000 	movt	r0, #8192	; 0x2000
     f80:	f04f 0141 	mov.w	r1, #65	; 0x41
     f84:	f04f 0200 	mov.w	r2, #0
     f88:	f002 f8ba 	bl	3100 <MSS_I2C_init>
	MSS_GPIO_init();
     f8c:	f002 f946 	bl	321c <MSS_GPIO_init>

	MSS_GPIO_config(DC, MSS_GPIO_OUTPUT_MODE);
     f90:	f04f 0000 	mov.w	r0, #0
     f94:	f04f 0105 	mov.w	r1, #5
     f98:	f002 f970 	bl	327c <MSS_GPIO_config>
	
	configureSPI(8);
     f9c:	f04f 0008 	mov.w	r0, #8
     fa0:	f000 fb88 	bl	16b4 <configureSPI>
	set_SPI_CS();
     fa4:	f000 fbcc 	bl	1740 <set_SPI_CS>
	sendCommandOnly(ILI9341_SWRESET);
     fa8:	f04f 0001 	mov.w	r0, #1
     fac:	f000 face 	bl	154c <sendCommandOnly>
	delay(150);
     fb0:	f04f 0096 	mov.w	r0, #150	; 0x96
     fb4:	f000 faaa 	bl	150c <delay>

	while((cmd = pgm_read_byte(addr++)) > 0) {
     fb8:	e024      	b.n	1004 <PROCESS_STACK_SIZE+0x4>
		x = pgm_read_byte(addr++);
     fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     fbc:	781b      	ldrb	r3, [r3, #0]
     fbe:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
     fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     fc4:	f103 0301 	add.w	r3, r3, #1
     fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
		numArgs = x & 0x7F;
     fca:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
     fce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     fd2:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
		sendCommand(cmd, addr, numArgs);
     fd6:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
     fda:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
     fde:	4610      	mov	r0, r2
     fe0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
     fe2:	461a      	mov	r2, r3
     fe4:	f000 fa62 	bl	14ac <sendCommand>
		addr += numArgs;
     fe8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
     fec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     fee:	4413      	add	r3, r2
     ff0:	64fb      	str	r3, [r7, #76]	; 0x4c
		if(x & 0x80) delay(150);
     ff2:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
     ff6:	b25b      	sxtb	r3, r3
     ff8:	2b00      	cmp	r3, #0
     ffa:	da03      	bge.n	1004 <PROCESS_STACK_SIZE+0x4>
     ffc:	f04f 0096 	mov.w	r0, #150	; 0x96
    1000:	f000 fa84 	bl	150c <delay>
	configureSPI(8);
	set_SPI_CS();
	sendCommandOnly(ILI9341_SWRESET);
	delay(150);

	while((cmd = pgm_read_byte(addr++)) > 0) {
    1004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1006:	781b      	ldrb	r3, [r3, #0]
    1008:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
    100c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
    1010:	2b00      	cmp	r3, #0
    1012:	bf0c      	ite	eq
    1014:	2300      	moveq	r3, #0
    1016:	2301      	movne	r3, #1
    1018:	b2db      	uxtb	r3, r3
    101a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    101c:	f102 0201 	add.w	r2, r2, #1
    1020:	64fa      	str	r2, [r7, #76]	; 0x4c
    1022:	2b00      	cmp	r3, #0
    1024:	d1c9      	bne.n	fba <touchscreen_begin+0x5e>
		numArgs = x & 0x7F;
		sendCommand(cmd, addr, numArgs);
		addr += numArgs;
		if(x & 0x80) delay(150);
	}
	clear_SPI_CS();
    1026:	f000 fb97 	bl	1758 <clear_SPI_CS>

	writeRegister8(STMPE_SYS_CTRL1, STMPE_SYS_CTRL1_RESET);
    102a:	f04f 0003 	mov.w	r0, #3
    102e:	f04f 0102 	mov.w	r1, #2
    1032:	f000 fbb1 	bl	1798 <writeRegister8>
	  delay(10);
    1036:	f04f 000a 	mov.w	r0, #10
    103a:	f000 fa67 	bl	150c <delay>

	  for ( i = 0; i < 65; i++) {
    103e:	f04f 0300 	mov.w	r3, #0
    1042:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    1046:	e00a      	b.n	105e <PROCESS_STACK_SIZE+0x5e>
	    readRegister8(i);
    1048:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    104c:	4618      	mov	r0, r3
    104e:	f000 fbcb 	bl	17e8 <readRegister8>
	clear_SPI_CS();

	writeRegister8(STMPE_SYS_CTRL1, STMPE_SYS_CTRL1_RESET);
	  delay(10);

	  for ( i = 0; i < 65; i++) {
    1052:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    1056:	f103 0301 	add.w	r3, r3, #1
    105a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    105e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    1062:	2b40      	cmp	r3, #64	; 0x40
    1064:	d9f0      	bls.n	1048 <PROCESS_STACK_SIZE+0x48>
	    readRegister8(i);
	  }

	  writeRegister8(STMPE_SYS_CTRL2, 0x0); // turn on clocks!
    1066:	f04f 0004 	mov.w	r0, #4
    106a:	f04f 0100 	mov.w	r1, #0
    106e:	f000 fb93 	bl	1798 <writeRegister8>
	  writeRegister8(STMPE_TSC_CTRL,
    1072:	f04f 0040 	mov.w	r0, #64	; 0x40
    1076:	f04f 0101 	mov.w	r1, #1
    107a:	f000 fb8d 	bl	1798 <writeRegister8>
	                 STMPE_TSC_CTRL_XYZ | STMPE_TSC_CTRL_EN); // XYZ and enable!
	  // Serial.println(readRegister8(STMPE_TSC_CTRL), HEX);
	  writeRegister8(STMPE_INT_EN, STMPE_INT_EN_TOUCHDET);
    107e:	f04f 000a 	mov.w	r0, #10
    1082:	f04f 0101 	mov.w	r1, #1
    1086:	f000 fb87 	bl	1798 <writeRegister8>
	  writeRegister8(STMPE_ADC_CTRL1, STMPE_ADC_CTRL1_10BIT |
    108a:	f04f 0020 	mov.w	r0, #32
    108e:	f04f 0160 	mov.w	r1, #96	; 0x60
    1092:	f000 fb81 	bl	1798 <writeRegister8>
	                                      (0x6 << 4)); // 96 clocks per conversion
	  writeRegister8(STMPE_ADC_CTRL2, STMPE_ADC_CTRL2_6_5MHZ);
    1096:	f04f 0021 	mov.w	r0, #33	; 0x21
    109a:	f04f 0102 	mov.w	r1, #2
    109e:	f000 fb7b 	bl	1798 <writeRegister8>
	  writeRegister8(STMPE_TSC_CFG, STMPE_TSC_CFG_4SAMPLE |
    10a2:	f04f 0041 	mov.w	r0, #65	; 0x41
    10a6:	f04f 01a4 	mov.w	r1, #164	; 0xa4
    10aa:	f000 fb75 	bl	1798 <writeRegister8>
	                                    STMPE_TSC_CFG_DELAY_1MS |
	                                    STMPE_TSC_CFG_SETTLE_5MS);
	  writeRegister8(STMPE_TSC_FRACTION_Z, 0x6);
    10ae:	f04f 0056 	mov.w	r0, #86	; 0x56
    10b2:	f04f 0106 	mov.w	r1, #6
    10b6:	f000 fb6f 	bl	1798 <writeRegister8>
	  writeRegister8(STMPE_FIFO_TH, 1);
    10ba:	f04f 004a 	mov.w	r0, #74	; 0x4a
    10be:	f04f 0101 	mov.w	r1, #1
    10c2:	f000 fb69 	bl	1798 <writeRegister8>
	  writeRegister8(STMPE_FIFO_STA, STMPE_FIFO_STA_RESET);
    10c6:	f04f 004b 	mov.w	r0, #75	; 0x4b
    10ca:	f04f 0101 	mov.w	r1, #1
    10ce:	f000 fb63 	bl	1798 <writeRegister8>
	  writeRegister8(STMPE_FIFO_STA, 0); // unreset
    10d2:	f04f 004b 	mov.w	r0, #75	; 0x4b
    10d6:	f04f 0100 	mov.w	r1, #0
    10da:	f000 fb5d 	bl	1798 <writeRegister8>
	  writeRegister8(STMPE_TSC_I_DRIVE, STMPE_TSC_I_DRIVE_50MA);
    10de:	f04f 0058 	mov.w	r0, #88	; 0x58
    10e2:	f04f 0101 	mov.w	r1, #1
    10e6:	f000 fb57 	bl	1798 <writeRegister8>
	  writeRegister8(STMPE_INT_STA, 0xFF); // reset all ints
    10ea:	f04f 000b 	mov.w	r0, #11
    10ee:	f04f 01ff 	mov.w	r1, #255	; 0xff
    10f2:	f000 fb51 	bl	1798 <writeRegister8>
	  writeRegister8(STMPE_INT_CTRL,
    10f6:	f04f 0009 	mov.w	r0, #9
    10fa:	f04f 0105 	mov.w	r1, #5
    10fe:	f000 fb4b 	bl	1798 <writeRegister8>
	                 STMPE_INT_CTRL_POL_HIGH | STMPE_INT_CTRL_ENABLE);


}
    1102:	f107 0750 	add.w	r7, r7, #80	; 0x50
    1106:	46bd      	mov	sp, r7
    1108:	bd80      	pop	{r7, pc}
    110a:	bf00      	nop

0000110c <readTouch>:
	MSS_GPIO_set_output(yn, 0);

   return z;
}

void readTouch(uint16_t *x, uint16_t *y, uint8_t* z){
    110c:	b590      	push	{r4, r7, lr}
    110e:	b087      	sub	sp, #28
    1110:	af00      	add	r7, sp, #0
    1112:	60f8      	str	r0, [r7, #12]
    1114:	60b9      	str	r1, [r7, #8]
    1116:	607a      	str	r2, [r7, #4]
	uint8_t data[4];
	uint8_t i = 0;
    1118:	f04f 0300 	mov.w	r3, #0
    111c:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i < 4; i++) {
    111e:	f04f 0300 	mov.w	r3, #0
    1122:	75fb      	strb	r3, [r7, #23]
    1124:	e010      	b.n	1148 <readTouch+0x3c>
	    data[i] = readRegister8(0xD7); // _spi->transfer(0x00);
    1126:	7dfc      	ldrb	r4, [r7, #23]
    1128:	f04f 00d7 	mov.w	r0, #215	; 0xd7
    112c:	f000 fb5c 	bl	17e8 <readRegister8>
    1130:	4603      	mov	r3, r0
    1132:	461a      	mov	r2, r3
    1134:	f107 0118 	add.w	r1, r7, #24
    1138:	eb01 0304 	add.w	r3, r1, r4
    113c:	f803 2c08 	strb.w	r2, [r3, #-8]
}

void readTouch(uint16_t *x, uint16_t *y, uint8_t* z){
	uint8_t data[4];
	uint8_t i = 0;
	for (i = 0; i < 4; i++) {
    1140:	7dfb      	ldrb	r3, [r7, #23]
    1142:	f103 0301 	add.w	r3, r3, #1
    1146:	75fb      	strb	r3, [r7, #23]
    1148:	7dfb      	ldrb	r3, [r7, #23]
    114a:	2b03      	cmp	r3, #3
    114c:	d9eb      	bls.n	1126 <readTouch+0x1a>
	    data[i] = readRegister8(0xD7); // _spi->transfer(0x00);
	    // Serial.print("0x"); Serial.print(data[i], HEX); Serial.print(" / ");
	  }
	  *x = data[0];
    114e:	7c3b      	ldrb	r3, [r7, #16]
    1150:	461a      	mov	r2, r3
    1152:	68fb      	ldr	r3, [r7, #12]
    1154:	801a      	strh	r2, [r3, #0]
	  *x <<= 4;
    1156:	68fb      	ldr	r3, [r7, #12]
    1158:	881b      	ldrh	r3, [r3, #0]
    115a:	ea4f 1303 	mov.w	r3, r3, lsl #4
    115e:	b29a      	uxth	r2, r3
    1160:	68fb      	ldr	r3, [r7, #12]
    1162:	801a      	strh	r2, [r3, #0]
	  *x |= (data[1] >> 4);
    1164:	68fb      	ldr	r3, [r7, #12]
    1166:	881a      	ldrh	r2, [r3, #0]
    1168:	7c7b      	ldrb	r3, [r7, #17]
    116a:	ea4f 1313 	mov.w	r3, r3, lsr #4
    116e:	b2db      	uxtb	r3, r3
    1170:	ea42 0303 	orr.w	r3, r2, r3
    1174:	b29a      	uxth	r2, r3
    1176:	68fb      	ldr	r3, [r7, #12]
    1178:	801a      	strh	r2, [r3, #0]
	  *y = data[1] & 0x0F;
    117a:	7c7b      	ldrb	r3, [r7, #17]
    117c:	f003 030f 	and.w	r3, r3, #15
    1180:	68ba      	ldr	r2, [r7, #8]
    1182:	8013      	strh	r3, [r2, #0]
	  *y <<= 8;
    1184:	68bb      	ldr	r3, [r7, #8]
    1186:	881b      	ldrh	r3, [r3, #0]
    1188:	ea4f 2303 	mov.w	r3, r3, lsl #8
    118c:	b29a      	uxth	r2, r3
    118e:	68bb      	ldr	r3, [r7, #8]
    1190:	801a      	strh	r2, [r3, #0]
	  *y |= data[2];
    1192:	68bb      	ldr	r3, [r7, #8]
    1194:	881a      	ldrh	r2, [r3, #0]
    1196:	7cbb      	ldrb	r3, [r7, #18]
    1198:	ea42 0303 	orr.w	r3, r2, r3
    119c:	b29a      	uxth	r2, r3
    119e:	68bb      	ldr	r3, [r7, #8]
    11a0:	801a      	strh	r2, [r3, #0]
	  *z = data[3];
    11a2:	7cfa      	ldrb	r2, [r7, #19]
    11a4:	687b      	ldr	r3, [r7, #4]
    11a6:	701a      	strb	r2, [r3, #0]
}
    11a8:	f107 071c 	add.w	r7, r7, #28
    11ac:	46bd      	mov	sp, r7
    11ae:	bd90      	pop	{r4, r7, pc}

000011b0 <touched>:
int touched(){
    11b0:	b580      	push	{r7, lr}
    11b2:	af00      	add	r7, sp, #0

	return (readRegister8(STMPE_TSC_CTRL) & 0x80);
    11b4:	f04f 0040 	mov.w	r0, #64	; 0x40
    11b8:	f000 fb16 	bl	17e8 <readRegister8>
    11bc:	4603      	mov	r3, r0
    11be:	f003 0380 	and.w	r3, r3, #128	; 0x80
}
    11c2:	4618      	mov	r0, r3
    11c4:	bd80      	pop	{r7, pc}
    11c6:	bf00      	nop

000011c8 <drawPixel>:

void drawPixel(uint16_t x, uint16_t y, uint16_t color){
    11c8:	b580      	push	{r7, lr}
    11ca:	b082      	sub	sp, #8
    11cc:	af00      	add	r7, sp, #0
    11ce:	4613      	mov	r3, r2
    11d0:	4602      	mov	r2, r0
    11d2:	80fa      	strh	r2, [r7, #6]
    11d4:	460a      	mov	r2, r1
    11d6:	80ba      	strh	r2, [r7, #4]
    11d8:	807b      	strh	r3, [r7, #2]

	set_SPI_CS();
    11da:	f000 fab1 	bl	1740 <set_SPI_CS>
	setAddr(x, y, x+1, y+1);
    11de:	88fb      	ldrh	r3, [r7, #6]
    11e0:	f103 0301 	add.w	r3, r3, #1
    11e4:	b29a      	uxth	r2, r3
    11e6:	88bb      	ldrh	r3, [r7, #4]
    11e8:	f103 0301 	add.w	r3, r3, #1
    11ec:	b29b      	uxth	r3, r3
    11ee:	88f8      	ldrh	r0, [r7, #6]
    11f0:	88b9      	ldrh	r1, [r7, #4]
    11f2:	f000 f933 	bl	145c <setAddr>
	set_DC_HIGH();
    11f6:	f000 fabb 	bl	1770 <set_DC_HIGH>
	sendSPI16(color);
    11fa:	887b      	ldrh	r3, [r7, #2]
    11fc:	4618      	mov	r0, r3
    11fe:	f000 fa83 	bl	1708 <sendSPI16>
	clear_SPI_CS();
    1202:	f000 faa9 	bl	1758 <clear_SPI_CS>
}
    1206:	f107 0708 	add.w	r7, r7, #8
    120a:	46bd      	mov	sp, r7
    120c:	bd80      	pop	{r7, pc}
    120e:	bf00      	nop

00001210 <drawRectangle>:


void drawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color){
    1210:	b580      	push	{r7, lr}
    1212:	b084      	sub	sp, #16
    1214:	af00      	add	r7, sp, #0
    1216:	80f8      	strh	r0, [r7, #6]
    1218:	80b9      	strh	r1, [r7, #4]
    121a:	807a      	strh	r2, [r7, #2]
    121c:	803b      	strh	r3, [r7, #0]
	int i, j;

		set_SPI_CS();
    121e:	f000 fa8f 	bl	1740 <set_SPI_CS>
		setAddr(x,y, x+w, y+h);
    1222:	88fa      	ldrh	r2, [r7, #6]
    1224:	887b      	ldrh	r3, [r7, #2]
    1226:	4413      	add	r3, r2
    1228:	b29a      	uxth	r2, r3
    122a:	88b9      	ldrh	r1, [r7, #4]
    122c:	883b      	ldrh	r3, [r7, #0]
    122e:	440b      	add	r3, r1
    1230:	b29b      	uxth	r3, r3
    1232:	88f8      	ldrh	r0, [r7, #6]
    1234:	88b9      	ldrh	r1, [r7, #4]
    1236:	f000 f911 	bl	145c <setAddr>
		set_DC_HIGH();
    123a:	f000 fa99 	bl	1770 <set_DC_HIGH>
		for(i = x; i<x+w; i++){
    123e:	88fb      	ldrh	r3, [r7, #6]
    1240:	60bb      	str	r3, [r7, #8]
    1242:	e018      	b.n	1276 <drawRectangle+0x66>
			for (j =y; j<y+h; j++){
    1244:	88bb      	ldrh	r3, [r7, #4]
    1246:	60fb      	str	r3, [r7, #12]
    1248:	e007      	b.n	125a <drawRectangle+0x4a>
				sendSPI16(color);
    124a:	8b3b      	ldrh	r3, [r7, #24]
    124c:	4618      	mov	r0, r3
    124e:	f000 fa5b 	bl	1708 <sendSPI16>

		set_SPI_CS();
		setAddr(x,y, x+w, y+h);
		set_DC_HIGH();
		for(i = x; i<x+w; i++){
			for (j =y; j<y+h; j++){
    1252:	68fb      	ldr	r3, [r7, #12]
    1254:	f103 0301 	add.w	r3, r3, #1
    1258:	60fb      	str	r3, [r7, #12]
    125a:	88ba      	ldrh	r2, [r7, #4]
    125c:	883b      	ldrh	r3, [r7, #0]
    125e:	441a      	add	r2, r3
    1260:	68fb      	ldr	r3, [r7, #12]
    1262:	429a      	cmp	r2, r3
    1264:	dcf1      	bgt.n	124a <drawRectangle+0x3a>
				sendSPI16(color);
			}
			sendSPI16(color);
    1266:	8b3b      	ldrh	r3, [r7, #24]
    1268:	4618      	mov	r0, r3
    126a:	f000 fa4d 	bl	1708 <sendSPI16>
	int i, j;

		set_SPI_CS();
		setAddr(x,y, x+w, y+h);
		set_DC_HIGH();
		for(i = x; i<x+w; i++){
    126e:	68bb      	ldr	r3, [r7, #8]
    1270:	f103 0301 	add.w	r3, r3, #1
    1274:	60bb      	str	r3, [r7, #8]
    1276:	88fa      	ldrh	r2, [r7, #6]
    1278:	887b      	ldrh	r3, [r7, #2]
    127a:	441a      	add	r2, r3
    127c:	68bb      	ldr	r3, [r7, #8]
    127e:	429a      	cmp	r2, r3
    1280:	dce0      	bgt.n	1244 <drawRectangle+0x34>
				sendSPI16(color);
			}
			sendSPI16(color);
		}

		clear_SPI_CS();
    1282:	f000 fa69 	bl	1758 <clear_SPI_CS>
}
    1286:	f107 0710 	add.w	r7, r7, #16
    128a:	46bd      	mov	sp, r7
    128c:	bd80      	pop	{r7, pc}
    128e:	bf00      	nop

00001290 <drawRectanglePixel>:
void drawRectanglePixel(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color){
    1290:	b580      	push	{r7, lr}
    1292:	b086      	sub	sp, #24
    1294:	af02      	add	r7, sp, #8
    1296:	80f8      	strh	r0, [r7, #6]
    1298:	80b9      	strh	r1, [r7, #4]
    129a:	807a      	strh	r2, [r7, #2]
    129c:	803b      	strh	r3, [r7, #0]
	uint16_t i;

	 for (i=x; i<x+w; i++) {
    129e:	88fb      	ldrh	r3, [r7, #6]
    12a0:	81fb      	strh	r3, [r7, #14]
    12a2:	e018      	b.n	12d6 <drawRectanglePixel+0x46>
	        writeLine(i, y, i, y+h-1, color);
    12a4:	89f8      	ldrh	r0, [r7, #14]
    12a6:	88b9      	ldrh	r1, [r7, #4]
    12a8:	89fa      	ldrh	r2, [r7, #14]
    12aa:	f8b7 c004 	ldrh.w	ip, [r7, #4]
    12ae:	883b      	ldrh	r3, [r7, #0]
    12b0:	4463      	add	r3, ip
    12b2:	b29b      	uxth	r3, r3
    12b4:	f103 33ff 	add.w	r3, r3, #4294967295
    12b8:	b29b      	uxth	r3, r3
    12ba:	b200      	sxth	r0, r0
    12bc:	b209      	sxth	r1, r1
    12be:	b212      	sxth	r2, r2
    12c0:	b21b      	sxth	r3, r3
    12c2:	f8b7 c018 	ldrh.w	ip, [r7, #24]
    12c6:	f8cd c000 	str.w	ip, [sp]
    12ca:	f000 f955 	bl	1578 <writeLine>
		clear_SPI_CS();
}
void drawRectanglePixel(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color){
	uint16_t i;

	 for (i=x; i<x+w; i++) {
    12ce:	89fb      	ldrh	r3, [r7, #14]
    12d0:	f103 0301 	add.w	r3, r3, #1
    12d4:	81fb      	strh	r3, [r7, #14]
    12d6:	89fa      	ldrh	r2, [r7, #14]
    12d8:	88f9      	ldrh	r1, [r7, #6]
    12da:	887b      	ldrh	r3, [r7, #2]
    12dc:	440b      	add	r3, r1
    12de:	429a      	cmp	r2, r3
    12e0:	dbe0      	blt.n	12a4 <drawRectanglePixel+0x14>
	        writeLine(i, y, i, y+h-1, color);
	    }
}		
    12e2:	f107 0710 	add.w	r7, r7, #16
    12e6:	46bd      	mov	sp, r7
    12e8:	bd80      	pop	{r7, pc}
    12ea:	bf00      	nop

000012ec <drawFillScreen>:

void drawFillScreen(uint16_t color){
    12ec:	b580      	push	{r7, lr}
    12ee:	b084      	sub	sp, #16
    12f0:	af00      	add	r7, sp, #0
    12f2:	4603      	mov	r3, r0
    12f4:	80fb      	strh	r3, [r7, #6]
	int i, j;
	//drawRectanglePixel(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT, color);
	set_SPI_CS();
    12f6:	f000 fa23 	bl	1740 <set_SPI_CS>
	setAddr(0, 0, ILI9341_TFTWIDTH-1, ILI9341_TFTHEIGHT-1);
    12fa:	f04f 0000 	mov.w	r0, #0
    12fe:	f04f 0100 	mov.w	r1, #0
    1302:	f04f 02ef 	mov.w	r2, #239	; 0xef
    1306:	f240 133f 	movw	r3, #319	; 0x13f
    130a:	f000 f8a7 	bl	145c <setAddr>
	set_DC_HIGH();
    130e:	f000 fa2f 	bl	1770 <set_DC_HIGH>
	for(i = 0; i<ILI9341_TFTWIDTH; i++){
    1312:	f04f 0300 	mov.w	r3, #0
    1316:	60bb      	str	r3, [r7, #8]
    1318:	e018      	b.n	134c <drawFillScreen+0x60>
		for (j =0; j<ILI9341_TFTHEIGHT; j++){
    131a:	f04f 0300 	mov.w	r3, #0
    131e:	60fb      	str	r3, [r7, #12]
    1320:	e007      	b.n	1332 <drawFillScreen+0x46>
			sendSPI16(color);
    1322:	88fb      	ldrh	r3, [r7, #6]
    1324:	4618      	mov	r0, r3
    1326:	f000 f9ef 	bl	1708 <sendSPI16>
	//drawRectanglePixel(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT, color);
	set_SPI_CS();
	setAddr(0, 0, ILI9341_TFTWIDTH-1, ILI9341_TFTHEIGHT-1);
	set_DC_HIGH();
	for(i = 0; i<ILI9341_TFTWIDTH; i++){
		for (j =0; j<ILI9341_TFTHEIGHT; j++){
    132a:	68fb      	ldr	r3, [r7, #12]
    132c:	f103 0301 	add.w	r3, r3, #1
    1330:	60fb      	str	r3, [r7, #12]
    1332:	68fa      	ldr	r2, [r7, #12]
    1334:	f240 133f 	movw	r3, #319	; 0x13f
    1338:	429a      	cmp	r2, r3
    133a:	ddf2      	ble.n	1322 <drawFillScreen+0x36>
			sendSPI16(color);
		}
		sendSPI16(color);
    133c:	88fb      	ldrh	r3, [r7, #6]
    133e:	4618      	mov	r0, r3
    1340:	f000 f9e2 	bl	1708 <sendSPI16>
	int i, j;
	//drawRectanglePixel(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT, color);
	set_SPI_CS();
	setAddr(0, 0, ILI9341_TFTWIDTH-1, ILI9341_TFTHEIGHT-1);
	set_DC_HIGH();
	for(i = 0; i<ILI9341_TFTWIDTH; i++){
    1344:	68bb      	ldr	r3, [r7, #8]
    1346:	f103 0301 	add.w	r3, r3, #1
    134a:	60bb      	str	r3, [r7, #8]
    134c:	68bb      	ldr	r3, [r7, #8]
    134e:	2bef      	cmp	r3, #239	; 0xef
    1350:	dde3      	ble.n	131a <drawFillScreen+0x2e>
			sendSPI16(color);
		}
		sendSPI16(color);
	}

	clear_SPI_CS();
    1352:	f000 fa01 	bl	1758 <clear_SPI_CS>
}
    1356:	f107 0710 	add.w	r7, r7, #16
    135a:	46bd      	mov	sp, r7
    135c:	bd80      	pop	{r7, pc}
    135e:	bf00      	nop

00001360 <drawText1>:

void drawText1(uint16_t color){
    1360:	b580      	push	{r7, lr}
    1362:	b084      	sub	sp, #16
    1364:	af02      	add	r7, sp, #8
    1366:	4603      	mov	r3, r0
    1368:	80fb      	strh	r3, [r7, #6]
	//T
	drawRectanglePixel(70, 220, 5, 25, color);
    136a:	88fb      	ldrh	r3, [r7, #6]
    136c:	9300      	str	r3, [sp, #0]
    136e:	f04f 0046 	mov.w	r0, #70	; 0x46
    1372:	f04f 01dc 	mov.w	r1, #220	; 0xdc
    1376:	f04f 0205 	mov.w	r2, #5
    137a:	f04f 0319 	mov.w	r3, #25
    137e:	f7ff ff87 	bl	1290 <drawRectanglePixel>
	drawRectanglePixel(40, 230, 30, 5, color);
    1382:	88fb      	ldrh	r3, [r7, #6]
    1384:	9300      	str	r3, [sp, #0]
    1386:	f04f 0028 	mov.w	r0, #40	; 0x28
    138a:	f04f 01e6 	mov.w	r1, #230	; 0xe6
    138e:	f04f 021e 	mov.w	r2, #30
    1392:	f04f 0305 	mov.w	r3, #5
    1396:	f7ff ff7b 	bl	1290 <drawRectanglePixel>


}
    139a:	f107 0708 	add.w	r7, r7, #8
    139e:	46bd      	mov	sp, r7
    13a0:	bd80      	pop	{r7, pc}
    13a2:	bf00      	nop

000013a4 <drawText2>:

void drawText2(uint16_t color){
    13a4:	b580      	push	{r7, lr}
    13a6:	b084      	sub	sp, #16
    13a8:	af02      	add	r7, sp, #8
    13aa:	4603      	mov	r3, r0
    13ac:	80fb      	strh	r3, [r7, #6]
	//C
	drawRectanglePixel(40, 70, 5, 20, color);
    13ae:	88fb      	ldrh	r3, [r7, #6]
    13b0:	9300      	str	r3, [sp, #0]
    13b2:	f04f 0028 	mov.w	r0, #40	; 0x28
    13b6:	f04f 0146 	mov.w	r1, #70	; 0x46
    13ba:	f04f 0205 	mov.w	r2, #5
    13be:	f04f 0314 	mov.w	r3, #20
    13c2:	f7ff ff65 	bl	1290 <drawRectanglePixel>
	drawRectanglePixel(40, 70, 30, 5, color);
    13c6:	88fb      	ldrh	r3, [r7, #6]
    13c8:	9300      	str	r3, [sp, #0]
    13ca:	f04f 0028 	mov.w	r0, #40	; 0x28
    13ce:	f04f 0146 	mov.w	r1, #70	; 0x46
    13d2:	f04f 021e 	mov.w	r2, #30
    13d6:	f04f 0305 	mov.w	r3, #5
    13da:	f7ff ff59 	bl	1290 <drawRectanglePixel>
	drawRectanglePixel(65, 70, 5, 20, color);
    13de:	88fb      	ldrh	r3, [r7, #6]
    13e0:	9300      	str	r3, [sp, #0]
    13e2:	f04f 0041 	mov.w	r0, #65	; 0x41
    13e6:	f04f 0146 	mov.w	r1, #70	; 0x46
    13ea:	f04f 0205 	mov.w	r2, #5
    13ee:	f04f 0314 	mov.w	r3, #20
    13f2:	f7ff ff4d 	bl	1290 <drawRectanglePixel>

}
    13f6:	f107 0708 	add.w	r7, r7, #8
    13fa:	46bd      	mov	sp, r7
    13fc:	bd80      	pop	{r7, pc}
    13fe:	bf00      	nop

00001400 <drawText3>:

void drawText3(uint16_t color){
    1400:	b580      	push	{r7, lr}
    1402:	b084      	sub	sp, #16
    1404:	af02      	add	r7, sp, #8
    1406:	4603      	mov	r3, r0
    1408:	80fb      	strh	r3, [r7, #6]
	//F
	drawRectanglePixel(160, 160, 30, 5, color);
    140a:	88fb      	ldrh	r3, [r7, #6]
    140c:	9300      	str	r3, [sp, #0]
    140e:	f04f 00a0 	mov.w	r0, #160	; 0xa0
    1412:	f04f 01a0 	mov.w	r1, #160	; 0xa0
    1416:	f04f 021e 	mov.w	r2, #30
    141a:	f04f 0305 	mov.w	r3, #5
    141e:	f7ff ff37 	bl	1290 <drawRectanglePixel>
	drawRectanglePixel(190, 160, 5, 20, color);
    1422:	88fb      	ldrh	r3, [r7, #6]
    1424:	9300      	str	r3, [sp, #0]
    1426:	f04f 00be 	mov.w	r0, #190	; 0xbe
    142a:	f04f 01a0 	mov.w	r1, #160	; 0xa0
    142e:	f04f 0205 	mov.w	r2, #5
    1432:	f04f 0314 	mov.w	r3, #20
    1436:	f7ff ff2b 	bl	1290 <drawRectanglePixel>
	drawRectanglePixel(175, 160, 5, 20, color);
    143a:	88fb      	ldrh	r3, [r7, #6]
    143c:	9300      	str	r3, [sp, #0]
    143e:	f04f 00af 	mov.w	r0, #175	; 0xaf
    1442:	f04f 01a0 	mov.w	r1, #160	; 0xa0
    1446:	f04f 0205 	mov.w	r2, #5
    144a:	f04f 0314 	mov.w	r3, #20
    144e:	f7ff ff1f 	bl	1290 <drawRectanglePixel>
}
    1452:	f107 0708 	add.w	r7, r7, #8
    1456:	46bd      	mov	sp, r7
    1458:	bd80      	pop	{r7, pc}
    145a:	bf00      	nop

0000145c <setAddr>:

void setAddr(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1){
    145c:	b580      	push	{r7, lr}
    145e:	b082      	sub	sp, #8
    1460:	af00      	add	r7, sp, #0
    1462:	80f8      	strh	r0, [r7, #6]
    1464:	80b9      	strh	r1, [r7, #4]
    1466:	807a      	strh	r2, [r7, #2]
    1468:	803b      	strh	r3, [r7, #0]
	
	sendCommandOnly(ILI9341_CASET);
    146a:	f04f 002a 	mov.w	r0, #42	; 0x2a
    146e:	f000 f86d 	bl	154c <sendCommandOnly>
	sendSPI16(x0);
    1472:	88fb      	ldrh	r3, [r7, #6]
    1474:	4618      	mov	r0, r3
    1476:	f000 f947 	bl	1708 <sendSPI16>
	sendSPI16(x1);
    147a:	887b      	ldrh	r3, [r7, #2]
    147c:	4618      	mov	r0, r3
    147e:	f000 f943 	bl	1708 <sendSPI16>
	sendCommandOnly(ILI9341_PASET);
    1482:	f04f 002b 	mov.w	r0, #43	; 0x2b
    1486:	f000 f861 	bl	154c <sendCommandOnly>
	sendSPI16(y0);
    148a:	88bb      	ldrh	r3, [r7, #4]
    148c:	4618      	mov	r0, r3
    148e:	f000 f93b 	bl	1708 <sendSPI16>
	sendSPI16(y1);
    1492:	883b      	ldrh	r3, [r7, #0]
    1494:	4618      	mov	r0, r3
    1496:	f000 f937 	bl	1708 <sendSPI16>
	sendCommandOnly(ILI9341_RAMWR);
    149a:	f04f 002c 	mov.w	r0, #44	; 0x2c
    149e:	f000 f855 	bl	154c <sendCommandOnly>
}
    14a2:	f107 0708 	add.w	r7, r7, #8
    14a6:	46bd      	mov	sp, r7
    14a8:	bd80      	pop	{r7, pc}
    14aa:	bf00      	nop

000014ac <sendCommand>:

void sendCommand(uint8_t commandByte, uint8_t *dataBytes, uint8_t numDataBytes){
    14ac:	b580      	push	{r7, lr}
    14ae:	b086      	sub	sp, #24
    14b0:	af00      	add	r7, sp, #0
    14b2:	60b9      	str	r1, [r7, #8]
    14b4:	4613      	mov	r3, r2
    14b6:	4602      	mov	r2, r0
    14b8:	73fa      	strb	r2, [r7, #15]
    14ba:	71fb      	strb	r3, [r7, #7]
		int i=0;
    14bc:	f04f 0300 	mov.w	r3, #0
    14c0:	617b      	str	r3, [r7, #20]
		configureSPI(8);
    14c2:	f04f 0008 	mov.w	r0, #8
    14c6:	f000 f8f5 	bl	16b4 <configureSPI>

	    set_DC_LOW(); // Command mode
    14ca:	f000 f95b 	bl	1784 <set_DC_LOW>
	    sendSPI(commandByte); // Send the command byte
    14ce:	7bfb      	ldrb	r3, [r7, #15]
    14d0:	4618      	mov	r0, r3
    14d2:	f000 f907 	bl	16e4 <sendSPI>

	    set_DC_HIGH();
    14d6:	f000 f94b 	bl	1770 <set_DC_HIGH>
	    for (i=0; i<numDataBytes; i++) {
    14da:	f04f 0300 	mov.w	r3, #0
    14de:	617b      	str	r3, [r7, #20]
    14e0:	e00c      	b.n	14fc <sendCommand+0x50>
	      sendSPI(*dataBytes); // Send the data bytes
    14e2:	68bb      	ldr	r3, [r7, #8]
    14e4:	781b      	ldrb	r3, [r3, #0]
    14e6:	4618      	mov	r0, r3
    14e8:	f000 f8fc 	bl	16e4 <sendSPI>
	      dataBytes++;
    14ec:	68bb      	ldr	r3, [r7, #8]
    14ee:	f103 0301 	add.w	r3, r3, #1
    14f2:	60bb      	str	r3, [r7, #8]

	    set_DC_LOW(); // Command mode
	    sendSPI(commandByte); // Send the command byte

	    set_DC_HIGH();
	    for (i=0; i<numDataBytes; i++) {
    14f4:	697b      	ldr	r3, [r7, #20]
    14f6:	f103 0301 	add.w	r3, r3, #1
    14fa:	617b      	str	r3, [r7, #20]
    14fc:	79fa      	ldrb	r2, [r7, #7]
    14fe:	697b      	ldr	r3, [r7, #20]
    1500:	429a      	cmp	r2, r3
    1502:	dcee      	bgt.n	14e2 <sendCommand+0x36>
	      sendSPI(*dataBytes); // Send the data bytes
	      dataBytes++;
	    }
}
    1504:	f107 0718 	add.w	r7, r7, #24
    1508:	46bd      	mov	sp, r7
    150a:	bd80      	pop	{r7, pc}

0000150c <delay>:
		dataBytes++;
	}
	clear_SPI_CS();
}

void delay(uint32_t time){
    150c:	b580      	push	{r7, lr}
    150e:	b082      	sub	sp, #8
    1510:	af00      	add	r7, sp, #0
    1512:	6078      	str	r0, [r7, #4]

	MSS_TIM1_init(MSS_TIMER_ONE_SHOT_MODE);
    1514:	f04f 0001 	mov.w	r0, #1
    1518:	f7ff fca6 	bl	e68 <MSS_TIM1_init>
	MSS_TIM1_load_immediate(time*100000);
    151c:	687a      	ldr	r2, [r7, #4]
    151e:	f248 63a0 	movw	r3, #34464	; 0x86a0
    1522:	f2c0 0301 	movt	r3, #1
    1526:	fb03 f302 	mul.w	r3, r3, r2
    152a:	4618      	mov	r0, r3
    152c:	f7ff fd06 	bl	f3c <MSS_TIM1_load_immediate>
	MSS_TIM1_start();
    1530:	f7ff fcdc 	bl	eec <MSS_TIM1_start>

	while(MSS_TIM1_get_current_value()>0){
    1534:	f7ff fcf6 	bl	f24 <MSS_TIM1_get_current_value>
    1538:	4603      	mov	r3, r0
    153a:	2b00      	cmp	r3, #0
    153c:	d1fa      	bne.n	1534 <delay+0x28>
		//do nothing

	}
	MSS_TIM1_stop();
    153e:	f7ff fce3 	bl	f08 <MSS_TIM1_stop>
}
    1542:	f107 0708 	add.w	r7, r7, #8
    1546:	46bd      	mov	sp, r7
    1548:	bd80      	pop	{r7, pc}
    154a:	bf00      	nop

0000154c <sendCommandOnly>:
	}
	MSS_TIM1_stop();
}


void sendCommandOnly(uint8_t commandByte){
    154c:	b580      	push	{r7, lr}
    154e:	b082      	sub	sp, #8
    1550:	af00      	add	r7, sp, #0
    1552:	4603      	mov	r3, r0
    1554:	71fb      	strb	r3, [r7, #7]

	set_DC_LOW();
    1556:	f000 f915 	bl	1784 <set_DC_LOW>
	configureSPI(8);
    155a:	f04f 0008 	mov.w	r0, #8
    155e:	f000 f8a9 	bl	16b4 <configureSPI>
	sendSPI(commandByte);
    1562:	79fb      	ldrb	r3, [r7, #7]
    1564:	4618      	mov	r0, r3
    1566:	f000 f8bd 	bl	16e4 <sendSPI>
	set_DC_HIGH();
    156a:	f000 f901 	bl	1770 <set_DC_HIGH>
}
    156e:	f107 0708 	add.w	r7, r7, #8
    1572:	46bd      	mov	sp, r7
    1574:	bd80      	pop	{r7, pc}
    1576:	bf00      	nop

00001578 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color){
    1578:	b580      	push	{r7, lr}
    157a:	b088      	sub	sp, #32
    157c:	af00      	add	r7, sp, #0
    157e:	80f8      	strh	r0, [r7, #6]
    1580:	80b9      	strh	r1, [r7, #4]
    1582:	807a      	strh	r2, [r7, #2]
    1584:	803b      	strh	r3, [r7, #0]

    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    1586:	f9b7 2000 	ldrsh.w	r2, [r7]
    158a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
    158e:	ebc3 0302 	rsb	r3, r3, r2
    1592:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
    1596:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
    159a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
    159e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    15a2:	ebc3 0301 	rsb	r3, r3, r1
    15a6:	2b00      	cmp	r3, #0
    15a8:	bfb8      	it	lt
    15aa:	425b      	neglt	r3, r3
    15ac:	429a      	cmp	r2, r3
    15ae:	bfd4      	ite	le
    15b0:	2300      	movle	r3, #0
    15b2:	2301      	movgt	r3, #1
    15b4:	81fb      	strh	r3, [r7, #14]
    if (steep) {
    15b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
    15ba:	2b00      	cmp	r3, #0
    15bc:	d00b      	beq.n	15d6 <writeLine+0x5e>
        _swap_int16_t(x0, y0);
    15be:	88fb      	ldrh	r3, [r7, #6]
    15c0:	833b      	strh	r3, [r7, #24]
    15c2:	88bb      	ldrh	r3, [r7, #4]
    15c4:	80fb      	strh	r3, [r7, #6]
    15c6:	8b3b      	ldrh	r3, [r7, #24]
    15c8:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
    15ca:	887b      	ldrh	r3, [r7, #2]
    15cc:	837b      	strh	r3, [r7, #26]
    15ce:	883b      	ldrh	r3, [r7, #0]
    15d0:	807b      	strh	r3, [r7, #2]
    15d2:	8b7b      	ldrh	r3, [r7, #26]
    15d4:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
    15d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
    15da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    15de:	429a      	cmp	r2, r3
    15e0:	dd0b      	ble.n	15fa <writeLine+0x82>
        _swap_int16_t(x0, x1);
    15e2:	88fb      	ldrh	r3, [r7, #6]
    15e4:	83bb      	strh	r3, [r7, #28]
    15e6:	887b      	ldrh	r3, [r7, #2]
    15e8:	80fb      	strh	r3, [r7, #6]
    15ea:	8bbb      	ldrh	r3, [r7, #28]
    15ec:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
    15ee:	88bb      	ldrh	r3, [r7, #4]
    15f0:	83fb      	strh	r3, [r7, #30]
    15f2:	883b      	ldrh	r3, [r7, #0]
    15f4:	80bb      	strh	r3, [r7, #4]
    15f6:	8bfb      	ldrh	r3, [r7, #30]
    15f8:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
    15fa:	887a      	ldrh	r2, [r7, #2]
    15fc:	88fb      	ldrh	r3, [r7, #6]
    15fe:	ebc3 0302 	rsb	r3, r3, r2
    1602:	b29b      	uxth	r3, r3
    1604:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
    1606:	f9b7 2000 	ldrsh.w	r2, [r7]
    160a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
    160e:	ebc3 0302 	rsb	r3, r3, r2
    1612:	2b00      	cmp	r3, #0
    1614:	bfb8      	it	lt
    1616:	425b      	neglt	r3, r3
    1618:	827b      	strh	r3, [r7, #18]

    int16_t err = dx / 2;
    161a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
    161e:	ea4f 72d3 	mov.w	r2, r3, lsr #31
    1622:	4413      	add	r3, r2
    1624:	ea4f 0363 	mov.w	r3, r3, asr #1
    1628:	82bb      	strh	r3, [r7, #20]
    int16_t ystep;

    if (y0 < y1) {
    162a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
    162e:	f9b7 3000 	ldrsh.w	r3, [r7]
    1632:	429a      	cmp	r2, r3
    1634:	da03      	bge.n	163e <writeLine+0xc6>
        ystep = 1;
    1636:	f04f 0301 	mov.w	r3, #1
    163a:	82fb      	strh	r3, [r7, #22]
    } else {
        ystep = -1;
    }

    for (; x0<=x1; x0++) {
    163c:	e030      	b.n	16a0 <writeLine+0x128>
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
    163e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1642:	82fb      	strh	r3, [r7, #22]
    }

    for (; x0<=x1; x0++) {
    1644:	e02c      	b.n	16a0 <writeLine+0x128>
        if (steep) {
    1646:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
    164a:	2b00      	cmp	r3, #0
    164c:	d008      	beq.n	1660 <writeLine+0xe8>
            drawPixel(y0, x0, color);
    164e:	88b9      	ldrh	r1, [r7, #4]
    1650:	88fa      	ldrh	r2, [r7, #6]
    1652:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    1654:	4608      	mov	r0, r1
    1656:	4611      	mov	r1, r2
    1658:	461a      	mov	r2, r3
    165a:	f7ff fdb5 	bl	11c8 <drawPixel>
    165e:	e007      	b.n	1670 <writeLine+0xf8>
        } else {
            drawPixel(x0, y0, color);
    1660:	88f9      	ldrh	r1, [r7, #6]
    1662:	88ba      	ldrh	r2, [r7, #4]
    1664:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    1666:	4608      	mov	r0, r1
    1668:	4611      	mov	r1, r2
    166a:	461a      	mov	r2, r3
    166c:	f7ff fdac 	bl	11c8 <drawPixel>
        }
        err -= dy;
    1670:	8aba      	ldrh	r2, [r7, #20]
    1672:	8a7b      	ldrh	r3, [r7, #18]
    1674:	ebc3 0302 	rsb	r3, r3, r2
    1678:	b29b      	uxth	r3, r3
    167a:	82bb      	strh	r3, [r7, #20]
        if (err < 0) {
    167c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
    1680:	2b00      	cmp	r3, #0
    1682:	da09      	bge.n	1698 <writeLine+0x120>
            y0 += ystep;
    1684:	88ba      	ldrh	r2, [r7, #4]
    1686:	8afb      	ldrh	r3, [r7, #22]
    1688:	4413      	add	r3, r2
    168a:	b29b      	uxth	r3, r3
    168c:	80bb      	strh	r3, [r7, #4]
            err += dx;
    168e:	8aba      	ldrh	r2, [r7, #20]
    1690:	8a3b      	ldrh	r3, [r7, #16]
    1692:	4413      	add	r3, r2
    1694:	b29b      	uxth	r3, r3
    1696:	82bb      	strh	r3, [r7, #20]
        ystep = 1;
    } else {
        ystep = -1;
    }

    for (; x0<=x1; x0++) {
    1698:	88fb      	ldrh	r3, [r7, #6]
    169a:	f103 0301 	add.w	r3, r3, #1
    169e:	80fb      	strh	r3, [r7, #6]
    16a0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
    16a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    16a8:	429a      	cmp	r2, r3
    16aa:	ddcc      	ble.n	1646 <writeLine+0xce>
        if (err < 0) {
            y0 += ystep;
            err += dx;
        }
    }
}
    16ac:	f107 0720 	add.w	r7, r7, #32
    16b0:	46bd      	mov	sp, r7
    16b2:	bd80      	pop	{r7, pc}

000016b4 <configureSPI>:


void configureSPI(uint8_t frameSize){
    16b4:	b580      	push	{r7, lr}
    16b6:	b084      	sub	sp, #16
    16b8:	af02      	add	r7, sp, #8
    16ba:	4603      	mov	r3, r0
    16bc:	71fb      	strb	r3, [r7, #7]
	MSS_SPI_configure_master_mode(
    16be:	79fb      	ldrb	r3, [r7, #7]
    16c0:	9300      	str	r3, [sp, #0]
    16c2:	f240 00c0 	movw	r0, #192	; 0xc0
    16c6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    16ca:	f04f 0100 	mov.w	r1, #0
    16ce:	f04f 0200 	mov.w	r2, #0
    16d2:	f04f 0302 	mov.w	r3, #2
    16d6:	f000 fd7b 	bl	21d0 <MSS_SPI_configure_master_mode>
		MSS_SPI_SLAVE_0,
		MSS_SPI_MODE0,
		MSS_SPI_PCLK_DIV_8,
		frameSize
	);
}
    16da:	f107 0708 	add.w	r7, r7, #8
    16de:	46bd      	mov	sp, r7
    16e0:	bd80      	pop	{r7, pc}
    16e2:	bf00      	nop

000016e4 <sendSPI>:

void sendSPI(uint8_t data){
    16e4:	b580      	push	{r7, lr}
    16e6:	b082      	sub	sp, #8
    16e8:	af00      	add	r7, sp, #0
    16ea:	4603      	mov	r3, r0
    16ec:	71fb      	strb	r3, [r7, #7]
	
	MSS_SPI_transfer_frame( &g_mss_spi1, data);
    16ee:	79fb      	ldrb	r3, [r7, #7]
    16f0:	f240 00c0 	movw	r0, #192	; 0xc0
    16f4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    16f8:	4619      	mov	r1, r3
    16fa:	f000 fe97 	bl	242c <MSS_SPI_transfer_frame>
	
}
    16fe:	f107 0708 	add.w	r7, r7, #8
    1702:	46bd      	mov	sp, r7
    1704:	bd80      	pop	{r7, pc}
    1706:	bf00      	nop

00001708 <sendSPI16>:

void sendSPI16(uint16_t data){
    1708:	b580      	push	{r7, lr}
    170a:	b082      	sub	sp, #8
    170c:	af00      	add	r7, sp, #0
    170e:	4603      	mov	r3, r0
    1710:	80fb      	strh	r3, [r7, #6]
	MSS_SPI_transfer_frame(&g_mss_spi1, data>>8);
    1712:	88fb      	ldrh	r3, [r7, #6]
    1714:	ea4f 2313 	mov.w	r3, r3, lsr #8
    1718:	b29b      	uxth	r3, r3
    171a:	f240 00c0 	movw	r0, #192	; 0xc0
    171e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1722:	4619      	mov	r1, r3
    1724:	f000 fe82 	bl	242c <MSS_SPI_transfer_frame>
	MSS_SPI_transfer_frame(&g_mss_spi1, data);
    1728:	88fb      	ldrh	r3, [r7, #6]
    172a:	f240 00c0 	movw	r0, #192	; 0xc0
    172e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1732:	4619      	mov	r1, r3
    1734:	f000 fe7a 	bl	242c <MSS_SPI_transfer_frame>
}
    1738:	f107 0708 	add.w	r7, r7, #8
    173c:	46bd      	mov	sp, r7
    173e:	bd80      	pop	{r7, pc}

00001740 <set_SPI_CS>:

void set_SPI_CS(){
    1740:	b580      	push	{r7, lr}
    1742:	af00      	add	r7, sp, #0
	MSS_SPI_set_slave_select(&g_mss_spi1, MSS_SPI_SLAVE_0);
    1744:	f240 00c0 	movw	r0, #192	; 0xc0
    1748:	f2c2 0000 	movt	r0, #8192	; 0x2000
    174c:	f04f 0100 	mov.w	r1, #0
    1750:	f000 fdbe 	bl	22d0 <MSS_SPI_set_slave_select>
}
    1754:	bd80      	pop	{r7, pc}
    1756:	bf00      	nop

00001758 <clear_SPI_CS>:

void clear_SPI_CS(){
    1758:	b580      	push	{r7, lr}
    175a:	af00      	add	r7, sp, #0
	MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
    175c:	f240 00c0 	movw	r0, #192	; 0xc0
    1760:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1764:	f04f 0100 	mov.w	r1, #0
    1768:	f000 fe18 	bl	239c <MSS_SPI_clear_slave_select>
}
    176c:	bd80      	pop	{r7, pc}
    176e:	bf00      	nop

00001770 <set_DC_HIGH>:

void set_DC_HIGH(){
    1770:	b580      	push	{r7, lr}
    1772:	af00      	add	r7, sp, #0
	MSS_GPIO_set_output(DC, 1);
    1774:	f04f 0000 	mov.w	r0, #0
    1778:	f04f 0101 	mov.w	r1, #1
    177c:	f001 fd8a 	bl	3294 <MSS_GPIO_set_output>
}
    1780:	bd80      	pop	{r7, pc}
    1782:	bf00      	nop

00001784 <set_DC_LOW>:

void set_DC_LOW(){
    1784:	b580      	push	{r7, lr}
    1786:	af00      	add	r7, sp, #0
	MSS_GPIO_set_output(DC, 0);
    1788:	f04f 0000 	mov.w	r0, #0
    178c:	f04f 0100 	mov.w	r1, #0
    1790:	f001 fd80 	bl	3294 <MSS_GPIO_set_output>
}
    1794:	bd80      	pop	{r7, pc}
    1796:	bf00      	nop

00001798 <writeRegister8>:
	else{
		ACE_set_sdd_value(SDD1_OUT, 0x00);
	}
}

void writeRegister8(uint8_t reg, uint8_t val){
    1798:	b580      	push	{r7, lr}
    179a:	b086      	sub	sp, #24
    179c:	af02      	add	r7, sp, #8
    179e:	4602      	mov	r2, r0
    17a0:	460b      	mov	r3, r1
    17a2:	71fa      	strb	r2, [r7, #7]
    17a4:	71bb      	strb	r3, [r7, #6]
	uint8_t transmit_buf[2] = {reg, val};
    17a6:	79fb      	ldrb	r3, [r7, #7]
    17a8:	733b      	strb	r3, [r7, #12]
    17aa:	79bb      	ldrb	r3, [r7, #6]
    17ac:	737b      	strb	r3, [r7, #13]
	MSS_I2C_write
    17ae:	f107 030c 	add.w	r3, r7, #12
    17b2:	f04f 0200 	mov.w	r2, #0
    17b6:	9200      	str	r2, [sp, #0]
    17b8:	f240 203c 	movw	r0, #572	; 0x23c
    17bc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    17c0:	f04f 0141 	mov.w	r1, #65	; 0x41
    17c4:	461a      	mov	r2, r3
    17c6:	f04f 0302 	mov.w	r3, #2
    17ca:	f001 fc2b 	bl	3024 <MSS_I2C_write>
		transmit_buf,
		sizeof(transmit_buf),
		MSS_I2C_RELEASE_BUS
	);

	MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_NO_TIMEOUT);
    17ce:	f240 203c 	movw	r0, #572	; 0x23c
    17d2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    17d6:	f04f 0100 	mov.w	r1, #0
    17da:	f001 f88f 	bl	28fc <MSS_I2C_wait_complete>
	return;
}
    17de:	f107 0710 	add.w	r7, r7, #16
    17e2:	46bd      	mov	sp, r7
    17e4:	bd80      	pop	{r7, pc}
    17e6:	bf00      	nop

000017e8 <readRegister8>:

uint8_t readRegister8(uint8_t reg){
    17e8:	b580      	push	{r7, lr}
    17ea:	b086      	sub	sp, #24
    17ec:	af02      	add	r7, sp, #8
    17ee:	4603      	mov	r3, r0
    17f0:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	MSS_I2C_write
    17f2:	f107 0307 	add.w	r3, r7, #7
    17f6:	f04f 0200 	mov.w	r2, #0
    17fa:	9200      	str	r2, [sp, #0]
    17fc:	f240 203c 	movw	r0, #572	; 0x23c
    1800:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1804:	f04f 0141 	mov.w	r1, #65	; 0x41
    1808:	461a      	mov	r2, r3
    180a:	f04f 0301 	mov.w	r3, #1
    180e:	f001 fc09 	bl	3024 <MSS_I2C_write>
		TOUCH_ADDR,
		&reg,
		1,
		MSS_I2C_RELEASE_BUS
	);
	MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_NO_TIMEOUT);
    1812:	f240 203c 	movw	r0, #572	; 0x23c
    1816:	f2c2 0000 	movt	r0, #8192	; 0x2000
    181a:	f04f 0100 	mov.w	r1, #0
    181e:	f001 f86d 	bl	28fc <MSS_I2C_wait_complete>

	MSS_I2C_read
    1822:	f107 030f 	add.w	r3, r7, #15
    1826:	f04f 0200 	mov.w	r2, #0
    182a:	9200      	str	r2, [sp, #0]
    182c:	f240 203c 	movw	r0, #572	; 0x23c
    1830:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1834:	f04f 0141 	mov.w	r1, #65	; 0x41
    1838:	461a      	mov	r2, r3
    183a:	f04f 0301 	mov.w	r3, #1
    183e:	f001 fb81 	bl	2f44 <MSS_I2C_read>
			TOUCH_ADDR,
			&data,
			1,
			MSS_I2C_RELEASE_BUS
	 );
	MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_NO_TIMEOUT);
    1842:	f240 203c 	movw	r0, #572	; 0x23c
    1846:	f2c2 0000 	movt	r0, #8192	; 0x2000
    184a:	f04f 0100 	mov.w	r1, #0
    184e:	f001 f855 	bl	28fc <MSS_I2C_wait_complete>
	return data;
    1852:	7bfb      	ldrb	r3, [r7, #15]
}
    1854:	4618      	mov	r0, r3
    1856:	f107 0710 	add.w	r7, r7, #16
    185a:	46bd      	mov	sp, r7
    185c:	bd80      	pop	{r7, pc}
    185e:	bf00      	nop

00001860 <bufferEmpty>:

int bufferEmpty(){
    1860:	b580      	push	{r7, lr}
    1862:	af00      	add	r7, sp, #0
	return (readRegister8(STMPE_FIFO_STA) & STMPE_FIFO_STA_EMPTY);
    1864:	f04f 004b 	mov.w	r0, #75	; 0x4b
    1868:	f7ff ffbe 	bl	17e8 <readRegister8>
    186c:	4603      	mov	r3, r0
    186e:	f003 0320 	and.w	r3, r3, #32
}
    1872:	4618      	mov	r0, r3
    1874:	bd80      	pop	{r7, pc}
    1876:	bf00      	nop

00001878 <scaleX>:

uint8_t scaleX(uint16_t x){
    1878:	b580      	push	{r7, lr}
    187a:	b084      	sub	sp, #16
    187c:	af00      	add	r7, sp, #0
    187e:	4603      	mov	r3, r0
    1880:	80fb      	strh	r3, [r7, #6]
	float temp = x/240.0;
    1882:	88fb      	ldrh	r3, [r7, #6]
    1884:	4618      	mov	r0, r3
    1886:	f002 f907 	bl	3a98 <__aeabi_i2d>
    188a:	4602      	mov	r2, r0
    188c:	460b      	mov	r3, r1
    188e:	4610      	mov	r0, r2
    1890:	4619      	mov	r1, r3
    1892:	f04f 0200 	mov.w	r2, #0
    1896:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    189a:	f503 03dc 	add.w	r3, r3, #7208960	; 0x6e0000
    189e:	f002 fa8b 	bl	3db8 <__aeabi_ddiv>
    18a2:	4602      	mov	r2, r0
    18a4:	460b      	mov	r3, r1
    18a6:	4610      	mov	r0, r2
    18a8:	4619      	mov	r1, r3
    18aa:	f002 fb6d 	bl	3f88 <__aeabi_d2f>
    18ae:	4603      	mov	r3, r0
    18b0:	60fb      	str	r3, [r7, #12]
	temp *= 255;
    18b2:	68f8      	ldr	r0, [r7, #12]
    18b4:	4907      	ldr	r1, [pc, #28]	; (18d4 <scaleX+0x5c>)
    18b6:	f002 fbb7 	bl	4028 <__aeabi_fmul>
    18ba:	4603      	mov	r3, r0
    18bc:	60fb      	str	r3, [r7, #12]
	return (uint8_t) temp;
    18be:	68f8      	ldr	r0, [r7, #12]
    18c0:	f002 fd02 	bl	42c8 <__aeabi_f2uiz>
    18c4:	4603      	mov	r3, r0
    18c6:	b2db      	uxtb	r3, r3
}
    18c8:	4618      	mov	r0, r3
    18ca:	f107 0710 	add.w	r7, r7, #16
    18ce:	46bd      	mov	sp, r7
    18d0:	bd80      	pop	{r7, pc}
    18d2:	bf00      	nop
    18d4:	437f0000 	.word	0x437f0000

000018d8 <scaleY>:

uint8_t scaleY(uint16_t y){
    18d8:	b580      	push	{r7, lr}
    18da:	b084      	sub	sp, #16
    18dc:	af00      	add	r7, sp, #0
    18de:	4603      	mov	r3, r0
    18e0:	80fb      	strh	r3, [r7, #6]
	float temp = y/320.0;
    18e2:	88fb      	ldrh	r3, [r7, #6]
    18e4:	4618      	mov	r0, r3
    18e6:	f002 f8d7 	bl	3a98 <__aeabi_i2d>
    18ea:	4602      	mov	r2, r0
    18ec:	460b      	mov	r3, r1
    18ee:	4610      	mov	r0, r2
    18f0:	4619      	mov	r1, r3
    18f2:	f04f 0200 	mov.w	r2, #0
    18f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    18fa:	f503 03e8 	add.w	r3, r3, #7602176	; 0x740000
    18fe:	f002 fa5b 	bl	3db8 <__aeabi_ddiv>
    1902:	4602      	mov	r2, r0
    1904:	460b      	mov	r3, r1
    1906:	4610      	mov	r0, r2
    1908:	4619      	mov	r1, r3
    190a:	f002 fb3d 	bl	3f88 <__aeabi_d2f>
    190e:	4603      	mov	r3, r0
    1910:	60fb      	str	r3, [r7, #12]
	temp *= 255;
    1912:	68f8      	ldr	r0, [r7, #12]
    1914:	4907      	ldr	r1, [pc, #28]	; (1934 <scaleY+0x5c>)
    1916:	f002 fb87 	bl	4028 <__aeabi_fmul>
    191a:	4603      	mov	r3, r0
    191c:	60fb      	str	r3, [r7, #12]
	return (uint8_t) temp;
    191e:	68f8      	ldr	r0, [r7, #12]
    1920:	f002 fcd2 	bl	42c8 <__aeabi_f2uiz>
    1924:	4603      	mov	r3, r0
    1926:	b2db      	uxtb	r3, r3
}
    1928:	4618      	mov	r0, r3
    192a:	f107 0710 	add.w	r7, r7, #16
    192e:	46bd      	mov	sp, r7
    1930:	bd80      	pop	{r7, pc}
    1932:	bf00      	nop
    1934:	437f0000 	.word	0x437f0000

00001938 <drawCircle>:

void drawCircle(int16_t x0, int16_t y0, int16_t r,
    uint16_t color) {
    1938:	b580      	push	{r7, lr}
    193a:	b086      	sub	sp, #24
    193c:	af00      	add	r7, sp, #0
    193e:	80f8      	strh	r0, [r7, #6]
    1940:	80b9      	strh	r1, [r7, #4]
    1942:	807a      	strh	r2, [r7, #2]
    1944:	803b      	strh	r3, [r7, #0]
  int16_t f = 1 - r;
    1946:	887b      	ldrh	r3, [r7, #2]
    1948:	f1c3 0301 	rsb	r3, r3, #1
    194c:	b29b      	uxth	r3, r3
    194e:	81fb      	strh	r3, [r7, #14]
  int16_t ddF_x = 1;
    1950:	f04f 0301 	mov.w	r3, #1
    1954:	823b      	strh	r3, [r7, #16]
  int16_t ddF_y = -2 * r;
    1956:	887b      	ldrh	r3, [r7, #2]
    1958:	461a      	mov	r2, r3
    195a:	ea4f 32c2 	mov.w	r2, r2, lsl #15
    195e:	ebc3 0302 	rsb	r3, r3, r2
    1962:	ea4f 0343 	mov.w	r3, r3, lsl #1
    1966:	b29b      	uxth	r3, r3
    1968:	827b      	strh	r3, [r7, #18]
  int16_t x = 0;
    196a:	f04f 0300 	mov.w	r3, #0
    196e:	82bb      	strh	r3, [r7, #20]
  int16_t y = r;
    1970:	887b      	ldrh	r3, [r7, #2]
    1972:	82fb      	strh	r3, [r7, #22]

  drawPixel(x0  , y0+r, color);
    1974:	88f9      	ldrh	r1, [r7, #6]
    1976:	88ba      	ldrh	r2, [r7, #4]
    1978:	887b      	ldrh	r3, [r7, #2]
    197a:	4413      	add	r3, r2
    197c:	b29a      	uxth	r2, r3
    197e:	883b      	ldrh	r3, [r7, #0]
    1980:	4608      	mov	r0, r1
    1982:	4611      	mov	r1, r2
    1984:	461a      	mov	r2, r3
    1986:	f7ff fc1f 	bl	11c8 <drawPixel>
  drawPixel(x0  , y0-r, color);
    198a:	88f9      	ldrh	r1, [r7, #6]
    198c:	88ba      	ldrh	r2, [r7, #4]
    198e:	887b      	ldrh	r3, [r7, #2]
    1990:	ebc3 0302 	rsb	r3, r3, r2
    1994:	b29a      	uxth	r2, r3
    1996:	883b      	ldrh	r3, [r7, #0]
    1998:	4608      	mov	r0, r1
    199a:	4611      	mov	r1, r2
    199c:	461a      	mov	r2, r3
    199e:	f7ff fc13 	bl	11c8 <drawPixel>
  drawPixel(x0+r, y0  , color);
    19a2:	88fa      	ldrh	r2, [r7, #6]
    19a4:	887b      	ldrh	r3, [r7, #2]
    19a6:	4413      	add	r3, r2
    19a8:	b299      	uxth	r1, r3
    19aa:	88ba      	ldrh	r2, [r7, #4]
    19ac:	883b      	ldrh	r3, [r7, #0]
    19ae:	4608      	mov	r0, r1
    19b0:	4611      	mov	r1, r2
    19b2:	461a      	mov	r2, r3
    19b4:	f7ff fc08 	bl	11c8 <drawPixel>
  drawPixel(x0-r, y0  , color);
    19b8:	88fa      	ldrh	r2, [r7, #6]
    19ba:	887b      	ldrh	r3, [r7, #2]
    19bc:	ebc3 0302 	rsb	r3, r3, r2
    19c0:	b299      	uxth	r1, r3
    19c2:	88ba      	ldrh	r2, [r7, #4]
    19c4:	883b      	ldrh	r3, [r7, #0]
    19c6:	4608      	mov	r0, r1
    19c8:	4611      	mov	r1, r2
    19ca:	461a      	mov	r2, r3
    19cc:	f7ff fbfc 	bl	11c8 <drawPixel>

  while (x<y) {
    19d0:	e097      	b.n	1b02 <drawCircle+0x1ca>
    if (f >= 0) {
    19d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
    19d6:	2b00      	cmp	r3, #0
    19d8:	db0d      	blt.n	19f6 <drawCircle+0xbe>
      y--;
    19da:	8afb      	ldrh	r3, [r7, #22]
    19dc:	f103 33ff 	add.w	r3, r3, #4294967295
    19e0:	82fb      	strh	r3, [r7, #22]
      ddF_y += 2;
    19e2:	8a7b      	ldrh	r3, [r7, #18]
    19e4:	f103 0302 	add.w	r3, r3, #2
    19e8:	b29b      	uxth	r3, r3
    19ea:	827b      	strh	r3, [r7, #18]
      f += ddF_y;
    19ec:	89fa      	ldrh	r2, [r7, #14]
    19ee:	8a7b      	ldrh	r3, [r7, #18]
    19f0:	4413      	add	r3, r2
    19f2:	b29b      	uxth	r3, r3
    19f4:	81fb      	strh	r3, [r7, #14]
    }
    x++;
    19f6:	8abb      	ldrh	r3, [r7, #20]
    19f8:	f103 0301 	add.w	r3, r3, #1
    19fc:	82bb      	strh	r3, [r7, #20]
    ddF_x += 2;
    19fe:	8a3b      	ldrh	r3, [r7, #16]
    1a00:	f103 0302 	add.w	r3, r3, #2
    1a04:	b29b      	uxth	r3, r3
    1a06:	823b      	strh	r3, [r7, #16]
    f += ddF_x;
    1a08:	89fa      	ldrh	r2, [r7, #14]
    1a0a:	8a3b      	ldrh	r3, [r7, #16]
    1a0c:	4413      	add	r3, r2
    1a0e:	b29b      	uxth	r3, r3
    1a10:	81fb      	strh	r3, [r7, #14]

    drawPixel(x0 + x, y0 + y, color);
    1a12:	88fa      	ldrh	r2, [r7, #6]
    1a14:	8abb      	ldrh	r3, [r7, #20]
    1a16:	4413      	add	r3, r2
    1a18:	b299      	uxth	r1, r3
    1a1a:	88ba      	ldrh	r2, [r7, #4]
    1a1c:	8afb      	ldrh	r3, [r7, #22]
    1a1e:	4413      	add	r3, r2
    1a20:	b29a      	uxth	r2, r3
    1a22:	883b      	ldrh	r3, [r7, #0]
    1a24:	4608      	mov	r0, r1
    1a26:	4611      	mov	r1, r2
    1a28:	461a      	mov	r2, r3
    1a2a:	f7ff fbcd 	bl	11c8 <drawPixel>
    drawPixel(x0 - x, y0 + y, color);
    1a2e:	88fa      	ldrh	r2, [r7, #6]
    1a30:	8abb      	ldrh	r3, [r7, #20]
    1a32:	ebc3 0302 	rsb	r3, r3, r2
    1a36:	b299      	uxth	r1, r3
    1a38:	88ba      	ldrh	r2, [r7, #4]
    1a3a:	8afb      	ldrh	r3, [r7, #22]
    1a3c:	4413      	add	r3, r2
    1a3e:	b29a      	uxth	r2, r3
    1a40:	883b      	ldrh	r3, [r7, #0]
    1a42:	4608      	mov	r0, r1
    1a44:	4611      	mov	r1, r2
    1a46:	461a      	mov	r2, r3
    1a48:	f7ff fbbe 	bl	11c8 <drawPixel>
    drawPixel(x0 + x, y0 - y, color);
    1a4c:	88fa      	ldrh	r2, [r7, #6]
    1a4e:	8abb      	ldrh	r3, [r7, #20]
    1a50:	4413      	add	r3, r2
    1a52:	b299      	uxth	r1, r3
    1a54:	88ba      	ldrh	r2, [r7, #4]
    1a56:	8afb      	ldrh	r3, [r7, #22]
    1a58:	ebc3 0302 	rsb	r3, r3, r2
    1a5c:	b29a      	uxth	r2, r3
    1a5e:	883b      	ldrh	r3, [r7, #0]
    1a60:	4608      	mov	r0, r1
    1a62:	4611      	mov	r1, r2
    1a64:	461a      	mov	r2, r3
    1a66:	f7ff fbaf 	bl	11c8 <drawPixel>
    drawPixel(x0 - x, y0 - y, color);
    1a6a:	88fa      	ldrh	r2, [r7, #6]
    1a6c:	8abb      	ldrh	r3, [r7, #20]
    1a6e:	ebc3 0302 	rsb	r3, r3, r2
    1a72:	b299      	uxth	r1, r3
    1a74:	88ba      	ldrh	r2, [r7, #4]
    1a76:	8afb      	ldrh	r3, [r7, #22]
    1a78:	ebc3 0302 	rsb	r3, r3, r2
    1a7c:	b29a      	uxth	r2, r3
    1a7e:	883b      	ldrh	r3, [r7, #0]
    1a80:	4608      	mov	r0, r1
    1a82:	4611      	mov	r1, r2
    1a84:	461a      	mov	r2, r3
    1a86:	f7ff fb9f 	bl	11c8 <drawPixel>
    drawPixel(x0 + y, y0 + x, color);
    1a8a:	88fa      	ldrh	r2, [r7, #6]
    1a8c:	8afb      	ldrh	r3, [r7, #22]
    1a8e:	4413      	add	r3, r2
    1a90:	b299      	uxth	r1, r3
    1a92:	88ba      	ldrh	r2, [r7, #4]
    1a94:	8abb      	ldrh	r3, [r7, #20]
    1a96:	4413      	add	r3, r2
    1a98:	b29a      	uxth	r2, r3
    1a9a:	883b      	ldrh	r3, [r7, #0]
    1a9c:	4608      	mov	r0, r1
    1a9e:	4611      	mov	r1, r2
    1aa0:	461a      	mov	r2, r3
    1aa2:	f7ff fb91 	bl	11c8 <drawPixel>
    drawPixel(x0 - y, y0 + x, color);
    1aa6:	88fa      	ldrh	r2, [r7, #6]
    1aa8:	8afb      	ldrh	r3, [r7, #22]
    1aaa:	ebc3 0302 	rsb	r3, r3, r2
    1aae:	b299      	uxth	r1, r3
    1ab0:	88ba      	ldrh	r2, [r7, #4]
    1ab2:	8abb      	ldrh	r3, [r7, #20]
    1ab4:	4413      	add	r3, r2
    1ab6:	b29a      	uxth	r2, r3
    1ab8:	883b      	ldrh	r3, [r7, #0]
    1aba:	4608      	mov	r0, r1
    1abc:	4611      	mov	r1, r2
    1abe:	461a      	mov	r2, r3
    1ac0:	f7ff fb82 	bl	11c8 <drawPixel>
    drawPixel(x0 + y, y0 - x, color);
    1ac4:	88fa      	ldrh	r2, [r7, #6]
    1ac6:	8afb      	ldrh	r3, [r7, #22]
    1ac8:	4413      	add	r3, r2
    1aca:	b299      	uxth	r1, r3
    1acc:	88ba      	ldrh	r2, [r7, #4]
    1ace:	8abb      	ldrh	r3, [r7, #20]
    1ad0:	ebc3 0302 	rsb	r3, r3, r2
    1ad4:	b29a      	uxth	r2, r3
    1ad6:	883b      	ldrh	r3, [r7, #0]
    1ad8:	4608      	mov	r0, r1
    1ada:	4611      	mov	r1, r2
    1adc:	461a      	mov	r2, r3
    1ade:	f7ff fb73 	bl	11c8 <drawPixel>
    drawPixel(x0 - y, y0 - x, color);
    1ae2:	88fa      	ldrh	r2, [r7, #6]
    1ae4:	8afb      	ldrh	r3, [r7, #22]
    1ae6:	ebc3 0302 	rsb	r3, r3, r2
    1aea:	b299      	uxth	r1, r3
    1aec:	88ba      	ldrh	r2, [r7, #4]
    1aee:	8abb      	ldrh	r3, [r7, #20]
    1af0:	ebc3 0302 	rsb	r3, r3, r2
    1af4:	b29a      	uxth	r2, r3
    1af6:	883b      	ldrh	r3, [r7, #0]
    1af8:	4608      	mov	r0, r1
    1afa:	4611      	mov	r1, r2
    1afc:	461a      	mov	r2, r3
    1afe:	f7ff fb63 	bl	11c8 <drawPixel>
  drawPixel(x0  , y0+r, color);
  drawPixel(x0  , y0-r, color);
  drawPixel(x0+r, y0  , color);
  drawPixel(x0-r, y0  , color);

  while (x<y) {
    1b02:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
    1b06:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
    1b0a:	429a      	cmp	r2, r3
    1b0c:	f6ff af61 	blt.w	19d2 <drawCircle+0x9a>
    drawPixel(x0 + y, y0 + x, color);
    drawPixel(x0 - y, y0 + x, color);
    drawPixel(x0 + y, y0 - x, color);
    drawPixel(x0 - y, y0 - x, color);
  }
}
    1b10:	f107 0718 	add.w	r7, r7, #24
    1b14:	46bd      	mov	sp, r7
    1b16:	bd80      	pop	{r7, pc}

00001b18 <sendMessage>:

uint8_t g_rx_buff[RX_BUFF_SIZE];

//Takes in an array of uint8_t containing address and destination address
//Constructs frame appropriately and sends it out
void sendMessage(uint8_t* inputMessage, uint8_t inputMessageLength, uint16_t destAddr) {
    1b18:	b580      	push	{r7, lr}
    1b1a:	b08a      	sub	sp, #40	; 0x28
    1b1c:	af00      	add	r7, sp, #0
    1b1e:	6078      	str	r0, [r7, #4]
    1b20:	4613      	mov	r3, r2
    1b22:	460a      	mov	r2, r1
    1b24:	70fa      	strb	r2, [r7, #3]
    1b26:	803b      	strh	r3, [r7, #0]
	int i;
	uint8_t message[messageLength];
	message[0] = 0x7E;	//Delimiter, does not change
    1b28:	f04f 037e 	mov.w	r3, #126	; 0x7e
    1b2c:	733b      	strb	r3, [r7, #12]
	message[1] = (messageLength - 4) >> 8;	//Length MSB
    1b2e:	f04f 0300 	mov.w	r3, #0
    1b32:	737b      	strb	r3, [r7, #13]
	message[2] = (messageLength - 4) & 0xFF;	//Length LSB
    1b34:	f04f 0310 	mov.w	r3, #16
    1b38:	73bb      	strb	r3, [r7, #14]
	message[3] = 0;	//Frame type: 0 = TX Request 64 bit addr
    1b3a:	f04f 0300 	mov.w	r3, #0
    1b3e:	73fb      	strb	r3, [r7, #15]
	message[4] = 1;	//Frame ID
    1b40:	f04f 0301 	mov.w	r3, #1
    1b44:	743b      	strb	r3, [r7, #16]
	//5-12: Destination addresses
	for(i = 5; i < 11; ++i) {
    1b46:	f04f 0305 	mov.w	r3, #5
    1b4a:	623b      	str	r3, [r7, #32]
    1b4c:	e00b      	b.n	1b66 <sendMessage+0x4e>
		message[i] = 0;
    1b4e:	6a3b      	ldr	r3, [r7, #32]
    1b50:	f107 0128 	add.w	r1, r7, #40	; 0x28
    1b54:	440b      	add	r3, r1
    1b56:	f04f 0200 	mov.w	r2, #0
    1b5a:	f803 2c1c 	strb.w	r2, [r3, #-28]
	message[1] = (messageLength - 4) >> 8;	//Length MSB
	message[2] = (messageLength - 4) & 0xFF;	//Length LSB
	message[3] = 0;	//Frame type: 0 = TX Request 64 bit addr
	message[4] = 1;	//Frame ID
	//5-12: Destination addresses
	for(i = 5; i < 11; ++i) {
    1b5e:	6a3b      	ldr	r3, [r7, #32]
    1b60:	f103 0301 	add.w	r3, r3, #1
    1b64:	623b      	str	r3, [r7, #32]
    1b66:	6a3b      	ldr	r3, [r7, #32]
    1b68:	2b0a      	cmp	r3, #10
    1b6a:	ddf0      	ble.n	1b4e <sendMessage+0x36>
		message[i] = 0;
	}
	message[11] = (destAddr >> 8) & 0xFF;
    1b6c:	883b      	ldrh	r3, [r7, #0]
    1b6e:	ea4f 2313 	mov.w	r3, r3, lsr #8
    1b72:	b29b      	uxth	r3, r3
    1b74:	b2db      	uxtb	r3, r3
    1b76:	75fb      	strb	r3, [r7, #23]
	message[12] = destAddr & 0xFF;
    1b78:	883b      	ldrh	r3, [r7, #0]
    1b7a:	b2db      	uxtb	r3, r3
    1b7c:	763b      	strb	r3, [r7, #24]
	message[13] = 0;	//Options
    1b7e:	f04f 0300 	mov.w	r3, #0
    1b82:	767b      	strb	r3, [r7, #25]
	for(i = 0; i < inputMessageLength; ++i) {
    1b84:	f04f 0300 	mov.w	r3, #0
    1b88:	623b      	str	r3, [r7, #32]
    1b8a:	e00f      	b.n	1bac <sendMessage+0x94>
		message[i + 14] = *(inputMessage + i * sizeof(uint8_t));
    1b8c:	6a3b      	ldr	r3, [r7, #32]
    1b8e:	f103 030e 	add.w	r3, r3, #14
    1b92:	6a39      	ldr	r1, [r7, #32]
    1b94:	687a      	ldr	r2, [r7, #4]
    1b96:	440a      	add	r2, r1
    1b98:	7812      	ldrb	r2, [r2, #0]
    1b9a:	f107 0128 	add.w	r1, r7, #40	; 0x28
    1b9e:	440b      	add	r3, r1
    1ba0:	f803 2c1c 	strb.w	r2, [r3, #-28]
		message[i] = 0;
	}
	message[11] = (destAddr >> 8) & 0xFF;
	message[12] = destAddr & 0xFF;
	message[13] = 0;	//Options
	for(i = 0; i < inputMessageLength; ++i) {
    1ba4:	6a3b      	ldr	r3, [r7, #32]
    1ba6:	f103 0301 	add.w	r3, r3, #1
    1baa:	623b      	str	r3, [r7, #32]
    1bac:	78fa      	ldrb	r2, [r7, #3]
    1bae:	6a3b      	ldr	r3, [r7, #32]
    1bb0:	429a      	cmp	r2, r3
    1bb2:	dceb      	bgt.n	1b8c <sendMessage+0x74>
		message[i + 14] = *(inputMessage + i * sizeof(uint8_t));
	}
	uint8_t sum = 0;
    1bb4:	f04f 0300 	mov.w	r3, #0
    1bb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for(i = 3; i < messageLength - 1; ++i) {
    1bbc:	f04f 0303 	mov.w	r3, #3
    1bc0:	623b      	str	r3, [r7, #32]
    1bc2:	e00e      	b.n	1be2 <sendMessage+0xca>
		sum += message[i];
    1bc4:	6a3b      	ldr	r3, [r7, #32]
    1bc6:	f107 0228 	add.w	r2, r7, #40	; 0x28
    1bca:	4413      	add	r3, r2
    1bcc:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
    1bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    1bd4:	4413      	add	r3, r2
    1bd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	message[13] = 0;	//Options
	for(i = 0; i < inputMessageLength; ++i) {
		message[i + 14] = *(inputMessage + i * sizeof(uint8_t));
	}
	uint8_t sum = 0;
	for(i = 3; i < messageLength - 1; ++i) {
    1bda:	6a3b      	ldr	r3, [r7, #32]
    1bdc:	f103 0301 	add.w	r3, r3, #1
    1be0:	623b      	str	r3, [r7, #32]
    1be2:	6a3b      	ldr	r3, [r7, #32]
    1be4:	2b12      	cmp	r3, #18
    1be6:	dded      	ble.n	1bc4 <sendMessage+0xac>
		sum += message[i];
	}
	message[messageLength - 1] = (0xFF - sum) & 0xFF;
    1be8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    1bec:	ea6f 0303 	mvn.w	r3, r3
    1bf0:	b2db      	uxtb	r3, r3
    1bf2:	77fb      	strb	r3, [r7, #31]
	MSS_UART_polled_tx(&g_mss_uart1, message, sizeof(message));
    1bf4:	f107 030c 	add.w	r3, r7, #12
    1bf8:	f240 0070 	movw	r0, #112	; 0x70
    1bfc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1c00:	4619      	mov	r1, r3
    1c02:	f04f 0214 	mov.w	r2, #20
    1c06:	f000 f817 	bl	1c38 <MSS_UART_polled_tx>
}
    1c0a:	f107 0728 	add.w	r7, r7, #40	; 0x28
    1c0e:	46bd      	mov	sp, r7
    1c10:	bd80      	pop	{r7, pc}
    1c12:	bf00      	nop

00001c14 <uart1_rx_handler>:

//When something is received, trigger an interrupt that fills g_rx_buff with the received data
void uart1_rx_handler( mss_uart_instance_t * this_uart ) {
    1c14:	b580      	push	{r7, lr}
    1c16:	b082      	sub	sp, #8
    1c18:	af00      	add	r7, sp, #0
    1c1a:	6078      	str	r0, [r7, #4]
      MSS_UART_get_rx( this_uart, &g_rx_buff, sizeof(g_rx_buff) );
    1c1c:	6878      	ldr	r0, [r7, #4]
    1c1e:	f240 0130 	movw	r1, #48	; 0x30
    1c22:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1c26:	f04f 0240 	mov.w	r2, #64	; 0x40
    1c2a:	f000 f85b 	bl	1ce4 <MSS_UART_get_rx>
}
    1c2e:	f107 0708 	add.w	r7, r7, #8
    1c32:	46bd      	mov	sp, r7
    1c34:	bd80      	pop	{r7, pc}
    1c36:	bf00      	nop

00001c38 <MSS_UART_polled_tx>:
(
    mss_uart_instance_t * this_uart,
    const uint8_t * pbuff,
    uint32_t tx_size
)
{
    1c38:	e92d 05f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl}
    uint32_t char_idx = 0U;
    uint32_t size_sent;
    uint8_t status;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
    1c3c:	f240 0398 	movw	r3, #152	; 0x98
    1c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1c44:	4298      	cmp	r0, r3
    1c46:	d006      	beq.n	1c56 <MSS_UART_polled_tx+0x1e>
    1c48:	f240 0370 	movw	r3, #112	; 0x70
    1c4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1c50:	4298      	cmp	r0, r3
    1c52:	d000      	beq.n	1c56 <MSS_UART_polled_tx+0x1e>
    1c54:	be00      	bkpt	0x0000
    ASSERT( pbuff != ( (uint8_t *)0 ) );
    1c56:	b901      	cbnz	r1, 1c5a <MSS_UART_polled_tx+0x22>
    1c58:	be00      	bkpt	0x0000
    ASSERT( tx_size > 0U );
    1c5a:	b902      	cbnz	r2, 1c5e <MSS_UART_polled_tx+0x26>
    1c5c:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
    1c5e:	f240 0398 	movw	r3, #152	; 0x98
    1c62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1c66:	4298      	cmp	r0, r3
    1c68:	d005      	beq.n	1c76 <MSS_UART_polled_tx+0x3e>
    1c6a:	f240 0370 	movw	r3, #112	; 0x70
    1c6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1c72:	4298      	cmp	r0, r3
    1c74:	d133      	bne.n	1cde <MSS_UART_polled_tx+0xa6>
    1c76:	1e13      	subs	r3, r2, #0
    1c78:	bf18      	it	ne
    1c7a:	2301      	movne	r3, #1
    1c7c:	2900      	cmp	r1, #0
    1c7e:	bf0c      	ite	eq
    1c80:	2300      	moveq	r3, #0
    1c82:	f003 0301 	andne.w	r3, r3, #1
    1c86:	2b00      	cmp	r3, #0
    1c88:	d029      	beq.n	1cde <MSS_UART_polled_tx+0xa6>
    1c8a:	f04f 0700 	mov.w	r7, #0
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
    1c8e:	46b8      	mov	r8, r7
            if( status & MSS_UART_THRE )
            {
                uint32_t fill_size = TX_FIFO_SIZE;

                /* Calculate the number of bytes to transmit. */
                if ( tx_size < TX_FIFO_SIZE )
    1c90:	f04f 0a10 	mov.w	sl, #16
         /* Remain in this loop until the entire input buffer
          * has been transferred to the UART.
          */
        do {
            /* Read the Line Status Register and update the sticky record */
            status = this_uart->hw_reg->LSR;
    1c94:	6803      	ldr	r3, [r0, #0]
    1c96:	7d1b      	ldrb	r3, [r3, #20]
            this_uart->status |= status;
    1c98:	f890 c00a 	ldrb.w	ip, [r0, #10]
    1c9c:	ea43 0c0c 	orr.w	ip, r3, ip
    1ca0:	f880 c00a 	strb.w	ip, [r0, #10]

            /* Check if TX FIFO is empty. */
            if( status & MSS_UART_THRE )
    1ca4:	f013 0f20 	tst.w	r3, #32
    1ca8:	d017      	beq.n	1cda <MSS_UART_polled_tx+0xa2>
            {
                uint32_t fill_size = TX_FIFO_SIZE;

                /* Calculate the number of bytes to transmit. */
                if ( tx_size < TX_FIFO_SIZE )
    1caa:	2a0f      	cmp	r2, #15
    1cac:	d904      	bls.n	1cb8 <MSS_UART_polled_tx+0x80>
    1cae:	4656      	mov	r6, sl
    1cb0:	46bc      	mov	ip, r7
    1cb2:	4643      	mov	r3, r8

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
                {
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx++];
    1cb4:	440f      	add	r7, r1
    1cb6:	e004      	b.n	1cc2 <MSS_UART_polled_tx+0x8a>
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
    1cb8:	b90a      	cbnz	r2, 1cbe <MSS_UART_polled_tx+0x86>
    1cba:	4643      	mov	r3, r8
    1cbc:	e00b      	b.n	1cd6 <MSS_UART_polled_tx+0x9e>
    1cbe:	4616      	mov	r6, r2
    1cc0:	e7f6      	b.n	1cb0 <MSS_UART_polled_tx+0x78>
                {
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx++];
    1cc2:	6804      	ldr	r4, [r0, #0]
    1cc4:	5cfd      	ldrb	r5, [r7, r3]
    1cc6:	7025      	strb	r5, [r4, #0]
    1cc8:	f10c 0c01 	add.w	ip, ip, #1
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
    1ccc:	f103 0301 	add.w	r3, r3, #1
    1cd0:	429e      	cmp	r6, r3
    1cd2:	d8f6      	bhi.n	1cc2 <MSS_UART_polled_tx+0x8a>
    1cd4:	4667      	mov	r7, ip
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx++];
                }

                /* Calculate the number of untransmitted bytes remaining. */
                tx_size -= size_sent;
    1cd6:	ebc3 0202 	rsb	r2, r3, r2
            }
        }while( tx_size );
    1cda:	2a00      	cmp	r2, #0
    1cdc:	d1da      	bne.n	1c94 <MSS_UART_polled_tx+0x5c>
    }
}
    1cde:	e8bd 05f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl}
    1ce2:	4770      	bx	lr

00001ce4 <MSS_UART_get_rx>:
(
    mss_uart_instance_t * this_uart,
    uint8_t * rx_buff,
    size_t buff_size
)
{
    1ce4:	b410      	push	{r4}
    1ce6:	4603      	mov	r3, r0
    size_t rx_size = 0U;
    uint8_t status = 0U;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
    1ce8:	f240 0098 	movw	r0, #152	; 0x98
    1cec:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1cf0:	4283      	cmp	r3, r0
    1cf2:	d006      	beq.n	1d02 <MSS_UART_get_rx+0x1e>
    1cf4:	f240 0070 	movw	r0, #112	; 0x70
    1cf8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1cfc:	4283      	cmp	r3, r0
    1cfe:	d000      	beq.n	1d02 <MSS_UART_get_rx+0x1e>
    1d00:	be00      	bkpt	0x0000
    ASSERT( rx_buff != ((uint8_t *)0) );
    1d02:	b901      	cbnz	r1, 1d06 <MSS_UART_get_rx+0x22>
    1d04:	be00      	bkpt	0x0000
    ASSERT( buff_size > 0U );
    1d06:	b902      	cbnz	r2, 1d0a <MSS_UART_get_rx+0x26>
    1d08:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
    1d0a:	f240 0098 	movw	r0, #152	; 0x98
    1d0e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1d12:	4283      	cmp	r3, r0
    1d14:	d005      	beq.n	1d22 <MSS_UART_get_rx+0x3e>
    1d16:	f240 0070 	movw	r0, #112	; 0x70
    1d1a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1d1e:	4283      	cmp	r3, r0
    1d20:	d12a      	bne.n	1d78 <MSS_UART_get_rx+0x94>
          ( rx_buff != ((uint8_t *)0) ) && ( buff_size > 0U ) )
    1d22:	1e10      	subs	r0, r2, #0
    1d24:	bf18      	it	ne
    1d26:	2001      	movne	r0, #1

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
    ASSERT( rx_buff != ((uint8_t *)0) );
    ASSERT( buff_size > 0U );

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
    1d28:	2900      	cmp	r1, #0
    1d2a:	bf0c      	ite	eq
    1d2c:	2400      	moveq	r4, #0
    1d2e:	f000 0401 	andne.w	r4, r0, #1
    1d32:	b30c      	cbz	r4, 1d78 <MSS_UART_get_rx+0x94>
          ( rx_buff != ((uint8_t *)0) ) && ( buff_size > 0U ) )
    {
        status = this_uart->hw_reg->LSR;
    1d34:	681c      	ldr	r4, [r3, #0]
    1d36:	f894 c014 	ldrb.w	ip, [r4, #20]
        this_uart->status |= status;
    1d3a:	7a9c      	ldrb	r4, [r3, #10]
    1d3c:	ea4c 0404 	orr.w	r4, ip, r4
    1d40:	729c      	strb	r4, [r3, #10]

        while (( (status & MSS_UART_DATA_READY) != 0U) &&
    1d42:	ea1c 0f00 	tst.w	ip, r0
    1d46:	d017      	beq.n	1d78 <MSS_UART_get_rx+0x94>
    1d48:	f04f 0000 	mov.w	r0, #0
               ( rx_size < buff_size ) )
        {
            rx_buff[rx_size] = this_uart->hw_reg->RBR;
    1d4c:	681c      	ldr	r4, [r3, #0]
    1d4e:	f894 c000 	ldrb.w	ip, [r4]
    1d52:	f801 c000 	strb.w	ip, [r1, r0]
            ++rx_size;
    1d56:	f100 0001 	add.w	r0, r0, #1
            status = this_uart->hw_reg->LSR;
    1d5a:	681c      	ldr	r4, [r3, #0]
    1d5c:	f894 c014 	ldrb.w	ip, [r4, #20]
            this_uart->status |= status;
    1d60:	7a9c      	ldrb	r4, [r3, #10]
    1d62:	ea4c 0404 	orr.w	r4, ip, r4
    1d66:	729c      	strb	r4, [r3, #10]
          ( rx_buff != ((uint8_t *)0) ) && ( buff_size > 0U ) )
    {
        status = this_uart->hw_reg->LSR;
        this_uart->status |= status;

        while (( (status & MSS_UART_DATA_READY) != 0U) &&
    1d68:	4282      	cmp	r2, r0
    1d6a:	bf94      	ite	ls
    1d6c:	2400      	movls	r4, #0
    1d6e:	f00c 0401 	andhi.w	r4, ip, #1
    1d72:	2c00      	cmp	r4, #0
    1d74:	d1ea      	bne.n	1d4c <MSS_UART_get_rx+0x68>
    1d76:	e001      	b.n	1d7c <MSS_UART_get_rx+0x98>
    1d78:	f04f 0000 	mov.w	r0, #0
            status = this_uart->hw_reg->LSR;
            this_uart->status |= status;
        }
    }
    return rx_size;
}
    1d7c:	bc10      	pop	{r4}
    1d7e:	4770      	bx	lr

00001d80 <MSS_UART_isr>:
static void
MSS_UART_isr
(
    mss_uart_instance_t * this_uart
)
{
    1d80:	b508      	push	{r3, lr}
    uint8_t iirf;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
    1d82:	f240 0398 	movw	r3, #152	; 0x98
    1d86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1d8a:	4298      	cmp	r0, r3
    1d8c:	d007      	beq.n	1d9e <MSS_UART_isr+0x1e>
    1d8e:	f240 0370 	movw	r3, #112	; 0x70
    1d92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1d96:	4298      	cmp	r0, r3
    1d98:	d001      	beq.n	1d9e <MSS_UART_isr+0x1e>
    1d9a:	be00      	bkpt	0x0000
    1d9c:	bd08      	pop	{r3, pc}

    if ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) )
    {
        iirf = this_uart->hw_reg->IIR & IIRF_MASK;
    1d9e:	6803      	ldr	r3, [r0, #0]
    1da0:	7a1b      	ldrb	r3, [r3, #8]

        switch ( iirf )
    1da2:	f003 030f 	and.w	r3, r3, #15
    1da6:	2b0c      	cmp	r3, #12
    1da8:	d820      	bhi.n	1dec <MSS_UART_isr+0x6c>
    1daa:	e8df f003 	tbb	[pc, r3]
    1dae:	1f07      	.short	0x1f07
    1db0:	1f131f0d 	.word	0x1f131f0d
    1db4:	1f1f1f19 	.word	0x1f1f1f19
    1db8:	1f1f      	.short	0x1f1f
    1dba:	13          	.byte	0x13
    1dbb:	00          	.byte	0x00
        {
            case IIRF_MODEM_STATUS:  /* Modem status interrupt */
            {
                ASSERT( NULL_HANDLER != this_uart->modemsts_handler );
    1dbc:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1dbe:	b90b      	cbnz	r3, 1dc4 <MSS_UART_isr+0x44>
    1dc0:	be00      	bkpt	0x0000
    1dc2:	bd08      	pop	{r3, pc}
                if( NULL_HANDLER != this_uart->modemsts_handler )
                {
                   (*(this_uart->modemsts_handler))( this_uart );
    1dc4:	4798      	blx	r3
    1dc6:	bd08      	pop	{r3, pc}
            }
            break;

            case IIRF_THRE: /* Transmitter Holding Register Empty */
            {
                ASSERT( NULL_HANDLER != this_uart->tx_handler );
    1dc8:	6a03      	ldr	r3, [r0, #32]
    1dca:	b90b      	cbnz	r3, 1dd0 <MSS_UART_isr+0x50>
    1dcc:	be00      	bkpt	0x0000
    1dce:	bd08      	pop	{r3, pc}
                if ( NULL_HANDLER != this_uart->tx_handler )
                {
                    (*(this_uart->tx_handler))( this_uart );
    1dd0:	4798      	blx	r3
    1dd2:	bd08      	pop	{r3, pc}
            break;

            case IIRF_RX_DATA:      /* Received Data Available */
            case IIRF_DATA_TIMEOUT: /* Received Data Timed-out */
            {
                ASSERT( NULL_HANDLER != this_uart->rx_handler );
    1dd4:	69c3      	ldr	r3, [r0, #28]
    1dd6:	b90b      	cbnz	r3, 1ddc <MSS_UART_isr+0x5c>
    1dd8:	be00      	bkpt	0x0000
    1dda:	bd08      	pop	{r3, pc}
                if ( NULL_HANDLER != this_uart->rx_handler )
                {
                    (*(this_uart->rx_handler))( this_uart );
    1ddc:	4798      	blx	r3
    1dde:	bd08      	pop	{r3, pc}
            }
            break;

            case IIRF_RX_LINE_STATUS:  /* Line Status Interrupt */
            {
                ASSERT( NULL_HANDLER != this_uart->linests_handler );
    1de0:	6983      	ldr	r3, [r0, #24]
    1de2:	b90b      	cbnz	r3, 1de8 <MSS_UART_isr+0x68>
    1de4:	be00      	bkpt	0x0000
    1de6:	bd08      	pop	{r3, pc}
                if ( NULL_HANDLER != this_uart->linests_handler )
                {
                   (*(this_uart->linests_handler))( this_uart );
    1de8:	4798      	blx	r3
    1dea:	bd08      	pop	{r3, pc}
            }
            break;

            default:
            {
                ASSERT( INVALID_INTERRUPT );
    1dec:	be00      	bkpt	0x0000
    1dee:	bd08      	pop	{r3, pc}

00001df0 <default_tx_handler>:
static void
default_tx_handler
(
    mss_uart_instance_t * this_uart
)
{
    1df0:	b410      	push	{r4}
    uint8_t status;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
    1df2:	f240 0398 	movw	r3, #152	; 0x98
    1df6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1dfa:	4298      	cmp	r0, r3
    1dfc:	d006      	beq.n	1e0c <default_tx_handler+0x1c>
    1dfe:	f240 0370 	movw	r3, #112	; 0x70
    1e02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1e06:	4298      	cmp	r0, r3
    1e08:	d000      	beq.n	1e0c <default_tx_handler+0x1c>
    1e0a:	be00      	bkpt	0x0000
    ASSERT( ( (uint8_t *)0 ) != this_uart->tx_buffer );
    1e0c:	68c2      	ldr	r2, [r0, #12]
    1e0e:	b902      	cbnz	r2, 1e12 <default_tx_handler+0x22>
    1e10:	be00      	bkpt	0x0000
    ASSERT( 0U < this_uart->tx_buff_size );
    1e12:	6901      	ldr	r1, [r0, #16]
    1e14:	b901      	cbnz	r1, 1e18 <default_tx_handler+0x28>
    1e16:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
    1e18:	f240 0398 	movw	r3, #152	; 0x98
    1e1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1e20:	4298      	cmp	r0, r3
    1e22:	d005      	beq.n	1e30 <default_tx_handler+0x40>
    1e24:	f240 0370 	movw	r3, #112	; 0x70
    1e28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1e2c:	4298      	cmp	r0, r3
    1e2e:	d130      	bne.n	1e92 <default_tx_handler+0xa2>
    1e30:	2a00      	cmp	r2, #0
    1e32:	d02e      	beq.n	1e92 <default_tx_handler+0xa2>
    1e34:	2900      	cmp	r1, #0
    1e36:	d02c      	beq.n	1e92 <default_tx_handler+0xa2>
        ( ( (uint8_t *)0 ) != this_uart->tx_buffer ) &&
        ( 0U < this_uart->tx_buff_size ) )
    {
        /* Read the Line Status Register and update the sticky record. */
        status = this_uart->hw_reg->LSR;
    1e38:	6803      	ldr	r3, [r0, #0]
    1e3a:	7d1b      	ldrb	r3, [r3, #20]
        this_uart->status |= status;
    1e3c:	7a82      	ldrb	r2, [r0, #10]
    1e3e:	ea43 0202 	orr.w	r2, r3, r2
    1e42:	7282      	strb	r2, [r0, #10]

        /*
         * This function should only be called as a result of a THRE interrupt.
         * Verify that this is true before proceeding to transmit data.
         */
        if ( status & MSS_UART_THRE )
    1e44:	f013 0f20 	tst.w	r3, #32
    1e48:	d01a      	beq.n	1e80 <default_tx_handler+0x90>
        {
            uint32_t i;
            uint32_t fill_size = TX_FIFO_SIZE;
            uint32_t tx_remain = this_uart->tx_buff_size - this_uart->tx_idx;
    1e4a:	6902      	ldr	r2, [r0, #16]
    1e4c:	6943      	ldr	r3, [r0, #20]
    1e4e:	ebc3 0302 	rsb	r3, r3, r2

            /* Calculate the number of bytes to transmit. */
            if ( tx_remain < TX_FIFO_SIZE )
    1e52:	2b0f      	cmp	r3, #15
    1e54:	d904      	bls.n	1e60 <default_tx_handler+0x70>
    1e56:	f04f 0c10 	mov.w	ip, #16
    1e5a:	f04f 0300 	mov.w	r3, #0
    1e5e:	e002      	b.n	1e66 <default_tx_handler+0x76>
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for ( i = 0U; i < fill_size; ++i )
    1e60:	b173      	cbz	r3, 1e80 <default_tx_handler+0x90>
    1e62:	469c      	mov	ip, r3
    1e64:	e7f9      	b.n	1e5a <default_tx_handler+0x6a>
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
    1e66:	6802      	ldr	r2, [r0, #0]
    1e68:	68c4      	ldr	r4, [r0, #12]
    1e6a:	6941      	ldr	r1, [r0, #20]
    1e6c:	5c61      	ldrb	r1, [r4, r1]
    1e6e:	7011      	strb	r1, [r2, #0]
                ++this_uart->tx_idx;
    1e70:	6942      	ldr	r2, [r0, #20]
    1e72:	f102 0201 	add.w	r2, r2, #1
    1e76:	6142      	str	r2, [r0, #20]
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for ( i = 0U; i < fill_size; ++i )
    1e78:	f103 0301 	add.w	r3, r3, #1
    1e7c:	4563      	cmp	r3, ip
    1e7e:	d3f2      	bcc.n	1e66 <default_tx_handler+0x76>
                ++this_uart->tx_idx;
            }
        }

        /* Flag Tx as complete if all data has been pushed into the Tx FIFO. */
        if ( this_uart->tx_idx == this_uart->tx_buff_size )
    1e80:	6942      	ldr	r2, [r0, #20]
    1e82:	6903      	ldr	r3, [r0, #16]
    1e84:	429a      	cmp	r2, r3
        {
            this_uart->tx_buff_size = TX_COMPLETE;
    1e86:	bf01      	itttt	eq
    1e88:	2300      	moveq	r3, #0
    1e8a:	6103      	streq	r3, [r0, #16]
            /* disables TX interrupt */
            this_uart->hw_reg_bit->IER_ETBEI = 0U;
    1e8c:	6842      	ldreq	r2, [r0, #4]
    1e8e:	f8c2 3084 	streq.w	r3, [r2, #132]	; 0x84
        }
    }
}
    1e92:	bc10      	pop	{r4}
    1e94:	4770      	bx	lr
    1e96:	bf00      	nop

00001e98 <MSS_UART_set_rx_handler>:
(
    mss_uart_instance_t *       this_uart,
    mss_uart_irq_handler_t      handler,
    mss_uart_rx_trig_level_t    trigger_level
)
{
    1e98:	b410      	push	{r4}
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
    1e9a:	f240 0398 	movw	r3, #152	; 0x98
    1e9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1ea2:	4298      	cmp	r0, r3
    1ea4:	d006      	beq.n	1eb4 <MSS_UART_set_rx_handler+0x1c>
    1ea6:	f240 0370 	movw	r3, #112	; 0x70
    1eaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1eae:	4298      	cmp	r0, r3
    1eb0:	d000      	beq.n	1eb4 <MSS_UART_set_rx_handler+0x1c>
    1eb2:	be00      	bkpt	0x0000
    ASSERT( handler != INVALID_IRQ_HANDLER );
    1eb4:	b901      	cbnz	r1, 1eb8 <MSS_UART_set_rx_handler+0x20>
    1eb6:	be00      	bkpt	0x0000
    ASSERT( trigger_level < MSS_UART_FIFO_INVALID_TRIG_LEVEL );
    1eb8:	2ac0      	cmp	r2, #192	; 0xc0
    1eba:	d900      	bls.n	1ebe <MSS_UART_set_rx_handler+0x26>
    1ebc:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
    1ebe:	f240 0398 	movw	r3, #152	; 0x98
    1ec2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1ec6:	4298      	cmp	r0, r3
    1ec8:	d005      	beq.n	1ed6 <MSS_UART_set_rx_handler+0x3e>
    1eca:	f240 0370 	movw	r3, #112	; 0x70
    1ece:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1ed2:	4298      	cmp	r0, r3
    1ed4:	d12f      	bne.n	1f36 <MSS_UART_set_rx_handler+0x9e>
    1ed6:	2ac0      	cmp	r2, #192	; 0xc0
    1ed8:	bf8c      	ite	hi
    1eda:	2300      	movhi	r3, #0
    1edc:	2301      	movls	r3, #1
    1ede:	2900      	cmp	r1, #0
    1ee0:	bf0c      	ite	eq
    1ee2:	2300      	moveq	r3, #0
    1ee4:	f003 0301 	andne.w	r3, r3, #1
    1ee8:	b32b      	cbz	r3, 1f36 <MSS_UART_set_rx_handler+0x9e>
        ( handler != INVALID_IRQ_HANDLER) &&
        ( trigger_level < MSS_UART_FIFO_INVALID_TRIG_LEVEL) )
    {
        this_uart->rx_handler = handler;
    1eea:	61c1      	str	r1, [r0, #28]

        /* Set the receive interrupt trigger level. */
        /* Clear RX FIFO; Enable TXRDY and RXRDY for PDMA */
        this_uart->hw_reg->FCR = (uint8_t)(FCR_TRIG_LEVEL_MASK & (uint8_t)trigger_level) |
    1eec:	6803      	ldr	r3, [r0, #0]
    1eee:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    1ef2:	f042 020a 	orr.w	r2, r2, #10
    1ef6:	721a      	strb	r2, [r3, #8]
                              FCR_CLEAR_RX_FIFO_MASK | FCR_ENABLE_TXRDY_RXRDY_MASK;

        /* Clear any previously pended interrupts */
        NVIC_ClearPendingIRQ( this_uart->irqn );
    1ef8:	8903      	ldrh	r3, [r0, #8]
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    1efa:	b219      	sxth	r1, r3
    1efc:	ea4f 1151 	mov.w	r1, r1, lsr #5
    1f00:	f003 031f 	and.w	r3, r3, #31
    1f04:	f04f 0201 	mov.w	r2, #1
    1f08:	fa02 f403 	lsl.w	r4, r2, r3
    1f0c:	f24e 1300 	movw	r3, #57600	; 0xe100
    1f10:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1f14:	f101 0160 	add.w	r1, r1, #96	; 0x60
    1f18:	f843 4021 	str.w	r4, [r3, r1, lsl #2]

        /* Enable receive interrupt. */
        this_uart->hw_reg_bit->IER_ERBFI = 1U;
    1f1c:	6841      	ldr	r1, [r0, #4]
    1f1e:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80

        /* Enable UART instance interrupt in Cortex-M3 NVIC. */
        NVIC_EnableIRQ( this_uart->irqn );
    1f22:	8901      	ldrh	r1, [r0, #8]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    1f24:	b208      	sxth	r0, r1
    1f26:	ea4f 1050 	mov.w	r0, r0, lsr #5
    1f2a:	f001 011f 	and.w	r1, r1, #31
    1f2e:	fa02 f201 	lsl.w	r2, r2, r1
    1f32:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    }
}
    1f36:	bc10      	pop	{r4}
    1f38:	4770      	bx	lr
    1f3a:	bf00      	nop

00001f3c <UART0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART0_IRQHandler( void )
#else
void UART0_IRQHandler( void )
#endif
{
    1f3c:	4668      	mov	r0, sp
    1f3e:	f020 0107 	bic.w	r1, r0, #7
    1f42:	468d      	mov	sp, r1
    1f44:	b501      	push	{r0, lr}
    MSS_UART_isr( &g_mss_uart0 );
    1f46:	f240 0098 	movw	r0, #152	; 0x98
    1f4a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1f4e:	f7ff ff17 	bl	1d80 <MSS_UART_isr>
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    1f52:	f24e 1300 	movw	r3, #57600	; 0xe100
    1f56:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1f5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1f5e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC_ClearPendingIRQ( UART0_IRQn );
}
    1f62:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    1f66:	4685      	mov	sp, r0
    1f68:	4770      	bx	lr
    1f6a:	bf00      	nop

00001f6c <UART1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART1_IRQHandler( void )
#else
void UART1_IRQHandler( void )
#endif
{
    1f6c:	4668      	mov	r0, sp
    1f6e:	f020 0107 	bic.w	r1, r0, #7
    1f72:	468d      	mov	sp, r1
    1f74:	b501      	push	{r0, lr}
    MSS_UART_isr( &g_mss_uart1 );
    1f76:	f240 0070 	movw	r0, #112	; 0x70
    1f7a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1f7e:	f7ff feff 	bl	1d80 <MSS_UART_isr>
    1f82:	f24e 1300 	movw	r3, #57600	; 0xe100
    1f86:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1f8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1f8e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC_ClearPendingIRQ( UART1_IRQn );
}
    1f92:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    1f96:	4685      	mov	sp, r0
    1f98:	4770      	bx	lr
    1f9a:	bf00      	nop

00001f9c <MSS_UART_init>:
(
    mss_uart_instance_t* this_uart,
    uint32_t baud_rate,
    uint8_t line_config
)
{
    1f9c:	b570      	push	{r4, r5, r6, lr}
    1f9e:	4604      	mov	r4, r0
    1fa0:	460d      	mov	r5, r1
    1fa2:	4616      	mov	r6, r2
    uint32_t pclk_freq = 0U;
    uint32_t baud_value_l;

    /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
     * mss_uart_instance_t instances used to identify UART0 and UART1. */
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
    1fa4:	f240 0398 	movw	r3, #152	; 0x98
    1fa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1fac:	4298      	cmp	r0, r3
    1fae:	d006      	beq.n	1fbe <MSS_UART_init+0x22>
    1fb0:	f240 0370 	movw	r3, #112	; 0x70
    1fb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1fb8:	4298      	cmp	r0, r3
    1fba:	d000      	beq.n	1fbe <MSS_UART_init+0x22>
    1fbc:	be00      	bkpt	0x0000

    /* baud_rate should be greater than 0 */
    ASSERT( 0U < baud_rate );
    1fbe:	b905      	cbnz	r5, 1fc2 <MSS_UART_init+0x26>
    1fc0:	be00      	bkpt	0x0000

    /* Force the value of the CMSIS global variables holding the various system
     * clock frequencies to be updated. */
    SystemCoreClockUpdate();
    1fc2:	f001 f97f 	bl	32c4 <SystemCoreClockUpdate>

    if ( this_uart == &g_mss_uart0 )
    1fc6:	f240 0398 	movw	r3, #152	; 0x98
    1fca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1fce:	429c      	cmp	r4, r3
    1fd0:	d126      	bne.n	2020 <MAIN_STACK_SIZE+0x20>
    {
        this_uart->hw_reg = UART0;
    1fd2:	f240 0398 	movw	r3, #152	; 0x98
    1fd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1fda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1fde:	601a      	str	r2, [r3, #0]
        this_uart->hw_reg_bit = UART0_BITBAND;
    1fe0:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    1fe4:	605a      	str	r2, [r3, #4]
        this_uart->irqn = UART0_IRQn;
    1fe6:	f04f 020a 	mov.w	r2, #10
    1fea:	811a      	strh	r2, [r3, #8]

        pclk_freq = g_FrequencyPCLK0;
    1fec:	f240 030c 	movw	r3, #12
    1ff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1ff4:	6818      	ldr	r0, [r3, #0]

        /* reset UART0 */
        SYSREG->SOFT_RST_CR |= SYSREG_UART0_SOFTRESET_MASK;
    1ff6:	f242 0300 	movw	r3, #8192	; 0x2000
    1ffa:	f2ce 0304 	movt	r3, #57348	; 0xe004
    1ffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2000:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    2004:	631a      	str	r2, [r3, #48]	; 0x30
    2006:	f24e 1200 	movw	r2, #57600	; 0xe100
    200a:	f2ce 0200 	movt	r2, #57344	; 0xe000
    200e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    2012:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
        /* Clear any previously pended UART0 interrupt */
        NVIC_ClearPendingIRQ( UART0_IRQn );
        /* Take UART0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_UART0_SOFTRESET_MASK;
    2016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2018:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    201c:	631a      	str	r2, [r3, #48]	; 0x30
    201e:	e025      	b.n	206c <MAIN_STACK_SIZE+0x6c>
    }
    else
    {
        this_uart->hw_reg = UART1;
    2020:	f240 0300 	movw	r3, #0
    2024:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2028:	6023      	str	r3, [r4, #0]
        this_uart->hw_reg_bit = UART1_BITBAND;
    202a:	f240 0300 	movw	r3, #0
    202e:	f2c4 2320 	movt	r3, #16928	; 0x4220
    2032:	6063      	str	r3, [r4, #4]
        this_uart->irqn = UART1_IRQn;
    2034:	f04f 030b 	mov.w	r3, #11
    2038:	8123      	strh	r3, [r4, #8]

        pclk_freq = g_FrequencyPCLK1;
    203a:	f240 0310 	movw	r3, #16
    203e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2042:	6818      	ldr	r0, [r3, #0]

        /* Reset UART1 */
        SYSREG->SOFT_RST_CR |= SYSREG_UART1_SOFTRESET_MASK;
    2044:	f242 0300 	movw	r3, #8192	; 0x2000
    2048:	f2ce 0304 	movt	r3, #57348	; 0xe004
    204c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    204e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    2052:	631a      	str	r2, [r3, #48]	; 0x30
    2054:	f24e 1200 	movw	r2, #57600	; 0xe100
    2058:	f2ce 0200 	movt	r2, #57344	; 0xe000
    205c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2060:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
        /* Clear any previously pended UART1 interrupt */
        NVIC_ClearPendingIRQ( UART1_IRQn );
        /* Take UART1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_UART1_SOFTRESET_MASK;
    2064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2066:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    206a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* disable interrupts */
    this_uart->hw_reg->IER = 0U;
    206c:	6823      	ldr	r3, [r4, #0]
    206e:	f04f 0200 	mov.w	r2, #0
    2072:	711a      	strb	r2, [r3, #4]
     * The baud value is computed using the following equation:
     *      baud_value_l = PCLK_Frequency / (baud_rate * 16)
     * The baud value is rounded up or down depending on what would be the remainder
     * of the divide by 16 operation.
     */
    if( 0U < baud_rate )
    2074:	b915      	cbnz	r5, 207c <MAIN_STACK_SIZE+0x7c>
    2076:	f04f 0501 	mov.w	r5, #1
    207a:	e00f      	b.n	209c <MAIN_STACK_SIZE+0x9c>
    {
        baud_value_l = (uint32_t)(pclk_freq / baud_rate);
    207c:	fbb0 f5f5 	udiv	r5, r0, r5
        if( baud_value_l & 0x00000008U )
    2080:	f015 0f08 	tst.w	r5, #8
        {
            /* remainder above 0.5 */
            baud_value_l = (baud_value_l >> 4U) + 1U;        
    2084:	ea4f 1515 	mov.w	r5, r5, lsr #4
    2088:	bf18      	it	ne
    208a:	3501      	addne	r5, #1
            /* remainder below 0.5 */
            baud_value_l = (baud_value_l >> 4U);
        }
    
        /* Check if the baud rate is supported by the PCLK */
        ASSERT( baud_value_l <= UINT16_MAX);
    208c:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
        if( baud_value_l <= (uint32_t)UINT16_MAX)
        {
            baud_value = (uint16_t)baud_value_l;
    2090:	bf38      	it	cc
    2092:	b2ad      	uxthcc	r5, r5
            /* remainder below 0.5 */
            baud_value_l = (baud_value_l >> 4U);
        }
    
        /* Check if the baud rate is supported by the PCLK */
        ASSERT( baud_value_l <= UINT16_MAX);
    2094:	d302      	bcc.n	209c <MAIN_STACK_SIZE+0x9c>
    2096:	be00      	bkpt	0x0000
    2098:	f04f 0501 	mov.w	r5, #1
            baud_value = (uint16_t)baud_value_l;
        }
    }
    
    /* set divisor latch */
    this_uart->hw_reg_bit->LCR_DLAB = (uint32_t)1;
    209c:	6863      	ldr	r3, [r4, #4]
    209e:	f04f 0201 	mov.w	r2, #1
    20a2:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

    /* msb of baud value */
    this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8);
    20a6:	6823      	ldr	r3, [r4, #0]
    20a8:	ea4f 2215 	mov.w	r2, r5, lsr #8
    20ac:	711a      	strb	r2, [r3, #4]
    /* lsb of baud value */
    this_uart->hw_reg->DLR = (uint8_t)baud_value;
    20ae:	6823      	ldr	r3, [r4, #0]
    20b0:	b2ed      	uxtb	r5, r5
    20b2:	701d      	strb	r5, [r3, #0]

    /* reset divisor latch */
    this_uart->hw_reg_bit->LCR_DLAB = (uint32_t)0;
    20b4:	6862      	ldr	r2, [r4, #4]
    20b6:	f04f 0300 	mov.w	r3, #0
    20ba:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c

    /* set the line control register (bit length, stop bits, parity) */
    this_uart->hw_reg->LCR = line_config;
    20be:	6822      	ldr	r2, [r4, #0]
    20c0:	7316      	strb	r6, [r2, #12]

    /* FIFO configuration */
    /* RX FIFO length = 1 byte, clear receiver FIFO, 
       clear transmitter FIFO, enable RXRDYN and TXRDYN pins. */
    this_uart->hw_reg->FCR = (uint8_t)MSS_UART_FIFO_SINGLE_BYTE | 
    20c2:	6822      	ldr	r2, [r4, #0]
    20c4:	f04f 010e 	mov.w	r1, #14
    20c8:	7211      	strb	r1, [r2, #8]
                              FCR_CLEAR_RX_FIFO_MASK | FCR_CLEAR_TX_FIFO_MASK | 
                              FCR_ENABLE_TXRDY_RXRDY_MASK;
    /* disable loopback */
    this_uart->hw_reg_bit->MCR_LOOP = (uint32_t)0;
    20ca:	6862      	ldr	r2, [r4, #4]
    20cc:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210

    /* Instance setup */
    this_uart->tx_buff_size = TX_COMPLETE;
    20d0:	6123      	str	r3, [r4, #16]
    this_uart->tx_buffer = (const uint8_t *)0;
    20d2:	60e3      	str	r3, [r4, #12]
    this_uart->tx_idx = 0U;
    20d4:	6163      	str	r3, [r4, #20]

    /* Default handlers for MSS UART interrupts */
    this_uart->rx_handler       = NULL_HANDLER;
    20d6:	61e3      	str	r3, [r4, #28]
    this_uart->tx_handler       = default_tx_handler;
    20d8:	f641 52f1 	movw	r2, #7665	; 0x1df1
    20dc:	f2c0 0200 	movt	r2, #0
    20e0:	6222      	str	r2, [r4, #32]
    this_uart->linests_handler  = NULL_HANDLER;
    20e2:	61a3      	str	r3, [r4, #24]
    this_uart->modemsts_handler = NULL_HANDLER;
    20e4:	6263      	str	r3, [r4, #36]	; 0x24

    /* Initialize the sticky status */
    this_uart->status = 0U;
    20e6:	72a3      	strb	r3, [r4, #10]
}
    20e8:	bd70      	pop	{r4, r5, r6, pc}
    20ea:	bf00      	nop

000020ec <recover_from_rx_overflow>:
 */
static void recover_from_rx_overflow
(
    mss_spi_instance_t * this_spi
)
{
    20ec:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    uint32_t slave_select;
    
    /*
     * Read current SPI hardware block configuration.
     */
    control_reg = this_spi->hw_reg->CONTROL;
    20f0:	6803      	ldr	r3, [r0, #0]
    20f2:	f8d3 8000 	ldr.w	r8, [r3]
    clk_gen = this_spi->hw_reg->CLK_GEN;
    20f6:	f8d3 c018 	ldr.w	ip, [r3, #24]
    frame_size = this_spi->hw_reg->TXRXDF_SIZE;
    20fa:	685f      	ldr	r7, [r3, #4]
    control2 = this_spi->hw_reg->CONTROL2;
    20fc:	6a9e      	ldr	r6, [r3, #40]	; 0x28
    packet_size = this_spi->hw_reg->PKTSIZE;
    20fe:	6b1d      	ldr	r5, [r3, #48]	; 0x30
    cmd_size = this_spi->hw_reg->CMDSIZE;
    2100:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    slave_select = this_spi->hw_reg->SLAVE_SELECT;
    2102:	f8d3 a01c 	ldr.w	sl, [r3, #28]
     
    /*
     * Reset the SPI hardware block.
     */
    if(this_spi == &g_mss_spi0)
    2106:	f240 1344 	movw	r3, #324	; 0x144
    210a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    210e:	4298      	cmp	r0, r3
    2110:	d124      	bne.n	215c <recover_from_rx_overflow+0x70>
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI0_BASE);
    2112:	f240 1344 	movw	r3, #324	; 0x144
    2116:	f2c2 0300 	movt	r3, #8192	; 0x2000
    211a:	f241 0200 	movw	r2, #4096	; 0x1000
    211e:	f2c4 0200 	movt	r2, #16384	; 0x4000
    2122:	601a      	str	r2, [r3, #0]
        this_spi->irqn = SPI0_IRQn;
    2124:	f04f 010c 	mov.w	r1, #12
    2128:	8099      	strh	r1, [r3, #4]

        /* reset SPI0 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI0_SOFTRESET_MASK;
    212a:	f242 0300 	movw	r3, #8192	; 0x2000
    212e:	f2ce 0304 	movt	r3, #57348	; 0xe004
    2132:	6b19      	ldr	r1, [r3, #48]	; 0x30
    2134:	f441 7100 	orr.w	r1, r1, #512	; 0x200
    2138:	6319      	str	r1, [r3, #48]	; 0x30
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    213a:	f24e 1100 	movw	r1, #57600	; 0xe100
    213e:	f2ce 0100 	movt	r1, #57344	; 0xe000
    2142:	f44f 5980 	mov.w	r9, #4096	; 0x1000
    2146:	f8c1 9180 	str.w	r9, [r1, #384]	; 0x180
        /* Clear any previously pended SPI0 interrupt */
        NVIC_ClearPendingIRQ(SPI0_IRQn);
        /* Take SPI0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI0_SOFTRESET_MASK;
    214a:	6b19      	ldr	r1, [r3, #48]	; 0x30
    214c:	f421 7100 	bic.w	r1, r1, #512	; 0x200
    2150:	6319      	str	r1, [r3, #48]	; 0x30

        this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
    2152:	6813      	ldr	r3, [r2, #0]
    2154:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    2158:	6013      	str	r3, [r2, #0]
    215a:	e01f      	b.n	219c <recover_from_rx_overflow+0xb0>
    }
    else
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI1_BASE);
    215c:	f241 0200 	movw	r2, #4096	; 0x1000
    2160:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2164:	6002      	str	r2, [r0, #0]
        this_spi->irqn = SPI1_IRQn;
    2166:	f04f 030d 	mov.w	r3, #13
    216a:	8083      	strh	r3, [r0, #4]
        
        /* reset SPI1 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI1_SOFTRESET_MASK;
    216c:	f242 0300 	movw	r3, #8192	; 0x2000
    2170:	f2ce 0304 	movt	r3, #57348	; 0xe004
    2174:	6b19      	ldr	r1, [r3, #48]	; 0x30
    2176:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
    217a:	6319      	str	r1, [r3, #48]	; 0x30
    217c:	f24e 1100 	movw	r1, #57600	; 0xe100
    2180:	f2ce 0100 	movt	r1, #57344	; 0xe000
    2184:	f44f 5900 	mov.w	r9, #8192	; 0x2000
    2188:	f8c1 9180 	str.w	r9, [r1, #384]	; 0x180
        /* Clear any previously pended SPI1 interrupt */
        NVIC_ClearPendingIRQ(SPI1_IRQn);
        /* Take SPI1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI1_SOFTRESET_MASK;
    218c:	6b19      	ldr	r1, [r3, #48]	; 0x30
    218e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
    2192:	6319      	str	r1, [r3, #48]	; 0x30
        
        this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
    2194:	6813      	ldr	r3, [r2, #0]
    2196:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    219a:	6013      	str	r3, [r2, #0]
    }
    
    /*
     * Restore SPI hardware block configuration.
     */
    control_reg &= ~(uint32_t)CTRL_ENABLE_MASK;
    219c:	f028 0201 	bic.w	r2, r8, #1
    this_spi->hw_reg->CONTROL = control_reg;
    21a0:	6803      	ldr	r3, [r0, #0]
    21a2:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CLK_GEN = clk_gen;
    21a4:	6803      	ldr	r3, [r0, #0]
    21a6:	f8c3 c018 	str.w	ip, [r3, #24]
    this_spi->hw_reg->TXRXDF_SIZE = frame_size;
    21aa:	6803      	ldr	r3, [r0, #0]
    21ac:	605f      	str	r7, [r3, #4]
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
    21ae:	6803      	ldr	r3, [r0, #0]
    21b0:	681a      	ldr	r2, [r3, #0]
    21b2:	f042 0201 	orr.w	r2, r2, #1
    21b6:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CONTROL2 = control2;
    21b8:	6803      	ldr	r3, [r0, #0]
    21ba:	629e      	str	r6, [r3, #40]	; 0x28
    this_spi->hw_reg->PKTSIZE = packet_size;
    21bc:	6803      	ldr	r3, [r0, #0]
    21be:	631d      	str	r5, [r3, #48]	; 0x30
    this_spi->hw_reg->CMDSIZE = cmd_size;
    21c0:	6803      	ldr	r3, [r0, #0]
    21c2:	635c      	str	r4, [r3, #52]	; 0x34
    this_spi->hw_reg->SLAVE_SELECT = slave_select;
    21c4:	6803      	ldr	r3, [r0, #0]
    21c6:	f8c3 a01c 	str.w	sl, [r3, #28]
}
    21ca:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    21ce:	4770      	bx	lr

000021d0 <MSS_SPI_configure_master_mode>:
    mss_spi_slave_t         slave,
    mss_spi_protocol_mode_t protocol_mode,
    mss_spi_pclk_div_t      clk_rate,
    uint8_t                 frame_bit_length
)
{
    21d0:	b4f0      	push	{r4, r5, r6, r7}
    21d2:	f89d 5010 	ldrb.w	r5, [sp, #16]
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
    21d6:	f240 1c44 	movw	ip, #324	; 0x144
    21da:	f2c2 0c00 	movt	ip, #8192	; 0x2000
    21de:	4560      	cmp	r0, ip
    21e0:	d006      	beq.n	21f0 <MSS_SPI_configure_master_mode+0x20>
    21e2:	f240 0cc0 	movw	ip, #192	; 0xc0
    21e6:	f2c2 0c00 	movt	ip, #8192	; 0x2000
    21ea:	4560      	cmp	r0, ip
    21ec:	d000      	beq.n	21f0 <MSS_SPI_configure_master_mode+0x20>
    21ee:	be00      	bkpt	0x0000
    ASSERT(slave < MSS_SPI_MAX_NB_OF_SLAVES);
    21f0:	2907      	cmp	r1, #7
    21f2:	d900      	bls.n	21f6 <MSS_SPI_configure_master_mode+0x26>
    21f4:	be00      	bkpt	0x0000
    ASSERT(frame_bit_length <= MAX_FRAME_LENGTH);
    21f6:	2d20      	cmp	r5, #32
    21f8:	d900      	bls.n	21fc <MSS_SPI_configure_master_mode+0x2c>
    21fa:	be00      	bkpt	0x0000
    
    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
    21fc:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    2200:	fa0f f68c 	sxth.w	r6, ip
    2204:	ea4f 1656 	mov.w	r6, r6, lsr #5
    2208:	f00c 0c1f 	and.w	ip, ip, #31
    220c:	f04f 0701 	mov.w	r7, #1
    2210:	fa07 f70c 	lsl.w	r7, r7, ip
    2214:	f24e 1400 	movw	r4, #57600	; 0xe100
    2218:	f2ce 0400 	movt	r4, #57344	; 0xe000
    221c:	f106 0620 	add.w	r6, r6, #32
    2220:	f844 7026 	str.w	r7, [r4, r6, lsl #2]

    /* Reset slave transfer mode to unknown to wipe slate clean */
    this_spi->slave_xfer_mode = MSS_SPI_SLAVE_XFER_NONE;
    2224:	f04f 0c00 	mov.w	ip, #0
    2228:	f880 c080 	strb.w	ip, [r0, #128]	; 0x80

    /* Set the mode. */
    this_spi->hw_reg->CONTROL &= ~(uint32_t)CTRL_ENABLE_MASK;
    222c:	6804      	ldr	r4, [r0, #0]
    222e:	6826      	ldr	r6, [r4, #0]
    2230:	f026 0601 	bic.w	r6, r6, #1
    2234:	6026      	str	r6, [r4, #0]
    this_spi->hw_reg->CONTROL |= CTRL_MASTER_MASK;
    2236:	6804      	ldr	r4, [r0, #0]
    2238:	6826      	ldr	r6, [r4, #0]
    223a:	f046 0602 	orr.w	r6, r6, #2
    223e:	6026      	str	r6, [r4, #0]
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
    2240:	6804      	ldr	r4, [r0, #0]
    2242:	6826      	ldr	r6, [r4, #0]
    2244:	f046 0601 	orr.w	r6, r6, #1
    2248:	6026      	str	r6, [r4, #0]
    /*
     * Keep track of the required register configuration for this slave. These
     * values will be used by the MSS_SPI_set_slave_select() function to configure
     * the master to match the slave being selected.
     */
    if(slave < MSS_SPI_MAX_NB_OF_SLAVES)     
    224a:	2907      	cmp	r1, #7
    224c:	d82d      	bhi.n	22aa <MSS_SPI_configure_master_mode+0xda>
         *
         * We only do it for Motorola modes and if you need the slave selected
         * deselected between frames in modes 0 or 2 then remove SPS_MASK from
         * below.
         */
        if((MSS_SPI_MODE0 == protocol_mode) || (MSS_SPI_MODE1 == protocol_mode) ||
    224e:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
    2252:	bf14      	ite	ne
    2254:	2400      	movne	r4, #0
    2256:	2401      	moveq	r4, #1
    2258:	4562      	cmp	r2, ip
    225a:	bf08      	it	eq
    225c:	f044 0401 	orreq.w	r4, r4, #1
    2260:	b954      	cbnz	r4, 2278 <MSS_SPI_configure_master_mode+0xa8>
    2262:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
    2266:	bf14      	ite	ne
    2268:	2400      	movne	r4, #0
    226a:	2401      	moveq	r4, #1
    226c:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
    2270:	bf08      	it	eq
    2272:	f044 0401 	orreq.w	r4, r4, #1
    2276:	b14c      	cbz	r4, 228c <MSS_SPI_configure_master_mode+0xbc>
           (MSS_SPI_MODE2 == protocol_mode) || (MSS_SPI_MODE3 == protocol_mode))
        {
            this_spi->slaves_cfg[slave].ctrl_reg = MASTER_MODE_MASK | SPS_MASK |
    2278:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    227c:	f240 1c02 	movw	ip, #258	; 0x102
    2280:	f2c2 4c00 	movt	ip, #9216	; 0x2400
    2284:	ea42 020c 	orr.w	r2, r2, ip
    2288:	6362      	str	r2, [r4, #52]	; 0x34
         *
         * We only do it for Motorola modes and if you need the slave selected
         * deselected between frames in modes 0 or 2 then remove SPS_MASK from
         * below.
         */
        if((MSS_SPI_MODE0 == protocol_mode) || (MSS_SPI_MODE1 == protocol_mode) ||
    228a:	e008      	b.n	229e <MSS_SPI_configure_master_mode+0xce>
                                                   (uint32_t)protocol_mode | 
                                                   ((uint32_t)1 << TXRXDFCOUNT_SHIFT);
        }
        else
        {
            this_spi->slaves_cfg[slave].ctrl_reg = MASTER_MODE_MASK |
    228c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    2290:	f240 1c02 	movw	ip, #258	; 0x102
    2294:	f2c2 0c00 	movt	ip, #8192	; 0x2000
    2298:	ea42 020c 	orr.w	r2, r2, ip
    229c:	6362      	str	r2, [r4, #52]	; 0x34
                                                   BIGFIFO_MASK |
                                                   (uint32_t)protocol_mode | 
                                                   ((uint32_t)1 << TXRXDFCOUNT_SHIFT);
        }
        
        this_spi->slaves_cfg[slave].txrxdf_size_reg = frame_bit_length;
    229e:	f101 0106 	add.w	r1, r1, #6
    22a2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    22a6:	720d      	strb	r5, [r1, #8]
        this_spi->slaves_cfg[slave].clk_gen = (uint8_t)clk_rate;
    22a8:	724b      	strb	r3, [r1, #9]
    }
    /* Reenable interrupts */
    NVIC_EnableIRQ( this_spi->irqn );
    22aa:	8883      	ldrh	r3, [r0, #4]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    22ac:	b21a      	sxth	r2, r3
    22ae:	ea4f 1252 	mov.w	r2, r2, lsr #5
    22b2:	f003 031f 	and.w	r3, r3, #31
    22b6:	f04f 0101 	mov.w	r1, #1
    22ba:	fa01 f103 	lsl.w	r1, r1, r3
    22be:	f24e 1300 	movw	r3, #57600	; 0xe100
    22c2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    22ca:	bcf0      	pop	{r4, r5, r6, r7}
    22cc:	4770      	bx	lr
    22ce:	bf00      	nop

000022d0 <MSS_SPI_set_slave_select>:
void MSS_SPI_set_slave_select
(
    mss_spi_instance_t * this_spi,
    mss_spi_slave_t slave
)
{
    22d0:	b538      	push	{r3, r4, r5, lr}
    22d2:	4604      	mov	r4, r0
    uint32_t rx_overflow;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
    22d4:	f240 1344 	movw	r3, #324	; 0x144
    22d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    22dc:	4298      	cmp	r0, r3
    22de:	d006      	beq.n	22ee <MSS_SPI_set_slave_select+0x1e>
    22e0:	f240 03c0 	movw	r3, #192	; 0xc0
    22e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    22e8:	4298      	cmp	r0, r3
    22ea:	d000      	beq.n	22ee <MSS_SPI_set_slave_select+0x1e>
    22ec:	be00      	bkpt	0x0000
    
    /* This function is only intended to be used with an SPI master. */
    ASSERT((this_spi->hw_reg->CONTROL & CTRL_MASTER_MASK) == CTRL_MASTER_MASK);
    22ee:	6822      	ldr	r2, [r4, #0]
    22f0:	6813      	ldr	r3, [r2, #0]
    22f2:	f013 0f02 	tst.w	r3, #2
    22f6:	d100      	bne.n	22fa <MSS_SPI_set_slave_select+0x2a>
    22f8:	be00      	bkpt	0x0000
    
    ASSERT(this_spi->slaves_cfg[slave].ctrl_reg != NOT_CONFIGURED);
    22fa:	460d      	mov	r5, r1
    22fc:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
    2300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2302:	f1b3 3fff 	cmp.w	r3, #4294967295
    2306:	d100      	bne.n	230a <MSS_SPI_set_slave_select+0x3a>
    2308:	be00      	bkpt	0x0000

    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
    230a:	88a3      	ldrh	r3, [r4, #4]
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    230c:	b219      	sxth	r1, r3
    230e:	ea4f 1151 	mov.w	r1, r1, lsr #5
    2312:	f003 031f 	and.w	r3, r3, #31
    2316:	f04f 0001 	mov.w	r0, #1
    231a:	fa00 f003 	lsl.w	r0, r0, r3
    231e:	f24e 1300 	movw	r3, #57600	; 0xe100
    2322:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2326:	f101 0120 	add.w	r1, r1, #32
    232a:	f843 0021 	str.w	r0, [r3, r1, lsl #2]

    /* Recover from receive overflow. */
    rx_overflow = this_spi->hw_reg->STATUS & RX_OVERFLOW_MASK;
    232e:	6893      	ldr	r3, [r2, #8]
    if(rx_overflow)
    2330:	f013 0f04 	tst.w	r3, #4
    2334:	d002      	beq.n	233c <MSS_SPI_set_slave_select+0x6c>
    {
         recover_from_rx_overflow(this_spi);
    2336:	4620      	mov	r0, r4
    2338:	f7ff fed8 	bl	20ec <recover_from_rx_overflow>
    }
    
    /* Set the clock rate. */
    this_spi->hw_reg->CONTROL &= ~(uint32_t)CTRL_ENABLE_MASK;
    233c:	6823      	ldr	r3, [r4, #0]
    233e:	681a      	ldr	r2, [r3, #0]
    2340:	f022 0201 	bic.w	r2, r2, #1
    2344:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CONTROL = this_spi->slaves_cfg[slave].ctrl_reg;
    2346:	6822      	ldr	r2, [r4, #0]
    2348:	f105 0306 	add.w	r3, r5, #6
    234c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    2350:	6859      	ldr	r1, [r3, #4]
    2352:	6011      	str	r1, [r2, #0]
    this_spi->hw_reg->CLK_GEN = this_spi->slaves_cfg[slave].clk_gen;
    2354:	6822      	ldr	r2, [r4, #0]
    2356:	7a59      	ldrb	r1, [r3, #9]
    2358:	6191      	str	r1, [r2, #24]
    this_spi->hw_reg->TXRXDF_SIZE = this_spi->slaves_cfg[slave].txrxdf_size_reg;
    235a:	6822      	ldr	r2, [r4, #0]
    235c:	7a1b      	ldrb	r3, [r3, #8]
    235e:	6053      	str	r3, [r2, #4]
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
    2360:	6823      	ldr	r3, [r4, #0]
    2362:	681a      	ldr	r2, [r3, #0]
    2364:	f042 0201 	orr.w	r2, r2, #1
    2368:	601a      	str	r2, [r3, #0]
    
    /* Set slave select */
    this_spi->hw_reg->SLAVE_SELECT |= ((uint32_t)1 << (uint32_t)slave);
    236a:	6822      	ldr	r2, [r4, #0]
    236c:	69d1      	ldr	r1, [r2, #28]
    236e:	f04f 0301 	mov.w	r3, #1
    2372:	fa03 f505 	lsl.w	r5, r3, r5
    2376:	ea45 0501 	orr.w	r5, r5, r1
    237a:	61d5      	str	r5, [r2, #28]
    /* Reenable interrupts */
    NVIC_EnableIRQ( this_spi->irqn );
    237c:	88a2      	ldrh	r2, [r4, #4]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    237e:	b211      	sxth	r1, r2
    2380:	ea4f 1151 	mov.w	r1, r1, lsr #5
    2384:	f002 021f 	and.w	r2, r2, #31
    2388:	fa03 f202 	lsl.w	r2, r3, r2
    238c:	f24e 1300 	movw	r3, #57600	; 0xe100
    2390:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2394:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
    2398:	bd38      	pop	{r3, r4, r5, pc}
    239a:	bf00      	nop

0000239c <MSS_SPI_clear_slave_select>:
void MSS_SPI_clear_slave_select
(
    mss_spi_instance_t * this_spi,
    mss_spi_slave_t slave
)
{
    239c:	b538      	push	{r3, r4, r5, lr}
    239e:	4604      	mov	r4, r0
    23a0:	460d      	mov	r5, r1
    uint32_t rx_overflow;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
    23a2:	f240 1344 	movw	r3, #324	; 0x144
    23a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    23aa:	4298      	cmp	r0, r3
    23ac:	d006      	beq.n	23bc <MSS_SPI_clear_slave_select+0x20>
    23ae:	f240 03c0 	movw	r3, #192	; 0xc0
    23b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    23b6:	4298      	cmp	r0, r3
    23b8:	d000      	beq.n	23bc <MSS_SPI_clear_slave_select+0x20>
    23ba:	be00      	bkpt	0x0000
    
    /* This function is only intended to be used with an SPI master. */
    ASSERT((this_spi->hw_reg->CONTROL & CTRL_MASTER_MASK) == CTRL_MASTER_MASK);
    23bc:	6822      	ldr	r2, [r4, #0]
    23be:	6813      	ldr	r3, [r2, #0]
    23c0:	f013 0f02 	tst.w	r3, #2
    23c4:	d100      	bne.n	23c8 <MSS_SPI_clear_slave_select+0x2c>
    23c6:	be00      	bkpt	0x0000

    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
    23c8:	88a3      	ldrh	r3, [r4, #4]
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    23ca:	b219      	sxth	r1, r3
    23cc:	ea4f 1151 	mov.w	r1, r1, lsr #5
    23d0:	f003 031f 	and.w	r3, r3, #31
    23d4:	f04f 0001 	mov.w	r0, #1
    23d8:	fa00 f003 	lsl.w	r0, r0, r3
    23dc:	f24e 1300 	movw	r3, #57600	; 0xe100
    23e0:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23e4:	f101 0120 	add.w	r1, r1, #32
    23e8:	f843 0021 	str.w	r0, [r3, r1, lsl #2]

    /* Recover from receive overflow. */
    rx_overflow = this_spi->hw_reg->STATUS & RX_OVERFLOW_MASK;
    23ec:	6893      	ldr	r3, [r2, #8]
    if(rx_overflow)
    23ee:	f013 0f04 	tst.w	r3, #4
    23f2:	d002      	beq.n	23fa <MSS_SPI_clear_slave_select+0x5e>
    {
         recover_from_rx_overflow(this_spi);
    23f4:	4620      	mov	r0, r4
    23f6:	f7ff fe79 	bl	20ec <recover_from_rx_overflow>
    }
    
    this_spi->hw_reg->SLAVE_SELECT &= ~((uint32_t)1 << (uint32_t)slave);
    23fa:	6822      	ldr	r2, [r4, #0]
    23fc:	69d1      	ldr	r1, [r2, #28]
    23fe:	f04f 0301 	mov.w	r3, #1
    2402:	fa03 f505 	lsl.w	r5, r3, r5
    2406:	ea21 0505 	bic.w	r5, r1, r5
    240a:	61d5      	str	r5, [r2, #28]
    /* Reenable interrupts */
    NVIC_EnableIRQ( this_spi->irqn );
    240c:	88a2      	ldrh	r2, [r4, #4]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    240e:	b211      	sxth	r1, r2
    2410:	ea4f 1151 	mov.w	r1, r1, lsr #5
    2414:	f002 021f 	and.w	r2, r2, #31
    2418:	fa03 f202 	lsl.w	r2, r3, r2
    241c:	f24e 1300 	movw	r3, #57600	; 0xe100
    2420:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2424:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
    2428:	bd38      	pop	{r3, r4, r5, pc}
    242a:	bf00      	nop

0000242c <MSS_SPI_transfer_frame>:
uint32_t MSS_SPI_transfer_frame
(
    mss_spi_instance_t * this_spi,
    uint32_t tx_bits
)
{
    242c:	b410      	push	{r4}
    242e:	b083      	sub	sp, #12
    volatile uint32_t dummy;
    uint32_t rx_fifo_empty;
    uint32_t rx_ready;
    uint32_t tx_done;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
    2430:	f240 1344 	movw	r3, #324	; 0x144
    2434:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2438:	4298      	cmp	r0, r3
    243a:	d006      	beq.n	244a <MSS_SPI_transfer_frame+0x1e>
    243c:	f240 03c0 	movw	r3, #192	; 0xc0
    2440:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2444:	4298      	cmp	r0, r3
    2446:	d000      	beq.n	244a <MSS_SPI_transfer_frame+0x1e>
    2448:	be00      	bkpt	0x0000
    
    /* This function is only intended to be used with an SPI master. */
    ASSERT((this_spi->hw_reg->CONTROL & CTRL_MASTER_MASK) == CTRL_MASTER_MASK);
    244a:	6803      	ldr	r3, [r0, #0]
    244c:	681a      	ldr	r2, [r3, #0]
    244e:	f012 0f02 	tst.w	r2, #2
    2452:	d100      	bne.n	2456 <MSS_SPI_transfer_frame+0x2a>
    2454:	be00      	bkpt	0x0000
    
    /* Ensure single frame transfer selected so interrupts work correctly */
    this_spi->hw_reg->CONTROL = (this_spi->hw_reg->CONTROL & ~TXRXDFCOUNT_MASK)
    2456:	681c      	ldr	r4, [r3, #0]
    2458:	f240 02ff 	movw	r2, #255	; 0xff
    245c:	f6cf 7200 	movt	r2, #65280	; 0xff00
    2460:	ea04 0202 	and.w	r2, r4, r2
    2464:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    2468:	601a      	str	r2, [r3, #0]
                                | ((uint32_t)1u << TXRXDFCOUNT_SHIFT);

    /* Flush the Tx and Rx FIFOs. Please note this does not have any effect on A2F200. */
    this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
    246a:	6803      	ldr	r3, [r0, #0]
    246c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    246e:	f042 020c 	orr.w	r2, r2, #12
    2472:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Flush Rx FIFO in case we are executing on A2F200. */
    rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
    2474:	6803      	ldr	r3, [r0, #0]
    2476:	689a      	ldr	r2, [r3, #8]
    while(0u == rx_fifo_empty)
    2478:	f012 0f40 	tst.w	r2, #64	; 0x40
    247c:	d107      	bne.n	248e <MSS_SPI_transfer_frame+0x62>
    {
        dummy = this_spi->hw_reg->RX_DATA;
    247e:	691a      	ldr	r2, [r3, #16]
    2480:	9201      	str	r2, [sp, #4]
        dummy = dummy;  /* Prevent Lint warning. */
    2482:	9a01      	ldr	r2, [sp, #4]
    2484:	9201      	str	r2, [sp, #4]
        rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
    2486:	689a      	ldr	r2, [r3, #8]
    /* Flush the Tx and Rx FIFOs. Please note this does not have any effect on A2F200. */
    this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
    
    /* Flush Rx FIFO in case we are executing on A2F200. */
    rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
    while(0u == rx_fifo_empty)
    2488:	f012 0f40 	tst.w	r2, #64	; 0x40
    248c:	d0f7      	beq.n	247e <MSS_SPI_transfer_frame+0x52>
        dummy = dummy;  /* Prevent Lint warning. */
        rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
    }
    
    /* Send frame. */
    this_spi->hw_reg->TX_DATA = tx_bits;
    248e:	6159      	str	r1, [r3, #20]
    
    /* Wait for frame Tx to complete. */
    tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
    2490:	6803      	ldr	r3, [r0, #0]
    2492:	689a      	ldr	r2, [r3, #8]
    while(0u == tx_done)
    2494:	f012 0f01 	tst.w	r2, #1
    2498:	d103      	bne.n	24a2 <MSS_SPI_transfer_frame+0x76>
    {
        tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
    249a:	689a      	ldr	r2, [r3, #8]
    /* Send frame. */
    this_spi->hw_reg->TX_DATA = tx_bits;
    
    /* Wait for frame Tx to complete. */
    tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
    while(0u == tx_done)
    249c:	f012 0f01 	tst.w	r2, #1
    24a0:	d0fb      	beq.n	249a <MSS_SPI_transfer_frame+0x6e>
        tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
    }
    
    /* Read received frame. */
    /* Wait for Rx complete. */
    rx_ready = this_spi->hw_reg->STATUS & RX_DATA_READY_MASK;
    24a2:	689a      	ldr	r2, [r3, #8]
    while(0u == rx_ready)
    24a4:	f012 0f02 	tst.w	r2, #2
    24a8:	d103      	bne.n	24b2 <MSS_SPI_transfer_frame+0x86>
    {
        rx_ready = this_spi->hw_reg->STATUS & RX_DATA_READY_MASK;
    24aa:	689a      	ldr	r2, [r3, #8]
    }
    
    /* Read received frame. */
    /* Wait for Rx complete. */
    rx_ready = this_spi->hw_reg->STATUS & RX_DATA_READY_MASK;
    while(0u == rx_ready)
    24ac:	f012 0f02 	tst.w	r2, #2
    24b0:	d0fb      	beq.n	24aa <MSS_SPI_transfer_frame+0x7e>
    {
        rx_ready = this_spi->hw_reg->STATUS & RX_DATA_READY_MASK;
    }
    /* Return Rx data. */
    return( this_spi->hw_reg->RX_DATA );
    24b2:	6918      	ldr	r0, [r3, #16]
}
    24b4:	b003      	add	sp, #12
    24b6:	bc10      	pop	{r4}
    24b8:	4770      	bx	lr
    24ba:	bf00      	nop

000024bc <fill_slave_tx_fifo>:
 */
static void fill_slave_tx_fifo
(
    mss_spi_instance_t * this_spi
)
{
    24bc:	b410      	push	{r4}
    uint32_t guard = 0u;

    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
    24be:	6802      	ldr	r2, [r0, #0]
    24c0:	6893      	ldr	r3, [r2, #8]
    24c2:	f413 7f80 	tst.w	r3, #256	; 0x100
    24c6:	d113      	bne.n	24f0 <fill_slave_tx_fifo+0x34>
          (this_spi->slave_tx_idx < this_spi->slave_tx_size))
    24c8:	6903      	ldr	r3, [r0, #16]
    24ca:	68c1      	ldr	r1, [r0, #12]
    24cc:	428b      	cmp	r3, r1
    24ce:	d213      	bcs.n	24f8 <fill_slave_tx_fifo+0x3c>
    {
        /* Sending from primary slave transmit buffer */
        this_spi->hw_reg->TX_DATA = this_spi->slave_tx_buffer[this_spi->slave_tx_idx];
    24d0:	6881      	ldr	r1, [r0, #8]
    24d2:	5ccb      	ldrb	r3, [r1, r3]
    24d4:	6153      	str	r3, [r2, #20]
        ++this_spi->slave_tx_idx;
    24d6:	6903      	ldr	r3, [r0, #16]
    24d8:	f103 0301 	add.w	r3, r3, #1
    24dc:	6103      	str	r3, [r0, #16]
    mss_spi_instance_t * this_spi
)
{
    uint32_t guard = 0u;

    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
    24de:	6802      	ldr	r2, [r0, #0]
    24e0:	6891      	ldr	r1, [r2, #8]
    24e2:	f411 7f80 	tst.w	r1, #256	; 0x100
    24e6:	d103      	bne.n	24f0 <fill_slave_tx_fifo+0x34>
          (this_spi->slave_tx_idx < this_spi->slave_tx_size))
    24e8:	68c1      	ldr	r1, [r0, #12]
    24ea:	4299      	cmp	r1, r3
    24ec:	d8f0      	bhi.n	24d0 <fill_slave_tx_fifo+0x14>
    24ee:	e003      	b.n	24f8 <fill_slave_tx_fifo+0x3c>
        /* Sending from primary slave transmit buffer */
        this_spi->hw_reg->TX_DATA = this_spi->slave_tx_buffer[this_spi->slave_tx_idx];
        ++this_spi->slave_tx_idx;
    }

    if(this_spi->slave_tx_idx >= this_spi->slave_tx_size)
    24f0:	6902      	ldr	r2, [r0, #16]
    24f2:	68c3      	ldr	r3, [r0, #12]
    24f4:	429a      	cmp	r2, r3
    24f6:	d317      	bcc.n	2528 <fill_slave_tx_fifo+0x6c>
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
    24f8:	6802      	ldr	r2, [r0, #0]
    24fa:	6893      	ldr	r3, [r2, #8]
    24fc:	f413 7f80 	tst.w	r3, #256	; 0x100
    2500:	d112      	bne.n	2528 <fill_slave_tx_fifo+0x6c>
              (this_spi->resp_buff_tx_idx < this_spi->resp_buff_size))
    2502:	69c3      	ldr	r3, [r0, #28]
    2504:	6981      	ldr	r1, [r0, #24]
    2506:	428b      	cmp	r3, r1
    2508:	d20e      	bcs.n	2528 <fill_slave_tx_fifo+0x6c>
        {
            /* Sending from command response buffer */
            this_spi->hw_reg->TX_DATA = this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx];
    250a:	6941      	ldr	r1, [r0, #20]
    250c:	5ccb      	ldrb	r3, [r1, r3]
    250e:	6153      	str	r3, [r2, #20]
            ++this_spi->resp_buff_tx_idx;
    2510:	69c3      	ldr	r3, [r0, #28]
    2512:	f103 0301 	add.w	r3, r3, #1
    2516:	61c3      	str	r3, [r0, #28]
        ++this_spi->slave_tx_idx;
    }

    if(this_spi->slave_tx_idx >= this_spi->slave_tx_size)
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
    2518:	6802      	ldr	r2, [r0, #0]
    251a:	6891      	ldr	r1, [r2, #8]
    251c:	f411 7f80 	tst.w	r1, #256	; 0x100
    2520:	d102      	bne.n	2528 <fill_slave_tx_fifo+0x6c>
              (this_spi->resp_buff_tx_idx < this_spi->resp_buff_size))
    2522:	6981      	ldr	r1, [r0, #24]
    2524:	4299      	cmp	r1, r3
    2526:	d8f0      	bhi.n	250a <fill_slave_tx_fifo+0x4e>
            this_spi->hw_reg->TX_DATA = this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx];
            ++this_spi->resp_buff_tx_idx;
        }
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
    2528:	6a43      	ldr	r3, [r0, #36]	; 0x24
    252a:	b1cb      	cbz	r3, 2560 <fill_slave_tx_fifo+0xa4>
    252c:	6902      	ldr	r2, [r0, #16]
    252e:	68c3      	ldr	r3, [r0, #12]
    2530:	429a      	cmp	r2, r3
    2532:	d315      	bcc.n	2560 <fill_slave_tx_fifo+0xa4>
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
    2534:	69c2      	ldr	r2, [r0, #28]
    2536:	6983      	ldr	r3, [r0, #24]
    2538:	429a      	cmp	r2, r3
    253a:	d311      	bcc.n	2560 <fill_slave_tx_fifo+0xa4>
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
    253c:	6803      	ldr	r3, [r0, #0]
    253e:	689a      	ldr	r2, [r3, #8]
    2540:	f412 7f80 	tst.w	r2, #256	; 0x100
    2544:	d10c      	bne.n	2560 <fill_slave_tx_fifo+0xa4>
    2546:	f04f 0200 	mov.w	r2, #0
              (guard < BIG_FIFO_SIZE))
        {
            /* Nothing left so pad with 0s for consistency */
            this_spi->hw_reg->TX_DATA = 0x00u;
    254a:	4614      	mov	r4, r2
    254c:	615c      	str	r4, [r3, #20]
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
    254e:	6803      	ldr	r3, [r0, #0]
    2550:	6899      	ldr	r1, [r3, #8]
    2552:	f411 7f80 	tst.w	r1, #256	; 0x100
    2556:	d103      	bne.n	2560 <fill_slave_tx_fifo+0xa4>
             * We use the guard count to cover the unlikely event that we are
             * never seeing the TX FIFO full because the data is being pulled
             * out as fast as we can stuff it in. In this event we never spend
             * more than a full FIFOs worth of time spinning here.
             */
            guard++;
    2558:	f102 0201 	add.w	r2, r2, #1
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
    255c:	2a20      	cmp	r2, #32
    255e:	d1f5      	bne.n	254c <fill_slave_tx_fifo+0x90>
             */
            guard++;
        }
    }

}
    2560:	bc10      	pop	{r4}
    2562:	4770      	bx	lr

00002564 <read_slave_rx_fifo>:
 */
static void read_slave_rx_fifo
(
    mss_spi_instance_t * this_spi
)
{
    2564:	b510      	push	{r4, lr}
    2566:	b082      	sub	sp, #8
    2568:	4604      	mov	r4, r0
    volatile uint32_t rx_frame;
    
    if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
    256a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
    256e:	2b02      	cmp	r3, #2
    2570:	d10c      	bne.n	258c <read_slave_rx_fifo+0x28>
    2572:	e005      	b.n	2580 <read_slave_rx_fifo+0x1c>
    {
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
        {
            /* Single frame handling mode. */
            rx_frame = this_spi->hw_reg->RX_DATA;
    2574:	6913      	ldr	r3, [r2, #16]
    2576:	9301      	str	r3, [sp, #4]
            if(0u != this_spi->frame_rx_handler)
    2578:	6f63      	ldr	r3, [r4, #116]	; 0x74
    257a:	b113      	cbz	r3, 2582 <read_slave_rx_fifo+0x1e>
            {
                this_spi->frame_rx_handler( rx_frame );
    257c:	9801      	ldr	r0, [sp, #4]
    257e:	4798      	blx	r3
{
    volatile uint32_t rx_frame;
    
    if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
    {
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
    2580:	6822      	ldr	r2, [r4, #0]
    2582:	6893      	ldr	r3, [r2, #8]
    2584:	f013 0f40 	tst.w	r3, #64	; 0x40
    2588:	d0f4      	beq.n	2574 <read_slave_rx_fifo+0x10>
    258a:	e023      	b.n	25d4 <read_slave_rx_fifo+0x70>
            {
                this_spi->frame_rx_handler( rx_frame );
            }
        }
    }
    else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
    258c:	2b01      	cmp	r3, #1
        }
    }
    else
    {
        /* Should not happen... Just purge FIFO */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
    258e:	6803      	ldr	r3, [r0, #0]
    2590:	689a      	ldr	r2, [r3, #8]
            {
                this_spi->frame_rx_handler( rx_frame );
            }
        }
    }
    else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
    2592:	d003      	beq.n	259c <read_slave_rx_fifo+0x38>
        }
    }
    else
    {
        /* Should not happen... Just purge FIFO */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
    2594:	f012 0f40 	tst.w	r2, #64	; 0x40
    2598:	d016      	beq.n	25c8 <read_slave_rx_fifo+0x64>
    259a:	e01b      	b.n	25d4 <read_slave_rx_fifo+0x70>
        }
    }
    else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
    {
        /* Block handling mode. */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
    259c:	f012 0f40 	tst.w	r2, #64	; 0x40
    25a0:	d118      	bne.n	25d4 <read_slave_rx_fifo+0x70>
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
    25a2:	691b      	ldr	r3, [r3, #16]
    25a4:	9301      	str	r3, [sp, #4]
            if(this_spi->slave_rx_idx < this_spi->slave_rx_size)
    25a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    25a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    25aa:	4293      	cmp	r3, r2
            {
                this_spi->slave_rx_buffer[this_spi->slave_rx_idx] = (uint8_t)rx_frame;
    25ac:	bf3e      	ittt	cc
    25ae:	9901      	ldrcc	r1, [sp, #4]
    25b0:	6aa2      	ldrcc	r2, [r4, #40]	; 0x28
    25b2:	54d1      	strbcc	r1, [r2, r3]
            }

            ++this_spi->slave_rx_idx;
    25b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    25b6:	f103 0301 	add.w	r3, r3, #1
    25ba:	6323      	str	r3, [r4, #48]	; 0x30
        }
    }
    else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
    {
        /* Block handling mode. */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
    25bc:	6823      	ldr	r3, [r4, #0]
    25be:	689a      	ldr	r2, [r3, #8]
    25c0:	f012 0f40 	tst.w	r2, #64	; 0x40
    25c4:	d0ed      	beq.n	25a2 <read_slave_rx_fifo+0x3e>
    25c6:	e005      	b.n	25d4 <read_slave_rx_fifo+0x70>
    else
    {
        /* Should not happen... Just purge FIFO */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
    25c8:	691a      	ldr	r2, [r3, #16]
    25ca:	9201      	str	r2, [sp, #4]
        }
    }
    else
    {
        /* Should not happen... Just purge FIFO */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
    25cc:	689a      	ldr	r2, [r3, #8]
    25ce:	f012 0f40 	tst.w	r2, #64	; 0x40
    25d2:	d0f9      	beq.n	25c8 <read_slave_rx_fifo+0x64>
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
        }
    }
}
    25d4:	b002      	add	sp, #8
    25d6:	bd10      	pop	{r4, pc}

000025d8 <mss_spi_isr>:
 */
static void mss_spi_isr
(
    mss_spi_instance_t * this_spi
)
{    
    25d8:	b570      	push	{r4, r5, r6, lr}
    25da:	b082      	sub	sp, #8
    25dc:	4604      	mov	r4, r0
    volatile uint32_t rx_frame;
    __I  uint32_t *this_mis = &this_spi->hw_reg->MIS;
    25de:	6805      	ldr	r5, [r0, #0]

    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
    25e0:	f240 1344 	movw	r3, #324	; 0x144
    25e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25e8:	4298      	cmp	r0, r3
    25ea:	d006      	beq.n	25fa <mss_spi_isr+0x22>
    25ec:	f240 03c0 	movw	r3, #192	; 0xc0
    25f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25f4:	4298      	cmp	r0, r3
    25f6:	d000      	beq.n	25fa <mss_spi_isr+0x22>
    25f8:	be00      	bkpt	0x0000
  
    if(0u != (*this_mis & RXDONE_IRQ_MASK))
    25fa:	6a2b      	ldr	r3, [r5, #32]
    25fc:	f013 0f02 	tst.w	r3, #2
    2600:	d038      	beq.n	2674 <mss_spi_isr+0x9c>
    {
        if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
    2602:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
    2606:	2b02      	cmp	r3, #2
    2608:	d10c      	bne.n	2624 <mss_spi_isr+0x4c>
    260a:	e005      	b.n	2618 <mss_spi_isr+0x40>
        {
            /* Single frame handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
    260c:	6913      	ldr	r3, [r2, #16]
    260e:	9301      	str	r3, [sp, #4]
                if(0u != this_spi->frame_rx_handler)
    2610:	6f63      	ldr	r3, [r4, #116]	; 0x74
    2612:	b113      	cbz	r3, 261a <mss_spi_isr+0x42>
                {
                    this_spi->frame_rx_handler( rx_frame );
    2614:	9801      	ldr	r0, [sp, #4]
    2616:	4798      	blx	r3
    if(0u != (*this_mis & RXDONE_IRQ_MASK))
    {
        if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
        {
            /* Single frame handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
    2618:	6822      	ldr	r2, [r4, #0]
    261a:	6893      	ldr	r3, [r2, #8]
    261c:	f013 0f40 	tst.w	r3, #64	; 0x40
    2620:	d0f4      	beq.n	260c <mss_spi_isr+0x34>
    2622:	e023      	b.n	266c <mss_spi_isr+0x94>
                {
                    this_spi->frame_rx_handler( rx_frame );
                }
            }
        }
        else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
    2624:	2b01      	cmp	r3, #1
            }
        }
        else
        {
            /* No slave handling in place so just purge FIFO */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
    2626:	68ab      	ldr	r3, [r5, #8]
                {
                    this_spi->frame_rx_handler( rx_frame );
                }
            }
        }
        else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
    2628:	d003      	beq.n	2632 <mss_spi_isr+0x5a>
            }
        }
        else
        {
            /* No slave handling in place so just purge FIFO */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
    262a:	f013 0f40 	tst.w	r3, #64	; 0x40
    262e:	d017      	beq.n	2660 <mss_spi_isr+0x88>
    2630:	e01c      	b.n	266c <mss_spi_isr+0x94>
            }
        }
        else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
        {
            /* Block handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
    2632:	f013 0f40 	tst.w	r3, #64	; 0x40
    2636:	d119      	bne.n	266c <mss_spi_isr+0x94>
    2638:	462b      	mov	r3, r5
            {
                rx_frame = this_spi->hw_reg->RX_DATA;                /* Read from FIFO irrespective */
    263a:	691b      	ldr	r3, [r3, #16]
    263c:	9301      	str	r3, [sp, #4]
                if(this_spi->slave_rx_idx < this_spi->slave_rx_size) /* Write to array if required */
    263e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    2640:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2642:	4293      	cmp	r3, r2
                {
                    this_spi->slave_rx_buffer[this_spi->slave_rx_idx] = (uint8_t)rx_frame;
    2644:	bf3e      	ittt	cc
    2646:	9901      	ldrcc	r1, [sp, #4]
    2648:	6aa2      	ldrcc	r2, [r4, #40]	; 0x28
    264a:	54d1      	strbcc	r1, [r2, r3]
                }

                ++this_spi->slave_rx_idx;            
    264c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    264e:	f103 0301 	add.w	r3, r3, #1
    2652:	6323      	str	r3, [r4, #48]	; 0x30
            }
        }
        else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
        {
            /* Block handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
    2654:	6823      	ldr	r3, [r4, #0]
    2656:	689a      	ldr	r2, [r3, #8]
    2658:	f012 0f40 	tst.w	r2, #64	; 0x40
    265c:	d0ed      	beq.n	263a <mss_spi_isr+0x62>
    265e:	e005      	b.n	266c <mss_spi_isr+0x94>
        else
        {
            /* No slave handling in place so just purge FIFO */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
    2660:	692b      	ldr	r3, [r5, #16]
    2662:	9301      	str	r3, [sp, #4]
            }
        }
        else
        {
            /* No slave handling in place so just purge FIFO */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
    2664:	68ab      	ldr	r3, [r5, #8]
    2666:	f013 0f40 	tst.w	r3, #64	; 0x40
    266a:	d0f9      	beq.n	2660 <mss_spi_isr+0x88>
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
            }
        }

        this_spi->hw_reg->INT_CLEAR = RXDONE_IRQ_MASK;
    266c:	6823      	ldr	r3, [r4, #0]
    266e:	f04f 0202 	mov.w	r2, #2
    2672:	60da      	str	r2, [r3, #12]
    }

   /* Handle transmit. */
    if(0u != (*this_mis & TXDONE_IRQ_MASK))
    2674:	6a2b      	ldr	r3, [r5, #32]
    2676:	f013 0f01 	tst.w	r3, #1
    267a:	d00e      	beq.n	269a <mss_spi_isr+0xc2>
    {
        if( MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode )
    267c:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
    2680:	2b02      	cmp	r3, #2
    2682:	d103      	bne.n	268c <mss_spi_isr+0xb4>
        {
           /* Reload slave tx frame into Tx data register. */
            this_spi->hw_reg->TX_DATA = this_spi->slave_tx_frame;
    2684:	6823      	ldr	r3, [r4, #0]
    2686:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    2688:	615a      	str	r2, [r3, #20]
    268a:	e002      	b.n	2692 <mss_spi_isr+0xba>
        }
        else /* Must be block mode so load FIFO to the max */
        {
            fill_slave_tx_fifo(this_spi);
    268c:	4620      	mov	r0, r4
    268e:	f7ff ff15 	bl	24bc <fill_slave_tx_fifo>
        }

        this_spi->hw_reg->INT_CLEAR = TXDONE_IRQ_MASK;
    2692:	6823      	ldr	r3, [r4, #0]
    2694:	f04f 0201 	mov.w	r2, #1
    2698:	60da      	str	r2, [r3, #12]
    }
    
    /* Handle command interrupt. */
    if(0u != (*this_mis & CMD_IRQ_MASK))
    269a:	6a2b      	ldr	r3, [r5, #32]
    269c:	f013 0f10 	tst.w	r3, #16
    26a0:	d016      	beq.n	26d0 <mss_spi_isr+0xf8>
    {
        read_slave_rx_fifo(this_spi);
    26a2:	4620      	mov	r0, r4
    26a4:	f7ff ff5e 	bl	2564 <read_slave_rx_fifo>
        
        /*
         * Call the command handler if one exists.
         */
        if(0u != this_spi->cmd_handler)
    26a8:	6a23      	ldr	r3, [r4, #32]
    26aa:	b12b      	cbz	r3, 26b8 <mss_spi_isr+0xe0>
        {
            (*this_spi->cmd_handler)(this_spi->slave_rx_buffer, this_spi->slave_rx_idx);
    26ac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    26ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
    26b0:	4798      	blx	r3
            fill_slave_tx_fifo(this_spi);
    26b2:	4620      	mov	r0, r4
    26b4:	f7ff ff02 	bl	24bc <fill_slave_tx_fifo>
        }
        /* Set cmd_done to indicate it is now safe to 0 fill TX FIFO */
        this_spi->cmd_done = 1u;
    26b8:	f04f 0301 	mov.w	r3, #1
    26bc:	6263      	str	r3, [r4, #36]	; 0x24
        /* Disable command interrupt until slave select becomes de-asserted to avoid retriggering. */
        this_spi->hw_reg->CONTROL2 &= ~(uint32_t)C2_ENABLE_CMD_IRQ_MASK;
    26be:	6823      	ldr	r3, [r4, #0]
    26c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    26c2:	f022 0210 	bic.w	r2, r2, #16
    26c6:	629a      	str	r2, [r3, #40]	; 0x28
        this_spi->hw_reg->INT_CLEAR = CMD_IRQ_MASK;
    26c8:	6823      	ldr	r3, [r4, #0]
    26ca:	f04f 0210 	mov.w	r2, #16
    26ce:	60da      	str	r2, [r3, #12]
    }

    if(0u != (*this_mis & RXOVFLOW_IRQ_MASK))
    26d0:	6a2b      	ldr	r3, [r5, #32]
    26d2:	f013 0f04 	tst.w	r3, #4
    26d6:	d00b      	beq.n	26f0 <mss_spi_isr+0x118>
    {
        /*
         * Receive overflow, not a lot we can do for this. Reset the receive
         *  FIFO, clear the interrupt and hope it doesn't happen again...
         */
        this_spi->hw_reg->COMMAND |= RX_FIFO_RESET_MASK;
    26d8:	6823      	ldr	r3, [r4, #0]
    26da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26dc:	f042 0204 	orr.w	r2, r2, #4
    26e0:	62da      	str	r2, [r3, #44]	; 0x2c
        recover_from_rx_overflow(this_spi);
    26e2:	4620      	mov	r0, r4
    26e4:	f7ff fd02 	bl	20ec <recover_from_rx_overflow>
        this_spi->hw_reg->INT_CLEAR = RXOVFLOW_IRQ_MASK;
    26e8:	6823      	ldr	r3, [r4, #0]
    26ea:	f04f 0204 	mov.w	r2, #4
    26ee:	60da      	str	r2, [r3, #12]
     * slave TX FIFO data setup (if there is one).
     * In block mode this will probably not be very successful as we will
     * be out of synch with the master but the reset on SSEND will hopefully
     * take care of that for the next transfer.
     */
    if(0u != (*this_mis & TXURUN_IRQ_MASK))
    26f0:	6a2b      	ldr	r3, [r5, #32]
    26f2:	f013 0f08 	tst.w	r3, #8
    26f6:	d023      	beq.n	2740 <mss_spi_isr+0x168>
    {
        this_spi->hw_reg->COMMAND |= TX_FIFO_RESET_MASK;
    26f8:	6823      	ldr	r3, [r4, #0]
    26fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26fc:	f042 0208 	orr.w	r2, r2, #8
    2700:	62da      	str	r2, [r3, #44]	; 0x2c
        if( MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode )
    2702:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
    2706:	2b02      	cmp	r3, #2
    2708:	d10e      	bne.n	2728 <mss_spi_isr+0x150>
        {
            this_spi->hw_reg->CONTROL = (this_spi->hw_reg->CONTROL & ~TXRXDFCOUNT_MASK)
    270a:	6822      	ldr	r2, [r4, #0]
    270c:	6811      	ldr	r1, [r2, #0]
    270e:	f240 03ff 	movw	r3, #255	; 0xff
    2712:	f6cf 7300 	movt	r3, #65280	; 0xff00
    2716:	ea01 0303 	and.w	r3, r1, r3
    271a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    271e:	6013      	str	r3, [r2, #0]
                                        | ((uint32_t)1u << TXRXDFCOUNT_SHIFT);
           /* Reload slave tx frame into Tx data register. */
            this_spi->hw_reg->TX_DATA = this_spi->slave_tx_frame;
    2720:	6823      	ldr	r3, [r4, #0]
    2722:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    2724:	615a      	str	r2, [r3, #20]
    2726:	e007      	b.n	2738 <mss_spi_isr+0x160>
        }
        else if( MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode )
    2728:	2b01      	cmp	r3, #1
    272a:	d105      	bne.n	2738 <mss_spi_isr+0x160>
        {
            /* Block mode so reload FIFO to the max */
            this_spi->slave_tx_idx = 0u;
    272c:	f04f 0300 	mov.w	r3, #0
    2730:	6123      	str	r3, [r4, #16]
            fill_slave_tx_fifo(this_spi);
    2732:	4620      	mov	r0, r4
    2734:	f7ff fec2 	bl	24bc <fill_slave_tx_fifo>
        else
        {
            /* Not frame or block mode? Can't do anything here... */
        }

        this_spi->hw_reg->INT_CLEAR = TXURUN_IRQ_MASK;
    2738:	6823      	ldr	r3, [r4, #0]
    273a:	f04f 0208 	mov.w	r2, #8
    273e:	60da      	str	r2, [r3, #12]
    /*
     * Handle slave select becoming de-asserted. Only enables if
     * we are operating in block mode, in frame mode we do everything
     * in the receive and transmit interrupt handlers.
     */
    if(0u != (*this_mis & SSEND_IRQ_MASK))
    2740:	6a2b      	ldr	r3, [r5, #32]
    2742:	f013 0f20 	tst.w	r3, #32
    2746:	d029      	beq.n	279c <mss_spi_isr+0x1c4>
    {
        uint32_t rx_size;
        
        read_slave_rx_fifo(this_spi);
    2748:	4620      	mov	r0, r4
    274a:	f7ff ff0b 	bl	2564 <read_slave_rx_fifo>
        rx_size = this_spi->slave_rx_idx;
    274e:	6b26      	ldr	r6, [r4, #48]	; 0x30
        /*
         * Re-enable command interrupt if required and clear all the response
         * buffer state in readiness for next response. This must be done
         * before reloading the TX FIFO.
         */
        if(0u != this_spi->cmd_handler)
    2750:	6a23      	ldr	r3, [r4, #32]
    2752:	b173      	cbz	r3, 2772 <mss_spi_isr+0x19a>
        {
            this_spi->cmd_done = 0u;
    2754:	f04f 0300 	mov.w	r3, #0
    2758:	6263      	str	r3, [r4, #36]	; 0x24
            this_spi->resp_tx_buffer = 0u;
    275a:	6163      	str	r3, [r4, #20]
            this_spi->resp_buff_size = 0u;
    275c:	61a3      	str	r3, [r4, #24]
            this_spi->resp_buff_tx_idx = 0u;
    275e:	61e3      	str	r3, [r4, #28]
            this_spi->hw_reg->INT_CLEAR = CMD_IRQ_MASK;
    2760:	6823      	ldr	r3, [r4, #0]
    2762:	f04f 0210 	mov.w	r2, #16
    2766:	60da      	str	r2, [r3, #12]
            this_spi->hw_reg->CONTROL2 |= C2_ENABLE_CMD_IRQ_MASK;
    2768:	6823      	ldr	r3, [r4, #0]
    276a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    276c:	f042 0210 	orr.w	r2, r2, #16
    2770:	629a      	str	r2, [r3, #40]	; 0x28
        /* 
         * Reset the transmit index to 0 to restart transmit at the start of the
         * transmit buffer in the next transaction. This also requires flushing
         * the Tx FIFO and refilling it with the start of Tx data buffer.
         */
        this_spi->slave_tx_idx = 0u;
    2772:	f04f 0500 	mov.w	r5, #0
    2776:	6125      	str	r5, [r4, #16]
        this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
    2778:	6823      	ldr	r3, [r4, #0]
    277a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    277c:	f042 020c 	orr.w	r2, r2, #12
    2780:	62da      	str	r2, [r3, #44]	; 0x2c
        fill_slave_tx_fifo(this_spi);
    2782:	4620      	mov	r0, r4
    2784:	f7ff fe9a 	bl	24bc <fill_slave_tx_fifo>
        
        /* Prepare to receive next packet. */
        this_spi->slave_rx_idx = 0u;
    2788:	6325      	str	r5, [r4, #48]	; 0x30
        /*
         * Call the receive handler if one exists.
         */
        if(0u != this_spi->block_rx_handler)
    278a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    278c:	b113      	cbz	r3, 2794 <mss_spi_isr+0x1bc>
        {
            (*this_spi->block_rx_handler)(this_spi->slave_rx_buffer, rx_size);
    278e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    2790:	4631      	mov	r1, r6
    2792:	4798      	blx	r3
        }
        
        this_spi->hw_reg->INT_CLEAR = SSEND_IRQ_MASK;
    2794:	6823      	ldr	r3, [r4, #0]
    2796:	f04f 0220 	mov.w	r2, #32
    279a:	60da      	str	r2, [r3, #12]
    }
}
    279c:	b002      	add	sp, #8
    279e:	bd70      	pop	{r4, r5, r6, pc}

000027a0 <SPI0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void SPI0_IRQHandler(void)
#else
void SPI0_IRQHandler( void )
#endif
{
    27a0:	4668      	mov	r0, sp
    27a2:	f020 0107 	bic.w	r1, r0, #7
    27a6:	468d      	mov	sp, r1
    27a8:	b501      	push	{r0, lr}
    mss_spi_isr(&g_mss_spi0);
    27aa:	f240 1044 	movw	r0, #324	; 0x144
    27ae:	f2c2 0000 	movt	r0, #8192	; 0x2000
    27b2:	f7ff ff11 	bl	25d8 <mss_spi_isr>
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    27b6:	f24e 1300 	movw	r3, #57600	; 0xe100
    27ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    27be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    27c2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC_ClearPendingIRQ(SPI0_IRQn);
}
    27c6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    27ca:	4685      	mov	sp, r0
    27cc:	4770      	bx	lr
    27ce:	bf00      	nop

000027d0 <SPI1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void SPI1_IRQHandler(void)
#else
void SPI1_IRQHandler(void)
#endif
{
    27d0:	4668      	mov	r0, sp
    27d2:	f020 0107 	bic.w	r1, r0, #7
    27d6:	468d      	mov	sp, r1
    27d8:	b501      	push	{r0, lr}
    mss_spi_isr(&g_mss_spi1);
    27da:	f240 00c0 	movw	r0, #192	; 0xc0
    27de:	f2c2 0000 	movt	r0, #8192	; 0x2000
    27e2:	f7ff fef9 	bl	25d8 <mss_spi_isr>
    27e6:	f24e 1300 	movw	r3, #57600	; 0xe100
    27ea:	f2ce 0300 	movt	r3, #57344	; 0xe000
    27ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    27f2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC_ClearPendingIRQ(SPI1_IRQn);
}
    27f6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    27fa:	4685      	mov	sp, r0
    27fc:	4770      	bx	lr
    27fe:	bf00      	nop

00002800 <MSS_SPI_init>:
 */
void MSS_SPI_init
(
    mss_spi_instance_t * this_spi
)
{
    2800:	b538      	push	{r3, r4, r5, lr}
    2802:	4604      	mov	r4, r0
    uint16_t slave;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
    2804:	f240 1344 	movw	r3, #324	; 0x144
    2808:	f2c2 0300 	movt	r3, #8192	; 0x2000
    280c:	4298      	cmp	r0, r3
    280e:	d006      	beq.n	281e <MSS_SPI_init+0x1e>
    2810:	f240 03c0 	movw	r3, #192	; 0xc0
    2814:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2818:	4298      	cmp	r0, r3
    281a:	d000      	beq.n	281e <MSS_SPI_init+0x1e>
    281c:	be00      	bkpt	0x0000
     * Initialize SPI driver instance data. Relies on the majority
     * of data requiring 0 for initial state so we just need to fill
     * with 0s and finish off with a small number of non zero values.
     */
    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
    281e:	88a3      	ldrh	r3, [r4, #4]
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    2820:	b21a      	sxth	r2, r3
    2822:	ea4f 1252 	mov.w	r2, r2, lsr #5
    2826:	f003 031f 	and.w	r3, r3, #31
    282a:	f04f 0501 	mov.w	r5, #1
    282e:	fa05 f103 	lsl.w	r1, r5, r3
    2832:	f24e 1300 	movw	r3, #57600	; 0xe100
    2836:	f2ce 0300 	movt	r3, #57344	; 0xe000
    283a:	f102 0220 	add.w	r2, r2, #32
    283e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    memset(this_spi, 0, sizeof(mss_spi_instance_t));
    2842:	4620      	mov	r0, r4
    2844:	f04f 0100 	mov.w	r1, #0
    2848:	f04f 0284 	mov.w	r2, #132	; 0x84
    284c:	f001 fd84 	bl	4358 <memset>
    
    this_spi->cmd_done = 1u;
    2850:	6265      	str	r5, [r4, #36]	; 0x24
    2852:	f04f 0300 	mov.w	r3, #0

    for(slave = 0u; slave < (uint16_t)MSS_SPI_MAX_NB_OF_SLAVES; ++slave)
    {
        this_spi->slaves_cfg[slave].ctrl_reg = NOT_CONFIGURED;
    2856:	f04f 31ff 	mov.w	r1, #4294967295
    285a:	eb04 0203 	add.w	r2, r4, r3
    285e:	6351      	str	r1, [r2, #52]	; 0x34
    2860:	f103 0308 	add.w	r3, r3, #8

    memset(this_spi, 0, sizeof(mss_spi_instance_t));
    
    this_spi->cmd_done = 1u;

    for(slave = 0u; slave < (uint16_t)MSS_SPI_MAX_NB_OF_SLAVES; ++slave)
    2864:	2b40      	cmp	r3, #64	; 0x40
    2866:	d1f8      	bne.n	285a <MSS_SPI_init+0x5a>
    {
        this_spi->slaves_cfg[slave].ctrl_reg = NOT_CONFIGURED;
    }

    if(this_spi == &g_mss_spi0)
    2868:	f240 1344 	movw	r3, #324	; 0x144
    286c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2870:	429c      	cmp	r4, r3
    2872:	d120      	bne.n	28b6 <MSS_SPI_init+0xb6>
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI0_BASE);
    2874:	f240 1344 	movw	r3, #324	; 0x144
    2878:	f2c2 0300 	movt	r3, #8192	; 0x2000
    287c:	f241 0200 	movw	r2, #4096	; 0x1000
    2880:	f2c4 0200 	movt	r2, #16384	; 0x4000
    2884:	601a      	str	r2, [r3, #0]
        this_spi->irqn = SPI0_IRQn;
    2886:	f04f 020c 	mov.w	r2, #12
    288a:	809a      	strh	r2, [r3, #4]

        /* reset SPI0 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI0_SOFTRESET_MASK;
    288c:	f242 0300 	movw	r3, #8192	; 0x2000
    2890:	f2ce 0304 	movt	r3, #57348	; 0xe004
    2894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2896:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    289a:	631a      	str	r2, [r3, #48]	; 0x30
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    289c:	f24e 1200 	movw	r2, #57600	; 0xe100
    28a0:	f2ce 0200 	movt	r2, #57344	; 0xe000
    28a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    28a8:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
        /* Clear any previously pended SPI0 interrupt */
        NVIC_ClearPendingIRQ(SPI0_IRQn);
        /* Take SPI0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI0_SOFTRESET_MASK;
    28ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    28ae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    28b2:	631a      	str	r2, [r3, #48]	; 0x30
    28b4:	e01b      	b.n	28ee <MSS_SPI_init+0xee>
    }
    else
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI1_BASE);
    28b6:	f241 0300 	movw	r3, #4096	; 0x1000
    28ba:	f2c4 0301 	movt	r3, #16385	; 0x4001
    28be:	6023      	str	r3, [r4, #0]
        this_spi->irqn = SPI1_IRQn;
    28c0:	f04f 030d 	mov.w	r3, #13
    28c4:	80a3      	strh	r3, [r4, #4]
        
        /* reset SPI1 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI1_SOFTRESET_MASK;
    28c6:	f242 0300 	movw	r3, #8192	; 0x2000
    28ca:	f2ce 0304 	movt	r3, #57348	; 0xe004
    28ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    28d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    28d4:	631a      	str	r2, [r3, #48]	; 0x30
    28d6:	f24e 1200 	movw	r2, #57600	; 0xe100
    28da:	f2ce 0200 	movt	r2, #57344	; 0xe000
    28de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    28e2:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
        /* Clear any previously pended SPI1 interrupt */
        NVIC_ClearPendingIRQ(SPI1_IRQn);
        /* Take SPI1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI1_SOFTRESET_MASK;
    28e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    28e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    28ec:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* De-assert reset bit. */
    this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
    28ee:	6823      	ldr	r3, [r4, #0]
    28f0:	681a      	ldr	r2, [r3, #0]
    28f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
    28f6:	601a      	str	r2, [r3, #0]
}
    28f8:	bd38      	pop	{r3, r4, r5, pc}
    28fa:	bf00      	nop

000028fc <MSS_I2C_wait_complete>:
mss_i2c_status_t MSS_I2C_wait_complete
(
    mss_i2c_instance_t * this_i2c,
    uint32_t timeout_ms
)
{
    28fc:	4603      	mov	r3, r0
	mss_i2c_status_t i2c_status;
    
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
    28fe:	f240 12c8 	movw	r2, #456	; 0x1c8
    2902:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2906:	4290      	cmp	r0, r2
    2908:	d006      	beq.n	2918 <MSS_I2C_wait_complete+0x1c>
    290a:	f240 223c 	movw	r2, #572	; 0x23c
    290e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2912:	4290      	cmp	r0, r2
    2914:	d000      	beq.n	2918 <MSS_I2C_wait_complete+0x1c>
    2916:	be00      	bkpt	0x0000
    
    this_i2c->master_timeout_ms = timeout_ms;
    2918:	6419      	str	r1, [r3, #64]	; 0x40

    /* Run the loop until state returns I2C_FAILED  or I2C_SUCESS*/
    do {
        i2c_status = this_i2c->master_status;
    291a:	f893 003c 	ldrb.w	r0, [r3, #60]	; 0x3c
    } while(MSS_I2C_IN_PROGRESS == i2c_status);
    291e:	2801      	cmp	r0, #1
    2920:	d0fb      	beq.n	291a <MSS_I2C_wait_complete+0x1e>

    return i2c_status;
}
    2922:	4770      	bx	lr

00002924 <enable_slave_if_required>:
static void enable_slave_if_required
(
    mss_i2c_instance_t * this_i2c
)
{
    if( this_i2c->is_slave_enabled )
    2924:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
    2928:	b11b      	cbz	r3, 2932 <enable_slave_if_required+0xe>
    {
        this_i2c->hw_reg_bit->CTRL_AA = 1u;
    292a:	6983      	ldr	r3, [r0, #24]
    292c:	f04f 0201 	mov.w	r2, #1
    2930:	609a      	str	r2, [r3, #8]
    2932:	4770      	bx	lr

00002934 <mss_i2c_isr>:
 */
static void mss_i2c_isr
(
    mss_i2c_instance_t * this_i2c
)
{
    2934:	b530      	push	{r4, r5, lr}
    2936:	b083      	sub	sp, #12
    2938:	4604      	mov	r4, r0
    volatile uint8_t status;
    uint8_t data;
    uint8_t hold_bus;
    uint8_t clear_irq = 1u;
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
    293a:	f240 13c8 	movw	r3, #456	; 0x1c8
    293e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2942:	4298      	cmp	r0, r3
    2944:	d006      	beq.n	2954 <mss_i2c_isr+0x20>
    2946:	f240 233c 	movw	r3, #572	; 0x23c
    294a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    294e:	4298      	cmp	r0, r3
    2950:	d000      	beq.n	2954 <mss_i2c_isr+0x20>
    2952:	be00      	bkpt	0x0000

    status = this_i2c->hw_reg->STATUS;
    2954:	6962      	ldr	r2, [r4, #20]
    2956:	7913      	ldrb	r3, [r2, #4]
    2958:	f88d 3007 	strb.w	r3, [sp, #7]

    switch( status )
    295c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2960:	f1a3 0308 	sub.w	r3, r3, #8
    2964:	2bd0      	cmp	r3, #208	; 0xd0
    2966:	f200 828e 	bhi.w	2e86 <mss_i2c_isr+0x552>
    296a:	e8df f013 	tbh	[pc, r3, lsl #1]
    296e:	00d1      	.short	0x00d1
    2970:	028c028c 	.word	0x028c028c
    2974:	028c028c 	.word	0x028c028c
    2978:	028c028c 	.word	0x028c028c
    297c:	00d1028c 	.word	0x00d1028c
    2980:	028c028c 	.word	0x028c028c
    2984:	028c028c 	.word	0x028c028c
    2988:	028c028c 	.word	0x028c028c
    298c:	0106028c 	.word	0x0106028c
    2990:	028c028c 	.word	0x028c028c
    2994:	028c028c 	.word	0x028c028c
    2998:	028c028c 	.word	0x028c028c
    299c:	00f7028c 	.word	0x00f7028c
    29a0:	028c028c 	.word	0x028c028c
    29a4:	028c028c 	.word	0x028c028c
    29a8:	028c028c 	.word	0x028c028c
    29ac:	0106028c 	.word	0x0106028c
    29b0:	028c028c 	.word	0x028c028c
    29b4:	028c028c 	.word	0x028c028c
    29b8:	028c028c 	.word	0x028c028c
    29bc:	0144028c 	.word	0x0144028c
    29c0:	028c028c 	.word	0x028c028c
    29c4:	028c028c 	.word	0x028c028c
    29c8:	028c028c 	.word	0x028c028c
    29cc:	00f2028c 	.word	0x00f2028c
    29d0:	028c028c 	.word	0x028c028c
    29d4:	028c028c 	.word	0x028c028c
    29d8:	028c028c 	.word	0x028c028c
    29dc:	0153028c 	.word	0x0153028c
    29e0:	028c028c 	.word	0x028c028c
    29e4:	028c028c 	.word	0x028c028c
    29e8:	028c028c 	.word	0x028c028c
    29ec:	016e028c 	.word	0x016e028c
    29f0:	028c028c 	.word	0x028c028c
    29f4:	028c028c 	.word	0x028c028c
    29f8:	028c028c 	.word	0x028c028c
    29fc:	017d028c 	.word	0x017d028c
    2a00:	028c028c 	.word	0x028c028c
    2a04:	028c028c 	.word	0x028c028c
    2a08:	028c028c 	.word	0x028c028c
    2a0c:	018f028c 	.word	0x018f028c
    2a10:	028c028c 	.word	0x028c028c
    2a14:	028c028c 	.word	0x028c028c
    2a18:	028c028c 	.word	0x028c028c
    2a1c:	01d0028c 	.word	0x01d0028c
    2a20:	028c028c 	.word	0x028c028c
    2a24:	028c028c 	.word	0x028c028c
    2a28:	028c028c 	.word	0x028c028c
    2a2c:	01cc028c 	.word	0x01cc028c
    2a30:	028c028c 	.word	0x028c028c
    2a34:	028c028c 	.word	0x028c028c
    2a38:	028c028c 	.word	0x028c028c
    2a3c:	01d0028c 	.word	0x01d0028c
    2a40:	028c028c 	.word	0x028c028c
    2a44:	028c028c 	.word	0x028c028c
    2a48:	028c028c 	.word	0x028c028c
    2a4c:	01cc028c 	.word	0x01cc028c
    2a50:	028c028c 	.word	0x028c028c
    2a54:	028c028c 	.word	0x028c028c
    2a58:	028c028c 	.word	0x028c028c
    2a5c:	01e6028c 	.word	0x01e6028c
    2a60:	028c028c 	.word	0x028c028c
    2a64:	028c028c 	.word	0x028c028c
    2a68:	028c028c 	.word	0x028c028c
    2a6c:	01bb028c 	.word	0x01bb028c
    2a70:	028c028c 	.word	0x028c028c
    2a74:	028c028c 	.word	0x028c028c
    2a78:	028c028c 	.word	0x028c028c
    2a7c:	01e6028c 	.word	0x01e6028c
    2a80:	028c028c 	.word	0x028c028c
    2a84:	028c028c 	.word	0x028c028c
    2a88:	028c028c 	.word	0x028c028c
    2a8c:	01bb028c 	.word	0x01bb028c
    2a90:	028c028c 	.word	0x028c028c
    2a94:	028c028c 	.word	0x028c028c
    2a98:	028c028c 	.word	0x028c028c
    2a9c:	01ff028c 	.word	0x01ff028c
    2aa0:	028c028c 	.word	0x028c028c
    2aa4:	028c028c 	.word	0x028c028c
    2aa8:	028c028c 	.word	0x028c028c
    2aac:	0248028c 	.word	0x0248028c
    2ab0:	028c028c 	.word	0x028c028c
    2ab4:	028c028c 	.word	0x028c028c
    2ab8:	028c028c 	.word	0x028c028c
    2abc:	0248028c 	.word	0x0248028c
    2ac0:	028c028c 	.word	0x028c028c
    2ac4:	028c028c 	.word	0x028c028c
    2ac8:	028c028c 	.word	0x028c028c
    2acc:	0248028c 	.word	0x0248028c
    2ad0:	028c028c 	.word	0x028c028c
    2ad4:	028c028c 	.word	0x028c028c
    2ad8:	028c028c 	.word	0x028c028c
    2adc:	027a028c 	.word	0x027a028c
    2ae0:	028c028c 	.word	0x028c028c
    2ae4:	028c028c 	.word	0x028c028c
    2ae8:	028c028c 	.word	0x028c028c
    2aec:	027a028c 	.word	0x027a028c
    2af0:	028c028c 	.word	0x028c028c
    2af4:	028c028c 	.word	0x028c028c
    2af8:	028c028c 	.word	0x028c028c
    2afc:	028c028c 	.word	0x028c028c
    2b00:	028c028c 	.word	0x028c028c
    2b04:	028c028c 	.word	0x028c028c
    2b08:	028c028c 	.word	0x028c028c
    2b0c:	0239028c 	.word	0x0239028c
    {
        /************** MASTER TRANSMITTER / RECEIVER *******************/
      
        case ST_START: /* start has been xmt'd */
        case ST_RESTART: /* repeated start has been xmt'd */
            this_i2c->hw_reg_bit->CTRL_STA = 0u;
    2b10:	69a3      	ldr	r3, [r4, #24]
    2b12:	f04f 0200 	mov.w	r2, #0
    2b16:	615a      	str	r2, [r3, #20]
            this_i2c->hw_reg->DATA = (uint8_t)this_i2c->target_addr;
    2b18:	6963      	ldr	r3, [r4, #20]
    2b1a:	7922      	ldrb	r2, [r4, #4]
    2b1c:	721a      	strb	r2, [r3, #8]
            this_i2c->hw_reg_bit->DATA_DIR = this_i2c->dir;
    2b1e:	69a3      	ldr	r3, [r4, #24]
    2b20:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2b22:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
            if ( this_i2c->dir == WRITE_DIR )
    2b26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2b28:	b90b      	cbnz	r3, 2b2e <mss_i2c_isr+0x1fa>
            {
                this_i2c->master_tx_idx = 0u;
    2b2a:	62a3      	str	r3, [r4, #40]	; 0x28
    2b2c:	e003      	b.n	2b36 <mss_i2c_isr+0x202>
            }
            else if ( this_i2c->dir == READ_DIR)
    2b2e:	2b01      	cmp	r3, #1
            {
                this_i2c->master_rx_idx = 0u;
    2b30:	bf04      	itt	eq
    2b32:	2300      	moveq	r3, #0
    2b34:	63a3      	streq	r3, [r4, #56]	; 0x38
            /*
             * Clear the pending transaction. This condition will be true if the slave 
             * has acquired the bus to carry out pending master transaction which 
             * it had received during its slave transmission or reception mode. 
             */
            if(this_i2c->is_transaction_pending)
    2b36:	f894 3071 	ldrb.w	r3, [r4, #113]	; 0x71
    2b3a:	b11b      	cbz	r3, 2b44 <mss_i2c_isr+0x210>
            {
                this_i2c->is_transaction_pending = 0u;
    2b3c:	f04f 0300 	mov.w	r3, #0
    2b40:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71

            /*
             * Make sure to update proper transaction after master START
             * or RESTART
             */
            if(this_i2c->transaction != this_i2c->pending_transaction)
    2b44:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
    2b48:	7a22      	ldrb	r2, [r4, #8]
    2b4a:	429a      	cmp	r2, r3
            {
                this_i2c->transaction = this_i2c->pending_transaction;
    2b4c:	bf18      	it	ne
    2b4e:	7223      	strbne	r3, [r4, #8]
    2b50:	e1af      	b.n	2eb2 <mss_i2c_isr+0x57e>
            }
            break;
            
        case ST_LOST_ARB:
            /* Set start bit.  Let's keep trying!  Don't give up! */
            this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
    2b52:	69a3      	ldr	r3, [r4, #24]
    2b54:	f04f 0201 	mov.w	r2, #1
    2b58:	615a      	str	r2, [r3, #20]
            break;
    2b5a:	e1aa      	b.n	2eb2 <mss_i2c_isr+0x57e>
            
        /******************* MASTER TRANSMITTER *************************/
        case ST_SLAW_NACK:
            /* SLA+W has been transmitted; not ACK has been received - let's stop. */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
    2b5c:	69a3      	ldr	r3, [r4, #24]
    2b5e:	f04f 0201 	mov.w	r2, #1
    2b62:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
    2b64:	f04f 0302 	mov.w	r3, #2
    2b68:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
            this_i2c->transaction = NO_TRANSACTION;
    2b6c:	f04f 0300 	mov.w	r3, #0
    2b70:	7223      	strb	r3, [r4, #8]
            enable_slave_if_required(this_i2c);
    2b72:	4620      	mov	r0, r4
    2b74:	f7ff fed6 	bl	2924 <enable_slave_if_required>
            break;
    2b78:	e19b      	b.n	2eb2 <mss_i2c_isr+0x57e>
            
        case ST_SLAW_ACK:
        case ST_TX_DATA_ACK:
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
    2b7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2b7c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    2b7e:	428b      	cmp	r3, r1
    2b80:	d206      	bcs.n	2b90 <mss_i2c_isr+0x25c>
            {    
                this_i2c->hw_reg->DATA = this_i2c->master_tx_buffer[this_i2c->master_tx_idx++];
    2b82:	6a21      	ldr	r1, [r4, #32]
    2b84:	5cc9      	ldrb	r1, [r1, r3]
    2b86:	7211      	strb	r1, [r2, #8]
    2b88:	f103 0301 	add.w	r3, r3, #1
    2b8c:	62a3      	str	r3, [r4, #40]	; 0x28
    2b8e:	e190      	b.n	2eb2 <mss_i2c_isr+0x57e>
            }
            else if ( this_i2c->transaction == MASTER_RANDOM_READ_TRANSACTION )
    2b90:	7a23      	ldrb	r3, [r4, #8]
    2b92:	2b03      	cmp	r3, #3
    2b94:	d105      	bne.n	2ba2 <mss_i2c_isr+0x26e>
            {
                /* We are finished sending the address offset part of a random read transaction.
                 * It is is time to send a restart in order to change direction. */
                 this_i2c->dir = READ_DIR;
    2b96:	f04f 0301 	mov.w	r3, #1
    2b9a:	62e3      	str	r3, [r4, #44]	; 0x2c
                 this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
    2b9c:	69a2      	ldr	r2, [r4, #24]
    2b9e:	6153      	str	r3, [r2, #20]
    2ba0:	e187      	b.n	2eb2 <mss_i2c_isr+0x57e>
            {
                /*
                 * Set the transaction back to NO_TRANSACTION to allow user to do further
                 * transaction
                 */
                this_i2c->transaction = NO_TRANSACTION;
    2ba2:	f04f 0300 	mov.w	r3, #0
    2ba6:	7223      	strb	r3, [r4, #8]
                hold_bus = this_i2c->options & MSS_I2C_HOLD_BUS;
    2ba8:	7c23      	ldrb	r3, [r4, #16]
    2baa:	f003 0301 	and.w	r3, r3, #1

                /* Store the information of current I2C bus status in the bus_status*/
                this_i2c->bus_status  = hold_bus;
    2bae:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
                if ( hold_bus == 0u )
    2bb2:	b93b      	cbnz	r3, 2bc4 <mss_i2c_isr+0x290>
                { 
                    this_i2c->hw_reg_bit->CTRL_STO = 0x01u; /*xmt stop condition */
    2bb4:	69a3      	ldr	r3, [r4, #24]
    2bb6:	f04f 0501 	mov.w	r5, #1
    2bba:	611d      	str	r5, [r3, #16]
                    enable_slave_if_required(this_i2c);
    2bbc:	4620      	mov	r0, r4
    2bbe:	f7ff feb1 	bl	2924 <enable_slave_if_required>
    2bc2:	e013      	b.n	2bec <mss_i2c_isr+0x2b8>
                }
                else
                {
                    NVIC_DisableIRQ( this_i2c->irqn );
    2bc4:	8a63      	ldrh	r3, [r4, #18]
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    2bc6:	b21a      	sxth	r2, r3
    2bc8:	ea4f 1252 	mov.w	r2, r2, lsr #5
    2bcc:	f003 031f 	and.w	r3, r3, #31
    2bd0:	f04f 0101 	mov.w	r1, #1
    2bd4:	fa01 f103 	lsl.w	r1, r1, r3
    2bd8:	f24e 1300 	movw	r3, #57600	; 0xe100
    2bdc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2be0:	f102 0220 	add.w	r2, r2, #32
    2be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    2be8:	f04f 0500 	mov.w	r5, #0
                    clear_irq = 0u;
                }
                this_i2c->master_status = MSS_I2C_SUCCESS;
    2bec:	f04f 0300 	mov.w	r3, #0
    2bf0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    2bf4:	e15c      	b.n	2eb0 <mss_i2c_isr+0x57c>
            /* data byte SENT, ACK to be received
             * In fact, this means we've received a NACK (This may not be 
             * obvious, but if we've rec'd an ACK then we would be in state 
             * 0x28!) hence, let's send a stop bit
             */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
    2bf6:	69a3      	ldr	r3, [r4, #24]
    2bf8:	f04f 0201 	mov.w	r2, #1
    2bfc:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
    2bfe:	f04f 0302 	mov.w	r3, #2
    2c02:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
    2c06:	f04f 0300 	mov.w	r3, #0
    2c0a:	7223      	strb	r3, [r4, #8]
            enable_slave_if_required(this_i2c);
    2c0c:	4620      	mov	r0, r4
    2c0e:	f7ff fe89 	bl	2924 <enable_slave_if_required>

            break;
    2c12:	e14e      	b.n	2eb2 <mss_i2c_isr+0x57e>
      /* STATUS codes 08H, 10H, 38H are all covered in MTX mode */
        case ST_SLAR_ACK: /* SLA+R tx'ed. */
            /* Let's make sure we ACK the first data byte received (set AA bit in CTRL) unless
             * the next byte is the last byte of the read transaction.
             */
            if(this_i2c->master_rx_size > 1u)
    2c14:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2c16:	2b01      	cmp	r3, #1
    2c18:	d904      	bls.n	2c24 <mss_i2c_isr+0x2f0>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
    2c1a:	69a3      	ldr	r3, [r4, #24]
    2c1c:	f04f 0201 	mov.w	r2, #1
    2c20:	609a      	str	r2, [r3, #8]
    2c22:	e146      	b.n	2eb2 <mss_i2c_isr+0x57e>
            }
            else if(1u == this_i2c->master_rx_size)
    2c24:	2b01      	cmp	r3, #1
    2c26:	d104      	bne.n	2c32 <mss_i2c_isr+0x2fe>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
    2c28:	69a3      	ldr	r3, [r4, #24]
    2c2a:	f04f 0200 	mov.w	r2, #0
    2c2e:	609a      	str	r2, [r3, #8]
    2c30:	e13f      	b.n	2eb2 <mss_i2c_isr+0x57e>
            }
            else /* this_i2c->master_rx_size == 0u */
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
    2c32:	69a2      	ldr	r2, [r4, #24]
    2c34:	f04f 0301 	mov.w	r3, #1
    2c38:	6093      	str	r3, [r2, #8]
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
    2c3a:	69a2      	ldr	r2, [r4, #24]
    2c3c:	6113      	str	r3, [r2, #16]
                this_i2c->master_status = MSS_I2C_SUCCESS;
    2c3e:	f04f 0300 	mov.w	r3, #0
    2c42:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
                this_i2c->transaction = NO_TRANSACTION;
    2c46:	7223      	strb	r3, [r4, #8]
    2c48:	e133      	b.n	2eb2 <mss_i2c_isr+0x57e>
            }
            break;
            
        case ST_SLAR_NACK: /* SLA+R tx'ed; let's release the bus (send a stop condition) */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
    2c4a:	69a3      	ldr	r3, [r4, #24]
    2c4c:	f04f 0201 	mov.w	r2, #1
    2c50:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
    2c52:	f04f 0302 	mov.w	r3, #2
    2c56:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
    2c5a:	f04f 0300 	mov.w	r3, #0
    2c5e:	7223      	strb	r3, [r4, #8]
            enable_slave_if_required(this_i2c);
    2c60:	4620      	mov	r0, r4
    2c62:	f7ff fe5f 	bl	2924 <enable_slave_if_required>
            break;
    2c66:	e124      	b.n	2eb2 <mss_i2c_isr+0x57e>
          
        case ST_RX_DATA_ACK: /* Data byte received, ACK returned */
            /* First, get the data */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx++] = this_i2c->hw_reg->DATA;
    2c68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2c6a:	7a11      	ldrb	r1, [r2, #8]
    2c6c:	6b22      	ldr	r2, [r4, #48]	; 0x30
    2c6e:	54d1      	strb	r1, [r2, r3]
    2c70:	f103 0301 	add.w	r3, r3, #1
    2c74:	63a3      	str	r3, [r4, #56]	; 0x38

            if( this_i2c->master_rx_idx >= (this_i2c->master_rx_size - 1u))
    2c76:	6b62      	ldr	r2, [r4, #52]	; 0x34
    2c78:	f102 32ff 	add.w	r2, r2, #4294967295
    2c7c:	4293      	cmp	r3, r2
    2c7e:	f0c0 8118 	bcc.w	2eb2 <mss_i2c_isr+0x57e>
            {
                /* If we're at the second last byte, let's set AA to 0 so
                 * we return a NACK at the last byte. */
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
    2c82:	69a3      	ldr	r3, [r4, #24]
    2c84:	f04f 0200 	mov.w	r2, #0
    2c88:	609a      	str	r2, [r3, #8]
    2c8a:	e112      	b.n	2eb2 <mss_i2c_isr+0x57e>
            }
            break;
            
        case ST_RX_DATA_NACK: /* Data byte received, NACK returned */
            /* Get the data, then send a stop condition */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx] = this_i2c->hw_reg->DATA;
    2c8c:	7a11      	ldrb	r1, [r2, #8]
    2c8e:	6b22      	ldr	r2, [r4, #48]	; 0x30
    2c90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2c92:	54d1      	strb	r1, [r2, r3]
          
            hold_bus = this_i2c->options &  MSS_I2C_HOLD_BUS; 
    2c94:	7c23      	ldrb	r3, [r4, #16]
    2c96:	f003 0301 	and.w	r3, r3, #1

            /* Store the information of current I2C bus status in the bus_status*/
            this_i2c->bus_status  = hold_bus;
    2c9a:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
            if ( hold_bus == 0u )
    2c9e:	b93b      	cbnz	r3, 2cb0 <mss_i2c_isr+0x37c>
            { 
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;  /*xmt stop condition */
    2ca0:	69a3      	ldr	r3, [r4, #24]
    2ca2:	f04f 0501 	mov.w	r5, #1
    2ca6:	611d      	str	r5, [r3, #16]

                /* Bus is released, now we can start listening to bus, if it is slave */
                   enable_slave_if_required(this_i2c);
    2ca8:	4620      	mov	r0, r4
    2caa:	f7ff fe3b 	bl	2924 <enable_slave_if_required>
    2cae:	e013      	b.n	2cd8 <mss_i2c_isr+0x3a4>
            }
            else
            {
                NVIC_DisableIRQ( this_i2c->irqn );
    2cb0:	8a63      	ldrh	r3, [r4, #18]
    2cb2:	b21a      	sxth	r2, r3
    2cb4:	ea4f 1252 	mov.w	r2, r2, lsr #5
    2cb8:	f003 031f 	and.w	r3, r3, #31
    2cbc:	f04f 0101 	mov.w	r1, #1
    2cc0:	fa01 f103 	lsl.w	r1, r1, r3
    2cc4:	f24e 1300 	movw	r3, #57600	; 0xe100
    2cc8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2ccc:	f102 0220 	add.w	r2, r2, #32
    2cd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    2cd4:	f04f 0500 	mov.w	r5, #0

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
    2cd8:	f04f 0300 	mov.w	r3, #0
    2cdc:	7223      	strb	r3, [r4, #8]
            this_i2c->master_status = MSS_I2C_SUCCESS;
    2cde:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
            break;
    2ce2:	e0e5      	b.n	2eb0 <mss_i2c_isr+0x57c>
        
        /******************** SLAVE RECEIVER **************************/
        case ST_GCA_NACK: /* NACK after, GCA addressing */
        case ST_SLA_NACK: /* Re-enable AA (assert ack) bit for future transmissions */
            this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
    2ce4:	69a3      	ldr	r3, [r4, #24]
    2ce6:	f04f 0201 	mov.w	r2, #1
    2cea:	609a      	str	r2, [r3, #8]
            
            this_i2c->transaction = NO_TRANSACTION;
    2cec:	f04f 0300 	mov.w	r3, #0
    2cf0:	7223      	strb	r3, [r4, #8]
            this_i2c->slave_status = MSS_I2C_SUCCESS;
    2cf2:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
            
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
    2cf6:	f894 3071 	ldrb.w	r3, [r4, #113]	; 0x71
    2cfa:	2b00      	cmp	r3, #0
    2cfc:	f000 80d9 	beq.w	2eb2 <mss_i2c_isr+0x57e>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
    2d00:	69a3      	ldr	r3, [r4, #24]
    2d02:	615a      	str	r2, [r3, #20]
    2d04:	e0d5      	b.n	2eb2 <mss_i2c_isr+0x57e>
        case ST_SLV_LA: /* Arbitr. lost (SLA rec'd) */
            /*
             *  We lost arbitration and either the GCE or our address was the
             *  one received so pend the master operation we were starting.
             */
            this_i2c->is_transaction_pending = 1u;
    2d06:	f04f 0301 	mov.w	r3, #1
    2d0a:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
            /* Fall through to normal ST processing as we are now in slave mode */

        case ST_GCA: /* General call address received, ACK returned */
        case ST_SLAVE_SLAW: /* SLA+W received, ACK returned */

            this_i2c->transaction = WRITE_SLAVE_TRANSACTION;
    2d0e:	f04f 0304 	mov.w	r3, #4
    2d12:	7223      	strb	r3, [r4, #8]
            this_i2c->slave_rx_idx = 0u;
    2d14:	f04f 0300 	mov.w	r3, #0
    2d18:	65a3      	str	r3, [r4, #88]	; 0x58
            this_i2c->random_read_addr = 0u;
    2d1a:	60e3      	str	r3, [r4, #12]

             /* If Start Bit is set, clear it, but store that information since it is because of
              * pending transaction
              */
            if(this_i2c->hw_reg_bit->CTRL_STA)
    2d1c:	69a3      	ldr	r3, [r4, #24]
    2d1e:	695a      	ldr	r2, [r3, #20]
    2d20:	b132      	cbz	r2, 2d30 <mss_i2c_isr+0x3fc>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 0u ;
    2d22:	f04f 0200 	mov.w	r2, #0
    2d26:	615a      	str	r2, [r3, #20]
                this_i2c->is_transaction_pending = 1u;
    2d28:	f04f 0301 	mov.w	r3, #1
    2d2c:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
            }
            this_i2c->slave_status = MSS_I2C_IN_PROGRESS;
    2d30:	f04f 0301 	mov.w	r3, #1
    2d34:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
#ifdef MSS_I2C_INCLUDE_SLA_IN_RX_PAYLOAD
            /* Fall through to put address as first byte in payload buffer */
#else
            /* Only break from this case if the slave address must NOT be included at the
             * beginning of the received write data. */
            break;
    2d38:	e0bb      	b.n	2eb2 <mss_i2c_isr+0x57e>
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
    2d3a:	6d21      	ldr	r1, [r4, #80]	; 0x50
    2d3c:	b161      	cbz	r1, 2d58 <mss_i2c_isr+0x424>
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
    2d3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
    2d40:	6d60      	ldr	r0, [r4, #84]	; 0x54
    2d42:	4283      	cmp	r3, r0
    2d44:	d20d      	bcs.n	2d62 <mss_i2c_isr+0x42e>
            {
                data = this_i2c->hw_reg->DATA;
    2d46:	7a12      	ldrb	r2, [r2, #8]
                this_i2c->slave_rx_buffer[this_i2c->slave_rx_idx++] = data;
    2d48:	54ca      	strb	r2, [r1, r3]
    2d4a:	f103 0301 	add.w	r3, r3, #1
    2d4e:	65a3      	str	r3, [r4, #88]	; 0x58
                {
                    /* Ignore the slave address byte in the random read address
                       computation in the case where INCLUDE_SLA_IN_RX_PAYLOAD
                       is defined. */
#endif
                    this_i2c->random_read_addr = (this_i2c->random_read_addr << 8) + data;
    2d50:	68e3      	ldr	r3, [r4, #12]
    2d52:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    2d56:	60e2      	str	r2, [r4, #12]
#ifdef MSS_I2C_INCLUDE_SLA_IN_RX_PAYLOAD
                }
#endif
            }
            
            if (this_i2c->slave_rx_idx >= this_i2c->slave_rx_size)
    2d58:	6da2      	ldr	r2, [r4, #88]	; 0x58
    2d5a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    2d5c:	429a      	cmp	r2, r3
    2d5e:	f0c0 80a8 	bcc.w	2eb2 <mss_i2c_isr+0x57e>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;   /* send a NACK when done (next reception) */
    2d62:	69a3      	ldr	r3, [r4, #24]
    2d64:	f04f 0200 	mov.w	r2, #0
    2d68:	609a      	str	r2, [r3, #8]
    2d6a:	e0a2      	b.n	2eb2 <mss_i2c_isr+0x57e>
            /* STOP or repeated START occurred. */
            /* We cannot be sure if the transaction has actually completed as
             * this hardware state reports that either a STOP or repeated START
             * condition has occurred. We assume that this is a repeated START
             * if the transaction was a write from the master to this point.*/
            if ( this_i2c->transaction == WRITE_SLAVE_TRANSACTION )
    2d6c:	7a23      	ldrb	r3, [r4, #8]
    2d6e:	2b04      	cmp	r3, #4
    2d70:	d121      	bne.n	2db6 <mss_i2c_isr+0x482>
            {
                if ( this_i2c->slave_rx_idx == this_i2c->slave_mem_offset_length )
    2d72:	6da2      	ldr	r2, [r4, #88]	; 0x58
    2d74:	6e23      	ldr	r3, [r4, #96]	; 0x60
    2d76:	429a      	cmp	r2, r3
                {
                    this_i2c->slave_tx_idx = this_i2c->random_read_addr;
    2d78:	bf04      	itt	eq
    2d7a:	68e3      	ldreq	r3, [r4, #12]
    2d7c:	64e3      	streq	r3, [r4, #76]	; 0x4c
                }
                {
                    /* Call the slave's write transaction handler if it exists. */
                    if ( this_i2c->slave_write_handler != 0u )
    2d7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    2d80:	b1a3      	cbz	r3, 2dac <mss_i2c_isr+0x478>
                    {
                        mss_i2c_slave_handler_ret_t h_ret;
                        h_ret = this_i2c->slave_write_handler( this_i2c, this_i2c->slave_rx_buffer, (uint16_t)this_i2c->slave_rx_idx );
    2d82:	4620      	mov	r0, r4
    2d84:	6d21      	ldr	r1, [r4, #80]	; 0x50
    2d86:	f8b4 2058 	ldrh.w	r2, [r4, #88]	; 0x58
    2d8a:	4798      	blx	r3
                        if ( MSS_I2C_REENABLE_SLAVE_RX == h_ret )
    2d8c:	b938      	cbnz	r0, 2d9e <mss_i2c_isr+0x46a>
                        {
                            /* There is a small risk that the write handler could
                             * call MSS_I2C_disable_slave() but return
                             * MSS_I2C_REENABLE_SLAVE_RX in error so we only
                             * enable ACKs if still in slave mode. */
                             enable_slave_if_required(this_i2c);
    2d8e:	4620      	mov	r0, r4
    2d90:	f7ff fdc8 	bl	2924 <enable_slave_if_required>
                             this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
    2d94:	69a3      	ldr	r3, [r4, #24]
    2d96:	f04f 0201 	mov.w	r2, #1
    2d9a:	609a      	str	r2, [r3, #8]
    2d9c:	e011      	b.n	2dc2 <mss_i2c_isr+0x48e>
                        }
                        else
                        {
                            this_i2c->hw_reg_bit->CTRL_AA = 0u;
    2d9e:	69a2      	ldr	r2, [r4, #24]
    2da0:	f04f 0300 	mov.w	r3, #0
    2da4:	6093      	str	r3, [r2, #8]
                            /* Clear slave mode flag as well otherwise in mixed
                             * master/slave applications, the AA bit will get set by
                             * subsequent master operations. */
                            this_i2c->is_slave_enabled = 0u;
    2da6:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    2daa:	e00a      	b.n	2dc2 <mss_i2c_isr+0x48e>
                        }
                    }
                    else
                    {
                        /* Re-enable address acknowledge in case we were ready to nack the next received byte. */
                        this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
    2dac:	69a3      	ldr	r3, [r4, #24]
    2dae:	f04f 0201 	mov.w	r2, #1
    2db2:	609a      	str	r2, [r3, #8]
    2db4:	e005      	b.n	2dc2 <mss_i2c_isr+0x48e>
            {
                /*
                 * Reset slave_tx_idx so that a subsequent read will result in the slave's
                 * transmit buffer being sent from the first byte.
                 */
                this_i2c->slave_tx_idx = 0u;
    2db6:	f04f 0300 	mov.w	r3, #0
    2dba:	64e3      	str	r3, [r4, #76]	; 0x4c
                /*
                 * See if we need to re-enable acknowledgement as some error conditions, such
                 * as a master prematurely ending a transfer, can see us get here with AA set
                 * to 0 which will disable slave operation if we are not careful.
                 */
                enable_slave_if_required(this_i2c);
    2dbc:	4620      	mov	r0, r4
    2dbe:	f7ff fdb1 	bl	2924 <enable_slave_if_required>
            }

            /* Mark any previous master write transaction as complete. */
            this_i2c->slave_status = MSS_I2C_SUCCESS;
    2dc2:	f04f 0300 	mov.w	r3, #0
    2dc6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c

            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
    2dca:	f894 3071 	ldrb.w	r3, [r4, #113]	; 0x71
    2dce:	b11b      	cbz	r3, 2dd8 <mss_i2c_isr+0x4a4>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
    2dd0:	69a3      	ldr	r3, [r4, #24]
    2dd2:	f04f 0201 	mov.w	r2, #1
    2dd6:	615a      	str	r2, [r3, #20]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
    2dd8:	f04f 0300 	mov.w	r3, #0
    2ddc:	7223      	strb	r3, [r4, #8]
            break;
    2dde:	e068      	b.n	2eb2 <mss_i2c_isr+0x57e>
        case ST_SLV_RST: /* SMBUS ONLY: timeout state. must clear interrupt */
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction.
             */
            this_i2c->transaction = NO_TRANSACTION;
    2de0:	f04f 0300 	mov.w	r3, #0
    2de4:	7223      	strb	r3, [r4, #8]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
    2de6:	64e3      	str	r3, [r4, #76]	; 0x4c
            /*
             * Clear status to I2C_FAILED only if there was an operation in progress.
             */
            if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
    2de8:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    2dec:	2b01      	cmp	r3, #1
            {
                this_i2c->slave_status = MSS_I2C_FAILED;
    2dee:	bf04      	itt	eq
    2df0:	2302      	moveq	r3, #2
    2df2:	f884 305c 	strbeq.w	r3, [r4, #92]	; 0x5c
            }

            enable_slave_if_required(this_i2c); /* Make sure AA is set correctly */
    2df6:	4620      	mov	r0, r4
    2df8:	f7ff fd94 	bl	2924 <enable_slave_if_required>

            break;
    2dfc:	e059      	b.n	2eb2 <mss_i2c_isr+0x57e>
            
        /****************** SLAVE TRANSMITTER **************************/
        case ST_SLAVE_SLAR_ACK: /* SLA+R received, ACK returned */
        case ST_SLARW_LA:   /* Arbitration lost, SLA+R received, ACK returned */
        case ST_RACK: /* Data tx'ed, ACK received */
            if ( status == ST_SLAVE_SLAR_ACK )
    2dfe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2e02:	2ba8      	cmp	r3, #168	; 0xa8
    2e04:	d113      	bne.n	2e2e <mss_i2c_isr+0x4fa>
            {
                this_i2c->transaction = READ_SLAVE_TRANSACTION;
    2e06:	f04f 0305 	mov.w	r3, #5
    2e0a:	7223      	strb	r3, [r4, #8]
                this_i2c->random_read_addr = 0u;
    2e0c:	f04f 0300 	mov.w	r3, #0
    2e10:	60e3      	str	r3, [r4, #12]

                this_i2c->slave_status = MSS_I2C_IN_PROGRESS;
    2e12:	f04f 0301 	mov.w	r3, #1
    2e16:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c

                /* If Start Bit is set, clear it, but store that information since it is because of
                 * pending transaction
                 */
                if(this_i2c->hw_reg_bit->CTRL_STA)
    2e1a:	69a3      	ldr	r3, [r4, #24]
    2e1c:	695a      	ldr	r2, [r3, #20]
    2e1e:	b132      	cbz	r2, 2e2e <mss_i2c_isr+0x4fa>
                {
                    this_i2c->hw_reg_bit->CTRL_STA = 0u ;
    2e20:	f04f 0200 	mov.w	r2, #0
    2e24:	615a      	str	r2, [r3, #20]
                    this_i2c->is_transaction_pending = 1u;
    2e26:	f04f 0301 	mov.w	r3, #1
    2e2a:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
                }
            }
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size)
    2e2e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    2e30:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    2e32:	4293      	cmp	r3, r2
            {
                /* Ensure 0xFF is returned to the master when the slave specifies
                 * an empty transmit buffer. */
                this_i2c->hw_reg->DATA = 0xFFu;
    2e34:	bf23      	ittte	cs
    2e36:	6963      	ldrcs	r3, [r4, #20]
    2e38:	f04f 32ff 	movcs.w	r2, #4294967295
    2e3c:	721a      	strbcs	r2, [r3, #8]
            }
            else
            {
                /* Load the data the data byte to be sent to the master. */
                this_i2c->hw_reg->DATA = this_i2c->slave_tx_buffer[this_i2c->slave_tx_idx++];
    2e3e:	6962      	ldrcc	r2, [r4, #20]
    2e40:	bf3f      	itttt	cc
    2e42:	6c61      	ldrcc	r1, [r4, #68]	; 0x44
    2e44:	5cc9      	ldrbcc	r1, [r1, r3]
    2e46:	7211      	strbcc	r1, [r2, #8]
    2e48:	3301      	addcc	r3, #1
    2e4a:	bf38      	it	cc
    2e4c:	64e3      	strcc	r3, [r4, #76]	; 0x4c
            }
            /* Determine if this is the last data byte to send to the master. */
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size) /* last byte? */
    2e4e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    2e50:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    2e52:	429a      	cmp	r2, r3
    2e54:	d32d      	bcc.n	2eb2 <mss_i2c_isr+0x57e>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
    2e56:	69a2      	ldr	r2, [r4, #24]
    2e58:	f04f 0300 	mov.w	r3, #0
    2e5c:	6093      	str	r3, [r2, #8]
                /* Next read transaction will result in slave's transmit buffer
                 * being sent from the first byte. */
                this_i2c->slave_tx_idx = 0u;
    2e5e:	64e3      	str	r3, [r4, #76]	; 0x4c
    2e60:	e027      	b.n	2eb2 <mss_i2c_isr+0x57e>
        case ST_SLAVE_RNACK:    /* Data byte has been transmitted; not-ACK has been received. */
        case ST_FINAL: /* Last Data byte tx'ed, ACK received */
            /* We assume that the transaction will be stopped by the master.
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte. */
            this_i2c->slave_tx_idx = 0u;
    2e62:	f04f 0300 	mov.w	r3, #0
    2e66:	64e3      	str	r3, [r4, #76]	; 0x4c
            this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
    2e68:	69a2      	ldr	r2, [r4, #24]
    2e6a:	f04f 0101 	mov.w	r1, #1
    2e6e:	6091      	str	r1, [r2, #8]

            /*  Mark previous state as complete */
            this_i2c->slave_status = MSS_I2C_SUCCESS;
    2e70:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c

            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
    2e74:	f894 3071 	ldrb.w	r3, [r4, #113]	; 0x71
    2e78:	b10b      	cbz	r3, 2e7e <mss_i2c_isr+0x54a>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
    2e7a:	69a3      	ldr	r3, [r4, #24]
    2e7c:	6159      	str	r1, [r3, #20]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
    2e7e:	f04f 0300 	mov.w	r3, #0
    2e82:	7223      	strb	r3, [r4, #8]
            break;
    2e84:	e015      	b.n	2eb2 <mss_i2c_isr+0x57e>
        case ST_RESET_ACTIVATED:
        case ST_BUS_ERROR: /* Bus error during MST or selected slave modes */
        default:
            /* Some undefined state has encountered. Clear Start bit to make
             * sure, next good transaction happen */
            this_i2c->hw_reg_bit->CTRL_STA = 0x00u;
    2e86:	69a2      	ldr	r2, [r4, #24]
    2e88:	f04f 0300 	mov.w	r3, #0
    2e8c:	6153      	str	r3, [r2, #20]
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
    2e8e:	7223      	strb	r3, [r4, #8]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
    2e90:	64e3      	str	r3, [r4, #76]	; 0x4c
            /*
             * Clear statuses to I2C_FAILED only if there was an operation in progress.
             */
            if(MSS_I2C_IN_PROGRESS == this_i2c->master_status)
    2e92:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    2e96:	2b01      	cmp	r3, #1
            {
                this_i2c->master_status = MSS_I2C_FAILED;
    2e98:	bf04      	itt	eq
    2e9a:	2302      	moveq	r3, #2
    2e9c:	f884 303c 	strbeq.w	r3, [r4, #60]	; 0x3c
            }

            if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
    2ea0:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    2ea4:	2b01      	cmp	r3, #1
            {
                this_i2c->slave_status = MSS_I2C_FAILED;
    2ea6:	bf04      	itt	eq
    2ea8:	2302      	moveq	r3, #2
    2eaa:	f884 305c 	strbeq.w	r3, [r4, #92]	; 0x5c
    2eae:	e000      	b.n	2eb2 <mss_i2c_isr+0x57e>


            break;
    }
    
    if ( clear_irq )
    2eb0:	b11d      	cbz	r5, 2eba <mss_i2c_isr+0x586>
    {
        /* clear interrupt. */
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
    2eb2:	69a3      	ldr	r3, [r4, #24]
    2eb4:	f04f 0200 	mov.w	r2, #0
    2eb8:	60da      	str	r2, [r3, #12]
    }
    
    /* Read the status register to ensure the last I2C registers write took place
     * in a system built around a bus making use of posted writes. */
    status = this_i2c->hw_reg->STATUS;
    2eba:	6963      	ldr	r3, [r4, #20]
    2ebc:	791b      	ldrb	r3, [r3, #4]
    2ebe:	f88d 3007 	strb.w	r3, [sp, #7]
}
    2ec2:	b003      	add	sp, #12
    2ec4:	bd30      	pop	{r4, r5, pc}
    2ec6:	bf00      	nop

00002ec8 <I2C0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void I2C0_IRQHandler( void )
#else
void I2C0_IRQHandler( void )
#endif
{
    2ec8:	4668      	mov	r0, sp
    2eca:	f020 0107 	bic.w	r1, r0, #7
    2ece:	468d      	mov	sp, r1
    2ed0:	b501      	push	{r0, lr}
    mss_i2c_isr( &g_mss_i2c0 );
    2ed2:	f240 10c8 	movw	r0, #456	; 0x1c8
    2ed6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2eda:	f7ff fd2b 	bl	2934 <mss_i2c_isr>
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    2ede:	f24e 1300 	movw	r3, #57600	; 0xe100
    2ee2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2ee6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2eea:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC_ClearPendingIRQ( I2C0_IRQn );
}
    2eee:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    2ef2:	4685      	mov	sp, r0
    2ef4:	4770      	bx	lr
    2ef6:	bf00      	nop

00002ef8 <I2C1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void I2C1_IRQHandler( void )
#else
void I2C1_IRQHandler( void )
#endif
{
    2ef8:	4668      	mov	r0, sp
    2efa:	f020 0107 	bic.w	r1, r0, #7
    2efe:	468d      	mov	sp, r1
    2f00:	b501      	push	{r0, lr}
    mss_i2c_isr( &g_mss_i2c1 );
    2f02:	f240 203c 	movw	r0, #572	; 0x23c
    2f06:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2f0a:	f7ff fd13 	bl	2934 <mss_i2c_isr>
    2f0e:	f24e 1300 	movw	r3, #57600	; 0xe100
    2f12:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2f16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2f1a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC_ClearPendingIRQ( I2C1_IRQn );
}
    2f1e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    2f22:	4685      	mov	sp, r0
    2f24:	4770      	bx	lr
    2f26:	bf00      	nop

00002f28 <disable_interrupts>:
}
/*------------------------------------------------------------------------------
 *
 */
static uint32_t disable_interrupts( void )
{
    2f28:	b510      	push	{r4, lr}
    uint32_t primask;
    primask = __get_PRIMASK();
    2f2a:	f000 f9c1 	bl	32b0 <__get_PRIMASK>
    2f2e:	4604      	mov	r4, r0
    __set_PRIMASK(1u);
    2f30:	f04f 0001 	mov.w	r0, #1
    2f34:	f000 f9c0 	bl	32b8 <__set_PRIMASK>
    return primask;
}
    2f38:	4620      	mov	r0, r4
    2f3a:	bd10      	pop	{r4, pc}

00002f3c <restore_interrupts>:

/*------------------------------------------------------------------------------
 *
 */
static void restore_interrupts( uint32_t primask )
{
    2f3c:	b508      	push	{r3, lr}
    __set_PRIMASK( primask );
    2f3e:	f000 f9bb 	bl	32b8 <__set_PRIMASK>
}
    2f42:	bd08      	pop	{r3, pc}

00002f44 <MSS_I2C_read>:
    uint8_t serial_addr,
    uint8_t * read_buffer,
    uint16_t read_size,
    uint8_t options
)
{
    2f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2f48:	b082      	sub	sp, #8
    2f4a:	4604      	mov	r4, r0
    2f4c:	460d      	mov	r5, r1
    2f4e:	4616      	mov	r6, r2
    2f50:	461f      	mov	r7, r3
    2f52:	f89d 8020 	ldrb.w	r8, [sp, #32]
    uint32_t primask;
    volatile uint8_t stat_ctrl;

    ASSERT((this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1));
    2f56:	f240 13c8 	movw	r3, #456	; 0x1c8
    2f5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f5e:	4298      	cmp	r0, r3
    2f60:	d006      	beq.n	2f70 <MSS_I2C_read+0x2c>
    2f62:	f240 233c 	movw	r3, #572	; 0x23c
    2f66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f6a:	4298      	cmp	r0, r3
    2f6c:	d000      	beq.n	2f70 <MSS_I2C_read+0x2c>
    2f6e:	be00      	bkpt	0x0000

    primask = disable_interrupts();
    2f70:	f7ff ffda 	bl	2f28 <disable_interrupts>
    
    /* Update the transaction only when there is no transaction going on I2C */
    if( this_i2c->transaction == NO_TRANSACTION)
    2f74:	7a23      	ldrb	r3, [r4, #8]
    2f76:	b913      	cbnz	r3, 2f7e <MSS_I2C_read+0x3a>
    {
      this_i2c->transaction = MASTER_READ_TRANSACTION;
    2f78:	f04f 0302 	mov.w	r3, #2
    2f7c:	7223      	strb	r3, [r4, #8]
    }

    /* Update the Pending transaction information so that transaction can restarted */
    this_i2c->pending_transaction = MASTER_READ_TRANSACTION ;
    2f7e:	f04f 0302 	mov.w	r3, #2
    2f82:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
    2f86:	ea4f 0545 	mov.w	r5, r5, lsl #1
    2f8a:	6065      	str	r5, [r4, #4]

    this_i2c->dir = READ_DIR;
    2f8c:	f04f 0301 	mov.w	r3, #1
    2f90:	62e3      	str	r3, [r4, #44]	; 0x2c

    this_i2c->master_rx_buffer = read_buffer;
    2f92:	6326      	str	r6, [r4, #48]	; 0x30
    this_i2c->master_rx_size = read_size;
    2f94:	6367      	str	r7, [r4, #52]	; 0x34
    this_i2c->master_rx_idx = 0u;
    2f96:	f04f 0200 	mov.w	r2, #0
    2f9a:	63a2      	str	r2, [r4, #56]	; 0x38
    
    /* Set I2C status in progress */
    this_i2c->master_status = MSS_I2C_IN_PROGRESS;
    2f9c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    this_i2c->options = options;
    2fa0:	f884 8010 	strb.w	r8, [r4, #16]

    if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
    2fa4:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    2fa8:	2b01      	cmp	r3, #1
    {
        this_i2c->is_transaction_pending = 1u;
    2faa:	bf0f      	iteee	eq
    2fac:	f884 3071 	strbeq.w	r3, [r4, #113]	; 0x71
    }
    else
    {
        this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
    2fb0:	69a3      	ldrne	r3, [r4, #24]
    2fb2:	2201      	movne	r2, #1
    2fb4:	615a      	strne	r2, [r3, #20]
    /*
     * Clear interrupts if required (depends on repeated starts).
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( MSS_I2C_HOLD_BUS == this_i2c->bus_status )
    2fb6:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
    2fba:	2b01      	cmp	r3, #1
    2fbc:	d11d      	bne.n	2ffa <MSS_I2C_read+0xb6>
    {
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
    2fbe:	69a3      	ldr	r3, [r4, #24]
    2fc0:	f04f 0200 	mov.w	r2, #0
    2fc4:	60da      	str	r2, [r3, #12]
        stat_ctrl = this_i2c->hw_reg->STATUS;
    2fc6:	6963      	ldr	r3, [r4, #20]
    2fc8:	791b      	ldrb	r3, [r3, #4]
    2fca:	f88d 3007 	strb.w	r3, [sp, #7]
        stat_ctrl = stat_ctrl;  /* Avoids Lint warning */
    2fce:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2fd2:	f88d 3007 	strb.w	r3, [sp, #7]
        NVIC_ClearPendingIRQ( this_i2c->irqn );
    2fd6:	8a63      	ldrh	r3, [r4, #18]
    2fd8:	b21a      	sxth	r2, r3
    2fda:	ea4f 1252 	mov.w	r2, r2, lsr #5
    2fde:	f003 031f 	and.w	r3, r3, #31
    2fe2:	f04f 0101 	mov.w	r1, #1
    2fe6:	fa01 f103 	lsl.w	r1, r1, r3
    2fea:	f24e 1300 	movw	r3, #57600	; 0xe100
    2fee:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2ff2:	f102 0260 	add.w	r2, r2, #96	; 0x60
    2ff6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
    
    /* Enable the interrupt. ( Re-enable) */
    NVIC_EnableIRQ( this_i2c->irqn );
    2ffa:	8a63      	ldrh	r3, [r4, #18]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    2ffc:	b21a      	sxth	r2, r3
    2ffe:	ea4f 1252 	mov.w	r2, r2, lsr #5
    3002:	f003 031f 	and.w	r3, r3, #31
    3006:	f04f 0101 	mov.w	r1, #1
    300a:	fa01 f103 	lsl.w	r1, r1, r3
    300e:	f24e 1300 	movw	r3, #57600	; 0xe100
    3012:	f2ce 0300 	movt	r3, #57344	; 0xe000
    3016:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    restore_interrupts( primask );
    301a:	f7ff ff8f 	bl	2f3c <restore_interrupts>
}
    301e:	b002      	add	sp, #8
    3020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00003024 <MSS_I2C_write>:
    uint8_t serial_addr,
    const uint8_t * write_buffer,
    uint16_t write_size,
    uint8_t options
)
{
    3024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3028:	b082      	sub	sp, #8
    302a:	4604      	mov	r4, r0
    302c:	460d      	mov	r5, r1
    302e:	4616      	mov	r6, r2
    3030:	461f      	mov	r7, r3
    3032:	f89d 8020 	ldrb.w	r8, [sp, #32]
    uint32_t primask;
    volatile uint8_t stat_ctrl;

    ASSERT((this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1));
    3036:	f240 13c8 	movw	r3, #456	; 0x1c8
    303a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    303e:	4298      	cmp	r0, r3
    3040:	d006      	beq.n	3050 <MSS_I2C_write+0x2c>
    3042:	f240 233c 	movw	r3, #572	; 0x23c
    3046:	f2c2 0300 	movt	r3, #8192	; 0x2000
    304a:	4298      	cmp	r0, r3
    304c:	d000      	beq.n	3050 <MSS_I2C_write+0x2c>
    304e:	be00      	bkpt	0x0000

    primask = disable_interrupts();
    3050:	f7ff ff6a 	bl	2f28 <disable_interrupts>

    /* Update the transaction only when there is no transaction going on I2C */
    if( this_i2c->transaction == NO_TRANSACTION)
    3054:	7a23      	ldrb	r3, [r4, #8]
    3056:	b913      	cbnz	r3, 305e <MSS_I2C_write+0x3a>
    {
      this_i2c->transaction = MASTER_WRITE_TRANSACTION;
    3058:	f04f 0301 	mov.w	r3, #1
    305c:	7223      	strb	r3, [r4, #8]
    }

    /* Update the Pending transaction information so that transaction can restarted */
    this_i2c->pending_transaction = MASTER_WRITE_TRANSACTION ;
    305e:	f04f 0301 	mov.w	r3, #1
    3062:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
    3066:	fa05 f503 	lsl.w	r5, r5, r3
    306a:	6065      	str	r5, [r4, #4]

    this_i2c->dir = WRITE_DIR;
    306c:	f04f 0200 	mov.w	r2, #0
    3070:	62e2      	str	r2, [r4, #44]	; 0x2c

    this_i2c->master_tx_buffer = write_buffer;
    3072:	6226      	str	r6, [r4, #32]
    this_i2c->master_tx_size = write_size;
    3074:	6267      	str	r7, [r4, #36]	; 0x24
    this_i2c->master_tx_idx = 0u;
    3076:	62a2      	str	r2, [r4, #40]	; 0x28

    /* Set I2C status in progress */
    this_i2c->master_status = MSS_I2C_IN_PROGRESS;
    3078:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    this_i2c->options = options;
    307c:	f884 8010 	strb.w	r8, [r4, #16]

    if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
    3080:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    3084:	2b01      	cmp	r3, #1
    {
        this_i2c->is_transaction_pending = 1u;
    3086:	bf0f      	iteee	eq
    3088:	f884 3071 	strbeq.w	r3, [r4, #113]	; 0x71
    }
    else
    {
        this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
    308c:	69a3      	ldrne	r3, [r4, #24]
    308e:	2201      	movne	r2, #1
    3090:	615a      	strne	r2, [r3, #20]
    /*
     * Clear interrupts if required (depends on repeated starts).
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( MSS_I2C_HOLD_BUS == this_i2c->bus_status )
    3092:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
    3096:	2b01      	cmp	r3, #1
    3098:	d11d      	bne.n	30d6 <MSS_I2C_write+0xb2>
    {
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
    309a:	69a3      	ldr	r3, [r4, #24]
    309c:	f04f 0200 	mov.w	r2, #0
    30a0:	60da      	str	r2, [r3, #12]
        stat_ctrl = this_i2c->hw_reg->STATUS;
    30a2:	6963      	ldr	r3, [r4, #20]
    30a4:	791b      	ldrb	r3, [r3, #4]
    30a6:	f88d 3007 	strb.w	r3, [sp, #7]
        stat_ctrl = stat_ctrl;  /* Avoids Lint warning */
    30aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    30ae:	f88d 3007 	strb.w	r3, [sp, #7]
        NVIC_ClearPendingIRQ( this_i2c->irqn );
    30b2:	8a63      	ldrh	r3, [r4, #18]
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    30b4:	b21a      	sxth	r2, r3
    30b6:	ea4f 1252 	mov.w	r2, r2, lsr #5
    30ba:	f003 031f 	and.w	r3, r3, #31
    30be:	f04f 0101 	mov.w	r1, #1
    30c2:	fa01 f103 	lsl.w	r1, r1, r3
    30c6:	f24e 1300 	movw	r3, #57600	; 0xe100
    30ca:	f2ce 0300 	movt	r3, #57344	; 0xe000
    30ce:	f102 0260 	add.w	r2, r2, #96	; 0x60
    30d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    /* Enable the interrupt. ( Re-enable) */
    NVIC_EnableIRQ( this_i2c->irqn );
    30d6:	8a63      	ldrh	r3, [r4, #18]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    30d8:	b21a      	sxth	r2, r3
    30da:	ea4f 1252 	mov.w	r2, r2, lsr #5
    30de:	f003 031f 	and.w	r3, r3, #31
    30e2:	f04f 0101 	mov.w	r1, #1
    30e6:	fa01 f103 	lsl.w	r1, r1, r3
    30ea:	f24e 1300 	movw	r3, #57600	; 0xe100
    30ee:	f2ce 0300 	movt	r3, #57344	; 0xe000
    30f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    restore_interrupts( primask );
    30f6:	f7ff ff21 	bl	2f3c <restore_interrupts>
}
    30fa:	b002      	add	sp, #8
    30fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00003100 <MSS_I2C_init>:
(
    mss_i2c_instance_t * this_i2c,
    uint8_t ser_address,
    mss_i2c_clock_divider_t ser_clock_speed
)
{
    3100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3104:	4604      	mov	r4, r0
    3106:	460e      	mov	r6, r1
    3108:	4615      	mov	r5, r2
    uint32_t primask;
    uint_fast16_t clock_speed = (uint_fast16_t)ser_clock_speed;
    
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
    310a:	f240 13c8 	movw	r3, #456	; 0x1c8
    310e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3112:	4298      	cmp	r0, r3
    3114:	d007      	beq.n	3126 <MSS_I2C_init+0x26>
    3116:	f240 233c 	movw	r3, #572	; 0x23c
    311a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    311e:	4298      	cmp	r0, r3
    3120:	d04f      	beq.n	31c2 <MSS_I2C_init+0xc2>
    3122:	be00      	bkpt	0x0000
    3124:	e04d      	b.n	31c2 <MSS_I2C_init+0xc2>
     * Initialize all items of the this_i2c data structure to zero. This
     * initializes all state variables to their init value. It relies on
     * the fact that NO_TRANSACTION, I2C_SUCCESS and I2C_RELEASE_BUS all
     * have an actual value of zero.
     */
    primask = disable_interrupts();
    3126:	f7ff feff 	bl	2f28 <disable_interrupts>
    312a:	4607      	mov	r7, r0
    memset(this_i2c, 0, sizeof(mss_i2c_instance_t));
    312c:	f240 18c8 	movw	r8, #456	; 0x1c8
    3130:	f2c2 0800 	movt	r8, #8192	; 0x2000
    3134:	4640      	mov	r0, r8
    3136:	f04f 0100 	mov.w	r1, #0
    313a:	f04f 0274 	mov.w	r2, #116	; 0x74
    313e:	f001 f90b 	bl	4358 <memset>
    
    if ( this_i2c == &g_mss_i2c0 )
    {
        this_i2c->irqn = I2C0_IRQn;
    3142:	f04f 030e 	mov.w	r3, #14
    3146:	f8a8 3012 	strh.w	r3, [r8, #18]
        this_i2c->hw_reg = I2C0;
    314a:	f242 0300 	movw	r3, #8192	; 0x2000
    314e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3152:	f8c8 3014 	str.w	r3, [r8, #20]
        this_i2c->hw_reg_bit = I2C0_BITBAND;
    3156:	f240 0300 	movw	r3, #0
    315a:	f2c4 2304 	movt	r3, #16900	; 0x4204
    315e:	f8c8 3018 	str.w	r3, [r8, #24]
        
        /* reset I2C0 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C0_SOFTRESET_MASK;
    3162:	f242 0300 	movw	r3, #8192	; 0x2000
    3166:	f2ce 0304 	movt	r3, #57348	; 0xe004
    316a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    316c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    3170:	631a      	str	r2, [r3, #48]	; 0x30
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    3172:	f24e 1200 	movw	r2, #57600	; 0xe100
    3176:	f2ce 0200 	movt	r2, #57344	; 0xe000
    317a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    317e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
        /* Clear any previously pended I2C0 interrupt */
        NVIC_ClearPendingIRQ( I2C0_IRQn );
        /* Take I2C0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C0_SOFTRESET_MASK;
    3182:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    3184:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    3188:	631a      	str	r2, [r3, #48]	; 0x30
        /* Take I2C1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C1_SOFTRESET_MASK;
    }
    
    /* Use same base address for SMBus bitband access */
    this_i2c->hw_smb_reg_bit = (I2C_SMBus_BitBand_TypeDef *)this_i2c->hw_reg_bit;
    318a:	69a3      	ldr	r3, [r4, #24]
    318c:	61e3      	str	r3, [r4, #28]

    /* Update Serial address of the device */
    this_i2c->ser_address = (uint_fast8_t)ser_address << 1u;
    318e:	ea4f 0646 	mov.w	r6, r6, lsl #1
    3192:	6026      	str	r6, [r4, #0]

    this_i2c->hw_reg_bit->CTRL_CR2 = (uint32_t)((clock_speed >> 2u) & 0x01u);
    3194:	f3c5 0280 	ubfx	r2, r5, #2, #1
    3198:	61da      	str	r2, [r3, #28]
    this_i2c->hw_reg_bit->CTRL_CR1 = (uint32_t)((clock_speed >> 1u) & 0x01u);
    319a:	69a3      	ldr	r3, [r4, #24]
    319c:	f3c5 0240 	ubfx	r2, r5, #1, #1
    31a0:	605a      	str	r2, [r3, #4]
    this_i2c->hw_reg_bit->CTRL_CR0 = (uint32_t)(clock_speed & 0x01u);
    31a2:	69a3      	ldr	r3, [r4, #24]
    31a4:	f005 0501 	and.w	r5, r5, #1
    31a8:	601d      	str	r5, [r3, #0]
    this_i2c->hw_reg->ADDR = (uint8_t)this_i2c->ser_address;
    31aa:	6963      	ldr	r3, [r4, #20]
    31ac:	7822      	ldrb	r2, [r4, #0]
    31ae:	731a      	strb	r2, [r3, #12]
    this_i2c->hw_reg_bit->CTRL_ENS1 = 0x01u; /* set enable bit */
    31b0:	69a3      	ldr	r3, [r4, #24]
    31b2:	f04f 0201 	mov.w	r2, #1
    31b6:	619a      	str	r2, [r3, #24]
    restore_interrupts( primask );
    31b8:	4638      	mov	r0, r7
    31ba:	f7ff febf 	bl	2f3c <restore_interrupts>
}
    31be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     * Initialize all items of the this_i2c data structure to zero. This
     * initializes all state variables to their init value. It relies on
     * the fact that NO_TRANSACTION, I2C_SUCCESS and I2C_RELEASE_BUS all
     * have an actual value of zero.
     */
    primask = disable_interrupts();
    31c2:	f7ff feb1 	bl	2f28 <disable_interrupts>
    31c6:	4607      	mov	r7, r0
    memset(this_i2c, 0, sizeof(mss_i2c_instance_t));
    31c8:	4620      	mov	r0, r4
    31ca:	f04f 0100 	mov.w	r1, #0
    31ce:	f04f 0274 	mov.w	r2, #116	; 0x74
    31d2:	f001 f8c1 	bl	4358 <memset>
        /* Take I2C0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C0_SOFTRESET_MASK;
    }
    else
    {
        this_i2c->irqn = I2C1_IRQn;
    31d6:	f04f 0311 	mov.w	r3, #17
    31da:	8263      	strh	r3, [r4, #18]
        this_i2c->hw_reg = I2C1;
    31dc:	f242 0300 	movw	r3, #8192	; 0x2000
    31e0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    31e4:	6163      	str	r3, [r4, #20]
        this_i2c->hw_reg_bit = I2C1_BITBAND;
    31e6:	f240 0300 	movw	r3, #0
    31ea:	f2c4 2324 	movt	r3, #16932	; 0x4224
    31ee:	61a3      	str	r3, [r4, #24]
        
        /* reset I2C1 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C1_SOFTRESET_MASK;
    31f0:	f242 0300 	movw	r3, #8192	; 0x2000
    31f4:	f2ce 0304 	movt	r3, #57348	; 0xe004
    31f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    31fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    31fe:	631a      	str	r2, [r3, #48]	; 0x30
    3200:	f24e 1200 	movw	r2, #57600	; 0xe100
    3204:	f2ce 0200 	movt	r2, #57344	; 0xe000
    3208:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    320c:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
        /* Clear any previously pended I2C1 interrupt */
        NVIC_ClearPendingIRQ( I2C1_IRQn );
        /* Take I2C1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C1_SOFTRESET_MASK;
    3210:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    3212:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    3216:	631a      	str	r2, [r3, #48]	; 0x30
    3218:	e7b7      	b.n	318a <MSS_I2C_init+0x8a>
    321a:	bf00      	nop

0000321c <MSS_GPIO_init>:
/*-------------------------------------------------------------------------*//**
 * MSS_GPIO_init
 * See "mss_gpio.h" for details of how to use this function.
 */
void MSS_GPIO_init( void )
{
    321c:	b410      	push	{r4}
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
    321e:	f242 0300 	movw	r3, #8192	; 0x2000
    3222:	f2ce 0304 	movt	r3, #57348	; 0xe004
    3226:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    3228:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    322c:	631a      	str	r2, [r3, #48]	; 0x30
    322e:	f04f 0300 	mov.w	r3, #0
    /* Clear any previously pended MSS GPIO interrupt */
    for ( i = 0U; i < NB_OF_GPIO; ++i )
    {
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[i] );
    3232:	f244 40ac 	movw	r0, #17580	; 0x44ac
    3236:	f2c0 0000 	movt	r0, #0
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    323a:	f04f 0c01 	mov.w	ip, #1
    323e:	f24e 1400 	movw	r4, #57600	; 0xe100
    3242:	f2ce 0400 	movt	r4, #57344	; 0xe000
    3246:	5ac2      	ldrh	r2, [r0, r3]
    3248:	b211      	sxth	r1, r2
    324a:	ea4f 1151 	mov.w	r1, r1, lsr #5
    324e:	f002 021f 	and.w	r2, r2, #31
    3252:	fa0c f202 	lsl.w	r2, ip, r2
    3256:	f101 0160 	add.w	r1, r1, #96	; 0x60
    325a:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
    325e:	f103 0302 	add.w	r3, r3, #2
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
    /* Clear any previously pended MSS GPIO interrupt */
    for ( i = 0U; i < NB_OF_GPIO; ++i )
    3262:	2b40      	cmp	r3, #64	; 0x40
    3264:	d1ef      	bne.n	3246 <MSS_GPIO_init+0x2a>
    {
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[i] );
    }
    /* Take MSS GPIO hardware out of reset. */
    SYSREG->SOFT_RST_CR &= ~SYSREG_GPIO_SOFTRESET_MASK;
    3266:	f242 0300 	movw	r3, #8192	; 0x2000
    326a:	f2ce 0304 	movt	r3, #57348	; 0xe004
    326e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    3270:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    3274:	631a      	str	r2, [r3, #48]	; 0x30
}
    3276:	bc10      	pop	{r4}
    3278:	4770      	bx	lr
    327a:	bf00      	nop

0000327c <MSS_GPIO_config>:
    uint32_t config
)
{
    uint32_t gpio_idx = (uint32_t)port_id;
    
    ASSERT( gpio_idx < NB_OF_GPIO );
    327c:	281f      	cmp	r0, #31
    327e:	d901      	bls.n	3284 <MSS_GPIO_config+0x8>
    3280:	be00      	bkpt	0x0000
    3282:	4770      	bx	lr

    if ( gpio_idx < NB_OF_GPIO )
    {
        *(g_config_reg_lut[gpio_idx]) = config;
    3284:	f244 43ec 	movw	r3, #17644	; 0x44ec
    3288:	f2c0 0300 	movt	r3, #0
    328c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    3290:	6019      	str	r1, [r3, #0]
    3292:	4770      	bx	lr

00003294 <MSS_GPIO_set_output>:
    uint8_t             value
)
{
    uint32_t gpio_idx = (uint32_t)port_id;
    
    ASSERT( gpio_idx < NB_OF_GPIO );
    3294:	281f      	cmp	r0, #31
    3296:	d901      	bls.n	329c <MSS_GPIO_set_output+0x8>
    3298:	be00      	bkpt	0x0000
    329a:	4770      	bx	lr
    
    if ( gpio_idx < NB_OF_GPIO )
    {
        GPIO_BITBAND->GPIO_OUT[gpio_idx] = (uint32_t)value;
    329c:	f240 0300 	movw	r3, #0
    32a0:	f2c4 2326 	movt	r3, #16934	; 0x4226
    32a4:	f500 6088 	add.w	r0, r0, #1088	; 0x440
    32a8:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    32ac:	4770      	bx	lr
    32ae:	bf00      	nop

000032b0 <__get_PRIMASK>:
 */
uint32_t __get_PRIMASK(void)
{
  uint32_t result=0;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    32b0:	f3ef 8010 	mrs	r0, PRIMASK
  return(result);
}
    32b4:	4770      	bx	lr
    32b6:	bf00      	nop

000032b8 <__set_PRIMASK>:
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
    32b8:	f380 8810 	msr	PRIMASK, r0
}
    32bc:	4770      	bx	lr
    32be:	bf00      	nop

000032c0 <SystemInit>:
    /*
     * Do not make use of global variables or make any asumptions regarding
     * memory content if modifying this function. The memory content has not been
     * initialised by the time this function is called by the start-up code.
     */
}
    32c0:	4770      	bx	lr
    32c2:	bf00      	nop

000032c4 <SystemCoreClockUpdate>:

/***************************************************************************//**
 *
 */
void SystemCoreClockUpdate (void)
{
    32c4:	b430      	push	{r4, r5}
    32c6:	b084      	sub	sp, #16
    uint32_t PclkDiv0;
    uint32_t PclkDiv1;
    uint32_t AceDiv;
    uint32_t FabDiv;

    const uint32_t pclk_div_lut[4] = { 1uL, 2uL, 4uL, 1uL };
    32c8:	f244 536c 	movw	r3, #17772	; 0x456c
    32cc:	f2c0 0300 	movt	r3, #0
    32d0:	46ec      	mov	ip, sp
    32d2:	cb0f      	ldmia	r3!, {r0, r1, r2, r3}
    32d4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    /* Read PCLK dividers from system registers. Multiply the value read from
     * system register by two to get actual divider value. */
    PclkDiv0 = pclk_div_lut[((SYSREG->MSS_CLK_CR >> PCLK0_DIV_SHIFT) & PCLK_DIV_MASK)];
    32d8:	f242 0300 	movw	r3, #8192	; 0x2000
    32dc:	f2ce 0304 	movt	r3, #57348	; 0xe004
    32e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    32e2:	f002 020c 	and.w	r2, r2, #12
    32e6:	a904      	add	r1, sp, #16
    32e8:	440a      	add	r2, r1
    32ea:	f852 5c10 	ldr.w	r5, [r2, #-16]
    PclkDiv1 = pclk_div_lut[((SYSREG->MSS_CLK_CR >> PCLK1_DIV_SHIFT) & PCLK_DIV_MASK)];
    32ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    32f0:	f3c2 1201 	ubfx	r2, r2, #4, #2
    32f4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    32f8:	f852 4c10 	ldr.w	r4, [r2, #-16]
    AceDiv = pclk_div_lut[((SYSREG->MSS_CLK_CR >> ACE_DIV_SHIFT) & PCLK_DIV_MASK)];
    32fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    32fe:	f3c2 1281 	ubfx	r2, r2, #6, #2
    3302:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3306:	f852 0c10 	ldr.w	r0, [r2, #-16]
    {
        /* Compute the FPGA fabric frequency divider. */
        uint32_t obdiv;
        uint32_t obdivhalf;
        
        obdiv = (SYSREG->MSS_CCC_DIV_CR >> OBDIV_SHIFT) & OBDIV_MASK;
    330a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
        obdivhalf = (SYSREG->MSS_CCC_DIV_CR >> OBDIVHALF_SHIFT) & OBDIVHALF_MASK;
    330c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        FabDiv = obdiv + 1uL;
    330e:	f3c1 2104 	ubfx	r1, r1, #8, #5
    3312:	f101 0101 	add.w	r1, r1, #1
        if ( obdivhalf != 0uL )
    3316:	f413 5f00 	tst.w	r3, #8192	; 0x2000
        {
            FabDiv = FabDiv * 2uL;
    331a:	bf18      	it	ne
    331c:	0049      	lslne	r1, r1, #1
    
    uint32_t * p_sysboot_key = SYSBOOT_KEY_ADDR;
    uint32_t * p_idcode = IDCODE_LOCATION;
    uint32_t idcode;
	
    idcode = *p_idcode & ~IDCODE_DEV_REV_MASK;
    331e:	f240 2330 	movw	r3, #560	; 0x230
    3322:	f2c6 0308 	movt	r3, #24584	; 0x6008
    3326:	681a      	ldr	r2, [r3, #0]
	
    if ( A2F060IFX_ID == idcode )
    3328:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
    332c:	f241 13cf 	movw	r3, #4559	; 0x11cf
    3330:	f2c0 53a1 	movt	r3, #1441	; 0x5a1
    3334:	429a      	cmp	r2, r3
    3336:	d105      	bne.n	3344 <SystemCoreClockUpdate+0x80>
    {
        uint32_t *p_fclk = SYSBOOT_A2F060_FCLK_ADDR;
        fclk = *p_fclk;
    3338:	f64e 732c 	movw	r3, #61228	; 0xef2c
    333c:	f2c6 0301 	movt	r3, #24577	; 0x6001
    3340:	681b      	ldr	r3, [r3, #0]
    3342:	e028      	b.n	3396 <SystemCoreClockUpdate+0xd2>
    }
    else if ( SYSBOOT_KEY_VALUE == *p_sysboot_key )
    3344:	f640 031c 	movw	r3, #2076	; 0x81c
    3348:	f2c6 0308 	movt	r3, #24584	; 0x6008
    334c:	681a      	ldr	r2, [r3, #0]
    334e:	f244 3341 	movw	r3, #17217	; 0x4341
    3352:	f6c4 4354 	movt	r3, #19540	; 0x4c54
    3356:	429a      	cmp	r2, r3
    3358:	d11e      	bne.n	3398 <SystemCoreClockUpdate+0xd4>
    {
        /* Actel system boot programmed, check if it has the FCLK value stored. */
        uint32_t *p_sysboot_version = SYSBOOT_VERSION_ADDR;
        uint32_t sysboot_version = *p_sysboot_version;
    335a:	f640 0340 	movw	r3, #2112	; 0x840
    335e:	f2c6 0308 	movt	r3, #24584	; 0x6008
    3362:	681a      	ldr	r2, [r3, #0]
        
        sysboot_version &= SYSBOOT_VERSION_MASK;
    3364:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
        
        if ( sysboot_version >= MIN_SYSBOOT_VERSION )
    3368:	f240 3300 	movw	r3, #768	; 0x300
    336c:	f2c0 0301 	movt	r3, #1
    3370:	429a      	cmp	r2, r3
    3372:	d911      	bls.n	3398 <SystemCoreClockUpdate+0xd4>
        {
            /* Handle change of eNVM location of FCLK between 1.3.x and 2.x.x versions of the system boot. */
            if ( sysboot_version < SYSBOOT_VERSION_2_X )
    3374:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
    3378:	d205      	bcs.n	3386 <SystemCoreClockUpdate+0xc2>
            {
                /* Read FCLK value from MSS configurator generated configuration
                 * data stored in eNVM spare pages as part of system boot version 1.3.x
                 * configuration tables. */
                uint32_t *p_fclk = SYSBOOT_1_3_FCLK_ADDR;
                fclk = *p_fclk;
    337a:	f241 632c 	movw	r3, #5676	; 0x162c
    337e:	f2c6 0308 	movt	r3, #24584	; 0x6008
    3382:	681b      	ldr	r3, [r3, #0]
    3384:	e007      	b.n	3396 <SystemCoreClockUpdate+0xd2>
            }
            else if ( sysboot_version < MAX_SYSBOOT_VERSION )
    3386:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
    338a:	d205      	bcs.n	3398 <SystemCoreClockUpdate+0xd4>
            {
                /* Read FCLK value from MSS configurator generated configuration
                 * data stored in eNVM spare pages as part of system boot version 2.x.x
                 * configuration tables. */
                uint32_t *p_fclk = SYSBOOT_2_x_FCLK_ADDR;
                fclk = *p_fclk;
    338c:	f641 63ac 	movw	r3, #7852	; 0x1eac
    3390:	f2c6 0308 	movt	r3, #24584	; 0x6008
    3394:	681b      	ldr	r3, [r3, #0]
                fclk = 0uL;
            }
        }
    }
    
    if ( 0uL == fclk )
    3396:	b923      	cbnz	r3, 33a2 <SystemCoreClockUpdate+0xde>
        /* 
         * Could not retrieve FCLK from system boot configuration data. Fall back
         * to using SMARTFUSION_FCLK_FREQ which must then be defined as part of
         * project settings.
         */
        ASSERT( SMARTFUSION_FCLK_FREQ_DEFINED );
    3398:	be00      	bkpt	0x0000
    339a:	f647 0340 	movw	r3, #30784	; 0x7840
    339e:	f2c0 137d 	movt	r3, #381	; 0x17d
    }
    
    /* Retrieve FCLK from eNVM spare pages if Actel system boot programmed as part of the system. */
    
    /* Read system clock from eNVM spare pages. */
    SystemCoreClock = GetSystemClock();
    33a2:	f240 0214 	movw	r2, #20
    33a6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    33aa:	6013      	str	r3, [r2, #0]
    g_FrequencyPCLK0 = SystemCoreClock / PclkDiv0;
    33ac:	f240 020c 	movw	r2, #12
    33b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    33b4:	fbb3 f5f5 	udiv	r5, r3, r5
    33b8:	6015      	str	r5, [r2, #0]
    g_FrequencyPCLK1 = SystemCoreClock / PclkDiv1;
    33ba:	f240 0210 	movw	r2, #16
    33be:	f2c2 0200 	movt	r2, #8192	; 0x2000
    33c2:	fbb3 f4f4 	udiv	r4, r3, r4
    33c6:	6014      	str	r4, [r2, #0]
    g_FrequencyACE = SystemCoreClock / AceDiv;
    33c8:	f240 0204 	movw	r2, #4
    33cc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    33d0:	fbb3 f0f0 	udiv	r0, r3, r0
    33d4:	6010      	str	r0, [r2, #0]
    g_FrequencyFPGA = SystemCoreClock / FabDiv;
    33d6:	f240 0208 	movw	r2, #8
    33da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    33de:	fbb3 f1f1 	udiv	r1, r3, r1
    33e2:	6011      	str	r1, [r2, #0]
    
    /* Keep SystemFrequency as well as SystemCoreClock for legacy reasons. */
    SystemFrequency = SystemCoreClock;
    33e4:	f240 0218 	movw	r2, #24
    33e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    33ec:	6013      	str	r3, [r2, #0]
}
    33ee:	b004      	add	sp, #16
    33f0:	bc30      	pop	{r4, r5}
    33f2:	4770      	bx	lr

000033f4 <ACE_PPE_Flag0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag0_IRQHandler( void )
#else
void ACE_PPE_Flag0_IRQHandler( void )
#endif
{
    33f4:	4668      	mov	r0, sp
    33f6:	f020 0107 	bic.w	r1, r0, #7
    33fa:	468d      	mov	sp, r1
    33fc:	b401      	push	{r0}
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    33fe:	f24e 1300 	movw	r3, #57600	; 0xe100
    3402:	f2ce 0300 	movt	r3, #57344	; 0xe000
    3406:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    340a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG0 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag0_IRQn );
}
    340e:	bc01      	pop	{r0}
    3410:	4685      	mov	sp, r0
    3412:	4770      	bx	lr

00003414 <ACE_PPE_Flag1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag1_IRQHandler( void )
#else
void ACE_PPE_Flag1_IRQHandler( void )
#endif
{
    3414:	4668      	mov	r0, sp
    3416:	f020 0107 	bic.w	r1, r0, #7
    341a:	468d      	mov	sp, r1
    341c:	b401      	push	{r0}
    341e:	f24e 1300 	movw	r3, #57600	; 0xe100
    3422:	f2ce 0300 	movt	r3, #57344	; 0xe000
    3426:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    342a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG1 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag1_IRQn );
}
    342e:	bc01      	pop	{r0}
    3430:	4685      	mov	sp, r0
    3432:	4770      	bx	lr

00003434 <ACE_PPE_Flag2_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag2_IRQHandler( void )
#else
void ACE_PPE_Flag2_IRQHandler( void )
#endif
{
    3434:	4668      	mov	r0, sp
    3436:	f020 0107 	bic.w	r1, r0, #7
    343a:	468d      	mov	sp, r1
    343c:	b401      	push	{r0}
    343e:	f24e 1300 	movw	r3, #57600	; 0xe100
    3442:	f2ce 0300 	movt	r3, #57344	; 0xe000
    3446:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    344a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG2 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag2_IRQn );
}
    344e:	bc01      	pop	{r0}
    3450:	4685      	mov	sp, r0
    3452:	4770      	bx	lr

00003454 <ACE_PPE_Flag3_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag3_IRQHandler( void )
#else
void ACE_PPE_Flag3_IRQHandler( void )
#endif
{
    3454:	4668      	mov	r0, sp
    3456:	f020 0107 	bic.w	r1, r0, #7
    345a:	468d      	mov	sp, r1
    345c:	b401      	push	{r0}
    345e:	f24e 1300 	movw	r3, #57600	; 0xe100
    3462:	f2ce 0300 	movt	r3, #57344	; 0xe000
    3466:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    346a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG3 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag3_IRQn );
}
    346e:	bc01      	pop	{r0}
    3470:	4685      	mov	sp, r0
    3472:	4770      	bx	lr

00003474 <ACE_PPE_Flag4_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag4_IRQHandler( void )
#else
void ACE_PPE_Flag4_IRQHandler( void )
#endif
{
    3474:	4668      	mov	r0, sp
    3476:	f020 0107 	bic.w	r1, r0, #7
    347a:	468d      	mov	sp, r1
    347c:	b401      	push	{r0}
    347e:	f24e 1300 	movw	r3, #57600	; 0xe100
    3482:	f2ce 0300 	movt	r3, #57344	; 0xe000
    3486:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    348a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG4 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag4_IRQn );
}
    348e:	bc01      	pop	{r0}
    3490:	4685      	mov	sp, r0
    3492:	4770      	bx	lr

00003494 <ACE_PPE_Flag5_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag5_IRQHandler( void )
#else
void ACE_PPE_Flag5_IRQHandler( void )
#endif
{
    3494:	4668      	mov	r0, sp
    3496:	f020 0107 	bic.w	r1, r0, #7
    349a:	468d      	mov	sp, r1
    349c:	b401      	push	{r0}
    349e:	f24e 1300 	movw	r3, #57600	; 0xe100
    34a2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    34a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    34aa:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG5 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag5_IRQn );
}
    34ae:	bc01      	pop	{r0}
    34b0:	4685      	mov	sp, r0
    34b2:	4770      	bx	lr

000034b4 <ACE_PPE_Flag6_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag6_IRQHandler( void )
#else
void ACE_PPE_Flag6_IRQHandler( void )
#endif
{
    34b4:	4668      	mov	r0, sp
    34b6:	f020 0107 	bic.w	r1, r0, #7
    34ba:	468d      	mov	sp, r1
    34bc:	b401      	push	{r0}
    34be:	f24e 1300 	movw	r3, #57600	; 0xe100
    34c2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    34c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    34ca:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG6 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag6_IRQn );
}
    34ce:	bc01      	pop	{r0}
    34d0:	4685      	mov	sp, r0
    34d2:	4770      	bx	lr

000034d4 <ACE_PPE_Flag7_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag7_IRQHandler( void )
#else
void ACE_PPE_Flag7_IRQHandler( void )
#endif
{
    34d4:	4668      	mov	r0, sp
    34d6:	f020 0107 	bic.w	r1, r0, #7
    34da:	468d      	mov	sp, r1
    34dc:	b401      	push	{r0}
    34de:	f24e 1300 	movw	r3, #57600	; 0xe100
    34e2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    34e6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    34ea:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG7 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag7_IRQn );
}
    34ee:	bc01      	pop	{r0}
    34f0:	4685      	mov	sp, r0
    34f2:	4770      	bx	lr

000034f4 <ACE_PPE_Flag8_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag8_IRQHandler( void )
#else
void ACE_PPE_Flag8_IRQHandler( void )
#endif
{
    34f4:	4668      	mov	r0, sp
    34f6:	f020 0107 	bic.w	r1, r0, #7
    34fa:	468d      	mov	sp, r1
    34fc:	b401      	push	{r0}
    34fe:	f24e 1300 	movw	r3, #57600	; 0xe100
    3502:	f2ce 0300 	movt	r3, #57344	; 0xe000
    3506:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    350a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG8 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag8_IRQn );
}
    350e:	bc01      	pop	{r0}
    3510:	4685      	mov	sp, r0
    3512:	4770      	bx	lr

00003514 <ACE_PPE_Flag9_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag9_IRQHandler( void )
#else
void ACE_PPE_Flag9_IRQHandler( void )
#endif
{
    3514:	4668      	mov	r0, sp
    3516:	f020 0107 	bic.w	r1, r0, #7
    351a:	468d      	mov	sp, r1
    351c:	b401      	push	{r0}
    351e:	f24e 1300 	movw	r3, #57600	; 0xe100
    3522:	f2ce 0300 	movt	r3, #57344	; 0xe000
    3526:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    352a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG9 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag9_IRQn );
}
    352e:	bc01      	pop	{r0}
    3530:	4685      	mov	sp, r0
    3532:	4770      	bx	lr

00003534 <ACE_PPE_Flag10_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag10_IRQHandler( void )
#else
void ACE_PPE_Flag10_IRQHandler( void )
#endif
{
    3534:	4668      	mov	r0, sp
    3536:	f020 0107 	bic.w	r1, r0, #7
    353a:	468d      	mov	sp, r1
    353c:	b401      	push	{r0}
    353e:	f24e 1300 	movw	r3, #57600	; 0xe100
    3542:	f2ce 0300 	movt	r3, #57344	; 0xe000
    3546:	f04f 0201 	mov.w	r2, #1
    354a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG10 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag10_IRQn );
}
    354e:	bc01      	pop	{r0}
    3550:	4685      	mov	sp, r0
    3552:	4770      	bx	lr

00003554 <ACE_PPE_Flag11_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag11_IRQHandler( void )
#else
void ACE_PPE_Flag11_IRQHandler( void )
#endif
{
    3554:	4668      	mov	r0, sp
    3556:	f020 0107 	bic.w	r1, r0, #7
    355a:	468d      	mov	sp, r1
    355c:	b401      	push	{r0}
    355e:	f24e 1300 	movw	r3, #57600	; 0xe100
    3562:	f2ce 0300 	movt	r3, #57344	; 0xe000
    3566:	f04f 0202 	mov.w	r2, #2
    356a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG11 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag11_IRQn );
}
    356e:	bc01      	pop	{r0}
    3570:	4685      	mov	sp, r0
    3572:	4770      	bx	lr

00003574 <ACE_PPE_Flag12_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag12_IRQHandler( void )
#else
void ACE_PPE_Flag12_IRQHandler( void )
#endif
{
    3574:	4668      	mov	r0, sp
    3576:	f020 0107 	bic.w	r1, r0, #7
    357a:	468d      	mov	sp, r1
    357c:	b401      	push	{r0}
    357e:	f24e 1300 	movw	r3, #57600	; 0xe100
    3582:	f2ce 0300 	movt	r3, #57344	; 0xe000
    3586:	f04f 0204 	mov.w	r2, #4
    358a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG12 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag12_IRQn );
}
    358e:	bc01      	pop	{r0}
    3590:	4685      	mov	sp, r0
    3592:	4770      	bx	lr

00003594 <ACE_PPE_Flag13_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag13_IRQHandler( void )
#else
void ACE_PPE_Flag13_IRQHandler( void )
#endif
{
    3594:	4668      	mov	r0, sp
    3596:	f020 0107 	bic.w	r1, r0, #7
    359a:	468d      	mov	sp, r1
    359c:	b401      	push	{r0}
    359e:	f24e 1300 	movw	r3, #57600	; 0xe100
    35a2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    35a6:	f04f 0208 	mov.w	r2, #8
    35aa:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG13 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag13_IRQn );
}
    35ae:	bc01      	pop	{r0}
    35b0:	4685      	mov	sp, r0
    35b2:	4770      	bx	lr

000035b4 <ACE_PPE_Flag14_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag14_IRQHandler( void )
#else
void ACE_PPE_Flag14_IRQHandler( void )
#endif
{
    35b4:	4668      	mov	r0, sp
    35b6:	f020 0107 	bic.w	r1, r0, #7
    35ba:	468d      	mov	sp, r1
    35bc:	b401      	push	{r0}
    35be:	f24e 1300 	movw	r3, #57600	; 0xe100
    35c2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    35c6:	f04f 0210 	mov.w	r2, #16
    35ca:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG14 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag14_IRQn );
}
    35ce:	bc01      	pop	{r0}
    35d0:	4685      	mov	sp, r0
    35d2:	4770      	bx	lr

000035d4 <ACE_PPE_Flag15_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag15_IRQHandler( void )
#else
void ACE_PPE_Flag15_IRQHandler( void )
#endif
{
    35d4:	4668      	mov	r0, sp
    35d6:	f020 0107 	bic.w	r1, r0, #7
    35da:	468d      	mov	sp, r1
    35dc:	b401      	push	{r0}
    35de:	f24e 1300 	movw	r3, #57600	; 0xe100
    35e2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    35e6:	f04f 0220 	mov.w	r2, #32
    35ea:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG15 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag15_IRQn );
}
    35ee:	bc01      	pop	{r0}
    35f0:	4685      	mov	sp, r0
    35f2:	4770      	bx	lr

000035f4 <ACE_PPE_Flag16_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag16_IRQHandler( void )
#else
void ACE_PPE_Flag16_IRQHandler( void )
#endif
{
    35f4:	4668      	mov	r0, sp
    35f6:	f020 0107 	bic.w	r1, r0, #7
    35fa:	468d      	mov	sp, r1
    35fc:	b401      	push	{r0}
    35fe:	f24e 1300 	movw	r3, #57600	; 0xe100
    3602:	f2ce 0300 	movt	r3, #57344	; 0xe000
    3606:	f04f 0240 	mov.w	r2, #64	; 0x40
    360a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG16 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag16_IRQn );
}
    360e:	bc01      	pop	{r0}
    3610:	4685      	mov	sp, r0
    3612:	4770      	bx	lr

00003614 <ACE_PPE_Flag17_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag17_IRQHandler( void )
#else
void ACE_PPE_Flag17_IRQHandler( void )
#endif
{
    3614:	4668      	mov	r0, sp
    3616:	f020 0107 	bic.w	r1, r0, #7
    361a:	468d      	mov	sp, r1
    361c:	b401      	push	{r0}
    361e:	f24e 1300 	movw	r3, #57600	; 0xe100
    3622:	f2ce 0300 	movt	r3, #57344	; 0xe000
    3626:	f04f 0280 	mov.w	r2, #128	; 0x80
    362a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG17 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag17_IRQn );
}
    362e:	bc01      	pop	{r0}
    3630:	4685      	mov	sp, r0
    3632:	4770      	bx	lr

00003634 <ACE_PPE_Flag18_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag18_IRQHandler( void )
#else
void ACE_PPE_Flag18_IRQHandler( void )
#endif
{
    3634:	4668      	mov	r0, sp
    3636:	f020 0107 	bic.w	r1, r0, #7
    363a:	468d      	mov	sp, r1
    363c:	b401      	push	{r0}
    363e:	f24e 1300 	movw	r3, #57600	; 0xe100
    3642:	f2ce 0300 	movt	r3, #57344	; 0xe000
    3646:	f44f 7280 	mov.w	r2, #256	; 0x100
    364a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG18 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag18_IRQn );
}
    364e:	bc01      	pop	{r0}
    3650:	4685      	mov	sp, r0
    3652:	4770      	bx	lr

00003654 <ACE_PPE_Flag19_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag19_IRQHandler( void )
#else
void ACE_PPE_Flag19_IRQHandler( void )
#endif
{
    3654:	4668      	mov	r0, sp
    3656:	f020 0107 	bic.w	r1, r0, #7
    365a:	468d      	mov	sp, r1
    365c:	b401      	push	{r0}
    365e:	f24e 1300 	movw	r3, #57600	; 0xe100
    3662:	f2ce 0300 	movt	r3, #57344	; 0xe000
    3666:	f44f 7200 	mov.w	r2, #512	; 0x200
    366a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG19 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag19_IRQn );
}
    366e:	bc01      	pop	{r0}
    3670:	4685      	mov	sp, r0
    3672:	4770      	bx	lr

00003674 <ACE_PPE_Flag20_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag20_IRQHandler( void )
#else
void ACE_PPE_Flag20_IRQHandler( void )
#endif
{
    3674:	4668      	mov	r0, sp
    3676:	f020 0107 	bic.w	r1, r0, #7
    367a:	468d      	mov	sp, r1
    367c:	b401      	push	{r0}
    367e:	f24e 1300 	movw	r3, #57600	; 0xe100
    3682:	f2ce 0300 	movt	r3, #57344	; 0xe000
    3686:	f44f 6280 	mov.w	r2, #1024	; 0x400
    368a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG20 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag20_IRQn );
}
    368e:	bc01      	pop	{r0}
    3690:	4685      	mov	sp, r0
    3692:	4770      	bx	lr

00003694 <ACE_PPE_Flag21_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag21_IRQHandler( void )
#else
void ACE_PPE_Flag21_IRQHandler( void )
#endif
{
    3694:	4668      	mov	r0, sp
    3696:	f020 0107 	bic.w	r1, r0, #7
    369a:	468d      	mov	sp, r1
    369c:	b401      	push	{r0}
    369e:	f24e 1300 	movw	r3, #57600	; 0xe100
    36a2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    36a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    36aa:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG21 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag21_IRQn );
}
    36ae:	bc01      	pop	{r0}
    36b0:	4685      	mov	sp, r0
    36b2:	4770      	bx	lr

000036b4 <ACE_PPE_Flag22_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag22_IRQHandler( void )
#else
void ACE_PPE_Flag22_IRQHandler( void )
#endif
{
    36b4:	4668      	mov	r0, sp
    36b6:	f020 0107 	bic.w	r1, r0, #7
    36ba:	468d      	mov	sp, r1
    36bc:	b401      	push	{r0}
    36be:	f24e 1300 	movw	r3, #57600	; 0xe100
    36c2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    36c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    36ca:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG22 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag22_IRQn );
}
    36ce:	bc01      	pop	{r0}
    36d0:	4685      	mov	sp, r0
    36d2:	4770      	bx	lr

000036d4 <ACE_PPE_Flag23_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag23_IRQHandler( void )
#else
void ACE_PPE_Flag23_IRQHandler( void )
#endif
{
    36d4:	4668      	mov	r0, sp
    36d6:	f020 0107 	bic.w	r1, r0, #7
    36da:	468d      	mov	sp, r1
    36dc:	b401      	push	{r0}
    36de:	f24e 1300 	movw	r3, #57600	; 0xe100
    36e2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    36e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    36ea:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG23 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag23_IRQn );
}
    36ee:	bc01      	pop	{r0}
    36f0:	4685      	mov	sp, r0
    36f2:	4770      	bx	lr

000036f4 <ACE_PPE_Flag24_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag24_IRQHandler( void )
#else
void ACE_PPE_Flag24_IRQHandler( void )
#endif
{
    36f4:	4668      	mov	r0, sp
    36f6:	f020 0107 	bic.w	r1, r0, #7
    36fa:	468d      	mov	sp, r1
    36fc:	b401      	push	{r0}
    36fe:	f24e 1300 	movw	r3, #57600	; 0xe100
    3702:	f2ce 0300 	movt	r3, #57344	; 0xe000
    3706:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    370a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG24 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag24_IRQn );
}
    370e:	bc01      	pop	{r0}
    3710:	4685      	mov	sp, r0
    3712:	4770      	bx	lr

00003714 <ACE_PPE_Flag25_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag25_IRQHandler( void )
#else
void ACE_PPE_Flag25_IRQHandler( void )
#endif
{
    3714:	4668      	mov	r0, sp
    3716:	f020 0107 	bic.w	r1, r0, #7
    371a:	468d      	mov	sp, r1
    371c:	b401      	push	{r0}
    371e:	f24e 1300 	movw	r3, #57600	; 0xe100
    3722:	f2ce 0300 	movt	r3, #57344	; 0xe000
    3726:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    372a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG25 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag25_IRQn );
}
    372e:	bc01      	pop	{r0}
    3730:	4685      	mov	sp, r0
    3732:	4770      	bx	lr

00003734 <ACE_PPE_Flag26_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag26_IRQHandler( void )
#else
void ACE_PPE_Flag26_IRQHandler( void )
#endif
{
    3734:	4668      	mov	r0, sp
    3736:	f020 0107 	bic.w	r1, r0, #7
    373a:	468d      	mov	sp, r1
    373c:	b401      	push	{r0}
    373e:	f24e 1300 	movw	r3, #57600	; 0xe100
    3742:	f2ce 0300 	movt	r3, #57344	; 0xe000
    3746:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    374a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG26 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag26_IRQn );
}
    374e:	bc01      	pop	{r0}
    3750:	4685      	mov	sp, r0
    3752:	4770      	bx	lr

00003754 <ACE_PPE_Flag27_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag27_IRQHandler( void )
#else
void ACE_PPE_Flag27_IRQHandler( void )
#endif
{
    3754:	4668      	mov	r0, sp
    3756:	f020 0107 	bic.w	r1, r0, #7
    375a:	468d      	mov	sp, r1
    375c:	b401      	push	{r0}
    375e:	f24e 1300 	movw	r3, #57600	; 0xe100
    3762:	f2ce 0300 	movt	r3, #57344	; 0xe000
    3766:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    376a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG27 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag27_IRQn );
}
    376e:	bc01      	pop	{r0}
    3770:	4685      	mov	sp, r0
    3772:	4770      	bx	lr

00003774 <ACE_PPE_Flag28_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag28_IRQHandler( void )
#else
void ACE_PPE_Flag28_IRQHandler( void )
#endif
{
    3774:	4668      	mov	r0, sp
    3776:	f020 0107 	bic.w	r1, r0, #7
    377a:	468d      	mov	sp, r1
    377c:	b401      	push	{r0}
    377e:	f24e 1300 	movw	r3, #57600	; 0xe100
    3782:	f2ce 0300 	movt	r3, #57344	; 0xe000
    3786:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    378a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG28 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag28_IRQn );
}
    378e:	bc01      	pop	{r0}
    3790:	4685      	mov	sp, r0
    3792:	4770      	bx	lr

00003794 <ACE_PPE_Flag29_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag29_IRQHandler( void )
#else
void ACE_PPE_Flag29_IRQHandler( void )
#endif
{
    3794:	4668      	mov	r0, sp
    3796:	f020 0107 	bic.w	r1, r0, #7
    379a:	468d      	mov	sp, r1
    379c:	b401      	push	{r0}
    379e:	f24e 1300 	movw	r3, #57600	; 0xe100
    37a2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    37a6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    37aa:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG29 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag29_IRQn );
}
    37ae:	bc01      	pop	{r0}
    37b0:	4685      	mov	sp, r0
    37b2:	4770      	bx	lr

000037b4 <ACE_PPE_Flag30_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag30_IRQHandler( void )
#else
void ACE_PPE_Flag30_IRQHandler( void )
#endif
{
    37b4:	4668      	mov	r0, sp
    37b6:	f020 0107 	bic.w	r1, r0, #7
    37ba:	468d      	mov	sp, r1
    37bc:	b401      	push	{r0}
    37be:	f24e 1300 	movw	r3, #57600	; 0xe100
    37c2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    37c6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    37ca:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG30 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag30_IRQn );
}
    37ce:	bc01      	pop	{r0}
    37d0:	4685      	mov	sp, r0
    37d2:	4770      	bx	lr

000037d4 <ACE_PPE_Flag31_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag31_IRQHandler( void )
#else
void ACE_PPE_Flag31_IRQHandler( void )
#endif
{
    37d4:	4668      	mov	r0, sp
    37d6:	f020 0107 	bic.w	r1, r0, #7
    37da:	468d      	mov	sp, r1
    37dc:	b401      	push	{r0}
    37de:	f24e 1300 	movw	r3, #57600	; 0xe100
    37e2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    37e6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    37ea:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG31 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag31_IRQn );
}
    37ee:	bc01      	pop	{r0}
    37f0:	4685      	mov	sp, r0
    37f2:	4770      	bx	lr

000037f4 <__aeabi_drsub>:
    37f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    37f8:	e002      	b.n	3800 <__adddf3>
    37fa:	bf00      	nop

000037fc <__aeabi_dsub>:
    37fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00003800 <__adddf3>:
    3800:	b530      	push	{r4, r5, lr}
    3802:	ea4f 0441 	mov.w	r4, r1, lsl #1
    3806:	ea4f 0543 	mov.w	r5, r3, lsl #1
    380a:	ea94 0f05 	teq	r4, r5
    380e:	bf08      	it	eq
    3810:	ea90 0f02 	teqeq	r0, r2
    3814:	bf1f      	itttt	ne
    3816:	ea54 0c00 	orrsne.w	ip, r4, r0
    381a:	ea55 0c02 	orrsne.w	ip, r5, r2
    381e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    3822:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    3826:	f000 80e2 	beq.w	39ee <__adddf3+0x1ee>
    382a:	ea4f 5454 	mov.w	r4, r4, lsr #21
    382e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    3832:	bfb8      	it	lt
    3834:	426d      	neglt	r5, r5
    3836:	dd0c      	ble.n	3852 <__adddf3+0x52>
    3838:	442c      	add	r4, r5
    383a:	ea80 0202 	eor.w	r2, r0, r2
    383e:	ea81 0303 	eor.w	r3, r1, r3
    3842:	ea82 0000 	eor.w	r0, r2, r0
    3846:	ea83 0101 	eor.w	r1, r3, r1
    384a:	ea80 0202 	eor.w	r2, r0, r2
    384e:	ea81 0303 	eor.w	r3, r1, r3
    3852:	2d36      	cmp	r5, #54	; 0x36
    3854:	bf88      	it	hi
    3856:	bd30      	pophi	{r4, r5, pc}
    3858:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    385c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    3860:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    3864:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    3868:	d002      	beq.n	3870 <__adddf3+0x70>
    386a:	4240      	negs	r0, r0
    386c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    3870:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    3874:	ea4f 3303 	mov.w	r3, r3, lsl #12
    3878:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    387c:	d002      	beq.n	3884 <__adddf3+0x84>
    387e:	4252      	negs	r2, r2
    3880:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    3884:	ea94 0f05 	teq	r4, r5
    3888:	f000 80a7 	beq.w	39da <__adddf3+0x1da>
    388c:	f1a4 0401 	sub.w	r4, r4, #1
    3890:	f1d5 0e20 	rsbs	lr, r5, #32
    3894:	db0d      	blt.n	38b2 <__adddf3+0xb2>
    3896:	fa02 fc0e 	lsl.w	ip, r2, lr
    389a:	fa22 f205 	lsr.w	r2, r2, r5
    389e:	1880      	adds	r0, r0, r2
    38a0:	f141 0100 	adc.w	r1, r1, #0
    38a4:	fa03 f20e 	lsl.w	r2, r3, lr
    38a8:	1880      	adds	r0, r0, r2
    38aa:	fa43 f305 	asr.w	r3, r3, r5
    38ae:	4159      	adcs	r1, r3
    38b0:	e00e      	b.n	38d0 <__adddf3+0xd0>
    38b2:	f1a5 0520 	sub.w	r5, r5, #32
    38b6:	f10e 0e20 	add.w	lr, lr, #32
    38ba:	2a01      	cmp	r2, #1
    38bc:	fa03 fc0e 	lsl.w	ip, r3, lr
    38c0:	bf28      	it	cs
    38c2:	f04c 0c02 	orrcs.w	ip, ip, #2
    38c6:	fa43 f305 	asr.w	r3, r3, r5
    38ca:	18c0      	adds	r0, r0, r3
    38cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    38d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    38d4:	d507      	bpl.n	38e6 <__adddf3+0xe6>
    38d6:	f04f 0e00 	mov.w	lr, #0
    38da:	f1dc 0c00 	rsbs	ip, ip, #0
    38de:	eb7e 0000 	sbcs.w	r0, lr, r0
    38e2:	eb6e 0101 	sbc.w	r1, lr, r1
    38e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    38ea:	d31b      	bcc.n	3924 <__adddf3+0x124>
    38ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    38f0:	d30c      	bcc.n	390c <__adddf3+0x10c>
    38f2:	0849      	lsrs	r1, r1, #1
    38f4:	ea5f 0030 	movs.w	r0, r0, rrx
    38f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
    38fc:	f104 0401 	add.w	r4, r4, #1
    3900:	ea4f 5244 	mov.w	r2, r4, lsl #21
    3904:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    3908:	f080 809a 	bcs.w	3a40 <__adddf3+0x240>
    390c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    3910:	bf08      	it	eq
    3912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    3916:	f150 0000 	adcs.w	r0, r0, #0
    391a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    391e:	ea41 0105 	orr.w	r1, r1, r5
    3922:	bd30      	pop	{r4, r5, pc}
    3924:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    3928:	4140      	adcs	r0, r0
    392a:	eb41 0101 	adc.w	r1, r1, r1
    392e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    3932:	f1a4 0401 	sub.w	r4, r4, #1
    3936:	d1e9      	bne.n	390c <__adddf3+0x10c>
    3938:	f091 0f00 	teq	r1, #0
    393c:	bf04      	itt	eq
    393e:	4601      	moveq	r1, r0
    3940:	2000      	moveq	r0, #0
    3942:	fab1 f381 	clz	r3, r1
    3946:	bf08      	it	eq
    3948:	3320      	addeq	r3, #32
    394a:	f1a3 030b 	sub.w	r3, r3, #11
    394e:	f1b3 0220 	subs.w	r2, r3, #32
    3952:	da0c      	bge.n	396e <__adddf3+0x16e>
    3954:	320c      	adds	r2, #12
    3956:	dd08      	ble.n	396a <__adddf3+0x16a>
    3958:	f102 0c14 	add.w	ip, r2, #20
    395c:	f1c2 020c 	rsb	r2, r2, #12
    3960:	fa01 f00c 	lsl.w	r0, r1, ip
    3964:	fa21 f102 	lsr.w	r1, r1, r2
    3968:	e00c      	b.n	3984 <__adddf3+0x184>
    396a:	f102 0214 	add.w	r2, r2, #20
    396e:	bfd8      	it	le
    3970:	f1c2 0c20 	rsble	ip, r2, #32
    3974:	fa01 f102 	lsl.w	r1, r1, r2
    3978:	fa20 fc0c 	lsr.w	ip, r0, ip
    397c:	bfdc      	itt	le
    397e:	ea41 010c 	orrle.w	r1, r1, ip
    3982:	4090      	lslle	r0, r2
    3984:	1ae4      	subs	r4, r4, r3
    3986:	bfa2      	ittt	ge
    3988:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    398c:	4329      	orrge	r1, r5
    398e:	bd30      	popge	{r4, r5, pc}
    3990:	ea6f 0404 	mvn.w	r4, r4
    3994:	3c1f      	subs	r4, #31
    3996:	da1c      	bge.n	39d2 <__adddf3+0x1d2>
    3998:	340c      	adds	r4, #12
    399a:	dc0e      	bgt.n	39ba <__adddf3+0x1ba>
    399c:	f104 0414 	add.w	r4, r4, #20
    39a0:	f1c4 0220 	rsb	r2, r4, #32
    39a4:	fa20 f004 	lsr.w	r0, r0, r4
    39a8:	fa01 f302 	lsl.w	r3, r1, r2
    39ac:	ea40 0003 	orr.w	r0, r0, r3
    39b0:	fa21 f304 	lsr.w	r3, r1, r4
    39b4:	ea45 0103 	orr.w	r1, r5, r3
    39b8:	bd30      	pop	{r4, r5, pc}
    39ba:	f1c4 040c 	rsb	r4, r4, #12
    39be:	f1c4 0220 	rsb	r2, r4, #32
    39c2:	fa20 f002 	lsr.w	r0, r0, r2
    39c6:	fa01 f304 	lsl.w	r3, r1, r4
    39ca:	ea40 0003 	orr.w	r0, r0, r3
    39ce:	4629      	mov	r1, r5
    39d0:	bd30      	pop	{r4, r5, pc}
    39d2:	fa21 f004 	lsr.w	r0, r1, r4
    39d6:	4629      	mov	r1, r5
    39d8:	bd30      	pop	{r4, r5, pc}
    39da:	f094 0f00 	teq	r4, #0
    39de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    39e2:	bf06      	itte	eq
    39e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    39e8:	3401      	addeq	r4, #1
    39ea:	3d01      	subne	r5, #1
    39ec:	e74e      	b.n	388c <__adddf3+0x8c>
    39ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    39f2:	bf18      	it	ne
    39f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    39f8:	d029      	beq.n	3a4e <__adddf3+0x24e>
    39fa:	ea94 0f05 	teq	r4, r5
    39fe:	bf08      	it	eq
    3a00:	ea90 0f02 	teqeq	r0, r2
    3a04:	d005      	beq.n	3a12 <__adddf3+0x212>
    3a06:	ea54 0c00 	orrs.w	ip, r4, r0
    3a0a:	bf04      	itt	eq
    3a0c:	4619      	moveq	r1, r3
    3a0e:	4610      	moveq	r0, r2
    3a10:	bd30      	pop	{r4, r5, pc}
    3a12:	ea91 0f03 	teq	r1, r3
    3a16:	bf1e      	ittt	ne
    3a18:	2100      	movne	r1, #0
    3a1a:	2000      	movne	r0, #0
    3a1c:	bd30      	popne	{r4, r5, pc}
    3a1e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    3a22:	d105      	bne.n	3a30 <__adddf3+0x230>
    3a24:	0040      	lsls	r0, r0, #1
    3a26:	4149      	adcs	r1, r1
    3a28:	bf28      	it	cs
    3a2a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    3a2e:	bd30      	pop	{r4, r5, pc}
    3a30:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    3a34:	bf3c      	itt	cc
    3a36:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    3a3a:	bd30      	popcc	{r4, r5, pc}
    3a3c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    3a40:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    3a44:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    3a48:	f04f 0000 	mov.w	r0, #0
    3a4c:	bd30      	pop	{r4, r5, pc}
    3a4e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    3a52:	bf1a      	itte	ne
    3a54:	4619      	movne	r1, r3
    3a56:	4610      	movne	r0, r2
    3a58:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    3a5c:	bf1c      	itt	ne
    3a5e:	460b      	movne	r3, r1
    3a60:	4602      	movne	r2, r0
    3a62:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    3a66:	bf06      	itte	eq
    3a68:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    3a6c:	ea91 0f03 	teqeq	r1, r3
    3a70:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    3a74:	bd30      	pop	{r4, r5, pc}
    3a76:	bf00      	nop

00003a78 <__aeabi_ui2d>:
    3a78:	f090 0f00 	teq	r0, #0
    3a7c:	bf04      	itt	eq
    3a7e:	2100      	moveq	r1, #0
    3a80:	4770      	bxeq	lr
    3a82:	b530      	push	{r4, r5, lr}
    3a84:	f44f 6480 	mov.w	r4, #1024	; 0x400
    3a88:	f104 0432 	add.w	r4, r4, #50	; 0x32
    3a8c:	f04f 0500 	mov.w	r5, #0
    3a90:	f04f 0100 	mov.w	r1, #0
    3a94:	e750      	b.n	3938 <__adddf3+0x138>
    3a96:	bf00      	nop

00003a98 <__aeabi_i2d>:
    3a98:	f090 0f00 	teq	r0, #0
    3a9c:	bf04      	itt	eq
    3a9e:	2100      	moveq	r1, #0
    3aa0:	4770      	bxeq	lr
    3aa2:	b530      	push	{r4, r5, lr}
    3aa4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    3aa8:	f104 0432 	add.w	r4, r4, #50	; 0x32
    3aac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    3ab0:	bf48      	it	mi
    3ab2:	4240      	negmi	r0, r0
    3ab4:	f04f 0100 	mov.w	r1, #0
    3ab8:	e73e      	b.n	3938 <__adddf3+0x138>
    3aba:	bf00      	nop

00003abc <__aeabi_f2d>:
    3abc:	0042      	lsls	r2, r0, #1
    3abe:	ea4f 01e2 	mov.w	r1, r2, asr #3
    3ac2:	ea4f 0131 	mov.w	r1, r1, rrx
    3ac6:	ea4f 7002 	mov.w	r0, r2, lsl #28
    3aca:	bf1f      	itttt	ne
    3acc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    3ad0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    3ad4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    3ad8:	4770      	bxne	lr
    3ada:	f092 0f00 	teq	r2, #0
    3ade:	bf14      	ite	ne
    3ae0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    3ae4:	4770      	bxeq	lr
    3ae6:	b530      	push	{r4, r5, lr}
    3ae8:	f44f 7460 	mov.w	r4, #896	; 0x380
    3aec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    3af0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    3af4:	e720      	b.n	3938 <__adddf3+0x138>
    3af6:	bf00      	nop

00003af8 <__aeabi_ul2d>:
    3af8:	ea50 0201 	orrs.w	r2, r0, r1
    3afc:	bf08      	it	eq
    3afe:	4770      	bxeq	lr
    3b00:	b530      	push	{r4, r5, lr}
    3b02:	f04f 0500 	mov.w	r5, #0
    3b06:	e00a      	b.n	3b1e <__aeabi_l2d+0x16>

00003b08 <__aeabi_l2d>:
    3b08:	ea50 0201 	orrs.w	r2, r0, r1
    3b0c:	bf08      	it	eq
    3b0e:	4770      	bxeq	lr
    3b10:	b530      	push	{r4, r5, lr}
    3b12:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    3b16:	d502      	bpl.n	3b1e <__aeabi_l2d+0x16>
    3b18:	4240      	negs	r0, r0
    3b1a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    3b1e:	f44f 6480 	mov.w	r4, #1024	; 0x400
    3b22:	f104 0432 	add.w	r4, r4, #50	; 0x32
    3b26:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    3b2a:	f43f aedc 	beq.w	38e6 <__adddf3+0xe6>
    3b2e:	f04f 0203 	mov.w	r2, #3
    3b32:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    3b36:	bf18      	it	ne
    3b38:	3203      	addne	r2, #3
    3b3a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    3b3e:	bf18      	it	ne
    3b40:	3203      	addne	r2, #3
    3b42:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    3b46:	f1c2 0320 	rsb	r3, r2, #32
    3b4a:	fa00 fc03 	lsl.w	ip, r0, r3
    3b4e:	fa20 f002 	lsr.w	r0, r0, r2
    3b52:	fa01 fe03 	lsl.w	lr, r1, r3
    3b56:	ea40 000e 	orr.w	r0, r0, lr
    3b5a:	fa21 f102 	lsr.w	r1, r1, r2
    3b5e:	4414      	add	r4, r2
    3b60:	e6c1      	b.n	38e6 <__adddf3+0xe6>
    3b62:	bf00      	nop

00003b64 <__aeabi_dmul>:
    3b64:	b570      	push	{r4, r5, r6, lr}
    3b66:	f04f 0cff 	mov.w	ip, #255	; 0xff
    3b6a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    3b6e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    3b72:	bf1d      	ittte	ne
    3b74:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    3b78:	ea94 0f0c 	teqne	r4, ip
    3b7c:	ea95 0f0c 	teqne	r5, ip
    3b80:	f000 f8de 	bleq	3d40 <__aeabi_dmul+0x1dc>
    3b84:	442c      	add	r4, r5
    3b86:	ea81 0603 	eor.w	r6, r1, r3
    3b8a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    3b8e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    3b92:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    3b96:	bf18      	it	ne
    3b98:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    3b9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    3ba0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    3ba4:	d038      	beq.n	3c18 <__aeabi_dmul+0xb4>
    3ba6:	fba0 ce02 	umull	ip, lr, r0, r2
    3baa:	f04f 0500 	mov.w	r5, #0
    3bae:	fbe1 e502 	umlal	lr, r5, r1, r2
    3bb2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    3bb6:	fbe0 e503 	umlal	lr, r5, r0, r3
    3bba:	f04f 0600 	mov.w	r6, #0
    3bbe:	fbe1 5603 	umlal	r5, r6, r1, r3
    3bc2:	f09c 0f00 	teq	ip, #0
    3bc6:	bf18      	it	ne
    3bc8:	f04e 0e01 	orrne.w	lr, lr, #1
    3bcc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    3bd0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    3bd4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    3bd8:	d204      	bcs.n	3be4 <__aeabi_dmul+0x80>
    3bda:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    3bde:	416d      	adcs	r5, r5
    3be0:	eb46 0606 	adc.w	r6, r6, r6
    3be4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    3be8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    3bec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    3bf0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    3bf4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    3bf8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    3bfc:	bf88      	it	hi
    3bfe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    3c02:	d81e      	bhi.n	3c42 <__aeabi_dmul+0xde>
    3c04:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    3c08:	bf08      	it	eq
    3c0a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    3c0e:	f150 0000 	adcs.w	r0, r0, #0
    3c12:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    3c16:	bd70      	pop	{r4, r5, r6, pc}
    3c18:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    3c1c:	ea46 0101 	orr.w	r1, r6, r1
    3c20:	ea40 0002 	orr.w	r0, r0, r2
    3c24:	ea81 0103 	eor.w	r1, r1, r3
    3c28:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    3c2c:	bfc2      	ittt	gt
    3c2e:	ebd4 050c 	rsbsgt	r5, r4, ip
    3c32:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    3c36:	bd70      	popgt	{r4, r5, r6, pc}
    3c38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    3c3c:	f04f 0e00 	mov.w	lr, #0
    3c40:	3c01      	subs	r4, #1
    3c42:	f300 80ab 	bgt.w	3d9c <__aeabi_dmul+0x238>
    3c46:	f114 0f36 	cmn.w	r4, #54	; 0x36
    3c4a:	bfde      	ittt	le
    3c4c:	2000      	movle	r0, #0
    3c4e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    3c52:	bd70      	pople	{r4, r5, r6, pc}
    3c54:	f1c4 0400 	rsb	r4, r4, #0
    3c58:	3c20      	subs	r4, #32
    3c5a:	da35      	bge.n	3cc8 <__aeabi_dmul+0x164>
    3c5c:	340c      	adds	r4, #12
    3c5e:	dc1b      	bgt.n	3c98 <__aeabi_dmul+0x134>
    3c60:	f104 0414 	add.w	r4, r4, #20
    3c64:	f1c4 0520 	rsb	r5, r4, #32
    3c68:	fa00 f305 	lsl.w	r3, r0, r5
    3c6c:	fa20 f004 	lsr.w	r0, r0, r4
    3c70:	fa01 f205 	lsl.w	r2, r1, r5
    3c74:	ea40 0002 	orr.w	r0, r0, r2
    3c78:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    3c7c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    3c80:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    3c84:	fa21 f604 	lsr.w	r6, r1, r4
    3c88:	eb42 0106 	adc.w	r1, r2, r6
    3c8c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    3c90:	bf08      	it	eq
    3c92:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    3c96:	bd70      	pop	{r4, r5, r6, pc}
    3c98:	f1c4 040c 	rsb	r4, r4, #12
    3c9c:	f1c4 0520 	rsb	r5, r4, #32
    3ca0:	fa00 f304 	lsl.w	r3, r0, r4
    3ca4:	fa20 f005 	lsr.w	r0, r0, r5
    3ca8:	fa01 f204 	lsl.w	r2, r1, r4
    3cac:	ea40 0002 	orr.w	r0, r0, r2
    3cb0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    3cb4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    3cb8:	f141 0100 	adc.w	r1, r1, #0
    3cbc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    3cc0:	bf08      	it	eq
    3cc2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    3cc6:	bd70      	pop	{r4, r5, r6, pc}
    3cc8:	f1c4 0520 	rsb	r5, r4, #32
    3ccc:	fa00 f205 	lsl.w	r2, r0, r5
    3cd0:	ea4e 0e02 	orr.w	lr, lr, r2
    3cd4:	fa20 f304 	lsr.w	r3, r0, r4
    3cd8:	fa01 f205 	lsl.w	r2, r1, r5
    3cdc:	ea43 0302 	orr.w	r3, r3, r2
    3ce0:	fa21 f004 	lsr.w	r0, r1, r4
    3ce4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    3ce8:	fa21 f204 	lsr.w	r2, r1, r4
    3cec:	ea20 0002 	bic.w	r0, r0, r2
    3cf0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    3cf4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    3cf8:	bf08      	it	eq
    3cfa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    3cfe:	bd70      	pop	{r4, r5, r6, pc}
    3d00:	f094 0f00 	teq	r4, #0
    3d04:	d10f      	bne.n	3d26 <__aeabi_dmul+0x1c2>
    3d06:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    3d0a:	0040      	lsls	r0, r0, #1
    3d0c:	eb41 0101 	adc.w	r1, r1, r1
    3d10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    3d14:	bf08      	it	eq
    3d16:	3c01      	subeq	r4, #1
    3d18:	d0f7      	beq.n	3d0a <__aeabi_dmul+0x1a6>
    3d1a:	ea41 0106 	orr.w	r1, r1, r6
    3d1e:	f095 0f00 	teq	r5, #0
    3d22:	bf18      	it	ne
    3d24:	4770      	bxne	lr
    3d26:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    3d2a:	0052      	lsls	r2, r2, #1
    3d2c:	eb43 0303 	adc.w	r3, r3, r3
    3d30:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    3d34:	bf08      	it	eq
    3d36:	3d01      	subeq	r5, #1
    3d38:	d0f7      	beq.n	3d2a <__aeabi_dmul+0x1c6>
    3d3a:	ea43 0306 	orr.w	r3, r3, r6
    3d3e:	4770      	bx	lr
    3d40:	ea94 0f0c 	teq	r4, ip
    3d44:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    3d48:	bf18      	it	ne
    3d4a:	ea95 0f0c 	teqne	r5, ip
    3d4e:	d00c      	beq.n	3d6a <__aeabi_dmul+0x206>
    3d50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    3d54:	bf18      	it	ne
    3d56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    3d5a:	d1d1      	bne.n	3d00 <__aeabi_dmul+0x19c>
    3d5c:	ea81 0103 	eor.w	r1, r1, r3
    3d60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    3d64:	f04f 0000 	mov.w	r0, #0
    3d68:	bd70      	pop	{r4, r5, r6, pc}
    3d6a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    3d6e:	bf06      	itte	eq
    3d70:	4610      	moveq	r0, r2
    3d72:	4619      	moveq	r1, r3
    3d74:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    3d78:	d019      	beq.n	3dae <__aeabi_dmul+0x24a>
    3d7a:	ea94 0f0c 	teq	r4, ip
    3d7e:	d102      	bne.n	3d86 <__aeabi_dmul+0x222>
    3d80:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    3d84:	d113      	bne.n	3dae <__aeabi_dmul+0x24a>
    3d86:	ea95 0f0c 	teq	r5, ip
    3d8a:	d105      	bne.n	3d98 <__aeabi_dmul+0x234>
    3d8c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    3d90:	bf1c      	itt	ne
    3d92:	4610      	movne	r0, r2
    3d94:	4619      	movne	r1, r3
    3d96:	d10a      	bne.n	3dae <__aeabi_dmul+0x24a>
    3d98:	ea81 0103 	eor.w	r1, r1, r3
    3d9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    3da0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    3da4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    3da8:	f04f 0000 	mov.w	r0, #0
    3dac:	bd70      	pop	{r4, r5, r6, pc}
    3dae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    3db2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    3db6:	bd70      	pop	{r4, r5, r6, pc}

00003db8 <__aeabi_ddiv>:
    3db8:	b570      	push	{r4, r5, r6, lr}
    3dba:	f04f 0cff 	mov.w	ip, #255	; 0xff
    3dbe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    3dc2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    3dc6:	bf1d      	ittte	ne
    3dc8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    3dcc:	ea94 0f0c 	teqne	r4, ip
    3dd0:	ea95 0f0c 	teqne	r5, ip
    3dd4:	f000 f8a7 	bleq	3f26 <__aeabi_ddiv+0x16e>
    3dd8:	eba4 0405 	sub.w	r4, r4, r5
    3ddc:	ea81 0e03 	eor.w	lr, r1, r3
    3de0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    3de4:	ea4f 3101 	mov.w	r1, r1, lsl #12
    3de8:	f000 8088 	beq.w	3efc <__aeabi_ddiv+0x144>
    3dec:	ea4f 3303 	mov.w	r3, r3, lsl #12
    3df0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    3df4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    3df8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    3dfc:	ea4f 2202 	mov.w	r2, r2, lsl #8
    3e00:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    3e04:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    3e08:	ea4f 2600 	mov.w	r6, r0, lsl #8
    3e0c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    3e10:	429d      	cmp	r5, r3
    3e12:	bf08      	it	eq
    3e14:	4296      	cmpeq	r6, r2
    3e16:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    3e1a:	f504 7440 	add.w	r4, r4, #768	; 0x300
    3e1e:	d202      	bcs.n	3e26 <__aeabi_ddiv+0x6e>
    3e20:	085b      	lsrs	r3, r3, #1
    3e22:	ea4f 0232 	mov.w	r2, r2, rrx
    3e26:	1ab6      	subs	r6, r6, r2
    3e28:	eb65 0503 	sbc.w	r5, r5, r3
    3e2c:	085b      	lsrs	r3, r3, #1
    3e2e:	ea4f 0232 	mov.w	r2, r2, rrx
    3e32:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    3e36:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    3e3a:	ebb6 0e02 	subs.w	lr, r6, r2
    3e3e:	eb75 0e03 	sbcs.w	lr, r5, r3
    3e42:	bf22      	ittt	cs
    3e44:	1ab6      	subcs	r6, r6, r2
    3e46:	4675      	movcs	r5, lr
    3e48:	ea40 000c 	orrcs.w	r0, r0, ip
    3e4c:	085b      	lsrs	r3, r3, #1
    3e4e:	ea4f 0232 	mov.w	r2, r2, rrx
    3e52:	ebb6 0e02 	subs.w	lr, r6, r2
    3e56:	eb75 0e03 	sbcs.w	lr, r5, r3
    3e5a:	bf22      	ittt	cs
    3e5c:	1ab6      	subcs	r6, r6, r2
    3e5e:	4675      	movcs	r5, lr
    3e60:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    3e64:	085b      	lsrs	r3, r3, #1
    3e66:	ea4f 0232 	mov.w	r2, r2, rrx
    3e6a:	ebb6 0e02 	subs.w	lr, r6, r2
    3e6e:	eb75 0e03 	sbcs.w	lr, r5, r3
    3e72:	bf22      	ittt	cs
    3e74:	1ab6      	subcs	r6, r6, r2
    3e76:	4675      	movcs	r5, lr
    3e78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    3e7c:	085b      	lsrs	r3, r3, #1
    3e7e:	ea4f 0232 	mov.w	r2, r2, rrx
    3e82:	ebb6 0e02 	subs.w	lr, r6, r2
    3e86:	eb75 0e03 	sbcs.w	lr, r5, r3
    3e8a:	bf22      	ittt	cs
    3e8c:	1ab6      	subcs	r6, r6, r2
    3e8e:	4675      	movcs	r5, lr
    3e90:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    3e94:	ea55 0e06 	orrs.w	lr, r5, r6
    3e98:	d018      	beq.n	3ecc <__aeabi_ddiv+0x114>
    3e9a:	ea4f 1505 	mov.w	r5, r5, lsl #4
    3e9e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    3ea2:	ea4f 1606 	mov.w	r6, r6, lsl #4
    3ea6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    3eaa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    3eae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    3eb2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    3eb6:	d1c0      	bne.n	3e3a <__aeabi_ddiv+0x82>
    3eb8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    3ebc:	d10b      	bne.n	3ed6 <__aeabi_ddiv+0x11e>
    3ebe:	ea41 0100 	orr.w	r1, r1, r0
    3ec2:	f04f 0000 	mov.w	r0, #0
    3ec6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    3eca:	e7b6      	b.n	3e3a <__aeabi_ddiv+0x82>
    3ecc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    3ed0:	bf04      	itt	eq
    3ed2:	4301      	orreq	r1, r0
    3ed4:	2000      	moveq	r0, #0
    3ed6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    3eda:	bf88      	it	hi
    3edc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    3ee0:	f63f aeaf 	bhi.w	3c42 <__aeabi_dmul+0xde>
    3ee4:	ebb5 0c03 	subs.w	ip, r5, r3
    3ee8:	bf04      	itt	eq
    3eea:	ebb6 0c02 	subseq.w	ip, r6, r2
    3eee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    3ef2:	f150 0000 	adcs.w	r0, r0, #0
    3ef6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    3efa:	bd70      	pop	{r4, r5, r6, pc}
    3efc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    3f00:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    3f04:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    3f08:	bfc2      	ittt	gt
    3f0a:	ebd4 050c 	rsbsgt	r5, r4, ip
    3f0e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    3f12:	bd70      	popgt	{r4, r5, r6, pc}
    3f14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    3f18:	f04f 0e00 	mov.w	lr, #0
    3f1c:	3c01      	subs	r4, #1
    3f1e:	e690      	b.n	3c42 <__aeabi_dmul+0xde>
    3f20:	ea45 0e06 	orr.w	lr, r5, r6
    3f24:	e68d      	b.n	3c42 <__aeabi_dmul+0xde>
    3f26:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    3f2a:	ea94 0f0c 	teq	r4, ip
    3f2e:	bf08      	it	eq
    3f30:	ea95 0f0c 	teqeq	r5, ip
    3f34:	f43f af3b 	beq.w	3dae <__aeabi_dmul+0x24a>
    3f38:	ea94 0f0c 	teq	r4, ip
    3f3c:	d10a      	bne.n	3f54 <__aeabi_ddiv+0x19c>
    3f3e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    3f42:	f47f af34 	bne.w	3dae <__aeabi_dmul+0x24a>
    3f46:	ea95 0f0c 	teq	r5, ip
    3f4a:	f47f af25 	bne.w	3d98 <__aeabi_dmul+0x234>
    3f4e:	4610      	mov	r0, r2
    3f50:	4619      	mov	r1, r3
    3f52:	e72c      	b.n	3dae <__aeabi_dmul+0x24a>
    3f54:	ea95 0f0c 	teq	r5, ip
    3f58:	d106      	bne.n	3f68 <__aeabi_ddiv+0x1b0>
    3f5a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    3f5e:	f43f aefd 	beq.w	3d5c <__aeabi_dmul+0x1f8>
    3f62:	4610      	mov	r0, r2
    3f64:	4619      	mov	r1, r3
    3f66:	e722      	b.n	3dae <__aeabi_dmul+0x24a>
    3f68:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    3f6c:	bf18      	it	ne
    3f6e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    3f72:	f47f aec5 	bne.w	3d00 <__aeabi_dmul+0x19c>
    3f76:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    3f7a:	f47f af0d 	bne.w	3d98 <__aeabi_dmul+0x234>
    3f7e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    3f82:	f47f aeeb 	bne.w	3d5c <__aeabi_dmul+0x1f8>
    3f86:	e712      	b.n	3dae <__aeabi_dmul+0x24a>

00003f88 <__aeabi_d2f>:
    3f88:	ea4f 0241 	mov.w	r2, r1, lsl #1
    3f8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    3f90:	bf24      	itt	cs
    3f92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    3f96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    3f9a:	d90d      	bls.n	3fb8 <__aeabi_d2f+0x30>
    3f9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    3fa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    3fa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    3fa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    3fac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    3fb0:	bf08      	it	eq
    3fb2:	f020 0001 	biceq.w	r0, r0, #1
    3fb6:	4770      	bx	lr
    3fb8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    3fbc:	d121      	bne.n	4002 <__aeabi_d2f+0x7a>
    3fbe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    3fc2:	bfbc      	itt	lt
    3fc4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    3fc8:	4770      	bxlt	lr
    3fca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    3fce:	ea4f 5252 	mov.w	r2, r2, lsr #21
    3fd2:	f1c2 0218 	rsb	r2, r2, #24
    3fd6:	f1c2 0c20 	rsb	ip, r2, #32
    3fda:	fa10 f30c 	lsls.w	r3, r0, ip
    3fde:	fa20 f002 	lsr.w	r0, r0, r2
    3fe2:	bf18      	it	ne
    3fe4:	f040 0001 	orrne.w	r0, r0, #1
    3fe8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    3fec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    3ff0:	fa03 fc0c 	lsl.w	ip, r3, ip
    3ff4:	ea40 000c 	orr.w	r0, r0, ip
    3ff8:	fa23 f302 	lsr.w	r3, r3, r2
    3ffc:	ea4f 0343 	mov.w	r3, r3, lsl #1
    4000:	e7cc      	b.n	3f9c <__aeabi_d2f+0x14>
    4002:	ea7f 5362 	mvns.w	r3, r2, asr #21
    4006:	d107      	bne.n	4018 <__aeabi_d2f+0x90>
    4008:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    400c:	bf1e      	ittt	ne
    400e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    4012:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    4016:	4770      	bxne	lr
    4018:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    401c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    4020:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    4024:	4770      	bx	lr
    4026:	bf00      	nop

00004028 <__aeabi_fmul>:
    4028:	f04f 0cff 	mov.w	ip, #255	; 0xff
    402c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    4030:	bf1e      	ittt	ne
    4032:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    4036:	ea92 0f0c 	teqne	r2, ip
    403a:	ea93 0f0c 	teqne	r3, ip
    403e:	d06f      	beq.n	4120 <__aeabi_fmul+0xf8>
    4040:	441a      	add	r2, r3
    4042:	ea80 0c01 	eor.w	ip, r0, r1
    4046:	0240      	lsls	r0, r0, #9
    4048:	bf18      	it	ne
    404a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    404e:	d01e      	beq.n	408e <__aeabi_fmul+0x66>
    4050:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    4054:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    4058:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    405c:	fba0 3101 	umull	r3, r1, r0, r1
    4060:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    4064:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    4068:	bf3e      	ittt	cc
    406a:	0049      	lslcc	r1, r1, #1
    406c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    4070:	005b      	lslcc	r3, r3, #1
    4072:	ea40 0001 	orr.w	r0, r0, r1
    4076:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    407a:	2afd      	cmp	r2, #253	; 0xfd
    407c:	d81d      	bhi.n	40ba <__aeabi_fmul+0x92>
    407e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    4082:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    4086:	bf08      	it	eq
    4088:	f020 0001 	biceq.w	r0, r0, #1
    408c:	4770      	bx	lr
    408e:	f090 0f00 	teq	r0, #0
    4092:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    4096:	bf08      	it	eq
    4098:	0249      	lsleq	r1, r1, #9
    409a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    409e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    40a2:	3a7f      	subs	r2, #127	; 0x7f
    40a4:	bfc2      	ittt	gt
    40a6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    40aa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    40ae:	4770      	bxgt	lr
    40b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    40b4:	f04f 0300 	mov.w	r3, #0
    40b8:	3a01      	subs	r2, #1
    40ba:	dc5d      	bgt.n	4178 <__aeabi_fmul+0x150>
    40bc:	f112 0f19 	cmn.w	r2, #25
    40c0:	bfdc      	itt	le
    40c2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    40c6:	4770      	bxle	lr
    40c8:	f1c2 0200 	rsb	r2, r2, #0
    40cc:	0041      	lsls	r1, r0, #1
    40ce:	fa21 f102 	lsr.w	r1, r1, r2
    40d2:	f1c2 0220 	rsb	r2, r2, #32
    40d6:	fa00 fc02 	lsl.w	ip, r0, r2
    40da:	ea5f 0031 	movs.w	r0, r1, rrx
    40de:	f140 0000 	adc.w	r0, r0, #0
    40e2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    40e6:	bf08      	it	eq
    40e8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    40ec:	4770      	bx	lr
    40ee:	f092 0f00 	teq	r2, #0
    40f2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    40f6:	bf02      	ittt	eq
    40f8:	0040      	lsleq	r0, r0, #1
    40fa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    40fe:	3a01      	subeq	r2, #1
    4100:	d0f9      	beq.n	40f6 <__aeabi_fmul+0xce>
    4102:	ea40 000c 	orr.w	r0, r0, ip
    4106:	f093 0f00 	teq	r3, #0
    410a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    410e:	bf02      	ittt	eq
    4110:	0049      	lsleq	r1, r1, #1
    4112:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    4116:	3b01      	subeq	r3, #1
    4118:	d0f9      	beq.n	410e <__aeabi_fmul+0xe6>
    411a:	ea41 010c 	orr.w	r1, r1, ip
    411e:	e78f      	b.n	4040 <__aeabi_fmul+0x18>
    4120:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    4124:	ea92 0f0c 	teq	r2, ip
    4128:	bf18      	it	ne
    412a:	ea93 0f0c 	teqne	r3, ip
    412e:	d00a      	beq.n	4146 <__aeabi_fmul+0x11e>
    4130:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    4134:	bf18      	it	ne
    4136:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    413a:	d1d8      	bne.n	40ee <__aeabi_fmul+0xc6>
    413c:	ea80 0001 	eor.w	r0, r0, r1
    4140:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    4144:	4770      	bx	lr
    4146:	f090 0f00 	teq	r0, #0
    414a:	bf17      	itett	ne
    414c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    4150:	4608      	moveq	r0, r1
    4152:	f091 0f00 	teqne	r1, #0
    4156:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    415a:	d014      	beq.n	4186 <__aeabi_fmul+0x15e>
    415c:	ea92 0f0c 	teq	r2, ip
    4160:	d101      	bne.n	4166 <__aeabi_fmul+0x13e>
    4162:	0242      	lsls	r2, r0, #9
    4164:	d10f      	bne.n	4186 <__aeabi_fmul+0x15e>
    4166:	ea93 0f0c 	teq	r3, ip
    416a:	d103      	bne.n	4174 <__aeabi_fmul+0x14c>
    416c:	024b      	lsls	r3, r1, #9
    416e:	bf18      	it	ne
    4170:	4608      	movne	r0, r1
    4172:	d108      	bne.n	4186 <__aeabi_fmul+0x15e>
    4174:	ea80 0001 	eor.w	r0, r0, r1
    4178:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    417c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    4180:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    4184:	4770      	bx	lr
    4186:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    418a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    418e:	4770      	bx	lr

00004190 <__aeabi_fdiv>:
    4190:	f04f 0cff 	mov.w	ip, #255	; 0xff
    4194:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    4198:	bf1e      	ittt	ne
    419a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    419e:	ea92 0f0c 	teqne	r2, ip
    41a2:	ea93 0f0c 	teqne	r3, ip
    41a6:	d069      	beq.n	427c <__aeabi_fdiv+0xec>
    41a8:	eba2 0203 	sub.w	r2, r2, r3
    41ac:	ea80 0c01 	eor.w	ip, r0, r1
    41b0:	0249      	lsls	r1, r1, #9
    41b2:	ea4f 2040 	mov.w	r0, r0, lsl #9
    41b6:	d037      	beq.n	4228 <__aeabi_fdiv+0x98>
    41b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    41bc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    41c0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    41c4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    41c8:	428b      	cmp	r3, r1
    41ca:	bf38      	it	cc
    41cc:	005b      	lslcc	r3, r3, #1
    41ce:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    41d2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    41d6:	428b      	cmp	r3, r1
    41d8:	bf24      	itt	cs
    41da:	1a5b      	subcs	r3, r3, r1
    41dc:	ea40 000c 	orrcs.w	r0, r0, ip
    41e0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    41e4:	bf24      	itt	cs
    41e6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    41ea:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    41ee:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    41f2:	bf24      	itt	cs
    41f4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    41f8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    41fc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    4200:	bf24      	itt	cs
    4202:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    4206:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    420a:	011b      	lsls	r3, r3, #4
    420c:	bf18      	it	ne
    420e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    4212:	d1e0      	bne.n	41d6 <__aeabi_fdiv+0x46>
    4214:	2afd      	cmp	r2, #253	; 0xfd
    4216:	f63f af50 	bhi.w	40ba <__aeabi_fmul+0x92>
    421a:	428b      	cmp	r3, r1
    421c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    4220:	bf08      	it	eq
    4222:	f020 0001 	biceq.w	r0, r0, #1
    4226:	4770      	bx	lr
    4228:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    422c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    4230:	327f      	adds	r2, #127	; 0x7f
    4232:	bfc2      	ittt	gt
    4234:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    4238:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    423c:	4770      	bxgt	lr
    423e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    4242:	f04f 0300 	mov.w	r3, #0
    4246:	3a01      	subs	r2, #1
    4248:	e737      	b.n	40ba <__aeabi_fmul+0x92>
    424a:	f092 0f00 	teq	r2, #0
    424e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    4252:	bf02      	ittt	eq
    4254:	0040      	lsleq	r0, r0, #1
    4256:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    425a:	3a01      	subeq	r2, #1
    425c:	d0f9      	beq.n	4252 <__aeabi_fdiv+0xc2>
    425e:	ea40 000c 	orr.w	r0, r0, ip
    4262:	f093 0f00 	teq	r3, #0
    4266:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    426a:	bf02      	ittt	eq
    426c:	0049      	lsleq	r1, r1, #1
    426e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    4272:	3b01      	subeq	r3, #1
    4274:	d0f9      	beq.n	426a <__aeabi_fdiv+0xda>
    4276:	ea41 010c 	orr.w	r1, r1, ip
    427a:	e795      	b.n	41a8 <__aeabi_fdiv+0x18>
    427c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    4280:	ea92 0f0c 	teq	r2, ip
    4284:	d108      	bne.n	4298 <__aeabi_fdiv+0x108>
    4286:	0242      	lsls	r2, r0, #9
    4288:	f47f af7d 	bne.w	4186 <__aeabi_fmul+0x15e>
    428c:	ea93 0f0c 	teq	r3, ip
    4290:	f47f af70 	bne.w	4174 <__aeabi_fmul+0x14c>
    4294:	4608      	mov	r0, r1
    4296:	e776      	b.n	4186 <__aeabi_fmul+0x15e>
    4298:	ea93 0f0c 	teq	r3, ip
    429c:	d104      	bne.n	42a8 <__aeabi_fdiv+0x118>
    429e:	024b      	lsls	r3, r1, #9
    42a0:	f43f af4c 	beq.w	413c <__aeabi_fmul+0x114>
    42a4:	4608      	mov	r0, r1
    42a6:	e76e      	b.n	4186 <__aeabi_fmul+0x15e>
    42a8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    42ac:	bf18      	it	ne
    42ae:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    42b2:	d1ca      	bne.n	424a <__aeabi_fdiv+0xba>
    42b4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    42b8:	f47f af5c 	bne.w	4174 <__aeabi_fmul+0x14c>
    42bc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    42c0:	f47f af3c 	bne.w	413c <__aeabi_fmul+0x114>
    42c4:	e75f      	b.n	4186 <__aeabi_fmul+0x15e>
    42c6:	bf00      	nop

000042c8 <__aeabi_f2uiz>:
    42c8:	0042      	lsls	r2, r0, #1
    42ca:	d20e      	bcs.n	42ea <__aeabi_f2uiz+0x22>
    42cc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    42d0:	d30b      	bcc.n	42ea <__aeabi_f2uiz+0x22>
    42d2:	f04f 039e 	mov.w	r3, #158	; 0x9e
    42d6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    42da:	d409      	bmi.n	42f0 <__aeabi_f2uiz+0x28>
    42dc:	ea4f 2300 	mov.w	r3, r0, lsl #8
    42e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    42e4:	fa23 f002 	lsr.w	r0, r3, r2
    42e8:	4770      	bx	lr
    42ea:	f04f 0000 	mov.w	r0, #0
    42ee:	4770      	bx	lr
    42f0:	f112 0f61 	cmn.w	r2, #97	; 0x61
    42f4:	d101      	bne.n	42fa <__aeabi_f2uiz+0x32>
    42f6:	0242      	lsls	r2, r0, #9
    42f8:	d102      	bne.n	4300 <__aeabi_f2uiz+0x38>
    42fa:	f04f 30ff 	mov.w	r0, #4294967295
    42fe:	4770      	bx	lr
    4300:	f04f 0000 	mov.w	r0, #0
    4304:	4770      	bx	lr
    4306:	bf00      	nop

00004308 <__libc_init_array>:
    4308:	b570      	push	{r4, r5, r6, lr}
    430a:	f244 5694 	movw	r6, #17812	; 0x4594
    430e:	f244 5594 	movw	r5, #17812	; 0x4594
    4312:	f2c0 0600 	movt	r6, #0
    4316:	f2c0 0500 	movt	r5, #0
    431a:	1b76      	subs	r6, r6, r5
    431c:	10b6      	asrs	r6, r6, #2
    431e:	d006      	beq.n	432e <__libc_init_array+0x26>
    4320:	2400      	movs	r4, #0
    4322:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    4326:	3401      	adds	r4, #1
    4328:	4798      	blx	r3
    432a:	42a6      	cmp	r6, r4
    432c:	d8f9      	bhi.n	4322 <__libc_init_array+0x1a>
    432e:	f244 5594 	movw	r5, #17812	; 0x4594
    4332:	f244 5698 	movw	r6, #17816	; 0x4598
    4336:	f2c0 0500 	movt	r5, #0
    433a:	f2c0 0600 	movt	r6, #0
    433e:	1b76      	subs	r6, r6, r5
    4340:	f000 f91c 	bl	457c <_init>
    4344:	10b6      	asrs	r6, r6, #2
    4346:	d006      	beq.n	4356 <__libc_init_array+0x4e>
    4348:	2400      	movs	r4, #0
    434a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    434e:	3401      	adds	r4, #1
    4350:	4798      	blx	r3
    4352:	42a6      	cmp	r6, r4
    4354:	d8f9      	bhi.n	434a <__libc_init_array+0x42>
    4356:	bd70      	pop	{r4, r5, r6, pc}

00004358 <memset>:
    4358:	2a03      	cmp	r2, #3
    435a:	b2c9      	uxtb	r1, r1
    435c:	b430      	push	{r4, r5}
    435e:	d807      	bhi.n	4370 <memset+0x18>
    4360:	b122      	cbz	r2, 436c <memset+0x14>
    4362:	2300      	movs	r3, #0
    4364:	54c1      	strb	r1, [r0, r3]
    4366:	3301      	adds	r3, #1
    4368:	4293      	cmp	r3, r2
    436a:	d1fb      	bne.n	4364 <memset+0xc>
    436c:	bc30      	pop	{r4, r5}
    436e:	4770      	bx	lr
    4370:	eb00 0c02 	add.w	ip, r0, r2
    4374:	4603      	mov	r3, r0
    4376:	e001      	b.n	437c <memset+0x24>
    4378:	f803 1c01 	strb.w	r1, [r3, #-1]
    437c:	f003 0403 	and.w	r4, r3, #3
    4380:	461a      	mov	r2, r3
    4382:	3301      	adds	r3, #1
    4384:	2c00      	cmp	r4, #0
    4386:	d1f7      	bne.n	4378 <memset+0x20>
    4388:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
    438c:	ebc2 040c 	rsb	r4, r2, ip
    4390:	fb03 f301 	mul.w	r3, r3, r1
    4394:	e01f      	b.n	43d6 <memset+0x7e>
    4396:	f842 3c40 	str.w	r3, [r2, #-64]
    439a:	f842 3c3c 	str.w	r3, [r2, #-60]
    439e:	f842 3c38 	str.w	r3, [r2, #-56]
    43a2:	f842 3c34 	str.w	r3, [r2, #-52]
    43a6:	f842 3c30 	str.w	r3, [r2, #-48]
    43aa:	f842 3c2c 	str.w	r3, [r2, #-44]
    43ae:	f842 3c28 	str.w	r3, [r2, #-40]
    43b2:	f842 3c24 	str.w	r3, [r2, #-36]
    43b6:	f842 3c20 	str.w	r3, [r2, #-32]
    43ba:	f842 3c1c 	str.w	r3, [r2, #-28]
    43be:	f842 3c18 	str.w	r3, [r2, #-24]
    43c2:	f842 3c14 	str.w	r3, [r2, #-20]
    43c6:	f842 3c10 	str.w	r3, [r2, #-16]
    43ca:	f842 3c0c 	str.w	r3, [r2, #-12]
    43ce:	f842 3c08 	str.w	r3, [r2, #-8]
    43d2:	f842 3c04 	str.w	r3, [r2, #-4]
    43d6:	4615      	mov	r5, r2
    43d8:	3240      	adds	r2, #64	; 0x40
    43da:	2c3f      	cmp	r4, #63	; 0x3f
    43dc:	f1a4 0440 	sub.w	r4, r4, #64	; 0x40
    43e0:	dcd9      	bgt.n	4396 <memset+0x3e>
    43e2:	462a      	mov	r2, r5
    43e4:	ebc5 040c 	rsb	r4, r5, ip
    43e8:	e007      	b.n	43fa <memset+0xa2>
    43ea:	f842 3c10 	str.w	r3, [r2, #-16]
    43ee:	f842 3c0c 	str.w	r3, [r2, #-12]
    43f2:	f842 3c08 	str.w	r3, [r2, #-8]
    43f6:	f842 3c04 	str.w	r3, [r2, #-4]
    43fa:	4615      	mov	r5, r2
    43fc:	3210      	adds	r2, #16
    43fe:	2c0f      	cmp	r4, #15
    4400:	f1a4 0410 	sub.w	r4, r4, #16
    4404:	dcf1      	bgt.n	43ea <memset+0x92>
    4406:	462a      	mov	r2, r5
    4408:	ebc5 050c 	rsb	r5, r5, ip
    440c:	e001      	b.n	4412 <memset+0xba>
    440e:	f842 3c04 	str.w	r3, [r2, #-4]
    4412:	4614      	mov	r4, r2
    4414:	3204      	adds	r2, #4
    4416:	2d03      	cmp	r5, #3
    4418:	f1a5 0504 	sub.w	r5, r5, #4
    441c:	dcf7      	bgt.n	440e <memset+0xb6>
    441e:	e001      	b.n	4424 <memset+0xcc>
    4420:	f804 1b01 	strb.w	r1, [r4], #1
    4424:	4564      	cmp	r4, ip
    4426:	d3fb      	bcc.n	4420 <memset+0xc8>
    4428:	e7a0      	b.n	436c <memset+0x14>
    442a:	bf00      	nop

0000442c <C.18.4556>:
    442c:	ffff ffff 0000 0000                         ........

00004434 <C.33.4592>:
    4434:	1111 1111 0000 0000                         ........

0000443c <initcmd>:
    443c:	03ef 8003 cf02 0003 30c1 04ed 0364 8112     .........0..d...
    444c:	03e8 0085 cb78 3905 002c 0234 01f7 ea20     ....x..9,.4... .
    445c:	0002 c000 2301 01c1 c510 3e02 c728 8601     .....#.....>(...
    446c:	0136 3748 0001 013a b155 0002 b618 0803     6.H7..:.U.......
    447c:	2782 01f2 2600 0101 0fe0 310f 0c2b 080e     .'...&.....1+...
    448c:	f14e 0737 0310 090e e100 000f 140e 1103     N.7.............
    449c:	3107 48c1 0f08 310c 0f36 8011 8029 0000     .1.H...16...)...

000044ac <g_gpio_irqn_lut>:
    44ac:	0020 0021 0022 0023 0024 0025 0026 0027      .!.".#.$.%.&.'.
    44bc:	0028 0029 002a 002b 002c 002d 002e 002f     (.).*.+.,.-.../.
    44cc:	0030 0031 0032 0033 0034 0035 0036 0037     0.1.2.3.4.5.6.7.
    44dc:	0038 0039 003a 003b 003c 003d 003e 003f     8.9.:.;.<.=.>.?.

000044ec <g_config_reg_lut>:
    44ec:	3000 4001 3004 4001 3008 4001 300c 4001     .0.@.0.@.0.@.0.@
    44fc:	3010 4001 3014 4001 3018 4001 301c 4001     .0.@.0.@.0.@.0.@
    450c:	3020 4001 3024 4001 3028 4001 302c 4001      0.@$0.@(0.@,0.@
    451c:	3030 4001 3034 4001 3038 4001 303c 4001     00.@40.@80.@<0.@
    452c:	3040 4001 3044 4001 3048 4001 304c 4001     @0.@D0.@H0.@L0.@
    453c:	3050 4001 3054 4001 3058 4001 305c 4001     P0.@T0.@X0.@\0.@
    454c:	3060 4001 3064 4001 3068 4001 306c 4001     `0.@d0.@h0.@l0.@
    455c:	3070 4001 3074 4001 3078 4001 307c 4001     p0.@t0.@x0.@|0.@

0000456c <C.16.2565>:
    456c:	0001 0000 0002 0000 0004 0000 0001 0000     ................

0000457c <_init>:
    457c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    457e:	bf00      	nop
    4580:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4582:	bc08      	pop	{r3}
    4584:	469e      	mov	lr, r3
    4586:	4770      	bx	lr

00004588 <_fini>:
    4588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    458a:	bf00      	nop
    458c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    458e:	bc08      	pop	{r3}
    4590:	469e      	mov	lr, r3
    4592:	4770      	bx	lr

00004594 <__frame_dummy_init_array_entry>:
    4594:	0485 0000                                   ....

00004598 <__do_global_dtors_aux_fini_array_entry>:
    4598:	0471 0000                                   q...
