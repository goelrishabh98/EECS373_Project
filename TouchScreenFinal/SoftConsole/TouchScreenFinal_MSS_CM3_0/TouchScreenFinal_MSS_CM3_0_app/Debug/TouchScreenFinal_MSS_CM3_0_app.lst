
TouchScreenFinal_MSS_CM3_0_app:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004140  20000000  20000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005c  20004140  20004140  0000c140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002a4  2000419c  2000419c  0000c19c  2**2
                  ALLOC
  3 .stack        00003000  20004440  20004440  0000c19c  2**0
                  ALLOC
  4 .comment      0000025a  00000000  00000000  0000c19c  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000009a0  00000000  00000000  0000c3f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001a0c  00000000  00000000  0000cd96  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000f8e3  00000000  00000000  0000e7a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001cd8  00000000  00000000  0001e085  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000052ae  00000000  00000000  0001fd5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000019c8  00000000  00000000  0002500c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004dc4  00000000  00000000  000269d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003af2  00000000  00000000  0002b798  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 0005d06b  00000000  00000000  0002f28a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000025  00000000  00000000  0008c2f5  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 000009b0  00000000  00000000  0008c31a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

20000000 <__text_start>:
20000000:	20010000 	.word	0x20010000
20000004:	20000299 	.word	0x20000299
20000008:	20000309 	.word	0x20000309
2000000c:	2000030b 	.word	0x2000030b
20000010:	2000030d 	.word	0x2000030d
20000014:	2000030f 	.word	0x2000030f
20000018:	20000311 	.word	0x20000311
	...
2000002c:	20000313 	.word	0x20000313
20000030:	20000315 	.word	0x20000315
20000034:	00000000 	.word	0x00000000
20000038:	20000317 	.word	0x20000317
2000003c:	20000319 	.word	0x20000319
20000040:	2000031b 	.word	0x2000031b
20000044:	2000031d 	.word	0x2000031d
20000048:	2000031f 	.word	0x2000031f
2000004c:	20000321 	.word	0x20000321
20000050:	20000323 	.word	0x20000323
20000054:	20000325 	.word	0x20000325
20000058:	20000327 	.word	0x20000327
2000005c:	20000329 	.word	0x20000329
20000060:	2000032b 	.word	0x2000032b
20000064:	2000032d 	.word	0x2000032d
20000068:	20001835 	.word	0x20001835
2000006c:	20001865 	.word	0x20001865
20000070:	20002099 	.word	0x20002099
20000074:	200020c9 	.word	0x200020c9
20000078:	200027c1 	.word	0x200027c1
2000007c:	20000339 	.word	0x20000339
20000080:	2000033b 	.word	0x2000033b
20000084:	200027f1 	.word	0x200027f1
20000088:	2000033f 	.word	0x2000033f
2000008c:	20000341 	.word	0x20000341
20000090:	20000343 	.word	0x20000343
20000094:	20000345 	.word	0x20000345
20000098:	20000347 	.word	0x20000347
2000009c:	20000349 	.word	0x20000349
200000a0:	2000034b 	.word	0x2000034b
	...
200000bc:	2000034d 	.word	0x2000034d
200000c0:	2000034f 	.word	0x2000034f
200000c4:	20000351 	.word	0x20000351
200000c8:	20000353 	.word	0x20000353
200000cc:	20000355 	.word	0x20000355
200000d0:	20000357 	.word	0x20000357
200000d4:	20000359 	.word	0x20000359
200000d8:	2000035b 	.word	0x2000035b
200000dc:	2000035d 	.word	0x2000035d
200000e0:	2000035f 	.word	0x2000035f
200000e4:	20000361 	.word	0x20000361
200000e8:	20000363 	.word	0x20000363
200000ec:	20000365 	.word	0x20000365
200000f0:	20000367 	.word	0x20000367
200000f4:	20000369 	.word	0x20000369
200000f8:	2000036b 	.word	0x2000036b
200000fc:	2000036d 	.word	0x2000036d
20000100:	2000036f 	.word	0x2000036f
20000104:	20000371 	.word	0x20000371
20000108:	20000373 	.word	0x20000373
2000010c:	20000375 	.word	0x20000375
20000110:	20000377 	.word	0x20000377
20000114:	20000379 	.word	0x20000379
20000118:	2000037b 	.word	0x2000037b
2000011c:	2000037d 	.word	0x2000037d
20000120:	2000037f 	.word	0x2000037f
20000124:	20000381 	.word	0x20000381
20000128:	20000383 	.word	0x20000383
2000012c:	20000385 	.word	0x20000385
20000130:	20000387 	.word	0x20000387
20000134:	20000389 	.word	0x20000389
20000138:	2000038b 	.word	0x2000038b
2000013c:	2000038d 	.word	0x2000038d
20000140:	2000038f 	.word	0x2000038f
20000144:	20000391 	.word	0x20000391
20000148:	20000393 	.word	0x20000393
2000014c:	20000395 	.word	0x20000395
20000150:	20000397 	.word	0x20000397
20000154:	20000399 	.word	0x20000399
20000158:	2000039b 	.word	0x2000039b
2000015c:	2000039d 	.word	0x2000039d
20000160:	2000039f 	.word	0x2000039f
20000164:	200003a1 	.word	0x200003a1
20000168:	200003a3 	.word	0x200003a3
2000016c:	200003a5 	.word	0x200003a5
20000170:	200003a7 	.word	0x200003a7
20000174:	200003a9 	.word	0x200003a9
20000178:	200003ab 	.word	0x200003ab
2000017c:	200003ad 	.word	0x200003ad
20000180:	200003af 	.word	0x200003af
20000184:	200003b1 	.word	0x200003b1
20000188:	200003b3 	.word	0x200003b3
2000018c:	200003b5 	.word	0x200003b5
20000190:	200003b7 	.word	0x200003b7
20000194:	200003b9 	.word	0x200003b9
20000198:	200003bb 	.word	0x200003bb
2000019c:	200003bd 	.word	0x200003bd
200001a0:	200003bf 	.word	0x200003bf
200001a4:	200003c1 	.word	0x200003c1
200001a8:	200003c3 	.word	0x200003c3
200001ac:	200003c5 	.word	0x200003c5
200001b0:	200003c7 	.word	0x200003c7
200001b4:	200003c9 	.word	0x200003c9
200001b8:	200003cb 	.word	0x200003cb
200001bc:	200003cd 	.word	0x200003cd
200001c0:	200003cf 	.word	0x200003cf
200001c4:	200003d1 	.word	0x200003d1
200001c8:	200003d3 	.word	0x200003d3
200001cc:	200003d5 	.word	0x200003d5
200001d0:	200003d7 	.word	0x200003d7
200001d4:	200003d9 	.word	0x200003d9
200001d8:	200003db 	.word	0x200003db
200001dc:	200003dd 	.word	0x200003dd
200001e0:	200003df 	.word	0x200003df
200001e4:	200003e1 	.word	0x200003e1
200001e8:	200003e3 	.word	0x200003e3
200001ec:	200003e5 	.word	0x200003e5
200001f0:	200003e7 	.word	0x200003e7
200001f4:	200003e9 	.word	0x200003e9
200001f8:	200003eb 	.word	0x200003eb
200001fc:	200003ed 	.word	0x200003ed
20000200:	200003ef 	.word	0x200003ef
20000204:	200003f1 	.word	0x200003f1
20000208:	200003f3 	.word	0x200003f3
2000020c:	200003f5 	.word	0x200003f5
20000210:	200003f7 	.word	0x200003f7
20000214:	200003f9 	.word	0x200003f9
20000218:	20002e41 	.word	0x20002e41
2000021c:	20002e61 	.word	0x20002e61
20000220:	20002e81 	.word	0x20002e81
20000224:	20002ea1 	.word	0x20002ea1
20000228:	20002ec1 	.word	0x20002ec1
2000022c:	20002ee1 	.word	0x20002ee1
20000230:	20002f01 	.word	0x20002f01
20000234:	20002f21 	.word	0x20002f21
20000238:	20002f41 	.word	0x20002f41
2000023c:	20002f61 	.word	0x20002f61
20000240:	20002f81 	.word	0x20002f81
20000244:	20002fa1 	.word	0x20002fa1
20000248:	20002fc1 	.word	0x20002fc1
2000024c:	20002fe1 	.word	0x20002fe1
20000250:	20003001 	.word	0x20003001
20000254:	20003021 	.word	0x20003021
20000258:	20003041 	.word	0x20003041
2000025c:	20003061 	.word	0x20003061
20000260:	20003081 	.word	0x20003081
20000264:	200030a1 	.word	0x200030a1
20000268:	200030c1 	.word	0x200030c1
2000026c:	200030e1 	.word	0x200030e1
20000270:	20003101 	.word	0x20003101
20000274:	20003121 	.word	0x20003121
20000278:	20003141 	.word	0x20003141
2000027c:	20003161 	.word	0x20003161
20000280:	20003181 	.word	0x20003181
20000284:	200031a1 	.word	0x200031a1
20000288:	200031c1 	.word	0x200031c1
2000028c:	200031e1 	.word	0x200031e1
20000290:	20003201 	.word	0x20003201
20000294:	20003221 	.word	0x20003221

20000298 <Reset_Handler>:
20000298:	4868      	ldr	r0, [pc, #416]	; (2000043c <ACE_ADC2_FifoEmpty_IRQHandler+0x44>)
2000029a:	4780      	blx	r0
2000029c:	4868      	ldr	r0, [pc, #416]	; (20000440 <ACE_ADC2_FifoEmpty_IRQHandler+0x48>)
2000029e:	2800      	cmp	r0, #0
200002a0:	d10b      	bne.n	200002ba <copy_data>
200002a2:	4868      	ldr	r0, [pc, #416]	; (20000444 <ACE_ADC2_FifoEmpty_IRQHandler+0x4c>)
200002a4:	4968      	ldr	r1, [pc, #416]	; (20000448 <ACE_ADC2_FifoEmpty_IRQHandler+0x50>)
200002a6:	4a69      	ldr	r2, [pc, #420]	; (2000044c <ACE_ADC2_FifoEmpty_IRQHandler+0x54>)
200002a8:	4288      	cmp	r0, r1
200002aa:	d006      	beq.n	200002ba <copy_data>

200002ac <copy_code_loop>:
200002ac:	4291      	cmp	r1, r2
200002ae:	bf1c      	itt	ne
200002b0:	f850 3b04 	ldrne.w	r3, [r0], #4
200002b4:	f841 3b04 	strne.w	r3, [r1], #4
200002b8:	d1f8      	bne.n	200002ac <copy_code_loop>

200002ba <copy_data>:
200002ba:	4865      	ldr	r0, [pc, #404]	; (20000450 <ACE_ADC2_FifoEmpty_IRQHandler+0x58>)
200002bc:	4965      	ldr	r1, [pc, #404]	; (20000454 <ACE_ADC2_FifoEmpty_IRQHandler+0x5c>)
200002be:	4a66      	ldr	r2, [pc, #408]	; (20000458 <ACE_ADC2_FifoEmpty_IRQHandler+0x60>)
200002c0:	4288      	cmp	r0, r1
200002c2:	d006      	beq.n	200002d2 <clear_bss>

200002c4 <copy_data_loop>:
200002c4:	4291      	cmp	r1, r2
200002c6:	bf1c      	itt	ne
200002c8:	f850 3b04 	ldrne.w	r3, [r0], #4
200002cc:	f841 3b04 	strne.w	r3, [r1], #4
200002d0:	d1f8      	bne.n	200002c4 <copy_data_loop>

200002d2 <clear_bss>:
200002d2:	4862      	ldr	r0, [pc, #392]	; (2000045c <ACE_ADC2_FifoEmpty_IRQHandler+0x64>)
200002d4:	4962      	ldr	r1, [pc, #392]	; (20000460 <ACE_ADC2_FifoEmpty_IRQHandler+0x68>)
200002d6:	4a63      	ldr	r2, [pc, #396]	; (20000464 <ACE_ADC2_FifoEmpty_IRQHandler+0x6c>)

200002d8 <clear_bss_loop>:
200002d8:	4291      	cmp	r1, r2
200002da:	bf18      	it	ne
200002dc:	f841 0b04 	strne.w	r0, [r1], #4
200002e0:	d1fa      	bne.n	200002d8 <clear_bss_loop>
	...

200002f0 <call_glob_ctor>:
200002f0:	f8df 0174 	ldr.w	r0, [pc, #372]	; 20000468 <ACE_ADC2_FifoEmpty_IRQHandler+0x70>
200002f4:	f20f 0e03 	addw	lr, pc, #3
200002f8:	4700      	bx	r0

200002fa <branch_to_main>:
200002fa:	f04f 0000 	mov.w	r0, #0
200002fe:	f04f 0100 	mov.w	r1, #0
20000302:	f8df f168 	ldr.w	pc, [pc, #360]	; 2000046c <ACE_ADC2_FifoEmpty_IRQHandler+0x74>

20000306 <ExitLoop>:
20000306:	e7fe      	b.n	20000306 <ExitLoop>

20000308 <NMI_Handler>:
20000308:	e7fe      	b.n	20000308 <NMI_Handler>

2000030a <HardFault_Handler>:
2000030a:	e7fe      	b.n	2000030a <HardFault_Handler>

2000030c <MemManage_Handler>:
2000030c:	e7fe      	b.n	2000030c <MemManage_Handler>

2000030e <BusFault_Handler>:
2000030e:	e7fe      	b.n	2000030e <BusFault_Handler>

20000310 <UsageFault_Handler>:
20000310:	e7fe      	b.n	20000310 <UsageFault_Handler>

20000312 <SVC_Handler>:
20000312:	e7fe      	b.n	20000312 <SVC_Handler>

20000314 <DebugMon_Handler>:
20000314:	e7fe      	b.n	20000314 <DebugMon_Handler>

20000316 <PendSV_Handler>:
20000316:	e7fe      	b.n	20000316 <PendSV_Handler>

20000318 <SysTick_Handler>:
20000318:	e7fe      	b.n	20000318 <SysTick_Handler>

2000031a <WdogWakeup_IRQHandler>:
2000031a:	e7fe      	b.n	2000031a <WdogWakeup_IRQHandler>

2000031c <BrownOut_1_5V_IRQHandler>:
2000031c:	e7fe      	b.n	2000031c <BrownOut_1_5V_IRQHandler>

2000031e <BrownOut_3_3V_IRQHandler>:
2000031e:	e7fe      	b.n	2000031e <BrownOut_3_3V_IRQHandler>

20000320 <RTC_Match_IRQHandler>:
20000320:	e7fe      	b.n	20000320 <RTC_Match_IRQHandler>

20000322 <RTCIF_Pub_IRQHandler>:
20000322:	e7fe      	b.n	20000322 <RTCIF_Pub_IRQHandler>

20000324 <EthernetMAC_IRQHandler>:
20000324:	e7fe      	b.n	20000324 <EthernetMAC_IRQHandler>

20000326 <IAP_IRQHandler>:
20000326:	e7fe      	b.n	20000326 <IAP_IRQHandler>

20000328 <ENVM0_IRQHandler>:
20000328:	e7fe      	b.n	20000328 <ENVM0_IRQHandler>

2000032a <ENVM1_IRQHandler>:
2000032a:	e7fe      	b.n	2000032a <ENVM1_IRQHandler>

2000032c <DMA_IRQHandler>:
2000032c:	e7fe      	b.n	2000032c <DMA_IRQHandler>
2000032e:	e7fe      	b.n	2000032e <DMA_IRQHandler+0x2>
20000330:	e7fe      	b.n	20000330 <DMA_IRQHandler+0x4>
20000332:	e7fe      	b.n	20000332 <DMA_IRQHandler+0x6>
20000334:	e7fe      	b.n	20000334 <DMA_IRQHandler+0x8>
20000336:	e7fe      	b.n	20000336 <DMA_IRQHandler+0xa>

20000338 <I2C0_SMBAlert_IRQHandler>:
20000338:	e7fe      	b.n	20000338 <I2C0_SMBAlert_IRQHandler>

2000033a <I2C0_SMBus_IRQHandler>:
2000033a:	e7fe      	b.n	2000033a <I2C0_SMBus_IRQHandler>
2000033c:	e7fe      	b.n	2000033c <I2C0_SMBus_IRQHandler+0x2>

2000033e <I2C1_SMBAlert_IRQHandler>:
2000033e:	e7fe      	b.n	2000033e <I2C1_SMBAlert_IRQHandler>

20000340 <I2C1_SMBus_IRQHandler>:
20000340:	e7fe      	b.n	20000340 <I2C1_SMBus_IRQHandler>

20000342 <Timer1_IRQHandler>:
20000342:	e7fe      	b.n	20000342 <Timer1_IRQHandler>

20000344 <Timer2_IRQHandler>:
20000344:	e7fe      	b.n	20000344 <Timer2_IRQHandler>

20000346 <PLL_Lock_IRQHandler>:
20000346:	e7fe      	b.n	20000346 <PLL_Lock_IRQHandler>

20000348 <PLL_LockLost_IRQHandler>:
20000348:	e7fe      	b.n	20000348 <PLL_LockLost_IRQHandler>

2000034a <CommError_IRQHandler>:
2000034a:	e7fe      	b.n	2000034a <CommError_IRQHandler>

2000034c <Fabric_IRQHandler>:
2000034c:	e7fe      	b.n	2000034c <Fabric_IRQHandler>

2000034e <GPIO0_IRQHandler>:
2000034e:	e7fe      	b.n	2000034e <GPIO0_IRQHandler>

20000350 <GPIO1_IRQHandler>:
20000350:	e7fe      	b.n	20000350 <GPIO1_IRQHandler>

20000352 <GPIO2_IRQHandler>:
20000352:	e7fe      	b.n	20000352 <GPIO2_IRQHandler>

20000354 <GPIO3_IRQHandler>:
20000354:	e7fe      	b.n	20000354 <GPIO3_IRQHandler>

20000356 <GPIO4_IRQHandler>:
20000356:	e7fe      	b.n	20000356 <GPIO4_IRQHandler>

20000358 <GPIO5_IRQHandler>:
20000358:	e7fe      	b.n	20000358 <GPIO5_IRQHandler>

2000035a <GPIO6_IRQHandler>:
2000035a:	e7fe      	b.n	2000035a <GPIO6_IRQHandler>

2000035c <GPIO7_IRQHandler>:
2000035c:	e7fe      	b.n	2000035c <GPIO7_IRQHandler>

2000035e <GPIO8_IRQHandler>:
2000035e:	e7fe      	b.n	2000035e <GPIO8_IRQHandler>

20000360 <GPIO9_IRQHandler>:
20000360:	e7fe      	b.n	20000360 <GPIO9_IRQHandler>

20000362 <GPIO10_IRQHandler>:
20000362:	e7fe      	b.n	20000362 <GPIO10_IRQHandler>

20000364 <GPIO11_IRQHandler>:
20000364:	e7fe      	b.n	20000364 <GPIO11_IRQHandler>

20000366 <GPIO12_IRQHandler>:
20000366:	e7fe      	b.n	20000366 <GPIO12_IRQHandler>

20000368 <GPIO13_IRQHandler>:
20000368:	e7fe      	b.n	20000368 <GPIO13_IRQHandler>

2000036a <GPIO14_IRQHandler>:
2000036a:	e7fe      	b.n	2000036a <GPIO14_IRQHandler>

2000036c <GPIO15_IRQHandler>:
2000036c:	e7fe      	b.n	2000036c <GPIO15_IRQHandler>

2000036e <GPIO16_IRQHandler>:
2000036e:	e7fe      	b.n	2000036e <GPIO16_IRQHandler>

20000370 <GPIO17_IRQHandler>:
20000370:	e7fe      	b.n	20000370 <GPIO17_IRQHandler>

20000372 <GPIO18_IRQHandler>:
20000372:	e7fe      	b.n	20000372 <GPIO18_IRQHandler>

20000374 <GPIO19_IRQHandler>:
20000374:	e7fe      	b.n	20000374 <GPIO19_IRQHandler>

20000376 <GPIO20_IRQHandler>:
20000376:	e7fe      	b.n	20000376 <GPIO20_IRQHandler>

20000378 <GPIO21_IRQHandler>:
20000378:	e7fe      	b.n	20000378 <GPIO21_IRQHandler>

2000037a <GPIO22_IRQHandler>:
2000037a:	e7fe      	b.n	2000037a <GPIO22_IRQHandler>

2000037c <GPIO23_IRQHandler>:
2000037c:	e7fe      	b.n	2000037c <GPIO23_IRQHandler>

2000037e <GPIO24_IRQHandler>:
2000037e:	e7fe      	b.n	2000037e <GPIO24_IRQHandler>

20000380 <GPIO25_IRQHandler>:
20000380:	e7fe      	b.n	20000380 <GPIO25_IRQHandler>

20000382 <GPIO26_IRQHandler>:
20000382:	e7fe      	b.n	20000382 <GPIO26_IRQHandler>

20000384 <GPIO27_IRQHandler>:
20000384:	e7fe      	b.n	20000384 <GPIO27_IRQHandler>

20000386 <GPIO28_IRQHandler>:
20000386:	e7fe      	b.n	20000386 <GPIO28_IRQHandler>

20000388 <GPIO29_IRQHandler>:
20000388:	e7fe      	b.n	20000388 <GPIO29_IRQHandler>

2000038a <GPIO30_IRQHandler>:
2000038a:	e7fe      	b.n	2000038a <GPIO30_IRQHandler>

2000038c <GPIO31_IRQHandler>:
2000038c:	e7fe      	b.n	2000038c <GPIO31_IRQHandler>

2000038e <ACE_PC0_Flag0_IRQHandler>:
2000038e:	e7fe      	b.n	2000038e <ACE_PC0_Flag0_IRQHandler>

20000390 <ACE_PC0_Flag1_IRQHandler>:
20000390:	e7fe      	b.n	20000390 <ACE_PC0_Flag1_IRQHandler>

20000392 <ACE_PC0_Flag2_IRQHandler>:
20000392:	e7fe      	b.n	20000392 <ACE_PC0_Flag2_IRQHandler>

20000394 <ACE_PC0_Flag3_IRQHandler>:
20000394:	e7fe      	b.n	20000394 <ACE_PC0_Flag3_IRQHandler>

20000396 <ACE_PC1_Flag0_IRQHandler>:
20000396:	e7fe      	b.n	20000396 <ACE_PC1_Flag0_IRQHandler>

20000398 <ACE_PC1_Flag1_IRQHandler>:
20000398:	e7fe      	b.n	20000398 <ACE_PC1_Flag1_IRQHandler>

2000039a <ACE_PC1_Flag2_IRQHandler>:
2000039a:	e7fe      	b.n	2000039a <ACE_PC1_Flag2_IRQHandler>

2000039c <ACE_PC1_Flag3_IRQHandler>:
2000039c:	e7fe      	b.n	2000039c <ACE_PC1_Flag3_IRQHandler>

2000039e <ACE_PC2_Flag0_IRQHandler>:
2000039e:	e7fe      	b.n	2000039e <ACE_PC2_Flag0_IRQHandler>

200003a0 <ACE_PC2_Flag1_IRQHandler>:
200003a0:	e7fe      	b.n	200003a0 <ACE_PC2_Flag1_IRQHandler>

200003a2 <ACE_PC2_Flag2_IRQHandler>:
200003a2:	e7fe      	b.n	200003a2 <ACE_PC2_Flag2_IRQHandler>

200003a4 <ACE_PC2_Flag3_IRQHandler>:
200003a4:	e7fe      	b.n	200003a4 <ACE_PC2_Flag3_IRQHandler>

200003a6 <ACE_ADC0_DataValid_IRQHandler>:
200003a6:	e7fe      	b.n	200003a6 <ACE_ADC0_DataValid_IRQHandler>

200003a8 <ACE_ADC1_DataValid_IRQHandler>:
200003a8:	e7fe      	b.n	200003a8 <ACE_ADC1_DataValid_IRQHandler>

200003aa <ACE_ADC2_DataValid_IRQHandler>:
200003aa:	e7fe      	b.n	200003aa <ACE_ADC2_DataValid_IRQHandler>

200003ac <ACE_ADC0_CalDone_IRQHandler>:
200003ac:	e7fe      	b.n	200003ac <ACE_ADC0_CalDone_IRQHandler>

200003ae <ACE_ADC1_CalDone_IRQHandler>:
200003ae:	e7fe      	b.n	200003ae <ACE_ADC1_CalDone_IRQHandler>

200003b0 <ACE_ADC2_CalDone_IRQHandler>:
200003b0:	e7fe      	b.n	200003b0 <ACE_ADC2_CalDone_IRQHandler>

200003b2 <ACE_ADC0_CalStart_IRQHandler>:
200003b2:	e7fe      	b.n	200003b2 <ACE_ADC0_CalStart_IRQHandler>

200003b4 <ACE_ADC1_CalStart_IRQHandler>:
200003b4:	e7fe      	b.n	200003b4 <ACE_ADC1_CalStart_IRQHandler>

200003b6 <ACE_ADC2_CalStart_IRQHandler>:
200003b6:	e7fe      	b.n	200003b6 <ACE_ADC2_CalStart_IRQHandler>

200003b8 <ACE_Comp0_Fall_IRQHandler>:
200003b8:	e7fe      	b.n	200003b8 <ACE_Comp0_Fall_IRQHandler>

200003ba <ACE_Comp1_Fall_IRQHandler>:
200003ba:	e7fe      	b.n	200003ba <ACE_Comp1_Fall_IRQHandler>

200003bc <ACE_Comp2_Fall_IRQHandler>:
200003bc:	e7fe      	b.n	200003bc <ACE_Comp2_Fall_IRQHandler>

200003be <ACE_Comp3_Fall_IRQHandler>:
200003be:	e7fe      	b.n	200003be <ACE_Comp3_Fall_IRQHandler>

200003c0 <ACE_Comp4_Fall_IRQHandler>:
200003c0:	e7fe      	b.n	200003c0 <ACE_Comp4_Fall_IRQHandler>

200003c2 <ACE_Comp5_Fall_IRQHandler>:
200003c2:	e7fe      	b.n	200003c2 <ACE_Comp5_Fall_IRQHandler>

200003c4 <ACE_Comp6_Fall_IRQHandler>:
200003c4:	e7fe      	b.n	200003c4 <ACE_Comp6_Fall_IRQHandler>

200003c6 <ACE_Comp7_Fall_IRQHandler>:
200003c6:	e7fe      	b.n	200003c6 <ACE_Comp7_Fall_IRQHandler>

200003c8 <ACE_Comp8_Fall_IRQHandler>:
200003c8:	e7fe      	b.n	200003c8 <ACE_Comp8_Fall_IRQHandler>

200003ca <ACE_Comp9_Fall_IRQHandler>:
200003ca:	e7fe      	b.n	200003ca <ACE_Comp9_Fall_IRQHandler>

200003cc <ACE_Comp10_Fall_IRQHandler>:
200003cc:	e7fe      	b.n	200003cc <ACE_Comp10_Fall_IRQHandler>

200003ce <ACE_Comp11_Fall_IRQHandler>:
200003ce:	e7fe      	b.n	200003ce <ACE_Comp11_Fall_IRQHandler>

200003d0 <ACE_Comp0_Rise_IRQHandler>:
200003d0:	e7fe      	b.n	200003d0 <ACE_Comp0_Rise_IRQHandler>

200003d2 <ACE_Comp1_Rise_IRQHandler>:
200003d2:	e7fe      	b.n	200003d2 <ACE_Comp1_Rise_IRQHandler>

200003d4 <ACE_Comp2_Rise_IRQHandler>:
200003d4:	e7fe      	b.n	200003d4 <ACE_Comp2_Rise_IRQHandler>

200003d6 <ACE_Comp3_Rise_IRQHandler>:
200003d6:	e7fe      	b.n	200003d6 <ACE_Comp3_Rise_IRQHandler>

200003d8 <ACE_Comp4_Rise_IRQHandler>:
200003d8:	e7fe      	b.n	200003d8 <ACE_Comp4_Rise_IRQHandler>

200003da <ACE_Comp5_Rise_IRQHandler>:
200003da:	e7fe      	b.n	200003da <ACE_Comp5_Rise_IRQHandler>

200003dc <ACE_Comp6_Rise_IRQHandler>:
200003dc:	e7fe      	b.n	200003dc <ACE_Comp6_Rise_IRQHandler>

200003de <ACE_Comp7_Rise_IRQHandler>:
200003de:	e7fe      	b.n	200003de <ACE_Comp7_Rise_IRQHandler>

200003e0 <ACE_Comp8_Rise_IRQHandler>:
200003e0:	e7fe      	b.n	200003e0 <ACE_Comp8_Rise_IRQHandler>

200003e2 <ACE_Comp9_Rise_IRQHandler>:
200003e2:	e7fe      	b.n	200003e2 <ACE_Comp9_Rise_IRQHandler>

200003e4 <ACE_Comp10_Rise_IRQHandler>:
200003e4:	e7fe      	b.n	200003e4 <ACE_Comp10_Rise_IRQHandler>

200003e6 <ACE_Comp11_Rise_IRQHandler>:
200003e6:	e7fe      	b.n	200003e6 <ACE_Comp11_Rise_IRQHandler>

200003e8 <ACE_ADC0_FifoFull_IRQHandler>:
200003e8:	e7fe      	b.n	200003e8 <ACE_ADC0_FifoFull_IRQHandler>

200003ea <ACE_ADC0_FifoAFull_IRQHandler>:
200003ea:	e7fe      	b.n	200003ea <ACE_ADC0_FifoAFull_IRQHandler>

200003ec <ACE_ADC0_FifoEmpty_IRQHandler>:
200003ec:	e7fe      	b.n	200003ec <ACE_ADC0_FifoEmpty_IRQHandler>

200003ee <ACE_ADC1_FifoFull_IRQHandler>:
200003ee:	e7fe      	b.n	200003ee <ACE_ADC1_FifoFull_IRQHandler>

200003f0 <ACE_ADC1_FifoAFull_IRQHandler>:
200003f0:	e7fe      	b.n	200003f0 <ACE_ADC1_FifoAFull_IRQHandler>

200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>:
200003f2:	e7fe      	b.n	200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>

200003f4 <ACE_ADC2_FifoFull_IRQHandler>:
200003f4:	e7fe      	b.n	200003f4 <ACE_ADC2_FifoFull_IRQHandler>

200003f6 <ACE_ADC2_FifoAFull_IRQHandler>:
200003f6:	e7fe      	b.n	200003f6 <ACE_ADC2_FifoAFull_IRQHandler>

200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>:
200003f8:	e7fe      	b.n	200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>
200003fa:	e7fe      	b.n	200003fa <ACE_ADC2_FifoEmpty_IRQHandler+0x2>
200003fc:	e7fe      	b.n	200003fc <ACE_ADC2_FifoEmpty_IRQHandler+0x4>
200003fe:	e7fe      	b.n	200003fe <ACE_ADC2_FifoEmpty_IRQHandler+0x6>
20000400:	e7fe      	b.n	20000400 <ACE_ADC2_FifoEmpty_IRQHandler+0x8>
20000402:	e7fe      	b.n	20000402 <ACE_ADC2_FifoEmpty_IRQHandler+0xa>
20000404:	e7fe      	b.n	20000404 <ACE_ADC2_FifoEmpty_IRQHandler+0xc>
20000406:	e7fe      	b.n	20000406 <ACE_ADC2_FifoEmpty_IRQHandler+0xe>
20000408:	e7fe      	b.n	20000408 <ACE_ADC2_FifoEmpty_IRQHandler+0x10>
2000040a:	e7fe      	b.n	2000040a <ACE_ADC2_FifoEmpty_IRQHandler+0x12>
2000040c:	e7fe      	b.n	2000040c <ACE_ADC2_FifoEmpty_IRQHandler+0x14>
2000040e:	e7fe      	b.n	2000040e <ACE_ADC2_FifoEmpty_IRQHandler+0x16>
20000410:	e7fe      	b.n	20000410 <ACE_ADC2_FifoEmpty_IRQHandler+0x18>
20000412:	e7fe      	b.n	20000412 <ACE_ADC2_FifoEmpty_IRQHandler+0x1a>
20000414:	e7fe      	b.n	20000414 <ACE_ADC2_FifoEmpty_IRQHandler+0x1c>
20000416:	e7fe      	b.n	20000416 <ACE_ADC2_FifoEmpty_IRQHandler+0x1e>
20000418:	e7fe      	b.n	20000418 <ACE_ADC2_FifoEmpty_IRQHandler+0x20>
2000041a:	e7fe      	b.n	2000041a <ACE_ADC2_FifoEmpty_IRQHandler+0x22>
2000041c:	e7fe      	b.n	2000041c <ACE_ADC2_FifoEmpty_IRQHandler+0x24>
2000041e:	e7fe      	b.n	2000041e <ACE_ADC2_FifoEmpty_IRQHandler+0x26>
20000420:	e7fe      	b.n	20000420 <ACE_ADC2_FifoEmpty_IRQHandler+0x28>
20000422:	e7fe      	b.n	20000422 <ACE_ADC2_FifoEmpty_IRQHandler+0x2a>
20000424:	e7fe      	b.n	20000424 <ACE_ADC2_FifoEmpty_IRQHandler+0x2c>
20000426:	e7fe      	b.n	20000426 <ACE_ADC2_FifoEmpty_IRQHandler+0x2e>
20000428:	e7fe      	b.n	20000428 <ACE_ADC2_FifoEmpty_IRQHandler+0x30>
2000042a:	e7fe      	b.n	2000042a <ACE_ADC2_FifoEmpty_IRQHandler+0x32>
2000042c:	e7fe      	b.n	2000042c <ACE_ADC2_FifoEmpty_IRQHandler+0x34>
2000042e:	e7fe      	b.n	2000042e <ACE_ADC2_FifoEmpty_IRQHandler+0x36>
20000430:	e7fe      	b.n	20000430 <ACE_ADC2_FifoEmpty_IRQHandler+0x38>
20000432:	e7fe      	b.n	20000432 <ACE_ADC2_FifoEmpty_IRQHandler+0x3a>
20000434:	e7fe      	b.n	20000434 <ACE_ADC2_FifoEmpty_IRQHandler+0x3c>
20000436:	e7fe      	b.n	20000436 <ACE_ADC2_FifoEmpty_IRQHandler+0x3e>
20000438:	e7fe      	b.n	20000438 <ACE_ADC2_FifoEmpty_IRQHandler+0x40>
2000043a:	0000      	.short	0x0000
2000043c:	20002c09 	.word	0x20002c09
20000440:	00000000 	.word	0x00000000
20000444:	20000000 	.word	0x20000000
20000448:	20000000 	.word	0x20000000
2000044c:	20004140 	.word	0x20004140
20000450:	20004140 	.word	0x20004140
20000454:	20004140 	.word	0x20004140
20000458:	2000419c 	.word	0x2000419c
2000045c:	00000000 	.word	0x00000000
20000460:	2000419c 	.word	0x2000419c
20000464:	20004440 	.word	0x20004440
20000468:	20003d55 	.word	0x20003d55
2000046c:	200004a1 	.word	0x200004a1

20000470 <__do_global_dtors_aux>:
20000470:	f244 139c 	movw	r3, #16796	; 0x419c
20000474:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000478:	781a      	ldrb	r2, [r3, #0]
2000047a:	b90a      	cbnz	r2, 20000480 <__do_global_dtors_aux+0x10>
2000047c:	2001      	movs	r0, #1
2000047e:	7018      	strb	r0, [r3, #0]
20000480:	4770      	bx	lr
20000482:	bf00      	nop

20000484 <frame_dummy>:
20000484:	f244 1040 	movw	r0, #16704	; 0x4140
20000488:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000048c:	b508      	push	{r3, lr}
2000048e:	6803      	ldr	r3, [r0, #0]
20000490:	b12b      	cbz	r3, 2000049e <frame_dummy+0x1a>
20000492:	f240 0300 	movw	r3, #0
20000496:	f2c0 0300 	movt	r3, #0
2000049a:	b103      	cbz	r3, 2000049e <frame_dummy+0x1a>
2000049c:	4798      	blx	r3
2000049e:	bd08      	pop	{r3, pc}

200004a0 <main>:
uint8_t message[5] = "hello";
uint16_t x, y;
uint8_t z;

int main()
{
200004a0:	b590      	push	{r4, r7, lr}
200004a2:	b089      	sub	sp, #36	; 0x24
200004a4:	af02      	add	r7, sp, #8
	int menu = -1;
200004a6:	f04f 33ff 	mov.w	r3, #4294967295
200004aa:	60fb      	str	r3, [r7, #12]
	MSS_UART_init(&g_mss_uart1, MSS_UART_57600_BAUD, MSS_UART_DATA_8_BITS | MSS_UART_NO_PARITY | MSS_UART_ONE_STOP_BIT);
200004ac:	f244 2000 	movw	r0, #16896	; 0x4200
200004b0:	f2c2 0000 	movt	r0, #8192	; 0x2000
200004b4:	f44f 4161 	mov.w	r1, #57600	; 0xe100
200004b8:	f04f 0203 	mov.w	r2, #3
200004bc:	f001 f9ea 	bl	20001894 <MSS_UART_init>
	MSS_UART_set_rx_handler( &g_mss_uart1, uart1_rx_handler, MSS_UART_FIFO_SINGLE_BYTE);
200004c0:	f244 2000 	movw	r0, #16896	; 0x4200
200004c4:	f2c2 0000 	movt	r0, #8192	; 0x2000
200004c8:	f241 510d 	movw	r1, #5389	; 0x150d
200004cc:	f2c2 0100 	movt	r1, #8192	; 0x2000
200004d0:	f04f 0200 	mov.w	r2, #0
200004d4:	f001 f95c 	bl	20001790 <MSS_UART_set_rx_handler>
	touchscreen_begin();
200004d8:	f000 fa90 	bl	200009fc <touchscreen_begin>

	drawFillScreen(ILI9341_BLUE);
200004dc:	f04f 001f 	mov.w	r0, #31
200004e0:	f000 fc70 	bl	20000dc4 <drawFillScreen>
	drawRectangle(5, 5, 110, 152, ILI9341_WHITE);
200004e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
200004e8:	9300      	str	r3, [sp, #0]
200004ea:	f04f 0005 	mov.w	r0, #5
200004ee:	f04f 0105 	mov.w	r1, #5
200004f2:	f04f 026e 	mov.w	r2, #110	; 0x6e
200004f6:	f04f 0398 	mov.w	r3, #152	; 0x98
200004fa:	f000 fbf5 	bl	20000ce8 <drawRectangle>
	drawRectangle(5, 165, 110, 152, ILI9341_WHITE);
200004fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
20000502:	9300      	str	r3, [sp, #0]
20000504:	f04f 0005 	mov.w	r0, #5
20000508:	f04f 01a5 	mov.w	r1, #165	; 0xa5
2000050c:	f04f 026e 	mov.w	r2, #110	; 0x6e
20000510:	f04f 0398 	mov.w	r3, #152	; 0x98
20000514:	f000 fbe8 	bl	20000ce8 <drawRectangle>
	drawRectangle(120, 5, 115, 312, ILI9341_WHITE);
20000518:	f64f 73ff 	movw	r3, #65535	; 0xffff
2000051c:	9300      	str	r3, [sp, #0]
2000051e:	f04f 0078 	mov.w	r0, #120	; 0x78
20000522:	f04f 0105 	mov.w	r1, #5
20000526:	f04f 0273 	mov.w	r2, #115	; 0x73
2000052a:	f44f 739c 	mov.w	r3, #312	; 0x138
2000052e:	f000 fbdb 	bl	20000ce8 <drawRectangle>

	drawText1(ILI9341_BLACK);
20000532:	f04f 0000 	mov.w	r0, #0
20000536:	f000 fc7f 	bl	20000e38 <drawText1>
	drawText2(ILI9341_BLACK);
2000053a:	f04f 0000 	mov.w	r0, #0
2000053e:	f000 fc9d 	bl	20000e7c <drawText2>
	drawText3(ILI9341_BLACK);
20000542:	f04f 0000 	mov.w	r0, #0
20000546:	f000 fcc7 	bl	20000ed8 <drawText3>

	while(menu == -1){
2000054a:	e0a7      	b.n	2000069c <main+0x1fc>
		if (touched()) {
2000054c:	f000 fb9c 	bl	20000c88 <touched>
20000550:	4603      	mov	r3, r0
20000552:	2b00      	cmp	r3, #0
20000554:	f000 80a2 	beq.w	2000069c <main+0x1fc>
			// read x & y & z;
			while (! bufferEmpty()) {
20000558:	e09a      	b.n	20000690 <main+0x1f0>

			  readTouch(&x, &y, &z);
2000055a:	f244 10b0 	movw	r0, #16816	; 0x41b0
2000055e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000562:	f244 11ba 	movw	r1, #16826	; 0x41ba
20000566:	f2c2 0100 	movt	r1, #8192	; 0x2000
2000056a:	f244 12b8 	movw	r2, #16824	; 0x41b8
2000056e:	f2c2 0200 	movt	r2, #8192	; 0x2000
20000572:	f000 fb37 	bl	20000be4 <readTouch>
			  //printf("x: %d   y: %d \n\r", x, y);


			  float temp = x/4000.0;
20000576:	f244 13b0 	movw	r3, #16816	; 0x41b0
2000057a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000057e:	881b      	ldrh	r3, [r3, #0]
20000580:	4618      	mov	r0, r3
20000582:	f002 ffaf 	bl	200034e4 <__aeabi_i2d>
20000586:	4602      	mov	r2, r0
20000588:	460b      	mov	r3, r1
2000058a:	4610      	mov	r0, r2
2000058c:	4619      	mov	r1, r3
2000058e:	a3bc      	add	r3, pc, #752	; (adr r3, 20000880 <main+0x3e0>)
20000590:	e9d3 2300 	ldrd	r2, r3, [r3]
20000594:	f003 f936 	bl	20003804 <__aeabi_ddiv>
20000598:	4602      	mov	r2, r0
2000059a:	460b      	mov	r3, r1
2000059c:	4610      	mov	r0, r2
2000059e:	4619      	mov	r1, r3
200005a0:	f003 fa18 	bl	200039d4 <__aeabi_d2f>
200005a4:	4603      	mov	r3, r0
200005a6:	613b      	str	r3, [r7, #16]
			  temp *= 240;
200005a8:	6938      	ldr	r0, [r7, #16]
200005aa:	49b7      	ldr	r1, [pc, #732]	; (20000888 <main+0x3e8>)
200005ac:	f003 fa62 	bl	20003a74 <__aeabi_fmul>
200005b0:	4603      	mov	r3, r0
200005b2:	613b      	str	r3, [r7, #16]
			  x = temp;
200005b4:	6938      	ldr	r0, [r7, #16]
200005b6:	f003 fbad 	bl	20003d14 <__aeabi_f2uiz>
200005ba:	4603      	mov	r3, r0
200005bc:	b29a      	uxth	r2, r3
200005be:	f244 13b0 	movw	r3, #16816	; 0x41b0
200005c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200005c6:	801a      	strh	r2, [r3, #0]

			  temp = y/4000.0;
200005c8:	f244 13ba 	movw	r3, #16826	; 0x41ba
200005cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200005d0:	881b      	ldrh	r3, [r3, #0]
200005d2:	4618      	mov	r0, r3
200005d4:	f002 ff86 	bl	200034e4 <__aeabi_i2d>
200005d8:	4602      	mov	r2, r0
200005da:	460b      	mov	r3, r1
200005dc:	4610      	mov	r0, r2
200005de:	4619      	mov	r1, r3
200005e0:	a3a7      	add	r3, pc, #668	; (adr r3, 20000880 <main+0x3e0>)
200005e2:	e9d3 2300 	ldrd	r2, r3, [r3]
200005e6:	f003 f90d 	bl	20003804 <__aeabi_ddiv>
200005ea:	4602      	mov	r2, r0
200005ec:	460b      	mov	r3, r1
200005ee:	4610      	mov	r0, r2
200005f0:	4619      	mov	r1, r3
200005f2:	f003 f9ef 	bl	200039d4 <__aeabi_d2f>
200005f6:	4603      	mov	r3, r0
200005f8:	613b      	str	r3, [r7, #16]
			  temp *= 320;
200005fa:	6938      	ldr	r0, [r7, #16]
200005fc:	49a3      	ldr	r1, [pc, #652]	; (2000088c <main+0x3ec>)
200005fe:	f003 fa39 	bl	20003a74 <__aeabi_fmul>
20000602:	4603      	mov	r3, r0
20000604:	613b      	str	r3, [r7, #16]
			  y = temp;
20000606:	6938      	ldr	r0, [r7, #16]
20000608:	f003 fb84 	bl	20003d14 <__aeabi_f2uiz>
2000060c:	4603      	mov	r3, r0
2000060e:	b29a      	uxth	r2, r3
20000610:	f244 13ba 	movw	r3, #16826	; 0x41ba
20000614:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000618:	801a      	strh	r2, [r3, #0]

			  x = 240 - x;
2000061a:	f244 13b0 	movw	r3, #16816	; 0x41b0
2000061e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000622:	881b      	ldrh	r3, [r3, #0]
20000624:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
20000628:	b29a      	uxth	r2, r3
2000062a:	f244 13b0 	movw	r3, #16816	; 0x41b0
2000062e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000632:	801a      	strh	r2, [r3, #0]
			  y = 320 - y;
20000634:	f244 13ba 	movw	r3, #16826	; 0x41ba
20000638:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000063c:	881b      	ldrh	r3, [r3, #0]
2000063e:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
20000642:	b29a      	uxth	r2, r3
20000644:	f244 13ba 	movw	r3, #16826	; 0x41ba
20000648:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000064c:	801a      	strh	r2, [r3, #0]

			  //printf("x: %d   y: %d \n\r", x, y);
			  if(x>120){
2000064e:	f244 13b0 	movw	r3, #16816	; 0x41b0
20000652:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000656:	881b      	ldrh	r3, [r3, #0]
20000658:	2b78      	cmp	r3, #120	; 0x78
2000065a:	d903      	bls.n	20000664 <main+0x1c4>
				  menu = 0;
2000065c:	f04f 0300 	mov.w	r3, #0
20000660:	60fb      	str	r3, [r7, #12]
20000662:	e015      	b.n	20000690 <main+0x1f0>

			  }
			  else if(y> 160){
20000664:	f244 13ba 	movw	r3, #16826	; 0x41ba
20000668:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000066c:	881b      	ldrh	r3, [r3, #0]
2000066e:	2ba0      	cmp	r3, #160	; 0xa0
20000670:	d907      	bls.n	20000682 <main+0x1e2>
				  menu = 1;
20000672:	f04f 0301 	mov.w	r3, #1
20000676:	60fb      	str	r3, [r7, #12]
				  drawFillScreen(ILI9341_BLACK);
20000678:	f04f 0000 	mov.w	r0, #0
2000067c:	f000 fba2 	bl	20000dc4 <drawFillScreen>
20000680:	e006      	b.n	20000690 <main+0x1f0>
			  }
			  else{
				  menu = 2;
20000682:	f04f 0302 	mov.w	r3, #2
20000686:	60fb      	str	r3, [r7, #12]
				  drawFillScreen(ILI9341_WHITE);
20000688:	f64f 70ff 	movw	r0, #65535	; 0xffff
2000068c:	f000 fb9a 	bl	20000dc4 <drawFillScreen>
	drawText3(ILI9341_BLACK);

	while(menu == -1){
		if (touched()) {
			// read x & y & z;
			while (! bufferEmpty()) {
20000690:	f000 fe52 	bl	20001338 <bufferEmpty>
20000694:	4603      	mov	r3, r0
20000696:	2b00      	cmp	r3, #0
20000698:	f43f af5f 	beq.w	2000055a <main+0xba>

	drawText1(ILI9341_BLACK);
	drawText2(ILI9341_BLACK);
	drawText3(ILI9341_BLACK);

	while(menu == -1){
2000069c:	68fb      	ldr	r3, [r7, #12]
2000069e:	f1b3 3fff 	cmp.w	r3, #4294967295
200006a2:	f43f af53 	beq.w	2000054c <main+0xac>
			  }
			}
		}
	}

	if(menu == 0){
200006a6:	68fb      	ldr	r3, [r7, #12]
200006a8:	2b00      	cmp	r3, #0
200006aa:	d113      	bne.n	200006d4 <main+0x234>
		drawFillScreen(ILI9341_BLUE);
200006ac:	f04f 001f 	mov.w	r0, #31
200006b0:	f000 fb88 	bl	20000dc4 <drawFillScreen>
	}
	while (! bufferEmpty()){
200006b4:	e00f      	b.n	200006d6 <main+0x236>
		readTouch(&x, &y, &z);
200006b6:	f244 10b0 	movw	r0, #16816	; 0x41b0
200006ba:	f2c2 0000 	movt	r0, #8192	; 0x2000
200006be:	f244 11ba 	movw	r1, #16826	; 0x41ba
200006c2:	f2c2 0100 	movt	r1, #8192	; 0x2000
200006c6:	f244 12b8 	movw	r2, #16824	; 0x41b8
200006ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
200006ce:	f000 fa89 	bl	20000be4 <readTouch>
200006d2:	e000      	b.n	200006d6 <main+0x236>
	}

	if(menu == 0){
		drawFillScreen(ILI9341_BLUE);
	}
	while (! bufferEmpty()){
200006d4:	bf00      	nop
200006d6:	f000 fe2f 	bl	20001338 <bufferEmpty>
200006da:	4603      	mov	r3, r0
200006dc:	2b00      	cmp	r3, #0
200006de:	d0ea      	beq.n	200006b6 <main+0x216>
200006e0:	e000      	b.n	200006e4 <main+0x244>

		}



	}
200006e2:	bf00      	nop
		readTouch(&x, &y, &z);
	}

	while( 1 )
	{
		if(menu == 0){
200006e4:	68fb      	ldr	r3, [r7, #12]
200006e6:	2b00      	cmp	r3, #0
200006e8:	d1fb      	bne.n	200006e2 <main+0x242>
				if (touched()) {
200006ea:	f000 facd 	bl	20000c88 <touched>
200006ee:	4603      	mov	r3, r0
200006f0:	2b00      	cmp	r3, #0
200006f2:	f000 80bd 	beq.w	20000870 <main+0x3d0>
					// read x & y & z;
					if (! bufferEmpty()) {
200006f6:	f000 fe1f 	bl	20001338 <bufferEmpty>
200006fa:	4603      	mov	r3, r0
200006fc:	2b00      	cmp	r3, #0
200006fe:	f040 80b7 	bne.w	20000870 <main+0x3d0>

					  readTouch(&x, &y, &z);
20000702:	f244 10b0 	movw	r0, #16816	; 0x41b0
20000706:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000070a:	f244 11ba 	movw	r1, #16826	; 0x41ba
2000070e:	f2c2 0100 	movt	r1, #8192	; 0x2000
20000712:	f244 12b8 	movw	r2, #16824	; 0x41b8
20000716:	f2c2 0200 	movt	r2, #8192	; 0x2000
2000071a:	f000 fa63 	bl	20000be4 <readTouch>
					  //printf("x: %d   y: %d \n\r", x, y);


					  float temp = x/4000.0;
2000071e:	f244 13b0 	movw	r3, #16816	; 0x41b0
20000722:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000726:	881b      	ldrh	r3, [r3, #0]
20000728:	4618      	mov	r0, r3
2000072a:	f002 fedb 	bl	200034e4 <__aeabi_i2d>
2000072e:	4602      	mov	r2, r0
20000730:	460b      	mov	r3, r1
20000732:	4610      	mov	r0, r2
20000734:	4619      	mov	r1, r3
20000736:	a352      	add	r3, pc, #328	; (adr r3, 20000880 <main+0x3e0>)
20000738:	e9d3 2300 	ldrd	r2, r3, [r3]
2000073c:	f003 f862 	bl	20003804 <__aeabi_ddiv>
20000740:	4602      	mov	r2, r0
20000742:	460b      	mov	r3, r1
20000744:	4610      	mov	r0, r2
20000746:	4619      	mov	r1, r3
20000748:	f003 f944 	bl	200039d4 <__aeabi_d2f>
2000074c:	4603      	mov	r3, r0
2000074e:	617b      	str	r3, [r7, #20]
					  temp *= 240;
20000750:	6978      	ldr	r0, [r7, #20]
20000752:	494d      	ldr	r1, [pc, #308]	; (20000888 <main+0x3e8>)
20000754:	f003 f98e 	bl	20003a74 <__aeabi_fmul>
20000758:	4603      	mov	r3, r0
2000075a:	617b      	str	r3, [r7, #20]
					  x = temp;
2000075c:	6978      	ldr	r0, [r7, #20]
2000075e:	f003 fad9 	bl	20003d14 <__aeabi_f2uiz>
20000762:	4603      	mov	r3, r0
20000764:	b29a      	uxth	r2, r3
20000766:	f244 13b0 	movw	r3, #16816	; 0x41b0
2000076a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000076e:	801a      	strh	r2, [r3, #0]

					  temp = y/4000.0;
20000770:	f244 13ba 	movw	r3, #16826	; 0x41ba
20000774:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000778:	881b      	ldrh	r3, [r3, #0]
2000077a:	4618      	mov	r0, r3
2000077c:	f002 feb2 	bl	200034e4 <__aeabi_i2d>
20000780:	4602      	mov	r2, r0
20000782:	460b      	mov	r3, r1
20000784:	4610      	mov	r0, r2
20000786:	4619      	mov	r1, r3
20000788:	a33d      	add	r3, pc, #244	; (adr r3, 20000880 <main+0x3e0>)
2000078a:	e9d3 2300 	ldrd	r2, r3, [r3]
2000078e:	f003 f839 	bl	20003804 <__aeabi_ddiv>
20000792:	4602      	mov	r2, r0
20000794:	460b      	mov	r3, r1
20000796:	4610      	mov	r0, r2
20000798:	4619      	mov	r1, r3
2000079a:	f003 f91b 	bl	200039d4 <__aeabi_d2f>
2000079e:	4603      	mov	r3, r0
200007a0:	617b      	str	r3, [r7, #20]
					  temp *= 320;
200007a2:	6978      	ldr	r0, [r7, #20]
200007a4:	4939      	ldr	r1, [pc, #228]	; (2000088c <main+0x3ec>)
200007a6:	f003 f965 	bl	20003a74 <__aeabi_fmul>
200007aa:	4603      	mov	r3, r0
200007ac:	617b      	str	r3, [r7, #20]
					  y = temp;
200007ae:	6978      	ldr	r0, [r7, #20]
200007b0:	f003 fab0 	bl	20003d14 <__aeabi_f2uiz>
200007b4:	4603      	mov	r3, r0
200007b6:	b29a      	uxth	r2, r3
200007b8:	f244 13ba 	movw	r3, #16826	; 0x41ba
200007bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200007c0:	801a      	strh	r2, [r3, #0]

					  x = 240 - x;
200007c2:	f244 13b0 	movw	r3, #16816	; 0x41b0
200007c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200007ca:	881b      	ldrh	r3, [r3, #0]
200007cc:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
200007d0:	b29a      	uxth	r2, r3
200007d2:	f244 13b0 	movw	r3, #16816	; 0x41b0
200007d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200007da:	801a      	strh	r2, [r3, #0]
					  y = 320 - y;
200007dc:	f244 13ba 	movw	r3, #16826	; 0x41ba
200007e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200007e4:	881b      	ldrh	r3, [r3, #0]
200007e6:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
200007ea:	b29a      	uxth	r2, r3
200007ec:	f244 13ba 	movw	r3, #16826	; 0x41ba
200007f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200007f4:	801a      	strh	r2, [r3, #0]
					  //printf("x: %d   y: %d \n\r", x, y);

					  drawRectanglePixel(x, y, 6, 6, ILI9341_YELLOW);
200007f6:	f244 13b0 	movw	r3, #16816	; 0x41b0
200007fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200007fe:	881a      	ldrh	r2, [r3, #0]
20000800:	f244 13ba 	movw	r3, #16826	; 0x41ba
20000804:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000808:	881b      	ldrh	r3, [r3, #0]
2000080a:	f64f 71e0 	movw	r1, #65504	; 0xffe0
2000080e:	9100      	str	r1, [sp, #0]
20000810:	4610      	mov	r0, r2
20000812:	4619      	mov	r1, r3
20000814:	f04f 0206 	mov.w	r2, #6
20000818:	f04f 0306 	mov.w	r3, #6
2000081c:	f000 faa4 	bl	20000d68 <drawRectanglePixel>
					  uint8_t buf[5] = {0,0,0,scaleX(x), scaleY(y)};
20000820:	f244 13b0 	movw	r3, #16816	; 0x41b0
20000824:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000828:	881b      	ldrh	r3, [r3, #0]
2000082a:	4618      	mov	r0, r3
2000082c:	f000 fd90 	bl	20001350 <scaleX>
20000830:	4603      	mov	r3, r0
20000832:	461c      	mov	r4, r3
20000834:	f244 13ba 	movw	r3, #16826	; 0x41ba
20000838:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000083c:	881b      	ldrh	r3, [r3, #0]
2000083e:	4618      	mov	r0, r3
20000840:	f000 fdb6 	bl	200013b0 <scaleY>
20000844:	4603      	mov	r3, r0
20000846:	f04f 0200 	mov.w	r2, #0
2000084a:	713a      	strb	r2, [r7, #4]
2000084c:	f04f 0200 	mov.w	r2, #0
20000850:	717a      	strb	r2, [r7, #5]
20000852:	f04f 0200 	mov.w	r2, #0
20000856:	71ba      	strb	r2, [r7, #6]
20000858:	4622      	mov	r2, r4
2000085a:	71fa      	strb	r2, [r7, #7]
2000085c:	723b      	strb	r3, [r7, #8]
					  sendMessage(buf, 5, 0x000);
2000085e:	f107 0304 	add.w	r3, r7, #4
20000862:	4618      	mov	r0, r3
20000864:	f04f 0105 	mov.w	r1, #5
20000868:	f04f 0200 	mov.w	r2, #0
2000086c:	f000 fdd0 	bl	20001410 <sendMessage>


					}
					//writeRegister8(STMPE_INT_STA, 0xFF); // reset all ints, in this example unneeded depending in use
				  }
				  delay(1);
20000870:	f04f 0001 	mov.w	r0, #1
20000874:	f000 fbb6 	bl	20000fe4 <delay>

		}



	}
20000878:	e734      	b.n	200006e4 <main+0x244>
2000087a:	bf00      	nop
2000087c:	f3af 8000 	nop.w
20000880:	00000000 	.word	0x00000000
20000884:	40af4000 	.word	0x40af4000
20000888:	43700000 	.word	0x43700000
2000088c:	43a00000 	.word	0x43a00000

20000890 <NVIC_DisableIRQ>:
 * 
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
20000890:	b480      	push	{r7}
20000892:	b083      	sub	sp, #12
20000894:	af00      	add	r7, sp, #0
20000896:	4603      	mov	r3, r0
20000898:	80fb      	strh	r3, [r7, #6]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
2000089a:	f24e 1300 	movw	r3, #57600	; 0xe100
2000089e:	f2ce 0300 	movt	r3, #57344	; 0xe000
200008a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
200008a6:	ea4f 1252 	mov.w	r2, r2, lsr #5
200008aa:	88f9      	ldrh	r1, [r7, #6]
200008ac:	f001 011f 	and.w	r1, r1, #31
200008b0:	f04f 0001 	mov.w	r0, #1
200008b4:	fa00 f101 	lsl.w	r1, r0, r1
200008b8:	f102 0220 	add.w	r2, r2, #32
200008bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
200008c0:	f107 070c 	add.w	r7, r7, #12
200008c4:	46bd      	mov	sp, r7
200008c6:	bc80      	pop	{r7}
200008c8:	4770      	bx	lr
200008ca:	bf00      	nop

200008cc <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
200008cc:	b480      	push	{r7}
200008ce:	b083      	sub	sp, #12
200008d0:	af00      	add	r7, sp, #0
200008d2:	4603      	mov	r3, r0
200008d4:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
200008d6:	f24e 1300 	movw	r3, #57600	; 0xe100
200008da:	f2ce 0300 	movt	r3, #57344	; 0xe000
200008de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
200008e2:	ea4f 1252 	mov.w	r2, r2, lsr #5
200008e6:	88f9      	ldrh	r1, [r7, #6]
200008e8:	f001 011f 	and.w	r1, r1, #31
200008ec:	f04f 0001 	mov.w	r0, #1
200008f0:	fa00 f101 	lsl.w	r1, r0, r1
200008f4:	f102 0260 	add.w	r2, r2, #96	; 0x60
200008f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
200008fc:	f107 070c 	add.w	r7, r7, #12
20000900:	46bd      	mov	sp, r7
20000902:	bc80      	pop	{r7}
20000904:	4770      	bx	lr
20000906:	bf00      	nop

20000908 <MSS_TIM1_init>:
    one-shot mode. Allowed values for this parameter are:
        - MSS_TIMER_PERIODIC_MODE
        - MSS_TIMER_ONE_SHOT_MODE
 */
static __INLINE void MSS_TIM1_init( mss_timer_mode_t mode )
{
20000908:	b580      	push	{r7, lr}
2000090a:	b082      	sub	sp, #8
2000090c:	af00      	add	r7, sp, #0
2000090e:	4603      	mov	r3, r0
20000910:	71fb      	strb	r3, [r7, #7]
    NVIC_DisableIRQ( Timer1_IRQn );             /* Disable timer 1 irq in the Cortex-M3 NVIC */  
20000912:	f04f 0014 	mov.w	r0, #20
20000916:	f7ff ffbb 	bl	20000890 <NVIC_DisableIRQ>
    
    SYSREG->SOFT_RST_CR &= ~SYSREG_TIMER_SOFTRESET_MASK; /* Take timer block out of reset */
2000091a:	f242 0300 	movw	r3, #8192	; 0x2000
2000091e:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000922:	f242 0200 	movw	r2, #8192	; 0x2000
20000926:	f2ce 0204 	movt	r2, #57348	; 0xe004
2000092a:	6b12      	ldr	r2, [r2, #48]	; 0x30
2000092c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20000930:	631a      	str	r2, [r3, #48]	; 0x30
    
    TIMER->TIM64_MODE = 0U;                     /* switch to 32 bits mode */
20000932:	f245 0300 	movw	r3, #20480	; 0x5000
20000936:	f2c4 0300 	movt	r3, #16384	; 0x4000
2000093a:	f04f 0200 	mov.w	r2, #0
2000093e:	655a      	str	r2, [r3, #84]	; 0x54
    
    TIMER_BITBAND->TIM1ENABLE = 0U;             /* disable timer */
20000940:	f240 0300 	movw	r3, #0
20000944:	f2c4 230a 	movt	r3, #16906	; 0x420a
20000948:	f04f 0200 	mov.w	r2, #0
2000094c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    TIMER_BITBAND->TIM1INTEN = 0U;              /* disable interrupt */
20000950:	f240 0300 	movw	r3, #0
20000954:	f2c4 230a 	movt	r3, #16906	; 0x420a
20000958:	f04f 0200 	mov.w	r2, #0
2000095c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    TIMER_BITBAND->TIM1MODE = (uint32_t)mode;   /* set mode (continuous/one-shot) */
20000960:	f240 0300 	movw	r3, #0
20000964:	f2c4 230a 	movt	r3, #16906	; 0x420a
20000968:	79fa      	ldrb	r2, [r7, #7]
2000096a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    
    TIMER->TIM1_RIS = 1U;                       /* clear timer 1 interrupt */
2000096e:	f245 0300 	movw	r3, #20480	; 0x5000
20000972:	f2c4 0300 	movt	r3, #16384	; 0x4000
20000976:	f04f 0201 	mov.w	r2, #1
2000097a:	611a      	str	r2, [r3, #16]
    NVIC_ClearPendingIRQ( Timer1_IRQn );        /* clear timer 1 interrupt within NVIC */
2000097c:	f04f 0014 	mov.w	r0, #20
20000980:	f7ff ffa4 	bl	200008cc <NVIC_ClearPendingIRQ>
}
20000984:	f107 0708 	add.w	r7, r7, #8
20000988:	46bd      	mov	sp, r7
2000098a:	bd80      	pop	{r7, pc}

2000098c <MSS_TIM1_start>:
  MSS_TIM1_load_immediate() or MSS_TIM1_load_background() functions. 
  Note: The MSS_TIM1_start() function is also used to resume the down-counter
        if previously stopped using MSS_TIM1_stop() function.
 */
static __INLINE void MSS_TIM1_start( void )
{
2000098c:	b480      	push	{r7}
2000098e:	af00      	add	r7, sp, #0
    TIMER_BITBAND->TIM1ENABLE = 1U;    /* enable timer */
20000990:	f240 0300 	movw	r3, #0
20000994:	f2c4 230a 	movt	r3, #16906	; 0x420a
20000998:	f04f 0201 	mov.w	r2, #1
2000099c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
200009a0:	46bd      	mov	sp, r7
200009a2:	bc80      	pop	{r7}
200009a4:	4770      	bx	lr
200009a6:	bf00      	nop

200009a8 <MSS_TIM1_stop>:
/*-------------------------------------------------------------------------*//**
  The MSS_TIM1_stop() function disables Timer 1 and stops its down-counter
  decrementing.
 */
static __INLINE void MSS_TIM1_stop( void )
{
200009a8:	b480      	push	{r7}
200009aa:	af00      	add	r7, sp, #0
    TIMER_BITBAND->TIM1ENABLE = 0U;    /* disable timer */
200009ac:	f240 0300 	movw	r3, #0
200009b0:	f2c4 230a 	movt	r3, #16906	; 0x420a
200009b4:	f04f 0200 	mov.w	r2, #0
200009b8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
200009bc:	46bd      	mov	sp, r7
200009be:	bc80      	pop	{r7}
200009c0:	4770      	bx	lr
200009c2:	bf00      	nop

200009c4 <MSS_TIM1_get_current_value>:
  
  @return
    This function returns the 32-bits current value of the Timer 1 down-counter.
 */
static __INLINE uint32_t MSS_TIM1_get_current_value( void )
{
200009c4:	b480      	push	{r7}
200009c6:	af00      	add	r7, sp, #0
    return TIMER->TIM1_VAL;
200009c8:	f245 0300 	movw	r3, #20480	; 0x5000
200009cc:	f2c4 0300 	movt	r3, #16384	; 0x4000
200009d0:	681b      	ldr	r3, [r3, #0]
}
200009d2:	4618      	mov	r0, r3
200009d4:	46bd      	mov	sp, r7
200009d6:	bc80      	pop	{r7}
200009d8:	4770      	bx	lr
200009da:	bf00      	nop

200009dc <MSS_TIM1_load_immediate>:
  @param load_value
    The load_value parameter specifies the value from which the Timer 1 
    down-counter will start decrementing.
 */
static __INLINE void MSS_TIM1_load_immediate( uint32_t load_value )
{
200009dc:	b480      	push	{r7}
200009de:	b083      	sub	sp, #12
200009e0:	af00      	add	r7, sp, #0
200009e2:	6078      	str	r0, [r7, #4]
    TIMER->TIM1_LOADVAL = load_value;
200009e4:	f245 0300 	movw	r3, #20480	; 0x5000
200009e8:	f2c4 0300 	movt	r3, #16384	; 0x4000
200009ec:	687a      	ldr	r2, [r7, #4]
200009ee:	605a      	str	r2, [r3, #4]
}
200009f0:	f107 070c 	add.w	r7, r7, #12
200009f4:	46bd      	mov	sp, r7
200009f6:	bc80      	pop	{r7}
200009f8:	4770      	bx	lr
200009fa:	bf00      	nop

200009fc <touchscreen_begin>:
    0x31, 0xC1, 0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F,
  ILI9341_SLPOUT  , 0x80,                // Exit Sleep
  ILI9341_DISPON  , 0x80,                // Display on
  0x00                                   // End of list
};
void touchscreen_begin(){
200009fc:	b580      	push	{r7, lr}
200009fe:	b094      	sub	sp, #80	; 0x50
20000a00:	af00      	add	r7, sp, #0

	uint8_t cmd, x, numArgs;
	uint8_t i;
	uint8_t temp[65];
	const uint8_t *addr = initcmd;
20000a02:	f643 7320 	movw	r3, #16160	; 0x3f20
20000a06:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000a0a:	64fb      	str	r3, [r7, #76]	; 0x4c

	MSS_SPI_init(&g_mss_spi1);
20000a0c:	f244 2050 	movw	r0, #16976	; 0x4250
20000a10:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000a14:	f001 fb70 	bl	200020f8 <MSS_SPI_init>
	MSS_I2C_init(&g_mss_i2c1 , TOUCH_ADDR, MSS_I2C_PCLK_DIV_960 );
20000a18:	f244 30cc 	movw	r0, #17356	; 0x43cc
20000a1c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000a20:	f04f 0141 	mov.w	r1, #65	; 0x41
20000a24:	f04f 0204 	mov.w	r2, #4
20000a28:	f001 ffe6 	bl	200029f8 <MSS_I2C_init>
	MSS_GPIO_init();
20000a2c:	f002 f872 	bl	20002b14 <MSS_GPIO_init>
	ACE_init();
20000a30:	f002 f8dc 	bl	20002bec <ACE_init>
	MSS_GPIO_config(DC, MSS_GPIO_OUTPUT_MODE);
20000a34:	f04f 0000 	mov.w	r0, #0
20000a38:	f04f 0105 	mov.w	r1, #5
20000a3c:	f002 f89a 	bl	20002b74 <MSS_GPIO_config>
	ace_y = ACE_get_channel_handle((const uint8_t*)"ADCDirectInput_0");
20000a40:	f643 7090 	movw	r0, #16272	; 0x3f90
20000a44:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000a48:	f002 f8ae 	bl	20002ba8 <ACE_get_channel_handle>
20000a4c:	4603      	mov	r3, r0
20000a4e:	461a      	mov	r2, r3
20000a50:	f244 13bc 	movw	r3, #16828	; 0x41bc
20000a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000a58:	701a      	strb	r2, [r3, #0]
	ace_x = ACE_get_channel_handle((const uint8_t*)"ADCDirectInput_1");
20000a5a:	f643 70a4 	movw	r0, #16292	; 0x3fa4
20000a5e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000a62:	f002 f8a1 	bl	20002ba8 <ACE_get_channel_handle>
20000a66:	4603      	mov	r3, r0
20000a68:	461a      	mov	r2, r3
20000a6a:	f244 13b9 	movw	r3, #16825	; 0x41b9
20000a6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000a72:	701a      	strb	r2, [r3, #0]
	
	configureSPI(8);
20000a74:	f04f 0008 	mov.w	r0, #8
20000a78:	f000 fb88 	bl	2000118c <configureSPI>
	set_SPI_CS();
20000a7c:	f000 fbcc 	bl	20001218 <set_SPI_CS>
	sendCommandOnly(ILI9341_SWRESET);
20000a80:	f04f 0001 	mov.w	r0, #1
20000a84:	f000 face 	bl	20001024 <sendCommandOnly>
	delay(150);
20000a88:	f04f 0096 	mov.w	r0, #150	; 0x96
20000a8c:	f000 faaa 	bl	20000fe4 <delay>

	while((cmd = pgm_read_byte(addr++)) > 0) {
20000a90:	e024      	b.n	20000adc <touchscreen_begin+0xe0>
		x = pgm_read_byte(addr++);
20000a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
20000a94:	781b      	ldrb	r3, [r3, #0]
20000a96:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
20000a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
20000a9c:	f103 0301 	add.w	r3, r3, #1
20000aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
		numArgs = x & 0x7F;
20000aa2:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
20000aa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
20000aaa:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
		sendCommand(cmd, addr, numArgs);
20000aae:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
20000ab2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
20000ab6:	4610      	mov	r0, r2
20000ab8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
20000aba:	461a      	mov	r2, r3
20000abc:	f000 fa62 	bl	20000f84 <sendCommand>
		addr += numArgs;
20000ac0:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
20000ac4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
20000ac6:	4413      	add	r3, r2
20000ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
		if(x & 0x80) delay(150);
20000aca:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
20000ace:	b25b      	sxtb	r3, r3
20000ad0:	2b00      	cmp	r3, #0
20000ad2:	da03      	bge.n	20000adc <touchscreen_begin+0xe0>
20000ad4:	f04f 0096 	mov.w	r0, #150	; 0x96
20000ad8:	f000 fa84 	bl	20000fe4 <delay>
	configureSPI(8);
	set_SPI_CS();
	sendCommandOnly(ILI9341_SWRESET);
	delay(150);

	while((cmd = pgm_read_byte(addr++)) > 0) {
20000adc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
20000ade:	781b      	ldrb	r3, [r3, #0]
20000ae0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
20000ae4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
20000ae8:	2b00      	cmp	r3, #0
20000aea:	bf0c      	ite	eq
20000aec:	2300      	moveq	r3, #0
20000aee:	2301      	movne	r3, #1
20000af0:	b2db      	uxtb	r3, r3
20000af2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
20000af4:	f102 0201 	add.w	r2, r2, #1
20000af8:	64fa      	str	r2, [r7, #76]	; 0x4c
20000afa:	2b00      	cmp	r3, #0
20000afc:	d1c9      	bne.n	20000a92 <touchscreen_begin+0x96>
		numArgs = x & 0x7F;
		sendCommand(cmd, addr, numArgs);
		addr += numArgs;
		if(x & 0x80) delay(150);
	}
	clear_SPI_CS();
20000afe:	f000 fb97 	bl	20001230 <clear_SPI_CS>

	writeRegister8(STMPE_SYS_CTRL1, STMPE_SYS_CTRL1_RESET);
20000b02:	f04f 0003 	mov.w	r0, #3
20000b06:	f04f 0102 	mov.w	r1, #2
20000b0a:	f000 fbb1 	bl	20001270 <writeRegister8>
	  delay(10);
20000b0e:	f04f 000a 	mov.w	r0, #10
20000b12:	f000 fa67 	bl	20000fe4 <delay>

	  for ( i = 0; i < 65; i++) {
20000b16:	f04f 0300 	mov.w	r3, #0
20000b1a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
20000b1e:	e00a      	b.n	20000b36 <touchscreen_begin+0x13a>
	    readRegister8(i);
20000b20:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
20000b24:	4618      	mov	r0, r3
20000b26:	f000 fbcb 	bl	200012c0 <readRegister8>
	clear_SPI_CS();

	writeRegister8(STMPE_SYS_CTRL1, STMPE_SYS_CTRL1_RESET);
	  delay(10);

	  for ( i = 0; i < 65; i++) {
20000b2a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
20000b2e:	f103 0301 	add.w	r3, r3, #1
20000b32:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
20000b36:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
20000b3a:	2b40      	cmp	r3, #64	; 0x40
20000b3c:	d9f0      	bls.n	20000b20 <touchscreen_begin+0x124>
	    readRegister8(i);
	  }

	  writeRegister8(STMPE_SYS_CTRL2, 0x0); // turn on clocks!
20000b3e:	f04f 0004 	mov.w	r0, #4
20000b42:	f04f 0100 	mov.w	r1, #0
20000b46:	f000 fb93 	bl	20001270 <writeRegister8>
	  writeRegister8(STMPE_TSC_CTRL,
20000b4a:	f04f 0040 	mov.w	r0, #64	; 0x40
20000b4e:	f04f 0101 	mov.w	r1, #1
20000b52:	f000 fb8d 	bl	20001270 <writeRegister8>
	                 STMPE_TSC_CTRL_XYZ | STMPE_TSC_CTRL_EN); // XYZ and enable!
	  // Serial.println(readRegister8(STMPE_TSC_CTRL), HEX);
	  writeRegister8(STMPE_INT_EN, STMPE_INT_EN_TOUCHDET);
20000b56:	f04f 000a 	mov.w	r0, #10
20000b5a:	f04f 0101 	mov.w	r1, #1
20000b5e:	f000 fb87 	bl	20001270 <writeRegister8>
	  writeRegister8(STMPE_ADC_CTRL1, STMPE_ADC_CTRL1_10BIT |
20000b62:	f04f 0020 	mov.w	r0, #32
20000b66:	f04f 0160 	mov.w	r1, #96	; 0x60
20000b6a:	f000 fb81 	bl	20001270 <writeRegister8>
	                                      (0x6 << 4)); // 96 clocks per conversion
	  writeRegister8(STMPE_ADC_CTRL2, STMPE_ADC_CTRL2_6_5MHZ);
20000b6e:	f04f 0021 	mov.w	r0, #33	; 0x21
20000b72:	f04f 0102 	mov.w	r1, #2
20000b76:	f000 fb7b 	bl	20001270 <writeRegister8>
	  writeRegister8(STMPE_TSC_CFG, STMPE_TSC_CFG_4SAMPLE |
20000b7a:	f04f 0041 	mov.w	r0, #65	; 0x41
20000b7e:	f04f 01a4 	mov.w	r1, #164	; 0xa4
20000b82:	f000 fb75 	bl	20001270 <writeRegister8>
	                                    STMPE_TSC_CFG_DELAY_1MS |
	                                    STMPE_TSC_CFG_SETTLE_5MS);
	  writeRegister8(STMPE_TSC_FRACTION_Z, 0x6);
20000b86:	f04f 0056 	mov.w	r0, #86	; 0x56
20000b8a:	f04f 0106 	mov.w	r1, #6
20000b8e:	f000 fb6f 	bl	20001270 <writeRegister8>
	  writeRegister8(STMPE_FIFO_TH, 1);
20000b92:	f04f 004a 	mov.w	r0, #74	; 0x4a
20000b96:	f04f 0101 	mov.w	r1, #1
20000b9a:	f000 fb69 	bl	20001270 <writeRegister8>
	  writeRegister8(STMPE_FIFO_STA, STMPE_FIFO_STA_RESET);
20000b9e:	f04f 004b 	mov.w	r0, #75	; 0x4b
20000ba2:	f04f 0101 	mov.w	r1, #1
20000ba6:	f000 fb63 	bl	20001270 <writeRegister8>
	  writeRegister8(STMPE_FIFO_STA, 0); // unreset
20000baa:	f04f 004b 	mov.w	r0, #75	; 0x4b
20000bae:	f04f 0100 	mov.w	r1, #0
20000bb2:	f000 fb5d 	bl	20001270 <writeRegister8>
	  writeRegister8(STMPE_TSC_I_DRIVE, STMPE_TSC_I_DRIVE_50MA);
20000bb6:	f04f 0058 	mov.w	r0, #88	; 0x58
20000bba:	f04f 0101 	mov.w	r1, #1
20000bbe:	f000 fb57 	bl	20001270 <writeRegister8>
	  writeRegister8(STMPE_INT_STA, 0xFF); // reset all ints
20000bc2:	f04f 000b 	mov.w	r0, #11
20000bc6:	f04f 01ff 	mov.w	r1, #255	; 0xff
20000bca:	f000 fb51 	bl	20001270 <writeRegister8>
	  writeRegister8(STMPE_INT_CTRL,
20000bce:	f04f 0009 	mov.w	r0, #9
20000bd2:	f04f 0105 	mov.w	r1, #5
20000bd6:	f000 fb4b 	bl	20001270 <writeRegister8>
	                 STMPE_INT_CTRL_POL_HIGH | STMPE_INT_CTRL_ENABLE);


}
20000bda:	f107 0750 	add.w	r7, r7, #80	; 0x50
20000bde:	46bd      	mov	sp, r7
20000be0:	bd80      	pop	{r7, pc}
20000be2:	bf00      	nop

20000be4 <readTouch>:
	MSS_GPIO_set_output(yn, 0);

   return z;
}

void readTouch(uint16_t *x, uint16_t *y, uint8_t* z){
20000be4:	b590      	push	{r4, r7, lr}
20000be6:	b087      	sub	sp, #28
20000be8:	af00      	add	r7, sp, #0
20000bea:	60f8      	str	r0, [r7, #12]
20000bec:	60b9      	str	r1, [r7, #8]
20000bee:	607a      	str	r2, [r7, #4]
	uint8_t data[4];
	uint8_t i = 0;
20000bf0:	f04f 0300 	mov.w	r3, #0
20000bf4:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i < 4; i++) {
20000bf6:	f04f 0300 	mov.w	r3, #0
20000bfa:	75fb      	strb	r3, [r7, #23]
20000bfc:	e010      	b.n	20000c20 <readTouch+0x3c>
	    data[i] = readRegister8(0xD7); // _spi->transfer(0x00);
20000bfe:	7dfc      	ldrb	r4, [r7, #23]
20000c00:	f04f 00d7 	mov.w	r0, #215	; 0xd7
20000c04:	f000 fb5c 	bl	200012c0 <readRegister8>
20000c08:	4603      	mov	r3, r0
20000c0a:	461a      	mov	r2, r3
20000c0c:	f107 0118 	add.w	r1, r7, #24
20000c10:	eb01 0304 	add.w	r3, r1, r4
20000c14:	f803 2c08 	strb.w	r2, [r3, #-8]
}

void readTouch(uint16_t *x, uint16_t *y, uint8_t* z){
	uint8_t data[4];
	uint8_t i = 0;
	for (i = 0; i < 4; i++) {
20000c18:	7dfb      	ldrb	r3, [r7, #23]
20000c1a:	f103 0301 	add.w	r3, r3, #1
20000c1e:	75fb      	strb	r3, [r7, #23]
20000c20:	7dfb      	ldrb	r3, [r7, #23]
20000c22:	2b03      	cmp	r3, #3
20000c24:	d9eb      	bls.n	20000bfe <readTouch+0x1a>
	    data[i] = readRegister8(0xD7); // _spi->transfer(0x00);
	    // Serial.print("0x"); Serial.print(data[i], HEX); Serial.print(" / ");
	  }
	  *x = data[0];
20000c26:	7c3b      	ldrb	r3, [r7, #16]
20000c28:	461a      	mov	r2, r3
20000c2a:	68fb      	ldr	r3, [r7, #12]
20000c2c:	801a      	strh	r2, [r3, #0]
	  *x <<= 4;
20000c2e:	68fb      	ldr	r3, [r7, #12]
20000c30:	881b      	ldrh	r3, [r3, #0]
20000c32:	ea4f 1303 	mov.w	r3, r3, lsl #4
20000c36:	b29a      	uxth	r2, r3
20000c38:	68fb      	ldr	r3, [r7, #12]
20000c3a:	801a      	strh	r2, [r3, #0]
	  *x |= (data[1] >> 4);
20000c3c:	68fb      	ldr	r3, [r7, #12]
20000c3e:	881a      	ldrh	r2, [r3, #0]
20000c40:	7c7b      	ldrb	r3, [r7, #17]
20000c42:	ea4f 1313 	mov.w	r3, r3, lsr #4
20000c46:	b2db      	uxtb	r3, r3
20000c48:	ea42 0303 	orr.w	r3, r2, r3
20000c4c:	b29a      	uxth	r2, r3
20000c4e:	68fb      	ldr	r3, [r7, #12]
20000c50:	801a      	strh	r2, [r3, #0]
	  *y = data[1] & 0x0F;
20000c52:	7c7b      	ldrb	r3, [r7, #17]
20000c54:	f003 030f 	and.w	r3, r3, #15
20000c58:	68ba      	ldr	r2, [r7, #8]
20000c5a:	8013      	strh	r3, [r2, #0]
	  *y <<= 8;
20000c5c:	68bb      	ldr	r3, [r7, #8]
20000c5e:	881b      	ldrh	r3, [r3, #0]
20000c60:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000c64:	b29a      	uxth	r2, r3
20000c66:	68bb      	ldr	r3, [r7, #8]
20000c68:	801a      	strh	r2, [r3, #0]
	  *y |= data[2];
20000c6a:	68bb      	ldr	r3, [r7, #8]
20000c6c:	881a      	ldrh	r2, [r3, #0]
20000c6e:	7cbb      	ldrb	r3, [r7, #18]
20000c70:	ea42 0303 	orr.w	r3, r2, r3
20000c74:	b29a      	uxth	r2, r3
20000c76:	68bb      	ldr	r3, [r7, #8]
20000c78:	801a      	strh	r2, [r3, #0]
	  *z = data[3];
20000c7a:	7cfa      	ldrb	r2, [r7, #19]
20000c7c:	687b      	ldr	r3, [r7, #4]
20000c7e:	701a      	strb	r2, [r3, #0]
}
20000c80:	f107 071c 	add.w	r7, r7, #28
20000c84:	46bd      	mov	sp, r7
20000c86:	bd90      	pop	{r4, r7, pc}

20000c88 <touched>:
int touched(){
20000c88:	b580      	push	{r7, lr}
20000c8a:	af00      	add	r7, sp, #0

	return (readRegister8(STMPE_TSC_CTRL) & 0x80);
20000c8c:	f04f 0040 	mov.w	r0, #64	; 0x40
20000c90:	f000 fb16 	bl	200012c0 <readRegister8>
20000c94:	4603      	mov	r3, r0
20000c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
}
20000c9a:	4618      	mov	r0, r3
20000c9c:	bd80      	pop	{r7, pc}
20000c9e:	bf00      	nop

20000ca0 <drawPixel>:

void drawPixel(uint16_t x, uint16_t y, uint16_t color){
20000ca0:	b580      	push	{r7, lr}
20000ca2:	b082      	sub	sp, #8
20000ca4:	af00      	add	r7, sp, #0
20000ca6:	4613      	mov	r3, r2
20000ca8:	4602      	mov	r2, r0
20000caa:	80fa      	strh	r2, [r7, #6]
20000cac:	460a      	mov	r2, r1
20000cae:	80ba      	strh	r2, [r7, #4]
20000cb0:	807b      	strh	r3, [r7, #2]

	set_SPI_CS();
20000cb2:	f000 fab1 	bl	20001218 <set_SPI_CS>
	setAddr(x, y, x+1, y+1);
20000cb6:	88fb      	ldrh	r3, [r7, #6]
20000cb8:	f103 0301 	add.w	r3, r3, #1
20000cbc:	b29a      	uxth	r2, r3
20000cbe:	88bb      	ldrh	r3, [r7, #4]
20000cc0:	f103 0301 	add.w	r3, r3, #1
20000cc4:	b29b      	uxth	r3, r3
20000cc6:	88f8      	ldrh	r0, [r7, #6]
20000cc8:	88b9      	ldrh	r1, [r7, #4]
20000cca:	f000 f933 	bl	20000f34 <setAddr>
	set_DC_HIGH();
20000cce:	f000 fabb 	bl	20001248 <set_DC_HIGH>
	sendSPI16(color);
20000cd2:	887b      	ldrh	r3, [r7, #2]
20000cd4:	4618      	mov	r0, r3
20000cd6:	f000 fa83 	bl	200011e0 <sendSPI16>
	clear_SPI_CS();
20000cda:	f000 faa9 	bl	20001230 <clear_SPI_CS>
}
20000cde:	f107 0708 	add.w	r7, r7, #8
20000ce2:	46bd      	mov	sp, r7
20000ce4:	bd80      	pop	{r7, pc}
20000ce6:	bf00      	nop

20000ce8 <drawRectangle>:


void drawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color){
20000ce8:	b580      	push	{r7, lr}
20000cea:	b084      	sub	sp, #16
20000cec:	af00      	add	r7, sp, #0
20000cee:	80f8      	strh	r0, [r7, #6]
20000cf0:	80b9      	strh	r1, [r7, #4]
20000cf2:	807a      	strh	r2, [r7, #2]
20000cf4:	803b      	strh	r3, [r7, #0]
	int i, j;

		set_SPI_CS();
20000cf6:	f000 fa8f 	bl	20001218 <set_SPI_CS>
		setAddr(x,y, x+w, y+h);
20000cfa:	88fa      	ldrh	r2, [r7, #6]
20000cfc:	887b      	ldrh	r3, [r7, #2]
20000cfe:	4413      	add	r3, r2
20000d00:	b29a      	uxth	r2, r3
20000d02:	88b9      	ldrh	r1, [r7, #4]
20000d04:	883b      	ldrh	r3, [r7, #0]
20000d06:	440b      	add	r3, r1
20000d08:	b29b      	uxth	r3, r3
20000d0a:	88f8      	ldrh	r0, [r7, #6]
20000d0c:	88b9      	ldrh	r1, [r7, #4]
20000d0e:	f000 f911 	bl	20000f34 <setAddr>
		set_DC_HIGH();
20000d12:	f000 fa99 	bl	20001248 <set_DC_HIGH>
		for(i = x; i<x+w; i++){
20000d16:	88fb      	ldrh	r3, [r7, #6]
20000d18:	60bb      	str	r3, [r7, #8]
20000d1a:	e018      	b.n	20000d4e <drawRectangle+0x66>
			for (j =y; j<y+h; j++){
20000d1c:	88bb      	ldrh	r3, [r7, #4]
20000d1e:	60fb      	str	r3, [r7, #12]
20000d20:	e007      	b.n	20000d32 <drawRectangle+0x4a>
				sendSPI16(color);
20000d22:	8b3b      	ldrh	r3, [r7, #24]
20000d24:	4618      	mov	r0, r3
20000d26:	f000 fa5b 	bl	200011e0 <sendSPI16>

		set_SPI_CS();
		setAddr(x,y, x+w, y+h);
		set_DC_HIGH();
		for(i = x; i<x+w; i++){
			for (j =y; j<y+h; j++){
20000d2a:	68fb      	ldr	r3, [r7, #12]
20000d2c:	f103 0301 	add.w	r3, r3, #1
20000d30:	60fb      	str	r3, [r7, #12]
20000d32:	88ba      	ldrh	r2, [r7, #4]
20000d34:	883b      	ldrh	r3, [r7, #0]
20000d36:	441a      	add	r2, r3
20000d38:	68fb      	ldr	r3, [r7, #12]
20000d3a:	429a      	cmp	r2, r3
20000d3c:	dcf1      	bgt.n	20000d22 <drawRectangle+0x3a>
				sendSPI16(color);
			}
			sendSPI16(color);
20000d3e:	8b3b      	ldrh	r3, [r7, #24]
20000d40:	4618      	mov	r0, r3
20000d42:	f000 fa4d 	bl	200011e0 <sendSPI16>
	int i, j;

		set_SPI_CS();
		setAddr(x,y, x+w, y+h);
		set_DC_HIGH();
		for(i = x; i<x+w; i++){
20000d46:	68bb      	ldr	r3, [r7, #8]
20000d48:	f103 0301 	add.w	r3, r3, #1
20000d4c:	60bb      	str	r3, [r7, #8]
20000d4e:	88fa      	ldrh	r2, [r7, #6]
20000d50:	887b      	ldrh	r3, [r7, #2]
20000d52:	441a      	add	r2, r3
20000d54:	68bb      	ldr	r3, [r7, #8]
20000d56:	429a      	cmp	r2, r3
20000d58:	dce0      	bgt.n	20000d1c <drawRectangle+0x34>
				sendSPI16(color);
			}
			sendSPI16(color);
		}

		clear_SPI_CS();
20000d5a:	f000 fa69 	bl	20001230 <clear_SPI_CS>
}
20000d5e:	f107 0710 	add.w	r7, r7, #16
20000d62:	46bd      	mov	sp, r7
20000d64:	bd80      	pop	{r7, pc}
20000d66:	bf00      	nop

20000d68 <drawRectanglePixel>:
void drawRectanglePixel(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color){
20000d68:	b580      	push	{r7, lr}
20000d6a:	b086      	sub	sp, #24
20000d6c:	af02      	add	r7, sp, #8
20000d6e:	80f8      	strh	r0, [r7, #6]
20000d70:	80b9      	strh	r1, [r7, #4]
20000d72:	807a      	strh	r2, [r7, #2]
20000d74:	803b      	strh	r3, [r7, #0]
	uint16_t i;

	 for (i=x; i<x+w; i++) {
20000d76:	88fb      	ldrh	r3, [r7, #6]
20000d78:	81fb      	strh	r3, [r7, #14]
20000d7a:	e018      	b.n	20000dae <drawRectanglePixel+0x46>
	        writeLine(i, y, i, y+h-1, color);
20000d7c:	89f8      	ldrh	r0, [r7, #14]
20000d7e:	88b9      	ldrh	r1, [r7, #4]
20000d80:	89fa      	ldrh	r2, [r7, #14]
20000d82:	f8b7 c004 	ldrh.w	ip, [r7, #4]
20000d86:	883b      	ldrh	r3, [r7, #0]
20000d88:	4463      	add	r3, ip
20000d8a:	b29b      	uxth	r3, r3
20000d8c:	f103 33ff 	add.w	r3, r3, #4294967295
20000d90:	b29b      	uxth	r3, r3
20000d92:	b200      	sxth	r0, r0
20000d94:	b209      	sxth	r1, r1
20000d96:	b212      	sxth	r2, r2
20000d98:	b21b      	sxth	r3, r3
20000d9a:	f8b7 c018 	ldrh.w	ip, [r7, #24]
20000d9e:	f8cd c000 	str.w	ip, [sp]
20000da2:	f000 f955 	bl	20001050 <writeLine>
		clear_SPI_CS();
}
void drawRectanglePixel(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color){
	uint16_t i;

	 for (i=x; i<x+w; i++) {
20000da6:	89fb      	ldrh	r3, [r7, #14]
20000da8:	f103 0301 	add.w	r3, r3, #1
20000dac:	81fb      	strh	r3, [r7, #14]
20000dae:	89fa      	ldrh	r2, [r7, #14]
20000db0:	88f9      	ldrh	r1, [r7, #6]
20000db2:	887b      	ldrh	r3, [r7, #2]
20000db4:	440b      	add	r3, r1
20000db6:	429a      	cmp	r2, r3
20000db8:	dbe0      	blt.n	20000d7c <drawRectanglePixel+0x14>
	        writeLine(i, y, i, y+h-1, color);
	    }
}		
20000dba:	f107 0710 	add.w	r7, r7, #16
20000dbe:	46bd      	mov	sp, r7
20000dc0:	bd80      	pop	{r7, pc}
20000dc2:	bf00      	nop

20000dc4 <drawFillScreen>:

void drawFillScreen(uint16_t color){
20000dc4:	b580      	push	{r7, lr}
20000dc6:	b084      	sub	sp, #16
20000dc8:	af00      	add	r7, sp, #0
20000dca:	4603      	mov	r3, r0
20000dcc:	80fb      	strh	r3, [r7, #6]
	int i, j;
	//drawRectanglePixel(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT, color);
	set_SPI_CS();
20000dce:	f000 fa23 	bl	20001218 <set_SPI_CS>
	setAddr(0, 0, ILI9341_TFTWIDTH-1, ILI9341_TFTHEIGHT-1);
20000dd2:	f04f 0000 	mov.w	r0, #0
20000dd6:	f04f 0100 	mov.w	r1, #0
20000dda:	f04f 02ef 	mov.w	r2, #239	; 0xef
20000dde:	f240 133f 	movw	r3, #319	; 0x13f
20000de2:	f000 f8a7 	bl	20000f34 <setAddr>
	set_DC_HIGH();
20000de6:	f000 fa2f 	bl	20001248 <set_DC_HIGH>
	for(i = 0; i<ILI9341_TFTWIDTH; i++){
20000dea:	f04f 0300 	mov.w	r3, #0
20000dee:	60bb      	str	r3, [r7, #8]
20000df0:	e018      	b.n	20000e24 <drawFillScreen+0x60>
		for (j =0; j<ILI9341_TFTHEIGHT; j++){
20000df2:	f04f 0300 	mov.w	r3, #0
20000df6:	60fb      	str	r3, [r7, #12]
20000df8:	e007      	b.n	20000e0a <drawFillScreen+0x46>
			sendSPI16(color);
20000dfa:	88fb      	ldrh	r3, [r7, #6]
20000dfc:	4618      	mov	r0, r3
20000dfe:	f000 f9ef 	bl	200011e0 <sendSPI16>
	//drawRectanglePixel(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT, color);
	set_SPI_CS();
	setAddr(0, 0, ILI9341_TFTWIDTH-1, ILI9341_TFTHEIGHT-1);
	set_DC_HIGH();
	for(i = 0; i<ILI9341_TFTWIDTH; i++){
		for (j =0; j<ILI9341_TFTHEIGHT; j++){
20000e02:	68fb      	ldr	r3, [r7, #12]
20000e04:	f103 0301 	add.w	r3, r3, #1
20000e08:	60fb      	str	r3, [r7, #12]
20000e0a:	68fa      	ldr	r2, [r7, #12]
20000e0c:	f240 133f 	movw	r3, #319	; 0x13f
20000e10:	429a      	cmp	r2, r3
20000e12:	ddf2      	ble.n	20000dfa <drawFillScreen+0x36>
			sendSPI16(color);
		}
		sendSPI16(color);
20000e14:	88fb      	ldrh	r3, [r7, #6]
20000e16:	4618      	mov	r0, r3
20000e18:	f000 f9e2 	bl	200011e0 <sendSPI16>
	int i, j;
	//drawRectanglePixel(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT, color);
	set_SPI_CS();
	setAddr(0, 0, ILI9341_TFTWIDTH-1, ILI9341_TFTHEIGHT-1);
	set_DC_HIGH();
	for(i = 0; i<ILI9341_TFTWIDTH; i++){
20000e1c:	68bb      	ldr	r3, [r7, #8]
20000e1e:	f103 0301 	add.w	r3, r3, #1
20000e22:	60bb      	str	r3, [r7, #8]
20000e24:	68bb      	ldr	r3, [r7, #8]
20000e26:	2bef      	cmp	r3, #239	; 0xef
20000e28:	dde3      	ble.n	20000df2 <drawFillScreen+0x2e>
			sendSPI16(color);
		}
		sendSPI16(color);
	}

	clear_SPI_CS();
20000e2a:	f000 fa01 	bl	20001230 <clear_SPI_CS>
}
20000e2e:	f107 0710 	add.w	r7, r7, #16
20000e32:	46bd      	mov	sp, r7
20000e34:	bd80      	pop	{r7, pc}
20000e36:	bf00      	nop

20000e38 <drawText1>:

void drawText1(uint16_t color){
20000e38:	b580      	push	{r7, lr}
20000e3a:	b084      	sub	sp, #16
20000e3c:	af02      	add	r7, sp, #8
20000e3e:	4603      	mov	r3, r0
20000e40:	80fb      	strh	r3, [r7, #6]
	drawRectanglePixel(40, 210, 5, 25, color);
20000e42:	88fb      	ldrh	r3, [r7, #6]
20000e44:	9300      	str	r3, [sp, #0]
20000e46:	f04f 0028 	mov.w	r0, #40	; 0x28
20000e4a:	f04f 01d2 	mov.w	r1, #210	; 0xd2
20000e4e:	f04f 0205 	mov.w	r2, #5
20000e52:	f04f 0319 	mov.w	r3, #25
20000e56:	f7ff ff87 	bl	20000d68 <drawRectanglePixel>
	drawRectanglePixel(40, 220, 30, 5, color);
20000e5a:	88fb      	ldrh	r3, [r7, #6]
20000e5c:	9300      	str	r3, [sp, #0]
20000e5e:	f04f 0028 	mov.w	r0, #40	; 0x28
20000e62:	f04f 01dc 	mov.w	r1, #220	; 0xdc
20000e66:	f04f 021e 	mov.w	r2, #30
20000e6a:	f04f 0305 	mov.w	r3, #5
20000e6e:	f7ff ff7b 	bl	20000d68 <drawRectanglePixel>


}
20000e72:	f107 0708 	add.w	r7, r7, #8
20000e76:	46bd      	mov	sp, r7
20000e78:	bd80      	pop	{r7, pc}
20000e7a:	bf00      	nop

20000e7c <drawText2>:

void drawText2(uint16_t color){
20000e7c:	b580      	push	{r7, lr}
20000e7e:	b084      	sub	sp, #16
20000e80:	af02      	add	r7, sp, #8
20000e82:	4603      	mov	r3, r0
20000e84:	80fb      	strh	r3, [r7, #6]
	drawRectanglePixel(40, 110, 5, 20, color);
20000e86:	88fb      	ldrh	r3, [r7, #6]
20000e88:	9300      	str	r3, [sp, #0]
20000e8a:	f04f 0028 	mov.w	r0, #40	; 0x28
20000e8e:	f04f 016e 	mov.w	r1, #110	; 0x6e
20000e92:	f04f 0205 	mov.w	r2, #5
20000e96:	f04f 0314 	mov.w	r3, #20
20000e9a:	f7ff ff65 	bl	20000d68 <drawRectanglePixel>
	drawRectanglePixel(40, 130, 30, 5, color);
20000e9e:	88fb      	ldrh	r3, [r7, #6]
20000ea0:	9300      	str	r3, [sp, #0]
20000ea2:	f04f 0028 	mov.w	r0, #40	; 0x28
20000ea6:	f04f 0182 	mov.w	r1, #130	; 0x82
20000eaa:	f04f 021e 	mov.w	r2, #30
20000eae:	f04f 0305 	mov.w	r3, #5
20000eb2:	f7ff ff59 	bl	20000d68 <drawRectanglePixel>
	drawRectanglePixel(65, 110, 5, 20, color);
20000eb6:	88fb      	ldrh	r3, [r7, #6]
20000eb8:	9300      	str	r3, [sp, #0]
20000eba:	f04f 0041 	mov.w	r0, #65	; 0x41
20000ebe:	f04f 016e 	mov.w	r1, #110	; 0x6e
20000ec2:	f04f 0205 	mov.w	r2, #5
20000ec6:	f04f 0314 	mov.w	r3, #20
20000eca:	f7ff ff4d 	bl	20000d68 <drawRectanglePixel>

}
20000ece:	f107 0708 	add.w	r7, r7, #8
20000ed2:	46bd      	mov	sp, r7
20000ed4:	bd80      	pop	{r7, pc}
20000ed6:	bf00      	nop

20000ed8 <drawText3>:

void drawText3(uint16_t color){
20000ed8:	b580      	push	{r7, lr}
20000eda:	b084      	sub	sp, #16
20000edc:	af02      	add	r7, sp, #8
20000ede:	4603      	mov	r3, r0
20000ee0:	80fb      	strh	r3, [r7, #6]
	drawRectanglePixel(160, 160, 30, 5, color);
20000ee2:	88fb      	ldrh	r3, [r7, #6]
20000ee4:	9300      	str	r3, [sp, #0]
20000ee6:	f04f 00a0 	mov.w	r0, #160	; 0xa0
20000eea:	f04f 01a0 	mov.w	r1, #160	; 0xa0
20000eee:	f04f 021e 	mov.w	r2, #30
20000ef2:	f04f 0305 	mov.w	r3, #5
20000ef6:	f7ff ff37 	bl	20000d68 <drawRectanglePixel>
	drawRectanglePixel(160, 160, 5, 20, color);
20000efa:	88fb      	ldrh	r3, [r7, #6]
20000efc:	9300      	str	r3, [sp, #0]
20000efe:	f04f 00a0 	mov.w	r0, #160	; 0xa0
20000f02:	f04f 01a0 	mov.w	r1, #160	; 0xa0
20000f06:	f04f 0205 	mov.w	r2, #5
20000f0a:	f04f 0314 	mov.w	r3, #20
20000f0e:	f7ff ff2b 	bl	20000d68 <drawRectanglePixel>
	drawRectanglePixel(165, 160, 5, 20, color);
20000f12:	88fb      	ldrh	r3, [r7, #6]
20000f14:	9300      	str	r3, [sp, #0]
20000f16:	f04f 00a5 	mov.w	r0, #165	; 0xa5
20000f1a:	f04f 01a0 	mov.w	r1, #160	; 0xa0
20000f1e:	f04f 0205 	mov.w	r2, #5
20000f22:	f04f 0314 	mov.w	r3, #20
20000f26:	f7ff ff1f 	bl	20000d68 <drawRectanglePixel>
}
20000f2a:	f107 0708 	add.w	r7, r7, #8
20000f2e:	46bd      	mov	sp, r7
20000f30:	bd80      	pop	{r7, pc}
20000f32:	bf00      	nop

20000f34 <setAddr>:

void setAddr(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1){
20000f34:	b580      	push	{r7, lr}
20000f36:	b082      	sub	sp, #8
20000f38:	af00      	add	r7, sp, #0
20000f3a:	80f8      	strh	r0, [r7, #6]
20000f3c:	80b9      	strh	r1, [r7, #4]
20000f3e:	807a      	strh	r2, [r7, #2]
20000f40:	803b      	strh	r3, [r7, #0]
	
	sendCommandOnly(ILI9341_CASET);
20000f42:	f04f 002a 	mov.w	r0, #42	; 0x2a
20000f46:	f000 f86d 	bl	20001024 <sendCommandOnly>
	sendSPI16(x0);
20000f4a:	88fb      	ldrh	r3, [r7, #6]
20000f4c:	4618      	mov	r0, r3
20000f4e:	f000 f947 	bl	200011e0 <sendSPI16>
	sendSPI16(x1);
20000f52:	887b      	ldrh	r3, [r7, #2]
20000f54:	4618      	mov	r0, r3
20000f56:	f000 f943 	bl	200011e0 <sendSPI16>
	sendCommandOnly(ILI9341_PASET);
20000f5a:	f04f 002b 	mov.w	r0, #43	; 0x2b
20000f5e:	f000 f861 	bl	20001024 <sendCommandOnly>
	sendSPI16(y0);
20000f62:	88bb      	ldrh	r3, [r7, #4]
20000f64:	4618      	mov	r0, r3
20000f66:	f000 f93b 	bl	200011e0 <sendSPI16>
	sendSPI16(y1);
20000f6a:	883b      	ldrh	r3, [r7, #0]
20000f6c:	4618      	mov	r0, r3
20000f6e:	f000 f937 	bl	200011e0 <sendSPI16>
	sendCommandOnly(ILI9341_RAMWR);
20000f72:	f04f 002c 	mov.w	r0, #44	; 0x2c
20000f76:	f000 f855 	bl	20001024 <sendCommandOnly>
}
20000f7a:	f107 0708 	add.w	r7, r7, #8
20000f7e:	46bd      	mov	sp, r7
20000f80:	bd80      	pop	{r7, pc}
20000f82:	bf00      	nop

20000f84 <sendCommand>:

void sendCommand(uint8_t commandByte, uint8_t *dataBytes, uint8_t numDataBytes){
20000f84:	b580      	push	{r7, lr}
20000f86:	b086      	sub	sp, #24
20000f88:	af00      	add	r7, sp, #0
20000f8a:	60b9      	str	r1, [r7, #8]
20000f8c:	4613      	mov	r3, r2
20000f8e:	4602      	mov	r2, r0
20000f90:	73fa      	strb	r2, [r7, #15]
20000f92:	71fb      	strb	r3, [r7, #7]
		int i=0;
20000f94:	f04f 0300 	mov.w	r3, #0
20000f98:	617b      	str	r3, [r7, #20]
		configureSPI(8);
20000f9a:	f04f 0008 	mov.w	r0, #8
20000f9e:	f000 f8f5 	bl	2000118c <configureSPI>

	    set_DC_LOW(); // Command mode
20000fa2:	f000 f95b 	bl	2000125c <set_DC_LOW>
	    sendSPI(commandByte); // Send the command byte
20000fa6:	7bfb      	ldrb	r3, [r7, #15]
20000fa8:	4618      	mov	r0, r3
20000faa:	f000 f907 	bl	200011bc <sendSPI>

	    set_DC_HIGH();
20000fae:	f000 f94b 	bl	20001248 <set_DC_HIGH>
	    for (i=0; i<numDataBytes; i++) {
20000fb2:	f04f 0300 	mov.w	r3, #0
20000fb6:	617b      	str	r3, [r7, #20]
20000fb8:	e00c      	b.n	20000fd4 <sendCommand+0x50>
	      sendSPI(*dataBytes); // Send the data bytes
20000fba:	68bb      	ldr	r3, [r7, #8]
20000fbc:	781b      	ldrb	r3, [r3, #0]
20000fbe:	4618      	mov	r0, r3
20000fc0:	f000 f8fc 	bl	200011bc <sendSPI>
	      dataBytes++;
20000fc4:	68bb      	ldr	r3, [r7, #8]
20000fc6:	f103 0301 	add.w	r3, r3, #1
20000fca:	60bb      	str	r3, [r7, #8]

	    set_DC_LOW(); // Command mode
	    sendSPI(commandByte); // Send the command byte

	    set_DC_HIGH();
	    for (i=0; i<numDataBytes; i++) {
20000fcc:	697b      	ldr	r3, [r7, #20]
20000fce:	f103 0301 	add.w	r3, r3, #1
20000fd2:	617b      	str	r3, [r7, #20]
20000fd4:	79fa      	ldrb	r2, [r7, #7]
20000fd6:	697b      	ldr	r3, [r7, #20]
20000fd8:	429a      	cmp	r2, r3
20000fda:	dcee      	bgt.n	20000fba <sendCommand+0x36>
	      sendSPI(*dataBytes); // Send the data bytes
	      dataBytes++;
	    }
}
20000fdc:	f107 0718 	add.w	r7, r7, #24
20000fe0:	46bd      	mov	sp, r7
20000fe2:	bd80      	pop	{r7, pc}

20000fe4 <delay>:
		dataBytes++;
	}
	clear_SPI_CS();
}

void delay(uint32_t time){
20000fe4:	b580      	push	{r7, lr}
20000fe6:	b082      	sub	sp, #8
20000fe8:	af00      	add	r7, sp, #0
20000fea:	6078      	str	r0, [r7, #4]

	MSS_TIM1_init(MSS_TIMER_ONE_SHOT_MODE);
20000fec:	f04f 0001 	mov.w	r0, #1
20000ff0:	f7ff fc8a 	bl	20000908 <MSS_TIM1_init>
	MSS_TIM1_load_immediate(time*100000);
20000ff4:	687a      	ldr	r2, [r7, #4]
20000ff6:	f248 63a0 	movw	r3, #34464	; 0x86a0
20000ffa:	f2c0 0301 	movt	r3, #1
20000ffe:	fb03 f302 	mul.w	r3, r3, r2
20001002:	4618      	mov	r0, r3
20001004:	f7ff fcea 	bl	200009dc <MSS_TIM1_load_immediate>
	MSS_TIM1_start();
20001008:	f7ff fcc0 	bl	2000098c <MSS_TIM1_start>

	while(MSS_TIM1_get_current_value()>0){
2000100c:	f7ff fcda 	bl	200009c4 <MSS_TIM1_get_current_value>
20001010:	4603      	mov	r3, r0
20001012:	2b00      	cmp	r3, #0
20001014:	d1fa      	bne.n	2000100c <delay+0x28>
		//do nothing

	}
	MSS_TIM1_stop();
20001016:	f7ff fcc7 	bl	200009a8 <MSS_TIM1_stop>
}
2000101a:	f107 0708 	add.w	r7, r7, #8
2000101e:	46bd      	mov	sp, r7
20001020:	bd80      	pop	{r7, pc}
20001022:	bf00      	nop

20001024 <sendCommandOnly>:
	}
	MSS_TIM1_stop();
}


void sendCommandOnly(uint8_t commandByte){
20001024:	b580      	push	{r7, lr}
20001026:	b082      	sub	sp, #8
20001028:	af00      	add	r7, sp, #0
2000102a:	4603      	mov	r3, r0
2000102c:	71fb      	strb	r3, [r7, #7]

	set_DC_LOW();
2000102e:	f000 f915 	bl	2000125c <set_DC_LOW>
	configureSPI(8);
20001032:	f04f 0008 	mov.w	r0, #8
20001036:	f000 f8a9 	bl	2000118c <configureSPI>
	sendSPI(commandByte);
2000103a:	79fb      	ldrb	r3, [r7, #7]
2000103c:	4618      	mov	r0, r3
2000103e:	f000 f8bd 	bl	200011bc <sendSPI>
	set_DC_HIGH();
20001042:	f000 f901 	bl	20001248 <set_DC_HIGH>
}
20001046:	f107 0708 	add.w	r7, r7, #8
2000104a:	46bd      	mov	sp, r7
2000104c:	bd80      	pop	{r7, pc}
2000104e:	bf00      	nop

20001050 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color){
20001050:	b580      	push	{r7, lr}
20001052:	b088      	sub	sp, #32
20001054:	af00      	add	r7, sp, #0
20001056:	80f8      	strh	r0, [r7, #6]
20001058:	80b9      	strh	r1, [r7, #4]
2000105a:	807a      	strh	r2, [r7, #2]
2000105c:	803b      	strh	r3, [r7, #0]

    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
2000105e:	f9b7 2000 	ldrsh.w	r2, [r7]
20001062:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
20001066:	ebc3 0302 	rsb	r3, r3, r2
2000106a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
2000106e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
20001072:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
20001076:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
2000107a:	ebc3 0301 	rsb	r3, r3, r1
2000107e:	2b00      	cmp	r3, #0
20001080:	bfb8      	it	lt
20001082:	425b      	neglt	r3, r3
20001084:	429a      	cmp	r2, r3
20001086:	bfd4      	ite	le
20001088:	2300      	movle	r3, #0
2000108a:	2301      	movgt	r3, #1
2000108c:	81fb      	strh	r3, [r7, #14]
    if (steep) {
2000108e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
20001092:	2b00      	cmp	r3, #0
20001094:	d00b      	beq.n	200010ae <writeLine+0x5e>
        _swap_int16_t(x0, y0);
20001096:	88fb      	ldrh	r3, [r7, #6]
20001098:	833b      	strh	r3, [r7, #24]
2000109a:	88bb      	ldrh	r3, [r7, #4]
2000109c:	80fb      	strh	r3, [r7, #6]
2000109e:	8b3b      	ldrh	r3, [r7, #24]
200010a0:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
200010a2:	887b      	ldrh	r3, [r7, #2]
200010a4:	837b      	strh	r3, [r7, #26]
200010a6:	883b      	ldrh	r3, [r7, #0]
200010a8:	807b      	strh	r3, [r7, #2]
200010aa:	8b7b      	ldrh	r3, [r7, #26]
200010ac:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
200010ae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
200010b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
200010b6:	429a      	cmp	r2, r3
200010b8:	dd0b      	ble.n	200010d2 <writeLine+0x82>
        _swap_int16_t(x0, x1);
200010ba:	88fb      	ldrh	r3, [r7, #6]
200010bc:	83bb      	strh	r3, [r7, #28]
200010be:	887b      	ldrh	r3, [r7, #2]
200010c0:	80fb      	strh	r3, [r7, #6]
200010c2:	8bbb      	ldrh	r3, [r7, #28]
200010c4:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
200010c6:	88bb      	ldrh	r3, [r7, #4]
200010c8:	83fb      	strh	r3, [r7, #30]
200010ca:	883b      	ldrh	r3, [r7, #0]
200010cc:	80bb      	strh	r3, [r7, #4]
200010ce:	8bfb      	ldrh	r3, [r7, #30]
200010d0:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
200010d2:	887a      	ldrh	r2, [r7, #2]
200010d4:	88fb      	ldrh	r3, [r7, #6]
200010d6:	ebc3 0302 	rsb	r3, r3, r2
200010da:	b29b      	uxth	r3, r3
200010dc:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
200010de:	f9b7 2000 	ldrsh.w	r2, [r7]
200010e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
200010e6:	ebc3 0302 	rsb	r3, r3, r2
200010ea:	2b00      	cmp	r3, #0
200010ec:	bfb8      	it	lt
200010ee:	425b      	neglt	r3, r3
200010f0:	827b      	strh	r3, [r7, #18]

    int16_t err = dx / 2;
200010f2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
200010f6:	ea4f 72d3 	mov.w	r2, r3, lsr #31
200010fa:	4413      	add	r3, r2
200010fc:	ea4f 0363 	mov.w	r3, r3, asr #1
20001100:	82bb      	strh	r3, [r7, #20]
    int16_t ystep;

    if (y0 < y1) {
20001102:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
20001106:	f9b7 3000 	ldrsh.w	r3, [r7]
2000110a:	429a      	cmp	r2, r3
2000110c:	da03      	bge.n	20001116 <writeLine+0xc6>
        ystep = 1;
2000110e:	f04f 0301 	mov.w	r3, #1
20001112:	82fb      	strh	r3, [r7, #22]
    } else {
        ystep = -1;
    }

    for (; x0<=x1; x0++) {
20001114:	e030      	b.n	20001178 <writeLine+0x128>
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
20001116:	f64f 73ff 	movw	r3, #65535	; 0xffff
2000111a:	82fb      	strh	r3, [r7, #22]
    }

    for (; x0<=x1; x0++) {
2000111c:	e02c      	b.n	20001178 <writeLine+0x128>
        if (steep) {
2000111e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
20001122:	2b00      	cmp	r3, #0
20001124:	d008      	beq.n	20001138 <writeLine+0xe8>
            drawPixel(y0, x0, color);
20001126:	88b9      	ldrh	r1, [r7, #4]
20001128:	88fa      	ldrh	r2, [r7, #6]
2000112a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
2000112c:	4608      	mov	r0, r1
2000112e:	4611      	mov	r1, r2
20001130:	461a      	mov	r2, r3
20001132:	f7ff fdb5 	bl	20000ca0 <drawPixel>
20001136:	e007      	b.n	20001148 <writeLine+0xf8>
        } else {
            drawPixel(x0, y0, color);
20001138:	88f9      	ldrh	r1, [r7, #6]
2000113a:	88ba      	ldrh	r2, [r7, #4]
2000113c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
2000113e:	4608      	mov	r0, r1
20001140:	4611      	mov	r1, r2
20001142:	461a      	mov	r2, r3
20001144:	f7ff fdac 	bl	20000ca0 <drawPixel>
        }
        err -= dy;
20001148:	8aba      	ldrh	r2, [r7, #20]
2000114a:	8a7b      	ldrh	r3, [r7, #18]
2000114c:	ebc3 0302 	rsb	r3, r3, r2
20001150:	b29b      	uxth	r3, r3
20001152:	82bb      	strh	r3, [r7, #20]
        if (err < 0) {
20001154:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
20001158:	2b00      	cmp	r3, #0
2000115a:	da09      	bge.n	20001170 <writeLine+0x120>
            y0 += ystep;
2000115c:	88ba      	ldrh	r2, [r7, #4]
2000115e:	8afb      	ldrh	r3, [r7, #22]
20001160:	4413      	add	r3, r2
20001162:	b29b      	uxth	r3, r3
20001164:	80bb      	strh	r3, [r7, #4]
            err += dx;
20001166:	8aba      	ldrh	r2, [r7, #20]
20001168:	8a3b      	ldrh	r3, [r7, #16]
2000116a:	4413      	add	r3, r2
2000116c:	b29b      	uxth	r3, r3
2000116e:	82bb      	strh	r3, [r7, #20]
        ystep = 1;
    } else {
        ystep = -1;
    }

    for (; x0<=x1; x0++) {
20001170:	88fb      	ldrh	r3, [r7, #6]
20001172:	f103 0301 	add.w	r3, r3, #1
20001176:	80fb      	strh	r3, [r7, #6]
20001178:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
2000117c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
20001180:	429a      	cmp	r2, r3
20001182:	ddcc      	ble.n	2000111e <writeLine+0xce>
        if (err < 0) {
            y0 += ystep;
            err += dx;
        }
    }
}
20001184:	f107 0720 	add.w	r7, r7, #32
20001188:	46bd      	mov	sp, r7
2000118a:	bd80      	pop	{r7, pc}

2000118c <configureSPI>:


void configureSPI(uint8_t frameSize){
2000118c:	b580      	push	{r7, lr}
2000118e:	b084      	sub	sp, #16
20001190:	af02      	add	r7, sp, #8
20001192:	4603      	mov	r3, r0
20001194:	71fb      	strb	r3, [r7, #7]
	MSS_SPI_configure_master_mode(
20001196:	79fb      	ldrb	r3, [r7, #7]
20001198:	9300      	str	r3, [sp, #0]
2000119a:	f244 2050 	movw	r0, #16976	; 0x4250
2000119e:	f2c2 0000 	movt	r0, #8192	; 0x2000
200011a2:	f04f 0100 	mov.w	r1, #0
200011a6:	f04f 0200 	mov.w	r2, #0
200011aa:	f04f 0302 	mov.w	r3, #2
200011ae:	f000 fc8b 	bl	20001ac8 <MSS_SPI_configure_master_mode>
		MSS_SPI_SLAVE_0,
		MSS_SPI_MODE0,
		MSS_SPI_PCLK_DIV_8,
		frameSize
	);
}
200011b2:	f107 0708 	add.w	r7, r7, #8
200011b6:	46bd      	mov	sp, r7
200011b8:	bd80      	pop	{r7, pc}
200011ba:	bf00      	nop

200011bc <sendSPI>:

void sendSPI(uint8_t data){
200011bc:	b580      	push	{r7, lr}
200011be:	b082      	sub	sp, #8
200011c0:	af00      	add	r7, sp, #0
200011c2:	4603      	mov	r3, r0
200011c4:	71fb      	strb	r3, [r7, #7]
	
	MSS_SPI_transfer_frame( &g_mss_spi1, data);
200011c6:	79fb      	ldrb	r3, [r7, #7]
200011c8:	f244 2050 	movw	r0, #16976	; 0x4250
200011cc:	f2c2 0000 	movt	r0, #8192	; 0x2000
200011d0:	4619      	mov	r1, r3
200011d2:	f000 fda7 	bl	20001d24 <MSS_SPI_transfer_frame>
	
}
200011d6:	f107 0708 	add.w	r7, r7, #8
200011da:	46bd      	mov	sp, r7
200011dc:	bd80      	pop	{r7, pc}
200011de:	bf00      	nop

200011e0 <sendSPI16>:

void sendSPI16(uint16_t data){
200011e0:	b580      	push	{r7, lr}
200011e2:	b082      	sub	sp, #8
200011e4:	af00      	add	r7, sp, #0
200011e6:	4603      	mov	r3, r0
200011e8:	80fb      	strh	r3, [r7, #6]
	MSS_SPI_transfer_frame(&g_mss_spi1, data>>8);
200011ea:	88fb      	ldrh	r3, [r7, #6]
200011ec:	ea4f 2313 	mov.w	r3, r3, lsr #8
200011f0:	b29b      	uxth	r3, r3
200011f2:	f244 2050 	movw	r0, #16976	; 0x4250
200011f6:	f2c2 0000 	movt	r0, #8192	; 0x2000
200011fa:	4619      	mov	r1, r3
200011fc:	f000 fd92 	bl	20001d24 <MSS_SPI_transfer_frame>
	MSS_SPI_transfer_frame(&g_mss_spi1, data);
20001200:	88fb      	ldrh	r3, [r7, #6]
20001202:	f244 2050 	movw	r0, #16976	; 0x4250
20001206:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000120a:	4619      	mov	r1, r3
2000120c:	f000 fd8a 	bl	20001d24 <MSS_SPI_transfer_frame>
}
20001210:	f107 0708 	add.w	r7, r7, #8
20001214:	46bd      	mov	sp, r7
20001216:	bd80      	pop	{r7, pc}

20001218 <set_SPI_CS>:

void set_SPI_CS(){
20001218:	b580      	push	{r7, lr}
2000121a:	af00      	add	r7, sp, #0
	MSS_SPI_set_slave_select(&g_mss_spi1, MSS_SPI_SLAVE_0);
2000121c:	f244 2050 	movw	r0, #16976	; 0x4250
20001220:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001224:	f04f 0100 	mov.w	r1, #0
20001228:	f000 fcce 	bl	20001bc8 <MSS_SPI_set_slave_select>
}
2000122c:	bd80      	pop	{r7, pc}
2000122e:	bf00      	nop

20001230 <clear_SPI_CS>:

void clear_SPI_CS(){
20001230:	b580      	push	{r7, lr}
20001232:	af00      	add	r7, sp, #0
	MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
20001234:	f244 2050 	movw	r0, #16976	; 0x4250
20001238:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000123c:	f04f 0100 	mov.w	r1, #0
20001240:	f000 fd28 	bl	20001c94 <MSS_SPI_clear_slave_select>
}
20001244:	bd80      	pop	{r7, pc}
20001246:	bf00      	nop

20001248 <set_DC_HIGH>:

void set_DC_HIGH(){
20001248:	b580      	push	{r7, lr}
2000124a:	af00      	add	r7, sp, #0
	MSS_GPIO_set_output(DC, 1);
2000124c:	f04f 0000 	mov.w	r0, #0
20001250:	f04f 0101 	mov.w	r1, #1
20001254:	f001 fc9a 	bl	20002b8c <MSS_GPIO_set_output>
}
20001258:	bd80      	pop	{r7, pc}
2000125a:	bf00      	nop

2000125c <set_DC_LOW>:

void set_DC_LOW(){
2000125c:	b580      	push	{r7, lr}
2000125e:	af00      	add	r7, sp, #0
	MSS_GPIO_set_output(DC, 0);
20001260:	f04f 0000 	mov.w	r0, #0
20001264:	f04f 0100 	mov.w	r1, #0
20001268:	f001 fc90 	bl	20002b8c <MSS_GPIO_set_output>
}
2000126c:	bd80      	pop	{r7, pc}
2000126e:	bf00      	nop

20001270 <writeRegister8>:
	else{
		ACE_set_sdd_value(SDD1_OUT, 0x00);
	}
}

void writeRegister8(uint8_t reg, uint8_t val){
20001270:	b580      	push	{r7, lr}
20001272:	b086      	sub	sp, #24
20001274:	af02      	add	r7, sp, #8
20001276:	4602      	mov	r2, r0
20001278:	460b      	mov	r3, r1
2000127a:	71fa      	strb	r2, [r7, #7]
2000127c:	71bb      	strb	r3, [r7, #6]
	uint8_t transmit_buf[2] = {reg, val};
2000127e:	79fb      	ldrb	r3, [r7, #7]
20001280:	733b      	strb	r3, [r7, #12]
20001282:	79bb      	ldrb	r3, [r7, #6]
20001284:	737b      	strb	r3, [r7, #13]
	MSS_I2C_write
20001286:	f107 030c 	add.w	r3, r7, #12
2000128a:	f04f 0200 	mov.w	r2, #0
2000128e:	9200      	str	r2, [sp, #0]
20001290:	f244 30cc 	movw	r0, #17356	; 0x43cc
20001294:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001298:	f04f 0141 	mov.w	r1, #65	; 0x41
2000129c:	461a      	mov	r2, r3
2000129e:	f04f 0302 	mov.w	r3, #2
200012a2:	f001 fb3b 	bl	2000291c <MSS_I2C_write>
		transmit_buf,
		sizeof(transmit_buf),
		MSS_I2C_RELEASE_BUS
	);

	MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_NO_TIMEOUT);
200012a6:	f244 30cc 	movw	r0, #17356	; 0x43cc
200012aa:	f2c2 0000 	movt	r0, #8192	; 0x2000
200012ae:	f04f 0100 	mov.w	r1, #0
200012b2:	f000 ff9f 	bl	200021f4 <MSS_I2C_wait_complete>
	return;
}
200012b6:	f107 0710 	add.w	r7, r7, #16
200012ba:	46bd      	mov	sp, r7
200012bc:	bd80      	pop	{r7, pc}
200012be:	bf00      	nop

200012c0 <readRegister8>:

uint8_t readRegister8(uint8_t reg){
200012c0:	b580      	push	{r7, lr}
200012c2:	b086      	sub	sp, #24
200012c4:	af02      	add	r7, sp, #8
200012c6:	4603      	mov	r3, r0
200012c8:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	MSS_I2C_write
200012ca:	f107 0307 	add.w	r3, r7, #7
200012ce:	f04f 0200 	mov.w	r2, #0
200012d2:	9200      	str	r2, [sp, #0]
200012d4:	f244 30cc 	movw	r0, #17356	; 0x43cc
200012d8:	f2c2 0000 	movt	r0, #8192	; 0x2000
200012dc:	f04f 0141 	mov.w	r1, #65	; 0x41
200012e0:	461a      	mov	r2, r3
200012e2:	f04f 0301 	mov.w	r3, #1
200012e6:	f001 fb19 	bl	2000291c <MSS_I2C_write>
		TOUCH_ADDR,
		&reg,
		1,
		MSS_I2C_RELEASE_BUS
	);
	MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_NO_TIMEOUT);
200012ea:	f244 30cc 	movw	r0, #17356	; 0x43cc
200012ee:	f2c2 0000 	movt	r0, #8192	; 0x2000
200012f2:	f04f 0100 	mov.w	r1, #0
200012f6:	f000 ff7d 	bl	200021f4 <MSS_I2C_wait_complete>

	MSS_I2C_read
200012fa:	f107 030f 	add.w	r3, r7, #15
200012fe:	f04f 0200 	mov.w	r2, #0
20001302:	9200      	str	r2, [sp, #0]
20001304:	f244 30cc 	movw	r0, #17356	; 0x43cc
20001308:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000130c:	f04f 0141 	mov.w	r1, #65	; 0x41
20001310:	461a      	mov	r2, r3
20001312:	f04f 0301 	mov.w	r3, #1
20001316:	f001 fa91 	bl	2000283c <MSS_I2C_read>
			TOUCH_ADDR,
			&data,
			1,
			MSS_I2C_RELEASE_BUS
	 );
	MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_NO_TIMEOUT);
2000131a:	f244 30cc 	movw	r0, #17356	; 0x43cc
2000131e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001322:	f04f 0100 	mov.w	r1, #0
20001326:	f000 ff65 	bl	200021f4 <MSS_I2C_wait_complete>
	return data;
2000132a:	7bfb      	ldrb	r3, [r7, #15]
}
2000132c:	4618      	mov	r0, r3
2000132e:	f107 0710 	add.w	r7, r7, #16
20001332:	46bd      	mov	sp, r7
20001334:	bd80      	pop	{r7, pc}
20001336:	bf00      	nop

20001338 <bufferEmpty>:

int bufferEmpty(){
20001338:	b580      	push	{r7, lr}
2000133a:	af00      	add	r7, sp, #0
	return (readRegister8(STMPE_FIFO_STA) & STMPE_FIFO_STA_EMPTY);
2000133c:	f04f 004b 	mov.w	r0, #75	; 0x4b
20001340:	f7ff ffbe 	bl	200012c0 <readRegister8>
20001344:	4603      	mov	r3, r0
20001346:	f003 0320 	and.w	r3, r3, #32
}
2000134a:	4618      	mov	r0, r3
2000134c:	bd80      	pop	{r7, pc}
2000134e:	bf00      	nop

20001350 <scaleX>:

uint8_t scaleX(uint16_t x){
20001350:	b580      	push	{r7, lr}
20001352:	b084      	sub	sp, #16
20001354:	af00      	add	r7, sp, #0
20001356:	4603      	mov	r3, r0
20001358:	80fb      	strh	r3, [r7, #6]
	float temp = x/240.0;
2000135a:	88fb      	ldrh	r3, [r7, #6]
2000135c:	4618      	mov	r0, r3
2000135e:	f002 f8c1 	bl	200034e4 <__aeabi_i2d>
20001362:	4602      	mov	r2, r0
20001364:	460b      	mov	r3, r1
20001366:	4610      	mov	r0, r2
20001368:	4619      	mov	r1, r3
2000136a:	f04f 0200 	mov.w	r2, #0
2000136e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
20001372:	f503 03dc 	add.w	r3, r3, #7208960	; 0x6e0000
20001376:	f002 fa45 	bl	20003804 <__aeabi_ddiv>
2000137a:	4602      	mov	r2, r0
2000137c:	460b      	mov	r3, r1
2000137e:	4610      	mov	r0, r2
20001380:	4619      	mov	r1, r3
20001382:	f002 fb27 	bl	200039d4 <__aeabi_d2f>
20001386:	4603      	mov	r3, r0
20001388:	60fb      	str	r3, [r7, #12]
	temp *= 255;
2000138a:	68f8      	ldr	r0, [r7, #12]
2000138c:	4907      	ldr	r1, [pc, #28]	; (200013ac <scaleX+0x5c>)
2000138e:	f002 fb71 	bl	20003a74 <__aeabi_fmul>
20001392:	4603      	mov	r3, r0
20001394:	60fb      	str	r3, [r7, #12]
	return (uint8_t) temp;
20001396:	68f8      	ldr	r0, [r7, #12]
20001398:	f002 fcbc 	bl	20003d14 <__aeabi_f2uiz>
2000139c:	4603      	mov	r3, r0
2000139e:	b2db      	uxtb	r3, r3
}
200013a0:	4618      	mov	r0, r3
200013a2:	f107 0710 	add.w	r7, r7, #16
200013a6:	46bd      	mov	sp, r7
200013a8:	bd80      	pop	{r7, pc}
200013aa:	bf00      	nop
200013ac:	437f0000 	.word	0x437f0000

200013b0 <scaleY>:

uint8_t scaleY(uint16_t y){
200013b0:	b580      	push	{r7, lr}
200013b2:	b084      	sub	sp, #16
200013b4:	af00      	add	r7, sp, #0
200013b6:	4603      	mov	r3, r0
200013b8:	80fb      	strh	r3, [r7, #6]
	float temp = y/320.0;
200013ba:	88fb      	ldrh	r3, [r7, #6]
200013bc:	4618      	mov	r0, r3
200013be:	f002 f891 	bl	200034e4 <__aeabi_i2d>
200013c2:	4602      	mov	r2, r0
200013c4:	460b      	mov	r3, r1
200013c6:	4610      	mov	r0, r2
200013c8:	4619      	mov	r1, r3
200013ca:	f04f 0200 	mov.w	r2, #0
200013ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
200013d2:	f503 03e8 	add.w	r3, r3, #7602176	; 0x740000
200013d6:	f002 fa15 	bl	20003804 <__aeabi_ddiv>
200013da:	4602      	mov	r2, r0
200013dc:	460b      	mov	r3, r1
200013de:	4610      	mov	r0, r2
200013e0:	4619      	mov	r1, r3
200013e2:	f002 faf7 	bl	200039d4 <__aeabi_d2f>
200013e6:	4603      	mov	r3, r0
200013e8:	60fb      	str	r3, [r7, #12]
	temp *= 255;
200013ea:	68f8      	ldr	r0, [r7, #12]
200013ec:	4907      	ldr	r1, [pc, #28]	; (2000140c <scaleY+0x5c>)
200013ee:	f002 fb41 	bl	20003a74 <__aeabi_fmul>
200013f2:	4603      	mov	r3, r0
200013f4:	60fb      	str	r3, [r7, #12]
	return (uint8_t) temp;
200013f6:	68f8      	ldr	r0, [r7, #12]
200013f8:	f002 fc8c 	bl	20003d14 <__aeabi_f2uiz>
200013fc:	4603      	mov	r3, r0
200013fe:	b2db      	uxtb	r3, r3
}
20001400:	4618      	mov	r0, r3
20001402:	f107 0710 	add.w	r7, r7, #16
20001406:	46bd      	mov	sp, r7
20001408:	bd80      	pop	{r7, pc}
2000140a:	bf00      	nop
2000140c:	437f0000 	.word	0x437f0000

20001410 <sendMessage>:

uint8_t g_rx_buff[RX_BUFF_SIZE];

//Takes in an array of uint8_t containing address and destination address
//Constructs frame appropriately and sends it out
void sendMessage(uint8_t* inputMessage, uint8_t inputMessageLength, uint16_t destAddr) {
20001410:	b580      	push	{r7, lr}
20001412:	b08a      	sub	sp, #40	; 0x28
20001414:	af00      	add	r7, sp, #0
20001416:	6078      	str	r0, [r7, #4]
20001418:	4613      	mov	r3, r2
2000141a:	460a      	mov	r2, r1
2000141c:	70fa      	strb	r2, [r7, #3]
2000141e:	803b      	strh	r3, [r7, #0]
	int i;
	uint8_t message[messageLength];
	message[0] = 0x7E;	//Delimiter, does not change
20001420:	f04f 037e 	mov.w	r3, #126	; 0x7e
20001424:	733b      	strb	r3, [r7, #12]
	message[1] = (messageLength - 4) >> 8;	//Length MSB
20001426:	f04f 0300 	mov.w	r3, #0
2000142a:	737b      	strb	r3, [r7, #13]
	message[2] = (messageLength - 4) & 0xFF;	//Length LSB
2000142c:	f04f 0310 	mov.w	r3, #16
20001430:	73bb      	strb	r3, [r7, #14]
	message[3] = 0;	//Frame type: 0 = TX Request 64 bit addr
20001432:	f04f 0300 	mov.w	r3, #0
20001436:	73fb      	strb	r3, [r7, #15]
	message[4] = 1;	//Frame ID
20001438:	f04f 0301 	mov.w	r3, #1
2000143c:	743b      	strb	r3, [r7, #16]
	//5-12: Destination addresses
	for(i = 5; i < 11; ++i) {
2000143e:	f04f 0305 	mov.w	r3, #5
20001442:	623b      	str	r3, [r7, #32]
20001444:	e00b      	b.n	2000145e <sendMessage+0x4e>
		message[i] = 0;
20001446:	6a3b      	ldr	r3, [r7, #32]
20001448:	f107 0128 	add.w	r1, r7, #40	; 0x28
2000144c:	440b      	add	r3, r1
2000144e:	f04f 0200 	mov.w	r2, #0
20001452:	f803 2c1c 	strb.w	r2, [r3, #-28]
	message[1] = (messageLength - 4) >> 8;	//Length MSB
	message[2] = (messageLength - 4) & 0xFF;	//Length LSB
	message[3] = 0;	//Frame type: 0 = TX Request 64 bit addr
	message[4] = 1;	//Frame ID
	//5-12: Destination addresses
	for(i = 5; i < 11; ++i) {
20001456:	6a3b      	ldr	r3, [r7, #32]
20001458:	f103 0301 	add.w	r3, r3, #1
2000145c:	623b      	str	r3, [r7, #32]
2000145e:	6a3b      	ldr	r3, [r7, #32]
20001460:	2b0a      	cmp	r3, #10
20001462:	ddf0      	ble.n	20001446 <sendMessage+0x36>
		message[i] = 0;
	}
	message[11] = (destAddr >> 8) & 0xFF;
20001464:	883b      	ldrh	r3, [r7, #0]
20001466:	ea4f 2313 	mov.w	r3, r3, lsr #8
2000146a:	b29b      	uxth	r3, r3
2000146c:	b2db      	uxtb	r3, r3
2000146e:	75fb      	strb	r3, [r7, #23]
	message[12] = destAddr & 0xFF;
20001470:	883b      	ldrh	r3, [r7, #0]
20001472:	b2db      	uxtb	r3, r3
20001474:	763b      	strb	r3, [r7, #24]
	message[13] = 0;	//Options
20001476:	f04f 0300 	mov.w	r3, #0
2000147a:	767b      	strb	r3, [r7, #25]
	for(i = 0; i < inputMessageLength; ++i) {
2000147c:	f04f 0300 	mov.w	r3, #0
20001480:	623b      	str	r3, [r7, #32]
20001482:	e00f      	b.n	200014a4 <sendMessage+0x94>
		message[i + 14] = *(inputMessage + i * sizeof(uint8_t));
20001484:	6a3b      	ldr	r3, [r7, #32]
20001486:	f103 030e 	add.w	r3, r3, #14
2000148a:	6a39      	ldr	r1, [r7, #32]
2000148c:	687a      	ldr	r2, [r7, #4]
2000148e:	440a      	add	r2, r1
20001490:	7812      	ldrb	r2, [r2, #0]
20001492:	f107 0128 	add.w	r1, r7, #40	; 0x28
20001496:	440b      	add	r3, r1
20001498:	f803 2c1c 	strb.w	r2, [r3, #-28]
		message[i] = 0;
	}
	message[11] = (destAddr >> 8) & 0xFF;
	message[12] = destAddr & 0xFF;
	message[13] = 0;	//Options
	for(i = 0; i < inputMessageLength; ++i) {
2000149c:	6a3b      	ldr	r3, [r7, #32]
2000149e:	f103 0301 	add.w	r3, r3, #1
200014a2:	623b      	str	r3, [r7, #32]
200014a4:	78fa      	ldrb	r2, [r7, #3]
200014a6:	6a3b      	ldr	r3, [r7, #32]
200014a8:	429a      	cmp	r2, r3
200014aa:	dceb      	bgt.n	20001484 <sendMessage+0x74>
		message[i + 14] = *(inputMessage + i * sizeof(uint8_t));
	}
	uint8_t sum = 0;
200014ac:	f04f 0300 	mov.w	r3, #0
200014b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for(i = 3; i < messageLength - 1; ++i) {
200014b4:	f04f 0303 	mov.w	r3, #3
200014b8:	623b      	str	r3, [r7, #32]
200014ba:	e00e      	b.n	200014da <sendMessage+0xca>
		sum += message[i];
200014bc:	6a3b      	ldr	r3, [r7, #32]
200014be:	f107 0228 	add.w	r2, r7, #40	; 0x28
200014c2:	4413      	add	r3, r2
200014c4:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
200014c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
200014cc:	4413      	add	r3, r2
200014ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	message[13] = 0;	//Options
	for(i = 0; i < inputMessageLength; ++i) {
		message[i + 14] = *(inputMessage + i * sizeof(uint8_t));
	}
	uint8_t sum = 0;
	for(i = 3; i < messageLength - 1; ++i) {
200014d2:	6a3b      	ldr	r3, [r7, #32]
200014d4:	f103 0301 	add.w	r3, r3, #1
200014d8:	623b      	str	r3, [r7, #32]
200014da:	6a3b      	ldr	r3, [r7, #32]
200014dc:	2b12      	cmp	r3, #18
200014de:	dded      	ble.n	200014bc <sendMessage+0xac>
		sum += message[i];
	}
	message[messageLength - 1] = (0xFF - sum) & 0xFF;
200014e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
200014e4:	ea6f 0303 	mvn.w	r3, r3
200014e8:	b2db      	uxtb	r3, r3
200014ea:	77fb      	strb	r3, [r7, #31]
	MSS_UART_polled_tx(&g_mss_uart1, message, sizeof(message));
200014ec:	f107 030c 	add.w	r3, r7, #12
200014f0:	f244 2000 	movw	r0, #16896	; 0x4200
200014f4:	f2c2 0000 	movt	r0, #8192	; 0x2000
200014f8:	4619      	mov	r1, r3
200014fa:	f04f 0214 	mov.w	r2, #20
200014fe:	f000 f817 	bl	20001530 <MSS_UART_polled_tx>
}
20001502:	f107 0728 	add.w	r7, r7, #40	; 0x28
20001506:	46bd      	mov	sp, r7
20001508:	bd80      	pop	{r7, pc}
2000150a:	bf00      	nop

2000150c <uart1_rx_handler>:

//When something is received, trigger an interrupt that fills g_rx_buff with the received data
void uart1_rx_handler( mss_uart_instance_t * this_uart ) {
2000150c:	b580      	push	{r7, lr}
2000150e:	b082      	sub	sp, #8
20001510:	af00      	add	r7, sp, #0
20001512:	6078      	str	r0, [r7, #4]
      MSS_UART_get_rx( this_uart, &g_rx_buff, sizeof(g_rx_buff) );
20001514:	6878      	ldr	r0, [r7, #4]
20001516:	f244 11c0 	movw	r1, #16832	; 0x41c0
2000151a:	f2c2 0100 	movt	r1, #8192	; 0x2000
2000151e:	f04f 0240 	mov.w	r2, #64	; 0x40
20001522:	f000 f85b 	bl	200015dc <MSS_UART_get_rx>
}
20001526:	f107 0708 	add.w	r7, r7, #8
2000152a:	46bd      	mov	sp, r7
2000152c:	bd80      	pop	{r7, pc}
2000152e:	bf00      	nop

20001530 <MSS_UART_polled_tx>:
(
    mss_uart_instance_t * this_uart,
    const uint8_t * pbuff,
    uint32_t tx_size
)
{
20001530:	e92d 05f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl}
    uint32_t char_idx = 0U;
    uint32_t size_sent;
    uint8_t status;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20001534:	f244 2328 	movw	r3, #16936	; 0x4228
20001538:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000153c:	4298      	cmp	r0, r3
2000153e:	d006      	beq.n	2000154e <MSS_UART_polled_tx+0x1e>
20001540:	f244 2300 	movw	r3, #16896	; 0x4200
20001544:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001548:	4298      	cmp	r0, r3
2000154a:	d000      	beq.n	2000154e <MSS_UART_polled_tx+0x1e>
2000154c:	be00      	bkpt	0x0000
    ASSERT( pbuff != ( (uint8_t *)0 ) );
2000154e:	b901      	cbnz	r1, 20001552 <MSS_UART_polled_tx+0x22>
20001550:	be00      	bkpt	0x0000
    ASSERT( tx_size > 0U );
20001552:	b902      	cbnz	r2, 20001556 <MSS_UART_polled_tx+0x26>
20001554:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20001556:	f244 2328 	movw	r3, #16936	; 0x4228
2000155a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000155e:	4298      	cmp	r0, r3
20001560:	d005      	beq.n	2000156e <MSS_UART_polled_tx+0x3e>
20001562:	f244 2300 	movw	r3, #16896	; 0x4200
20001566:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000156a:	4298      	cmp	r0, r3
2000156c:	d133      	bne.n	200015d6 <MSS_UART_polled_tx+0xa6>
2000156e:	1e13      	subs	r3, r2, #0
20001570:	bf18      	it	ne
20001572:	2301      	movne	r3, #1
20001574:	2900      	cmp	r1, #0
20001576:	bf0c      	ite	eq
20001578:	2300      	moveq	r3, #0
2000157a:	f003 0301 	andne.w	r3, r3, #1
2000157e:	2b00      	cmp	r3, #0
20001580:	d029      	beq.n	200015d6 <MSS_UART_polled_tx+0xa6>
20001582:	f04f 0700 	mov.w	r7, #0
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
20001586:	46b8      	mov	r8, r7
            if( status & MSS_UART_THRE )
            {
                uint32_t fill_size = TX_FIFO_SIZE;

                /* Calculate the number of bytes to transmit. */
                if ( tx_size < TX_FIFO_SIZE )
20001588:	f04f 0a10 	mov.w	sl, #16
         /* Remain in this loop until the entire input buffer
          * has been transferred to the UART.
          */
        do {
            /* Read the Line Status Register and update the sticky record */
            status = this_uart->hw_reg->LSR;
2000158c:	6803      	ldr	r3, [r0, #0]
2000158e:	7d1b      	ldrb	r3, [r3, #20]
            this_uart->status |= status;
20001590:	f890 c00a 	ldrb.w	ip, [r0, #10]
20001594:	ea43 0c0c 	orr.w	ip, r3, ip
20001598:	f880 c00a 	strb.w	ip, [r0, #10]

            /* Check if TX FIFO is empty. */
            if( status & MSS_UART_THRE )
2000159c:	f013 0f20 	tst.w	r3, #32
200015a0:	d017      	beq.n	200015d2 <MSS_UART_polled_tx+0xa2>
            {
                uint32_t fill_size = TX_FIFO_SIZE;

                /* Calculate the number of bytes to transmit. */
                if ( tx_size < TX_FIFO_SIZE )
200015a2:	2a0f      	cmp	r2, #15
200015a4:	d904      	bls.n	200015b0 <MSS_UART_polled_tx+0x80>
200015a6:	4656      	mov	r6, sl
200015a8:	46bc      	mov	ip, r7
200015aa:	4643      	mov	r3, r8

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
                {
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx++];
200015ac:	440f      	add	r7, r1
200015ae:	e004      	b.n	200015ba <MSS_UART_polled_tx+0x8a>
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
200015b0:	b90a      	cbnz	r2, 200015b6 <MSS_UART_polled_tx+0x86>
200015b2:	4643      	mov	r3, r8
200015b4:	e00b      	b.n	200015ce <MSS_UART_polled_tx+0x9e>
200015b6:	4616      	mov	r6, r2
200015b8:	e7f6      	b.n	200015a8 <MSS_UART_polled_tx+0x78>
                {
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx++];
200015ba:	6804      	ldr	r4, [r0, #0]
200015bc:	5cfd      	ldrb	r5, [r7, r3]
200015be:	7025      	strb	r5, [r4, #0]
200015c0:	f10c 0c01 	add.w	ip, ip, #1
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
200015c4:	f103 0301 	add.w	r3, r3, #1
200015c8:	429e      	cmp	r6, r3
200015ca:	d8f6      	bhi.n	200015ba <MSS_UART_polled_tx+0x8a>
200015cc:	4667      	mov	r7, ip
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx++];
                }

                /* Calculate the number of untransmitted bytes remaining. */
                tx_size -= size_sent;
200015ce:	ebc3 0202 	rsb	r2, r3, r2
            }
        }while( tx_size );
200015d2:	2a00      	cmp	r2, #0
200015d4:	d1da      	bne.n	2000158c <MSS_UART_polled_tx+0x5c>
    }
}
200015d6:	e8bd 05f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl}
200015da:	4770      	bx	lr

200015dc <MSS_UART_get_rx>:
(
    mss_uart_instance_t * this_uart,
    uint8_t * rx_buff,
    size_t buff_size
)
{
200015dc:	b410      	push	{r4}
200015de:	4603      	mov	r3, r0
    size_t rx_size = 0U;
    uint8_t status = 0U;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
200015e0:	f244 2028 	movw	r0, #16936	; 0x4228
200015e4:	f2c2 0000 	movt	r0, #8192	; 0x2000
200015e8:	4283      	cmp	r3, r0
200015ea:	d006      	beq.n	200015fa <MSS_UART_get_rx+0x1e>
200015ec:	f244 2000 	movw	r0, #16896	; 0x4200
200015f0:	f2c2 0000 	movt	r0, #8192	; 0x2000
200015f4:	4283      	cmp	r3, r0
200015f6:	d000      	beq.n	200015fa <MSS_UART_get_rx+0x1e>
200015f8:	be00      	bkpt	0x0000
    ASSERT( rx_buff != ((uint8_t *)0) );
200015fa:	b901      	cbnz	r1, 200015fe <MSS_UART_get_rx+0x22>
200015fc:	be00      	bkpt	0x0000
    ASSERT( buff_size > 0U );
200015fe:	b902      	cbnz	r2, 20001602 <MSS_UART_get_rx+0x26>
20001600:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20001602:	f244 2028 	movw	r0, #16936	; 0x4228
20001606:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000160a:	4283      	cmp	r3, r0
2000160c:	d005      	beq.n	2000161a <MSS_UART_get_rx+0x3e>
2000160e:	f244 2000 	movw	r0, #16896	; 0x4200
20001612:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001616:	4283      	cmp	r3, r0
20001618:	d12a      	bne.n	20001670 <MSS_UART_get_rx+0x94>
          ( rx_buff != ((uint8_t *)0) ) && ( buff_size > 0U ) )
2000161a:	1e10      	subs	r0, r2, #0
2000161c:	bf18      	it	ne
2000161e:	2001      	movne	r0, #1

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
    ASSERT( rx_buff != ((uint8_t *)0) );
    ASSERT( buff_size > 0U );

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20001620:	2900      	cmp	r1, #0
20001622:	bf0c      	ite	eq
20001624:	2400      	moveq	r4, #0
20001626:	f000 0401 	andne.w	r4, r0, #1
2000162a:	b30c      	cbz	r4, 20001670 <MSS_UART_get_rx+0x94>
          ( rx_buff != ((uint8_t *)0) ) && ( buff_size > 0U ) )
    {
        status = this_uart->hw_reg->LSR;
2000162c:	681c      	ldr	r4, [r3, #0]
2000162e:	f894 c014 	ldrb.w	ip, [r4, #20]
        this_uart->status |= status;
20001632:	7a9c      	ldrb	r4, [r3, #10]
20001634:	ea4c 0404 	orr.w	r4, ip, r4
20001638:	729c      	strb	r4, [r3, #10]

        while (( (status & MSS_UART_DATA_READY) != 0U) &&
2000163a:	ea1c 0f00 	tst.w	ip, r0
2000163e:	d017      	beq.n	20001670 <MSS_UART_get_rx+0x94>
20001640:	f04f 0000 	mov.w	r0, #0
               ( rx_size < buff_size ) )
        {
            rx_buff[rx_size] = this_uart->hw_reg->RBR;
20001644:	681c      	ldr	r4, [r3, #0]
20001646:	f894 c000 	ldrb.w	ip, [r4]
2000164a:	f801 c000 	strb.w	ip, [r1, r0]
            ++rx_size;
2000164e:	f100 0001 	add.w	r0, r0, #1
            status = this_uart->hw_reg->LSR;
20001652:	681c      	ldr	r4, [r3, #0]
20001654:	f894 c014 	ldrb.w	ip, [r4, #20]
            this_uart->status |= status;
20001658:	7a9c      	ldrb	r4, [r3, #10]
2000165a:	ea4c 0404 	orr.w	r4, ip, r4
2000165e:	729c      	strb	r4, [r3, #10]
          ( rx_buff != ((uint8_t *)0) ) && ( buff_size > 0U ) )
    {
        status = this_uart->hw_reg->LSR;
        this_uart->status |= status;

        while (( (status & MSS_UART_DATA_READY) != 0U) &&
20001660:	4282      	cmp	r2, r0
20001662:	bf94      	ite	ls
20001664:	2400      	movls	r4, #0
20001666:	f00c 0401 	andhi.w	r4, ip, #1
2000166a:	2c00      	cmp	r4, #0
2000166c:	d1ea      	bne.n	20001644 <MSS_UART_get_rx+0x68>
2000166e:	e001      	b.n	20001674 <MSS_UART_get_rx+0x98>
20001670:	f04f 0000 	mov.w	r0, #0
            status = this_uart->hw_reg->LSR;
            this_uart->status |= status;
        }
    }
    return rx_size;
}
20001674:	bc10      	pop	{r4}
20001676:	4770      	bx	lr

20001678 <MSS_UART_isr>:
static void
MSS_UART_isr
(
    mss_uart_instance_t * this_uart
)
{
20001678:	b508      	push	{r3, lr}
    uint8_t iirf;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
2000167a:	f244 2328 	movw	r3, #16936	; 0x4228
2000167e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001682:	4298      	cmp	r0, r3
20001684:	d007      	beq.n	20001696 <MSS_UART_isr+0x1e>
20001686:	f244 2300 	movw	r3, #16896	; 0x4200
2000168a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000168e:	4298      	cmp	r0, r3
20001690:	d001      	beq.n	20001696 <MSS_UART_isr+0x1e>
20001692:	be00      	bkpt	0x0000
20001694:	bd08      	pop	{r3, pc}

    if ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) )
    {
        iirf = this_uart->hw_reg->IIR & IIRF_MASK;
20001696:	6803      	ldr	r3, [r0, #0]
20001698:	7a1b      	ldrb	r3, [r3, #8]

        switch ( iirf )
2000169a:	f003 030f 	and.w	r3, r3, #15
2000169e:	2b0c      	cmp	r3, #12
200016a0:	d820      	bhi.n	200016e4 <MSS_UART_isr+0x6c>
200016a2:	e8df f003 	tbb	[pc, r3]
200016a6:	1f07      	.short	0x1f07
200016a8:	1f131f0d 	.word	0x1f131f0d
200016ac:	1f1f1f19 	.word	0x1f1f1f19
200016b0:	1f1f      	.short	0x1f1f
200016b2:	13          	.byte	0x13
200016b3:	00          	.byte	0x00
        {
            case IIRF_MODEM_STATUS:  /* Modem status interrupt */
            {
                ASSERT( NULL_HANDLER != this_uart->modemsts_handler );
200016b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
200016b6:	b90b      	cbnz	r3, 200016bc <MSS_UART_isr+0x44>
200016b8:	be00      	bkpt	0x0000
200016ba:	bd08      	pop	{r3, pc}
                if( NULL_HANDLER != this_uart->modemsts_handler )
                {
                   (*(this_uart->modemsts_handler))( this_uart );
200016bc:	4798      	blx	r3
200016be:	bd08      	pop	{r3, pc}
            }
            break;

            case IIRF_THRE: /* Transmitter Holding Register Empty */
            {
                ASSERT( NULL_HANDLER != this_uart->tx_handler );
200016c0:	6a03      	ldr	r3, [r0, #32]
200016c2:	b90b      	cbnz	r3, 200016c8 <MSS_UART_isr+0x50>
200016c4:	be00      	bkpt	0x0000
200016c6:	bd08      	pop	{r3, pc}
                if ( NULL_HANDLER != this_uart->tx_handler )
                {
                    (*(this_uart->tx_handler))( this_uart );
200016c8:	4798      	blx	r3
200016ca:	bd08      	pop	{r3, pc}
            break;

            case IIRF_RX_DATA:      /* Received Data Available */
            case IIRF_DATA_TIMEOUT: /* Received Data Timed-out */
            {
                ASSERT( NULL_HANDLER != this_uart->rx_handler );
200016cc:	69c3      	ldr	r3, [r0, #28]
200016ce:	b90b      	cbnz	r3, 200016d4 <MSS_UART_isr+0x5c>
200016d0:	be00      	bkpt	0x0000
200016d2:	bd08      	pop	{r3, pc}
                if ( NULL_HANDLER != this_uart->rx_handler )
                {
                    (*(this_uart->rx_handler))( this_uart );
200016d4:	4798      	blx	r3
200016d6:	bd08      	pop	{r3, pc}
            }
            break;

            case IIRF_RX_LINE_STATUS:  /* Line Status Interrupt */
            {
                ASSERT( NULL_HANDLER != this_uart->linests_handler );
200016d8:	6983      	ldr	r3, [r0, #24]
200016da:	b90b      	cbnz	r3, 200016e0 <MSS_UART_isr+0x68>
200016dc:	be00      	bkpt	0x0000
200016de:	bd08      	pop	{r3, pc}
                if ( NULL_HANDLER != this_uart->linests_handler )
                {
                   (*(this_uart->linests_handler))( this_uart );
200016e0:	4798      	blx	r3
200016e2:	bd08      	pop	{r3, pc}
            }
            break;

            default:
            {
                ASSERT( INVALID_INTERRUPT );
200016e4:	be00      	bkpt	0x0000
200016e6:	bd08      	pop	{r3, pc}

200016e8 <default_tx_handler>:
static void
default_tx_handler
(
    mss_uart_instance_t * this_uart
)
{
200016e8:	b410      	push	{r4}
    uint8_t status;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
200016ea:	f244 2328 	movw	r3, #16936	; 0x4228
200016ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
200016f2:	4298      	cmp	r0, r3
200016f4:	d006      	beq.n	20001704 <default_tx_handler+0x1c>
200016f6:	f244 2300 	movw	r3, #16896	; 0x4200
200016fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200016fe:	4298      	cmp	r0, r3
20001700:	d000      	beq.n	20001704 <default_tx_handler+0x1c>
20001702:	be00      	bkpt	0x0000
    ASSERT( ( (uint8_t *)0 ) != this_uart->tx_buffer );
20001704:	68c2      	ldr	r2, [r0, #12]
20001706:	b902      	cbnz	r2, 2000170a <default_tx_handler+0x22>
20001708:	be00      	bkpt	0x0000
    ASSERT( 0U < this_uart->tx_buff_size );
2000170a:	6901      	ldr	r1, [r0, #16]
2000170c:	b901      	cbnz	r1, 20001710 <default_tx_handler+0x28>
2000170e:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20001710:	f244 2328 	movw	r3, #16936	; 0x4228
20001714:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001718:	4298      	cmp	r0, r3
2000171a:	d005      	beq.n	20001728 <default_tx_handler+0x40>
2000171c:	f244 2300 	movw	r3, #16896	; 0x4200
20001720:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001724:	4298      	cmp	r0, r3
20001726:	d130      	bne.n	2000178a <default_tx_handler+0xa2>
20001728:	2a00      	cmp	r2, #0
2000172a:	d02e      	beq.n	2000178a <default_tx_handler+0xa2>
2000172c:	2900      	cmp	r1, #0
2000172e:	d02c      	beq.n	2000178a <default_tx_handler+0xa2>
        ( ( (uint8_t *)0 ) != this_uart->tx_buffer ) &&
        ( 0U < this_uart->tx_buff_size ) )
    {
        /* Read the Line Status Register and update the sticky record. */
        status = this_uart->hw_reg->LSR;
20001730:	6803      	ldr	r3, [r0, #0]
20001732:	7d1b      	ldrb	r3, [r3, #20]
        this_uart->status |= status;
20001734:	7a82      	ldrb	r2, [r0, #10]
20001736:	ea43 0202 	orr.w	r2, r3, r2
2000173a:	7282      	strb	r2, [r0, #10]

        /*
         * This function should only be called as a result of a THRE interrupt.
         * Verify that this is true before proceeding to transmit data.
         */
        if ( status & MSS_UART_THRE )
2000173c:	f013 0f20 	tst.w	r3, #32
20001740:	d01a      	beq.n	20001778 <default_tx_handler+0x90>
        {
            uint32_t i;
            uint32_t fill_size = TX_FIFO_SIZE;
            uint32_t tx_remain = this_uart->tx_buff_size - this_uart->tx_idx;
20001742:	6902      	ldr	r2, [r0, #16]
20001744:	6943      	ldr	r3, [r0, #20]
20001746:	ebc3 0302 	rsb	r3, r3, r2

            /* Calculate the number of bytes to transmit. */
            if ( tx_remain < TX_FIFO_SIZE )
2000174a:	2b0f      	cmp	r3, #15
2000174c:	d904      	bls.n	20001758 <default_tx_handler+0x70>
2000174e:	f04f 0c10 	mov.w	ip, #16
20001752:	f04f 0300 	mov.w	r3, #0
20001756:	e002      	b.n	2000175e <default_tx_handler+0x76>
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for ( i = 0U; i < fill_size; ++i )
20001758:	b173      	cbz	r3, 20001778 <default_tx_handler+0x90>
2000175a:	469c      	mov	ip, r3
2000175c:	e7f9      	b.n	20001752 <default_tx_handler+0x6a>
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
2000175e:	6802      	ldr	r2, [r0, #0]
20001760:	68c4      	ldr	r4, [r0, #12]
20001762:	6941      	ldr	r1, [r0, #20]
20001764:	5c61      	ldrb	r1, [r4, r1]
20001766:	7011      	strb	r1, [r2, #0]
                ++this_uart->tx_idx;
20001768:	6942      	ldr	r2, [r0, #20]
2000176a:	f102 0201 	add.w	r2, r2, #1
2000176e:	6142      	str	r2, [r0, #20]
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for ( i = 0U; i < fill_size; ++i )
20001770:	f103 0301 	add.w	r3, r3, #1
20001774:	4563      	cmp	r3, ip
20001776:	d3f2      	bcc.n	2000175e <default_tx_handler+0x76>
                ++this_uart->tx_idx;
            }
        }

        /* Flag Tx as complete if all data has been pushed into the Tx FIFO. */
        if ( this_uart->tx_idx == this_uart->tx_buff_size )
20001778:	6942      	ldr	r2, [r0, #20]
2000177a:	6903      	ldr	r3, [r0, #16]
2000177c:	429a      	cmp	r2, r3
        {
            this_uart->tx_buff_size = TX_COMPLETE;
2000177e:	bf01      	itttt	eq
20001780:	2300      	moveq	r3, #0
20001782:	6103      	streq	r3, [r0, #16]
            /* disables TX interrupt */
            this_uart->hw_reg_bit->IER_ETBEI = 0U;
20001784:	6842      	ldreq	r2, [r0, #4]
20001786:	f8c2 3084 	streq.w	r3, [r2, #132]	; 0x84
        }
    }
}
2000178a:	bc10      	pop	{r4}
2000178c:	4770      	bx	lr
2000178e:	bf00      	nop

20001790 <MSS_UART_set_rx_handler>:
(
    mss_uart_instance_t *       this_uart,
    mss_uart_irq_handler_t      handler,
    mss_uart_rx_trig_level_t    trigger_level
)
{
20001790:	b410      	push	{r4}
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20001792:	f244 2328 	movw	r3, #16936	; 0x4228
20001796:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000179a:	4298      	cmp	r0, r3
2000179c:	d006      	beq.n	200017ac <MSS_UART_set_rx_handler+0x1c>
2000179e:	f244 2300 	movw	r3, #16896	; 0x4200
200017a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200017a6:	4298      	cmp	r0, r3
200017a8:	d000      	beq.n	200017ac <MSS_UART_set_rx_handler+0x1c>
200017aa:	be00      	bkpt	0x0000
    ASSERT( handler != INVALID_IRQ_HANDLER );
200017ac:	b901      	cbnz	r1, 200017b0 <MSS_UART_set_rx_handler+0x20>
200017ae:	be00      	bkpt	0x0000
    ASSERT( trigger_level < MSS_UART_FIFO_INVALID_TRIG_LEVEL );
200017b0:	2ac0      	cmp	r2, #192	; 0xc0
200017b2:	d900      	bls.n	200017b6 <MSS_UART_set_rx_handler+0x26>
200017b4:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
200017b6:	f244 2328 	movw	r3, #16936	; 0x4228
200017ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
200017be:	4298      	cmp	r0, r3
200017c0:	d005      	beq.n	200017ce <MSS_UART_set_rx_handler+0x3e>
200017c2:	f244 2300 	movw	r3, #16896	; 0x4200
200017c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200017ca:	4298      	cmp	r0, r3
200017cc:	d12f      	bne.n	2000182e <MSS_UART_set_rx_handler+0x9e>
200017ce:	2ac0      	cmp	r2, #192	; 0xc0
200017d0:	bf8c      	ite	hi
200017d2:	2300      	movhi	r3, #0
200017d4:	2301      	movls	r3, #1
200017d6:	2900      	cmp	r1, #0
200017d8:	bf0c      	ite	eq
200017da:	2300      	moveq	r3, #0
200017dc:	f003 0301 	andne.w	r3, r3, #1
200017e0:	b32b      	cbz	r3, 2000182e <MSS_UART_set_rx_handler+0x9e>
        ( handler != INVALID_IRQ_HANDLER) &&
        ( trigger_level < MSS_UART_FIFO_INVALID_TRIG_LEVEL) )
    {
        this_uart->rx_handler = handler;
200017e2:	61c1      	str	r1, [r0, #28]

        /* Set the receive interrupt trigger level. */
        /* Clear RX FIFO; Enable TXRDY and RXRDY for PDMA */
        this_uart->hw_reg->FCR = (uint8_t)(FCR_TRIG_LEVEL_MASK & (uint8_t)trigger_level) |
200017e4:	6803      	ldr	r3, [r0, #0]
200017e6:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
200017ea:	f042 020a 	orr.w	r2, r2, #10
200017ee:	721a      	strb	r2, [r3, #8]
                              FCR_CLEAR_RX_FIFO_MASK | FCR_ENABLE_TXRDY_RXRDY_MASK;

        /* Clear any previously pended interrupts */
        NVIC_ClearPendingIRQ( this_uart->irqn );
200017f0:	8903      	ldrh	r3, [r0, #8]
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
200017f2:	b219      	sxth	r1, r3
200017f4:	ea4f 1151 	mov.w	r1, r1, lsr #5
200017f8:	f003 031f 	and.w	r3, r3, #31
200017fc:	f04f 0201 	mov.w	r2, #1
20001800:	fa02 f403 	lsl.w	r4, r2, r3
20001804:	f24e 1300 	movw	r3, #57600	; 0xe100
20001808:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000180c:	f101 0160 	add.w	r1, r1, #96	; 0x60
20001810:	f843 4021 	str.w	r4, [r3, r1, lsl #2]

        /* Enable receive interrupt. */
        this_uart->hw_reg_bit->IER_ERBFI = 1U;
20001814:	6841      	ldr	r1, [r0, #4]
20001816:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80

        /* Enable UART instance interrupt in Cortex-M3 NVIC. */
        NVIC_EnableIRQ( this_uart->irqn );
2000181a:	8901      	ldrh	r1, [r0, #8]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
2000181c:	b208      	sxth	r0, r1
2000181e:	ea4f 1050 	mov.w	r0, r0, lsr #5
20001822:	f001 011f 	and.w	r1, r1, #31
20001826:	fa02 f201 	lsl.w	r2, r2, r1
2000182a:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    }
}
2000182e:	bc10      	pop	{r4}
20001830:	4770      	bx	lr
20001832:	bf00      	nop

20001834 <UART0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART0_IRQHandler( void )
#else
void UART0_IRQHandler( void )
#endif
{
20001834:	4668      	mov	r0, sp
20001836:	f020 0107 	bic.w	r1, r0, #7
2000183a:	468d      	mov	sp, r1
2000183c:	b501      	push	{r0, lr}
    MSS_UART_isr( &g_mss_uart0 );
2000183e:	f244 2028 	movw	r0, #16936	; 0x4228
20001842:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001846:	f7ff ff17 	bl	20001678 <MSS_UART_isr>
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
2000184a:	f24e 1300 	movw	r3, #57600	; 0xe100
2000184e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001852:	f44f 6280 	mov.w	r2, #1024	; 0x400
20001856:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC_ClearPendingIRQ( UART0_IRQn );
}
2000185a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
2000185e:	4685      	mov	sp, r0
20001860:	4770      	bx	lr
20001862:	bf00      	nop

20001864 <UART1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART1_IRQHandler( void )
#else
void UART1_IRQHandler( void )
#endif
{
20001864:	4668      	mov	r0, sp
20001866:	f020 0107 	bic.w	r1, r0, #7
2000186a:	468d      	mov	sp, r1
2000186c:	b501      	push	{r0, lr}
    MSS_UART_isr( &g_mss_uart1 );
2000186e:	f244 2000 	movw	r0, #16896	; 0x4200
20001872:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001876:	f7ff feff 	bl	20001678 <MSS_UART_isr>
2000187a:	f24e 1300 	movw	r3, #57600	; 0xe100
2000187e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001882:	f44f 6200 	mov.w	r2, #2048	; 0x800
20001886:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC_ClearPendingIRQ( UART1_IRQn );
}
2000188a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
2000188e:	4685      	mov	sp, r0
20001890:	4770      	bx	lr
20001892:	bf00      	nop

20001894 <MSS_UART_init>:
(
    mss_uart_instance_t* this_uart,
    uint32_t baud_rate,
    uint8_t line_config
)
{
20001894:	b570      	push	{r4, r5, r6, lr}
20001896:	4604      	mov	r4, r0
20001898:	460d      	mov	r5, r1
2000189a:	4616      	mov	r6, r2
    uint32_t pclk_freq = 0U;
    uint32_t baud_value_l;

    /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
     * mss_uart_instance_t instances used to identify UART0 and UART1. */
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
2000189c:	f244 2328 	movw	r3, #16936	; 0x4228
200018a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200018a4:	4298      	cmp	r0, r3
200018a6:	d006      	beq.n	200018b6 <MSS_UART_init+0x22>
200018a8:	f244 2300 	movw	r3, #16896	; 0x4200
200018ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
200018b0:	4298      	cmp	r0, r3
200018b2:	d000      	beq.n	200018b6 <MSS_UART_init+0x22>
200018b4:	be00      	bkpt	0x0000

    /* baud_rate should be greater than 0 */
    ASSERT( 0U < baud_rate );
200018b6:	b905      	cbnz	r5, 200018ba <MSS_UART_init+0x26>
200018b8:	be00      	bkpt	0x0000

    /* Force the value of the CMSIS global variables holding the various system
     * clock frequencies to be updated. */
    SystemCoreClockUpdate();
200018ba:	f001 f9a7 	bl	20002c0c <SystemCoreClockUpdate>

    if ( this_uart == &g_mss_uart0 )
200018be:	f244 2328 	movw	r3, #16936	; 0x4228
200018c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200018c6:	429c      	cmp	r4, r3
200018c8:	d126      	bne.n	20001918 <MSS_UART_init+0x84>
    {
        this_uart->hw_reg = UART0;
200018ca:	f244 2328 	movw	r3, #16936	; 0x4228
200018ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
200018d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
200018d6:	601a      	str	r2, [r3, #0]
        this_uart->hw_reg_bit = UART0_BITBAND;
200018d8:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
200018dc:	605a      	str	r2, [r3, #4]
        this_uart->irqn = UART0_IRQn;
200018de:	f04f 020a 	mov.w	r2, #10
200018e2:	811a      	strh	r2, [r3, #8]

        pclk_freq = g_FrequencyPCLK0;
200018e4:	f244 134c 	movw	r3, #16716	; 0x414c
200018e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200018ec:	6818      	ldr	r0, [r3, #0]

        /* reset UART0 */
        SYSREG->SOFT_RST_CR |= SYSREG_UART0_SOFTRESET_MASK;
200018ee:	f242 0300 	movw	r3, #8192	; 0x2000
200018f2:	f2ce 0304 	movt	r3, #57348	; 0xe004
200018f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200018f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
200018fc:	631a      	str	r2, [r3, #48]	; 0x30
200018fe:	f24e 1200 	movw	r2, #57600	; 0xe100
20001902:	f2ce 0200 	movt	r2, #57344	; 0xe000
20001906:	f44f 6180 	mov.w	r1, #1024	; 0x400
2000190a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
        /* Clear any previously pended UART0 interrupt */
        NVIC_ClearPendingIRQ( UART0_IRQn );
        /* Take UART0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_UART0_SOFTRESET_MASK;
2000190e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20001910:	f022 0280 	bic.w	r2, r2, #128	; 0x80
20001914:	631a      	str	r2, [r3, #48]	; 0x30
20001916:	e025      	b.n	20001964 <MSS_UART_init+0xd0>
    }
    else
    {
        this_uart->hw_reg = UART1;
20001918:	f240 0300 	movw	r3, #0
2000191c:	f2c4 0301 	movt	r3, #16385	; 0x4001
20001920:	6023      	str	r3, [r4, #0]
        this_uart->hw_reg_bit = UART1_BITBAND;
20001922:	f240 0300 	movw	r3, #0
20001926:	f2c4 2320 	movt	r3, #16928	; 0x4220
2000192a:	6063      	str	r3, [r4, #4]
        this_uart->irqn = UART1_IRQn;
2000192c:	f04f 030b 	mov.w	r3, #11
20001930:	8123      	strh	r3, [r4, #8]

        pclk_freq = g_FrequencyPCLK1;
20001932:	f244 1350 	movw	r3, #16720	; 0x4150
20001936:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000193a:	6818      	ldr	r0, [r3, #0]

        /* Reset UART1 */
        SYSREG->SOFT_RST_CR |= SYSREG_UART1_SOFTRESET_MASK;
2000193c:	f242 0300 	movw	r3, #8192	; 0x2000
20001940:	f2ce 0304 	movt	r3, #57348	; 0xe004
20001944:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20001946:	f442 7280 	orr.w	r2, r2, #256	; 0x100
2000194a:	631a      	str	r2, [r3, #48]	; 0x30
2000194c:	f24e 1200 	movw	r2, #57600	; 0xe100
20001950:	f2ce 0200 	movt	r2, #57344	; 0xe000
20001954:	f44f 6100 	mov.w	r1, #2048	; 0x800
20001958:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
        /* Clear any previously pended UART1 interrupt */
        NVIC_ClearPendingIRQ( UART1_IRQn );
        /* Take UART1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_UART1_SOFTRESET_MASK;
2000195c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2000195e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
20001962:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* disable interrupts */
    this_uart->hw_reg->IER = 0U;
20001964:	6823      	ldr	r3, [r4, #0]
20001966:	f04f 0200 	mov.w	r2, #0
2000196a:	711a      	strb	r2, [r3, #4]
     * The baud value is computed using the following equation:
     *      baud_value_l = PCLK_Frequency / (baud_rate * 16)
     * The baud value is rounded up or down depending on what would be the remainder
     * of the divide by 16 operation.
     */
    if( 0U < baud_rate )
2000196c:	b915      	cbnz	r5, 20001974 <MSS_UART_init+0xe0>
2000196e:	f04f 0501 	mov.w	r5, #1
20001972:	e00f      	b.n	20001994 <MSS_UART_init+0x100>
    {
        baud_value_l = (uint32_t)(pclk_freq / baud_rate);
20001974:	fbb0 f5f5 	udiv	r5, r0, r5
        if( baud_value_l & 0x00000008U )
20001978:	f015 0f08 	tst.w	r5, #8
        {
            /* remainder above 0.5 */
            baud_value_l = (baud_value_l >> 4U) + 1U;        
2000197c:	ea4f 1515 	mov.w	r5, r5, lsr #4
20001980:	bf18      	it	ne
20001982:	3501      	addne	r5, #1
            /* remainder below 0.5 */
            baud_value_l = (baud_value_l >> 4U);
        }
    
        /* Check if the baud rate is supported by the PCLK */
        ASSERT( baud_value_l <= UINT16_MAX);
20001984:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
        if( baud_value_l <= (uint32_t)UINT16_MAX)
        {
            baud_value = (uint16_t)baud_value_l;
20001988:	bf38      	it	cc
2000198a:	b2ad      	uxthcc	r5, r5
            /* remainder below 0.5 */
            baud_value_l = (baud_value_l >> 4U);
        }
    
        /* Check if the baud rate is supported by the PCLK */
        ASSERT( baud_value_l <= UINT16_MAX);
2000198c:	d302      	bcc.n	20001994 <MSS_UART_init+0x100>
2000198e:	be00      	bkpt	0x0000
20001990:	f04f 0501 	mov.w	r5, #1
            baud_value = (uint16_t)baud_value_l;
        }
    }
    
    /* set divisor latch */
    this_uart->hw_reg_bit->LCR_DLAB = (uint32_t)1;
20001994:	6863      	ldr	r3, [r4, #4]
20001996:	f04f 0201 	mov.w	r2, #1
2000199a:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

    /* msb of baud value */
    this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8);
2000199e:	6823      	ldr	r3, [r4, #0]
200019a0:	ea4f 2215 	mov.w	r2, r5, lsr #8
200019a4:	711a      	strb	r2, [r3, #4]
    /* lsb of baud value */
    this_uart->hw_reg->DLR = (uint8_t)baud_value;
200019a6:	6823      	ldr	r3, [r4, #0]
200019a8:	b2ed      	uxtb	r5, r5
200019aa:	701d      	strb	r5, [r3, #0]

    /* reset divisor latch */
    this_uart->hw_reg_bit->LCR_DLAB = (uint32_t)0;
200019ac:	6862      	ldr	r2, [r4, #4]
200019ae:	f04f 0300 	mov.w	r3, #0
200019b2:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c

    /* set the line control register (bit length, stop bits, parity) */
    this_uart->hw_reg->LCR = line_config;
200019b6:	6822      	ldr	r2, [r4, #0]
200019b8:	7316      	strb	r6, [r2, #12]

    /* FIFO configuration */
    /* RX FIFO length = 1 byte, clear receiver FIFO, 
       clear transmitter FIFO, enable RXRDYN and TXRDYN pins. */
    this_uart->hw_reg->FCR = (uint8_t)MSS_UART_FIFO_SINGLE_BYTE | 
200019ba:	6822      	ldr	r2, [r4, #0]
200019bc:	f04f 010e 	mov.w	r1, #14
200019c0:	7211      	strb	r1, [r2, #8]
                              FCR_CLEAR_RX_FIFO_MASK | FCR_CLEAR_TX_FIFO_MASK | 
                              FCR_ENABLE_TXRDY_RXRDY_MASK;
    /* disable loopback */
    this_uart->hw_reg_bit->MCR_LOOP = (uint32_t)0;
200019c2:	6862      	ldr	r2, [r4, #4]
200019c4:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210

    /* Instance setup */
    this_uart->tx_buff_size = TX_COMPLETE;
200019c8:	6123      	str	r3, [r4, #16]
    this_uart->tx_buffer = (const uint8_t *)0;
200019ca:	60e3      	str	r3, [r4, #12]
    this_uart->tx_idx = 0U;
200019cc:	6163      	str	r3, [r4, #20]

    /* Default handlers for MSS UART interrupts */
    this_uart->rx_handler       = NULL_HANDLER;
200019ce:	61e3      	str	r3, [r4, #28]
    this_uart->tx_handler       = default_tx_handler;
200019d0:	f241 62e9 	movw	r2, #5865	; 0x16e9
200019d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
200019d8:	6222      	str	r2, [r4, #32]
    this_uart->linests_handler  = NULL_HANDLER;
200019da:	61a3      	str	r3, [r4, #24]
    this_uart->modemsts_handler = NULL_HANDLER;
200019dc:	6263      	str	r3, [r4, #36]	; 0x24

    /* Initialize the sticky status */
    this_uart->status = 0U;
200019de:	72a3      	strb	r3, [r4, #10]
}
200019e0:	bd70      	pop	{r4, r5, r6, pc}
200019e2:	bf00      	nop

200019e4 <recover_from_rx_overflow>:
 */
static void recover_from_rx_overflow
(
    mss_spi_instance_t * this_spi
)
{
200019e4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    uint32_t slave_select;
    
    /*
     * Read current SPI hardware block configuration.
     */
    control_reg = this_spi->hw_reg->CONTROL;
200019e8:	6803      	ldr	r3, [r0, #0]
200019ea:	f8d3 8000 	ldr.w	r8, [r3]
    clk_gen = this_spi->hw_reg->CLK_GEN;
200019ee:	f8d3 c018 	ldr.w	ip, [r3, #24]
    frame_size = this_spi->hw_reg->TXRXDF_SIZE;
200019f2:	685f      	ldr	r7, [r3, #4]
    control2 = this_spi->hw_reg->CONTROL2;
200019f4:	6a9e      	ldr	r6, [r3, #40]	; 0x28
    packet_size = this_spi->hw_reg->PKTSIZE;
200019f6:	6b1d      	ldr	r5, [r3, #48]	; 0x30
    cmd_size = this_spi->hw_reg->CMDSIZE;
200019f8:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    slave_select = this_spi->hw_reg->SLAVE_SELECT;
200019fa:	f8d3 a01c 	ldr.w	sl, [r3, #28]
     
    /*
     * Reset the SPI hardware block.
     */
    if(this_spi == &g_mss_spi0)
200019fe:	f244 23d4 	movw	r3, #17108	; 0x42d4
20001a02:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001a06:	4298      	cmp	r0, r3
20001a08:	d124      	bne.n	20001a54 <recover_from_rx_overflow+0x70>
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI0_BASE);
20001a0a:	f244 23d4 	movw	r3, #17108	; 0x42d4
20001a0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001a12:	f241 0200 	movw	r2, #4096	; 0x1000
20001a16:	f2c4 0200 	movt	r2, #16384	; 0x4000
20001a1a:	601a      	str	r2, [r3, #0]
        this_spi->irqn = SPI0_IRQn;
20001a1c:	f04f 010c 	mov.w	r1, #12
20001a20:	8099      	strh	r1, [r3, #4]

        /* reset SPI0 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI0_SOFTRESET_MASK;
20001a22:	f242 0300 	movw	r3, #8192	; 0x2000
20001a26:	f2ce 0304 	movt	r3, #57348	; 0xe004
20001a2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
20001a2c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
20001a30:	6319      	str	r1, [r3, #48]	; 0x30
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20001a32:	f24e 1100 	movw	r1, #57600	; 0xe100
20001a36:	f2ce 0100 	movt	r1, #57344	; 0xe000
20001a3a:	f44f 5980 	mov.w	r9, #4096	; 0x1000
20001a3e:	f8c1 9180 	str.w	r9, [r1, #384]	; 0x180
        /* Clear any previously pended SPI0 interrupt */
        NVIC_ClearPendingIRQ(SPI0_IRQn);
        /* Take SPI0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI0_SOFTRESET_MASK;
20001a42:	6b19      	ldr	r1, [r3, #48]	; 0x30
20001a44:	f421 7100 	bic.w	r1, r1, #512	; 0x200
20001a48:	6319      	str	r1, [r3, #48]	; 0x30

        this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
20001a4a:	6813      	ldr	r3, [r2, #0]
20001a4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
20001a50:	6013      	str	r3, [r2, #0]
20001a52:	e01f      	b.n	20001a94 <recover_from_rx_overflow+0xb0>
    }
    else
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI1_BASE);
20001a54:	f241 0200 	movw	r2, #4096	; 0x1000
20001a58:	f2c4 0201 	movt	r2, #16385	; 0x4001
20001a5c:	6002      	str	r2, [r0, #0]
        this_spi->irqn = SPI1_IRQn;
20001a5e:	f04f 030d 	mov.w	r3, #13
20001a62:	8083      	strh	r3, [r0, #4]
        
        /* reset SPI1 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI1_SOFTRESET_MASK;
20001a64:	f242 0300 	movw	r3, #8192	; 0x2000
20001a68:	f2ce 0304 	movt	r3, #57348	; 0xe004
20001a6c:	6b19      	ldr	r1, [r3, #48]	; 0x30
20001a6e:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
20001a72:	6319      	str	r1, [r3, #48]	; 0x30
20001a74:	f24e 1100 	movw	r1, #57600	; 0xe100
20001a78:	f2ce 0100 	movt	r1, #57344	; 0xe000
20001a7c:	f44f 5900 	mov.w	r9, #8192	; 0x2000
20001a80:	f8c1 9180 	str.w	r9, [r1, #384]	; 0x180
        /* Clear any previously pended SPI1 interrupt */
        NVIC_ClearPendingIRQ(SPI1_IRQn);
        /* Take SPI1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI1_SOFTRESET_MASK;
20001a84:	6b19      	ldr	r1, [r3, #48]	; 0x30
20001a86:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
20001a8a:	6319      	str	r1, [r3, #48]	; 0x30
        
        this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
20001a8c:	6813      	ldr	r3, [r2, #0]
20001a8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
20001a92:	6013      	str	r3, [r2, #0]
    }
    
    /*
     * Restore SPI hardware block configuration.
     */
    control_reg &= ~(uint32_t)CTRL_ENABLE_MASK;
20001a94:	f028 0201 	bic.w	r2, r8, #1
    this_spi->hw_reg->CONTROL = control_reg;
20001a98:	6803      	ldr	r3, [r0, #0]
20001a9a:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CLK_GEN = clk_gen;
20001a9c:	6803      	ldr	r3, [r0, #0]
20001a9e:	f8c3 c018 	str.w	ip, [r3, #24]
    this_spi->hw_reg->TXRXDF_SIZE = frame_size;
20001aa2:	6803      	ldr	r3, [r0, #0]
20001aa4:	605f      	str	r7, [r3, #4]
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
20001aa6:	6803      	ldr	r3, [r0, #0]
20001aa8:	681a      	ldr	r2, [r3, #0]
20001aaa:	f042 0201 	orr.w	r2, r2, #1
20001aae:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CONTROL2 = control2;
20001ab0:	6803      	ldr	r3, [r0, #0]
20001ab2:	629e      	str	r6, [r3, #40]	; 0x28
    this_spi->hw_reg->PKTSIZE = packet_size;
20001ab4:	6803      	ldr	r3, [r0, #0]
20001ab6:	631d      	str	r5, [r3, #48]	; 0x30
    this_spi->hw_reg->CMDSIZE = cmd_size;
20001ab8:	6803      	ldr	r3, [r0, #0]
20001aba:	635c      	str	r4, [r3, #52]	; 0x34
    this_spi->hw_reg->SLAVE_SELECT = slave_select;
20001abc:	6803      	ldr	r3, [r0, #0]
20001abe:	f8c3 a01c 	str.w	sl, [r3, #28]
}
20001ac2:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
20001ac6:	4770      	bx	lr

20001ac8 <MSS_SPI_configure_master_mode>:
    mss_spi_slave_t         slave,
    mss_spi_protocol_mode_t protocol_mode,
    mss_spi_pclk_div_t      clk_rate,
    uint8_t                 frame_bit_length
)
{
20001ac8:	b4f0      	push	{r4, r5, r6, r7}
20001aca:	f89d 5010 	ldrb.w	r5, [sp, #16]
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20001ace:	f244 2cd4 	movw	ip, #17108	; 0x42d4
20001ad2:	f2c2 0c00 	movt	ip, #8192	; 0x2000
20001ad6:	4560      	cmp	r0, ip
20001ad8:	d006      	beq.n	20001ae8 <MSS_SPI_configure_master_mode+0x20>
20001ada:	f244 2c50 	movw	ip, #16976	; 0x4250
20001ade:	f2c2 0c00 	movt	ip, #8192	; 0x2000
20001ae2:	4560      	cmp	r0, ip
20001ae4:	d000      	beq.n	20001ae8 <MSS_SPI_configure_master_mode+0x20>
20001ae6:	be00      	bkpt	0x0000
    ASSERT(slave < MSS_SPI_MAX_NB_OF_SLAVES);
20001ae8:	2907      	cmp	r1, #7
20001aea:	d900      	bls.n	20001aee <MSS_SPI_configure_master_mode+0x26>
20001aec:	be00      	bkpt	0x0000
    ASSERT(frame_bit_length <= MAX_FRAME_LENGTH);
20001aee:	2d20      	cmp	r5, #32
20001af0:	d900      	bls.n	20001af4 <MSS_SPI_configure_master_mode+0x2c>
20001af2:	be00      	bkpt	0x0000
    
    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
20001af4:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
20001af8:	fa0f f68c 	sxth.w	r6, ip
20001afc:	ea4f 1656 	mov.w	r6, r6, lsr #5
20001b00:	f00c 0c1f 	and.w	ip, ip, #31
20001b04:	f04f 0701 	mov.w	r7, #1
20001b08:	fa07 f70c 	lsl.w	r7, r7, ip
20001b0c:	f24e 1400 	movw	r4, #57600	; 0xe100
20001b10:	f2ce 0400 	movt	r4, #57344	; 0xe000
20001b14:	f106 0620 	add.w	r6, r6, #32
20001b18:	f844 7026 	str.w	r7, [r4, r6, lsl #2]

    /* Reset slave transfer mode to unknown to wipe slate clean */
    this_spi->slave_xfer_mode = MSS_SPI_SLAVE_XFER_NONE;
20001b1c:	f04f 0c00 	mov.w	ip, #0
20001b20:	f880 c080 	strb.w	ip, [r0, #128]	; 0x80

    /* Set the mode. */
    this_spi->hw_reg->CONTROL &= ~(uint32_t)CTRL_ENABLE_MASK;
20001b24:	6804      	ldr	r4, [r0, #0]
20001b26:	6826      	ldr	r6, [r4, #0]
20001b28:	f026 0601 	bic.w	r6, r6, #1
20001b2c:	6026      	str	r6, [r4, #0]
    this_spi->hw_reg->CONTROL |= CTRL_MASTER_MASK;
20001b2e:	6804      	ldr	r4, [r0, #0]
20001b30:	6826      	ldr	r6, [r4, #0]
20001b32:	f046 0602 	orr.w	r6, r6, #2
20001b36:	6026      	str	r6, [r4, #0]
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
20001b38:	6804      	ldr	r4, [r0, #0]
20001b3a:	6826      	ldr	r6, [r4, #0]
20001b3c:	f046 0601 	orr.w	r6, r6, #1
20001b40:	6026      	str	r6, [r4, #0]
    /*
     * Keep track of the required register configuration for this slave. These
     * values will be used by the MSS_SPI_set_slave_select() function to configure
     * the master to match the slave being selected.
     */
    if(slave < MSS_SPI_MAX_NB_OF_SLAVES)     
20001b42:	2907      	cmp	r1, #7
20001b44:	d82d      	bhi.n	20001ba2 <MSS_SPI_configure_master_mode+0xda>
         *
         * We only do it for Motorola modes and if you need the slave selected
         * deselected between frames in modes 0 or 2 then remove SPS_MASK from
         * below.
         */
        if((MSS_SPI_MODE0 == protocol_mode) || (MSS_SPI_MODE1 == protocol_mode) ||
20001b46:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
20001b4a:	bf14      	ite	ne
20001b4c:	2400      	movne	r4, #0
20001b4e:	2401      	moveq	r4, #1
20001b50:	4562      	cmp	r2, ip
20001b52:	bf08      	it	eq
20001b54:	f044 0401 	orreq.w	r4, r4, #1
20001b58:	b954      	cbnz	r4, 20001b70 <MSS_SPI_configure_master_mode+0xa8>
20001b5a:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
20001b5e:	bf14      	ite	ne
20001b60:	2400      	movne	r4, #0
20001b62:	2401      	moveq	r4, #1
20001b64:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
20001b68:	bf08      	it	eq
20001b6a:	f044 0401 	orreq.w	r4, r4, #1
20001b6e:	b14c      	cbz	r4, 20001b84 <MSS_SPI_configure_master_mode+0xbc>
           (MSS_SPI_MODE2 == protocol_mode) || (MSS_SPI_MODE3 == protocol_mode))
        {
            this_spi->slaves_cfg[slave].ctrl_reg = MASTER_MODE_MASK | SPS_MASK |
20001b70:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
20001b74:	f240 1c02 	movw	ip, #258	; 0x102
20001b78:	f2c2 4c00 	movt	ip, #9216	; 0x2400
20001b7c:	ea42 020c 	orr.w	r2, r2, ip
20001b80:	6362      	str	r2, [r4, #52]	; 0x34
         *
         * We only do it for Motorola modes and if you need the slave selected
         * deselected between frames in modes 0 or 2 then remove SPS_MASK from
         * below.
         */
        if((MSS_SPI_MODE0 == protocol_mode) || (MSS_SPI_MODE1 == protocol_mode) ||
20001b82:	e008      	b.n	20001b96 <MSS_SPI_configure_master_mode+0xce>
                                                   (uint32_t)protocol_mode | 
                                                   ((uint32_t)1 << TXRXDFCOUNT_SHIFT);
        }
        else
        {
            this_spi->slaves_cfg[slave].ctrl_reg = MASTER_MODE_MASK |
20001b84:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
20001b88:	f240 1c02 	movw	ip, #258	; 0x102
20001b8c:	f2c2 0c00 	movt	ip, #8192	; 0x2000
20001b90:	ea42 020c 	orr.w	r2, r2, ip
20001b94:	6362      	str	r2, [r4, #52]	; 0x34
                                                   BIGFIFO_MASK |
                                                   (uint32_t)protocol_mode | 
                                                   ((uint32_t)1 << TXRXDFCOUNT_SHIFT);
        }
        
        this_spi->slaves_cfg[slave].txrxdf_size_reg = frame_bit_length;
20001b96:	f101 0106 	add.w	r1, r1, #6
20001b9a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
20001b9e:	720d      	strb	r5, [r1, #8]
        this_spi->slaves_cfg[slave].clk_gen = (uint8_t)clk_rate;
20001ba0:	724b      	strb	r3, [r1, #9]
    }
    /* Reenable interrupts */
    NVIC_EnableIRQ( this_spi->irqn );
20001ba2:	8883      	ldrh	r3, [r0, #4]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20001ba4:	b21a      	sxth	r2, r3
20001ba6:	ea4f 1252 	mov.w	r2, r2, lsr #5
20001baa:	f003 031f 	and.w	r3, r3, #31
20001bae:	f04f 0101 	mov.w	r1, #1
20001bb2:	fa01 f103 	lsl.w	r1, r1, r3
20001bb6:	f24e 1300 	movw	r3, #57600	; 0xe100
20001bba:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001bbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20001bc2:	bcf0      	pop	{r4, r5, r6, r7}
20001bc4:	4770      	bx	lr
20001bc6:	bf00      	nop

20001bc8 <MSS_SPI_set_slave_select>:
void MSS_SPI_set_slave_select
(
    mss_spi_instance_t * this_spi,
    mss_spi_slave_t slave
)
{
20001bc8:	b538      	push	{r3, r4, r5, lr}
20001bca:	4604      	mov	r4, r0
    uint32_t rx_overflow;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20001bcc:	f244 23d4 	movw	r3, #17108	; 0x42d4
20001bd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001bd4:	4298      	cmp	r0, r3
20001bd6:	d006      	beq.n	20001be6 <MSS_SPI_set_slave_select+0x1e>
20001bd8:	f244 2350 	movw	r3, #16976	; 0x4250
20001bdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001be0:	4298      	cmp	r0, r3
20001be2:	d000      	beq.n	20001be6 <MSS_SPI_set_slave_select+0x1e>
20001be4:	be00      	bkpt	0x0000
    
    /* This function is only intended to be used with an SPI master. */
    ASSERT((this_spi->hw_reg->CONTROL & CTRL_MASTER_MASK) == CTRL_MASTER_MASK);
20001be6:	6822      	ldr	r2, [r4, #0]
20001be8:	6813      	ldr	r3, [r2, #0]
20001bea:	f013 0f02 	tst.w	r3, #2
20001bee:	d100      	bne.n	20001bf2 <MSS_SPI_set_slave_select+0x2a>
20001bf0:	be00      	bkpt	0x0000
    
    ASSERT(this_spi->slaves_cfg[slave].ctrl_reg != NOT_CONFIGURED);
20001bf2:	460d      	mov	r5, r1
20001bf4:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
20001bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20001bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
20001bfe:	d100      	bne.n	20001c02 <MSS_SPI_set_slave_select+0x3a>
20001c00:	be00      	bkpt	0x0000

    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
20001c02:	88a3      	ldrh	r3, [r4, #4]
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
20001c04:	b219      	sxth	r1, r3
20001c06:	ea4f 1151 	mov.w	r1, r1, lsr #5
20001c0a:	f003 031f 	and.w	r3, r3, #31
20001c0e:	f04f 0001 	mov.w	r0, #1
20001c12:	fa00 f003 	lsl.w	r0, r0, r3
20001c16:	f24e 1300 	movw	r3, #57600	; 0xe100
20001c1a:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001c1e:	f101 0120 	add.w	r1, r1, #32
20001c22:	f843 0021 	str.w	r0, [r3, r1, lsl #2]

    /* Recover from receive overflow. */
    rx_overflow = this_spi->hw_reg->STATUS & RX_OVERFLOW_MASK;
20001c26:	6893      	ldr	r3, [r2, #8]
    if(rx_overflow)
20001c28:	f013 0f04 	tst.w	r3, #4
20001c2c:	d002      	beq.n	20001c34 <MSS_SPI_set_slave_select+0x6c>
    {
         recover_from_rx_overflow(this_spi);
20001c2e:	4620      	mov	r0, r4
20001c30:	f7ff fed8 	bl	200019e4 <recover_from_rx_overflow>
    }
    
    /* Set the clock rate. */
    this_spi->hw_reg->CONTROL &= ~(uint32_t)CTRL_ENABLE_MASK;
20001c34:	6823      	ldr	r3, [r4, #0]
20001c36:	681a      	ldr	r2, [r3, #0]
20001c38:	f022 0201 	bic.w	r2, r2, #1
20001c3c:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CONTROL = this_spi->slaves_cfg[slave].ctrl_reg;
20001c3e:	6822      	ldr	r2, [r4, #0]
20001c40:	f105 0306 	add.w	r3, r5, #6
20001c44:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
20001c48:	6859      	ldr	r1, [r3, #4]
20001c4a:	6011      	str	r1, [r2, #0]
    this_spi->hw_reg->CLK_GEN = this_spi->slaves_cfg[slave].clk_gen;
20001c4c:	6822      	ldr	r2, [r4, #0]
20001c4e:	7a59      	ldrb	r1, [r3, #9]
20001c50:	6191      	str	r1, [r2, #24]
    this_spi->hw_reg->TXRXDF_SIZE = this_spi->slaves_cfg[slave].txrxdf_size_reg;
20001c52:	6822      	ldr	r2, [r4, #0]
20001c54:	7a1b      	ldrb	r3, [r3, #8]
20001c56:	6053      	str	r3, [r2, #4]
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
20001c58:	6823      	ldr	r3, [r4, #0]
20001c5a:	681a      	ldr	r2, [r3, #0]
20001c5c:	f042 0201 	orr.w	r2, r2, #1
20001c60:	601a      	str	r2, [r3, #0]
    
    /* Set slave select */
    this_spi->hw_reg->SLAVE_SELECT |= ((uint32_t)1 << (uint32_t)slave);
20001c62:	6822      	ldr	r2, [r4, #0]
20001c64:	69d1      	ldr	r1, [r2, #28]
20001c66:	f04f 0301 	mov.w	r3, #1
20001c6a:	fa03 f505 	lsl.w	r5, r3, r5
20001c6e:	ea45 0501 	orr.w	r5, r5, r1
20001c72:	61d5      	str	r5, [r2, #28]
    /* Reenable interrupts */
    NVIC_EnableIRQ( this_spi->irqn );
20001c74:	88a2      	ldrh	r2, [r4, #4]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20001c76:	b211      	sxth	r1, r2
20001c78:	ea4f 1151 	mov.w	r1, r1, lsr #5
20001c7c:	f002 021f 	and.w	r2, r2, #31
20001c80:	fa03 f202 	lsl.w	r2, r3, r2
20001c84:	f24e 1300 	movw	r3, #57600	; 0xe100
20001c88:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001c8c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
20001c90:	bd38      	pop	{r3, r4, r5, pc}
20001c92:	bf00      	nop

20001c94 <MSS_SPI_clear_slave_select>:
void MSS_SPI_clear_slave_select
(
    mss_spi_instance_t * this_spi,
    mss_spi_slave_t slave
)
{
20001c94:	b538      	push	{r3, r4, r5, lr}
20001c96:	4604      	mov	r4, r0
20001c98:	460d      	mov	r5, r1
    uint32_t rx_overflow;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20001c9a:	f244 23d4 	movw	r3, #17108	; 0x42d4
20001c9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001ca2:	4298      	cmp	r0, r3
20001ca4:	d006      	beq.n	20001cb4 <MSS_SPI_clear_slave_select+0x20>
20001ca6:	f244 2350 	movw	r3, #16976	; 0x4250
20001caa:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001cae:	4298      	cmp	r0, r3
20001cb0:	d000      	beq.n	20001cb4 <MSS_SPI_clear_slave_select+0x20>
20001cb2:	be00      	bkpt	0x0000
    
    /* This function is only intended to be used with an SPI master. */
    ASSERT((this_spi->hw_reg->CONTROL & CTRL_MASTER_MASK) == CTRL_MASTER_MASK);
20001cb4:	6822      	ldr	r2, [r4, #0]
20001cb6:	6813      	ldr	r3, [r2, #0]
20001cb8:	f013 0f02 	tst.w	r3, #2
20001cbc:	d100      	bne.n	20001cc0 <MSS_SPI_clear_slave_select+0x2c>
20001cbe:	be00      	bkpt	0x0000

    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
20001cc0:	88a3      	ldrh	r3, [r4, #4]
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
20001cc2:	b219      	sxth	r1, r3
20001cc4:	ea4f 1151 	mov.w	r1, r1, lsr #5
20001cc8:	f003 031f 	and.w	r3, r3, #31
20001ccc:	f04f 0001 	mov.w	r0, #1
20001cd0:	fa00 f003 	lsl.w	r0, r0, r3
20001cd4:	f24e 1300 	movw	r3, #57600	; 0xe100
20001cd8:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001cdc:	f101 0120 	add.w	r1, r1, #32
20001ce0:	f843 0021 	str.w	r0, [r3, r1, lsl #2]

    /* Recover from receive overflow. */
    rx_overflow = this_spi->hw_reg->STATUS & RX_OVERFLOW_MASK;
20001ce4:	6893      	ldr	r3, [r2, #8]
    if(rx_overflow)
20001ce6:	f013 0f04 	tst.w	r3, #4
20001cea:	d002      	beq.n	20001cf2 <MSS_SPI_clear_slave_select+0x5e>
    {
         recover_from_rx_overflow(this_spi);
20001cec:	4620      	mov	r0, r4
20001cee:	f7ff fe79 	bl	200019e4 <recover_from_rx_overflow>
    }
    
    this_spi->hw_reg->SLAVE_SELECT &= ~((uint32_t)1 << (uint32_t)slave);
20001cf2:	6822      	ldr	r2, [r4, #0]
20001cf4:	69d1      	ldr	r1, [r2, #28]
20001cf6:	f04f 0301 	mov.w	r3, #1
20001cfa:	fa03 f505 	lsl.w	r5, r3, r5
20001cfe:	ea21 0505 	bic.w	r5, r1, r5
20001d02:	61d5      	str	r5, [r2, #28]
    /* Reenable interrupts */
    NVIC_EnableIRQ( this_spi->irqn );
20001d04:	88a2      	ldrh	r2, [r4, #4]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20001d06:	b211      	sxth	r1, r2
20001d08:	ea4f 1151 	mov.w	r1, r1, lsr #5
20001d0c:	f002 021f 	and.w	r2, r2, #31
20001d10:	fa03 f202 	lsl.w	r2, r3, r2
20001d14:	f24e 1300 	movw	r3, #57600	; 0xe100
20001d18:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001d1c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
20001d20:	bd38      	pop	{r3, r4, r5, pc}
20001d22:	bf00      	nop

20001d24 <MSS_SPI_transfer_frame>:
uint32_t MSS_SPI_transfer_frame
(
    mss_spi_instance_t * this_spi,
    uint32_t tx_bits
)
{
20001d24:	b410      	push	{r4}
20001d26:	b083      	sub	sp, #12
    volatile uint32_t dummy;
    uint32_t rx_fifo_empty;
    uint32_t rx_ready;
    uint32_t tx_done;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20001d28:	f244 23d4 	movw	r3, #17108	; 0x42d4
20001d2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001d30:	4298      	cmp	r0, r3
20001d32:	d006      	beq.n	20001d42 <MSS_SPI_transfer_frame+0x1e>
20001d34:	f244 2350 	movw	r3, #16976	; 0x4250
20001d38:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001d3c:	4298      	cmp	r0, r3
20001d3e:	d000      	beq.n	20001d42 <MSS_SPI_transfer_frame+0x1e>
20001d40:	be00      	bkpt	0x0000
    
    /* This function is only intended to be used with an SPI master. */
    ASSERT((this_spi->hw_reg->CONTROL & CTRL_MASTER_MASK) == CTRL_MASTER_MASK);
20001d42:	6803      	ldr	r3, [r0, #0]
20001d44:	681a      	ldr	r2, [r3, #0]
20001d46:	f012 0f02 	tst.w	r2, #2
20001d4a:	d100      	bne.n	20001d4e <MSS_SPI_transfer_frame+0x2a>
20001d4c:	be00      	bkpt	0x0000
    
    /* Ensure single frame transfer selected so interrupts work correctly */
    this_spi->hw_reg->CONTROL = (this_spi->hw_reg->CONTROL & ~TXRXDFCOUNT_MASK)
20001d4e:	681c      	ldr	r4, [r3, #0]
20001d50:	f240 02ff 	movw	r2, #255	; 0xff
20001d54:	f6cf 7200 	movt	r2, #65280	; 0xff00
20001d58:	ea04 0202 	and.w	r2, r4, r2
20001d5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
20001d60:	601a      	str	r2, [r3, #0]
                                | ((uint32_t)1u << TXRXDFCOUNT_SHIFT);

    /* Flush the Tx and Rx FIFOs. Please note this does not have any effect on A2F200. */
    this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
20001d62:	6803      	ldr	r3, [r0, #0]
20001d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20001d66:	f042 020c 	orr.w	r2, r2, #12
20001d6a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Flush Rx FIFO in case we are executing on A2F200. */
    rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
20001d6c:	6803      	ldr	r3, [r0, #0]
20001d6e:	689a      	ldr	r2, [r3, #8]
    while(0u == rx_fifo_empty)
20001d70:	f012 0f40 	tst.w	r2, #64	; 0x40
20001d74:	d107      	bne.n	20001d86 <MSS_SPI_transfer_frame+0x62>
    {
        dummy = this_spi->hw_reg->RX_DATA;
20001d76:	691a      	ldr	r2, [r3, #16]
20001d78:	9201      	str	r2, [sp, #4]
        dummy = dummy;  /* Prevent Lint warning. */
20001d7a:	9a01      	ldr	r2, [sp, #4]
20001d7c:	9201      	str	r2, [sp, #4]
        rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
20001d7e:	689a      	ldr	r2, [r3, #8]
    /* Flush the Tx and Rx FIFOs. Please note this does not have any effect on A2F200. */
    this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
    
    /* Flush Rx FIFO in case we are executing on A2F200. */
    rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
    while(0u == rx_fifo_empty)
20001d80:	f012 0f40 	tst.w	r2, #64	; 0x40
20001d84:	d0f7      	beq.n	20001d76 <MSS_SPI_transfer_frame+0x52>
        dummy = dummy;  /* Prevent Lint warning. */
        rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
    }
    
    /* Send frame. */
    this_spi->hw_reg->TX_DATA = tx_bits;
20001d86:	6159      	str	r1, [r3, #20]
    
    /* Wait for frame Tx to complete. */
    tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
20001d88:	6803      	ldr	r3, [r0, #0]
20001d8a:	689a      	ldr	r2, [r3, #8]
    while(0u == tx_done)
20001d8c:	f012 0f01 	tst.w	r2, #1
20001d90:	d103      	bne.n	20001d9a <MSS_SPI_transfer_frame+0x76>
    {
        tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
20001d92:	689a      	ldr	r2, [r3, #8]
    /* Send frame. */
    this_spi->hw_reg->TX_DATA = tx_bits;
    
    /* Wait for frame Tx to complete. */
    tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
    while(0u == tx_done)
20001d94:	f012 0f01 	tst.w	r2, #1
20001d98:	d0fb      	beq.n	20001d92 <MSS_SPI_transfer_frame+0x6e>
        tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
    }
    
    /* Read received frame. */
    /* Wait for Rx complete. */
    rx_ready = this_spi->hw_reg->STATUS & RX_DATA_READY_MASK;
20001d9a:	689a      	ldr	r2, [r3, #8]
    while(0u == rx_ready)
20001d9c:	f012 0f02 	tst.w	r2, #2
20001da0:	d103      	bne.n	20001daa <MSS_SPI_transfer_frame+0x86>
    {
        rx_ready = this_spi->hw_reg->STATUS & RX_DATA_READY_MASK;
20001da2:	689a      	ldr	r2, [r3, #8]
    }
    
    /* Read received frame. */
    /* Wait for Rx complete. */
    rx_ready = this_spi->hw_reg->STATUS & RX_DATA_READY_MASK;
    while(0u == rx_ready)
20001da4:	f012 0f02 	tst.w	r2, #2
20001da8:	d0fb      	beq.n	20001da2 <MSS_SPI_transfer_frame+0x7e>
    {
        rx_ready = this_spi->hw_reg->STATUS & RX_DATA_READY_MASK;
    }
    /* Return Rx data. */
    return( this_spi->hw_reg->RX_DATA );
20001daa:	6918      	ldr	r0, [r3, #16]
}
20001dac:	b003      	add	sp, #12
20001dae:	bc10      	pop	{r4}
20001db0:	4770      	bx	lr
20001db2:	bf00      	nop

20001db4 <fill_slave_tx_fifo>:
 */
static void fill_slave_tx_fifo
(
    mss_spi_instance_t * this_spi
)
{
20001db4:	b410      	push	{r4}
    uint32_t guard = 0u;

    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20001db6:	6802      	ldr	r2, [r0, #0]
20001db8:	6893      	ldr	r3, [r2, #8]
20001dba:	f413 7f80 	tst.w	r3, #256	; 0x100
20001dbe:	d113      	bne.n	20001de8 <fill_slave_tx_fifo+0x34>
          (this_spi->slave_tx_idx < this_spi->slave_tx_size))
20001dc0:	6903      	ldr	r3, [r0, #16]
20001dc2:	68c1      	ldr	r1, [r0, #12]
20001dc4:	428b      	cmp	r3, r1
20001dc6:	d213      	bcs.n	20001df0 <fill_slave_tx_fifo+0x3c>
    {
        /* Sending from primary slave transmit buffer */
        this_spi->hw_reg->TX_DATA = this_spi->slave_tx_buffer[this_spi->slave_tx_idx];
20001dc8:	6881      	ldr	r1, [r0, #8]
20001dca:	5ccb      	ldrb	r3, [r1, r3]
20001dcc:	6153      	str	r3, [r2, #20]
        ++this_spi->slave_tx_idx;
20001dce:	6903      	ldr	r3, [r0, #16]
20001dd0:	f103 0301 	add.w	r3, r3, #1
20001dd4:	6103      	str	r3, [r0, #16]
    mss_spi_instance_t * this_spi
)
{
    uint32_t guard = 0u;

    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20001dd6:	6802      	ldr	r2, [r0, #0]
20001dd8:	6891      	ldr	r1, [r2, #8]
20001dda:	f411 7f80 	tst.w	r1, #256	; 0x100
20001dde:	d103      	bne.n	20001de8 <fill_slave_tx_fifo+0x34>
          (this_spi->slave_tx_idx < this_spi->slave_tx_size))
20001de0:	68c1      	ldr	r1, [r0, #12]
20001de2:	4299      	cmp	r1, r3
20001de4:	d8f0      	bhi.n	20001dc8 <fill_slave_tx_fifo+0x14>
20001de6:	e003      	b.n	20001df0 <fill_slave_tx_fifo+0x3c>
        /* Sending from primary slave transmit buffer */
        this_spi->hw_reg->TX_DATA = this_spi->slave_tx_buffer[this_spi->slave_tx_idx];
        ++this_spi->slave_tx_idx;
    }

    if(this_spi->slave_tx_idx >= this_spi->slave_tx_size)
20001de8:	6902      	ldr	r2, [r0, #16]
20001dea:	68c3      	ldr	r3, [r0, #12]
20001dec:	429a      	cmp	r2, r3
20001dee:	d317      	bcc.n	20001e20 <fill_slave_tx_fifo+0x6c>
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20001df0:	6802      	ldr	r2, [r0, #0]
20001df2:	6893      	ldr	r3, [r2, #8]
20001df4:	f413 7f80 	tst.w	r3, #256	; 0x100
20001df8:	d112      	bne.n	20001e20 <fill_slave_tx_fifo+0x6c>
              (this_spi->resp_buff_tx_idx < this_spi->resp_buff_size))
20001dfa:	69c3      	ldr	r3, [r0, #28]
20001dfc:	6981      	ldr	r1, [r0, #24]
20001dfe:	428b      	cmp	r3, r1
20001e00:	d20e      	bcs.n	20001e20 <fill_slave_tx_fifo+0x6c>
        {
            /* Sending from command response buffer */
            this_spi->hw_reg->TX_DATA = this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx];
20001e02:	6941      	ldr	r1, [r0, #20]
20001e04:	5ccb      	ldrb	r3, [r1, r3]
20001e06:	6153      	str	r3, [r2, #20]
            ++this_spi->resp_buff_tx_idx;
20001e08:	69c3      	ldr	r3, [r0, #28]
20001e0a:	f103 0301 	add.w	r3, r3, #1
20001e0e:	61c3      	str	r3, [r0, #28]
        ++this_spi->slave_tx_idx;
    }

    if(this_spi->slave_tx_idx >= this_spi->slave_tx_size)
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20001e10:	6802      	ldr	r2, [r0, #0]
20001e12:	6891      	ldr	r1, [r2, #8]
20001e14:	f411 7f80 	tst.w	r1, #256	; 0x100
20001e18:	d102      	bne.n	20001e20 <fill_slave_tx_fifo+0x6c>
              (this_spi->resp_buff_tx_idx < this_spi->resp_buff_size))
20001e1a:	6981      	ldr	r1, [r0, #24]
20001e1c:	4299      	cmp	r1, r3
20001e1e:	d8f0      	bhi.n	20001e02 <fill_slave_tx_fifo+0x4e>
            this_spi->hw_reg->TX_DATA = this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx];
            ++this_spi->resp_buff_tx_idx;
        }
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
20001e20:	6a43      	ldr	r3, [r0, #36]	; 0x24
20001e22:	b1cb      	cbz	r3, 20001e58 <fill_slave_tx_fifo+0xa4>
20001e24:	6902      	ldr	r2, [r0, #16]
20001e26:	68c3      	ldr	r3, [r0, #12]
20001e28:	429a      	cmp	r2, r3
20001e2a:	d315      	bcc.n	20001e58 <fill_slave_tx_fifo+0xa4>
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
20001e2c:	69c2      	ldr	r2, [r0, #28]
20001e2e:	6983      	ldr	r3, [r0, #24]
20001e30:	429a      	cmp	r2, r3
20001e32:	d311      	bcc.n	20001e58 <fill_slave_tx_fifo+0xa4>
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20001e34:	6803      	ldr	r3, [r0, #0]
20001e36:	689a      	ldr	r2, [r3, #8]
20001e38:	f412 7f80 	tst.w	r2, #256	; 0x100
20001e3c:	d10c      	bne.n	20001e58 <fill_slave_tx_fifo+0xa4>
20001e3e:	f04f 0200 	mov.w	r2, #0
              (guard < BIG_FIFO_SIZE))
        {
            /* Nothing left so pad with 0s for consistency */
            this_spi->hw_reg->TX_DATA = 0x00u;
20001e42:	4614      	mov	r4, r2
20001e44:	615c      	str	r4, [r3, #20]
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20001e46:	6803      	ldr	r3, [r0, #0]
20001e48:	6899      	ldr	r1, [r3, #8]
20001e4a:	f411 7f80 	tst.w	r1, #256	; 0x100
20001e4e:	d103      	bne.n	20001e58 <fill_slave_tx_fifo+0xa4>
             * We use the guard count to cover the unlikely event that we are
             * never seeing the TX FIFO full because the data is being pulled
             * out as fast as we can stuff it in. In this event we never spend
             * more than a full FIFOs worth of time spinning here.
             */
            guard++;
20001e50:	f102 0201 	add.w	r2, r2, #1
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20001e54:	2a20      	cmp	r2, #32
20001e56:	d1f5      	bne.n	20001e44 <fill_slave_tx_fifo+0x90>
             */
            guard++;
        }
    }

}
20001e58:	bc10      	pop	{r4}
20001e5a:	4770      	bx	lr

20001e5c <read_slave_rx_fifo>:
 */
static void read_slave_rx_fifo
(
    mss_spi_instance_t * this_spi
)
{
20001e5c:	b510      	push	{r4, lr}
20001e5e:	b082      	sub	sp, #8
20001e60:	4604      	mov	r4, r0
    volatile uint32_t rx_frame;
    
    if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
20001e62:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
20001e66:	2b02      	cmp	r3, #2
20001e68:	d10c      	bne.n	20001e84 <read_slave_rx_fifo+0x28>
20001e6a:	e005      	b.n	20001e78 <read_slave_rx_fifo+0x1c>
    {
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
        {
            /* Single frame handling mode. */
            rx_frame = this_spi->hw_reg->RX_DATA;
20001e6c:	6913      	ldr	r3, [r2, #16]
20001e6e:	9301      	str	r3, [sp, #4]
            if(0u != this_spi->frame_rx_handler)
20001e70:	6f63      	ldr	r3, [r4, #116]	; 0x74
20001e72:	b113      	cbz	r3, 20001e7a <read_slave_rx_fifo+0x1e>
            {
                this_spi->frame_rx_handler( rx_frame );
20001e74:	9801      	ldr	r0, [sp, #4]
20001e76:	4798      	blx	r3
{
    volatile uint32_t rx_frame;
    
    if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
    {
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
20001e78:	6822      	ldr	r2, [r4, #0]
20001e7a:	6893      	ldr	r3, [r2, #8]
20001e7c:	f013 0f40 	tst.w	r3, #64	; 0x40
20001e80:	d0f4      	beq.n	20001e6c <read_slave_rx_fifo+0x10>
20001e82:	e023      	b.n	20001ecc <read_slave_rx_fifo+0x70>
            {
                this_spi->frame_rx_handler( rx_frame );
            }
        }
    }
    else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
20001e84:	2b01      	cmp	r3, #1
        }
    }
    else
    {
        /* Should not happen... Just purge FIFO */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
20001e86:	6803      	ldr	r3, [r0, #0]
20001e88:	689a      	ldr	r2, [r3, #8]
            {
                this_spi->frame_rx_handler( rx_frame );
            }
        }
    }
    else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
20001e8a:	d003      	beq.n	20001e94 <read_slave_rx_fifo+0x38>
        }
    }
    else
    {
        /* Should not happen... Just purge FIFO */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
20001e8c:	f012 0f40 	tst.w	r2, #64	; 0x40
20001e90:	d016      	beq.n	20001ec0 <read_slave_rx_fifo+0x64>
20001e92:	e01b      	b.n	20001ecc <read_slave_rx_fifo+0x70>
        }
    }
    else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
    {
        /* Block handling mode. */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
20001e94:	f012 0f40 	tst.w	r2, #64	; 0x40
20001e98:	d118      	bne.n	20001ecc <read_slave_rx_fifo+0x70>
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
20001e9a:	691b      	ldr	r3, [r3, #16]
20001e9c:	9301      	str	r3, [sp, #4]
            if(this_spi->slave_rx_idx < this_spi->slave_rx_size)
20001e9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
20001ea0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
20001ea2:	4293      	cmp	r3, r2
            {
                this_spi->slave_rx_buffer[this_spi->slave_rx_idx] = (uint8_t)rx_frame;
20001ea4:	bf3e      	ittt	cc
20001ea6:	9901      	ldrcc	r1, [sp, #4]
20001ea8:	6aa2      	ldrcc	r2, [r4, #40]	; 0x28
20001eaa:	54d1      	strbcc	r1, [r2, r3]
            }

            ++this_spi->slave_rx_idx;
20001eac:	6b23      	ldr	r3, [r4, #48]	; 0x30
20001eae:	f103 0301 	add.w	r3, r3, #1
20001eb2:	6323      	str	r3, [r4, #48]	; 0x30
        }
    }
    else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
    {
        /* Block handling mode. */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
20001eb4:	6823      	ldr	r3, [r4, #0]
20001eb6:	689a      	ldr	r2, [r3, #8]
20001eb8:	f012 0f40 	tst.w	r2, #64	; 0x40
20001ebc:	d0ed      	beq.n	20001e9a <read_slave_rx_fifo+0x3e>
20001ebe:	e005      	b.n	20001ecc <read_slave_rx_fifo+0x70>
    else
    {
        /* Should not happen... Just purge FIFO */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
20001ec0:	691a      	ldr	r2, [r3, #16]
20001ec2:	9201      	str	r2, [sp, #4]
        }
    }
    else
    {
        /* Should not happen... Just purge FIFO */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
20001ec4:	689a      	ldr	r2, [r3, #8]
20001ec6:	f012 0f40 	tst.w	r2, #64	; 0x40
20001eca:	d0f9      	beq.n	20001ec0 <read_slave_rx_fifo+0x64>
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
        }
    }
}
20001ecc:	b002      	add	sp, #8
20001ece:	bd10      	pop	{r4, pc}

20001ed0 <mss_spi_isr>:
 */
static void mss_spi_isr
(
    mss_spi_instance_t * this_spi
)
{    
20001ed0:	b570      	push	{r4, r5, r6, lr}
20001ed2:	b082      	sub	sp, #8
20001ed4:	4604      	mov	r4, r0
    volatile uint32_t rx_frame;
    __I  uint32_t *this_mis = &this_spi->hw_reg->MIS;
20001ed6:	6805      	ldr	r5, [r0, #0]

    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20001ed8:	f244 23d4 	movw	r3, #17108	; 0x42d4
20001edc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001ee0:	4298      	cmp	r0, r3
20001ee2:	d006      	beq.n	20001ef2 <mss_spi_isr+0x22>
20001ee4:	f244 2350 	movw	r3, #16976	; 0x4250
20001ee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001eec:	4298      	cmp	r0, r3
20001eee:	d000      	beq.n	20001ef2 <mss_spi_isr+0x22>
20001ef0:	be00      	bkpt	0x0000
  
    if(0u != (*this_mis & RXDONE_IRQ_MASK))
20001ef2:	6a2b      	ldr	r3, [r5, #32]
20001ef4:	f013 0f02 	tst.w	r3, #2
20001ef8:	d038      	beq.n	20001f6c <mss_spi_isr+0x9c>
    {
        if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
20001efa:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
20001efe:	2b02      	cmp	r3, #2
20001f00:	d10c      	bne.n	20001f1c <mss_spi_isr+0x4c>
20001f02:	e005      	b.n	20001f10 <mss_spi_isr+0x40>
        {
            /* Single frame handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
20001f04:	6913      	ldr	r3, [r2, #16]
20001f06:	9301      	str	r3, [sp, #4]
                if(0u != this_spi->frame_rx_handler)
20001f08:	6f63      	ldr	r3, [r4, #116]	; 0x74
20001f0a:	b113      	cbz	r3, 20001f12 <mss_spi_isr+0x42>
                {
                    this_spi->frame_rx_handler( rx_frame );
20001f0c:	9801      	ldr	r0, [sp, #4]
20001f0e:	4798      	blx	r3
    if(0u != (*this_mis & RXDONE_IRQ_MASK))
    {
        if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
        {
            /* Single frame handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
20001f10:	6822      	ldr	r2, [r4, #0]
20001f12:	6893      	ldr	r3, [r2, #8]
20001f14:	f013 0f40 	tst.w	r3, #64	; 0x40
20001f18:	d0f4      	beq.n	20001f04 <mss_spi_isr+0x34>
20001f1a:	e023      	b.n	20001f64 <mss_spi_isr+0x94>
                {
                    this_spi->frame_rx_handler( rx_frame );
                }
            }
        }
        else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
20001f1c:	2b01      	cmp	r3, #1
            }
        }
        else
        {
            /* No slave handling in place so just purge FIFO */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
20001f1e:	68ab      	ldr	r3, [r5, #8]
                {
                    this_spi->frame_rx_handler( rx_frame );
                }
            }
        }
        else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
20001f20:	d003      	beq.n	20001f2a <mss_spi_isr+0x5a>
            }
        }
        else
        {
            /* No slave handling in place so just purge FIFO */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
20001f22:	f013 0f40 	tst.w	r3, #64	; 0x40
20001f26:	d017      	beq.n	20001f58 <mss_spi_isr+0x88>
20001f28:	e01c      	b.n	20001f64 <mss_spi_isr+0x94>
            }
        }
        else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
        {
            /* Block handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
20001f2a:	f013 0f40 	tst.w	r3, #64	; 0x40
20001f2e:	d119      	bne.n	20001f64 <mss_spi_isr+0x94>
20001f30:	462b      	mov	r3, r5
            {
                rx_frame = this_spi->hw_reg->RX_DATA;                /* Read from FIFO irrespective */
20001f32:	691b      	ldr	r3, [r3, #16]
20001f34:	9301      	str	r3, [sp, #4]
                if(this_spi->slave_rx_idx < this_spi->slave_rx_size) /* Write to array if required */
20001f36:	6b23      	ldr	r3, [r4, #48]	; 0x30
20001f38:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
20001f3a:	4293      	cmp	r3, r2
                {
                    this_spi->slave_rx_buffer[this_spi->slave_rx_idx] = (uint8_t)rx_frame;
20001f3c:	bf3e      	ittt	cc
20001f3e:	9901      	ldrcc	r1, [sp, #4]
20001f40:	6aa2      	ldrcc	r2, [r4, #40]	; 0x28
20001f42:	54d1      	strbcc	r1, [r2, r3]
                }

                ++this_spi->slave_rx_idx;            
20001f44:	6b23      	ldr	r3, [r4, #48]	; 0x30
20001f46:	f103 0301 	add.w	r3, r3, #1
20001f4a:	6323      	str	r3, [r4, #48]	; 0x30
            }
        }
        else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
        {
            /* Block handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
20001f4c:	6823      	ldr	r3, [r4, #0]
20001f4e:	689a      	ldr	r2, [r3, #8]
20001f50:	f012 0f40 	tst.w	r2, #64	; 0x40
20001f54:	d0ed      	beq.n	20001f32 <mss_spi_isr+0x62>
20001f56:	e005      	b.n	20001f64 <mss_spi_isr+0x94>
        else
        {
            /* No slave handling in place so just purge FIFO */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
20001f58:	692b      	ldr	r3, [r5, #16]
20001f5a:	9301      	str	r3, [sp, #4]
            }
        }
        else
        {
            /* No slave handling in place so just purge FIFO */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
20001f5c:	68ab      	ldr	r3, [r5, #8]
20001f5e:	f013 0f40 	tst.w	r3, #64	; 0x40
20001f62:	d0f9      	beq.n	20001f58 <mss_spi_isr+0x88>
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
            }
        }

        this_spi->hw_reg->INT_CLEAR = RXDONE_IRQ_MASK;
20001f64:	6823      	ldr	r3, [r4, #0]
20001f66:	f04f 0202 	mov.w	r2, #2
20001f6a:	60da      	str	r2, [r3, #12]
    }

   /* Handle transmit. */
    if(0u != (*this_mis & TXDONE_IRQ_MASK))
20001f6c:	6a2b      	ldr	r3, [r5, #32]
20001f6e:	f013 0f01 	tst.w	r3, #1
20001f72:	d00e      	beq.n	20001f92 <mss_spi_isr+0xc2>
    {
        if( MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode )
20001f74:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
20001f78:	2b02      	cmp	r3, #2
20001f7a:	d103      	bne.n	20001f84 <mss_spi_isr+0xb4>
        {
           /* Reload slave tx frame into Tx data register. */
            this_spi->hw_reg->TX_DATA = this_spi->slave_tx_frame;
20001f7c:	6823      	ldr	r3, [r4, #0]
20001f7e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
20001f80:	615a      	str	r2, [r3, #20]
20001f82:	e002      	b.n	20001f8a <mss_spi_isr+0xba>
        }
        else /* Must be block mode so load FIFO to the max */
        {
            fill_slave_tx_fifo(this_spi);
20001f84:	4620      	mov	r0, r4
20001f86:	f7ff ff15 	bl	20001db4 <fill_slave_tx_fifo>
        }

        this_spi->hw_reg->INT_CLEAR = TXDONE_IRQ_MASK;
20001f8a:	6823      	ldr	r3, [r4, #0]
20001f8c:	f04f 0201 	mov.w	r2, #1
20001f90:	60da      	str	r2, [r3, #12]
    }
    
    /* Handle command interrupt. */
    if(0u != (*this_mis & CMD_IRQ_MASK))
20001f92:	6a2b      	ldr	r3, [r5, #32]
20001f94:	f013 0f10 	tst.w	r3, #16
20001f98:	d016      	beq.n	20001fc8 <mss_spi_isr+0xf8>
    {
        read_slave_rx_fifo(this_spi);
20001f9a:	4620      	mov	r0, r4
20001f9c:	f7ff ff5e 	bl	20001e5c <read_slave_rx_fifo>
        
        /*
         * Call the command handler if one exists.
         */
        if(0u != this_spi->cmd_handler)
20001fa0:	6a23      	ldr	r3, [r4, #32]
20001fa2:	b12b      	cbz	r3, 20001fb0 <mss_spi_isr+0xe0>
        {
            (*this_spi->cmd_handler)(this_spi->slave_rx_buffer, this_spi->slave_rx_idx);
20001fa4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
20001fa6:	6b21      	ldr	r1, [r4, #48]	; 0x30
20001fa8:	4798      	blx	r3
            fill_slave_tx_fifo(this_spi);
20001faa:	4620      	mov	r0, r4
20001fac:	f7ff ff02 	bl	20001db4 <fill_slave_tx_fifo>
        }
        /* Set cmd_done to indicate it is now safe to 0 fill TX FIFO */
        this_spi->cmd_done = 1u;
20001fb0:	f04f 0301 	mov.w	r3, #1
20001fb4:	6263      	str	r3, [r4, #36]	; 0x24
        /* Disable command interrupt until slave select becomes de-asserted to avoid retriggering. */
        this_spi->hw_reg->CONTROL2 &= ~(uint32_t)C2_ENABLE_CMD_IRQ_MASK;
20001fb6:	6823      	ldr	r3, [r4, #0]
20001fb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
20001fba:	f022 0210 	bic.w	r2, r2, #16
20001fbe:	629a      	str	r2, [r3, #40]	; 0x28
        this_spi->hw_reg->INT_CLEAR = CMD_IRQ_MASK;
20001fc0:	6823      	ldr	r3, [r4, #0]
20001fc2:	f04f 0210 	mov.w	r2, #16
20001fc6:	60da      	str	r2, [r3, #12]
    }

    if(0u != (*this_mis & RXOVFLOW_IRQ_MASK))
20001fc8:	6a2b      	ldr	r3, [r5, #32]
20001fca:	f013 0f04 	tst.w	r3, #4
20001fce:	d00b      	beq.n	20001fe8 <mss_spi_isr+0x118>
    {
        /*
         * Receive overflow, not a lot we can do for this. Reset the receive
         *  FIFO, clear the interrupt and hope it doesn't happen again...
         */
        this_spi->hw_reg->COMMAND |= RX_FIFO_RESET_MASK;
20001fd0:	6823      	ldr	r3, [r4, #0]
20001fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20001fd4:	f042 0204 	orr.w	r2, r2, #4
20001fd8:	62da      	str	r2, [r3, #44]	; 0x2c
        recover_from_rx_overflow(this_spi);
20001fda:	4620      	mov	r0, r4
20001fdc:	f7ff fd02 	bl	200019e4 <recover_from_rx_overflow>
        this_spi->hw_reg->INT_CLEAR = RXOVFLOW_IRQ_MASK;
20001fe0:	6823      	ldr	r3, [r4, #0]
20001fe2:	f04f 0204 	mov.w	r2, #4
20001fe6:	60da      	str	r2, [r3, #12]
     * slave TX FIFO data setup (if there is one).
     * In block mode this will probably not be very successful as we will
     * be out of synch with the master but the reset on SSEND will hopefully
     * take care of that for the next transfer.
     */
    if(0u != (*this_mis & TXURUN_IRQ_MASK))
20001fe8:	6a2b      	ldr	r3, [r5, #32]
20001fea:	f013 0f08 	tst.w	r3, #8
20001fee:	d023      	beq.n	20002038 <mss_spi_isr+0x168>
    {
        this_spi->hw_reg->COMMAND |= TX_FIFO_RESET_MASK;
20001ff0:	6823      	ldr	r3, [r4, #0]
20001ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20001ff4:	f042 0208 	orr.w	r2, r2, #8
20001ff8:	62da      	str	r2, [r3, #44]	; 0x2c
        if( MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode )
20001ffa:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
20001ffe:	2b02      	cmp	r3, #2
20002000:	d10e      	bne.n	20002020 <mss_spi_isr+0x150>
        {
            this_spi->hw_reg->CONTROL = (this_spi->hw_reg->CONTROL & ~TXRXDFCOUNT_MASK)
20002002:	6822      	ldr	r2, [r4, #0]
20002004:	6811      	ldr	r1, [r2, #0]
20002006:	f240 03ff 	movw	r3, #255	; 0xff
2000200a:	f6cf 7300 	movt	r3, #65280	; 0xff00
2000200e:	ea01 0303 	and.w	r3, r1, r3
20002012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
20002016:	6013      	str	r3, [r2, #0]
                                        | ((uint32_t)1u << TXRXDFCOUNT_SHIFT);
           /* Reload slave tx frame into Tx data register. */
            this_spi->hw_reg->TX_DATA = this_spi->slave_tx_frame;
20002018:	6823      	ldr	r3, [r4, #0]
2000201a:	6fa2      	ldr	r2, [r4, #120]	; 0x78
2000201c:	615a      	str	r2, [r3, #20]
2000201e:	e007      	b.n	20002030 <mss_spi_isr+0x160>
        }
        else if( MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode )
20002020:	2b01      	cmp	r3, #1
20002022:	d105      	bne.n	20002030 <mss_spi_isr+0x160>
        {
            /* Block mode so reload FIFO to the max */
            this_spi->slave_tx_idx = 0u;
20002024:	f04f 0300 	mov.w	r3, #0
20002028:	6123      	str	r3, [r4, #16]
            fill_slave_tx_fifo(this_spi);
2000202a:	4620      	mov	r0, r4
2000202c:	f7ff fec2 	bl	20001db4 <fill_slave_tx_fifo>
        else
        {
            /* Not frame or block mode? Can't do anything here... */
        }

        this_spi->hw_reg->INT_CLEAR = TXURUN_IRQ_MASK;
20002030:	6823      	ldr	r3, [r4, #0]
20002032:	f04f 0208 	mov.w	r2, #8
20002036:	60da      	str	r2, [r3, #12]
    /*
     * Handle slave select becoming de-asserted. Only enables if
     * we are operating in block mode, in frame mode we do everything
     * in the receive and transmit interrupt handlers.
     */
    if(0u != (*this_mis & SSEND_IRQ_MASK))
20002038:	6a2b      	ldr	r3, [r5, #32]
2000203a:	f013 0f20 	tst.w	r3, #32
2000203e:	d029      	beq.n	20002094 <mss_spi_isr+0x1c4>
    {
        uint32_t rx_size;
        
        read_slave_rx_fifo(this_spi);
20002040:	4620      	mov	r0, r4
20002042:	f7ff ff0b 	bl	20001e5c <read_slave_rx_fifo>
        rx_size = this_spi->slave_rx_idx;
20002046:	6b26      	ldr	r6, [r4, #48]	; 0x30
        /*
         * Re-enable command interrupt if required and clear all the response
         * buffer state in readiness for next response. This must be done
         * before reloading the TX FIFO.
         */
        if(0u != this_spi->cmd_handler)
20002048:	6a23      	ldr	r3, [r4, #32]
2000204a:	b173      	cbz	r3, 2000206a <mss_spi_isr+0x19a>
        {
            this_spi->cmd_done = 0u;
2000204c:	f04f 0300 	mov.w	r3, #0
20002050:	6263      	str	r3, [r4, #36]	; 0x24
            this_spi->resp_tx_buffer = 0u;
20002052:	6163      	str	r3, [r4, #20]
            this_spi->resp_buff_size = 0u;
20002054:	61a3      	str	r3, [r4, #24]
            this_spi->resp_buff_tx_idx = 0u;
20002056:	61e3      	str	r3, [r4, #28]
            this_spi->hw_reg->INT_CLEAR = CMD_IRQ_MASK;
20002058:	6823      	ldr	r3, [r4, #0]
2000205a:	f04f 0210 	mov.w	r2, #16
2000205e:	60da      	str	r2, [r3, #12]
            this_spi->hw_reg->CONTROL2 |= C2_ENABLE_CMD_IRQ_MASK;
20002060:	6823      	ldr	r3, [r4, #0]
20002062:	6a9a      	ldr	r2, [r3, #40]	; 0x28
20002064:	f042 0210 	orr.w	r2, r2, #16
20002068:	629a      	str	r2, [r3, #40]	; 0x28
        /* 
         * Reset the transmit index to 0 to restart transmit at the start of the
         * transmit buffer in the next transaction. This also requires flushing
         * the Tx FIFO and refilling it with the start of Tx data buffer.
         */
        this_spi->slave_tx_idx = 0u;
2000206a:	f04f 0500 	mov.w	r5, #0
2000206e:	6125      	str	r5, [r4, #16]
        this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
20002070:	6823      	ldr	r3, [r4, #0]
20002072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002074:	f042 020c 	orr.w	r2, r2, #12
20002078:	62da      	str	r2, [r3, #44]	; 0x2c
        fill_slave_tx_fifo(this_spi);
2000207a:	4620      	mov	r0, r4
2000207c:	f7ff fe9a 	bl	20001db4 <fill_slave_tx_fifo>
        
        /* Prepare to receive next packet. */
        this_spi->slave_rx_idx = 0u;
20002080:	6325      	str	r5, [r4, #48]	; 0x30
        /*
         * Call the receive handler if one exists.
         */
        if(0u != this_spi->block_rx_handler)
20002082:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
20002084:	b113      	cbz	r3, 2000208c <mss_spi_isr+0x1bc>
        {
            (*this_spi->block_rx_handler)(this_spi->slave_rx_buffer, rx_size);
20002086:	6aa0      	ldr	r0, [r4, #40]	; 0x28
20002088:	4631      	mov	r1, r6
2000208a:	4798      	blx	r3
        }
        
        this_spi->hw_reg->INT_CLEAR = SSEND_IRQ_MASK;
2000208c:	6823      	ldr	r3, [r4, #0]
2000208e:	f04f 0220 	mov.w	r2, #32
20002092:	60da      	str	r2, [r3, #12]
    }
}
20002094:	b002      	add	sp, #8
20002096:	bd70      	pop	{r4, r5, r6, pc}

20002098 <SPI0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void SPI0_IRQHandler(void)
#else
void SPI0_IRQHandler( void )
#endif
{
20002098:	4668      	mov	r0, sp
2000209a:	f020 0107 	bic.w	r1, r0, #7
2000209e:	468d      	mov	sp, r1
200020a0:	b501      	push	{r0, lr}
    mss_spi_isr(&g_mss_spi0);
200020a2:	f244 20d4 	movw	r0, #17108	; 0x42d4
200020a6:	f2c2 0000 	movt	r0, #8192	; 0x2000
200020aa:	f7ff ff11 	bl	20001ed0 <mss_spi_isr>
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
200020ae:	f24e 1300 	movw	r3, #57600	; 0xe100
200020b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
200020b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
200020ba:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC_ClearPendingIRQ(SPI0_IRQn);
}
200020be:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
200020c2:	4685      	mov	sp, r0
200020c4:	4770      	bx	lr
200020c6:	bf00      	nop

200020c8 <SPI1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void SPI1_IRQHandler(void)
#else
void SPI1_IRQHandler(void)
#endif
{
200020c8:	4668      	mov	r0, sp
200020ca:	f020 0107 	bic.w	r1, r0, #7
200020ce:	468d      	mov	sp, r1
200020d0:	b501      	push	{r0, lr}
    mss_spi_isr(&g_mss_spi1);
200020d2:	f244 2050 	movw	r0, #16976	; 0x4250
200020d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
200020da:	f7ff fef9 	bl	20001ed0 <mss_spi_isr>
200020de:	f24e 1300 	movw	r3, #57600	; 0xe100
200020e2:	f2ce 0300 	movt	r3, #57344	; 0xe000
200020e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
200020ea:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC_ClearPendingIRQ(SPI1_IRQn);
}
200020ee:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
200020f2:	4685      	mov	sp, r0
200020f4:	4770      	bx	lr
200020f6:	bf00      	nop

200020f8 <MSS_SPI_init>:
 */
void MSS_SPI_init
(
    mss_spi_instance_t * this_spi
)
{
200020f8:	b538      	push	{r3, r4, r5, lr}
200020fa:	4604      	mov	r4, r0
    uint16_t slave;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
200020fc:	f244 23d4 	movw	r3, #17108	; 0x42d4
20002100:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002104:	4298      	cmp	r0, r3
20002106:	d006      	beq.n	20002116 <MSS_SPI_init+0x1e>
20002108:	f244 2350 	movw	r3, #16976	; 0x4250
2000210c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002110:	4298      	cmp	r0, r3
20002112:	d000      	beq.n	20002116 <MSS_SPI_init+0x1e>
20002114:	be00      	bkpt	0x0000
     * Initialize SPI driver instance data. Relies on the majority
     * of data requiring 0 for initial state so we just need to fill
     * with 0s and finish off with a small number of non zero values.
     */
    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
20002116:	88a3      	ldrh	r3, [r4, #4]
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
20002118:	b21a      	sxth	r2, r3
2000211a:	ea4f 1252 	mov.w	r2, r2, lsr #5
2000211e:	f003 031f 	and.w	r3, r3, #31
20002122:	f04f 0501 	mov.w	r5, #1
20002126:	fa05 f103 	lsl.w	r1, r5, r3
2000212a:	f24e 1300 	movw	r3, #57600	; 0xe100
2000212e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002132:	f102 0220 	add.w	r2, r2, #32
20002136:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    memset(this_spi, 0, sizeof(mss_spi_instance_t));
2000213a:	4620      	mov	r0, r4
2000213c:	f04f 0100 	mov.w	r1, #0
20002140:	f04f 0284 	mov.w	r2, #132	; 0x84
20002144:	f001 fe2e 	bl	20003da4 <memset>
    
    this_spi->cmd_done = 1u;
20002148:	6265      	str	r5, [r4, #36]	; 0x24
2000214a:	f04f 0300 	mov.w	r3, #0

    for(slave = 0u; slave < (uint16_t)MSS_SPI_MAX_NB_OF_SLAVES; ++slave)
    {
        this_spi->slaves_cfg[slave].ctrl_reg = NOT_CONFIGURED;
2000214e:	f04f 31ff 	mov.w	r1, #4294967295
20002152:	eb04 0203 	add.w	r2, r4, r3
20002156:	6351      	str	r1, [r2, #52]	; 0x34
20002158:	f103 0308 	add.w	r3, r3, #8

    memset(this_spi, 0, sizeof(mss_spi_instance_t));
    
    this_spi->cmd_done = 1u;

    for(slave = 0u; slave < (uint16_t)MSS_SPI_MAX_NB_OF_SLAVES; ++slave)
2000215c:	2b40      	cmp	r3, #64	; 0x40
2000215e:	d1f8      	bne.n	20002152 <MSS_SPI_init+0x5a>
    {
        this_spi->slaves_cfg[slave].ctrl_reg = NOT_CONFIGURED;
    }

    if(this_spi == &g_mss_spi0)
20002160:	f244 23d4 	movw	r3, #17108	; 0x42d4
20002164:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002168:	429c      	cmp	r4, r3
2000216a:	d120      	bne.n	200021ae <MSS_SPI_init+0xb6>
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI0_BASE);
2000216c:	f244 23d4 	movw	r3, #17108	; 0x42d4
20002170:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002174:	f241 0200 	movw	r2, #4096	; 0x1000
20002178:	f2c4 0200 	movt	r2, #16384	; 0x4000
2000217c:	601a      	str	r2, [r3, #0]
        this_spi->irqn = SPI0_IRQn;
2000217e:	f04f 020c 	mov.w	r2, #12
20002182:	809a      	strh	r2, [r3, #4]

        /* reset SPI0 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI0_SOFTRESET_MASK;
20002184:	f242 0300 	movw	r3, #8192	; 0x2000
20002188:	f2ce 0304 	movt	r3, #57348	; 0xe004
2000218c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2000218e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
20002192:	631a      	str	r2, [r3, #48]	; 0x30
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20002194:	f24e 1200 	movw	r2, #57600	; 0xe100
20002198:	f2ce 0200 	movt	r2, #57344	; 0xe000
2000219c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
200021a0:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
        /* Clear any previously pended SPI0 interrupt */
        NVIC_ClearPendingIRQ(SPI0_IRQn);
        /* Take SPI0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI0_SOFTRESET_MASK;
200021a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200021a6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
200021aa:	631a      	str	r2, [r3, #48]	; 0x30
200021ac:	e01b      	b.n	200021e6 <MSS_SPI_init+0xee>
    }
    else
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI1_BASE);
200021ae:	f241 0300 	movw	r3, #4096	; 0x1000
200021b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
200021b6:	6023      	str	r3, [r4, #0]
        this_spi->irqn = SPI1_IRQn;
200021b8:	f04f 030d 	mov.w	r3, #13
200021bc:	80a3      	strh	r3, [r4, #4]
        
        /* reset SPI1 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI1_SOFTRESET_MASK;
200021be:	f242 0300 	movw	r3, #8192	; 0x2000
200021c2:	f2ce 0304 	movt	r3, #57348	; 0xe004
200021c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200021c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
200021cc:	631a      	str	r2, [r3, #48]	; 0x30
200021ce:	f24e 1200 	movw	r2, #57600	; 0xe100
200021d2:	f2ce 0200 	movt	r2, #57344	; 0xe000
200021d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
200021da:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
        /* Clear any previously pended SPI1 interrupt */
        NVIC_ClearPendingIRQ(SPI1_IRQn);
        /* Take SPI1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI1_SOFTRESET_MASK;
200021de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200021e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
200021e4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* De-assert reset bit. */
    this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
200021e6:	6823      	ldr	r3, [r4, #0]
200021e8:	681a      	ldr	r2, [r3, #0]
200021ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
200021ee:	601a      	str	r2, [r3, #0]
}
200021f0:	bd38      	pop	{r3, r4, r5, pc}
200021f2:	bf00      	nop

200021f4 <MSS_I2C_wait_complete>:
mss_i2c_status_t MSS_I2C_wait_complete
(
    mss_i2c_instance_t * this_i2c,
    uint32_t timeout_ms
)
{
200021f4:	4603      	mov	r3, r0
	mss_i2c_status_t i2c_status;
    
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
200021f6:	f244 3258 	movw	r2, #17240	; 0x4358
200021fa:	f2c2 0200 	movt	r2, #8192	; 0x2000
200021fe:	4290      	cmp	r0, r2
20002200:	d006      	beq.n	20002210 <MSS_I2C_wait_complete+0x1c>
20002202:	f244 32cc 	movw	r2, #17356	; 0x43cc
20002206:	f2c2 0200 	movt	r2, #8192	; 0x2000
2000220a:	4290      	cmp	r0, r2
2000220c:	d000      	beq.n	20002210 <MSS_I2C_wait_complete+0x1c>
2000220e:	be00      	bkpt	0x0000
    
    this_i2c->master_timeout_ms = timeout_ms;
20002210:	6419      	str	r1, [r3, #64]	; 0x40

    /* Run the loop until state returns I2C_FAILED  or I2C_SUCESS*/
    do {
        i2c_status = this_i2c->master_status;
20002212:	f893 003c 	ldrb.w	r0, [r3, #60]	; 0x3c
    } while(MSS_I2C_IN_PROGRESS == i2c_status);
20002216:	2801      	cmp	r0, #1
20002218:	d0fb      	beq.n	20002212 <MSS_I2C_wait_complete+0x1e>

    return i2c_status;
}
2000221a:	4770      	bx	lr

2000221c <enable_slave_if_required>:
static void enable_slave_if_required
(
    mss_i2c_instance_t * this_i2c
)
{
    if( this_i2c->is_slave_enabled )
2000221c:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
20002220:	b11b      	cbz	r3, 2000222a <enable_slave_if_required+0xe>
    {
        this_i2c->hw_reg_bit->CTRL_AA = 1u;
20002222:	6983      	ldr	r3, [r0, #24]
20002224:	f04f 0201 	mov.w	r2, #1
20002228:	609a      	str	r2, [r3, #8]
2000222a:	4770      	bx	lr

2000222c <mss_i2c_isr>:
 */
static void mss_i2c_isr
(
    mss_i2c_instance_t * this_i2c
)
{
2000222c:	b530      	push	{r4, r5, lr}
2000222e:	b083      	sub	sp, #12
20002230:	4604      	mov	r4, r0
    volatile uint8_t status;
    uint8_t data;
    uint8_t hold_bus;
    uint8_t clear_irq = 1u;
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
20002232:	f244 3358 	movw	r3, #17240	; 0x4358
20002236:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000223a:	4298      	cmp	r0, r3
2000223c:	d006      	beq.n	2000224c <mss_i2c_isr+0x20>
2000223e:	f244 33cc 	movw	r3, #17356	; 0x43cc
20002242:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002246:	4298      	cmp	r0, r3
20002248:	d000      	beq.n	2000224c <mss_i2c_isr+0x20>
2000224a:	be00      	bkpt	0x0000

    status = this_i2c->hw_reg->STATUS;
2000224c:	6962      	ldr	r2, [r4, #20]
2000224e:	7913      	ldrb	r3, [r2, #4]
20002250:	f88d 3007 	strb.w	r3, [sp, #7]

    switch( status )
20002254:	f89d 3007 	ldrb.w	r3, [sp, #7]
20002258:	f1a3 0308 	sub.w	r3, r3, #8
2000225c:	2bd0      	cmp	r3, #208	; 0xd0
2000225e:	f200 828e 	bhi.w	2000277e <mss_i2c_isr+0x552>
20002262:	e8df f013 	tbh	[pc, r3, lsl #1]
20002266:	00d1      	.short	0x00d1
20002268:	028c028c 	.word	0x028c028c
2000226c:	028c028c 	.word	0x028c028c
20002270:	028c028c 	.word	0x028c028c
20002274:	00d1028c 	.word	0x00d1028c
20002278:	028c028c 	.word	0x028c028c
2000227c:	028c028c 	.word	0x028c028c
20002280:	028c028c 	.word	0x028c028c
20002284:	0106028c 	.word	0x0106028c
20002288:	028c028c 	.word	0x028c028c
2000228c:	028c028c 	.word	0x028c028c
20002290:	028c028c 	.word	0x028c028c
20002294:	00f7028c 	.word	0x00f7028c
20002298:	028c028c 	.word	0x028c028c
2000229c:	028c028c 	.word	0x028c028c
200022a0:	028c028c 	.word	0x028c028c
200022a4:	0106028c 	.word	0x0106028c
200022a8:	028c028c 	.word	0x028c028c
200022ac:	028c028c 	.word	0x028c028c
200022b0:	028c028c 	.word	0x028c028c
200022b4:	0144028c 	.word	0x0144028c
200022b8:	028c028c 	.word	0x028c028c
200022bc:	028c028c 	.word	0x028c028c
200022c0:	028c028c 	.word	0x028c028c
200022c4:	00f2028c 	.word	0x00f2028c
200022c8:	028c028c 	.word	0x028c028c
200022cc:	028c028c 	.word	0x028c028c
200022d0:	028c028c 	.word	0x028c028c
200022d4:	0153028c 	.word	0x0153028c
200022d8:	028c028c 	.word	0x028c028c
200022dc:	028c028c 	.word	0x028c028c
200022e0:	028c028c 	.word	0x028c028c
200022e4:	016e028c 	.word	0x016e028c
200022e8:	028c028c 	.word	0x028c028c
200022ec:	028c028c 	.word	0x028c028c
200022f0:	028c028c 	.word	0x028c028c
200022f4:	017d028c 	.word	0x017d028c
200022f8:	028c028c 	.word	0x028c028c
200022fc:	028c028c 	.word	0x028c028c
20002300:	028c028c 	.word	0x028c028c
20002304:	018f028c 	.word	0x018f028c
20002308:	028c028c 	.word	0x028c028c
2000230c:	028c028c 	.word	0x028c028c
20002310:	028c028c 	.word	0x028c028c
20002314:	01d0028c 	.word	0x01d0028c
20002318:	028c028c 	.word	0x028c028c
2000231c:	028c028c 	.word	0x028c028c
20002320:	028c028c 	.word	0x028c028c
20002324:	01cc028c 	.word	0x01cc028c
20002328:	028c028c 	.word	0x028c028c
2000232c:	028c028c 	.word	0x028c028c
20002330:	028c028c 	.word	0x028c028c
20002334:	01d0028c 	.word	0x01d0028c
20002338:	028c028c 	.word	0x028c028c
2000233c:	028c028c 	.word	0x028c028c
20002340:	028c028c 	.word	0x028c028c
20002344:	01cc028c 	.word	0x01cc028c
20002348:	028c028c 	.word	0x028c028c
2000234c:	028c028c 	.word	0x028c028c
20002350:	028c028c 	.word	0x028c028c
20002354:	01e6028c 	.word	0x01e6028c
20002358:	028c028c 	.word	0x028c028c
2000235c:	028c028c 	.word	0x028c028c
20002360:	028c028c 	.word	0x028c028c
20002364:	01bb028c 	.word	0x01bb028c
20002368:	028c028c 	.word	0x028c028c
2000236c:	028c028c 	.word	0x028c028c
20002370:	028c028c 	.word	0x028c028c
20002374:	01e6028c 	.word	0x01e6028c
20002378:	028c028c 	.word	0x028c028c
2000237c:	028c028c 	.word	0x028c028c
20002380:	028c028c 	.word	0x028c028c
20002384:	01bb028c 	.word	0x01bb028c
20002388:	028c028c 	.word	0x028c028c
2000238c:	028c028c 	.word	0x028c028c
20002390:	028c028c 	.word	0x028c028c
20002394:	01ff028c 	.word	0x01ff028c
20002398:	028c028c 	.word	0x028c028c
2000239c:	028c028c 	.word	0x028c028c
200023a0:	028c028c 	.word	0x028c028c
200023a4:	0248028c 	.word	0x0248028c
200023a8:	028c028c 	.word	0x028c028c
200023ac:	028c028c 	.word	0x028c028c
200023b0:	028c028c 	.word	0x028c028c
200023b4:	0248028c 	.word	0x0248028c
200023b8:	028c028c 	.word	0x028c028c
200023bc:	028c028c 	.word	0x028c028c
200023c0:	028c028c 	.word	0x028c028c
200023c4:	0248028c 	.word	0x0248028c
200023c8:	028c028c 	.word	0x028c028c
200023cc:	028c028c 	.word	0x028c028c
200023d0:	028c028c 	.word	0x028c028c
200023d4:	027a028c 	.word	0x027a028c
200023d8:	028c028c 	.word	0x028c028c
200023dc:	028c028c 	.word	0x028c028c
200023e0:	028c028c 	.word	0x028c028c
200023e4:	027a028c 	.word	0x027a028c
200023e8:	028c028c 	.word	0x028c028c
200023ec:	028c028c 	.word	0x028c028c
200023f0:	028c028c 	.word	0x028c028c
200023f4:	028c028c 	.word	0x028c028c
200023f8:	028c028c 	.word	0x028c028c
200023fc:	028c028c 	.word	0x028c028c
20002400:	028c028c 	.word	0x028c028c
20002404:	0239028c 	.word	0x0239028c
    {
        /************** MASTER TRANSMITTER / RECEIVER *******************/
      
        case ST_START: /* start has been xmt'd */
        case ST_RESTART: /* repeated start has been xmt'd */
            this_i2c->hw_reg_bit->CTRL_STA = 0u;
20002408:	69a3      	ldr	r3, [r4, #24]
2000240a:	f04f 0200 	mov.w	r2, #0
2000240e:	615a      	str	r2, [r3, #20]
            this_i2c->hw_reg->DATA = (uint8_t)this_i2c->target_addr;
20002410:	6963      	ldr	r3, [r4, #20]
20002412:	7922      	ldrb	r2, [r4, #4]
20002414:	721a      	strb	r2, [r3, #8]
            this_i2c->hw_reg_bit->DATA_DIR = this_i2c->dir;
20002416:	69a3      	ldr	r3, [r4, #24]
20002418:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
2000241a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
            if ( this_i2c->dir == WRITE_DIR )
2000241e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
20002420:	b90b      	cbnz	r3, 20002426 <mss_i2c_isr+0x1fa>
            {
                this_i2c->master_tx_idx = 0u;
20002422:	62a3      	str	r3, [r4, #40]	; 0x28
20002424:	e003      	b.n	2000242e <mss_i2c_isr+0x202>
            }
            else if ( this_i2c->dir == READ_DIR)
20002426:	2b01      	cmp	r3, #1
            {
                this_i2c->master_rx_idx = 0u;
20002428:	bf04      	itt	eq
2000242a:	2300      	moveq	r3, #0
2000242c:	63a3      	streq	r3, [r4, #56]	; 0x38
            /*
             * Clear the pending transaction. This condition will be true if the slave 
             * has acquired the bus to carry out pending master transaction which 
             * it had received during its slave transmission or reception mode. 
             */
            if(this_i2c->is_transaction_pending)
2000242e:	f894 3071 	ldrb.w	r3, [r4, #113]	; 0x71
20002432:	b11b      	cbz	r3, 2000243c <mss_i2c_isr+0x210>
            {
                this_i2c->is_transaction_pending = 0u;
20002434:	f04f 0300 	mov.w	r3, #0
20002438:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71

            /*
             * Make sure to update proper transaction after master START
             * or RESTART
             */
            if(this_i2c->transaction != this_i2c->pending_transaction)
2000243c:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
20002440:	7a22      	ldrb	r2, [r4, #8]
20002442:	429a      	cmp	r2, r3
            {
                this_i2c->transaction = this_i2c->pending_transaction;
20002444:	bf18      	it	ne
20002446:	7223      	strbne	r3, [r4, #8]
20002448:	e1af      	b.n	200027aa <mss_i2c_isr+0x57e>
            }
            break;
            
        case ST_LOST_ARB:
            /* Set start bit.  Let's keep trying!  Don't give up! */
            this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
2000244a:	69a3      	ldr	r3, [r4, #24]
2000244c:	f04f 0201 	mov.w	r2, #1
20002450:	615a      	str	r2, [r3, #20]
            break;
20002452:	e1aa      	b.n	200027aa <mss_i2c_isr+0x57e>
            
        /******************* MASTER TRANSMITTER *************************/
        case ST_SLAW_NACK:
            /* SLA+W has been transmitted; not ACK has been received - let's stop. */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
20002454:	69a3      	ldr	r3, [r4, #24]
20002456:	f04f 0201 	mov.w	r2, #1
2000245a:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
2000245c:	f04f 0302 	mov.w	r3, #2
20002460:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
            this_i2c->transaction = NO_TRANSACTION;
20002464:	f04f 0300 	mov.w	r3, #0
20002468:	7223      	strb	r3, [r4, #8]
            enable_slave_if_required(this_i2c);
2000246a:	4620      	mov	r0, r4
2000246c:	f7ff fed6 	bl	2000221c <enable_slave_if_required>
            break;
20002470:	e19b      	b.n	200027aa <mss_i2c_isr+0x57e>
            
        case ST_SLAW_ACK:
        case ST_TX_DATA_ACK:
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
20002472:	6aa3      	ldr	r3, [r4, #40]	; 0x28
20002474:	6a61      	ldr	r1, [r4, #36]	; 0x24
20002476:	428b      	cmp	r3, r1
20002478:	d206      	bcs.n	20002488 <mss_i2c_isr+0x25c>
            {    
                this_i2c->hw_reg->DATA = this_i2c->master_tx_buffer[this_i2c->master_tx_idx++];
2000247a:	6a21      	ldr	r1, [r4, #32]
2000247c:	5cc9      	ldrb	r1, [r1, r3]
2000247e:	7211      	strb	r1, [r2, #8]
20002480:	f103 0301 	add.w	r3, r3, #1
20002484:	62a3      	str	r3, [r4, #40]	; 0x28
20002486:	e190      	b.n	200027aa <mss_i2c_isr+0x57e>
            }
            else if ( this_i2c->transaction == MASTER_RANDOM_READ_TRANSACTION )
20002488:	7a23      	ldrb	r3, [r4, #8]
2000248a:	2b03      	cmp	r3, #3
2000248c:	d105      	bne.n	2000249a <mss_i2c_isr+0x26e>
            {
                /* We are finished sending the address offset part of a random read transaction.
                 * It is is time to send a restart in order to change direction. */
                 this_i2c->dir = READ_DIR;
2000248e:	f04f 0301 	mov.w	r3, #1
20002492:	62e3      	str	r3, [r4, #44]	; 0x2c
                 this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
20002494:	69a2      	ldr	r2, [r4, #24]
20002496:	6153      	str	r3, [r2, #20]
20002498:	e187      	b.n	200027aa <mss_i2c_isr+0x57e>
            {
                /*
                 * Set the transaction back to NO_TRANSACTION to allow user to do further
                 * transaction
                 */
                this_i2c->transaction = NO_TRANSACTION;
2000249a:	f04f 0300 	mov.w	r3, #0
2000249e:	7223      	strb	r3, [r4, #8]
                hold_bus = this_i2c->options & MSS_I2C_HOLD_BUS;
200024a0:	7c23      	ldrb	r3, [r4, #16]
200024a2:	f003 0301 	and.w	r3, r3, #1

                /* Store the information of current I2C bus status in the bus_status*/
                this_i2c->bus_status  = hold_bus;
200024a6:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
                if ( hold_bus == 0u )
200024aa:	b93b      	cbnz	r3, 200024bc <mss_i2c_isr+0x290>
                { 
                    this_i2c->hw_reg_bit->CTRL_STO = 0x01u; /*xmt stop condition */
200024ac:	69a3      	ldr	r3, [r4, #24]
200024ae:	f04f 0501 	mov.w	r5, #1
200024b2:	611d      	str	r5, [r3, #16]
                    enable_slave_if_required(this_i2c);
200024b4:	4620      	mov	r0, r4
200024b6:	f7ff feb1 	bl	2000221c <enable_slave_if_required>
200024ba:	e013      	b.n	200024e4 <mss_i2c_isr+0x2b8>
                }
                else
                {
                    NVIC_DisableIRQ( this_i2c->irqn );
200024bc:	8a63      	ldrh	r3, [r4, #18]
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
200024be:	b21a      	sxth	r2, r3
200024c0:	ea4f 1252 	mov.w	r2, r2, lsr #5
200024c4:	f003 031f 	and.w	r3, r3, #31
200024c8:	f04f 0101 	mov.w	r1, #1
200024cc:	fa01 f103 	lsl.w	r1, r1, r3
200024d0:	f24e 1300 	movw	r3, #57600	; 0xe100
200024d4:	f2ce 0300 	movt	r3, #57344	; 0xe000
200024d8:	f102 0220 	add.w	r2, r2, #32
200024dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
200024e0:	f04f 0500 	mov.w	r5, #0
                    clear_irq = 0u;
                }
                this_i2c->master_status = MSS_I2C_SUCCESS;
200024e4:	f04f 0300 	mov.w	r3, #0
200024e8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
200024ec:	e15c      	b.n	200027a8 <mss_i2c_isr+0x57c>
            /* data byte SENT, ACK to be received
             * In fact, this means we've received a NACK (This may not be 
             * obvious, but if we've rec'd an ACK then we would be in state 
             * 0x28!) hence, let's send a stop bit
             */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
200024ee:	69a3      	ldr	r3, [r4, #24]
200024f0:	f04f 0201 	mov.w	r2, #1
200024f4:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
200024f6:	f04f 0302 	mov.w	r3, #2
200024fa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
200024fe:	f04f 0300 	mov.w	r3, #0
20002502:	7223      	strb	r3, [r4, #8]
            enable_slave_if_required(this_i2c);
20002504:	4620      	mov	r0, r4
20002506:	f7ff fe89 	bl	2000221c <enable_slave_if_required>

            break;
2000250a:	e14e      	b.n	200027aa <mss_i2c_isr+0x57e>
      /* STATUS codes 08H, 10H, 38H are all covered in MTX mode */
        case ST_SLAR_ACK: /* SLA+R tx'ed. */
            /* Let's make sure we ACK the first data byte received (set AA bit in CTRL) unless
             * the next byte is the last byte of the read transaction.
             */
            if(this_i2c->master_rx_size > 1u)
2000250c:	6b63      	ldr	r3, [r4, #52]	; 0x34
2000250e:	2b01      	cmp	r3, #1
20002510:	d904      	bls.n	2000251c <mss_i2c_isr+0x2f0>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20002512:	69a3      	ldr	r3, [r4, #24]
20002514:	f04f 0201 	mov.w	r2, #1
20002518:	609a      	str	r2, [r3, #8]
2000251a:	e146      	b.n	200027aa <mss_i2c_isr+0x57e>
            }
            else if(1u == this_i2c->master_rx_size)
2000251c:	2b01      	cmp	r3, #1
2000251e:	d104      	bne.n	2000252a <mss_i2c_isr+0x2fe>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
20002520:	69a3      	ldr	r3, [r4, #24]
20002522:	f04f 0200 	mov.w	r2, #0
20002526:	609a      	str	r2, [r3, #8]
20002528:	e13f      	b.n	200027aa <mss_i2c_isr+0x57e>
            }
            else /* this_i2c->master_rx_size == 0u */
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
2000252a:	69a2      	ldr	r2, [r4, #24]
2000252c:	f04f 0301 	mov.w	r3, #1
20002530:	6093      	str	r3, [r2, #8]
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
20002532:	69a2      	ldr	r2, [r4, #24]
20002534:	6113      	str	r3, [r2, #16]
                this_i2c->master_status = MSS_I2C_SUCCESS;
20002536:	f04f 0300 	mov.w	r3, #0
2000253a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
                this_i2c->transaction = NO_TRANSACTION;
2000253e:	7223      	strb	r3, [r4, #8]
20002540:	e133      	b.n	200027aa <mss_i2c_isr+0x57e>
            }
            break;
            
        case ST_SLAR_NACK: /* SLA+R tx'ed; let's release the bus (send a stop condition) */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
20002542:	69a3      	ldr	r3, [r4, #24]
20002544:	f04f 0201 	mov.w	r2, #1
20002548:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
2000254a:	f04f 0302 	mov.w	r3, #2
2000254e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20002552:	f04f 0300 	mov.w	r3, #0
20002556:	7223      	strb	r3, [r4, #8]
            enable_slave_if_required(this_i2c);
20002558:	4620      	mov	r0, r4
2000255a:	f7ff fe5f 	bl	2000221c <enable_slave_if_required>
            break;
2000255e:	e124      	b.n	200027aa <mss_i2c_isr+0x57e>
          
        case ST_RX_DATA_ACK: /* Data byte received, ACK returned */
            /* First, get the data */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx++] = this_i2c->hw_reg->DATA;
20002560:	6ba3      	ldr	r3, [r4, #56]	; 0x38
20002562:	7a11      	ldrb	r1, [r2, #8]
20002564:	6b22      	ldr	r2, [r4, #48]	; 0x30
20002566:	54d1      	strb	r1, [r2, r3]
20002568:	f103 0301 	add.w	r3, r3, #1
2000256c:	63a3      	str	r3, [r4, #56]	; 0x38

            if( this_i2c->master_rx_idx >= (this_i2c->master_rx_size - 1u))
2000256e:	6b62      	ldr	r2, [r4, #52]	; 0x34
20002570:	f102 32ff 	add.w	r2, r2, #4294967295
20002574:	4293      	cmp	r3, r2
20002576:	f0c0 8118 	bcc.w	200027aa <mss_i2c_isr+0x57e>
            {
                /* If we're at the second last byte, let's set AA to 0 so
                 * we return a NACK at the last byte. */
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
2000257a:	69a3      	ldr	r3, [r4, #24]
2000257c:	f04f 0200 	mov.w	r2, #0
20002580:	609a      	str	r2, [r3, #8]
20002582:	e112      	b.n	200027aa <mss_i2c_isr+0x57e>
            }
            break;
            
        case ST_RX_DATA_NACK: /* Data byte received, NACK returned */
            /* Get the data, then send a stop condition */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx] = this_i2c->hw_reg->DATA;
20002584:	7a11      	ldrb	r1, [r2, #8]
20002586:	6b22      	ldr	r2, [r4, #48]	; 0x30
20002588:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2000258a:	54d1      	strb	r1, [r2, r3]
          
            hold_bus = this_i2c->options &  MSS_I2C_HOLD_BUS; 
2000258c:	7c23      	ldrb	r3, [r4, #16]
2000258e:	f003 0301 	and.w	r3, r3, #1

            /* Store the information of current I2C bus status in the bus_status*/
            this_i2c->bus_status  = hold_bus;
20002592:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
            if ( hold_bus == 0u )
20002596:	b93b      	cbnz	r3, 200025a8 <mss_i2c_isr+0x37c>
            { 
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;  /*xmt stop condition */
20002598:	69a3      	ldr	r3, [r4, #24]
2000259a:	f04f 0501 	mov.w	r5, #1
2000259e:	611d      	str	r5, [r3, #16]

                /* Bus is released, now we can start listening to bus, if it is slave */
                   enable_slave_if_required(this_i2c);
200025a0:	4620      	mov	r0, r4
200025a2:	f7ff fe3b 	bl	2000221c <enable_slave_if_required>
200025a6:	e013      	b.n	200025d0 <mss_i2c_isr+0x3a4>
            }
            else
            {
                NVIC_DisableIRQ( this_i2c->irqn );
200025a8:	8a63      	ldrh	r3, [r4, #18]
200025aa:	b21a      	sxth	r2, r3
200025ac:	ea4f 1252 	mov.w	r2, r2, lsr #5
200025b0:	f003 031f 	and.w	r3, r3, #31
200025b4:	f04f 0101 	mov.w	r1, #1
200025b8:	fa01 f103 	lsl.w	r1, r1, r3
200025bc:	f24e 1300 	movw	r3, #57600	; 0xe100
200025c0:	f2ce 0300 	movt	r3, #57344	; 0xe000
200025c4:	f102 0220 	add.w	r2, r2, #32
200025c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
200025cc:	f04f 0500 	mov.w	r5, #0

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
200025d0:	f04f 0300 	mov.w	r3, #0
200025d4:	7223      	strb	r3, [r4, #8]
            this_i2c->master_status = MSS_I2C_SUCCESS;
200025d6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
            break;
200025da:	e0e5      	b.n	200027a8 <mss_i2c_isr+0x57c>
        
        /******************** SLAVE RECEIVER **************************/
        case ST_GCA_NACK: /* NACK after, GCA addressing */
        case ST_SLA_NACK: /* Re-enable AA (assert ack) bit for future transmissions */
            this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
200025dc:	69a3      	ldr	r3, [r4, #24]
200025de:	f04f 0201 	mov.w	r2, #1
200025e2:	609a      	str	r2, [r3, #8]
            
            this_i2c->transaction = NO_TRANSACTION;
200025e4:	f04f 0300 	mov.w	r3, #0
200025e8:	7223      	strb	r3, [r4, #8]
            this_i2c->slave_status = MSS_I2C_SUCCESS;
200025ea:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
            
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
200025ee:	f894 3071 	ldrb.w	r3, [r4, #113]	; 0x71
200025f2:	2b00      	cmp	r3, #0
200025f4:	f000 80d9 	beq.w	200027aa <mss_i2c_isr+0x57e>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
200025f8:	69a3      	ldr	r3, [r4, #24]
200025fa:	615a      	str	r2, [r3, #20]
200025fc:	e0d5      	b.n	200027aa <mss_i2c_isr+0x57e>
        case ST_SLV_LA: /* Arbitr. lost (SLA rec'd) */
            /*
             *  We lost arbitration and either the GCE or our address was the
             *  one received so pend the master operation we were starting.
             */
            this_i2c->is_transaction_pending = 1u;
200025fe:	f04f 0301 	mov.w	r3, #1
20002602:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
            /* Fall through to normal ST processing as we are now in slave mode */

        case ST_GCA: /* General call address received, ACK returned */
        case ST_SLAVE_SLAW: /* SLA+W received, ACK returned */

            this_i2c->transaction = WRITE_SLAVE_TRANSACTION;
20002606:	f04f 0304 	mov.w	r3, #4
2000260a:	7223      	strb	r3, [r4, #8]
            this_i2c->slave_rx_idx = 0u;
2000260c:	f04f 0300 	mov.w	r3, #0
20002610:	65a3      	str	r3, [r4, #88]	; 0x58
            this_i2c->random_read_addr = 0u;
20002612:	60e3      	str	r3, [r4, #12]

             /* If Start Bit is set, clear it, but store that information since it is because of
              * pending transaction
              */
            if(this_i2c->hw_reg_bit->CTRL_STA)
20002614:	69a3      	ldr	r3, [r4, #24]
20002616:	695a      	ldr	r2, [r3, #20]
20002618:	b132      	cbz	r2, 20002628 <mss_i2c_isr+0x3fc>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 0u ;
2000261a:	f04f 0200 	mov.w	r2, #0
2000261e:	615a      	str	r2, [r3, #20]
                this_i2c->is_transaction_pending = 1u;
20002620:	f04f 0301 	mov.w	r3, #1
20002624:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
            }
            this_i2c->slave_status = MSS_I2C_IN_PROGRESS;
20002628:	f04f 0301 	mov.w	r3, #1
2000262c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
#ifdef MSS_I2C_INCLUDE_SLA_IN_RX_PAYLOAD
            /* Fall through to put address as first byte in payload buffer */
#else
            /* Only break from this case if the slave address must NOT be included at the
             * beginning of the received write data. */
            break;
20002630:	e0bb      	b.n	200027aa <mss_i2c_isr+0x57e>
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
20002632:	6d21      	ldr	r1, [r4, #80]	; 0x50
20002634:	b161      	cbz	r1, 20002650 <mss_i2c_isr+0x424>
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
20002636:	6da3      	ldr	r3, [r4, #88]	; 0x58
20002638:	6d60      	ldr	r0, [r4, #84]	; 0x54
2000263a:	4283      	cmp	r3, r0
2000263c:	d20d      	bcs.n	2000265a <mss_i2c_isr+0x42e>
            {
                data = this_i2c->hw_reg->DATA;
2000263e:	7a12      	ldrb	r2, [r2, #8]
                this_i2c->slave_rx_buffer[this_i2c->slave_rx_idx++] = data;
20002640:	54ca      	strb	r2, [r1, r3]
20002642:	f103 0301 	add.w	r3, r3, #1
20002646:	65a3      	str	r3, [r4, #88]	; 0x58
                {
                    /* Ignore the slave address byte in the random read address
                       computation in the case where INCLUDE_SLA_IN_RX_PAYLOAD
                       is defined. */
#endif
                    this_i2c->random_read_addr = (this_i2c->random_read_addr << 8) + data;
20002648:	68e3      	ldr	r3, [r4, #12]
2000264a:	eb02 2203 	add.w	r2, r2, r3, lsl #8
2000264e:	60e2      	str	r2, [r4, #12]
#ifdef MSS_I2C_INCLUDE_SLA_IN_RX_PAYLOAD
                }
#endif
            }
            
            if (this_i2c->slave_rx_idx >= this_i2c->slave_rx_size)
20002650:	6da2      	ldr	r2, [r4, #88]	; 0x58
20002652:	6d63      	ldr	r3, [r4, #84]	; 0x54
20002654:	429a      	cmp	r2, r3
20002656:	f0c0 80a8 	bcc.w	200027aa <mss_i2c_isr+0x57e>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;   /* send a NACK when done (next reception) */
2000265a:	69a3      	ldr	r3, [r4, #24]
2000265c:	f04f 0200 	mov.w	r2, #0
20002660:	609a      	str	r2, [r3, #8]
20002662:	e0a2      	b.n	200027aa <mss_i2c_isr+0x57e>
            /* STOP or repeated START occurred. */
            /* We cannot be sure if the transaction has actually completed as
             * this hardware state reports that either a STOP or repeated START
             * condition has occurred. We assume that this is a repeated START
             * if the transaction was a write from the master to this point.*/
            if ( this_i2c->transaction == WRITE_SLAVE_TRANSACTION )
20002664:	7a23      	ldrb	r3, [r4, #8]
20002666:	2b04      	cmp	r3, #4
20002668:	d121      	bne.n	200026ae <mss_i2c_isr+0x482>
            {
                if ( this_i2c->slave_rx_idx == this_i2c->slave_mem_offset_length )
2000266a:	6da2      	ldr	r2, [r4, #88]	; 0x58
2000266c:	6e23      	ldr	r3, [r4, #96]	; 0x60
2000266e:	429a      	cmp	r2, r3
                {
                    this_i2c->slave_tx_idx = this_i2c->random_read_addr;
20002670:	bf04      	itt	eq
20002672:	68e3      	ldreq	r3, [r4, #12]
20002674:	64e3      	streq	r3, [r4, #76]	; 0x4c
                }
                {
                    /* Call the slave's write transaction handler if it exists. */
                    if ( this_i2c->slave_write_handler != 0u )
20002676:	6e63      	ldr	r3, [r4, #100]	; 0x64
20002678:	b1a3      	cbz	r3, 200026a4 <mss_i2c_isr+0x478>
                    {
                        mss_i2c_slave_handler_ret_t h_ret;
                        h_ret = this_i2c->slave_write_handler( this_i2c, this_i2c->slave_rx_buffer, (uint16_t)this_i2c->slave_rx_idx );
2000267a:	4620      	mov	r0, r4
2000267c:	6d21      	ldr	r1, [r4, #80]	; 0x50
2000267e:	f8b4 2058 	ldrh.w	r2, [r4, #88]	; 0x58
20002682:	4798      	blx	r3
                        if ( MSS_I2C_REENABLE_SLAVE_RX == h_ret )
20002684:	b938      	cbnz	r0, 20002696 <mss_i2c_isr+0x46a>
                        {
                            /* There is a small risk that the write handler could
                             * call MSS_I2C_disable_slave() but return
                             * MSS_I2C_REENABLE_SLAVE_RX in error so we only
                             * enable ACKs if still in slave mode. */
                             enable_slave_if_required(this_i2c);
20002686:	4620      	mov	r0, r4
20002688:	f7ff fdc8 	bl	2000221c <enable_slave_if_required>
                             this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
2000268c:	69a3      	ldr	r3, [r4, #24]
2000268e:	f04f 0201 	mov.w	r2, #1
20002692:	609a      	str	r2, [r3, #8]
20002694:	e011      	b.n	200026ba <mss_i2c_isr+0x48e>
                        }
                        else
                        {
                            this_i2c->hw_reg_bit->CTRL_AA = 0u;
20002696:	69a2      	ldr	r2, [r4, #24]
20002698:	f04f 0300 	mov.w	r3, #0
2000269c:	6093      	str	r3, [r2, #8]
                            /* Clear slave mode flag as well otherwise in mixed
                             * master/slave applications, the AA bit will get set by
                             * subsequent master operations. */
                            this_i2c->is_slave_enabled = 0u;
2000269e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
200026a2:	e00a      	b.n	200026ba <mss_i2c_isr+0x48e>
                        }
                    }
                    else
                    {
                        /* Re-enable address acknowledge in case we were ready to nack the next received byte. */
                        this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
200026a4:	69a3      	ldr	r3, [r4, #24]
200026a6:	f04f 0201 	mov.w	r2, #1
200026aa:	609a      	str	r2, [r3, #8]
200026ac:	e005      	b.n	200026ba <mss_i2c_isr+0x48e>
            {
                /*
                 * Reset slave_tx_idx so that a subsequent read will result in the slave's
                 * transmit buffer being sent from the first byte.
                 */
                this_i2c->slave_tx_idx = 0u;
200026ae:	f04f 0300 	mov.w	r3, #0
200026b2:	64e3      	str	r3, [r4, #76]	; 0x4c
                /*
                 * See if we need to re-enable acknowledgement as some error conditions, such
                 * as a master prematurely ending a transfer, can see us get here with AA set
                 * to 0 which will disable slave operation if we are not careful.
                 */
                enable_slave_if_required(this_i2c);
200026b4:	4620      	mov	r0, r4
200026b6:	f7ff fdb1 	bl	2000221c <enable_slave_if_required>
            }

            /* Mark any previous master write transaction as complete. */
            this_i2c->slave_status = MSS_I2C_SUCCESS;
200026ba:	f04f 0300 	mov.w	r3, #0
200026be:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c

            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
200026c2:	f894 3071 	ldrb.w	r3, [r4, #113]	; 0x71
200026c6:	b11b      	cbz	r3, 200026d0 <mss_i2c_isr+0x4a4>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
200026c8:	69a3      	ldr	r3, [r4, #24]
200026ca:	f04f 0201 	mov.w	r2, #1
200026ce:	615a      	str	r2, [r3, #20]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
200026d0:	f04f 0300 	mov.w	r3, #0
200026d4:	7223      	strb	r3, [r4, #8]
            break;
200026d6:	e068      	b.n	200027aa <mss_i2c_isr+0x57e>
        case ST_SLV_RST: /* SMBUS ONLY: timeout state. must clear interrupt */
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction.
             */
            this_i2c->transaction = NO_TRANSACTION;
200026d8:	f04f 0300 	mov.w	r3, #0
200026dc:	7223      	strb	r3, [r4, #8]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
200026de:	64e3      	str	r3, [r4, #76]	; 0x4c
            /*
             * Clear status to I2C_FAILED only if there was an operation in progress.
             */
            if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
200026e0:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
200026e4:	2b01      	cmp	r3, #1
            {
                this_i2c->slave_status = MSS_I2C_FAILED;
200026e6:	bf04      	itt	eq
200026e8:	2302      	moveq	r3, #2
200026ea:	f884 305c 	strbeq.w	r3, [r4, #92]	; 0x5c
            }

            enable_slave_if_required(this_i2c); /* Make sure AA is set correctly */
200026ee:	4620      	mov	r0, r4
200026f0:	f7ff fd94 	bl	2000221c <enable_slave_if_required>

            break;
200026f4:	e059      	b.n	200027aa <mss_i2c_isr+0x57e>
            
        /****************** SLAVE TRANSMITTER **************************/
        case ST_SLAVE_SLAR_ACK: /* SLA+R received, ACK returned */
        case ST_SLARW_LA:   /* Arbitration lost, SLA+R received, ACK returned */
        case ST_RACK: /* Data tx'ed, ACK received */
            if ( status == ST_SLAVE_SLAR_ACK )
200026f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
200026fa:	2ba8      	cmp	r3, #168	; 0xa8
200026fc:	d113      	bne.n	20002726 <mss_i2c_isr+0x4fa>
            {
                this_i2c->transaction = READ_SLAVE_TRANSACTION;
200026fe:	f04f 0305 	mov.w	r3, #5
20002702:	7223      	strb	r3, [r4, #8]
                this_i2c->random_read_addr = 0u;
20002704:	f04f 0300 	mov.w	r3, #0
20002708:	60e3      	str	r3, [r4, #12]

                this_i2c->slave_status = MSS_I2C_IN_PROGRESS;
2000270a:	f04f 0301 	mov.w	r3, #1
2000270e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c

                /* If Start Bit is set, clear it, but store that information since it is because of
                 * pending transaction
                 */
                if(this_i2c->hw_reg_bit->CTRL_STA)
20002712:	69a3      	ldr	r3, [r4, #24]
20002714:	695a      	ldr	r2, [r3, #20]
20002716:	b132      	cbz	r2, 20002726 <mss_i2c_isr+0x4fa>
                {
                    this_i2c->hw_reg_bit->CTRL_STA = 0u ;
20002718:	f04f 0200 	mov.w	r2, #0
2000271c:	615a      	str	r2, [r3, #20]
                    this_i2c->is_transaction_pending = 1u;
2000271e:	f04f 0301 	mov.w	r3, #1
20002722:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
                }
            }
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size)
20002726:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
20002728:	6ca2      	ldr	r2, [r4, #72]	; 0x48
2000272a:	4293      	cmp	r3, r2
            {
                /* Ensure 0xFF is returned to the master when the slave specifies
                 * an empty transmit buffer. */
                this_i2c->hw_reg->DATA = 0xFFu;
2000272c:	bf23      	ittte	cs
2000272e:	6963      	ldrcs	r3, [r4, #20]
20002730:	f04f 32ff 	movcs.w	r2, #4294967295
20002734:	721a      	strbcs	r2, [r3, #8]
            }
            else
            {
                /* Load the data the data byte to be sent to the master. */
                this_i2c->hw_reg->DATA = this_i2c->slave_tx_buffer[this_i2c->slave_tx_idx++];
20002736:	6962      	ldrcc	r2, [r4, #20]
20002738:	bf3f      	itttt	cc
2000273a:	6c61      	ldrcc	r1, [r4, #68]	; 0x44
2000273c:	5cc9      	ldrbcc	r1, [r1, r3]
2000273e:	7211      	strbcc	r1, [r2, #8]
20002740:	3301      	addcc	r3, #1
20002742:	bf38      	it	cc
20002744:	64e3      	strcc	r3, [r4, #76]	; 0x4c
            }
            /* Determine if this is the last data byte to send to the master. */
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size) /* last byte? */
20002746:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
20002748:	6ca3      	ldr	r3, [r4, #72]	; 0x48
2000274a:	429a      	cmp	r2, r3
2000274c:	d32d      	bcc.n	200027aa <mss_i2c_isr+0x57e>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
2000274e:	69a2      	ldr	r2, [r4, #24]
20002750:	f04f 0300 	mov.w	r3, #0
20002754:	6093      	str	r3, [r2, #8]
                /* Next read transaction will result in slave's transmit buffer
                 * being sent from the first byte. */
                this_i2c->slave_tx_idx = 0u;
20002756:	64e3      	str	r3, [r4, #76]	; 0x4c
20002758:	e027      	b.n	200027aa <mss_i2c_isr+0x57e>
        case ST_SLAVE_RNACK:    /* Data byte has been transmitted; not-ACK has been received. */
        case ST_FINAL: /* Last Data byte tx'ed, ACK received */
            /* We assume that the transaction will be stopped by the master.
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte. */
            this_i2c->slave_tx_idx = 0u;
2000275a:	f04f 0300 	mov.w	r3, #0
2000275e:	64e3      	str	r3, [r4, #76]	; 0x4c
            this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20002760:	69a2      	ldr	r2, [r4, #24]
20002762:	f04f 0101 	mov.w	r1, #1
20002766:	6091      	str	r1, [r2, #8]

            /*  Mark previous state as complete */
            this_i2c->slave_status = MSS_I2C_SUCCESS;
20002768:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c

            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
2000276c:	f894 3071 	ldrb.w	r3, [r4, #113]	; 0x71
20002770:	b10b      	cbz	r3, 20002776 <mss_i2c_isr+0x54a>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
20002772:	69a3      	ldr	r3, [r4, #24]
20002774:	6159      	str	r1, [r3, #20]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20002776:	f04f 0300 	mov.w	r3, #0
2000277a:	7223      	strb	r3, [r4, #8]
            break;
2000277c:	e015      	b.n	200027aa <mss_i2c_isr+0x57e>
        case ST_RESET_ACTIVATED:
        case ST_BUS_ERROR: /* Bus error during MST or selected slave modes */
        default:
            /* Some undefined state has encountered. Clear Start bit to make
             * sure, next good transaction happen */
            this_i2c->hw_reg_bit->CTRL_STA = 0x00u;
2000277e:	69a2      	ldr	r2, [r4, #24]
20002780:	f04f 0300 	mov.w	r3, #0
20002784:	6153      	str	r3, [r2, #20]
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20002786:	7223      	strb	r3, [r4, #8]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
20002788:	64e3      	str	r3, [r4, #76]	; 0x4c
            /*
             * Clear statuses to I2C_FAILED only if there was an operation in progress.
             */
            if(MSS_I2C_IN_PROGRESS == this_i2c->master_status)
2000278a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
2000278e:	2b01      	cmp	r3, #1
            {
                this_i2c->master_status = MSS_I2C_FAILED;
20002790:	bf04      	itt	eq
20002792:	2302      	moveq	r3, #2
20002794:	f884 303c 	strbeq.w	r3, [r4, #60]	; 0x3c
            }

            if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
20002798:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
2000279c:	2b01      	cmp	r3, #1
            {
                this_i2c->slave_status = MSS_I2C_FAILED;
2000279e:	bf04      	itt	eq
200027a0:	2302      	moveq	r3, #2
200027a2:	f884 305c 	strbeq.w	r3, [r4, #92]	; 0x5c
200027a6:	e000      	b.n	200027aa <mss_i2c_isr+0x57e>


            break;
    }
    
    if ( clear_irq )
200027a8:	b11d      	cbz	r5, 200027b2 <mss_i2c_isr+0x586>
    {
        /* clear interrupt. */
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
200027aa:	69a3      	ldr	r3, [r4, #24]
200027ac:	f04f 0200 	mov.w	r2, #0
200027b0:	60da      	str	r2, [r3, #12]
    }
    
    /* Read the status register to ensure the last I2C registers write took place
     * in a system built around a bus making use of posted writes. */
    status = this_i2c->hw_reg->STATUS;
200027b2:	6963      	ldr	r3, [r4, #20]
200027b4:	791b      	ldrb	r3, [r3, #4]
200027b6:	f88d 3007 	strb.w	r3, [sp, #7]
}
200027ba:	b003      	add	sp, #12
200027bc:	bd30      	pop	{r4, r5, pc}
200027be:	bf00      	nop

200027c0 <I2C0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void I2C0_IRQHandler( void )
#else
void I2C0_IRQHandler( void )
#endif
{
200027c0:	4668      	mov	r0, sp
200027c2:	f020 0107 	bic.w	r1, r0, #7
200027c6:	468d      	mov	sp, r1
200027c8:	b501      	push	{r0, lr}
    mss_i2c_isr( &g_mss_i2c0 );
200027ca:	f244 3058 	movw	r0, #17240	; 0x4358
200027ce:	f2c2 0000 	movt	r0, #8192	; 0x2000
200027d2:	f7ff fd2b 	bl	2000222c <mss_i2c_isr>
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
200027d6:	f24e 1300 	movw	r3, #57600	; 0xe100
200027da:	f2ce 0300 	movt	r3, #57344	; 0xe000
200027de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
200027e2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC_ClearPendingIRQ( I2C0_IRQn );
}
200027e6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
200027ea:	4685      	mov	sp, r0
200027ec:	4770      	bx	lr
200027ee:	bf00      	nop

200027f0 <I2C1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void I2C1_IRQHandler( void )
#else
void I2C1_IRQHandler( void )
#endif
{
200027f0:	4668      	mov	r0, sp
200027f2:	f020 0107 	bic.w	r1, r0, #7
200027f6:	468d      	mov	sp, r1
200027f8:	b501      	push	{r0, lr}
    mss_i2c_isr( &g_mss_i2c1 );
200027fa:	f244 30cc 	movw	r0, #17356	; 0x43cc
200027fe:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002802:	f7ff fd13 	bl	2000222c <mss_i2c_isr>
20002806:	f24e 1300 	movw	r3, #57600	; 0xe100
2000280a:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000280e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
20002812:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC_ClearPendingIRQ( I2C1_IRQn );
}
20002816:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
2000281a:	4685      	mov	sp, r0
2000281c:	4770      	bx	lr
2000281e:	bf00      	nop

20002820 <disable_interrupts>:
}
/*------------------------------------------------------------------------------
 *
 */
static uint32_t disable_interrupts( void )
{
20002820:	b510      	push	{r4, lr}
    uint32_t primask;
    primask = __get_PRIMASK();
20002822:	f000 f9e9 	bl	20002bf8 <__get_PRIMASK>
20002826:	4604      	mov	r4, r0
    __set_PRIMASK(1u);
20002828:	f04f 0001 	mov.w	r0, #1
2000282c:	f000 f9e8 	bl	20002c00 <__set_PRIMASK>
    return primask;
}
20002830:	4620      	mov	r0, r4
20002832:	bd10      	pop	{r4, pc}

20002834 <restore_interrupts>:

/*------------------------------------------------------------------------------
 *
 */
static void restore_interrupts( uint32_t primask )
{
20002834:	b508      	push	{r3, lr}
    __set_PRIMASK( primask );
20002836:	f000 f9e3 	bl	20002c00 <__set_PRIMASK>
}
2000283a:	bd08      	pop	{r3, pc}

2000283c <MSS_I2C_read>:
    uint8_t serial_addr,
    uint8_t * read_buffer,
    uint16_t read_size,
    uint8_t options
)
{
2000283c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
20002840:	b082      	sub	sp, #8
20002842:	4604      	mov	r4, r0
20002844:	460d      	mov	r5, r1
20002846:	4616      	mov	r6, r2
20002848:	461f      	mov	r7, r3
2000284a:	f89d 8020 	ldrb.w	r8, [sp, #32]
    uint32_t primask;
    volatile uint8_t stat_ctrl;

    ASSERT((this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1));
2000284e:	f244 3358 	movw	r3, #17240	; 0x4358
20002852:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002856:	4298      	cmp	r0, r3
20002858:	d006      	beq.n	20002868 <MSS_I2C_read+0x2c>
2000285a:	f244 33cc 	movw	r3, #17356	; 0x43cc
2000285e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002862:	4298      	cmp	r0, r3
20002864:	d000      	beq.n	20002868 <MSS_I2C_read+0x2c>
20002866:	be00      	bkpt	0x0000

    primask = disable_interrupts();
20002868:	f7ff ffda 	bl	20002820 <disable_interrupts>
    
    /* Update the transaction only when there is no transaction going on I2C */
    if( this_i2c->transaction == NO_TRANSACTION)
2000286c:	7a23      	ldrb	r3, [r4, #8]
2000286e:	b913      	cbnz	r3, 20002876 <MSS_I2C_read+0x3a>
    {
      this_i2c->transaction = MASTER_READ_TRANSACTION;
20002870:	f04f 0302 	mov.w	r3, #2
20002874:	7223      	strb	r3, [r4, #8]
    }

    /* Update the Pending transaction information so that transaction can restarted */
    this_i2c->pending_transaction = MASTER_READ_TRANSACTION ;
20002876:	f04f 0302 	mov.w	r3, #2
2000287a:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
2000287e:	ea4f 0545 	mov.w	r5, r5, lsl #1
20002882:	6065      	str	r5, [r4, #4]

    this_i2c->dir = READ_DIR;
20002884:	f04f 0301 	mov.w	r3, #1
20002888:	62e3      	str	r3, [r4, #44]	; 0x2c

    this_i2c->master_rx_buffer = read_buffer;
2000288a:	6326      	str	r6, [r4, #48]	; 0x30
    this_i2c->master_rx_size = read_size;
2000288c:	6367      	str	r7, [r4, #52]	; 0x34
    this_i2c->master_rx_idx = 0u;
2000288e:	f04f 0200 	mov.w	r2, #0
20002892:	63a2      	str	r2, [r4, #56]	; 0x38
    
    /* Set I2C status in progress */
    this_i2c->master_status = MSS_I2C_IN_PROGRESS;
20002894:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    this_i2c->options = options;
20002898:	f884 8010 	strb.w	r8, [r4, #16]

    if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
2000289c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
200028a0:	2b01      	cmp	r3, #1
    {
        this_i2c->is_transaction_pending = 1u;
200028a2:	bf0f      	iteee	eq
200028a4:	f884 3071 	strbeq.w	r3, [r4, #113]	; 0x71
    }
    else
    {
        this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
200028a8:	69a3      	ldrne	r3, [r4, #24]
200028aa:	2201      	movne	r2, #1
200028ac:	615a      	strne	r2, [r3, #20]
    /*
     * Clear interrupts if required (depends on repeated starts).
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( MSS_I2C_HOLD_BUS == this_i2c->bus_status )
200028ae:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
200028b2:	2b01      	cmp	r3, #1
200028b4:	d11d      	bne.n	200028f2 <MSS_I2C_read+0xb6>
    {
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
200028b6:	69a3      	ldr	r3, [r4, #24]
200028b8:	f04f 0200 	mov.w	r2, #0
200028bc:	60da      	str	r2, [r3, #12]
        stat_ctrl = this_i2c->hw_reg->STATUS;
200028be:	6963      	ldr	r3, [r4, #20]
200028c0:	791b      	ldrb	r3, [r3, #4]
200028c2:	f88d 3007 	strb.w	r3, [sp, #7]
        stat_ctrl = stat_ctrl;  /* Avoids Lint warning */
200028c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
200028ca:	f88d 3007 	strb.w	r3, [sp, #7]
        NVIC_ClearPendingIRQ( this_i2c->irqn );
200028ce:	8a63      	ldrh	r3, [r4, #18]
200028d0:	b21a      	sxth	r2, r3
200028d2:	ea4f 1252 	mov.w	r2, r2, lsr #5
200028d6:	f003 031f 	and.w	r3, r3, #31
200028da:	f04f 0101 	mov.w	r1, #1
200028de:	fa01 f103 	lsl.w	r1, r1, r3
200028e2:	f24e 1300 	movw	r3, #57600	; 0xe100
200028e6:	f2ce 0300 	movt	r3, #57344	; 0xe000
200028ea:	f102 0260 	add.w	r2, r2, #96	; 0x60
200028ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
    
    /* Enable the interrupt. ( Re-enable) */
    NVIC_EnableIRQ( this_i2c->irqn );
200028f2:	8a63      	ldrh	r3, [r4, #18]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
200028f4:	b21a      	sxth	r2, r3
200028f6:	ea4f 1252 	mov.w	r2, r2, lsr #5
200028fa:	f003 031f 	and.w	r3, r3, #31
200028fe:	f04f 0101 	mov.w	r1, #1
20002902:	fa01 f103 	lsl.w	r1, r1, r3
20002906:	f24e 1300 	movw	r3, #57600	; 0xe100
2000290a:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000290e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    restore_interrupts( primask );
20002912:	f7ff ff8f 	bl	20002834 <restore_interrupts>
}
20002916:	b002      	add	sp, #8
20002918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

2000291c <MSS_I2C_write>:
    uint8_t serial_addr,
    const uint8_t * write_buffer,
    uint16_t write_size,
    uint8_t options
)
{
2000291c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
20002920:	b082      	sub	sp, #8
20002922:	4604      	mov	r4, r0
20002924:	460d      	mov	r5, r1
20002926:	4616      	mov	r6, r2
20002928:	461f      	mov	r7, r3
2000292a:	f89d 8020 	ldrb.w	r8, [sp, #32]
    uint32_t primask;
    volatile uint8_t stat_ctrl;

    ASSERT((this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1));
2000292e:	f244 3358 	movw	r3, #17240	; 0x4358
20002932:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002936:	4298      	cmp	r0, r3
20002938:	d006      	beq.n	20002948 <MSS_I2C_write+0x2c>
2000293a:	f244 33cc 	movw	r3, #17356	; 0x43cc
2000293e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002942:	4298      	cmp	r0, r3
20002944:	d000      	beq.n	20002948 <MSS_I2C_write+0x2c>
20002946:	be00      	bkpt	0x0000

    primask = disable_interrupts();
20002948:	f7ff ff6a 	bl	20002820 <disable_interrupts>

    /* Update the transaction only when there is no transaction going on I2C */
    if( this_i2c->transaction == NO_TRANSACTION)
2000294c:	7a23      	ldrb	r3, [r4, #8]
2000294e:	b913      	cbnz	r3, 20002956 <MSS_I2C_write+0x3a>
    {
      this_i2c->transaction = MASTER_WRITE_TRANSACTION;
20002950:	f04f 0301 	mov.w	r3, #1
20002954:	7223      	strb	r3, [r4, #8]
    }

    /* Update the Pending transaction information so that transaction can restarted */
    this_i2c->pending_transaction = MASTER_WRITE_TRANSACTION ;
20002956:	f04f 0301 	mov.w	r3, #1
2000295a:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
2000295e:	fa05 f503 	lsl.w	r5, r5, r3
20002962:	6065      	str	r5, [r4, #4]

    this_i2c->dir = WRITE_DIR;
20002964:	f04f 0200 	mov.w	r2, #0
20002968:	62e2      	str	r2, [r4, #44]	; 0x2c

    this_i2c->master_tx_buffer = write_buffer;
2000296a:	6226      	str	r6, [r4, #32]
    this_i2c->master_tx_size = write_size;
2000296c:	6267      	str	r7, [r4, #36]	; 0x24
    this_i2c->master_tx_idx = 0u;
2000296e:	62a2      	str	r2, [r4, #40]	; 0x28

    /* Set I2C status in progress */
    this_i2c->master_status = MSS_I2C_IN_PROGRESS;
20002970:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    this_i2c->options = options;
20002974:	f884 8010 	strb.w	r8, [r4, #16]

    if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
20002978:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
2000297c:	2b01      	cmp	r3, #1
    {
        this_i2c->is_transaction_pending = 1u;
2000297e:	bf0f      	iteee	eq
20002980:	f884 3071 	strbeq.w	r3, [r4, #113]	; 0x71
    }
    else
    {
        this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
20002984:	69a3      	ldrne	r3, [r4, #24]
20002986:	2201      	movne	r2, #1
20002988:	615a      	strne	r2, [r3, #20]
    /*
     * Clear interrupts if required (depends on repeated starts).
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( MSS_I2C_HOLD_BUS == this_i2c->bus_status )
2000298a:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
2000298e:	2b01      	cmp	r3, #1
20002990:	d11d      	bne.n	200029ce <MSS_I2C_write+0xb2>
    {
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
20002992:	69a3      	ldr	r3, [r4, #24]
20002994:	f04f 0200 	mov.w	r2, #0
20002998:	60da      	str	r2, [r3, #12]
        stat_ctrl = this_i2c->hw_reg->STATUS;
2000299a:	6963      	ldr	r3, [r4, #20]
2000299c:	791b      	ldrb	r3, [r3, #4]
2000299e:	f88d 3007 	strb.w	r3, [sp, #7]
        stat_ctrl = stat_ctrl;  /* Avoids Lint warning */
200029a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
200029a6:	f88d 3007 	strb.w	r3, [sp, #7]
        NVIC_ClearPendingIRQ( this_i2c->irqn );
200029aa:	8a63      	ldrh	r3, [r4, #18]
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
200029ac:	b21a      	sxth	r2, r3
200029ae:	ea4f 1252 	mov.w	r2, r2, lsr #5
200029b2:	f003 031f 	and.w	r3, r3, #31
200029b6:	f04f 0101 	mov.w	r1, #1
200029ba:	fa01 f103 	lsl.w	r1, r1, r3
200029be:	f24e 1300 	movw	r3, #57600	; 0xe100
200029c2:	f2ce 0300 	movt	r3, #57344	; 0xe000
200029c6:	f102 0260 	add.w	r2, r2, #96	; 0x60
200029ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    /* Enable the interrupt. ( Re-enable) */
    NVIC_EnableIRQ( this_i2c->irqn );
200029ce:	8a63      	ldrh	r3, [r4, #18]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
200029d0:	b21a      	sxth	r2, r3
200029d2:	ea4f 1252 	mov.w	r2, r2, lsr #5
200029d6:	f003 031f 	and.w	r3, r3, #31
200029da:	f04f 0101 	mov.w	r1, #1
200029de:	fa01 f103 	lsl.w	r1, r1, r3
200029e2:	f24e 1300 	movw	r3, #57600	; 0xe100
200029e6:	f2ce 0300 	movt	r3, #57344	; 0xe000
200029ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    restore_interrupts( primask );
200029ee:	f7ff ff21 	bl	20002834 <restore_interrupts>
}
200029f2:	b002      	add	sp, #8
200029f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

200029f8 <MSS_I2C_init>:
(
    mss_i2c_instance_t * this_i2c,
    uint8_t ser_address,
    mss_i2c_clock_divider_t ser_clock_speed
)
{
200029f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
200029fc:	4604      	mov	r4, r0
200029fe:	460e      	mov	r6, r1
20002a00:	4615      	mov	r5, r2
    uint32_t primask;
    uint_fast16_t clock_speed = (uint_fast16_t)ser_clock_speed;
    
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
20002a02:	f244 3358 	movw	r3, #17240	; 0x4358
20002a06:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002a0a:	4298      	cmp	r0, r3
20002a0c:	d007      	beq.n	20002a1e <MSS_I2C_init+0x26>
20002a0e:	f244 33cc 	movw	r3, #17356	; 0x43cc
20002a12:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002a16:	4298      	cmp	r0, r3
20002a18:	d04f      	beq.n	20002aba <MSS_I2C_init+0xc2>
20002a1a:	be00      	bkpt	0x0000
20002a1c:	e04d      	b.n	20002aba <MSS_I2C_init+0xc2>
     * Initialize all items of the this_i2c data structure to zero. This
     * initializes all state variables to their init value. It relies on
     * the fact that NO_TRANSACTION, I2C_SUCCESS and I2C_RELEASE_BUS all
     * have an actual value of zero.
     */
    primask = disable_interrupts();
20002a1e:	f7ff feff 	bl	20002820 <disable_interrupts>
20002a22:	4607      	mov	r7, r0
    memset(this_i2c, 0, sizeof(mss_i2c_instance_t));
20002a24:	f244 3858 	movw	r8, #17240	; 0x4358
20002a28:	f2c2 0800 	movt	r8, #8192	; 0x2000
20002a2c:	4640      	mov	r0, r8
20002a2e:	f04f 0100 	mov.w	r1, #0
20002a32:	f04f 0274 	mov.w	r2, #116	; 0x74
20002a36:	f001 f9b5 	bl	20003da4 <memset>
    
    if ( this_i2c == &g_mss_i2c0 )
    {
        this_i2c->irqn = I2C0_IRQn;
20002a3a:	f04f 030e 	mov.w	r3, #14
20002a3e:	f8a8 3012 	strh.w	r3, [r8, #18]
        this_i2c->hw_reg = I2C0;
20002a42:	f242 0300 	movw	r3, #8192	; 0x2000
20002a46:	f2c4 0300 	movt	r3, #16384	; 0x4000
20002a4a:	f8c8 3014 	str.w	r3, [r8, #20]
        this_i2c->hw_reg_bit = I2C0_BITBAND;
20002a4e:	f240 0300 	movw	r3, #0
20002a52:	f2c4 2304 	movt	r3, #16900	; 0x4204
20002a56:	f8c8 3018 	str.w	r3, [r8, #24]
        
        /* reset I2C0 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C0_SOFTRESET_MASK;
20002a5a:	f242 0300 	movw	r3, #8192	; 0x2000
20002a5e:	f2ce 0304 	movt	r3, #57348	; 0xe004
20002a62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20002a64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
20002a68:	631a      	str	r2, [r3, #48]	; 0x30
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20002a6a:	f24e 1200 	movw	r2, #57600	; 0xe100
20002a6e:	f2ce 0200 	movt	r2, #57344	; 0xe000
20002a72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
20002a76:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
        /* Clear any previously pended I2C0 interrupt */
        NVIC_ClearPendingIRQ( I2C0_IRQn );
        /* Take I2C0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C0_SOFTRESET_MASK;
20002a7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20002a7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
20002a80:	631a      	str	r2, [r3, #48]	; 0x30
        /* Take I2C1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C1_SOFTRESET_MASK;
    }
    
    /* Use same base address for SMBus bitband access */
    this_i2c->hw_smb_reg_bit = (I2C_SMBus_BitBand_TypeDef *)this_i2c->hw_reg_bit;
20002a82:	69a3      	ldr	r3, [r4, #24]
20002a84:	61e3      	str	r3, [r4, #28]

    /* Update Serial address of the device */
    this_i2c->ser_address = (uint_fast8_t)ser_address << 1u;
20002a86:	ea4f 0646 	mov.w	r6, r6, lsl #1
20002a8a:	6026      	str	r6, [r4, #0]

    this_i2c->hw_reg_bit->CTRL_CR2 = (uint32_t)((clock_speed >> 2u) & 0x01u);
20002a8c:	f3c5 0280 	ubfx	r2, r5, #2, #1
20002a90:	61da      	str	r2, [r3, #28]
    this_i2c->hw_reg_bit->CTRL_CR1 = (uint32_t)((clock_speed >> 1u) & 0x01u);
20002a92:	69a3      	ldr	r3, [r4, #24]
20002a94:	f3c5 0240 	ubfx	r2, r5, #1, #1
20002a98:	605a      	str	r2, [r3, #4]
    this_i2c->hw_reg_bit->CTRL_CR0 = (uint32_t)(clock_speed & 0x01u);
20002a9a:	69a3      	ldr	r3, [r4, #24]
20002a9c:	f005 0501 	and.w	r5, r5, #1
20002aa0:	601d      	str	r5, [r3, #0]
    this_i2c->hw_reg->ADDR = (uint8_t)this_i2c->ser_address;
20002aa2:	6963      	ldr	r3, [r4, #20]
20002aa4:	7822      	ldrb	r2, [r4, #0]
20002aa6:	731a      	strb	r2, [r3, #12]
    this_i2c->hw_reg_bit->CTRL_ENS1 = 0x01u; /* set enable bit */
20002aa8:	69a3      	ldr	r3, [r4, #24]
20002aaa:	f04f 0201 	mov.w	r2, #1
20002aae:	619a      	str	r2, [r3, #24]
    restore_interrupts( primask );
20002ab0:	4638      	mov	r0, r7
20002ab2:	f7ff febf 	bl	20002834 <restore_interrupts>
}
20002ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     * Initialize all items of the this_i2c data structure to zero. This
     * initializes all state variables to their init value. It relies on
     * the fact that NO_TRANSACTION, I2C_SUCCESS and I2C_RELEASE_BUS all
     * have an actual value of zero.
     */
    primask = disable_interrupts();
20002aba:	f7ff feb1 	bl	20002820 <disable_interrupts>
20002abe:	4607      	mov	r7, r0
    memset(this_i2c, 0, sizeof(mss_i2c_instance_t));
20002ac0:	4620      	mov	r0, r4
20002ac2:	f04f 0100 	mov.w	r1, #0
20002ac6:	f04f 0274 	mov.w	r2, #116	; 0x74
20002aca:	f001 f96b 	bl	20003da4 <memset>
        /* Take I2C0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C0_SOFTRESET_MASK;
    }
    else
    {
        this_i2c->irqn = I2C1_IRQn;
20002ace:	f04f 0311 	mov.w	r3, #17
20002ad2:	8263      	strh	r3, [r4, #18]
        this_i2c->hw_reg = I2C1;
20002ad4:	f242 0300 	movw	r3, #8192	; 0x2000
20002ad8:	f2c4 0301 	movt	r3, #16385	; 0x4001
20002adc:	6163      	str	r3, [r4, #20]
        this_i2c->hw_reg_bit = I2C1_BITBAND;
20002ade:	f240 0300 	movw	r3, #0
20002ae2:	f2c4 2324 	movt	r3, #16932	; 0x4224
20002ae6:	61a3      	str	r3, [r4, #24]
        
        /* reset I2C1 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C1_SOFTRESET_MASK;
20002ae8:	f242 0300 	movw	r3, #8192	; 0x2000
20002aec:	f2ce 0304 	movt	r3, #57348	; 0xe004
20002af0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20002af2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
20002af6:	631a      	str	r2, [r3, #48]	; 0x30
20002af8:	f24e 1200 	movw	r2, #57600	; 0xe100
20002afc:	f2ce 0200 	movt	r2, #57344	; 0xe000
20002b00:	f44f 3100 	mov.w	r1, #131072	; 0x20000
20002b04:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
        /* Clear any previously pended I2C1 interrupt */
        NVIC_ClearPendingIRQ( I2C1_IRQn );
        /* Take I2C1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C1_SOFTRESET_MASK;
20002b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20002b0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
20002b0e:	631a      	str	r2, [r3, #48]	; 0x30
20002b10:	e7b7      	b.n	20002a82 <MSS_I2C_init+0x8a>
20002b12:	bf00      	nop

20002b14 <MSS_GPIO_init>:
/*-------------------------------------------------------------------------*//**
 * MSS_GPIO_init
 * See "mss_gpio.h" for details of how to use this function.
 */
void MSS_GPIO_init( void )
{
20002b14:	b410      	push	{r4}
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
20002b16:	f242 0300 	movw	r3, #8192	; 0x2000
20002b1a:	f2ce 0304 	movt	r3, #57348	; 0xe004
20002b1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20002b20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
20002b24:	631a      	str	r2, [r3, #48]	; 0x30
20002b26:	f04f 0300 	mov.w	r3, #0
    /* Clear any previously pended MSS GPIO interrupt */
    for ( i = 0U; i < NB_OF_GPIO; ++i )
    {
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[i] );
20002b2a:	f643 70b8 	movw	r0, #16312	; 0x3fb8
20002b2e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20002b32:	f04f 0c01 	mov.w	ip, #1
20002b36:	f24e 1400 	movw	r4, #57600	; 0xe100
20002b3a:	f2ce 0400 	movt	r4, #57344	; 0xe000
20002b3e:	5ac2      	ldrh	r2, [r0, r3]
20002b40:	b211      	sxth	r1, r2
20002b42:	ea4f 1151 	mov.w	r1, r1, lsr #5
20002b46:	f002 021f 	and.w	r2, r2, #31
20002b4a:	fa0c f202 	lsl.w	r2, ip, r2
20002b4e:	f101 0160 	add.w	r1, r1, #96	; 0x60
20002b52:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
20002b56:	f103 0302 	add.w	r3, r3, #2
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
    /* Clear any previously pended MSS GPIO interrupt */
    for ( i = 0U; i < NB_OF_GPIO; ++i )
20002b5a:	2b40      	cmp	r3, #64	; 0x40
20002b5c:	d1ef      	bne.n	20002b3e <MSS_GPIO_init+0x2a>
    {
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[i] );
    }
    /* Take MSS GPIO hardware out of reset. */
    SYSREG->SOFT_RST_CR &= ~SYSREG_GPIO_SOFTRESET_MASK;
20002b5e:	f242 0300 	movw	r3, #8192	; 0x2000
20002b62:	f2ce 0304 	movt	r3, #57348	; 0xe004
20002b66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20002b68:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
20002b6c:	631a      	str	r2, [r3, #48]	; 0x30
}
20002b6e:	bc10      	pop	{r4}
20002b70:	4770      	bx	lr
20002b72:	bf00      	nop

20002b74 <MSS_GPIO_config>:
    uint32_t config
)
{
    uint32_t gpio_idx = (uint32_t)port_id;
    
    ASSERT( gpio_idx < NB_OF_GPIO );
20002b74:	281f      	cmp	r0, #31
20002b76:	d901      	bls.n	20002b7c <MSS_GPIO_config+0x8>
20002b78:	be00      	bkpt	0x0000
20002b7a:	4770      	bx	lr

    if ( gpio_idx < NB_OF_GPIO )
    {
        *(g_config_reg_lut[gpio_idx]) = config;
20002b7c:	f643 73f8 	movw	r3, #16376	; 0x3ff8
20002b80:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002b84:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
20002b88:	6019      	str	r1, [r3, #0]
20002b8a:	4770      	bx	lr

20002b8c <MSS_GPIO_set_output>:
    uint8_t             value
)
{
    uint32_t gpio_idx = (uint32_t)port_id;
    
    ASSERT( gpio_idx < NB_OF_GPIO );
20002b8c:	281f      	cmp	r0, #31
20002b8e:	d901      	bls.n	20002b94 <MSS_GPIO_set_output+0x8>
20002b90:	be00      	bkpt	0x0000
20002b92:	4770      	bx	lr
    
    if ( gpio_idx < NB_OF_GPIO )
    {
        GPIO_BITBAND->GPIO_OUT[gpio_idx] = (uint32_t)value;
20002b94:	f240 0300 	movw	r3, #0
20002b98:	f2c4 2326 	movt	r3, #16934	; 0x4226
20002b9c:	f500 6088 	add.w	r0, r0, #1088	; 0x440
20002ba0:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
20002ba4:	4770      	bx	lr
20002ba6:	bf00      	nop

20002ba8 <ACE_get_channel_handle>:
ace_channel_handle_t
ACE_get_channel_handle
(
    const uint8_t * p_sz_channel_name
)
{
20002ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
20002bac:	4607      	mov	r7, r0
20002bae:	f04f 0400 	mov.w	r4, #0
20002bb2:	4625      	mov	r5, r4
    uint16_t channel_idx;
    ace_channel_handle_t channel_handle = INVALID_CHANNEL_HANDLE;
    
    for ( channel_idx = 0u;  channel_idx < (uint16_t)ACE_NB_OF_INPUT_CHANNELS; ++channel_idx )
    {
        if ( g_ace_channel_desc_table[channel_idx].p_sz_channel_name != 0 )
20002bb4:	f244 165c 	movw	r6, #16732	; 0x415c
20002bb8:	f2c2 0600 	movt	r6, #8192	; 0x2000
        {
            int32_t diff;
            diff = strncmp( (const char*)p_sz_channel_name, (const char*)g_ace_channel_desc_table[channel_idx].p_sz_channel_name, (size_t)MAX_CHANNEL_NAME_LENGTH );
20002bbc:	f04f 0810 	mov.w	r8, #16
    uint16_t channel_idx;
    ace_channel_handle_t channel_handle = INVALID_CHANNEL_HANDLE;
    
    for ( channel_idx = 0u;  channel_idx < (uint16_t)ACE_NB_OF_INPUT_CHANNELS; ++channel_idx )
    {
        if ( g_ace_channel_desc_table[channel_idx].p_sz_channel_name != 0 )
20002bc0:	59a1      	ldr	r1, [r4, r6]
20002bc2:	b139      	cbz	r1, 20002bd4 <ACE_get_channel_handle+0x2c>
        {
            int32_t diff;
            diff = strncmp( (const char*)p_sz_channel_name, (const char*)g_ace_channel_desc_table[channel_idx].p_sz_channel_name, (size_t)MAX_CHANNEL_NAME_LENGTH );
20002bc4:	4638      	mov	r0, r7
20002bc6:	4642      	mov	r2, r8
20002bc8:	f001 f956 	bl	20003e78 <strncmp>
            if ( 0 == diff )
20002bcc:	b910      	cbnz	r0, 20002bd4 <ACE_get_channel_handle+0x2c>
            {
                /* channel name found. */
                channel_handle = (ace_channel_handle_t)channel_idx;
20002bce:	b2e8      	uxtb	r0, r5
                break;
20002bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
)
{
    uint16_t channel_idx;
    ace_channel_handle_t channel_handle = INVALID_CHANNEL_HANDLE;
    
    for ( channel_idx = 0u;  channel_idx < (uint16_t)ACE_NB_OF_INPUT_CHANNELS; ++channel_idx )
20002bd4:	f105 0501 	add.w	r5, r5, #1
20002bd8:	b2ad      	uxth	r5, r5
20002bda:	f104 0410 	add.w	r4, r4, #16
20002bde:	2d04      	cmp	r5, #4
20002be0:	d1ee      	bne.n	20002bc0 <ACE_get_channel_handle+0x18>
20002be2:	f04f 0004 	mov.w	r0, #4
                break;
            }
        }
    }
    return channel_handle;
}
20002be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
20002bea:	bf00      	nop

20002bec <ACE_init>:

/*-------------------------------------------------------------------------*//**
  See "mss_ace.h" for details of how to use this function.
 */
void ACE_init( void )
{
20002bec:	b508      	push	{r3, lr}
    /* Initialize driver's internal data. */
    ace_init_flags();
20002bee:	f000 f925 	bl	20002e3c <ace_init_flags>
    
    /* Initialize the data structures used by conversion functions. */
    ace_init_convert();
20002bf2:	f000 f8a3 	bl	20002d3c <ace_init_convert>
}
20002bf6:	bd08      	pop	{r3, pc}

20002bf8 <__get_PRIMASK>:
 */
uint32_t __get_PRIMASK(void)
{
  uint32_t result=0;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
20002bf8:	f3ef 8010 	mrs	r0, PRIMASK
  return(result);
}
20002bfc:	4770      	bx	lr
20002bfe:	bf00      	nop

20002c00 <__set_PRIMASK>:
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
20002c00:	f380 8810 	msr	PRIMASK, r0
}
20002c04:	4770      	bx	lr
20002c06:	bf00      	nop

20002c08 <SystemInit>:
    /*
     * Do not make use of global variables or make any asumptions regarding
     * memory content if modifying this function. The memory content has not been
     * initialised by the time this function is called by the start-up code.
     */
}
20002c08:	4770      	bx	lr
20002c0a:	bf00      	nop

20002c0c <SystemCoreClockUpdate>:

/***************************************************************************//**
 *
 */
void SystemCoreClockUpdate (void)
{
20002c0c:	b430      	push	{r4, r5}
20002c0e:	b084      	sub	sp, #16
    uint32_t PclkDiv0;
    uint32_t PclkDiv1;
    uint32_t AceDiv;
    uint32_t FabDiv;

    const uint32_t pclk_div_lut[4] = { 1uL, 2uL, 4uL, 1uL };
20002c10:	f244 0378 	movw	r3, #16504	; 0x4078
20002c14:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002c18:	46ec      	mov	ip, sp
20002c1a:	cb0f      	ldmia	r3!, {r0, r1, r2, r3}
20002c1c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    /* Read PCLK dividers from system registers. Multiply the value read from
     * system register by two to get actual divider value. */
    PclkDiv0 = pclk_div_lut[((SYSREG->MSS_CLK_CR >> PCLK0_DIV_SHIFT) & PCLK_DIV_MASK)];
20002c20:	f242 0300 	movw	r3, #8192	; 0x2000
20002c24:	f2ce 0304 	movt	r3, #57348	; 0xe004
20002c28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
20002c2a:	f002 020c 	and.w	r2, r2, #12
20002c2e:	a904      	add	r1, sp, #16
20002c30:	440a      	add	r2, r1
20002c32:	f852 5c10 	ldr.w	r5, [r2, #-16]
    PclkDiv1 = pclk_div_lut[((SYSREG->MSS_CLK_CR >> PCLK1_DIV_SHIFT) & PCLK_DIV_MASK)];
20002c36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
20002c38:	f3c2 1201 	ubfx	r2, r2, #4, #2
20002c3c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
20002c40:	f852 4c10 	ldr.w	r4, [r2, #-16]
    AceDiv = pclk_div_lut[((SYSREG->MSS_CLK_CR >> ACE_DIV_SHIFT) & PCLK_DIV_MASK)];
20002c44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
20002c46:	f3c2 1281 	ubfx	r2, r2, #6, #2
20002c4a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
20002c4e:	f852 0c10 	ldr.w	r0, [r2, #-16]
    {
        /* Compute the FPGA fabric frequency divider. */
        uint32_t obdiv;
        uint32_t obdivhalf;
        
        obdiv = (SYSREG->MSS_CCC_DIV_CR >> OBDIV_SHIFT) & OBDIV_MASK;
20002c52:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
        obdivhalf = (SYSREG->MSS_CCC_DIV_CR >> OBDIVHALF_SHIFT) & OBDIVHALF_MASK;
20002c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        FabDiv = obdiv + 1uL;
20002c56:	f3c1 2104 	ubfx	r1, r1, #8, #5
20002c5a:	f101 0101 	add.w	r1, r1, #1
        if ( obdivhalf != 0uL )
20002c5e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
        {
            FabDiv = FabDiv * 2uL;
20002c62:	bf18      	it	ne
20002c64:	0049      	lslne	r1, r1, #1
    
    uint32_t * p_sysboot_key = SYSBOOT_KEY_ADDR;
    uint32_t * p_idcode = IDCODE_LOCATION;
    uint32_t idcode;
	
    idcode = *p_idcode & ~IDCODE_DEV_REV_MASK;
20002c66:	f240 2330 	movw	r3, #560	; 0x230
20002c6a:	f2c6 0308 	movt	r3, #24584	; 0x6008
20002c6e:	681a      	ldr	r2, [r3, #0]
	
    if ( A2F060IFX_ID == idcode )
20002c70:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
20002c74:	f241 13cf 	movw	r3, #4559	; 0x11cf
20002c78:	f2c0 53a1 	movt	r3, #1441	; 0x5a1
20002c7c:	429a      	cmp	r2, r3
20002c7e:	d105      	bne.n	20002c8c <SystemCoreClockUpdate+0x80>
    {
        uint32_t *p_fclk = SYSBOOT_A2F060_FCLK_ADDR;
        fclk = *p_fclk;
20002c80:	f64e 732c 	movw	r3, #61228	; 0xef2c
20002c84:	f2c6 0301 	movt	r3, #24577	; 0x6001
20002c88:	681b      	ldr	r3, [r3, #0]
20002c8a:	e028      	b.n	20002cde <SystemCoreClockUpdate+0xd2>
    }
    else if ( SYSBOOT_KEY_VALUE == *p_sysboot_key )
20002c8c:	f640 031c 	movw	r3, #2076	; 0x81c
20002c90:	f2c6 0308 	movt	r3, #24584	; 0x6008
20002c94:	681a      	ldr	r2, [r3, #0]
20002c96:	f244 3341 	movw	r3, #17217	; 0x4341
20002c9a:	f6c4 4354 	movt	r3, #19540	; 0x4c54
20002c9e:	429a      	cmp	r2, r3
20002ca0:	d11e      	bne.n	20002ce0 <SystemCoreClockUpdate+0xd4>
    {
        /* Actel system boot programmed, check if it has the FCLK value stored. */
        uint32_t *p_sysboot_version = SYSBOOT_VERSION_ADDR;
        uint32_t sysboot_version = *p_sysboot_version;
20002ca2:	f640 0340 	movw	r3, #2112	; 0x840
20002ca6:	f2c6 0308 	movt	r3, #24584	; 0x6008
20002caa:	681a      	ldr	r2, [r3, #0]
        
        sysboot_version &= SYSBOOT_VERSION_MASK;
20002cac:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
        
        if ( sysboot_version >= MIN_SYSBOOT_VERSION )
20002cb0:	f240 3300 	movw	r3, #768	; 0x300
20002cb4:	f2c0 0301 	movt	r3, #1
20002cb8:	429a      	cmp	r2, r3
20002cba:	d911      	bls.n	20002ce0 <SystemCoreClockUpdate+0xd4>
        {
            /* Handle change of eNVM location of FCLK between 1.3.x and 2.x.x versions of the system boot. */
            if ( sysboot_version < SYSBOOT_VERSION_2_X )
20002cbc:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
20002cc0:	d205      	bcs.n	20002cce <SystemCoreClockUpdate+0xc2>
            {
                /* Read FCLK value from MSS configurator generated configuration
                 * data stored in eNVM spare pages as part of system boot version 1.3.x
                 * configuration tables. */
                uint32_t *p_fclk = SYSBOOT_1_3_FCLK_ADDR;
                fclk = *p_fclk;
20002cc2:	f241 632c 	movw	r3, #5676	; 0x162c
20002cc6:	f2c6 0308 	movt	r3, #24584	; 0x6008
20002cca:	681b      	ldr	r3, [r3, #0]
20002ccc:	e007      	b.n	20002cde <SystemCoreClockUpdate+0xd2>
            }
            else if ( sysboot_version < MAX_SYSBOOT_VERSION )
20002cce:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
20002cd2:	d205      	bcs.n	20002ce0 <SystemCoreClockUpdate+0xd4>
            {
                /* Read FCLK value from MSS configurator generated configuration
                 * data stored in eNVM spare pages as part of system boot version 2.x.x
                 * configuration tables. */
                uint32_t *p_fclk = SYSBOOT_2_x_FCLK_ADDR;
                fclk = *p_fclk;
20002cd4:	f641 63ac 	movw	r3, #7852	; 0x1eac
20002cd8:	f2c6 0308 	movt	r3, #24584	; 0x6008
20002cdc:	681b      	ldr	r3, [r3, #0]
                fclk = 0uL;
            }
        }
    }
    
    if ( 0uL == fclk )
20002cde:	b923      	cbnz	r3, 20002cea <SystemCoreClockUpdate+0xde>
        /* 
         * Could not retrieve FCLK from system boot configuration data. Fall back
         * to using SMARTFUSION_FCLK_FREQ which must then be defined as part of
         * project settings.
         */
        ASSERT( SMARTFUSION_FCLK_FREQ_DEFINED );
20002ce0:	be00      	bkpt	0x0000
20002ce2:	f647 0340 	movw	r3, #30784	; 0x7840
20002ce6:	f2c0 137d 	movt	r3, #381	; 0x17d
    }
    
    /* Retrieve FCLK from eNVM spare pages if Actel system boot programmed as part of the system. */
    
    /* Read system clock from eNVM spare pages. */
    SystemCoreClock = GetSystemClock();
20002cea:	f244 1254 	movw	r2, #16724	; 0x4154
20002cee:	f2c2 0200 	movt	r2, #8192	; 0x2000
20002cf2:	6013      	str	r3, [r2, #0]
    g_FrequencyPCLK0 = SystemCoreClock / PclkDiv0;
20002cf4:	f244 124c 	movw	r2, #16716	; 0x414c
20002cf8:	f2c2 0200 	movt	r2, #8192	; 0x2000
20002cfc:	fbb3 f5f5 	udiv	r5, r3, r5
20002d00:	6015      	str	r5, [r2, #0]
    g_FrequencyPCLK1 = SystemCoreClock / PclkDiv1;
20002d02:	f244 1250 	movw	r2, #16720	; 0x4150
20002d06:	f2c2 0200 	movt	r2, #8192	; 0x2000
20002d0a:	fbb3 f4f4 	udiv	r4, r3, r4
20002d0e:	6014      	str	r4, [r2, #0]
    g_FrequencyACE = SystemCoreClock / AceDiv;
20002d10:	f244 1244 	movw	r2, #16708	; 0x4144
20002d14:	f2c2 0200 	movt	r2, #8192	; 0x2000
20002d18:	fbb3 f0f0 	udiv	r0, r3, r0
20002d1c:	6010      	str	r0, [r2, #0]
    g_FrequencyFPGA = SystemCoreClock / FabDiv;
20002d1e:	f244 1248 	movw	r2, #16712	; 0x4148
20002d22:	f2c2 0200 	movt	r2, #8192	; 0x2000
20002d26:	fbb3 f1f1 	udiv	r1, r3, r1
20002d2a:	6011      	str	r1, [r2, #0]
    
    /* Keep SystemFrequency as well as SystemCoreClock for legacy reasons. */
    SystemFrequency = SystemCoreClock;
20002d2c:	f244 1258 	movw	r2, #16728	; 0x4158
20002d30:	f2c2 0200 	movt	r2, #8192	; 0x2000
20002d34:	6013      	str	r3, [r2, #0]
}
20002d36:	b004      	add	sp, #16
20002d38:	bc30      	pop	{r4, r5}
20002d3a:	4770      	bx	lr

20002d3c <ace_init_convert>:

/*-------------------------------------------------------------------------*//**
 *
 */
void ace_init_convert(void)
{
20002d3c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    uint8_t abps_idx;
    int32_t channel;
    uint32_t saved_pc2_ctrl;
    
    /* Pause the SSE PC2 while accesses to ACB from APB3 are taking place. */
    saved_pc2_ctrl = ACE->PC2_CTRL;
20002d40:	f240 0200 	movw	r2, #0
20002d44:	f2c4 0202 	movt	r2, #16386	; 0x4002
20002d48:	f8d2 40c8 	ldr.w	r4, [r2, #200]	; 0xc8
    ACE->PC2_CTRL = 0u;
20002d4c:	f04f 0300 	mov.w	r3, #0
20002d50:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
        uint8_t quad_id;
        uint8_t acb_config_byte;
        uint8_t channel_is_abps2;
        
        quad_id = abps_idx / 2u;
        acb_config_byte = ACE->ACB_DATA[quad_id].b8;
20002d54:	4610      	mov	r0, r2
            g_gdec_lut[abps_idx] = (acb_config_byte >> 5u) & 0x03u;
        }
        else
        {
            /* ABPS1 */
            g_gdec_lut[abps_idx] = (acb_config_byte >> 1u) & 0x03u;
20002d56:	f244 1ca0 	movw	ip, #16800	; 0x41a0
20002d5a:	f2c2 0c00 	movt	ip, #8192	; 0x2000
    int32_t channel;
    uint32_t saved_pc2_ctrl;
    
    /* Pause the SSE PC2 while accesses to ACB from APB3 are taking place. */
    saved_pc2_ctrl = ACE->PC2_CTRL;
    ACE->PC2_CTRL = 0u;
20002d5e:	b2da      	uxtb	r2, r3
        uint8_t quad_id;
        uint8_t acb_config_byte;
        uint8_t channel_is_abps2;
        
        quad_id = abps_idx / 2u;
        acb_config_byte = ACE->ACB_DATA[quad_id].b8;
20002d60:	ea4f 0152 	mov.w	r1, r2, lsr #1
20002d64:	eb01 0141 	add.w	r1, r1, r1, lsl #1
20002d68:	eb00 1101 	add.w	r1, r0, r1, lsl #4
20002d6c:	f501 7108 	add.w	r1, r1, #544	; 0x220
20002d70:	7909      	ldrb	r1, [r1, #4]
        channel_is_abps2 = abps_idx & 0x01u;
        if(channel_is_abps2)
20002d72:	f012 0f01 	tst.w	r2, #1
        {
            /* ABPS2 */
            g_gdec_lut[abps_idx] = (acb_config_byte >> 5u) & 0x03u;
20002d76:	bf14      	ite	ne
20002d78:	f3c1 1141 	ubfxne	r1, r1, #5, #2
        }
        else
        {
            /* ABPS1 */
            g_gdec_lut[abps_idx] = (acb_config_byte >> 1u) & 0x03u;
20002d7c:	f3c1 0141 	ubfxeq	r1, r1, #1, #2
20002d80:	f80c 1003 	strb.w	r1, [ip, r3]
20002d84:	f103 0301 	add.w	r3, r3, #1
    /* Pause the SSE PC2 while accesses to ACB from APB3 are taking place. */
    saved_pc2_ctrl = ACE->PC2_CTRL;
    ACE->PC2_CTRL = 0u;
    
    /* Populate the g_gdec_lut look-up table. */
    for(abps_idx = 0u; abps_idx < MAX_NB_OF_APBS; ++abps_idx)
20002d88:	2b0a      	cmp	r3, #10
20002d8a:	d1e8      	bne.n	20002d5e <ace_init_convert+0x22>
20002d8c:	f04f 0300 	mov.w	r3, #0
        uint8_t acb_config_byte;
        adc_channel_id_t channel_id;
        channel_type_t channel_type;
    
        channel_id = g_ace_channel_desc_table[channel].signal_id;
        quad_id = channel_quad_lut[channel_id];
20002d90:	f244 175c 	movw	r7, #16732	; 0x415c
20002d94:	f2c2 0700 	movt	r7, #8192	; 0x2000
20002d98:	f244 06c0 	movw	r6, #16576	; 0x40c0
20002d9c:	f2c2 0600 	movt	r6, #8192	; 0x2000
        
        switch (channel_type_lut[channel_id])
20002da0:	f244 05f0 	movw	r5, #16624	; 0x40f0
20002da4:	f2c2 0500 	movt	r5, #8192	; 0x2000
                channel_type = VOLTAGE;
                break;
                
            case CURRENT_CHANNEL:
                ASSERT( quad_id != INVALID_QUAD_ID );
                acb_config_byte = ACE->ACB_DATA[quad_id].b9;
20002da8:	f240 0800 	movw	r8, #0
20002dac:	f2c4 0802 	movt	r8, #16386	; 0x4002
                    channel_type = TEMPERATURE;
                }
                break;
                
            default:
                ASSERT(0);
20002db0:	469a      	mov	sl, r3
                break;
            
            case TEMPERATURE_CHANNEL:
                ASSERT( quad_id != INVALID_QUAD_ID );
                acb_config_byte = ACE->ACB_DATA[quad_id].b10;
                if ( acb_config_byte & 0x01u )
20002db2:	f04f 0902 	mov.w	r9, #2
                ASSERT(0);
                channel_type = VOLTAGE;
                break;
        }
        
        channel_type_lut_h[channel] = channel_type;
20002db6:	f244 1cac 	movw	ip, #16812	; 0x41ac
20002dba:	f2c2 0c00 	movt	ip, #8192	; 0x2000
#define PPE_SAMPLES_RESOLUTION    4095u

/*-------------------------------------------------------------------------*//**
 *
 */
void ace_init_convert(void)
20002dbe:	4618      	mov	r0, r3
        uint8_t acb_config_byte;
        adc_channel_id_t channel_id;
        channel_type_t channel_type;
    
        channel_id = g_ace_channel_desc_table[channel].signal_id;
        quad_id = channel_quad_lut[channel_id];
20002dc0:	eb07 1203 	add.w	r2, r7, r3, lsl #4
20002dc4:	7912      	ldrb	r2, [r2, #4]
20002dc6:	5cb1      	ldrb	r1, [r6, r2]
        
        switch (channel_type_lut[channel_id])
20002dc8:	5caa      	ldrb	r2, [r5, r2]
20002dca:	2a01      	cmp	r2, #1
20002dcc:	d003      	beq.n	20002dd6 <ace_init_convert+0x9a>
20002dce:	b322      	cbz	r2, 20002e1a <ace_init_convert+0xde>
20002dd0:	2a02      	cmp	r2, #2
20002dd2:	d11f      	bne.n	20002e14 <ace_init_convert+0xd8>
20002dd4:	e00e      	b.n	20002df4 <ace_init_convert+0xb8>
            case VOLTAGE_CHANNEL:
                channel_type = VOLTAGE;
                break;
                
            case CURRENT_CHANNEL:
                ASSERT( quad_id != INVALID_QUAD_ID );
20002dd6:	29ff      	cmp	r1, #255	; 0xff
20002dd8:	d100      	bne.n	20002ddc <ace_init_convert+0xa0>
20002dda:	be00      	bkpt	0x0000
                acb_config_byte = ACE->ACB_DATA[quad_id].b9;
20002ddc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
20002de0:	eb08 1101 	add.w	r1, r8, r1, lsl #4
20002de4:	f501 7108 	add.w	r1, r1, #544	; 0x220
20002de8:	7a0a      	ldrb	r2, [r1, #8]
20002dea:	f082 0201 	eor.w	r2, r2, #1
20002dee:	f002 0201 	and.w	r2, r2, #1
20002df2:	e013      	b.n	20002e1c <ace_init_convert+0xe0>
                    channel_type = CURRENT;
                }
                break;
            
            case TEMPERATURE_CHANNEL:
                ASSERT( quad_id != INVALID_QUAD_ID );
20002df4:	29ff      	cmp	r1, #255	; 0xff
20002df6:	d100      	bne.n	20002dfa <ace_init_convert+0xbe>
20002df8:	be00      	bkpt	0x0000
                acb_config_byte = ACE->ACB_DATA[quad_id].b10;
20002dfa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
20002dfe:	eb08 1101 	add.w	r1, r8, r1, lsl #4
20002e02:	f501 710a 	add.w	r1, r1, #552	; 0x228
20002e06:	790a      	ldrb	r2, [r1, #4]
                if ( acb_config_byte & 0x01u )
20002e08:	f012 0f01 	tst.w	r2, #1
20002e0c:	bf08      	it	eq
20002e0e:	464a      	moveq	r2, r9
20002e10:	d004      	beq.n	20002e1c <ace_init_convert+0xe0>
20002e12:	e002      	b.n	20002e1a <ace_init_convert+0xde>
                    channel_type = TEMPERATURE;
                }
                break;
                
            default:
                ASSERT(0);
20002e14:	be00      	bkpt	0x0000
20002e16:	4652      	mov	r2, sl
20002e18:	e000      	b.n	20002e1c <ace_init_convert+0xe0>
20002e1a:	4652      	mov	r2, sl
                channel_type = VOLTAGE;
                break;
        }
        
        channel_type_lut_h[channel] = channel_type;
20002e1c:	f80c 2000 	strb.w	r2, [ip, r0]
            g_gdec_lut[abps_idx] = (acb_config_byte >> 1u) & 0x03u;
        }
    }
    
    /* Populate the channel_type_lut_h look-up table. */
    for(channel = 0; channel < ACE_NB_OF_INPUT_CHANNELS; ++channel)
20002e20:	f103 0301 	add.w	r3, r3, #1
20002e24:	2b04      	cmp	r3, #4
20002e26:	d1ca      	bne.n	20002dbe <ace_init_convert+0x82>
        
        channel_type_lut_h[channel] = channel_type;
    }
    
    /* Restore SSE PC2 operations. */
    ACE->PC2_CTRL = saved_pc2_ctrl;
20002e28:	f240 0300 	movw	r3, #0
20002e2c:	f2c4 0302 	movt	r3, #16386	; 0x4002
20002e30:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
}
20002e34:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
20002e38:	4770      	bx	lr
20002e3a:	bf00      	nop

20002e3c <ace_init_flags>:
        }
        
        g_ppe_global_flags_isr = 0u;
    }
#endif
}
20002e3c:	4770      	bx	lr
20002e3e:	bf00      	nop

20002e40 <ACE_PPE_Flag0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag0_IRQHandler( void )
#else
void ACE_PPE_Flag0_IRQHandler( void )
#endif
{
20002e40:	4668      	mov	r0, sp
20002e42:	f020 0107 	bic.w	r1, r0, #7
20002e46:	468d      	mov	sp, r1
20002e48:	b401      	push	{r0}
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20002e4a:	f24e 1300 	movw	r3, #57600	; 0xe100
20002e4e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002e52:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
20002e56:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG0 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag0_IRQn );
}
20002e5a:	bc01      	pop	{r0}
20002e5c:	4685      	mov	sp, r0
20002e5e:	4770      	bx	lr

20002e60 <ACE_PPE_Flag1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag1_IRQHandler( void )
#else
void ACE_PPE_Flag1_IRQHandler( void )
#endif
{
20002e60:	4668      	mov	r0, sp
20002e62:	f020 0107 	bic.w	r1, r0, #7
20002e66:	468d      	mov	sp, r1
20002e68:	b401      	push	{r0}
20002e6a:	f24e 1300 	movw	r3, #57600	; 0xe100
20002e6e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002e72:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
20002e76:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG1 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag1_IRQn );
}
20002e7a:	bc01      	pop	{r0}
20002e7c:	4685      	mov	sp, r0
20002e7e:	4770      	bx	lr

20002e80 <ACE_PPE_Flag2_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag2_IRQHandler( void )
#else
void ACE_PPE_Flag2_IRQHandler( void )
#endif
{
20002e80:	4668      	mov	r0, sp
20002e82:	f020 0107 	bic.w	r1, r0, #7
20002e86:	468d      	mov	sp, r1
20002e88:	b401      	push	{r0}
20002e8a:	f24e 1300 	movw	r3, #57600	; 0xe100
20002e8e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002e92:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
20002e96:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG2 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag2_IRQn );
}
20002e9a:	bc01      	pop	{r0}
20002e9c:	4685      	mov	sp, r0
20002e9e:	4770      	bx	lr

20002ea0 <ACE_PPE_Flag3_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag3_IRQHandler( void )
#else
void ACE_PPE_Flag3_IRQHandler( void )
#endif
{
20002ea0:	4668      	mov	r0, sp
20002ea2:	f020 0107 	bic.w	r1, r0, #7
20002ea6:	468d      	mov	sp, r1
20002ea8:	b401      	push	{r0}
20002eaa:	f24e 1300 	movw	r3, #57600	; 0xe100
20002eae:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002eb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
20002eb6:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG3 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag3_IRQn );
}
20002eba:	bc01      	pop	{r0}
20002ebc:	4685      	mov	sp, r0
20002ebe:	4770      	bx	lr

20002ec0 <ACE_PPE_Flag4_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag4_IRQHandler( void )
#else
void ACE_PPE_Flag4_IRQHandler( void )
#endif
{
20002ec0:	4668      	mov	r0, sp
20002ec2:	f020 0107 	bic.w	r1, r0, #7
20002ec6:	468d      	mov	sp, r1
20002ec8:	b401      	push	{r0}
20002eca:	f24e 1300 	movw	r3, #57600	; 0xe100
20002ece:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002ed2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
20002ed6:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG4 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag4_IRQn );
}
20002eda:	bc01      	pop	{r0}
20002edc:	4685      	mov	sp, r0
20002ede:	4770      	bx	lr

20002ee0 <ACE_PPE_Flag5_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag5_IRQHandler( void )
#else
void ACE_PPE_Flag5_IRQHandler( void )
#endif
{
20002ee0:	4668      	mov	r0, sp
20002ee2:	f020 0107 	bic.w	r1, r0, #7
20002ee6:	468d      	mov	sp, r1
20002ee8:	b401      	push	{r0}
20002eea:	f24e 1300 	movw	r3, #57600	; 0xe100
20002eee:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002ef2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
20002ef6:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG5 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag5_IRQn );
}
20002efa:	bc01      	pop	{r0}
20002efc:	4685      	mov	sp, r0
20002efe:	4770      	bx	lr

20002f00 <ACE_PPE_Flag6_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag6_IRQHandler( void )
#else
void ACE_PPE_Flag6_IRQHandler( void )
#endif
{
20002f00:	4668      	mov	r0, sp
20002f02:	f020 0107 	bic.w	r1, r0, #7
20002f06:	468d      	mov	sp, r1
20002f08:	b401      	push	{r0}
20002f0a:	f24e 1300 	movw	r3, #57600	; 0xe100
20002f0e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20002f16:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG6 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag6_IRQn );
}
20002f1a:	bc01      	pop	{r0}
20002f1c:	4685      	mov	sp, r0
20002f1e:	4770      	bx	lr

20002f20 <ACE_PPE_Flag7_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag7_IRQHandler( void )
#else
void ACE_PPE_Flag7_IRQHandler( void )
#endif
{
20002f20:	4668      	mov	r0, sp
20002f22:	f020 0107 	bic.w	r1, r0, #7
20002f26:	468d      	mov	sp, r1
20002f28:	b401      	push	{r0}
20002f2a:	f24e 1300 	movw	r3, #57600	; 0xe100
20002f2e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002f32:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
20002f36:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG7 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag7_IRQn );
}
20002f3a:	bc01      	pop	{r0}
20002f3c:	4685      	mov	sp, r0
20002f3e:	4770      	bx	lr

20002f40 <ACE_PPE_Flag8_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag8_IRQHandler( void )
#else
void ACE_PPE_Flag8_IRQHandler( void )
#endif
{
20002f40:	4668      	mov	r0, sp
20002f42:	f020 0107 	bic.w	r1, r0, #7
20002f46:	468d      	mov	sp, r1
20002f48:	b401      	push	{r0}
20002f4a:	f24e 1300 	movw	r3, #57600	; 0xe100
20002f4e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002f52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
20002f56:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG8 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag8_IRQn );
}
20002f5a:	bc01      	pop	{r0}
20002f5c:	4685      	mov	sp, r0
20002f5e:	4770      	bx	lr

20002f60 <ACE_PPE_Flag9_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag9_IRQHandler( void )
#else
void ACE_PPE_Flag9_IRQHandler( void )
#endif
{
20002f60:	4668      	mov	r0, sp
20002f62:	f020 0107 	bic.w	r1, r0, #7
20002f66:	468d      	mov	sp, r1
20002f68:	b401      	push	{r0}
20002f6a:	f24e 1300 	movw	r3, #57600	; 0xe100
20002f6e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002f72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
20002f76:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG9 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag9_IRQn );
}
20002f7a:	bc01      	pop	{r0}
20002f7c:	4685      	mov	sp, r0
20002f7e:	4770      	bx	lr

20002f80 <ACE_PPE_Flag10_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag10_IRQHandler( void )
#else
void ACE_PPE_Flag10_IRQHandler( void )
#endif
{
20002f80:	4668      	mov	r0, sp
20002f82:	f020 0107 	bic.w	r1, r0, #7
20002f86:	468d      	mov	sp, r1
20002f88:	b401      	push	{r0}
20002f8a:	f24e 1300 	movw	r3, #57600	; 0xe100
20002f8e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002f92:	f04f 0201 	mov.w	r2, #1
20002f96:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG10 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag10_IRQn );
}
20002f9a:	bc01      	pop	{r0}
20002f9c:	4685      	mov	sp, r0
20002f9e:	4770      	bx	lr

20002fa0 <ACE_PPE_Flag11_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag11_IRQHandler( void )
#else
void ACE_PPE_Flag11_IRQHandler( void )
#endif
{
20002fa0:	4668      	mov	r0, sp
20002fa2:	f020 0107 	bic.w	r1, r0, #7
20002fa6:	468d      	mov	sp, r1
20002fa8:	b401      	push	{r0}
20002faa:	f24e 1300 	movw	r3, #57600	; 0xe100
20002fae:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002fb2:	f04f 0202 	mov.w	r2, #2
20002fb6:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG11 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag11_IRQn );
}
20002fba:	bc01      	pop	{r0}
20002fbc:	4685      	mov	sp, r0
20002fbe:	4770      	bx	lr

20002fc0 <ACE_PPE_Flag12_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag12_IRQHandler( void )
#else
void ACE_PPE_Flag12_IRQHandler( void )
#endif
{
20002fc0:	4668      	mov	r0, sp
20002fc2:	f020 0107 	bic.w	r1, r0, #7
20002fc6:	468d      	mov	sp, r1
20002fc8:	b401      	push	{r0}
20002fca:	f24e 1300 	movw	r3, #57600	; 0xe100
20002fce:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002fd2:	f04f 0204 	mov.w	r2, #4
20002fd6:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG12 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag12_IRQn );
}
20002fda:	bc01      	pop	{r0}
20002fdc:	4685      	mov	sp, r0
20002fde:	4770      	bx	lr

20002fe0 <ACE_PPE_Flag13_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag13_IRQHandler( void )
#else
void ACE_PPE_Flag13_IRQHandler( void )
#endif
{
20002fe0:	4668      	mov	r0, sp
20002fe2:	f020 0107 	bic.w	r1, r0, #7
20002fe6:	468d      	mov	sp, r1
20002fe8:	b401      	push	{r0}
20002fea:	f24e 1300 	movw	r3, #57600	; 0xe100
20002fee:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002ff2:	f04f 0208 	mov.w	r2, #8
20002ff6:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG13 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag13_IRQn );
}
20002ffa:	bc01      	pop	{r0}
20002ffc:	4685      	mov	sp, r0
20002ffe:	4770      	bx	lr

20003000 <ACE_PPE_Flag14_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag14_IRQHandler( void )
#else
void ACE_PPE_Flag14_IRQHandler( void )
#endif
{
20003000:	4668      	mov	r0, sp
20003002:	f020 0107 	bic.w	r1, r0, #7
20003006:	468d      	mov	sp, r1
20003008:	b401      	push	{r0}
2000300a:	f24e 1300 	movw	r3, #57600	; 0xe100
2000300e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003012:	f04f 0210 	mov.w	r2, #16
20003016:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG14 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag14_IRQn );
}
2000301a:	bc01      	pop	{r0}
2000301c:	4685      	mov	sp, r0
2000301e:	4770      	bx	lr

20003020 <ACE_PPE_Flag15_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag15_IRQHandler( void )
#else
void ACE_PPE_Flag15_IRQHandler( void )
#endif
{
20003020:	4668      	mov	r0, sp
20003022:	f020 0107 	bic.w	r1, r0, #7
20003026:	468d      	mov	sp, r1
20003028:	b401      	push	{r0}
2000302a:	f24e 1300 	movw	r3, #57600	; 0xe100
2000302e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003032:	f04f 0220 	mov.w	r2, #32
20003036:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG15 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag15_IRQn );
}
2000303a:	bc01      	pop	{r0}
2000303c:	4685      	mov	sp, r0
2000303e:	4770      	bx	lr

20003040 <ACE_PPE_Flag16_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag16_IRQHandler( void )
#else
void ACE_PPE_Flag16_IRQHandler( void )
#endif
{
20003040:	4668      	mov	r0, sp
20003042:	f020 0107 	bic.w	r1, r0, #7
20003046:	468d      	mov	sp, r1
20003048:	b401      	push	{r0}
2000304a:	f24e 1300 	movw	r3, #57600	; 0xe100
2000304e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003052:	f04f 0240 	mov.w	r2, #64	; 0x40
20003056:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG16 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag16_IRQn );
}
2000305a:	bc01      	pop	{r0}
2000305c:	4685      	mov	sp, r0
2000305e:	4770      	bx	lr

20003060 <ACE_PPE_Flag17_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag17_IRQHandler( void )
#else
void ACE_PPE_Flag17_IRQHandler( void )
#endif
{
20003060:	4668      	mov	r0, sp
20003062:	f020 0107 	bic.w	r1, r0, #7
20003066:	468d      	mov	sp, r1
20003068:	b401      	push	{r0}
2000306a:	f24e 1300 	movw	r3, #57600	; 0xe100
2000306e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003072:	f04f 0280 	mov.w	r2, #128	; 0x80
20003076:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG17 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag17_IRQn );
}
2000307a:	bc01      	pop	{r0}
2000307c:	4685      	mov	sp, r0
2000307e:	4770      	bx	lr

20003080 <ACE_PPE_Flag18_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag18_IRQHandler( void )
#else
void ACE_PPE_Flag18_IRQHandler( void )
#endif
{
20003080:	4668      	mov	r0, sp
20003082:	f020 0107 	bic.w	r1, r0, #7
20003086:	468d      	mov	sp, r1
20003088:	b401      	push	{r0}
2000308a:	f24e 1300 	movw	r3, #57600	; 0xe100
2000308e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003092:	f44f 7280 	mov.w	r2, #256	; 0x100
20003096:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG18 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag18_IRQn );
}
2000309a:	bc01      	pop	{r0}
2000309c:	4685      	mov	sp, r0
2000309e:	4770      	bx	lr

200030a0 <ACE_PPE_Flag19_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag19_IRQHandler( void )
#else
void ACE_PPE_Flag19_IRQHandler( void )
#endif
{
200030a0:	4668      	mov	r0, sp
200030a2:	f020 0107 	bic.w	r1, r0, #7
200030a6:	468d      	mov	sp, r1
200030a8:	b401      	push	{r0}
200030aa:	f24e 1300 	movw	r3, #57600	; 0xe100
200030ae:	f2ce 0300 	movt	r3, #57344	; 0xe000
200030b2:	f44f 7200 	mov.w	r2, #512	; 0x200
200030b6:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG19 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag19_IRQn );
}
200030ba:	bc01      	pop	{r0}
200030bc:	4685      	mov	sp, r0
200030be:	4770      	bx	lr

200030c0 <ACE_PPE_Flag20_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag20_IRQHandler( void )
#else
void ACE_PPE_Flag20_IRQHandler( void )
#endif
{
200030c0:	4668      	mov	r0, sp
200030c2:	f020 0107 	bic.w	r1, r0, #7
200030c6:	468d      	mov	sp, r1
200030c8:	b401      	push	{r0}
200030ca:	f24e 1300 	movw	r3, #57600	; 0xe100
200030ce:	f2ce 0300 	movt	r3, #57344	; 0xe000
200030d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
200030d6:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG20 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag20_IRQn );
}
200030da:	bc01      	pop	{r0}
200030dc:	4685      	mov	sp, r0
200030de:	4770      	bx	lr

200030e0 <ACE_PPE_Flag21_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag21_IRQHandler( void )
#else
void ACE_PPE_Flag21_IRQHandler( void )
#endif
{
200030e0:	4668      	mov	r0, sp
200030e2:	f020 0107 	bic.w	r1, r0, #7
200030e6:	468d      	mov	sp, r1
200030e8:	b401      	push	{r0}
200030ea:	f24e 1300 	movw	r3, #57600	; 0xe100
200030ee:	f2ce 0300 	movt	r3, #57344	; 0xe000
200030f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
200030f6:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG21 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag21_IRQn );
}
200030fa:	bc01      	pop	{r0}
200030fc:	4685      	mov	sp, r0
200030fe:	4770      	bx	lr

20003100 <ACE_PPE_Flag22_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag22_IRQHandler( void )
#else
void ACE_PPE_Flag22_IRQHandler( void )
#endif
{
20003100:	4668      	mov	r0, sp
20003102:	f020 0107 	bic.w	r1, r0, #7
20003106:	468d      	mov	sp, r1
20003108:	b401      	push	{r0}
2000310a:	f24e 1300 	movw	r3, #57600	; 0xe100
2000310e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003112:	f44f 5280 	mov.w	r2, #4096	; 0x1000
20003116:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG22 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag22_IRQn );
}
2000311a:	bc01      	pop	{r0}
2000311c:	4685      	mov	sp, r0
2000311e:	4770      	bx	lr

20003120 <ACE_PPE_Flag23_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag23_IRQHandler( void )
#else
void ACE_PPE_Flag23_IRQHandler( void )
#endif
{
20003120:	4668      	mov	r0, sp
20003122:	f020 0107 	bic.w	r1, r0, #7
20003126:	468d      	mov	sp, r1
20003128:	b401      	push	{r0}
2000312a:	f24e 1300 	movw	r3, #57600	; 0xe100
2000312e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003132:	f44f 5200 	mov.w	r2, #8192	; 0x2000
20003136:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG23 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag23_IRQn );
}
2000313a:	bc01      	pop	{r0}
2000313c:	4685      	mov	sp, r0
2000313e:	4770      	bx	lr

20003140 <ACE_PPE_Flag24_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag24_IRQHandler( void )
#else
void ACE_PPE_Flag24_IRQHandler( void )
#endif
{
20003140:	4668      	mov	r0, sp
20003142:	f020 0107 	bic.w	r1, r0, #7
20003146:	468d      	mov	sp, r1
20003148:	b401      	push	{r0}
2000314a:	f24e 1300 	movw	r3, #57600	; 0xe100
2000314e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003152:	f44f 4280 	mov.w	r2, #16384	; 0x4000
20003156:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG24 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag24_IRQn );
}
2000315a:	bc01      	pop	{r0}
2000315c:	4685      	mov	sp, r0
2000315e:	4770      	bx	lr

20003160 <ACE_PPE_Flag25_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag25_IRQHandler( void )
#else
void ACE_PPE_Flag25_IRQHandler( void )
#endif
{
20003160:	4668      	mov	r0, sp
20003162:	f020 0107 	bic.w	r1, r0, #7
20003166:	468d      	mov	sp, r1
20003168:	b401      	push	{r0}
2000316a:	f24e 1300 	movw	r3, #57600	; 0xe100
2000316e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003172:	f44f 4200 	mov.w	r2, #32768	; 0x8000
20003176:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG25 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag25_IRQn );
}
2000317a:	bc01      	pop	{r0}
2000317c:	4685      	mov	sp, r0
2000317e:	4770      	bx	lr

20003180 <ACE_PPE_Flag26_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag26_IRQHandler( void )
#else
void ACE_PPE_Flag26_IRQHandler( void )
#endif
{
20003180:	4668      	mov	r0, sp
20003182:	f020 0107 	bic.w	r1, r0, #7
20003186:	468d      	mov	sp, r1
20003188:	b401      	push	{r0}
2000318a:	f24e 1300 	movw	r3, #57600	; 0xe100
2000318e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003192:	f44f 3280 	mov.w	r2, #65536	; 0x10000
20003196:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG26 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag26_IRQn );
}
2000319a:	bc01      	pop	{r0}
2000319c:	4685      	mov	sp, r0
2000319e:	4770      	bx	lr

200031a0 <ACE_PPE_Flag27_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag27_IRQHandler( void )
#else
void ACE_PPE_Flag27_IRQHandler( void )
#endif
{
200031a0:	4668      	mov	r0, sp
200031a2:	f020 0107 	bic.w	r1, r0, #7
200031a6:	468d      	mov	sp, r1
200031a8:	b401      	push	{r0}
200031aa:	f24e 1300 	movw	r3, #57600	; 0xe100
200031ae:	f2ce 0300 	movt	r3, #57344	; 0xe000
200031b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
200031b6:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG27 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag27_IRQn );
}
200031ba:	bc01      	pop	{r0}
200031bc:	4685      	mov	sp, r0
200031be:	4770      	bx	lr

200031c0 <ACE_PPE_Flag28_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag28_IRQHandler( void )
#else
void ACE_PPE_Flag28_IRQHandler( void )
#endif
{
200031c0:	4668      	mov	r0, sp
200031c2:	f020 0107 	bic.w	r1, r0, #7
200031c6:	468d      	mov	sp, r1
200031c8:	b401      	push	{r0}
200031ca:	f24e 1300 	movw	r3, #57600	; 0xe100
200031ce:	f2ce 0300 	movt	r3, #57344	; 0xe000
200031d2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
200031d6:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG28 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag28_IRQn );
}
200031da:	bc01      	pop	{r0}
200031dc:	4685      	mov	sp, r0
200031de:	4770      	bx	lr

200031e0 <ACE_PPE_Flag29_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag29_IRQHandler( void )
#else
void ACE_PPE_Flag29_IRQHandler( void )
#endif
{
200031e0:	4668      	mov	r0, sp
200031e2:	f020 0107 	bic.w	r1, r0, #7
200031e6:	468d      	mov	sp, r1
200031e8:	b401      	push	{r0}
200031ea:	f24e 1300 	movw	r3, #57600	; 0xe100
200031ee:	f2ce 0300 	movt	r3, #57344	; 0xe000
200031f2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
200031f6:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG29 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag29_IRQn );
}
200031fa:	bc01      	pop	{r0}
200031fc:	4685      	mov	sp, r0
200031fe:	4770      	bx	lr

20003200 <ACE_PPE_Flag30_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag30_IRQHandler( void )
#else
void ACE_PPE_Flag30_IRQHandler( void )
#endif
{
20003200:	4668      	mov	r0, sp
20003202:	f020 0107 	bic.w	r1, r0, #7
20003206:	468d      	mov	sp, r1
20003208:	b401      	push	{r0}
2000320a:	f24e 1300 	movw	r3, #57600	; 0xe100
2000320e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003212:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
20003216:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG30 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag30_IRQn );
}
2000321a:	bc01      	pop	{r0}
2000321c:	4685      	mov	sp, r0
2000321e:	4770      	bx	lr

20003220 <ACE_PPE_Flag31_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag31_IRQHandler( void )
#else
void ACE_PPE_Flag31_IRQHandler( void )
#endif
{
20003220:	4668      	mov	r0, sp
20003222:	f020 0107 	bic.w	r1, r0, #7
20003226:	468d      	mov	sp, r1
20003228:	b401      	push	{r0}
2000322a:	f24e 1300 	movw	r3, #57600	; 0xe100
2000322e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003232:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
20003236:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG31 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag31_IRQn );
}
2000323a:	bc01      	pop	{r0}
2000323c:	4685      	mov	sp, r0
2000323e:	4770      	bx	lr

20003240 <__aeabi_drsub>:
20003240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
20003244:	e002      	b.n	2000324c <__adddf3>
20003246:	bf00      	nop

20003248 <__aeabi_dsub>:
20003248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

2000324c <__adddf3>:
2000324c:	b530      	push	{r4, r5, lr}
2000324e:	ea4f 0441 	mov.w	r4, r1, lsl #1
20003252:	ea4f 0543 	mov.w	r5, r3, lsl #1
20003256:	ea94 0f05 	teq	r4, r5
2000325a:	bf08      	it	eq
2000325c:	ea90 0f02 	teqeq	r0, r2
20003260:	bf1f      	itttt	ne
20003262:	ea54 0c00 	orrsne.w	ip, r4, r0
20003266:	ea55 0c02 	orrsne.w	ip, r5, r2
2000326a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
2000326e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
20003272:	f000 80e2 	beq.w	2000343a <__adddf3+0x1ee>
20003276:	ea4f 5454 	mov.w	r4, r4, lsr #21
2000327a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
2000327e:	bfb8      	it	lt
20003280:	426d      	neglt	r5, r5
20003282:	dd0c      	ble.n	2000329e <__adddf3+0x52>
20003284:	442c      	add	r4, r5
20003286:	ea80 0202 	eor.w	r2, r0, r2
2000328a:	ea81 0303 	eor.w	r3, r1, r3
2000328e:	ea82 0000 	eor.w	r0, r2, r0
20003292:	ea83 0101 	eor.w	r1, r3, r1
20003296:	ea80 0202 	eor.w	r2, r0, r2
2000329a:	ea81 0303 	eor.w	r3, r1, r3
2000329e:	2d36      	cmp	r5, #54	; 0x36
200032a0:	bf88      	it	hi
200032a2:	bd30      	pophi	{r4, r5, pc}
200032a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
200032a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
200032ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
200032b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
200032b4:	d002      	beq.n	200032bc <__adddf3+0x70>
200032b6:	4240      	negs	r0, r0
200032b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
200032bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
200032c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
200032c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
200032c8:	d002      	beq.n	200032d0 <__adddf3+0x84>
200032ca:	4252      	negs	r2, r2
200032cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
200032d0:	ea94 0f05 	teq	r4, r5
200032d4:	f000 80a7 	beq.w	20003426 <__adddf3+0x1da>
200032d8:	f1a4 0401 	sub.w	r4, r4, #1
200032dc:	f1d5 0e20 	rsbs	lr, r5, #32
200032e0:	db0d      	blt.n	200032fe <__adddf3+0xb2>
200032e2:	fa02 fc0e 	lsl.w	ip, r2, lr
200032e6:	fa22 f205 	lsr.w	r2, r2, r5
200032ea:	1880      	adds	r0, r0, r2
200032ec:	f141 0100 	adc.w	r1, r1, #0
200032f0:	fa03 f20e 	lsl.w	r2, r3, lr
200032f4:	1880      	adds	r0, r0, r2
200032f6:	fa43 f305 	asr.w	r3, r3, r5
200032fa:	4159      	adcs	r1, r3
200032fc:	e00e      	b.n	2000331c <__adddf3+0xd0>
200032fe:	f1a5 0520 	sub.w	r5, r5, #32
20003302:	f10e 0e20 	add.w	lr, lr, #32
20003306:	2a01      	cmp	r2, #1
20003308:	fa03 fc0e 	lsl.w	ip, r3, lr
2000330c:	bf28      	it	cs
2000330e:	f04c 0c02 	orrcs.w	ip, ip, #2
20003312:	fa43 f305 	asr.w	r3, r3, r5
20003316:	18c0      	adds	r0, r0, r3
20003318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
2000331c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
20003320:	d507      	bpl.n	20003332 <__adddf3+0xe6>
20003322:	f04f 0e00 	mov.w	lr, #0
20003326:	f1dc 0c00 	rsbs	ip, ip, #0
2000332a:	eb7e 0000 	sbcs.w	r0, lr, r0
2000332e:	eb6e 0101 	sbc.w	r1, lr, r1
20003332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
20003336:	d31b      	bcc.n	20003370 <__adddf3+0x124>
20003338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
2000333c:	d30c      	bcc.n	20003358 <__adddf3+0x10c>
2000333e:	0849      	lsrs	r1, r1, #1
20003340:	ea5f 0030 	movs.w	r0, r0, rrx
20003344:	ea4f 0c3c 	mov.w	ip, ip, rrx
20003348:	f104 0401 	add.w	r4, r4, #1
2000334c:	ea4f 5244 	mov.w	r2, r4, lsl #21
20003350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
20003354:	f080 809a 	bcs.w	2000348c <__adddf3+0x240>
20003358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
2000335c:	bf08      	it	eq
2000335e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
20003362:	f150 0000 	adcs.w	r0, r0, #0
20003366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
2000336a:	ea41 0105 	orr.w	r1, r1, r5
2000336e:	bd30      	pop	{r4, r5, pc}
20003370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
20003374:	4140      	adcs	r0, r0
20003376:	eb41 0101 	adc.w	r1, r1, r1
2000337a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
2000337e:	f1a4 0401 	sub.w	r4, r4, #1
20003382:	d1e9      	bne.n	20003358 <__adddf3+0x10c>
20003384:	f091 0f00 	teq	r1, #0
20003388:	bf04      	itt	eq
2000338a:	4601      	moveq	r1, r0
2000338c:	2000      	moveq	r0, #0
2000338e:	fab1 f381 	clz	r3, r1
20003392:	bf08      	it	eq
20003394:	3320      	addeq	r3, #32
20003396:	f1a3 030b 	sub.w	r3, r3, #11
2000339a:	f1b3 0220 	subs.w	r2, r3, #32
2000339e:	da0c      	bge.n	200033ba <__adddf3+0x16e>
200033a0:	320c      	adds	r2, #12
200033a2:	dd08      	ble.n	200033b6 <__adddf3+0x16a>
200033a4:	f102 0c14 	add.w	ip, r2, #20
200033a8:	f1c2 020c 	rsb	r2, r2, #12
200033ac:	fa01 f00c 	lsl.w	r0, r1, ip
200033b0:	fa21 f102 	lsr.w	r1, r1, r2
200033b4:	e00c      	b.n	200033d0 <__adddf3+0x184>
200033b6:	f102 0214 	add.w	r2, r2, #20
200033ba:	bfd8      	it	le
200033bc:	f1c2 0c20 	rsble	ip, r2, #32
200033c0:	fa01 f102 	lsl.w	r1, r1, r2
200033c4:	fa20 fc0c 	lsr.w	ip, r0, ip
200033c8:	bfdc      	itt	le
200033ca:	ea41 010c 	orrle.w	r1, r1, ip
200033ce:	4090      	lslle	r0, r2
200033d0:	1ae4      	subs	r4, r4, r3
200033d2:	bfa2      	ittt	ge
200033d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
200033d8:	4329      	orrge	r1, r5
200033da:	bd30      	popge	{r4, r5, pc}
200033dc:	ea6f 0404 	mvn.w	r4, r4
200033e0:	3c1f      	subs	r4, #31
200033e2:	da1c      	bge.n	2000341e <__adddf3+0x1d2>
200033e4:	340c      	adds	r4, #12
200033e6:	dc0e      	bgt.n	20003406 <__adddf3+0x1ba>
200033e8:	f104 0414 	add.w	r4, r4, #20
200033ec:	f1c4 0220 	rsb	r2, r4, #32
200033f0:	fa20 f004 	lsr.w	r0, r0, r4
200033f4:	fa01 f302 	lsl.w	r3, r1, r2
200033f8:	ea40 0003 	orr.w	r0, r0, r3
200033fc:	fa21 f304 	lsr.w	r3, r1, r4
20003400:	ea45 0103 	orr.w	r1, r5, r3
20003404:	bd30      	pop	{r4, r5, pc}
20003406:	f1c4 040c 	rsb	r4, r4, #12
2000340a:	f1c4 0220 	rsb	r2, r4, #32
2000340e:	fa20 f002 	lsr.w	r0, r0, r2
20003412:	fa01 f304 	lsl.w	r3, r1, r4
20003416:	ea40 0003 	orr.w	r0, r0, r3
2000341a:	4629      	mov	r1, r5
2000341c:	bd30      	pop	{r4, r5, pc}
2000341e:	fa21 f004 	lsr.w	r0, r1, r4
20003422:	4629      	mov	r1, r5
20003424:	bd30      	pop	{r4, r5, pc}
20003426:	f094 0f00 	teq	r4, #0
2000342a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
2000342e:	bf06      	itte	eq
20003430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
20003434:	3401      	addeq	r4, #1
20003436:	3d01      	subne	r5, #1
20003438:	e74e      	b.n	200032d8 <__adddf3+0x8c>
2000343a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
2000343e:	bf18      	it	ne
20003440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
20003444:	d029      	beq.n	2000349a <__adddf3+0x24e>
20003446:	ea94 0f05 	teq	r4, r5
2000344a:	bf08      	it	eq
2000344c:	ea90 0f02 	teqeq	r0, r2
20003450:	d005      	beq.n	2000345e <__adddf3+0x212>
20003452:	ea54 0c00 	orrs.w	ip, r4, r0
20003456:	bf04      	itt	eq
20003458:	4619      	moveq	r1, r3
2000345a:	4610      	moveq	r0, r2
2000345c:	bd30      	pop	{r4, r5, pc}
2000345e:	ea91 0f03 	teq	r1, r3
20003462:	bf1e      	ittt	ne
20003464:	2100      	movne	r1, #0
20003466:	2000      	movne	r0, #0
20003468:	bd30      	popne	{r4, r5, pc}
2000346a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
2000346e:	d105      	bne.n	2000347c <__adddf3+0x230>
20003470:	0040      	lsls	r0, r0, #1
20003472:	4149      	adcs	r1, r1
20003474:	bf28      	it	cs
20003476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
2000347a:	bd30      	pop	{r4, r5, pc}
2000347c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
20003480:	bf3c      	itt	cc
20003482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
20003486:	bd30      	popcc	{r4, r5, pc}
20003488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
2000348c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
20003490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
20003494:	f04f 0000 	mov.w	r0, #0
20003498:	bd30      	pop	{r4, r5, pc}
2000349a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
2000349e:	bf1a      	itte	ne
200034a0:	4619      	movne	r1, r3
200034a2:	4610      	movne	r0, r2
200034a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
200034a8:	bf1c      	itt	ne
200034aa:	460b      	movne	r3, r1
200034ac:	4602      	movne	r2, r0
200034ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
200034b2:	bf06      	itte	eq
200034b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
200034b8:	ea91 0f03 	teqeq	r1, r3
200034bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
200034c0:	bd30      	pop	{r4, r5, pc}
200034c2:	bf00      	nop

200034c4 <__aeabi_ui2d>:
200034c4:	f090 0f00 	teq	r0, #0
200034c8:	bf04      	itt	eq
200034ca:	2100      	moveq	r1, #0
200034cc:	4770      	bxeq	lr
200034ce:	b530      	push	{r4, r5, lr}
200034d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
200034d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
200034d8:	f04f 0500 	mov.w	r5, #0
200034dc:	f04f 0100 	mov.w	r1, #0
200034e0:	e750      	b.n	20003384 <__adddf3+0x138>
200034e2:	bf00      	nop

200034e4 <__aeabi_i2d>:
200034e4:	f090 0f00 	teq	r0, #0
200034e8:	bf04      	itt	eq
200034ea:	2100      	moveq	r1, #0
200034ec:	4770      	bxeq	lr
200034ee:	b530      	push	{r4, r5, lr}
200034f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
200034f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
200034f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
200034fc:	bf48      	it	mi
200034fe:	4240      	negmi	r0, r0
20003500:	f04f 0100 	mov.w	r1, #0
20003504:	e73e      	b.n	20003384 <__adddf3+0x138>
20003506:	bf00      	nop

20003508 <__aeabi_f2d>:
20003508:	0042      	lsls	r2, r0, #1
2000350a:	ea4f 01e2 	mov.w	r1, r2, asr #3
2000350e:	ea4f 0131 	mov.w	r1, r1, rrx
20003512:	ea4f 7002 	mov.w	r0, r2, lsl #28
20003516:	bf1f      	itttt	ne
20003518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
2000351c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
20003520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
20003524:	4770      	bxne	lr
20003526:	f092 0f00 	teq	r2, #0
2000352a:	bf14      	ite	ne
2000352c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
20003530:	4770      	bxeq	lr
20003532:	b530      	push	{r4, r5, lr}
20003534:	f44f 7460 	mov.w	r4, #896	; 0x380
20003538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
2000353c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
20003540:	e720      	b.n	20003384 <__adddf3+0x138>
20003542:	bf00      	nop

20003544 <__aeabi_ul2d>:
20003544:	ea50 0201 	orrs.w	r2, r0, r1
20003548:	bf08      	it	eq
2000354a:	4770      	bxeq	lr
2000354c:	b530      	push	{r4, r5, lr}
2000354e:	f04f 0500 	mov.w	r5, #0
20003552:	e00a      	b.n	2000356a <__aeabi_l2d+0x16>

20003554 <__aeabi_l2d>:
20003554:	ea50 0201 	orrs.w	r2, r0, r1
20003558:	bf08      	it	eq
2000355a:	4770      	bxeq	lr
2000355c:	b530      	push	{r4, r5, lr}
2000355e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
20003562:	d502      	bpl.n	2000356a <__aeabi_l2d+0x16>
20003564:	4240      	negs	r0, r0
20003566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
2000356a:	f44f 6480 	mov.w	r4, #1024	; 0x400
2000356e:	f104 0432 	add.w	r4, r4, #50	; 0x32
20003572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
20003576:	f43f aedc 	beq.w	20003332 <__adddf3+0xe6>
2000357a:	f04f 0203 	mov.w	r2, #3
2000357e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
20003582:	bf18      	it	ne
20003584:	3203      	addne	r2, #3
20003586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
2000358a:	bf18      	it	ne
2000358c:	3203      	addne	r2, #3
2000358e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
20003592:	f1c2 0320 	rsb	r3, r2, #32
20003596:	fa00 fc03 	lsl.w	ip, r0, r3
2000359a:	fa20 f002 	lsr.w	r0, r0, r2
2000359e:	fa01 fe03 	lsl.w	lr, r1, r3
200035a2:	ea40 000e 	orr.w	r0, r0, lr
200035a6:	fa21 f102 	lsr.w	r1, r1, r2
200035aa:	4414      	add	r4, r2
200035ac:	e6c1      	b.n	20003332 <__adddf3+0xe6>
200035ae:	bf00      	nop

200035b0 <__aeabi_dmul>:
200035b0:	b570      	push	{r4, r5, r6, lr}
200035b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
200035b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
200035ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
200035be:	bf1d      	ittte	ne
200035c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
200035c4:	ea94 0f0c 	teqne	r4, ip
200035c8:	ea95 0f0c 	teqne	r5, ip
200035cc:	f000 f8de 	bleq	2000378c <__aeabi_dmul+0x1dc>
200035d0:	442c      	add	r4, r5
200035d2:	ea81 0603 	eor.w	r6, r1, r3
200035d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
200035da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
200035de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
200035e2:	bf18      	it	ne
200035e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
200035e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
200035ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
200035f0:	d038      	beq.n	20003664 <__aeabi_dmul+0xb4>
200035f2:	fba0 ce02 	umull	ip, lr, r0, r2
200035f6:	f04f 0500 	mov.w	r5, #0
200035fa:	fbe1 e502 	umlal	lr, r5, r1, r2
200035fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
20003602:	fbe0 e503 	umlal	lr, r5, r0, r3
20003606:	f04f 0600 	mov.w	r6, #0
2000360a:	fbe1 5603 	umlal	r5, r6, r1, r3
2000360e:	f09c 0f00 	teq	ip, #0
20003612:	bf18      	it	ne
20003614:	f04e 0e01 	orrne.w	lr, lr, #1
20003618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
2000361c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
20003620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
20003624:	d204      	bcs.n	20003630 <__aeabi_dmul+0x80>
20003626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
2000362a:	416d      	adcs	r5, r5
2000362c:	eb46 0606 	adc.w	r6, r6, r6
20003630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
20003634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
20003638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
2000363c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
20003640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
20003644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
20003648:	bf88      	it	hi
2000364a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
2000364e:	d81e      	bhi.n	2000368e <__aeabi_dmul+0xde>
20003650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
20003654:	bf08      	it	eq
20003656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
2000365a:	f150 0000 	adcs.w	r0, r0, #0
2000365e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
20003662:	bd70      	pop	{r4, r5, r6, pc}
20003664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
20003668:	ea46 0101 	orr.w	r1, r6, r1
2000366c:	ea40 0002 	orr.w	r0, r0, r2
20003670:	ea81 0103 	eor.w	r1, r1, r3
20003674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
20003678:	bfc2      	ittt	gt
2000367a:	ebd4 050c 	rsbsgt	r5, r4, ip
2000367e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
20003682:	bd70      	popgt	{r4, r5, r6, pc}
20003684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
20003688:	f04f 0e00 	mov.w	lr, #0
2000368c:	3c01      	subs	r4, #1
2000368e:	f300 80ab 	bgt.w	200037e8 <__aeabi_dmul+0x238>
20003692:	f114 0f36 	cmn.w	r4, #54	; 0x36
20003696:	bfde      	ittt	le
20003698:	2000      	movle	r0, #0
2000369a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
2000369e:	bd70      	pople	{r4, r5, r6, pc}
200036a0:	f1c4 0400 	rsb	r4, r4, #0
200036a4:	3c20      	subs	r4, #32
200036a6:	da35      	bge.n	20003714 <__aeabi_dmul+0x164>
200036a8:	340c      	adds	r4, #12
200036aa:	dc1b      	bgt.n	200036e4 <__aeabi_dmul+0x134>
200036ac:	f104 0414 	add.w	r4, r4, #20
200036b0:	f1c4 0520 	rsb	r5, r4, #32
200036b4:	fa00 f305 	lsl.w	r3, r0, r5
200036b8:	fa20 f004 	lsr.w	r0, r0, r4
200036bc:	fa01 f205 	lsl.w	r2, r1, r5
200036c0:	ea40 0002 	orr.w	r0, r0, r2
200036c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
200036c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
200036cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
200036d0:	fa21 f604 	lsr.w	r6, r1, r4
200036d4:	eb42 0106 	adc.w	r1, r2, r6
200036d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
200036dc:	bf08      	it	eq
200036de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
200036e2:	bd70      	pop	{r4, r5, r6, pc}
200036e4:	f1c4 040c 	rsb	r4, r4, #12
200036e8:	f1c4 0520 	rsb	r5, r4, #32
200036ec:	fa00 f304 	lsl.w	r3, r0, r4
200036f0:	fa20 f005 	lsr.w	r0, r0, r5
200036f4:	fa01 f204 	lsl.w	r2, r1, r4
200036f8:	ea40 0002 	orr.w	r0, r0, r2
200036fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
20003700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
20003704:	f141 0100 	adc.w	r1, r1, #0
20003708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
2000370c:	bf08      	it	eq
2000370e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
20003712:	bd70      	pop	{r4, r5, r6, pc}
20003714:	f1c4 0520 	rsb	r5, r4, #32
20003718:	fa00 f205 	lsl.w	r2, r0, r5
2000371c:	ea4e 0e02 	orr.w	lr, lr, r2
20003720:	fa20 f304 	lsr.w	r3, r0, r4
20003724:	fa01 f205 	lsl.w	r2, r1, r5
20003728:	ea43 0302 	orr.w	r3, r3, r2
2000372c:	fa21 f004 	lsr.w	r0, r1, r4
20003730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
20003734:	fa21 f204 	lsr.w	r2, r1, r4
20003738:	ea20 0002 	bic.w	r0, r0, r2
2000373c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
20003740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
20003744:	bf08      	it	eq
20003746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
2000374a:	bd70      	pop	{r4, r5, r6, pc}
2000374c:	f094 0f00 	teq	r4, #0
20003750:	d10f      	bne.n	20003772 <__aeabi_dmul+0x1c2>
20003752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
20003756:	0040      	lsls	r0, r0, #1
20003758:	eb41 0101 	adc.w	r1, r1, r1
2000375c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
20003760:	bf08      	it	eq
20003762:	3c01      	subeq	r4, #1
20003764:	d0f7      	beq.n	20003756 <__aeabi_dmul+0x1a6>
20003766:	ea41 0106 	orr.w	r1, r1, r6
2000376a:	f095 0f00 	teq	r5, #0
2000376e:	bf18      	it	ne
20003770:	4770      	bxne	lr
20003772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
20003776:	0052      	lsls	r2, r2, #1
20003778:	eb43 0303 	adc.w	r3, r3, r3
2000377c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
20003780:	bf08      	it	eq
20003782:	3d01      	subeq	r5, #1
20003784:	d0f7      	beq.n	20003776 <__aeabi_dmul+0x1c6>
20003786:	ea43 0306 	orr.w	r3, r3, r6
2000378a:	4770      	bx	lr
2000378c:	ea94 0f0c 	teq	r4, ip
20003790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
20003794:	bf18      	it	ne
20003796:	ea95 0f0c 	teqne	r5, ip
2000379a:	d00c      	beq.n	200037b6 <__aeabi_dmul+0x206>
2000379c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
200037a0:	bf18      	it	ne
200037a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
200037a6:	d1d1      	bne.n	2000374c <__aeabi_dmul+0x19c>
200037a8:	ea81 0103 	eor.w	r1, r1, r3
200037ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
200037b0:	f04f 0000 	mov.w	r0, #0
200037b4:	bd70      	pop	{r4, r5, r6, pc}
200037b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
200037ba:	bf06      	itte	eq
200037bc:	4610      	moveq	r0, r2
200037be:	4619      	moveq	r1, r3
200037c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
200037c4:	d019      	beq.n	200037fa <__aeabi_dmul+0x24a>
200037c6:	ea94 0f0c 	teq	r4, ip
200037ca:	d102      	bne.n	200037d2 <__aeabi_dmul+0x222>
200037cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
200037d0:	d113      	bne.n	200037fa <__aeabi_dmul+0x24a>
200037d2:	ea95 0f0c 	teq	r5, ip
200037d6:	d105      	bne.n	200037e4 <__aeabi_dmul+0x234>
200037d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
200037dc:	bf1c      	itt	ne
200037de:	4610      	movne	r0, r2
200037e0:	4619      	movne	r1, r3
200037e2:	d10a      	bne.n	200037fa <__aeabi_dmul+0x24a>
200037e4:	ea81 0103 	eor.w	r1, r1, r3
200037e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
200037ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
200037f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
200037f4:	f04f 0000 	mov.w	r0, #0
200037f8:	bd70      	pop	{r4, r5, r6, pc}
200037fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
200037fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
20003802:	bd70      	pop	{r4, r5, r6, pc}

20003804 <__aeabi_ddiv>:
20003804:	b570      	push	{r4, r5, r6, lr}
20003806:	f04f 0cff 	mov.w	ip, #255	; 0xff
2000380a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
2000380e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
20003812:	bf1d      	ittte	ne
20003814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
20003818:	ea94 0f0c 	teqne	r4, ip
2000381c:	ea95 0f0c 	teqne	r5, ip
20003820:	f000 f8a7 	bleq	20003972 <__aeabi_ddiv+0x16e>
20003824:	eba4 0405 	sub.w	r4, r4, r5
20003828:	ea81 0e03 	eor.w	lr, r1, r3
2000382c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
20003830:	ea4f 3101 	mov.w	r1, r1, lsl #12
20003834:	f000 8088 	beq.w	20003948 <__aeabi_ddiv+0x144>
20003838:	ea4f 3303 	mov.w	r3, r3, lsl #12
2000383c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
20003840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
20003844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
20003848:	ea4f 2202 	mov.w	r2, r2, lsl #8
2000384c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
20003850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
20003854:	ea4f 2600 	mov.w	r6, r0, lsl #8
20003858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
2000385c:	429d      	cmp	r5, r3
2000385e:	bf08      	it	eq
20003860:	4296      	cmpeq	r6, r2
20003862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
20003866:	f504 7440 	add.w	r4, r4, #768	; 0x300
2000386a:	d202      	bcs.n	20003872 <__aeabi_ddiv+0x6e>
2000386c:	085b      	lsrs	r3, r3, #1
2000386e:	ea4f 0232 	mov.w	r2, r2, rrx
20003872:	1ab6      	subs	r6, r6, r2
20003874:	eb65 0503 	sbc.w	r5, r5, r3
20003878:	085b      	lsrs	r3, r3, #1
2000387a:	ea4f 0232 	mov.w	r2, r2, rrx
2000387e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
20003882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
20003886:	ebb6 0e02 	subs.w	lr, r6, r2
2000388a:	eb75 0e03 	sbcs.w	lr, r5, r3
2000388e:	bf22      	ittt	cs
20003890:	1ab6      	subcs	r6, r6, r2
20003892:	4675      	movcs	r5, lr
20003894:	ea40 000c 	orrcs.w	r0, r0, ip
20003898:	085b      	lsrs	r3, r3, #1
2000389a:	ea4f 0232 	mov.w	r2, r2, rrx
2000389e:	ebb6 0e02 	subs.w	lr, r6, r2
200038a2:	eb75 0e03 	sbcs.w	lr, r5, r3
200038a6:	bf22      	ittt	cs
200038a8:	1ab6      	subcs	r6, r6, r2
200038aa:	4675      	movcs	r5, lr
200038ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
200038b0:	085b      	lsrs	r3, r3, #1
200038b2:	ea4f 0232 	mov.w	r2, r2, rrx
200038b6:	ebb6 0e02 	subs.w	lr, r6, r2
200038ba:	eb75 0e03 	sbcs.w	lr, r5, r3
200038be:	bf22      	ittt	cs
200038c0:	1ab6      	subcs	r6, r6, r2
200038c2:	4675      	movcs	r5, lr
200038c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
200038c8:	085b      	lsrs	r3, r3, #1
200038ca:	ea4f 0232 	mov.w	r2, r2, rrx
200038ce:	ebb6 0e02 	subs.w	lr, r6, r2
200038d2:	eb75 0e03 	sbcs.w	lr, r5, r3
200038d6:	bf22      	ittt	cs
200038d8:	1ab6      	subcs	r6, r6, r2
200038da:	4675      	movcs	r5, lr
200038dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
200038e0:	ea55 0e06 	orrs.w	lr, r5, r6
200038e4:	d018      	beq.n	20003918 <__aeabi_ddiv+0x114>
200038e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
200038ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
200038ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
200038f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
200038f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
200038fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
200038fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
20003902:	d1c0      	bne.n	20003886 <__aeabi_ddiv+0x82>
20003904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
20003908:	d10b      	bne.n	20003922 <__aeabi_ddiv+0x11e>
2000390a:	ea41 0100 	orr.w	r1, r1, r0
2000390e:	f04f 0000 	mov.w	r0, #0
20003912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
20003916:	e7b6      	b.n	20003886 <__aeabi_ddiv+0x82>
20003918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
2000391c:	bf04      	itt	eq
2000391e:	4301      	orreq	r1, r0
20003920:	2000      	moveq	r0, #0
20003922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
20003926:	bf88      	it	hi
20003928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
2000392c:	f63f aeaf 	bhi.w	2000368e <__aeabi_dmul+0xde>
20003930:	ebb5 0c03 	subs.w	ip, r5, r3
20003934:	bf04      	itt	eq
20003936:	ebb6 0c02 	subseq.w	ip, r6, r2
2000393a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
2000393e:	f150 0000 	adcs.w	r0, r0, #0
20003942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
20003946:	bd70      	pop	{r4, r5, r6, pc}
20003948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
2000394c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
20003950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
20003954:	bfc2      	ittt	gt
20003956:	ebd4 050c 	rsbsgt	r5, r4, ip
2000395a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
2000395e:	bd70      	popgt	{r4, r5, r6, pc}
20003960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
20003964:	f04f 0e00 	mov.w	lr, #0
20003968:	3c01      	subs	r4, #1
2000396a:	e690      	b.n	2000368e <__aeabi_dmul+0xde>
2000396c:	ea45 0e06 	orr.w	lr, r5, r6
20003970:	e68d      	b.n	2000368e <__aeabi_dmul+0xde>
20003972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
20003976:	ea94 0f0c 	teq	r4, ip
2000397a:	bf08      	it	eq
2000397c:	ea95 0f0c 	teqeq	r5, ip
20003980:	f43f af3b 	beq.w	200037fa <__aeabi_dmul+0x24a>
20003984:	ea94 0f0c 	teq	r4, ip
20003988:	d10a      	bne.n	200039a0 <__aeabi_ddiv+0x19c>
2000398a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
2000398e:	f47f af34 	bne.w	200037fa <__aeabi_dmul+0x24a>
20003992:	ea95 0f0c 	teq	r5, ip
20003996:	f47f af25 	bne.w	200037e4 <__aeabi_dmul+0x234>
2000399a:	4610      	mov	r0, r2
2000399c:	4619      	mov	r1, r3
2000399e:	e72c      	b.n	200037fa <__aeabi_dmul+0x24a>
200039a0:	ea95 0f0c 	teq	r5, ip
200039a4:	d106      	bne.n	200039b4 <__aeabi_ddiv+0x1b0>
200039a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
200039aa:	f43f aefd 	beq.w	200037a8 <__aeabi_dmul+0x1f8>
200039ae:	4610      	mov	r0, r2
200039b0:	4619      	mov	r1, r3
200039b2:	e722      	b.n	200037fa <__aeabi_dmul+0x24a>
200039b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
200039b8:	bf18      	it	ne
200039ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
200039be:	f47f aec5 	bne.w	2000374c <__aeabi_dmul+0x19c>
200039c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
200039c6:	f47f af0d 	bne.w	200037e4 <__aeabi_dmul+0x234>
200039ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
200039ce:	f47f aeeb 	bne.w	200037a8 <__aeabi_dmul+0x1f8>
200039d2:	e712      	b.n	200037fa <__aeabi_dmul+0x24a>

200039d4 <__aeabi_d2f>:
200039d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
200039d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
200039dc:	bf24      	itt	cs
200039de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
200039e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
200039e6:	d90d      	bls.n	20003a04 <__aeabi_d2f+0x30>
200039e8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
200039ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
200039f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
200039f4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
200039f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
200039fc:	bf08      	it	eq
200039fe:	f020 0001 	biceq.w	r0, r0, #1
20003a02:	4770      	bx	lr
20003a04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
20003a08:	d121      	bne.n	20003a4e <__aeabi_d2f+0x7a>
20003a0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
20003a0e:	bfbc      	itt	lt
20003a10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
20003a14:	4770      	bxlt	lr
20003a16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
20003a1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
20003a1e:	f1c2 0218 	rsb	r2, r2, #24
20003a22:	f1c2 0c20 	rsb	ip, r2, #32
20003a26:	fa10 f30c 	lsls.w	r3, r0, ip
20003a2a:	fa20 f002 	lsr.w	r0, r0, r2
20003a2e:	bf18      	it	ne
20003a30:	f040 0001 	orrne.w	r0, r0, #1
20003a34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
20003a38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
20003a3c:	fa03 fc0c 	lsl.w	ip, r3, ip
20003a40:	ea40 000c 	orr.w	r0, r0, ip
20003a44:	fa23 f302 	lsr.w	r3, r3, r2
20003a48:	ea4f 0343 	mov.w	r3, r3, lsl #1
20003a4c:	e7cc      	b.n	200039e8 <__aeabi_d2f+0x14>
20003a4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
20003a52:	d107      	bne.n	20003a64 <__aeabi_d2f+0x90>
20003a54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
20003a58:	bf1e      	ittt	ne
20003a5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
20003a5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
20003a62:	4770      	bxne	lr
20003a64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
20003a68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
20003a6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
20003a70:	4770      	bx	lr
20003a72:	bf00      	nop

20003a74 <__aeabi_fmul>:
20003a74:	f04f 0cff 	mov.w	ip, #255	; 0xff
20003a78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
20003a7c:	bf1e      	ittt	ne
20003a7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
20003a82:	ea92 0f0c 	teqne	r2, ip
20003a86:	ea93 0f0c 	teqne	r3, ip
20003a8a:	d06f      	beq.n	20003b6c <__aeabi_fmul+0xf8>
20003a8c:	441a      	add	r2, r3
20003a8e:	ea80 0c01 	eor.w	ip, r0, r1
20003a92:	0240      	lsls	r0, r0, #9
20003a94:	bf18      	it	ne
20003a96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
20003a9a:	d01e      	beq.n	20003ada <__aeabi_fmul+0x66>
20003a9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
20003aa0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
20003aa4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
20003aa8:	fba0 3101 	umull	r3, r1, r0, r1
20003aac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
20003ab0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
20003ab4:	bf3e      	ittt	cc
20003ab6:	0049      	lslcc	r1, r1, #1
20003ab8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
20003abc:	005b      	lslcc	r3, r3, #1
20003abe:	ea40 0001 	orr.w	r0, r0, r1
20003ac2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
20003ac6:	2afd      	cmp	r2, #253	; 0xfd
20003ac8:	d81d      	bhi.n	20003b06 <__aeabi_fmul+0x92>
20003aca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
20003ace:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
20003ad2:	bf08      	it	eq
20003ad4:	f020 0001 	biceq.w	r0, r0, #1
20003ad8:	4770      	bx	lr
20003ada:	f090 0f00 	teq	r0, #0
20003ade:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
20003ae2:	bf08      	it	eq
20003ae4:	0249      	lsleq	r1, r1, #9
20003ae6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
20003aea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
20003aee:	3a7f      	subs	r2, #127	; 0x7f
20003af0:	bfc2      	ittt	gt
20003af2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
20003af6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
20003afa:	4770      	bxgt	lr
20003afc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
20003b00:	f04f 0300 	mov.w	r3, #0
20003b04:	3a01      	subs	r2, #1
20003b06:	dc5d      	bgt.n	20003bc4 <__aeabi_fmul+0x150>
20003b08:	f112 0f19 	cmn.w	r2, #25
20003b0c:	bfdc      	itt	le
20003b0e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
20003b12:	4770      	bxle	lr
20003b14:	f1c2 0200 	rsb	r2, r2, #0
20003b18:	0041      	lsls	r1, r0, #1
20003b1a:	fa21 f102 	lsr.w	r1, r1, r2
20003b1e:	f1c2 0220 	rsb	r2, r2, #32
20003b22:	fa00 fc02 	lsl.w	ip, r0, r2
20003b26:	ea5f 0031 	movs.w	r0, r1, rrx
20003b2a:	f140 0000 	adc.w	r0, r0, #0
20003b2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
20003b32:	bf08      	it	eq
20003b34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
20003b38:	4770      	bx	lr
20003b3a:	f092 0f00 	teq	r2, #0
20003b3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
20003b42:	bf02      	ittt	eq
20003b44:	0040      	lsleq	r0, r0, #1
20003b46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
20003b4a:	3a01      	subeq	r2, #1
20003b4c:	d0f9      	beq.n	20003b42 <__aeabi_fmul+0xce>
20003b4e:	ea40 000c 	orr.w	r0, r0, ip
20003b52:	f093 0f00 	teq	r3, #0
20003b56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
20003b5a:	bf02      	ittt	eq
20003b5c:	0049      	lsleq	r1, r1, #1
20003b5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
20003b62:	3b01      	subeq	r3, #1
20003b64:	d0f9      	beq.n	20003b5a <__aeabi_fmul+0xe6>
20003b66:	ea41 010c 	orr.w	r1, r1, ip
20003b6a:	e78f      	b.n	20003a8c <__aeabi_fmul+0x18>
20003b6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
20003b70:	ea92 0f0c 	teq	r2, ip
20003b74:	bf18      	it	ne
20003b76:	ea93 0f0c 	teqne	r3, ip
20003b7a:	d00a      	beq.n	20003b92 <__aeabi_fmul+0x11e>
20003b7c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
20003b80:	bf18      	it	ne
20003b82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
20003b86:	d1d8      	bne.n	20003b3a <__aeabi_fmul+0xc6>
20003b88:	ea80 0001 	eor.w	r0, r0, r1
20003b8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
20003b90:	4770      	bx	lr
20003b92:	f090 0f00 	teq	r0, #0
20003b96:	bf17      	itett	ne
20003b98:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
20003b9c:	4608      	moveq	r0, r1
20003b9e:	f091 0f00 	teqne	r1, #0
20003ba2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
20003ba6:	d014      	beq.n	20003bd2 <__aeabi_fmul+0x15e>
20003ba8:	ea92 0f0c 	teq	r2, ip
20003bac:	d101      	bne.n	20003bb2 <__aeabi_fmul+0x13e>
20003bae:	0242      	lsls	r2, r0, #9
20003bb0:	d10f      	bne.n	20003bd2 <__aeabi_fmul+0x15e>
20003bb2:	ea93 0f0c 	teq	r3, ip
20003bb6:	d103      	bne.n	20003bc0 <__aeabi_fmul+0x14c>
20003bb8:	024b      	lsls	r3, r1, #9
20003bba:	bf18      	it	ne
20003bbc:	4608      	movne	r0, r1
20003bbe:	d108      	bne.n	20003bd2 <__aeabi_fmul+0x15e>
20003bc0:	ea80 0001 	eor.w	r0, r0, r1
20003bc4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
20003bc8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
20003bcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
20003bd0:	4770      	bx	lr
20003bd2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
20003bd6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
20003bda:	4770      	bx	lr

20003bdc <__aeabi_fdiv>:
20003bdc:	f04f 0cff 	mov.w	ip, #255	; 0xff
20003be0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
20003be4:	bf1e      	ittt	ne
20003be6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
20003bea:	ea92 0f0c 	teqne	r2, ip
20003bee:	ea93 0f0c 	teqne	r3, ip
20003bf2:	d069      	beq.n	20003cc8 <__aeabi_fdiv+0xec>
20003bf4:	eba2 0203 	sub.w	r2, r2, r3
20003bf8:	ea80 0c01 	eor.w	ip, r0, r1
20003bfc:	0249      	lsls	r1, r1, #9
20003bfe:	ea4f 2040 	mov.w	r0, r0, lsl #9
20003c02:	d037      	beq.n	20003c74 <__aeabi_fdiv+0x98>
20003c04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
20003c08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
20003c0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
20003c10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
20003c14:	428b      	cmp	r3, r1
20003c16:	bf38      	it	cc
20003c18:	005b      	lslcc	r3, r3, #1
20003c1a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
20003c1e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
20003c22:	428b      	cmp	r3, r1
20003c24:	bf24      	itt	cs
20003c26:	1a5b      	subcs	r3, r3, r1
20003c28:	ea40 000c 	orrcs.w	r0, r0, ip
20003c2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
20003c30:	bf24      	itt	cs
20003c32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
20003c36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
20003c3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
20003c3e:	bf24      	itt	cs
20003c40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
20003c44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
20003c48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
20003c4c:	bf24      	itt	cs
20003c4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
20003c52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
20003c56:	011b      	lsls	r3, r3, #4
20003c58:	bf18      	it	ne
20003c5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
20003c5e:	d1e0      	bne.n	20003c22 <__aeabi_fdiv+0x46>
20003c60:	2afd      	cmp	r2, #253	; 0xfd
20003c62:	f63f af50 	bhi.w	20003b06 <__aeabi_fmul+0x92>
20003c66:	428b      	cmp	r3, r1
20003c68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
20003c6c:	bf08      	it	eq
20003c6e:	f020 0001 	biceq.w	r0, r0, #1
20003c72:	4770      	bx	lr
20003c74:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
20003c78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
20003c7c:	327f      	adds	r2, #127	; 0x7f
20003c7e:	bfc2      	ittt	gt
20003c80:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
20003c84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
20003c88:	4770      	bxgt	lr
20003c8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
20003c8e:	f04f 0300 	mov.w	r3, #0
20003c92:	3a01      	subs	r2, #1
20003c94:	e737      	b.n	20003b06 <__aeabi_fmul+0x92>
20003c96:	f092 0f00 	teq	r2, #0
20003c9a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
20003c9e:	bf02      	ittt	eq
20003ca0:	0040      	lsleq	r0, r0, #1
20003ca2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
20003ca6:	3a01      	subeq	r2, #1
20003ca8:	d0f9      	beq.n	20003c9e <__aeabi_fdiv+0xc2>
20003caa:	ea40 000c 	orr.w	r0, r0, ip
20003cae:	f093 0f00 	teq	r3, #0
20003cb2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
20003cb6:	bf02      	ittt	eq
20003cb8:	0049      	lsleq	r1, r1, #1
20003cba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
20003cbe:	3b01      	subeq	r3, #1
20003cc0:	d0f9      	beq.n	20003cb6 <__aeabi_fdiv+0xda>
20003cc2:	ea41 010c 	orr.w	r1, r1, ip
20003cc6:	e795      	b.n	20003bf4 <__aeabi_fdiv+0x18>
20003cc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
20003ccc:	ea92 0f0c 	teq	r2, ip
20003cd0:	d108      	bne.n	20003ce4 <__aeabi_fdiv+0x108>
20003cd2:	0242      	lsls	r2, r0, #9
20003cd4:	f47f af7d 	bne.w	20003bd2 <__aeabi_fmul+0x15e>
20003cd8:	ea93 0f0c 	teq	r3, ip
20003cdc:	f47f af70 	bne.w	20003bc0 <__aeabi_fmul+0x14c>
20003ce0:	4608      	mov	r0, r1
20003ce2:	e776      	b.n	20003bd2 <__aeabi_fmul+0x15e>
20003ce4:	ea93 0f0c 	teq	r3, ip
20003ce8:	d104      	bne.n	20003cf4 <__aeabi_fdiv+0x118>
20003cea:	024b      	lsls	r3, r1, #9
20003cec:	f43f af4c 	beq.w	20003b88 <__aeabi_fmul+0x114>
20003cf0:	4608      	mov	r0, r1
20003cf2:	e76e      	b.n	20003bd2 <__aeabi_fmul+0x15e>
20003cf4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
20003cf8:	bf18      	it	ne
20003cfa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
20003cfe:	d1ca      	bne.n	20003c96 <__aeabi_fdiv+0xba>
20003d00:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
20003d04:	f47f af5c 	bne.w	20003bc0 <__aeabi_fmul+0x14c>
20003d08:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
20003d0c:	f47f af3c 	bne.w	20003b88 <__aeabi_fmul+0x114>
20003d10:	e75f      	b.n	20003bd2 <__aeabi_fmul+0x15e>
20003d12:	bf00      	nop

20003d14 <__aeabi_f2uiz>:
20003d14:	0042      	lsls	r2, r0, #1
20003d16:	d20e      	bcs.n	20003d36 <__aeabi_f2uiz+0x22>
20003d18:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
20003d1c:	d30b      	bcc.n	20003d36 <__aeabi_f2uiz+0x22>
20003d1e:	f04f 039e 	mov.w	r3, #158	; 0x9e
20003d22:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
20003d26:	d409      	bmi.n	20003d3c <__aeabi_f2uiz+0x28>
20003d28:	ea4f 2300 	mov.w	r3, r0, lsl #8
20003d2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
20003d30:	fa23 f002 	lsr.w	r0, r3, r2
20003d34:	4770      	bx	lr
20003d36:	f04f 0000 	mov.w	r0, #0
20003d3a:	4770      	bx	lr
20003d3c:	f112 0f61 	cmn.w	r2, #97	; 0x61
20003d40:	d101      	bne.n	20003d46 <__aeabi_f2uiz+0x32>
20003d42:	0242      	lsls	r2, r0, #9
20003d44:	d102      	bne.n	20003d4c <__aeabi_f2uiz+0x38>
20003d46:	f04f 30ff 	mov.w	r0, #4294967295
20003d4a:	4770      	bx	lr
20003d4c:	f04f 0000 	mov.w	r0, #0
20003d50:	4770      	bx	lr
20003d52:	bf00      	nop

20003d54 <__libc_init_array>:
20003d54:	b570      	push	{r4, r5, r6, lr}
20003d56:	f244 1638 	movw	r6, #16696	; 0x4138
20003d5a:	f244 1538 	movw	r5, #16696	; 0x4138
20003d5e:	f2c2 0600 	movt	r6, #8192	; 0x2000
20003d62:	f2c2 0500 	movt	r5, #8192	; 0x2000
20003d66:	1b76      	subs	r6, r6, r5
20003d68:	10b6      	asrs	r6, r6, #2
20003d6a:	d006      	beq.n	20003d7a <__libc_init_array+0x26>
20003d6c:	2400      	movs	r4, #0
20003d6e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
20003d72:	3401      	adds	r4, #1
20003d74:	4798      	blx	r3
20003d76:	42a6      	cmp	r6, r4
20003d78:	d8f9      	bhi.n	20003d6e <__libc_init_array+0x1a>
20003d7a:	f244 1538 	movw	r5, #16696	; 0x4138
20003d7e:	f244 163c 	movw	r6, #16700	; 0x413c
20003d82:	f2c2 0500 	movt	r5, #8192	; 0x2000
20003d86:	f2c2 0600 	movt	r6, #8192	; 0x2000
20003d8a:	1b76      	subs	r6, r6, r5
20003d8c:	f000 f9c8 	bl	20004120 <_init>
20003d90:	10b6      	asrs	r6, r6, #2
20003d92:	d006      	beq.n	20003da2 <__libc_init_array+0x4e>
20003d94:	2400      	movs	r4, #0
20003d96:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
20003d9a:	3401      	adds	r4, #1
20003d9c:	4798      	blx	r3
20003d9e:	42a6      	cmp	r6, r4
20003da0:	d8f9      	bhi.n	20003d96 <__libc_init_array+0x42>
20003da2:	bd70      	pop	{r4, r5, r6, pc}

20003da4 <memset>:
20003da4:	2a03      	cmp	r2, #3
20003da6:	b2c9      	uxtb	r1, r1
20003da8:	b430      	push	{r4, r5}
20003daa:	d807      	bhi.n	20003dbc <memset+0x18>
20003dac:	b122      	cbz	r2, 20003db8 <memset+0x14>
20003dae:	2300      	movs	r3, #0
20003db0:	54c1      	strb	r1, [r0, r3]
20003db2:	3301      	adds	r3, #1
20003db4:	4293      	cmp	r3, r2
20003db6:	d1fb      	bne.n	20003db0 <memset+0xc>
20003db8:	bc30      	pop	{r4, r5}
20003dba:	4770      	bx	lr
20003dbc:	eb00 0c02 	add.w	ip, r0, r2
20003dc0:	4603      	mov	r3, r0
20003dc2:	e001      	b.n	20003dc8 <memset+0x24>
20003dc4:	f803 1c01 	strb.w	r1, [r3, #-1]
20003dc8:	f003 0403 	and.w	r4, r3, #3
20003dcc:	461a      	mov	r2, r3
20003dce:	3301      	adds	r3, #1
20003dd0:	2c00      	cmp	r4, #0
20003dd2:	d1f7      	bne.n	20003dc4 <memset+0x20>
20003dd4:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
20003dd8:	ebc2 040c 	rsb	r4, r2, ip
20003ddc:	fb03 f301 	mul.w	r3, r3, r1
20003de0:	e01f      	b.n	20003e22 <memset+0x7e>
20003de2:	f842 3c40 	str.w	r3, [r2, #-64]
20003de6:	f842 3c3c 	str.w	r3, [r2, #-60]
20003dea:	f842 3c38 	str.w	r3, [r2, #-56]
20003dee:	f842 3c34 	str.w	r3, [r2, #-52]
20003df2:	f842 3c30 	str.w	r3, [r2, #-48]
20003df6:	f842 3c2c 	str.w	r3, [r2, #-44]
20003dfa:	f842 3c28 	str.w	r3, [r2, #-40]
20003dfe:	f842 3c24 	str.w	r3, [r2, #-36]
20003e02:	f842 3c20 	str.w	r3, [r2, #-32]
20003e06:	f842 3c1c 	str.w	r3, [r2, #-28]
20003e0a:	f842 3c18 	str.w	r3, [r2, #-24]
20003e0e:	f842 3c14 	str.w	r3, [r2, #-20]
20003e12:	f842 3c10 	str.w	r3, [r2, #-16]
20003e16:	f842 3c0c 	str.w	r3, [r2, #-12]
20003e1a:	f842 3c08 	str.w	r3, [r2, #-8]
20003e1e:	f842 3c04 	str.w	r3, [r2, #-4]
20003e22:	4615      	mov	r5, r2
20003e24:	3240      	adds	r2, #64	; 0x40
20003e26:	2c3f      	cmp	r4, #63	; 0x3f
20003e28:	f1a4 0440 	sub.w	r4, r4, #64	; 0x40
20003e2c:	dcd9      	bgt.n	20003de2 <memset+0x3e>
20003e2e:	462a      	mov	r2, r5
20003e30:	ebc5 040c 	rsb	r4, r5, ip
20003e34:	e007      	b.n	20003e46 <memset+0xa2>
20003e36:	f842 3c10 	str.w	r3, [r2, #-16]
20003e3a:	f842 3c0c 	str.w	r3, [r2, #-12]
20003e3e:	f842 3c08 	str.w	r3, [r2, #-8]
20003e42:	f842 3c04 	str.w	r3, [r2, #-4]
20003e46:	4615      	mov	r5, r2
20003e48:	3210      	adds	r2, #16
20003e4a:	2c0f      	cmp	r4, #15
20003e4c:	f1a4 0410 	sub.w	r4, r4, #16
20003e50:	dcf1      	bgt.n	20003e36 <memset+0x92>
20003e52:	462a      	mov	r2, r5
20003e54:	ebc5 050c 	rsb	r5, r5, ip
20003e58:	e001      	b.n	20003e5e <memset+0xba>
20003e5a:	f842 3c04 	str.w	r3, [r2, #-4]
20003e5e:	4614      	mov	r4, r2
20003e60:	3204      	adds	r2, #4
20003e62:	2d03      	cmp	r5, #3
20003e64:	f1a5 0504 	sub.w	r5, r5, #4
20003e68:	dcf7      	bgt.n	20003e5a <memset+0xb6>
20003e6a:	e001      	b.n	20003e70 <memset+0xcc>
20003e6c:	f804 1b01 	strb.w	r1, [r4], #1
20003e70:	4564      	cmp	r4, ip
20003e72:	d3fb      	bcc.n	20003e6c <memset+0xc8>
20003e74:	e7a0      	b.n	20003db8 <memset+0x14>
20003e76:	bf00      	nop

20003e78 <strncmp>:
20003e78:	b430      	push	{r4, r5}
20003e7a:	4613      	mov	r3, r2
20003e7c:	2a00      	cmp	r2, #0
20003e7e:	d043      	beq.n	20003f08 <strncmp+0x90>
20003e80:	ea41 0200 	orr.w	r2, r1, r0
20003e84:	f012 0f03 	tst.w	r2, #3
20003e88:	d125      	bne.n	20003ed6 <strncmp+0x5e>
20003e8a:	2b03      	cmp	r3, #3
20003e8c:	4604      	mov	r4, r0
20003e8e:	460d      	mov	r5, r1
20003e90:	d93d      	bls.n	20003f0e <strncmp+0x96>
20003e92:	6802      	ldr	r2, [r0, #0]
20003e94:	6809      	ldr	r1, [r1, #0]
20003e96:	428a      	cmp	r2, r1
20003e98:	d139      	bne.n	20003f0e <strncmp+0x96>
20003e9a:	3b04      	subs	r3, #4
20003e9c:	d034      	beq.n	20003f08 <strncmp+0x90>
20003e9e:	f1a2 3101 	sub.w	r1, r2, #16843009	; 0x1010101
20003ea2:	ea21 0202 	bic.w	r2, r1, r2
20003ea6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
20003eaa:	d00d      	beq.n	20003ec8 <strncmp+0x50>
20003eac:	e02c      	b.n	20003f08 <strncmp+0x90>
20003eae:	6822      	ldr	r2, [r4, #0]
20003eb0:	6829      	ldr	r1, [r5, #0]
20003eb2:	f1a2 3001 	sub.w	r0, r2, #16843009	; 0x1010101
20003eb6:	428a      	cmp	r2, r1
20003eb8:	ea20 0002 	bic.w	r0, r0, r2
20003ebc:	d127      	bne.n	20003f0e <strncmp+0x96>
20003ebe:	3b04      	subs	r3, #4
20003ec0:	d022      	beq.n	20003f08 <strncmp+0x90>
20003ec2:	f010 3f80 	tst.w	r0, #2155905152	; 0x80808080
20003ec6:	d11f      	bne.n	20003f08 <strncmp+0x90>
20003ec8:	3404      	adds	r4, #4
20003eca:	3504      	adds	r5, #4
20003ecc:	2b03      	cmp	r3, #3
20003ece:	d8ee      	bhi.n	20003eae <strncmp+0x36>
20003ed0:	4620      	mov	r0, r4
20003ed2:	4629      	mov	r1, r5
20003ed4:	b1f3      	cbz	r3, 20003f14 <strncmp+0x9c>
20003ed6:	7804      	ldrb	r4, [r0, #0]
20003ed8:	3b01      	subs	r3, #1
20003eda:	f891 c000 	ldrb.w	ip, [r1]
20003ede:	4564      	cmp	r4, ip
20003ee0:	d10f      	bne.n	20003f02 <strncmp+0x8a>
20003ee2:	b18b      	cbz	r3, 20003f08 <strncmp+0x90>
20003ee4:	b184      	cbz	r4, 20003f08 <strncmp+0x90>
20003ee6:	3b01      	subs	r3, #1
20003ee8:	2200      	movs	r2, #0
20003eea:	e002      	b.n	20003ef2 <strncmp+0x7a>
20003eec:	b163      	cbz	r3, 20003f08 <strncmp+0x90>
20003eee:	b15c      	cbz	r4, 20003f08 <strncmp+0x90>
20003ef0:	3b01      	subs	r3, #1
20003ef2:	1884      	adds	r4, r0, r2
20003ef4:	188d      	adds	r5, r1, r2
20003ef6:	3201      	adds	r2, #1
20003ef8:	7864      	ldrb	r4, [r4, #1]
20003efa:	f895 c001 	ldrb.w	ip, [r5, #1]
20003efe:	4564      	cmp	r4, ip
20003f00:	d0f4      	beq.n	20003eec <strncmp+0x74>
20003f02:	ebcc 0004 	rsb	r0, ip, r4
20003f06:	e000      	b.n	20003f0a <strncmp+0x92>
20003f08:	2000      	movs	r0, #0
20003f0a:	bc30      	pop	{r4, r5}
20003f0c:	4770      	bx	lr
20003f0e:	4620      	mov	r0, r4
20003f10:	4629      	mov	r1, r5
20003f12:	e7e0      	b.n	20003ed6 <strncmp+0x5e>
20003f14:	7824      	ldrb	r4, [r4, #0]
20003f16:	f895 c000 	ldrb.w	ip, [r5]
20003f1a:	ebcc 0004 	rsb	r0, ip, r4
20003f1e:	e7f4      	b.n	20003f0a <strncmp+0x92>

20003f20 <initcmd>:
20003f20:	03ef 8003 cf02 0003 30c1 04ed 0364 8112     .........0..d...
20003f30:	03e8 0085 cb78 3905 002c 0234 01f7 ea20     ....x..9,.4... .
20003f40:	0002 c000 2301 01c1 c510 3e02 c728 8601     .....#.....>(...
20003f50:	0136 3748 0001 013a b155 0002 b618 0803     6.H7..:.U.......
20003f60:	2782 01f2 2600 0101 0fe0 310f 0c2b 080e     .'...&.....1+...
20003f70:	f14e 0737 0310 090e e100 000f 140e 1103     N.7.............
20003f80:	3107 48c1 0f08 310c 0f36 8011 8029 0000     .1.H...16...)...
20003f90:	4441 4443 7269 6365 4974 706e 7475 305f     ADCDirectInput_0
20003fa0:	0000 0000 4441 4443 7269 6365 4974 706e     ....ADCDirectInp
20003fb0:	7475 315f 0000 0000                         ut_1....

20003fb8 <g_gpio_irqn_lut>:
20003fb8:	0020 0021 0022 0023 0024 0025 0026 0027      .!.".#.$.%.&.'.
20003fc8:	0028 0029 002a 002b 002c 002d 002e 002f     (.).*.+.,.-.../.
20003fd8:	0030 0031 0032 0033 0034 0035 0036 0037     0.1.2.3.4.5.6.7.
20003fe8:	0038 0039 003a 003b 003c 003d 003e 003f     8.9.:.;.<.=.>.?.

20003ff8 <g_config_reg_lut>:
20003ff8:	3000 4001 3004 4001 3008 4001 300c 4001     .0.@.0.@.0.@.0.@
20004008:	3010 4001 3014 4001 3018 4001 301c 4001     .0.@.0.@.0.@.0.@
20004018:	3020 4001 3024 4001 3028 4001 302c 4001      0.@$0.@(0.@,0.@
20004028:	3030 4001 3034 4001 3038 4001 303c 4001     00.@40.@80.@<0.@
20004038:	3040 4001 3044 4001 3048 4001 304c 4001     @0.@D0.@H0.@L0.@
20004048:	3050 4001 3054 4001 3058 4001 305c 4001     P0.@T0.@X0.@\0.@
20004058:	3060 4001 3064 4001 3068 4001 306c 4001     `0.@d0.@h0.@l0.@
20004068:	3070 4001 3074 4001 3078 4001 307c 4001     p0.@t0.@x0.@|0.@

20004078 <C.16.2565>:
20004078:	0001 0000 0002 0000 0004 0000 0001 0000     ................

20004088 <g_ace_channel_2_name>:
20004088:	4441 4443 7269 6365 4974 706e 7475 315f     ADCDirectInput_1
20004098:	0000 0000                                   ....

2000409c <g_ace_channel_1_name>:
2000409c:	4453 5f44 0030 0000                         SDD_0...

200040a4 <g_ace_channel_0_name>:
200040a4:	4441 4443 7269 6365 4974 706e 7475 305f     ADCDirectInput_0
200040b4:	0000 0000                                   ....

200040b8 <g_ace_channel_3_name>:
200040b8:	4453 5f44 0031 0000                         SDD_1...

200040c0 <channel_quad_lut>:
200040c0:	00ff 0000 0100 0101 ff01 ffff ffff ffff     ................
200040d0:	02ff 0202 0302 0303 ff03 ffff ffff ffff     ................
200040e0:	04ff 0404 ff04 ffff ffff ffff ffff ffff     ................

200040f0 <channel_type_lut>:
200040f0:	0000 0100 0002 0100 0002 0000 ff00 00ff     ................
20004100:	0000 0100 0002 0100 0002 0000 ff00 00ff     ................
20004110:	0000 0100 ff02 ffff 00ff 0000 ff00 00ff     ................

20004120 <_init>:
20004120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20004122:	bf00      	nop
20004124:	bcf8      	pop	{r3, r4, r5, r6, r7}
20004126:	bc08      	pop	{r3}
20004128:	469e      	mov	lr, r3
2000412a:	4770      	bx	lr

2000412c <_fini>:
2000412c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000412e:	bf00      	nop
20004130:	bcf8      	pop	{r3, r4, r5, r6, r7}
20004132:	bc08      	pop	{r3}
20004134:	469e      	mov	lr, r3
20004136:	4770      	bx	lr

20004138 <__frame_dummy_init_array_entry>:
20004138:	0485 2000                                   ... 

2000413c <__do_global_dtors_aux_fini_array_entry>:
2000413c:	0471 2000                                   q.. 
