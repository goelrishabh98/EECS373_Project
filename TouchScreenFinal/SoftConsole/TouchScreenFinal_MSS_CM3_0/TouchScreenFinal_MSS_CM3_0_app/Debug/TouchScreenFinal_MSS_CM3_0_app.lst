
TouchScreenFinal_MSS_CM3_0_app:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c64  20000000  20000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  20002c64  20002c64  0000ac64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000128  20002ca8  20002ca8  0000aca8  2**2
                  ALLOC
  3 .stack        00003000  20002dd0  20002dd0  0000aca8  2**0
                  ALLOC
  4 .comment      000001ae  00000000  00000000  0000aca8  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000006d0  00000000  00000000  0000ae56  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000012c8  00000000  00000000  0000b526  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00009574  00000000  00000000  0000c7ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000f38  00000000  00000000  00015d62  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003461  00000000  00000000  00016c9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000017fc  00000000  00000000  0001a0fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003e70  00000000  00000000  0001b8f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000026cb  00000000  00000000  0001f768  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 0003a17b  00000000  00000000  00021e33  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000025  00000000  00000000  0005bfae  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 00000688  00000000  00000000  0005bfd3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

20000000 <__text_start>:
20000000:	20010000 	.word	0x20010000
20000004:	20000299 	.word	0x20000299
20000008:	20000309 	.word	0x20000309
2000000c:	2000030b 	.word	0x2000030b
20000010:	2000030d 	.word	0x2000030d
20000014:	2000030f 	.word	0x2000030f
20000018:	20000311 	.word	0x20000311
	...
2000002c:	20000313 	.word	0x20000313
20000030:	20000315 	.word	0x20000315
20000034:	00000000 	.word	0x00000000
20000038:	20000317 	.word	0x20000317
2000003c:	20000319 	.word	0x20000319
20000040:	2000031b 	.word	0x2000031b
20000044:	2000031d 	.word	0x2000031d
20000048:	2000031f 	.word	0x2000031f
2000004c:	20000321 	.word	0x20000321
20000050:	20000323 	.word	0x20000323
20000054:	20000325 	.word	0x20000325
20000058:	20000327 	.word	0x20000327
2000005c:	20000329 	.word	0x20000329
20000060:	2000032b 	.word	0x2000032b
20000064:	2000032d 	.word	0x2000032d
20000068:	2000032f 	.word	0x2000032f
2000006c:	20000331 	.word	0x20000331
20000070:	20001a11 	.word	0x20001a11
20000074:	20001a3d 	.word	0x20001a3d
20000078:	20000337 	.word	0x20000337
2000007c:	20000339 	.word	0x20000339
20000080:	2000033b 	.word	0x2000033b
20000084:	2000033d 	.word	0x2000033d
20000088:	2000033f 	.word	0x2000033f
2000008c:	20000341 	.word	0x20000341
20000090:	20000343 	.word	0x20000343
20000094:	20000345 	.word	0x20000345
20000098:	20000347 	.word	0x20000347
2000009c:	20000349 	.word	0x20000349
200000a0:	2000034b 	.word	0x2000034b
	...
200000bc:	2000034d 	.word	0x2000034d
200000c0:	2000034f 	.word	0x2000034f
200000c4:	20000351 	.word	0x20000351
200000c8:	20000353 	.word	0x20000353
200000cc:	20000355 	.word	0x20000355
200000d0:	20000357 	.word	0x20000357
200000d4:	20000359 	.word	0x20000359
200000d8:	2000035b 	.word	0x2000035b
200000dc:	2000035d 	.word	0x2000035d
200000e0:	2000035f 	.word	0x2000035f
200000e4:	20000361 	.word	0x20000361
200000e8:	20000363 	.word	0x20000363
200000ec:	20000365 	.word	0x20000365
200000f0:	20000367 	.word	0x20000367
200000f4:	20000369 	.word	0x20000369
200000f8:	2000036b 	.word	0x2000036b
200000fc:	2000036d 	.word	0x2000036d
20000100:	2000036f 	.word	0x2000036f
20000104:	20000371 	.word	0x20000371
20000108:	20000373 	.word	0x20000373
2000010c:	20000375 	.word	0x20000375
20000110:	20000377 	.word	0x20000377
20000114:	20000379 	.word	0x20000379
20000118:	2000037b 	.word	0x2000037b
2000011c:	2000037d 	.word	0x2000037d
20000120:	2000037f 	.word	0x2000037f
20000124:	20000381 	.word	0x20000381
20000128:	20000383 	.word	0x20000383
2000012c:	20000385 	.word	0x20000385
20000130:	20000387 	.word	0x20000387
20000134:	20000389 	.word	0x20000389
20000138:	2000038b 	.word	0x2000038b
2000013c:	2000038d 	.word	0x2000038d
20000140:	2000038f 	.word	0x2000038f
20000144:	20000391 	.word	0x20000391
20000148:	20000393 	.word	0x20000393
2000014c:	20000395 	.word	0x20000395
20000150:	20000397 	.word	0x20000397
20000154:	20000399 	.word	0x20000399
20000158:	2000039b 	.word	0x2000039b
2000015c:	2000039d 	.word	0x2000039d
20000160:	2000039f 	.word	0x2000039f
20000164:	200003a1 	.word	0x200003a1
20000168:	200003a3 	.word	0x200003a3
2000016c:	200003a5 	.word	0x200003a5
20000170:	200003a7 	.word	0x200003a7
20000174:	200003a9 	.word	0x200003a9
20000178:	200003ab 	.word	0x200003ab
2000017c:	200003ad 	.word	0x200003ad
20000180:	200003af 	.word	0x200003af
20000184:	200003b1 	.word	0x200003b1
20000188:	200003b3 	.word	0x200003b3
2000018c:	200003b5 	.word	0x200003b5
20000190:	200003b7 	.word	0x200003b7
20000194:	200003b9 	.word	0x200003b9
20000198:	200003bb 	.word	0x200003bb
2000019c:	200003bd 	.word	0x200003bd
200001a0:	200003bf 	.word	0x200003bf
200001a4:	200003c1 	.word	0x200003c1
200001a8:	200003c3 	.word	0x200003c3
200001ac:	200003c5 	.word	0x200003c5
200001b0:	200003c7 	.word	0x200003c7
200001b4:	200003c9 	.word	0x200003c9
200001b8:	200003cb 	.word	0x200003cb
200001bc:	200003cd 	.word	0x200003cd
200001c0:	200003cf 	.word	0x200003cf
200001c4:	200003d1 	.word	0x200003d1
200001c8:	200003d3 	.word	0x200003d3
200001cc:	200003d5 	.word	0x200003d5
200001d0:	200003d7 	.word	0x200003d7
200001d4:	200003d9 	.word	0x200003d9
200001d8:	200003db 	.word	0x200003db
200001dc:	200003dd 	.word	0x200003dd
200001e0:	200003df 	.word	0x200003df
200001e4:	200003e1 	.word	0x200003e1
200001e8:	200003e3 	.word	0x200003e3
200001ec:	200003e5 	.word	0x200003e5
200001f0:	200003e7 	.word	0x200003e7
200001f4:	200003e9 	.word	0x200003e9
200001f8:	200003eb 	.word	0x200003eb
200001fc:	200003ed 	.word	0x200003ed
20000200:	200003ef 	.word	0x200003ef
20000204:	200003f1 	.word	0x200003f1
20000208:	200003f3 	.word	0x200003f3
2000020c:	200003f5 	.word	0x200003f5
20000210:	200003f7 	.word	0x200003f7
20000214:	200003f9 	.word	0x200003f9
20000218:	20001e81 	.word	0x20001e81
2000021c:	20001ea9 	.word	0x20001ea9
20000220:	20001ed1 	.word	0x20001ed1
20000224:	20001ef9 	.word	0x20001ef9
20000228:	20001f21 	.word	0x20001f21
2000022c:	20001f49 	.word	0x20001f49
20000230:	20001f71 	.word	0x20001f71
20000234:	20001f99 	.word	0x20001f99
20000238:	20001fc1 	.word	0x20001fc1
2000023c:	20001fe9 	.word	0x20001fe9
20000240:	20002011 	.word	0x20002011
20000244:	20002039 	.word	0x20002039
20000248:	20002061 	.word	0x20002061
2000024c:	20002089 	.word	0x20002089
20000250:	200020b1 	.word	0x200020b1
20000254:	200020d9 	.word	0x200020d9
20000258:	20002101 	.word	0x20002101
2000025c:	20002129 	.word	0x20002129
20000260:	20002151 	.word	0x20002151
20000264:	20002179 	.word	0x20002179
20000268:	200021a1 	.word	0x200021a1
2000026c:	200021c9 	.word	0x200021c9
20000270:	200021f1 	.word	0x200021f1
20000274:	20002219 	.word	0x20002219
20000278:	20002241 	.word	0x20002241
2000027c:	20002269 	.word	0x20002269
20000280:	20002291 	.word	0x20002291
20000284:	200022b9 	.word	0x200022b9
20000288:	200022e1 	.word	0x200022e1
2000028c:	20002309 	.word	0x20002309
20000290:	20002331 	.word	0x20002331
20000294:	20002359 	.word	0x20002359

20000298 <Reset_Handler>:
20000298:	4868      	ldr	r0, [pc, #416]	; (2000043c <ACE_ADC2_FifoEmpty_IRQHandler+0x44>)
2000029a:	4780      	blx	r0
2000029c:	4868      	ldr	r0, [pc, #416]	; (20000440 <ACE_ADC2_FifoEmpty_IRQHandler+0x48>)
2000029e:	2800      	cmp	r0, #0
200002a0:	d10b      	bne.n	200002ba <copy_data>
200002a2:	4868      	ldr	r0, [pc, #416]	; (20000444 <ACE_ADC2_FifoEmpty_IRQHandler+0x4c>)
200002a4:	4968      	ldr	r1, [pc, #416]	; (20000448 <ACE_ADC2_FifoEmpty_IRQHandler+0x50>)
200002a6:	4a69      	ldr	r2, [pc, #420]	; (2000044c <ACE_ADC2_FifoEmpty_IRQHandler+0x54>)
200002a8:	4288      	cmp	r0, r1
200002aa:	d006      	beq.n	200002ba <copy_data>

200002ac <copy_code_loop>:
200002ac:	4291      	cmp	r1, r2
200002ae:	bf1c      	itt	ne
200002b0:	f850 3b04 	ldrne.w	r3, [r0], #4
200002b4:	f841 3b04 	strne.w	r3, [r1], #4
200002b8:	d1f8      	bne.n	200002ac <copy_code_loop>

200002ba <copy_data>:
200002ba:	4865      	ldr	r0, [pc, #404]	; (20000450 <ACE_ADC2_FifoEmpty_IRQHandler+0x58>)
200002bc:	4965      	ldr	r1, [pc, #404]	; (20000454 <ACE_ADC2_FifoEmpty_IRQHandler+0x5c>)
200002be:	4a66      	ldr	r2, [pc, #408]	; (20000458 <ACE_ADC2_FifoEmpty_IRQHandler+0x60>)
200002c0:	4288      	cmp	r0, r1
200002c2:	d006      	beq.n	200002d2 <clear_bss>

200002c4 <copy_data_loop>:
200002c4:	4291      	cmp	r1, r2
200002c6:	bf1c      	itt	ne
200002c8:	f850 3b04 	ldrne.w	r3, [r0], #4
200002cc:	f841 3b04 	strne.w	r3, [r1], #4
200002d0:	d1f8      	bne.n	200002c4 <copy_data_loop>

200002d2 <clear_bss>:
200002d2:	4862      	ldr	r0, [pc, #392]	; (2000045c <ACE_ADC2_FifoEmpty_IRQHandler+0x64>)
200002d4:	4962      	ldr	r1, [pc, #392]	; (20000460 <ACE_ADC2_FifoEmpty_IRQHandler+0x68>)
200002d6:	4a63      	ldr	r2, [pc, #396]	; (20000464 <ACE_ADC2_FifoEmpty_IRQHandler+0x6c>)

200002d8 <clear_bss_loop>:
200002d8:	4291      	cmp	r1, r2
200002da:	bf18      	it	ne
200002dc:	f841 0b04 	strne.w	r0, [r1], #4
200002e0:	d1fa      	bne.n	200002d8 <clear_bss_loop>
	...

200002f0 <call_glob_ctor>:
200002f0:	f8df 0174 	ldr.w	r0, [pc, #372]	; 20000468 <ACE_ADC2_FifoEmpty_IRQHandler+0x70>
200002f4:	f20f 0e03 	addw	lr, pc, #3
200002f8:	4700      	bx	r0

200002fa <branch_to_main>:
200002fa:	f04f 0000 	mov.w	r0, #0
200002fe:	f04f 0100 	mov.w	r1, #0
20000302:	f8df f168 	ldr.w	pc, [pc, #360]	; 2000046c <ACE_ADC2_FifoEmpty_IRQHandler+0x74>

20000306 <ExitLoop>:
20000306:	e7fe      	b.n	20000306 <ExitLoop>

20000308 <NMI_Handler>:
20000308:	e7fe      	b.n	20000308 <NMI_Handler>

2000030a <HardFault_Handler>:
2000030a:	e7fe      	b.n	2000030a <HardFault_Handler>

2000030c <MemManage_Handler>:
2000030c:	e7fe      	b.n	2000030c <MemManage_Handler>

2000030e <BusFault_Handler>:
2000030e:	e7fe      	b.n	2000030e <BusFault_Handler>

20000310 <UsageFault_Handler>:
20000310:	e7fe      	b.n	20000310 <UsageFault_Handler>

20000312 <SVC_Handler>:
20000312:	e7fe      	b.n	20000312 <SVC_Handler>

20000314 <DebugMon_Handler>:
20000314:	e7fe      	b.n	20000314 <DebugMon_Handler>

20000316 <PendSV_Handler>:
20000316:	e7fe      	b.n	20000316 <PendSV_Handler>

20000318 <SysTick_Handler>:
20000318:	e7fe      	b.n	20000318 <SysTick_Handler>

2000031a <WdogWakeup_IRQHandler>:
2000031a:	e7fe      	b.n	2000031a <WdogWakeup_IRQHandler>

2000031c <BrownOut_1_5V_IRQHandler>:
2000031c:	e7fe      	b.n	2000031c <BrownOut_1_5V_IRQHandler>

2000031e <BrownOut_3_3V_IRQHandler>:
2000031e:	e7fe      	b.n	2000031e <BrownOut_3_3V_IRQHandler>

20000320 <RTC_Match_IRQHandler>:
20000320:	e7fe      	b.n	20000320 <RTC_Match_IRQHandler>

20000322 <RTCIF_Pub_IRQHandler>:
20000322:	e7fe      	b.n	20000322 <RTCIF_Pub_IRQHandler>

20000324 <EthernetMAC_IRQHandler>:
20000324:	e7fe      	b.n	20000324 <EthernetMAC_IRQHandler>

20000326 <IAP_IRQHandler>:
20000326:	e7fe      	b.n	20000326 <IAP_IRQHandler>

20000328 <ENVM0_IRQHandler>:
20000328:	e7fe      	b.n	20000328 <ENVM0_IRQHandler>

2000032a <ENVM1_IRQHandler>:
2000032a:	e7fe      	b.n	2000032a <ENVM1_IRQHandler>

2000032c <DMA_IRQHandler>:
2000032c:	e7fe      	b.n	2000032c <DMA_IRQHandler>

2000032e <UART0_IRQHandler>:
2000032e:	e7fe      	b.n	2000032e <UART0_IRQHandler>

20000330 <UART1_IRQHandler>:
20000330:	e7fe      	b.n	20000330 <UART1_IRQHandler>
20000332:	e7fe      	b.n	20000332 <UART1_IRQHandler+0x2>
20000334:	e7fe      	b.n	20000334 <UART1_IRQHandler+0x4>

20000336 <I2C0_IRQHandler>:
20000336:	e7fe      	b.n	20000336 <I2C0_IRQHandler>

20000338 <I2C0_SMBAlert_IRQHandler>:
20000338:	e7fe      	b.n	20000338 <I2C0_SMBAlert_IRQHandler>

2000033a <I2C0_SMBus_IRQHandler>:
2000033a:	e7fe      	b.n	2000033a <I2C0_SMBus_IRQHandler>

2000033c <I2C1_IRQHandler>:
2000033c:	e7fe      	b.n	2000033c <I2C1_IRQHandler>

2000033e <I2C1_SMBAlert_IRQHandler>:
2000033e:	e7fe      	b.n	2000033e <I2C1_SMBAlert_IRQHandler>

20000340 <I2C1_SMBus_IRQHandler>:
20000340:	e7fe      	b.n	20000340 <I2C1_SMBus_IRQHandler>

20000342 <Timer1_IRQHandler>:
20000342:	e7fe      	b.n	20000342 <Timer1_IRQHandler>

20000344 <Timer2_IRQHandler>:
20000344:	e7fe      	b.n	20000344 <Timer2_IRQHandler>

20000346 <PLL_Lock_IRQHandler>:
20000346:	e7fe      	b.n	20000346 <PLL_Lock_IRQHandler>

20000348 <PLL_LockLost_IRQHandler>:
20000348:	e7fe      	b.n	20000348 <PLL_LockLost_IRQHandler>

2000034a <CommError_IRQHandler>:
2000034a:	e7fe      	b.n	2000034a <CommError_IRQHandler>

2000034c <Fabric_IRQHandler>:
2000034c:	e7fe      	b.n	2000034c <Fabric_IRQHandler>

2000034e <GPIO0_IRQHandler>:
2000034e:	e7fe      	b.n	2000034e <GPIO0_IRQHandler>

20000350 <GPIO1_IRQHandler>:
20000350:	e7fe      	b.n	20000350 <GPIO1_IRQHandler>

20000352 <GPIO2_IRQHandler>:
20000352:	e7fe      	b.n	20000352 <GPIO2_IRQHandler>

20000354 <GPIO3_IRQHandler>:
20000354:	e7fe      	b.n	20000354 <GPIO3_IRQHandler>

20000356 <GPIO4_IRQHandler>:
20000356:	e7fe      	b.n	20000356 <GPIO4_IRQHandler>

20000358 <GPIO5_IRQHandler>:
20000358:	e7fe      	b.n	20000358 <GPIO5_IRQHandler>

2000035a <GPIO6_IRQHandler>:
2000035a:	e7fe      	b.n	2000035a <GPIO6_IRQHandler>

2000035c <GPIO7_IRQHandler>:
2000035c:	e7fe      	b.n	2000035c <GPIO7_IRQHandler>

2000035e <GPIO8_IRQHandler>:
2000035e:	e7fe      	b.n	2000035e <GPIO8_IRQHandler>

20000360 <GPIO9_IRQHandler>:
20000360:	e7fe      	b.n	20000360 <GPIO9_IRQHandler>

20000362 <GPIO10_IRQHandler>:
20000362:	e7fe      	b.n	20000362 <GPIO10_IRQHandler>

20000364 <GPIO11_IRQHandler>:
20000364:	e7fe      	b.n	20000364 <GPIO11_IRQHandler>

20000366 <GPIO12_IRQHandler>:
20000366:	e7fe      	b.n	20000366 <GPIO12_IRQHandler>

20000368 <GPIO13_IRQHandler>:
20000368:	e7fe      	b.n	20000368 <GPIO13_IRQHandler>

2000036a <GPIO14_IRQHandler>:
2000036a:	e7fe      	b.n	2000036a <GPIO14_IRQHandler>

2000036c <GPIO15_IRQHandler>:
2000036c:	e7fe      	b.n	2000036c <GPIO15_IRQHandler>

2000036e <GPIO16_IRQHandler>:
2000036e:	e7fe      	b.n	2000036e <GPIO16_IRQHandler>

20000370 <GPIO17_IRQHandler>:
20000370:	e7fe      	b.n	20000370 <GPIO17_IRQHandler>

20000372 <GPIO18_IRQHandler>:
20000372:	e7fe      	b.n	20000372 <GPIO18_IRQHandler>

20000374 <GPIO19_IRQHandler>:
20000374:	e7fe      	b.n	20000374 <GPIO19_IRQHandler>

20000376 <GPIO20_IRQHandler>:
20000376:	e7fe      	b.n	20000376 <GPIO20_IRQHandler>

20000378 <GPIO21_IRQHandler>:
20000378:	e7fe      	b.n	20000378 <GPIO21_IRQHandler>

2000037a <GPIO22_IRQHandler>:
2000037a:	e7fe      	b.n	2000037a <GPIO22_IRQHandler>

2000037c <GPIO23_IRQHandler>:
2000037c:	e7fe      	b.n	2000037c <GPIO23_IRQHandler>

2000037e <GPIO24_IRQHandler>:
2000037e:	e7fe      	b.n	2000037e <GPIO24_IRQHandler>

20000380 <GPIO25_IRQHandler>:
20000380:	e7fe      	b.n	20000380 <GPIO25_IRQHandler>

20000382 <GPIO26_IRQHandler>:
20000382:	e7fe      	b.n	20000382 <GPIO26_IRQHandler>

20000384 <GPIO27_IRQHandler>:
20000384:	e7fe      	b.n	20000384 <GPIO27_IRQHandler>

20000386 <GPIO28_IRQHandler>:
20000386:	e7fe      	b.n	20000386 <GPIO28_IRQHandler>

20000388 <GPIO29_IRQHandler>:
20000388:	e7fe      	b.n	20000388 <GPIO29_IRQHandler>

2000038a <GPIO30_IRQHandler>:
2000038a:	e7fe      	b.n	2000038a <GPIO30_IRQHandler>

2000038c <GPIO31_IRQHandler>:
2000038c:	e7fe      	b.n	2000038c <GPIO31_IRQHandler>

2000038e <ACE_PC0_Flag0_IRQHandler>:
2000038e:	e7fe      	b.n	2000038e <ACE_PC0_Flag0_IRQHandler>

20000390 <ACE_PC0_Flag1_IRQHandler>:
20000390:	e7fe      	b.n	20000390 <ACE_PC0_Flag1_IRQHandler>

20000392 <ACE_PC0_Flag2_IRQHandler>:
20000392:	e7fe      	b.n	20000392 <ACE_PC0_Flag2_IRQHandler>

20000394 <ACE_PC0_Flag3_IRQHandler>:
20000394:	e7fe      	b.n	20000394 <ACE_PC0_Flag3_IRQHandler>

20000396 <ACE_PC1_Flag0_IRQHandler>:
20000396:	e7fe      	b.n	20000396 <ACE_PC1_Flag0_IRQHandler>

20000398 <ACE_PC1_Flag1_IRQHandler>:
20000398:	e7fe      	b.n	20000398 <ACE_PC1_Flag1_IRQHandler>

2000039a <ACE_PC1_Flag2_IRQHandler>:
2000039a:	e7fe      	b.n	2000039a <ACE_PC1_Flag2_IRQHandler>

2000039c <ACE_PC1_Flag3_IRQHandler>:
2000039c:	e7fe      	b.n	2000039c <ACE_PC1_Flag3_IRQHandler>

2000039e <ACE_PC2_Flag0_IRQHandler>:
2000039e:	e7fe      	b.n	2000039e <ACE_PC2_Flag0_IRQHandler>

200003a0 <ACE_PC2_Flag1_IRQHandler>:
200003a0:	e7fe      	b.n	200003a0 <ACE_PC2_Flag1_IRQHandler>

200003a2 <ACE_PC2_Flag2_IRQHandler>:
200003a2:	e7fe      	b.n	200003a2 <ACE_PC2_Flag2_IRQHandler>

200003a4 <ACE_PC2_Flag3_IRQHandler>:
200003a4:	e7fe      	b.n	200003a4 <ACE_PC2_Flag3_IRQHandler>

200003a6 <ACE_ADC0_DataValid_IRQHandler>:
200003a6:	e7fe      	b.n	200003a6 <ACE_ADC0_DataValid_IRQHandler>

200003a8 <ACE_ADC1_DataValid_IRQHandler>:
200003a8:	e7fe      	b.n	200003a8 <ACE_ADC1_DataValid_IRQHandler>

200003aa <ACE_ADC2_DataValid_IRQHandler>:
200003aa:	e7fe      	b.n	200003aa <ACE_ADC2_DataValid_IRQHandler>

200003ac <ACE_ADC0_CalDone_IRQHandler>:
200003ac:	e7fe      	b.n	200003ac <ACE_ADC0_CalDone_IRQHandler>

200003ae <ACE_ADC1_CalDone_IRQHandler>:
200003ae:	e7fe      	b.n	200003ae <ACE_ADC1_CalDone_IRQHandler>

200003b0 <ACE_ADC2_CalDone_IRQHandler>:
200003b0:	e7fe      	b.n	200003b0 <ACE_ADC2_CalDone_IRQHandler>

200003b2 <ACE_ADC0_CalStart_IRQHandler>:
200003b2:	e7fe      	b.n	200003b2 <ACE_ADC0_CalStart_IRQHandler>

200003b4 <ACE_ADC1_CalStart_IRQHandler>:
200003b4:	e7fe      	b.n	200003b4 <ACE_ADC1_CalStart_IRQHandler>

200003b6 <ACE_ADC2_CalStart_IRQHandler>:
200003b6:	e7fe      	b.n	200003b6 <ACE_ADC2_CalStart_IRQHandler>

200003b8 <ACE_Comp0_Fall_IRQHandler>:
200003b8:	e7fe      	b.n	200003b8 <ACE_Comp0_Fall_IRQHandler>

200003ba <ACE_Comp1_Fall_IRQHandler>:
200003ba:	e7fe      	b.n	200003ba <ACE_Comp1_Fall_IRQHandler>

200003bc <ACE_Comp2_Fall_IRQHandler>:
200003bc:	e7fe      	b.n	200003bc <ACE_Comp2_Fall_IRQHandler>

200003be <ACE_Comp3_Fall_IRQHandler>:
200003be:	e7fe      	b.n	200003be <ACE_Comp3_Fall_IRQHandler>

200003c0 <ACE_Comp4_Fall_IRQHandler>:
200003c0:	e7fe      	b.n	200003c0 <ACE_Comp4_Fall_IRQHandler>

200003c2 <ACE_Comp5_Fall_IRQHandler>:
200003c2:	e7fe      	b.n	200003c2 <ACE_Comp5_Fall_IRQHandler>

200003c4 <ACE_Comp6_Fall_IRQHandler>:
200003c4:	e7fe      	b.n	200003c4 <ACE_Comp6_Fall_IRQHandler>

200003c6 <ACE_Comp7_Fall_IRQHandler>:
200003c6:	e7fe      	b.n	200003c6 <ACE_Comp7_Fall_IRQHandler>

200003c8 <ACE_Comp8_Fall_IRQHandler>:
200003c8:	e7fe      	b.n	200003c8 <ACE_Comp8_Fall_IRQHandler>

200003ca <ACE_Comp9_Fall_IRQHandler>:
200003ca:	e7fe      	b.n	200003ca <ACE_Comp9_Fall_IRQHandler>

200003cc <ACE_Comp10_Fall_IRQHandler>:
200003cc:	e7fe      	b.n	200003cc <ACE_Comp10_Fall_IRQHandler>

200003ce <ACE_Comp11_Fall_IRQHandler>:
200003ce:	e7fe      	b.n	200003ce <ACE_Comp11_Fall_IRQHandler>

200003d0 <ACE_Comp0_Rise_IRQHandler>:
200003d0:	e7fe      	b.n	200003d0 <ACE_Comp0_Rise_IRQHandler>

200003d2 <ACE_Comp1_Rise_IRQHandler>:
200003d2:	e7fe      	b.n	200003d2 <ACE_Comp1_Rise_IRQHandler>

200003d4 <ACE_Comp2_Rise_IRQHandler>:
200003d4:	e7fe      	b.n	200003d4 <ACE_Comp2_Rise_IRQHandler>

200003d6 <ACE_Comp3_Rise_IRQHandler>:
200003d6:	e7fe      	b.n	200003d6 <ACE_Comp3_Rise_IRQHandler>

200003d8 <ACE_Comp4_Rise_IRQHandler>:
200003d8:	e7fe      	b.n	200003d8 <ACE_Comp4_Rise_IRQHandler>

200003da <ACE_Comp5_Rise_IRQHandler>:
200003da:	e7fe      	b.n	200003da <ACE_Comp5_Rise_IRQHandler>

200003dc <ACE_Comp6_Rise_IRQHandler>:
200003dc:	e7fe      	b.n	200003dc <ACE_Comp6_Rise_IRQHandler>

200003de <ACE_Comp7_Rise_IRQHandler>:
200003de:	e7fe      	b.n	200003de <ACE_Comp7_Rise_IRQHandler>

200003e0 <ACE_Comp8_Rise_IRQHandler>:
200003e0:	e7fe      	b.n	200003e0 <ACE_Comp8_Rise_IRQHandler>

200003e2 <ACE_Comp9_Rise_IRQHandler>:
200003e2:	e7fe      	b.n	200003e2 <ACE_Comp9_Rise_IRQHandler>

200003e4 <ACE_Comp10_Rise_IRQHandler>:
200003e4:	e7fe      	b.n	200003e4 <ACE_Comp10_Rise_IRQHandler>

200003e6 <ACE_Comp11_Rise_IRQHandler>:
200003e6:	e7fe      	b.n	200003e6 <ACE_Comp11_Rise_IRQHandler>

200003e8 <ACE_ADC0_FifoFull_IRQHandler>:
200003e8:	e7fe      	b.n	200003e8 <ACE_ADC0_FifoFull_IRQHandler>

200003ea <ACE_ADC0_FifoAFull_IRQHandler>:
200003ea:	e7fe      	b.n	200003ea <ACE_ADC0_FifoAFull_IRQHandler>

200003ec <ACE_ADC0_FifoEmpty_IRQHandler>:
200003ec:	e7fe      	b.n	200003ec <ACE_ADC0_FifoEmpty_IRQHandler>

200003ee <ACE_ADC1_FifoFull_IRQHandler>:
200003ee:	e7fe      	b.n	200003ee <ACE_ADC1_FifoFull_IRQHandler>

200003f0 <ACE_ADC1_FifoAFull_IRQHandler>:
200003f0:	e7fe      	b.n	200003f0 <ACE_ADC1_FifoAFull_IRQHandler>

200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>:
200003f2:	e7fe      	b.n	200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>

200003f4 <ACE_ADC2_FifoFull_IRQHandler>:
200003f4:	e7fe      	b.n	200003f4 <ACE_ADC2_FifoFull_IRQHandler>

200003f6 <ACE_ADC2_FifoAFull_IRQHandler>:
200003f6:	e7fe      	b.n	200003f6 <ACE_ADC2_FifoAFull_IRQHandler>

200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>:
200003f8:	e7fe      	b.n	200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>
200003fa:	e7fe      	b.n	200003fa <ACE_ADC2_FifoEmpty_IRQHandler+0x2>
200003fc:	e7fe      	b.n	200003fc <ACE_ADC2_FifoEmpty_IRQHandler+0x4>
200003fe:	e7fe      	b.n	200003fe <ACE_ADC2_FifoEmpty_IRQHandler+0x6>
20000400:	e7fe      	b.n	20000400 <ACE_ADC2_FifoEmpty_IRQHandler+0x8>
20000402:	e7fe      	b.n	20000402 <ACE_ADC2_FifoEmpty_IRQHandler+0xa>
20000404:	e7fe      	b.n	20000404 <ACE_ADC2_FifoEmpty_IRQHandler+0xc>
20000406:	e7fe      	b.n	20000406 <ACE_ADC2_FifoEmpty_IRQHandler+0xe>
20000408:	e7fe      	b.n	20000408 <ACE_ADC2_FifoEmpty_IRQHandler+0x10>
2000040a:	e7fe      	b.n	2000040a <ACE_ADC2_FifoEmpty_IRQHandler+0x12>
2000040c:	e7fe      	b.n	2000040c <ACE_ADC2_FifoEmpty_IRQHandler+0x14>
2000040e:	e7fe      	b.n	2000040e <ACE_ADC2_FifoEmpty_IRQHandler+0x16>
20000410:	e7fe      	b.n	20000410 <ACE_ADC2_FifoEmpty_IRQHandler+0x18>
20000412:	e7fe      	b.n	20000412 <ACE_ADC2_FifoEmpty_IRQHandler+0x1a>
20000414:	e7fe      	b.n	20000414 <ACE_ADC2_FifoEmpty_IRQHandler+0x1c>
20000416:	e7fe      	b.n	20000416 <ACE_ADC2_FifoEmpty_IRQHandler+0x1e>
20000418:	e7fe      	b.n	20000418 <ACE_ADC2_FifoEmpty_IRQHandler+0x20>
2000041a:	e7fe      	b.n	2000041a <ACE_ADC2_FifoEmpty_IRQHandler+0x22>
2000041c:	e7fe      	b.n	2000041c <ACE_ADC2_FifoEmpty_IRQHandler+0x24>
2000041e:	e7fe      	b.n	2000041e <ACE_ADC2_FifoEmpty_IRQHandler+0x26>
20000420:	e7fe      	b.n	20000420 <ACE_ADC2_FifoEmpty_IRQHandler+0x28>
20000422:	e7fe      	b.n	20000422 <ACE_ADC2_FifoEmpty_IRQHandler+0x2a>
20000424:	e7fe      	b.n	20000424 <ACE_ADC2_FifoEmpty_IRQHandler+0x2c>
20000426:	e7fe      	b.n	20000426 <ACE_ADC2_FifoEmpty_IRQHandler+0x2e>
20000428:	e7fe      	b.n	20000428 <ACE_ADC2_FifoEmpty_IRQHandler+0x30>
2000042a:	e7fe      	b.n	2000042a <ACE_ADC2_FifoEmpty_IRQHandler+0x32>
2000042c:	e7fe      	b.n	2000042c <ACE_ADC2_FifoEmpty_IRQHandler+0x34>
2000042e:	e7fe      	b.n	2000042e <ACE_ADC2_FifoEmpty_IRQHandler+0x36>
20000430:	e7fe      	b.n	20000430 <ACE_ADC2_FifoEmpty_IRQHandler+0x38>
20000432:	e7fe      	b.n	20000432 <ACE_ADC2_FifoEmpty_IRQHandler+0x3a>
20000434:	e7fe      	b.n	20000434 <ACE_ADC2_FifoEmpty_IRQHandler+0x3c>
20000436:	e7fe      	b.n	20000436 <ACE_ADC2_FifoEmpty_IRQHandler+0x3e>
20000438:	e7fe      	b.n	20000438 <ACE_ADC2_FifoEmpty_IRQHandler+0x40>
2000043a:	0000      	.short	0x0000
2000043c:	20001c65 	.word	0x20001c65
20000440:	00000000 	.word	0x00000000
20000444:	20000000 	.word	0x20000000
20000448:	20000000 	.word	0x20000000
2000044c:	20002c64 	.word	0x20002c64
20000450:	20002c64 	.word	0x20002c64
20000454:	20002c64 	.word	0x20002c64
20000458:	20002ca8 	.word	0x20002ca8
2000045c:	00000000 	.word	0x00000000
20000460:	20002ca8 	.word	0x20002ca8
20000464:	20002dd0 	.word	0x20002dd0
20000468:	20002889 	.word	0x20002889
2000046c:	200004a1 	.word	0x200004a1

20000470 <__do_global_dtors_aux>:
20000470:	f642 43a8 	movw	r3, #11432	; 0x2ca8
20000474:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000478:	781a      	ldrb	r2, [r3, #0]
2000047a:	b90a      	cbnz	r2, 20000480 <__do_global_dtors_aux+0x10>
2000047c:	2001      	movs	r0, #1
2000047e:	7018      	strb	r0, [r3, #0]
20000480:	4770      	bx	lr
20000482:	bf00      	nop

20000484 <frame_dummy>:
20000484:	f642 4064 	movw	r0, #11364	; 0x2c64
20000488:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000048c:	b508      	push	{r3, lr}
2000048e:	6803      	ldr	r3, [r0, #0]
20000490:	b12b      	cbz	r3, 2000049e <frame_dummy+0x1a>
20000492:	f240 0300 	movw	r3, #0
20000496:	f2c0 0300 	movt	r3, #0
2000049a:	b103      	cbz	r3, 2000049e <frame_dummy+0x1a>
2000049c:	4798      	blx	r3
2000049e:	bd08      	pop	{r3, pc}

200004a0 <main>:
#include "touchscreen.h"

int main()
{
200004a0:	b580      	push	{r7, lr}
200004a2:	b086      	sub	sp, #24
200004a4:	af02      	add	r7, sp, #8
	touchscreen_begin();
200004a6:	f000 f919 	bl	200006dc <touchscreen_begin>

	drawFillScreen(ILI9341_BLUE);
200004aa:	f04f 001f 	mov.w	r0, #31
200004ae:	f000 fb29 	bl	20000b04 <drawFillScreen>
	drawRectanglePixel(5, 5, 110, 152, ILI9341_WHITE);
200004b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
200004b6:	9300      	str	r3, [sp, #0]
200004b8:	f04f 0005 	mov.w	r0, #5
200004bc:	f04f 0105 	mov.w	r1, #5
200004c0:	f04f 026e 	mov.w	r2, #110	; 0x6e
200004c4:	f04f 0398 	mov.w	r3, #152	; 0x98
200004c8:	f000 faee 	bl	20000aa8 <drawRectanglePixel>
	drawRectanglePixel(5, 165, 110, 152, ILI9341_WHITE);
200004cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
200004d0:	9300      	str	r3, [sp, #0]
200004d2:	f04f 0005 	mov.w	r0, #5
200004d6:	f04f 01a5 	mov.w	r1, #165	; 0xa5
200004da:	f04f 026e 	mov.w	r2, #110	; 0x6e
200004de:	f04f 0398 	mov.w	r3, #152	; 0x98
200004e2:	f000 fae1 	bl	20000aa8 <drawRectanglePixel>
	drawRectanglePixel(120, 5, 115, 312, ILI9341_WHITE);
200004e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
200004ea:	9300      	str	r3, [sp, #0]
200004ec:	f04f 0078 	mov.w	r0, #120	; 0x78
200004f0:	f04f 0105 	mov.w	r1, #5
200004f4:	f04f 0273 	mov.w	r2, #115	; 0x73
200004f8:	f44f 739c 	mov.w	r3, #312	; 0x138
200004fc:	f000 fad4 	bl	20000aa8 <drawRectanglePixel>

	drawText1(ILI9341_BLACK);
20000500:	f04f 0000 	mov.w	r0, #0
20000504:	f000 fb14 	bl	20000b30 <drawText1>
20000508:	e000      	b.n	2000050c <main+0x6c>
		int z = getZ(x);

		if(z >= 0){
			drawRectanglePixel(x-2, y-2, 4, 4, ILI9341_YELLOW);
		}
	}
2000050a:	bf00      	nop
	//drawText2(ILI9341_BLACK);
	//drawText3(ILI9341_BLACK);

	while( 1 )
	{
		int x = 240 - getX();
2000050c:	f000 f95a 	bl	200007c4 <getX>
20000510:	4603      	mov	r3, r0
20000512:	b29b      	uxth	r3, r3
20000514:	b21b      	sxth	r3, r3
20000516:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
2000051a:	607b      	str	r3, [r7, #4]
		int y = 320 - getY();
2000051c:	f000 f9b0 	bl	20000880 <getY>
20000520:	4603      	mov	r3, r0
20000522:	b29b      	uxth	r3, r3
20000524:	b21b      	sxth	r3, r3
20000526:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
2000052a:	60bb      	str	r3, [r7, #8]
		int z = getZ(x);
2000052c:	687b      	ldr	r3, [r7, #4]
2000052e:	b29b      	uxth	r3, r3
20000530:	4618      	mov	r0, r3
20000532:	f000 f9fd 	bl	20000930 <getZ>
20000536:	4603      	mov	r3, r0
20000538:	b29b      	uxth	r3, r3
2000053a:	b21b      	sxth	r3, r3
2000053c:	60fb      	str	r3, [r7, #12]

		if(z >= 0){
2000053e:	68fb      	ldr	r3, [r7, #12]
20000540:	2b00      	cmp	r3, #0
20000542:	dbe2      	blt.n	2000050a <main+0x6a>
			drawRectanglePixel(x-2, y-2, 4, 4, ILI9341_YELLOW);
20000544:	687b      	ldr	r3, [r7, #4]
20000546:	b29b      	uxth	r3, r3
20000548:	f1a3 0302 	sub.w	r3, r3, #2
2000054c:	b29a      	uxth	r2, r3
2000054e:	68bb      	ldr	r3, [r7, #8]
20000550:	b29b      	uxth	r3, r3
20000552:	f1a3 0302 	sub.w	r3, r3, #2
20000556:	b29b      	uxth	r3, r3
20000558:	f64f 71e0 	movw	r1, #65504	; 0xffe0
2000055c:	9100      	str	r1, [sp, #0]
2000055e:	4610      	mov	r0, r2
20000560:	4619      	mov	r1, r3
20000562:	f04f 0204 	mov.w	r2, #4
20000566:	f04f 0304 	mov.w	r3, #4
2000056a:	f000 fa9d 	bl	20000aa8 <drawRectanglePixel>
		}
	}
2000056e:	e7cd      	b.n	2000050c <main+0x6c>

20000570 <NVIC_DisableIRQ>:
 * 
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
20000570:	b480      	push	{r7}
20000572:	b083      	sub	sp, #12
20000574:	af00      	add	r7, sp, #0
20000576:	4603      	mov	r3, r0
20000578:	80fb      	strh	r3, [r7, #6]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
2000057a:	f24e 1300 	movw	r3, #57600	; 0xe100
2000057e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000582:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20000586:	ea4f 1252 	mov.w	r2, r2, lsr #5
2000058a:	88f9      	ldrh	r1, [r7, #6]
2000058c:	f001 011f 	and.w	r1, r1, #31
20000590:	f04f 0001 	mov.w	r0, #1
20000594:	fa00 f101 	lsl.w	r1, r0, r1
20000598:	f102 0220 	add.w	r2, r2, #32
2000059c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
200005a0:	f107 070c 	add.w	r7, r7, #12
200005a4:	46bd      	mov	sp, r7
200005a6:	bc80      	pop	{r7}
200005a8:	4770      	bx	lr
200005aa:	bf00      	nop

200005ac <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
200005ac:	b480      	push	{r7}
200005ae:	b083      	sub	sp, #12
200005b0:	af00      	add	r7, sp, #0
200005b2:	4603      	mov	r3, r0
200005b4:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
200005b6:	f24e 1300 	movw	r3, #57600	; 0xe100
200005ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
200005be:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
200005c2:	ea4f 1252 	mov.w	r2, r2, lsr #5
200005c6:	88f9      	ldrh	r1, [r7, #6]
200005c8:	f001 011f 	and.w	r1, r1, #31
200005cc:	f04f 0001 	mov.w	r0, #1
200005d0:	fa00 f101 	lsl.w	r1, r0, r1
200005d4:	f102 0260 	add.w	r2, r2, #96	; 0x60
200005d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
200005dc:	f107 070c 	add.w	r7, r7, #12
200005e0:	46bd      	mov	sp, r7
200005e2:	bc80      	pop	{r7}
200005e4:	4770      	bx	lr
200005e6:	bf00      	nop

200005e8 <MSS_TIM1_init>:
    one-shot mode. Allowed values for this parameter are:
        - MSS_TIMER_PERIODIC_MODE
        - MSS_TIMER_ONE_SHOT_MODE
 */
static __INLINE void MSS_TIM1_init( mss_timer_mode_t mode )
{
200005e8:	b580      	push	{r7, lr}
200005ea:	b082      	sub	sp, #8
200005ec:	af00      	add	r7, sp, #0
200005ee:	4603      	mov	r3, r0
200005f0:	71fb      	strb	r3, [r7, #7]
    NVIC_DisableIRQ( Timer1_IRQn );             /* Disable timer 1 irq in the Cortex-M3 NVIC */  
200005f2:	f04f 0014 	mov.w	r0, #20
200005f6:	f7ff ffbb 	bl	20000570 <NVIC_DisableIRQ>
    
    SYSREG->SOFT_RST_CR &= ~SYSREG_TIMER_SOFTRESET_MASK; /* Take timer block out of reset */
200005fa:	f242 0300 	movw	r3, #8192	; 0x2000
200005fe:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000602:	f242 0200 	movw	r2, #8192	; 0x2000
20000606:	f2ce 0204 	movt	r2, #57348	; 0xe004
2000060a:	6b12      	ldr	r2, [r2, #48]	; 0x30
2000060c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20000610:	631a      	str	r2, [r3, #48]	; 0x30
    
    TIMER->TIM64_MODE = 0U;                     /* switch to 32 bits mode */
20000612:	f245 0300 	movw	r3, #20480	; 0x5000
20000616:	f2c4 0300 	movt	r3, #16384	; 0x4000
2000061a:	f04f 0200 	mov.w	r2, #0
2000061e:	655a      	str	r2, [r3, #84]	; 0x54
    
    TIMER_BITBAND->TIM1ENABLE = 0U;             /* disable timer */
20000620:	f240 0300 	movw	r3, #0
20000624:	f2c4 230a 	movt	r3, #16906	; 0x420a
20000628:	f04f 0200 	mov.w	r2, #0
2000062c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    TIMER_BITBAND->TIM1INTEN = 0U;              /* disable interrupt */
20000630:	f240 0300 	movw	r3, #0
20000634:	f2c4 230a 	movt	r3, #16906	; 0x420a
20000638:	f04f 0200 	mov.w	r2, #0
2000063c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    TIMER_BITBAND->TIM1MODE = (uint32_t)mode;   /* set mode (continuous/one-shot) */
20000640:	f240 0300 	movw	r3, #0
20000644:	f2c4 230a 	movt	r3, #16906	; 0x420a
20000648:	79fa      	ldrb	r2, [r7, #7]
2000064a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    
    TIMER->TIM1_RIS = 1U;                       /* clear timer 1 interrupt */
2000064e:	f245 0300 	movw	r3, #20480	; 0x5000
20000652:	f2c4 0300 	movt	r3, #16384	; 0x4000
20000656:	f04f 0201 	mov.w	r2, #1
2000065a:	611a      	str	r2, [r3, #16]
    NVIC_ClearPendingIRQ( Timer1_IRQn );        /* clear timer 1 interrupt within NVIC */
2000065c:	f04f 0014 	mov.w	r0, #20
20000660:	f7ff ffa4 	bl	200005ac <NVIC_ClearPendingIRQ>
}
20000664:	f107 0708 	add.w	r7, r7, #8
20000668:	46bd      	mov	sp, r7
2000066a:	bd80      	pop	{r7, pc}

2000066c <MSS_TIM1_start>:
  MSS_TIM1_load_immediate() or MSS_TIM1_load_background() functions. 
  Note: The MSS_TIM1_start() function is also used to resume the down-counter
        if previously stopped using MSS_TIM1_stop() function.
 */
static __INLINE void MSS_TIM1_start( void )
{
2000066c:	b480      	push	{r7}
2000066e:	af00      	add	r7, sp, #0
    TIMER_BITBAND->TIM1ENABLE = 1U;    /* enable timer */
20000670:	f240 0300 	movw	r3, #0
20000674:	f2c4 230a 	movt	r3, #16906	; 0x420a
20000678:	f04f 0201 	mov.w	r2, #1
2000067c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
20000680:	46bd      	mov	sp, r7
20000682:	bc80      	pop	{r7}
20000684:	4770      	bx	lr
20000686:	bf00      	nop

20000688 <MSS_TIM1_stop>:
/*-------------------------------------------------------------------------*//**
  The MSS_TIM1_stop() function disables Timer 1 and stops its down-counter
  decrementing.
 */
static __INLINE void MSS_TIM1_stop( void )
{
20000688:	b480      	push	{r7}
2000068a:	af00      	add	r7, sp, #0
    TIMER_BITBAND->TIM1ENABLE = 0U;    /* disable timer */
2000068c:	f240 0300 	movw	r3, #0
20000690:	f2c4 230a 	movt	r3, #16906	; 0x420a
20000694:	f04f 0200 	mov.w	r2, #0
20000698:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
2000069c:	46bd      	mov	sp, r7
2000069e:	bc80      	pop	{r7}
200006a0:	4770      	bx	lr
200006a2:	bf00      	nop

200006a4 <MSS_TIM1_get_current_value>:
  
  @return
    This function returns the 32-bits current value of the Timer 1 down-counter.
 */
static __INLINE uint32_t MSS_TIM1_get_current_value( void )
{
200006a4:	b480      	push	{r7}
200006a6:	af00      	add	r7, sp, #0
    return TIMER->TIM1_VAL;
200006a8:	f245 0300 	movw	r3, #20480	; 0x5000
200006ac:	f2c4 0300 	movt	r3, #16384	; 0x4000
200006b0:	681b      	ldr	r3, [r3, #0]
}
200006b2:	4618      	mov	r0, r3
200006b4:	46bd      	mov	sp, r7
200006b6:	bc80      	pop	{r7}
200006b8:	4770      	bx	lr
200006ba:	bf00      	nop

200006bc <MSS_TIM1_load_immediate>:
  @param load_value
    The load_value parameter specifies the value from which the Timer 1 
    down-counter will start decrementing.
 */
static __INLINE void MSS_TIM1_load_immediate( uint32_t load_value )
{
200006bc:	b480      	push	{r7}
200006be:	b083      	sub	sp, #12
200006c0:	af00      	add	r7, sp, #0
200006c2:	6078      	str	r0, [r7, #4]
    TIMER->TIM1_LOADVAL = load_value;
200006c4:	f245 0300 	movw	r3, #20480	; 0x5000
200006c8:	f2c4 0300 	movt	r3, #16384	; 0x4000
200006cc:	687a      	ldr	r2, [r7, #4]
200006ce:	605a      	str	r2, [r3, #4]
}
200006d0:	f107 070c 	add.w	r7, r7, #12
200006d4:	46bd      	mov	sp, r7
200006d6:	bc80      	pop	{r7}
200006d8:	4770      	bx	lr
200006da:	bf00      	nop

200006dc <touchscreen_begin>:
    0x31, 0xC1, 0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F,
  ILI9341_SLPOUT  , 0x80,                // Exit Sleep
  ILI9341_DISPON  , 0x80,                // Display on
  0x00                                   // End of list
};
void touchscreen_begin(){
200006dc:	b580      	push	{r7, lr}
200006de:	b082      	sub	sp, #8
200006e0:	af00      	add	r7, sp, #0

	uint8_t cmd, x, numArgs;
	const uint8_t *addr = initcmd;
200006e2:	f642 2354 	movw	r3, #10836	; 0x2a54
200006e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200006ea:	607b      	str	r3, [r7, #4]

	MSS_SPI_init(&g_mss_spi1);
200006ec:	f642 40c4 	movw	r0, #11460	; 0x2cc4
200006f0:	f2c2 0000 	movt	r0, #8192	; 0x2000
200006f4:	f000 fc52 	bl	20000f9c <MSS_SPI_init>
	MSS_GPIO_init();
200006f8:	f001 f9d4 	bl	20001aa4 <MSS_GPIO_init>
	ACE_init();
200006fc:	f001 fa46 	bl	20001b8c <ACE_init>
	MSS_GPIO_config(DC, MSS_GPIO_OUTPUT_MODE);
20000700:	f04f 0000 	mov.w	r0, #0
20000704:	f04f 0105 	mov.w	r1, #5
20000708:	f001 fa02 	bl	20001b10 <MSS_GPIO_config>
	ace_y = ACE_get_channel_handle((const uint8_t*)"ADCDirectInput_0");
2000070c:	f642 20c4 	movw	r0, #10948	; 0x2ac4
20000710:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000714:	f001 fa42 	bl	20001b9c <ACE_get_channel_handle>
20000718:	4603      	mov	r3, r0
2000071a:	461a      	mov	r2, r3
2000071c:	f642 43c1 	movw	r3, #11457	; 0x2cc1
20000720:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000724:	701a      	strb	r2, [r3, #0]
	ace_x = ACE_get_channel_handle((const uint8_t*)"ADCDirectInput_1");
20000726:	f642 20d8 	movw	r0, #10968	; 0x2ad8
2000072a:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000072e:	f001 fa35 	bl	20001b9c <ACE_get_channel_handle>
20000732:	4603      	mov	r3, r0
20000734:	461a      	mov	r2, r3
20000736:	f642 43c0 	movw	r3, #11456	; 0x2cc0
2000073a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000073e:	701a      	strb	r2, [r3, #0]
	
	configureSPI(8);
20000740:	f04f 0008 	mov.w	r0, #8
20000744:	f000 fb60 	bl	20000e08 <configureSPI>
	set_SPI_CS();
20000748:	f000 fba4 	bl	20000e94 <set_SPI_CS>
	sendCommandOnly(ILI9341_SWRESET);
2000074c:	f04f 0001 	mov.w	r0, #1
20000750:	f000 faa6 	bl	20000ca0 <sendCommandOnly>
	delay(150);
20000754:	f04f 0096 	mov.w	r0, #150	; 0x96
20000758:	f000 fa64 	bl	20000c24 <delay>

	while((cmd = pgm_read_byte(addr++)) > 0) {
2000075c:	e01d      	b.n	2000079a <touchscreen_begin+0xbe>
		x = pgm_read_byte(addr++);
2000075e:	687b      	ldr	r3, [r7, #4]
20000760:	781b      	ldrb	r3, [r3, #0]
20000762:	70bb      	strb	r3, [r7, #2]
20000764:	687b      	ldr	r3, [r7, #4]
20000766:	f103 0301 	add.w	r3, r3, #1
2000076a:	607b      	str	r3, [r7, #4]
		numArgs = x & 0x7F;
2000076c:	78bb      	ldrb	r3, [r7, #2]
2000076e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
20000772:	70fb      	strb	r3, [r7, #3]
		sendCommand(cmd, addr, numArgs);
20000774:	787a      	ldrb	r2, [r7, #1]
20000776:	78fb      	ldrb	r3, [r7, #3]
20000778:	4610      	mov	r0, r2
2000077a:	6879      	ldr	r1, [r7, #4]
2000077c:	461a      	mov	r2, r3
2000077e:	f000 fa21 	bl	20000bc4 <sendCommand>
		addr += numArgs;
20000782:	78fb      	ldrb	r3, [r7, #3]
20000784:	687a      	ldr	r2, [r7, #4]
20000786:	4413      	add	r3, r2
20000788:	607b      	str	r3, [r7, #4]
		if(x & 0x80) delay(150);
2000078a:	78bb      	ldrb	r3, [r7, #2]
2000078c:	b25b      	sxtb	r3, r3
2000078e:	2b00      	cmp	r3, #0
20000790:	da03      	bge.n	2000079a <touchscreen_begin+0xbe>
20000792:	f04f 0096 	mov.w	r0, #150	; 0x96
20000796:	f000 fa45 	bl	20000c24 <delay>
	configureSPI(8);
	set_SPI_CS();
	sendCommandOnly(ILI9341_SWRESET);
	delay(150);

	while((cmd = pgm_read_byte(addr++)) > 0) {
2000079a:	687b      	ldr	r3, [r7, #4]
2000079c:	781b      	ldrb	r3, [r3, #0]
2000079e:	707b      	strb	r3, [r7, #1]
200007a0:	787b      	ldrb	r3, [r7, #1]
200007a2:	2b00      	cmp	r3, #0
200007a4:	bf0c      	ite	eq
200007a6:	2300      	moveq	r3, #0
200007a8:	2301      	movne	r3, #1
200007aa:	b2db      	uxtb	r3, r3
200007ac:	687a      	ldr	r2, [r7, #4]
200007ae:	f102 0201 	add.w	r2, r2, #1
200007b2:	607a      	str	r2, [r7, #4]
200007b4:	2b00      	cmp	r3, #0
200007b6:	d1d2      	bne.n	2000075e <touchscreen_begin+0x82>
		numArgs = x & 0x7F;
		sendCommand(cmd, addr, numArgs);
		addr += numArgs;
		if(x & 0x80) delay(150);
	}
	clear_SPI_CS();
200007b8:	f000 fb78 	bl	20000eac <clear_SPI_CS>

}
200007bc:	f107 0708 	add.w	r7, r7, #8
200007c0:	46bd      	mov	sp, r7
200007c2:	bd80      	pop	{r7, pc}

200007c4 <getX>:
int16_t getX(){
200007c4:	b580      	push	{r7, lr}
200007c6:	b082      	sub	sp, #8
200007c8:	af00      	add	r7, sp, #0
	int sample;
	MSS_GPIO_set_output(yn, 0);
200007ca:	f04f 0006 	mov.w	r0, #6
200007ce:	f04f 0100 	mov.w	r1, #0
200007d2:	f001 f9bb 	bl	20001b4c <MSS_GPIO_set_output>
	MSS_GPIO_config(yp, MSS_GPIO_INPUT_MODE);
200007d6:	f04f 0005 	mov.w	r0, #5
200007da:	f04f 0102 	mov.w	r1, #2
200007de:	f001 f997 	bl	20001b10 <MSS_GPIO_config>
	MSS_GPIO_config(yn, MSS_GPIO_INPUT_MODE);
200007e2:	f04f 0006 	mov.w	r0, #6
200007e6:	f04f 0102 	mov.w	r1, #2
200007ea:	f001 f991 	bl	20001b10 <MSS_GPIO_config>
	MSS_GPIO_config(xp, MSS_GPIO_OUTPUT_MODE);
200007ee:	f04f 0007 	mov.w	r0, #7
200007f2:	f04f 0105 	mov.w	r1, #5
200007f6:	f001 f98b 	bl	20001b10 <MSS_GPIO_config>
	MSS_GPIO_config(xn, MSS_GPIO_OUTPUT_MODE);
200007fa:	f04f 0008 	mov.w	r0, #8
200007fe:	f04f 0105 	mov.w	r1, #5
20000802:	f001 f985 	bl	20001b10 <MSS_GPIO_config>

	MSS_GPIO_set_output(xp, 1);
20000806:	f04f 0007 	mov.w	r0, #7
2000080a:	f04f 0101 	mov.w	r1, #1
2000080e:	f001 f99d 	bl	20001b4c <MSS_GPIO_set_output>
	MSS_GPIO_set_output(xn, 0);
20000812:	f04f 0008 	mov.w	r0, #8
20000816:	f04f 0100 	mov.w	r1, #0
2000081a:	f001 f997 	bl	20001b4c <MSS_GPIO_set_output>
	delayMicro(20);
2000081e:	f04f 0014 	mov.w	r0, #20
20000822:	f000 fa1f 	bl	20000c64 <delayMicro>

	sample = ACE_get_ppe_sample(ace_y);
20000826:	f642 43c1 	movw	r3, #11457	; 0x2cc1
2000082a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000082e:	781b      	ldrb	r3, [r3, #0]
20000830:	4618      	mov	r0, r3
20000832:	f001 f9ed 	bl	20001c10 <ACE_get_ppe_sample>
20000836:	4603      	mov	r3, r0
20000838:	607b      	str	r3, [r7, #4]
	MSS_GPIO_set_output(xp, 0);
2000083a:	f04f 0007 	mov.w	r0, #7
2000083e:	f04f 0100 	mov.w	r1, #0
20000842:	f001 f983 	bl	20001b4c <MSS_GPIO_set_output>
	return ((sample/4080.0f)*240);
20000846:	6878      	ldr	r0, [r7, #4]
20000848:	f001 fe54 	bl	200024f4 <__aeabi_i2f>
2000084c:	4603      	mov	r3, r0
2000084e:	4618      	mov	r0, r3
20000850:	4909      	ldr	r1, [pc, #36]	; (20000878 <getX+0xb4>)
20000852:	f001 ff57 	bl	20002704 <__aeabi_fdiv>
20000856:	4603      	mov	r3, r0
20000858:	4618      	mov	r0, r3
2000085a:	4908      	ldr	r1, [pc, #32]	; (2000087c <getX+0xb8>)
2000085c:	f001 fe9e 	bl	2000259c <__aeabi_fmul>
20000860:	4603      	mov	r3, r0
20000862:	4618      	mov	r0, r3
20000864:	f001 ffea 	bl	2000283c <__aeabi_f2iz>
20000868:	4603      	mov	r3, r0
2000086a:	b29b      	uxth	r3, r3
2000086c:	b21b      	sxth	r3, r3
}
2000086e:	4618      	mov	r0, r3
20000870:	f107 0708 	add.w	r7, r7, #8
20000874:	46bd      	mov	sp, r7
20000876:	bd80      	pop	{r7, pc}
20000878:	457f0000 	.word	0x457f0000
2000087c:	43700000 	.word	0x43700000

20000880 <getY>:

int16_t getY(){
20000880:	b580      	push	{r7, lr}
20000882:	b082      	sub	sp, #8
20000884:	af00      	add	r7, sp, #0
	int sample;

	MSS_GPIO_config(yp, MSS_GPIO_OUTPUT_MODE);
20000886:	f04f 0005 	mov.w	r0, #5
2000088a:	f04f 0105 	mov.w	r1, #5
2000088e:	f001 f93f 	bl	20001b10 <MSS_GPIO_config>
	MSS_GPIO_config(yn, MSS_GPIO_OUTPUT_MODE);
20000892:	f04f 0006 	mov.w	r0, #6
20000896:	f04f 0105 	mov.w	r1, #5
2000089a:	f001 f939 	bl	20001b10 <MSS_GPIO_config>
	MSS_GPIO_config(xp, MSS_GPIO_INPUT_MODE);
2000089e:	f04f 0007 	mov.w	r0, #7
200008a2:	f04f 0102 	mov.w	r1, #2
200008a6:	f001 f933 	bl	20001b10 <MSS_GPIO_config>
	MSS_GPIO_config(xn, MSS_GPIO_INPUT_MODE);
200008aa:	f04f 0008 	mov.w	r0, #8
200008ae:	f04f 0102 	mov.w	r1, #2
200008b2:	f001 f92d 	bl	20001b10 <MSS_GPIO_config>

	MSS_GPIO_set_output(yp, 1);
200008b6:	f04f 0005 	mov.w	r0, #5
200008ba:	f04f 0101 	mov.w	r1, #1
200008be:	f001 f945 	bl	20001b4c <MSS_GPIO_set_output>
	MSS_GPIO_set_output(yn, 0);
200008c2:	f04f 0006 	mov.w	r0, #6
200008c6:	f04f 0100 	mov.w	r1, #0
200008ca:	f001 f93f 	bl	20001b4c <MSS_GPIO_set_output>

	delayMicro(20);
200008ce:	f04f 0014 	mov.w	r0, #20
200008d2:	f000 f9c7 	bl	20000c64 <delayMicro>

	sample = ACE_get_ppe_sample(ace_x);
200008d6:	f642 43c0 	movw	r3, #11456	; 0x2cc0
200008da:	f2c2 0300 	movt	r3, #8192	; 0x2000
200008de:	781b      	ldrb	r3, [r3, #0]
200008e0:	4618      	mov	r0, r3
200008e2:	f001 f995 	bl	20001c10 <ACE_get_ppe_sample>
200008e6:	4603      	mov	r3, r0
200008e8:	607b      	str	r3, [r7, #4]
	MSS_GPIO_set_output(yp, 0);
200008ea:	f04f 0005 	mov.w	r0, #5
200008ee:	f04f 0100 	mov.w	r1, #0
200008f2:	f001 f92b 	bl	20001b4c <MSS_GPIO_set_output>

	return ((sample/4080.0f)*320);
200008f6:	6878      	ldr	r0, [r7, #4]
200008f8:	f001 fdfc 	bl	200024f4 <__aeabi_i2f>
200008fc:	4603      	mov	r3, r0
200008fe:	4618      	mov	r0, r3
20000900:	4909      	ldr	r1, [pc, #36]	; (20000928 <getY+0xa8>)
20000902:	f001 feff 	bl	20002704 <__aeabi_fdiv>
20000906:	4603      	mov	r3, r0
20000908:	4618      	mov	r0, r3
2000090a:	4908      	ldr	r1, [pc, #32]	; (2000092c <getY+0xac>)
2000090c:	f001 fe46 	bl	2000259c <__aeabi_fmul>
20000910:	4603      	mov	r3, r0
20000912:	4618      	mov	r0, r3
20000914:	f001 ff92 	bl	2000283c <__aeabi_f2iz>
20000918:	4603      	mov	r3, r0
2000091a:	b29b      	uxth	r3, r3
2000091c:	b21b      	sxth	r3, r3
}
2000091e:	4618      	mov	r0, r3
20000920:	f107 0708 	add.w	r7, r7, #8
20000924:	46bd      	mov	sp, r7
20000926:	bd80      	pop	{r7, pc}
20000928:	457f0000 	.word	0x457f0000
2000092c:	43a00000 	.word	0x43a00000

20000930 <getZ>:

int16_t getZ(uint16_t x){
20000930:	b580      	push	{r7, lr}
20000932:	b086      	sub	sp, #24
20000934:	af00      	add	r7, sp, #0
20000936:	4603      	mov	r3, r0
20000938:	80fb      	strh	r3, [r7, #6]
	int16_t z;

	MSS_GPIO_config(yp, MSS_GPIO_INPUT_MODE);
2000093a:	f04f 0005 	mov.w	r0, #5
2000093e:	f04f 0102 	mov.w	r1, #2
20000942:	f001 f8e5 	bl	20001b10 <MSS_GPIO_config>
	MSS_GPIO_config(yn, MSS_GPIO_OUTPUT_MODE);
20000946:	f04f 0006 	mov.w	r0, #6
2000094a:	f04f 0105 	mov.w	r1, #5
2000094e:	f001 f8df 	bl	20001b10 <MSS_GPIO_config>
	MSS_GPIO_config(xp, MSS_GPIO_OUTPUT_MODE);
20000952:	f04f 0007 	mov.w	r0, #7
20000956:	f04f 0105 	mov.w	r1, #5
2000095a:	f001 f8d9 	bl	20001b10 <MSS_GPIO_config>
	MSS_GPIO_config(xn, MSS_GPIO_INPUT_MODE);
2000095e:	f04f 0008 	mov.w	r0, #8
20000962:	f04f 0102 	mov.w	r1, #2
20000966:	f001 f8d3 	bl	20001b10 <MSS_GPIO_config>

	MSS_GPIO_set_output(xp, 0);
2000096a:	f04f 0007 	mov.w	r0, #7
2000096e:	f04f 0100 	mov.w	r1, #0
20000972:	f001 f8eb 	bl	20001b4c <MSS_GPIO_set_output>
	MSS_GPIO_set_output(yn, 1);
20000976:	f04f 0006 	mov.w	r0, #6
2000097a:	f04f 0101 	mov.w	r1, #1
2000097e:	f001 f8e5 	bl	20001b4c <MSS_GPIO_set_output>

	int z1 = ACE_get_ppe_sample(ace_x);
20000982:	f642 43c0 	movw	r3, #11456	; 0x2cc0
20000986:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000098a:	781b      	ldrb	r3, [r3, #0]
2000098c:	4618      	mov	r0, r3
2000098e:	f001 f93f 	bl	20001c10 <ACE_get_ppe_sample>
20000992:	4603      	mov	r3, r0
20000994:	60fb      	str	r3, [r7, #12]
	int z2 = ACE_get_ppe_sample(ace_y);
20000996:	f642 43c1 	movw	r3, #11457	; 0x2cc1
2000099a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000099e:	781b      	ldrb	r3, [r3, #0]
200009a0:	4618      	mov	r0, r3
200009a2:	f001 f935 	bl	20001c10 <ACE_get_ppe_sample>
200009a6:	4603      	mov	r3, r0
200009a8:	613b      	str	r3, [r7, #16]

	if (rxplate != 0) {
200009aa:	f642 43bc 	movw	r3, #11452	; 0x2cbc
200009ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
200009b2:	681b      	ldr	r3, [r3, #0]
200009b4:	2b00      	cmp	r3, #0
200009b6:	d03a      	beq.n	20000a2e <getZ+0xfe>
	 // now read the x
	 float rtouch;
	 rtouch = z2;
200009b8:	6938      	ldr	r0, [r7, #16]
200009ba:	f001 fd9b 	bl	200024f4 <__aeabi_i2f>
200009be:	4603      	mov	r3, r0
200009c0:	617b      	str	r3, [r7, #20]
	 rtouch /= z1;
200009c2:	68f8      	ldr	r0, [r7, #12]
200009c4:	f001 fd96 	bl	200024f4 <__aeabi_i2f>
200009c8:	4603      	mov	r3, r0
200009ca:	6978      	ldr	r0, [r7, #20]
200009cc:	4619      	mov	r1, r3
200009ce:	f001 fe99 	bl	20002704 <__aeabi_fdiv>
200009d2:	4603      	mov	r3, r0
200009d4:	617b      	str	r3, [r7, #20]
	 rtouch -= 1;
200009d6:	6978      	ldr	r0, [r7, #20]
200009d8:	491f      	ldr	r1, [pc, #124]	; (20000a58 <getZ+0x128>)
200009da:	f001 fcd5 	bl	20002388 <__aeabi_fsub>
200009de:	4603      	mov	r3, r0
200009e0:	617b      	str	r3, [r7, #20]
	 rtouch *= x;
200009e2:	88fb      	ldrh	r3, [r7, #6]
200009e4:	4618      	mov	r0, r3
200009e6:	f001 fd85 	bl	200024f4 <__aeabi_i2f>
200009ea:	4603      	mov	r3, r0
200009ec:	6978      	ldr	r0, [r7, #20]
200009ee:	4619      	mov	r1, r3
200009f0:	f001 fdd4 	bl	2000259c <__aeabi_fmul>
200009f4:	4603      	mov	r3, r0
200009f6:	617b      	str	r3, [r7, #20]
	 rtouch *= rxplate;
200009f8:	f642 43bc 	movw	r3, #11452	; 0x2cbc
200009fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000a00:	681b      	ldr	r3, [r3, #0]
20000a02:	4618      	mov	r0, r3
20000a04:	f001 fd76 	bl	200024f4 <__aeabi_i2f>
20000a08:	4603      	mov	r3, r0
20000a0a:	6978      	ldr	r0, [r7, #20]
20000a0c:	4619      	mov	r1, r3
20000a0e:	f001 fdc5 	bl	2000259c <__aeabi_fmul>
20000a12:	4603      	mov	r3, r0
20000a14:	617b      	str	r3, [r7, #20]
	 rtouch /= 4080;
20000a16:	6978      	ldr	r0, [r7, #20]
20000a18:	4910      	ldr	r1, [pc, #64]	; (20000a5c <getZ+0x12c>)
20000a1a:	f001 fe73 	bl	20002704 <__aeabi_fdiv>
20000a1e:	4603      	mov	r3, r0
20000a20:	617b      	str	r3, [r7, #20]

	 z = rtouch;
20000a22:	6978      	ldr	r0, [r7, #20]
20000a24:	f001 ff0a 	bl	2000283c <__aeabi_f2iz>
20000a28:	4603      	mov	r3, r0
20000a2a:	817b      	strh	r3, [r7, #10]
20000a2c:	e007      	b.n	20000a3e <getZ+0x10e>
   } else {
	 z = ((z2-z1));
20000a2e:	693b      	ldr	r3, [r7, #16]
20000a30:	b29a      	uxth	r2, r3
20000a32:	68fb      	ldr	r3, [r7, #12]
20000a34:	b29b      	uxth	r3, r3
20000a36:	ebc3 0302 	rsb	r3, r3, r2
20000a3a:	b29b      	uxth	r3, r3
20000a3c:	817b      	strh	r3, [r7, #10]
   }
	MSS_GPIO_set_output(yn, 0);
20000a3e:	f04f 0006 	mov.w	r0, #6
20000a42:	f04f 0100 	mov.w	r1, #0
20000a46:	f001 f881 	bl	20001b4c <MSS_GPIO_set_output>

   return z;
20000a4a:	897b      	ldrh	r3, [r7, #10]
20000a4c:	b21b      	sxth	r3, r3
}
20000a4e:	4618      	mov	r0, r3
20000a50:	f107 0718 	add.w	r7, r7, #24
20000a54:	46bd      	mov	sp, r7
20000a56:	bd80      	pop	{r7, pc}
20000a58:	3f800000 	.word	0x3f800000
20000a5c:	457f0000 	.word	0x457f0000

20000a60 <drawPixel>:

void drawPixel(uint16_t x, uint16_t y, uint16_t color){
20000a60:	b580      	push	{r7, lr}
20000a62:	b082      	sub	sp, #8
20000a64:	af00      	add	r7, sp, #0
20000a66:	4613      	mov	r3, r2
20000a68:	4602      	mov	r2, r0
20000a6a:	80fa      	strh	r2, [r7, #6]
20000a6c:	460a      	mov	r2, r1
20000a6e:	80ba      	strh	r2, [r7, #4]
20000a70:	807b      	strh	r3, [r7, #2]

	set_SPI_CS();
20000a72:	f000 fa0f 	bl	20000e94 <set_SPI_CS>
	setAddr(x, y, x+1, y+1);
20000a76:	88fb      	ldrh	r3, [r7, #6]
20000a78:	f103 0301 	add.w	r3, r3, #1
20000a7c:	b29a      	uxth	r2, r3
20000a7e:	88bb      	ldrh	r3, [r7, #4]
20000a80:	f103 0301 	add.w	r3, r3, #1
20000a84:	b29b      	uxth	r3, r3
20000a86:	88f8      	ldrh	r0, [r7, #6]
20000a88:	88b9      	ldrh	r1, [r7, #4]
20000a8a:	f000 f873 	bl	20000b74 <setAddr>
	set_DC_HIGH();
20000a8e:	f000 fa19 	bl	20000ec4 <set_DC_HIGH>
	sendSPI16(color);
20000a92:	887b      	ldrh	r3, [r7, #2]
20000a94:	4618      	mov	r0, r3
20000a96:	f000 f9e1 	bl	20000e5c <sendSPI16>
	clear_SPI_CS();
20000a9a:	f000 fa07 	bl	20000eac <clear_SPI_CS>
}
20000a9e:	f107 0708 	add.w	r7, r7, #8
20000aa2:	46bd      	mov	sp, r7
20000aa4:	bd80      	pop	{r7, pc}
20000aa6:	bf00      	nop

20000aa8 <drawRectanglePixel>:
			sendData(&color, 16);
		}
		sendData(&color, 16);
	}
}
void drawRectanglePixel(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color){
20000aa8:	b580      	push	{r7, lr}
20000aaa:	b086      	sub	sp, #24
20000aac:	af02      	add	r7, sp, #8
20000aae:	80f8      	strh	r0, [r7, #6]
20000ab0:	80b9      	strh	r1, [r7, #4]
20000ab2:	807a      	strh	r2, [r7, #2]
20000ab4:	803b      	strh	r3, [r7, #0]
	uint16_t i;

	 for (i=x; i<x+w; i++) {
20000ab6:	88fb      	ldrh	r3, [r7, #6]
20000ab8:	81fb      	strh	r3, [r7, #14]
20000aba:	e018      	b.n	20000aee <drawRectanglePixel+0x46>
	        writeLine(i, y, i, y+h-1, color);
20000abc:	89f8      	ldrh	r0, [r7, #14]
20000abe:	88b9      	ldrh	r1, [r7, #4]
20000ac0:	89fa      	ldrh	r2, [r7, #14]
20000ac2:	f8b7 c004 	ldrh.w	ip, [r7, #4]
20000ac6:	883b      	ldrh	r3, [r7, #0]
20000ac8:	4463      	add	r3, ip
20000aca:	b29b      	uxth	r3, r3
20000acc:	f103 33ff 	add.w	r3, r3, #4294967295
20000ad0:	b29b      	uxth	r3, r3
20000ad2:	b200      	sxth	r0, r0
20000ad4:	b209      	sxth	r1, r1
20000ad6:	b212      	sxth	r2, r2
20000ad8:	b21b      	sxth	r3, r3
20000ada:	f8b7 c018 	ldrh.w	ip, [r7, #24]
20000ade:	f8cd c000 	str.w	ip, [sp]
20000ae2:	f000 f8f3 	bl	20000ccc <writeLine>
	}
}
void drawRectanglePixel(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color){
	uint16_t i;

	 for (i=x; i<x+w; i++) {
20000ae6:	89fb      	ldrh	r3, [r7, #14]
20000ae8:	f103 0301 	add.w	r3, r3, #1
20000aec:	81fb      	strh	r3, [r7, #14]
20000aee:	89fa      	ldrh	r2, [r7, #14]
20000af0:	88f9      	ldrh	r1, [r7, #6]
20000af2:	887b      	ldrh	r3, [r7, #2]
20000af4:	440b      	add	r3, r1
20000af6:	429a      	cmp	r2, r3
20000af8:	dbe0      	blt.n	20000abc <drawRectanglePixel+0x14>
	        writeLine(i, y, i, y+h-1, color);
	    }
}		
20000afa:	f107 0710 	add.w	r7, r7, #16
20000afe:	46bd      	mov	sp, r7
20000b00:	bd80      	pop	{r7, pc}
20000b02:	bf00      	nop

20000b04 <drawFillScreen>:

void drawFillScreen(uint16_t color){
20000b04:	b580      	push	{r7, lr}
20000b06:	b084      	sub	sp, #16
20000b08:	af02      	add	r7, sp, #8
20000b0a:	4603      	mov	r3, r0
20000b0c:	80fb      	strh	r3, [r7, #6]
	drawRectanglePixel(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT, color);
20000b0e:	88fb      	ldrh	r3, [r7, #6]
20000b10:	9300      	str	r3, [sp, #0]
20000b12:	f04f 0000 	mov.w	r0, #0
20000b16:	f04f 0100 	mov.w	r1, #0
20000b1a:	f04f 02f0 	mov.w	r2, #240	; 0xf0
20000b1e:	f44f 73a0 	mov.w	r3, #320	; 0x140
20000b22:	f7ff ffc1 	bl	20000aa8 <drawRectanglePixel>
}
20000b26:	f107 0708 	add.w	r7, r7, #8
20000b2a:	46bd      	mov	sp, r7
20000b2c:	bd80      	pop	{r7, pc}
20000b2e:	bf00      	nop

20000b30 <drawText1>:

void drawText1(uint16_t color){
20000b30:	b580      	push	{r7, lr}
20000b32:	b084      	sub	sp, #16
20000b34:	af02      	add	r7, sp, #8
20000b36:	4603      	mov	r3, r0
20000b38:	80fb      	strh	r3, [r7, #6]
	drawRectanglePixel(40, 200, 5, 20, color);
20000b3a:	88fb      	ldrh	r3, [r7, #6]
20000b3c:	9300      	str	r3, [sp, #0]
20000b3e:	f04f 0028 	mov.w	r0, #40	; 0x28
20000b42:	f04f 01c8 	mov.w	r1, #200	; 0xc8
20000b46:	f04f 0205 	mov.w	r2, #5
20000b4a:	f04f 0314 	mov.w	r3, #20
20000b4e:	f7ff ffab 	bl	20000aa8 <drawRectanglePixel>
	drawRectanglePixel(40, 210, 35, 5, color);
20000b52:	88fb      	ldrh	r3, [r7, #6]
20000b54:	9300      	str	r3, [sp, #0]
20000b56:	f04f 0028 	mov.w	r0, #40	; 0x28
20000b5a:	f04f 01d2 	mov.w	r1, #210	; 0xd2
20000b5e:	f04f 0223 	mov.w	r2, #35	; 0x23
20000b62:	f04f 0305 	mov.w	r3, #5
20000b66:	f7ff ff9f 	bl	20000aa8 <drawRectanglePixel>
}
20000b6a:	f107 0708 	add.w	r7, r7, #8
20000b6e:	46bd      	mov	sp, r7
20000b70:	bd80      	pop	{r7, pc}
20000b72:	bf00      	nop

20000b74 <setAddr>:

void setAddr(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1){
20000b74:	b580      	push	{r7, lr}
20000b76:	b082      	sub	sp, #8
20000b78:	af00      	add	r7, sp, #0
20000b7a:	80f8      	strh	r0, [r7, #6]
20000b7c:	80b9      	strh	r1, [r7, #4]
20000b7e:	807a      	strh	r2, [r7, #2]
20000b80:	803b      	strh	r3, [r7, #0]
	
	sendCommandOnly(ILI9341_CASET);
20000b82:	f04f 002a 	mov.w	r0, #42	; 0x2a
20000b86:	f000 f88b 	bl	20000ca0 <sendCommandOnly>
	sendSPI16(x0);
20000b8a:	88fb      	ldrh	r3, [r7, #6]
20000b8c:	4618      	mov	r0, r3
20000b8e:	f000 f965 	bl	20000e5c <sendSPI16>
	sendSPI16(x1);
20000b92:	887b      	ldrh	r3, [r7, #2]
20000b94:	4618      	mov	r0, r3
20000b96:	f000 f961 	bl	20000e5c <sendSPI16>
	sendCommandOnly(ILI9341_PASET);
20000b9a:	f04f 002b 	mov.w	r0, #43	; 0x2b
20000b9e:	f000 f87f 	bl	20000ca0 <sendCommandOnly>
	sendSPI16(y0);
20000ba2:	88bb      	ldrh	r3, [r7, #4]
20000ba4:	4618      	mov	r0, r3
20000ba6:	f000 f959 	bl	20000e5c <sendSPI16>
	sendSPI16(y1);
20000baa:	883b      	ldrh	r3, [r7, #0]
20000bac:	4618      	mov	r0, r3
20000bae:	f000 f955 	bl	20000e5c <sendSPI16>
	sendCommandOnly(ILI9341_RAMWR);
20000bb2:	f04f 002c 	mov.w	r0, #44	; 0x2c
20000bb6:	f000 f873 	bl	20000ca0 <sendCommandOnly>
}
20000bba:	f107 0708 	add.w	r7, r7, #8
20000bbe:	46bd      	mov	sp, r7
20000bc0:	bd80      	pop	{r7, pc}
20000bc2:	bf00      	nop

20000bc4 <sendCommand>:

void sendCommand(uint8_t commandByte, uint8_t *dataBytes, uint8_t numDataBytes){
20000bc4:	b580      	push	{r7, lr}
20000bc6:	b086      	sub	sp, #24
20000bc8:	af00      	add	r7, sp, #0
20000bca:	60b9      	str	r1, [r7, #8]
20000bcc:	4613      	mov	r3, r2
20000bce:	4602      	mov	r2, r0
20000bd0:	73fa      	strb	r2, [r7, #15]
20000bd2:	71fb      	strb	r3, [r7, #7]
		int i=0;
20000bd4:	f04f 0300 	mov.w	r3, #0
20000bd8:	617b      	str	r3, [r7, #20]
		configureSPI(8);
20000bda:	f04f 0008 	mov.w	r0, #8
20000bde:	f000 f913 	bl	20000e08 <configureSPI>

	    set_DC_LOW(); // Command mode
20000be2:	f000 f979 	bl	20000ed8 <set_DC_LOW>
	    sendSPI(commandByte); // Send the command byte
20000be6:	7bfb      	ldrb	r3, [r7, #15]
20000be8:	4618      	mov	r0, r3
20000bea:	f000 f925 	bl	20000e38 <sendSPI>

	    set_DC_HIGH();
20000bee:	f000 f969 	bl	20000ec4 <set_DC_HIGH>
	    for (i=0; i<numDataBytes; i++) {
20000bf2:	f04f 0300 	mov.w	r3, #0
20000bf6:	617b      	str	r3, [r7, #20]
20000bf8:	e00c      	b.n	20000c14 <sendCommand+0x50>
	      sendSPI(*dataBytes); // Send the data bytes
20000bfa:	68bb      	ldr	r3, [r7, #8]
20000bfc:	781b      	ldrb	r3, [r3, #0]
20000bfe:	4618      	mov	r0, r3
20000c00:	f000 f91a 	bl	20000e38 <sendSPI>
	      dataBytes++;
20000c04:	68bb      	ldr	r3, [r7, #8]
20000c06:	f103 0301 	add.w	r3, r3, #1
20000c0a:	60bb      	str	r3, [r7, #8]

	    set_DC_LOW(); // Command mode
	    sendSPI(commandByte); // Send the command byte

	    set_DC_HIGH();
	    for (i=0; i<numDataBytes; i++) {
20000c0c:	697b      	ldr	r3, [r7, #20]
20000c0e:	f103 0301 	add.w	r3, r3, #1
20000c12:	617b      	str	r3, [r7, #20]
20000c14:	79fa      	ldrb	r2, [r7, #7]
20000c16:	697b      	ldr	r3, [r7, #20]
20000c18:	429a      	cmp	r2, r3
20000c1a:	dcee      	bgt.n	20000bfa <sendCommand+0x36>
	      sendSPI(*dataBytes); // Send the data bytes
	      dataBytes++;
	    }
}
20000c1c:	f107 0718 	add.w	r7, r7, #24
20000c20:	46bd      	mov	sp, r7
20000c22:	bd80      	pop	{r7, pc}

20000c24 <delay>:
		dataBytes++;
	}
	clear_SPI_CS();
}

void delay(uint32_t time){
20000c24:	b580      	push	{r7, lr}
20000c26:	b082      	sub	sp, #8
20000c28:	af00      	add	r7, sp, #0
20000c2a:	6078      	str	r0, [r7, #4]

	MSS_TIM1_init(MSS_TIMER_ONE_SHOT_MODE);
20000c2c:	f04f 0001 	mov.w	r0, #1
20000c30:	f7ff fcda 	bl	200005e8 <MSS_TIM1_init>
	MSS_TIM1_load_immediate(time*100000);
20000c34:	687a      	ldr	r2, [r7, #4]
20000c36:	f248 63a0 	movw	r3, #34464	; 0x86a0
20000c3a:	f2c0 0301 	movt	r3, #1
20000c3e:	fb03 f302 	mul.w	r3, r3, r2
20000c42:	4618      	mov	r0, r3
20000c44:	f7ff fd3a 	bl	200006bc <MSS_TIM1_load_immediate>
	MSS_TIM1_start();
20000c48:	f7ff fd10 	bl	2000066c <MSS_TIM1_start>

	while(MSS_TIM1_get_current_value()>0){
20000c4c:	f7ff fd2a 	bl	200006a4 <MSS_TIM1_get_current_value>
20000c50:	4603      	mov	r3, r0
20000c52:	2b00      	cmp	r3, #0
20000c54:	d1fa      	bne.n	20000c4c <delay+0x28>
		//do nothing

	}
	MSS_TIM1_stop();
20000c56:	f7ff fd17 	bl	20000688 <MSS_TIM1_stop>
}
20000c5a:	f107 0708 	add.w	r7, r7, #8
20000c5e:	46bd      	mov	sp, r7
20000c60:	bd80      	pop	{r7, pc}
20000c62:	bf00      	nop

20000c64 <delayMicro>:

void delayMicro(uint32_t time){
20000c64:	b580      	push	{r7, lr}
20000c66:	b082      	sub	sp, #8
20000c68:	af00      	add	r7, sp, #0
20000c6a:	6078      	str	r0, [r7, #4]

	MSS_TIM1_init(MSS_TIMER_ONE_SHOT_MODE);
20000c6c:	f04f 0001 	mov.w	r0, #1
20000c70:	f7ff fcba 	bl	200005e8 <MSS_TIM1_init>
	MSS_TIM1_load_immediate(time*100);
20000c74:	687b      	ldr	r3, [r7, #4]
20000c76:	f04f 0264 	mov.w	r2, #100	; 0x64
20000c7a:	fb02 f303 	mul.w	r3, r2, r3
20000c7e:	4618      	mov	r0, r3
20000c80:	f7ff fd1c 	bl	200006bc <MSS_TIM1_load_immediate>
	MSS_TIM1_start();
20000c84:	f7ff fcf2 	bl	2000066c <MSS_TIM1_start>

	while(MSS_TIM1_get_current_value()>0){
20000c88:	f7ff fd0c 	bl	200006a4 <MSS_TIM1_get_current_value>
20000c8c:	4603      	mov	r3, r0
20000c8e:	2b00      	cmp	r3, #0
20000c90:	d1fa      	bne.n	20000c88 <delayMicro+0x24>
		//do nothing

	}
	MSS_TIM1_stop();
20000c92:	f7ff fcf9 	bl	20000688 <MSS_TIM1_stop>
}
20000c96:	f107 0708 	add.w	r7, r7, #8
20000c9a:	46bd      	mov	sp, r7
20000c9c:	bd80      	pop	{r7, pc}
20000c9e:	bf00      	nop

20000ca0 <sendCommandOnly>:


void sendCommandOnly(uint8_t commandByte){
20000ca0:	b580      	push	{r7, lr}
20000ca2:	b082      	sub	sp, #8
20000ca4:	af00      	add	r7, sp, #0
20000ca6:	4603      	mov	r3, r0
20000ca8:	71fb      	strb	r3, [r7, #7]

	set_DC_LOW();
20000caa:	f000 f915 	bl	20000ed8 <set_DC_LOW>
	configureSPI(8);
20000cae:	f04f 0008 	mov.w	r0, #8
20000cb2:	f000 f8a9 	bl	20000e08 <configureSPI>
	sendSPI(commandByte);
20000cb6:	79fb      	ldrb	r3, [r7, #7]
20000cb8:	4618      	mov	r0, r3
20000cba:	f000 f8bd 	bl	20000e38 <sendSPI>
	set_DC_HIGH();
20000cbe:	f000 f901 	bl	20000ec4 <set_DC_HIGH>
}
20000cc2:	f107 0708 	add.w	r7, r7, #8
20000cc6:	46bd      	mov	sp, r7
20000cc8:	bd80      	pop	{r7, pc}
20000cca:	bf00      	nop

20000ccc <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color){
20000ccc:	b580      	push	{r7, lr}
20000cce:	b088      	sub	sp, #32
20000cd0:	af00      	add	r7, sp, #0
20000cd2:	80f8      	strh	r0, [r7, #6]
20000cd4:	80b9      	strh	r1, [r7, #4]
20000cd6:	807a      	strh	r2, [r7, #2]
20000cd8:	803b      	strh	r3, [r7, #0]

    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
20000cda:	f9b7 2000 	ldrsh.w	r2, [r7]
20000cde:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
20000ce2:	ebc3 0302 	rsb	r3, r3, r2
20000ce6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
20000cea:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
20000cee:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
20000cf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
20000cf6:	ebc3 0301 	rsb	r3, r3, r1
20000cfa:	2b00      	cmp	r3, #0
20000cfc:	bfb8      	it	lt
20000cfe:	425b      	neglt	r3, r3
20000d00:	429a      	cmp	r2, r3
20000d02:	bfd4      	ite	le
20000d04:	2300      	movle	r3, #0
20000d06:	2301      	movgt	r3, #1
20000d08:	81fb      	strh	r3, [r7, #14]
    if (steep) {
20000d0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
20000d0e:	2b00      	cmp	r3, #0
20000d10:	d00b      	beq.n	20000d2a <writeLine+0x5e>
        _swap_int16_t(x0, y0);
20000d12:	88fb      	ldrh	r3, [r7, #6]
20000d14:	833b      	strh	r3, [r7, #24]
20000d16:	88bb      	ldrh	r3, [r7, #4]
20000d18:	80fb      	strh	r3, [r7, #6]
20000d1a:	8b3b      	ldrh	r3, [r7, #24]
20000d1c:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
20000d1e:	887b      	ldrh	r3, [r7, #2]
20000d20:	837b      	strh	r3, [r7, #26]
20000d22:	883b      	ldrh	r3, [r7, #0]
20000d24:	807b      	strh	r3, [r7, #2]
20000d26:	8b7b      	ldrh	r3, [r7, #26]
20000d28:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
20000d2a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20000d2e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
20000d32:	429a      	cmp	r2, r3
20000d34:	dd0b      	ble.n	20000d4e <writeLine+0x82>
        _swap_int16_t(x0, x1);
20000d36:	88fb      	ldrh	r3, [r7, #6]
20000d38:	83bb      	strh	r3, [r7, #28]
20000d3a:	887b      	ldrh	r3, [r7, #2]
20000d3c:	80fb      	strh	r3, [r7, #6]
20000d3e:	8bbb      	ldrh	r3, [r7, #28]
20000d40:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
20000d42:	88bb      	ldrh	r3, [r7, #4]
20000d44:	83fb      	strh	r3, [r7, #30]
20000d46:	883b      	ldrh	r3, [r7, #0]
20000d48:	80bb      	strh	r3, [r7, #4]
20000d4a:	8bfb      	ldrh	r3, [r7, #30]
20000d4c:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
20000d4e:	887a      	ldrh	r2, [r7, #2]
20000d50:	88fb      	ldrh	r3, [r7, #6]
20000d52:	ebc3 0302 	rsb	r3, r3, r2
20000d56:	b29b      	uxth	r3, r3
20000d58:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
20000d5a:	f9b7 2000 	ldrsh.w	r2, [r7]
20000d5e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
20000d62:	ebc3 0302 	rsb	r3, r3, r2
20000d66:	2b00      	cmp	r3, #0
20000d68:	bfb8      	it	lt
20000d6a:	425b      	neglt	r3, r3
20000d6c:	827b      	strh	r3, [r7, #18]

    int16_t err = dx / 2;
20000d6e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
20000d72:	ea4f 72d3 	mov.w	r2, r3, lsr #31
20000d76:	4413      	add	r3, r2
20000d78:	ea4f 0363 	mov.w	r3, r3, asr #1
20000d7c:	82bb      	strh	r3, [r7, #20]
    int16_t ystep;

    if (y0 < y1) {
20000d7e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
20000d82:	f9b7 3000 	ldrsh.w	r3, [r7]
20000d86:	429a      	cmp	r2, r3
20000d88:	da03      	bge.n	20000d92 <writeLine+0xc6>
        ystep = 1;
20000d8a:	f04f 0301 	mov.w	r3, #1
20000d8e:	82fb      	strh	r3, [r7, #22]
    } else {
        ystep = -1;
    }

    for (; x0<=x1; x0++) {
20000d90:	e030      	b.n	20000df4 <writeLine+0x128>
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
20000d92:	f64f 73ff 	movw	r3, #65535	; 0xffff
20000d96:	82fb      	strh	r3, [r7, #22]
    }

    for (; x0<=x1; x0++) {
20000d98:	e02c      	b.n	20000df4 <writeLine+0x128>
        if (steep) {
20000d9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
20000d9e:	2b00      	cmp	r3, #0
20000da0:	d008      	beq.n	20000db4 <writeLine+0xe8>
            drawPixel(y0, x0, color);
20000da2:	88b9      	ldrh	r1, [r7, #4]
20000da4:	88fa      	ldrh	r2, [r7, #6]
20000da6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
20000da8:	4608      	mov	r0, r1
20000daa:	4611      	mov	r1, r2
20000dac:	461a      	mov	r2, r3
20000dae:	f7ff fe57 	bl	20000a60 <drawPixel>
20000db2:	e007      	b.n	20000dc4 <writeLine+0xf8>
        } else {
            drawPixel(x0, y0, color);
20000db4:	88f9      	ldrh	r1, [r7, #6]
20000db6:	88ba      	ldrh	r2, [r7, #4]
20000db8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
20000dba:	4608      	mov	r0, r1
20000dbc:	4611      	mov	r1, r2
20000dbe:	461a      	mov	r2, r3
20000dc0:	f7ff fe4e 	bl	20000a60 <drawPixel>
        }
        err -= dy;
20000dc4:	8aba      	ldrh	r2, [r7, #20]
20000dc6:	8a7b      	ldrh	r3, [r7, #18]
20000dc8:	ebc3 0302 	rsb	r3, r3, r2
20000dcc:	b29b      	uxth	r3, r3
20000dce:	82bb      	strh	r3, [r7, #20]
        if (err < 0) {
20000dd0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
20000dd4:	2b00      	cmp	r3, #0
20000dd6:	da09      	bge.n	20000dec <writeLine+0x120>
            y0 += ystep;
20000dd8:	88ba      	ldrh	r2, [r7, #4]
20000dda:	8afb      	ldrh	r3, [r7, #22]
20000ddc:	4413      	add	r3, r2
20000dde:	b29b      	uxth	r3, r3
20000de0:	80bb      	strh	r3, [r7, #4]
            err += dx;
20000de2:	8aba      	ldrh	r2, [r7, #20]
20000de4:	8a3b      	ldrh	r3, [r7, #16]
20000de6:	4413      	add	r3, r2
20000de8:	b29b      	uxth	r3, r3
20000dea:	82bb      	strh	r3, [r7, #20]
        ystep = 1;
    } else {
        ystep = -1;
    }

    for (; x0<=x1; x0++) {
20000dec:	88fb      	ldrh	r3, [r7, #6]
20000dee:	f103 0301 	add.w	r3, r3, #1
20000df2:	80fb      	strh	r3, [r7, #6]
20000df4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20000df8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
20000dfc:	429a      	cmp	r2, r3
20000dfe:	ddcc      	ble.n	20000d9a <writeLine+0xce>
        if (err < 0) {
            y0 += ystep;
            err += dx;
        }
    }
}
20000e00:	f107 0720 	add.w	r7, r7, #32
20000e04:	46bd      	mov	sp, r7
20000e06:	bd80      	pop	{r7, pc}

20000e08 <configureSPI>:


void configureSPI(uint8_t frameSize){
20000e08:	b580      	push	{r7, lr}
20000e0a:	b084      	sub	sp, #16
20000e0c:	af02      	add	r7, sp, #8
20000e0e:	4603      	mov	r3, r0
20000e10:	71fb      	strb	r3, [r7, #7]
	MSS_SPI_configure_master_mode(
20000e12:	79fb      	ldrb	r3, [r7, #7]
20000e14:	9300      	str	r3, [sp, #0]
20000e16:	f642 40c4 	movw	r0, #11460	; 0x2cc4
20000e1a:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000e1e:	f04f 0100 	mov.w	r1, #0
20000e22:	f04f 0200 	mov.w	r2, #0
20000e26:	f04f 0302 	mov.w	r3, #2
20000e2a:	f000 fa01 	bl	20001230 <MSS_SPI_configure_master_mode>
		MSS_SPI_SLAVE_0,
		MSS_SPI_MODE0,
		MSS_SPI_PCLK_DIV_8,
		frameSize
	);
}
20000e2e:	f107 0708 	add.w	r7, r7, #8
20000e32:	46bd      	mov	sp, r7
20000e34:	bd80      	pop	{r7, pc}
20000e36:	bf00      	nop

20000e38 <sendSPI>:

void sendSPI(uint8_t data){
20000e38:	b580      	push	{r7, lr}
20000e3a:	b082      	sub	sp, #8
20000e3c:	af00      	add	r7, sp, #0
20000e3e:	4603      	mov	r3, r0
20000e40:	71fb      	strb	r3, [r7, #7]
	
	MSS_SPI_transfer_frame( &g_mss_spi1, data);
20000e42:	79fb      	ldrb	r3, [r7, #7]
20000e44:	f642 40c4 	movw	r0, #11460	; 0x2cc4
20000e48:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000e4c:	4619      	mov	r1, r3
20000e4e:	f000 fb4b 	bl	200014e8 <MSS_SPI_transfer_frame>
	
}
20000e52:	f107 0708 	add.w	r7, r7, #8
20000e56:	46bd      	mov	sp, r7
20000e58:	bd80      	pop	{r7, pc}
20000e5a:	bf00      	nop

20000e5c <sendSPI16>:

void sendSPI16(uint16_t data){
20000e5c:	b580      	push	{r7, lr}
20000e5e:	b082      	sub	sp, #8
20000e60:	af00      	add	r7, sp, #0
20000e62:	4603      	mov	r3, r0
20000e64:	80fb      	strh	r3, [r7, #6]
	MSS_SPI_transfer_frame(&g_mss_spi1, data>>8);
20000e66:	88fb      	ldrh	r3, [r7, #6]
20000e68:	ea4f 2313 	mov.w	r3, r3, lsr #8
20000e6c:	b29b      	uxth	r3, r3
20000e6e:	f642 40c4 	movw	r0, #11460	; 0x2cc4
20000e72:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000e76:	4619      	mov	r1, r3
20000e78:	f000 fb36 	bl	200014e8 <MSS_SPI_transfer_frame>
	MSS_SPI_transfer_frame(&g_mss_spi1, data);
20000e7c:	88fb      	ldrh	r3, [r7, #6]
20000e7e:	f642 40c4 	movw	r0, #11460	; 0x2cc4
20000e82:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000e86:	4619      	mov	r1, r3
20000e88:	f000 fb2e 	bl	200014e8 <MSS_SPI_transfer_frame>
}
20000e8c:	f107 0708 	add.w	r7, r7, #8
20000e90:	46bd      	mov	sp, r7
20000e92:	bd80      	pop	{r7, pc}

20000e94 <set_SPI_CS>:

void set_SPI_CS(){
20000e94:	b580      	push	{r7, lr}
20000e96:	af00      	add	r7, sp, #0
	MSS_SPI_set_slave_select(&g_mss_spi1, MSS_SPI_SLAVE_0);
20000e98:	f642 40c4 	movw	r0, #11460	; 0x2cc4
20000e9c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000ea0:	f04f 0100 	mov.w	r1, #0
20000ea4:	f000 fa54 	bl	20001350 <MSS_SPI_set_slave_select>
}
20000ea8:	bd80      	pop	{r7, pc}
20000eaa:	bf00      	nop

20000eac <clear_SPI_CS>:

void clear_SPI_CS(){
20000eac:	b580      	push	{r7, lr}
20000eae:	af00      	add	r7, sp, #0
	MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
20000eb0:	f642 40c4 	movw	r0, #11460	; 0x2cc4
20000eb4:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000eb8:	f04f 0100 	mov.w	r1, #0
20000ebc:	f000 facc 	bl	20001458 <MSS_SPI_clear_slave_select>
}
20000ec0:	bd80      	pop	{r7, pc}
20000ec2:	bf00      	nop

20000ec4 <set_DC_HIGH>:

void set_DC_HIGH(){
20000ec4:	b580      	push	{r7, lr}
20000ec6:	af00      	add	r7, sp, #0
	MSS_GPIO_set_output(DC, 1);
20000ec8:	f04f 0000 	mov.w	r0, #0
20000ecc:	f04f 0101 	mov.w	r1, #1
20000ed0:	f000 fe3c 	bl	20001b4c <MSS_GPIO_set_output>
}
20000ed4:	bd80      	pop	{r7, pc}
20000ed6:	bf00      	nop

20000ed8 <set_DC_LOW>:

void set_DC_LOW(){
20000ed8:	b580      	push	{r7, lr}
20000eda:	af00      	add	r7, sp, #0
	MSS_GPIO_set_output(DC, 0);
20000edc:	f04f 0000 	mov.w	r0, #0
20000ee0:	f04f 0100 	mov.w	r1, #0
20000ee4:	f000 fe32 	bl	20001b4c <MSS_GPIO_set_output>
}
20000ee8:	bd80      	pop	{r7, pc}
20000eea:	bf00      	nop

20000eec <NVIC_EnableIRQ>:
 *
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
20000eec:	b480      	push	{r7}
20000eee:	b083      	sub	sp, #12
20000ef0:	af00      	add	r7, sp, #0
20000ef2:	4603      	mov	r3, r0
20000ef4:	80fb      	strh	r3, [r7, #6]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20000ef6:	f24e 1300 	movw	r3, #57600	; 0xe100
20000efa:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000efe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20000f02:	ea4f 1252 	mov.w	r2, r2, lsr #5
20000f06:	88f9      	ldrh	r1, [r7, #6]
20000f08:	f001 011f 	and.w	r1, r1, #31
20000f0c:	f04f 0001 	mov.w	r0, #1
20000f10:	fa00 f101 	lsl.w	r1, r0, r1
20000f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000f18:	f107 070c 	add.w	r7, r7, #12
20000f1c:	46bd      	mov	sp, r7
20000f1e:	bc80      	pop	{r7}
20000f20:	4770      	bx	lr
20000f22:	bf00      	nop

20000f24 <NVIC_DisableIRQ>:
 * 
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
20000f24:	b480      	push	{r7}
20000f26:	b083      	sub	sp, #12
20000f28:	af00      	add	r7, sp, #0
20000f2a:	4603      	mov	r3, r0
20000f2c:	80fb      	strh	r3, [r7, #6]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
20000f2e:	f24e 1300 	movw	r3, #57600	; 0xe100
20000f32:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000f36:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20000f3a:	ea4f 1252 	mov.w	r2, r2, lsr #5
20000f3e:	88f9      	ldrh	r1, [r7, #6]
20000f40:	f001 011f 	and.w	r1, r1, #31
20000f44:	f04f 0001 	mov.w	r0, #1
20000f48:	fa00 f101 	lsl.w	r1, r0, r1
20000f4c:	f102 0220 	add.w	r2, r2, #32
20000f50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000f54:	f107 070c 	add.w	r7, r7, #12
20000f58:	46bd      	mov	sp, r7
20000f5a:	bc80      	pop	{r7}
20000f5c:	4770      	bx	lr
20000f5e:	bf00      	nop

20000f60 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20000f60:	b480      	push	{r7}
20000f62:	b083      	sub	sp, #12
20000f64:	af00      	add	r7, sp, #0
20000f66:	4603      	mov	r3, r0
20000f68:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20000f6a:	f24e 1300 	movw	r3, #57600	; 0xe100
20000f6e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000f72:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20000f76:	ea4f 1252 	mov.w	r2, r2, lsr #5
20000f7a:	88f9      	ldrh	r1, [r7, #6]
20000f7c:	f001 011f 	and.w	r1, r1, #31
20000f80:	f04f 0001 	mov.w	r0, #1
20000f84:	fa00 f101 	lsl.w	r1, r0, r1
20000f88:	f102 0260 	add.w	r2, r2, #96	; 0x60
20000f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000f90:	f107 070c 	add.w	r7, r7, #12
20000f94:	46bd      	mov	sp, r7
20000f96:	bc80      	pop	{r7}
20000f98:	4770      	bx	lr
20000f9a:	bf00      	nop

20000f9c <MSS_SPI_init>:
 */
void MSS_SPI_init
(
    mss_spi_instance_t * this_spi
)
{
20000f9c:	b580      	push	{r7, lr}
20000f9e:	b084      	sub	sp, #16
20000fa0:	af00      	add	r7, sp, #0
20000fa2:	6078      	str	r0, [r7, #4]
    uint16_t slave;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20000fa4:	687a      	ldr	r2, [r7, #4]
20000fa6:	f642 5348 	movw	r3, #11592	; 0x2d48
20000faa:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000fae:	429a      	cmp	r2, r3
20000fb0:	d007      	beq.n	20000fc2 <MSS_SPI_init+0x26>
20000fb2:	687a      	ldr	r2, [r7, #4]
20000fb4:	f642 43c4 	movw	r3, #11460	; 0x2cc4
20000fb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000fbc:	429a      	cmp	r2, r3
20000fbe:	d000      	beq.n	20000fc2 <MSS_SPI_init+0x26>
20000fc0:	be00      	bkpt	0x0000
     * Initialize SPI driver instance data. Relies on the majority
     * of data requiring 0 for initial state so we just need to fill
     * with 0s and finish off with a small number of non zero values.
     */
    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
20000fc2:	687b      	ldr	r3, [r7, #4]
20000fc4:	889b      	ldrh	r3, [r3, #4]
20000fc6:	b21b      	sxth	r3, r3
20000fc8:	4618      	mov	r0, r3
20000fca:	f7ff ffab 	bl	20000f24 <NVIC_DisableIRQ>

    memset(this_spi, 0, sizeof(mss_spi_instance_t));
20000fce:	6878      	ldr	r0, [r7, #4]
20000fd0:	f04f 0100 	mov.w	r1, #0
20000fd4:	f04f 0284 	mov.w	r2, #132	; 0x84
20000fd8:	f001 fc7e 	bl	200028d8 <memset>
    
    this_spi->cmd_done = 1u;
20000fdc:	687b      	ldr	r3, [r7, #4]
20000fde:	f04f 0201 	mov.w	r2, #1
20000fe2:	625a      	str	r2, [r3, #36]	; 0x24

    for(slave = 0u; slave < (uint16_t)MSS_SPI_MAX_NB_OF_SLAVES; ++slave)
20000fe4:	f04f 0300 	mov.w	r3, #0
20000fe8:	81fb      	strh	r3, [r7, #14]
20000fea:	e00d      	b.n	20001008 <MSS_SPI_init+0x6c>
    {
        this_spi->slaves_cfg[slave].ctrl_reg = NOT_CONFIGURED;
20000fec:	89fb      	ldrh	r3, [r7, #14]
20000fee:	687a      	ldr	r2, [r7, #4]
20000ff0:	f103 0306 	add.w	r3, r3, #6
20000ff4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20000ff8:	4413      	add	r3, r2
20000ffa:	f04f 32ff 	mov.w	r2, #4294967295
20000ffe:	605a      	str	r2, [r3, #4]

    memset(this_spi, 0, sizeof(mss_spi_instance_t));
    
    this_spi->cmd_done = 1u;

    for(slave = 0u; slave < (uint16_t)MSS_SPI_MAX_NB_OF_SLAVES; ++slave)
20001000:	89fb      	ldrh	r3, [r7, #14]
20001002:	f103 0301 	add.w	r3, r3, #1
20001006:	81fb      	strh	r3, [r7, #14]
20001008:	89fb      	ldrh	r3, [r7, #14]
2000100a:	2b07      	cmp	r3, #7
2000100c:	d9ee      	bls.n	20000fec <MSS_SPI_init+0x50>
    {
        this_spi->slaves_cfg[slave].ctrl_reg = NOT_CONFIGURED;
    }

    if(this_spi == &g_mss_spi0)
2000100e:	687a      	ldr	r2, [r7, #4]
20001010:	f642 5348 	movw	r3, #11592	; 0x2d48
20001014:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001018:	429a      	cmp	r2, r3
2000101a:	d126      	bne.n	2000106a <MSS_SPI_init+0xce>
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI0_BASE);
2000101c:	687a      	ldr	r2, [r7, #4]
2000101e:	f241 0300 	movw	r3, #4096	; 0x1000
20001022:	f2c4 0300 	movt	r3, #16384	; 0x4000
20001026:	6013      	str	r3, [r2, #0]
        this_spi->irqn = SPI0_IRQn;
20001028:	687b      	ldr	r3, [r7, #4]
2000102a:	f04f 020c 	mov.w	r2, #12
2000102e:	809a      	strh	r2, [r3, #4]

        /* reset SPI0 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI0_SOFTRESET_MASK;
20001030:	f242 0300 	movw	r3, #8192	; 0x2000
20001034:	f2ce 0304 	movt	r3, #57348	; 0xe004
20001038:	f242 0200 	movw	r2, #8192	; 0x2000
2000103c:	f2ce 0204 	movt	r2, #57348	; 0xe004
20001040:	6b12      	ldr	r2, [r2, #48]	; 0x30
20001042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
20001046:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended SPI0 interrupt */
        NVIC_ClearPendingIRQ(SPI0_IRQn);
20001048:	f04f 000c 	mov.w	r0, #12
2000104c:	f7ff ff88 	bl	20000f60 <NVIC_ClearPendingIRQ>
        /* Take SPI0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI0_SOFTRESET_MASK;
20001050:	f242 0300 	movw	r3, #8192	; 0x2000
20001054:	f2ce 0304 	movt	r3, #57348	; 0xe004
20001058:	f242 0200 	movw	r2, #8192	; 0x2000
2000105c:	f2ce 0204 	movt	r2, #57348	; 0xe004
20001060:	6b12      	ldr	r2, [r2, #48]	; 0x30
20001062:	f422 7200 	bic.w	r2, r2, #512	; 0x200
20001066:	631a      	str	r2, [r3, #48]	; 0x30
20001068:	e025      	b.n	200010b6 <MSS_SPI_init+0x11a>
    }
    else
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI1_BASE);
2000106a:	687a      	ldr	r2, [r7, #4]
2000106c:	f241 0300 	movw	r3, #4096	; 0x1000
20001070:	f2c4 0301 	movt	r3, #16385	; 0x4001
20001074:	6013      	str	r3, [r2, #0]
        this_spi->irqn = SPI1_IRQn;
20001076:	687b      	ldr	r3, [r7, #4]
20001078:	f04f 020d 	mov.w	r2, #13
2000107c:	809a      	strh	r2, [r3, #4]
        
        /* reset SPI1 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI1_SOFTRESET_MASK;
2000107e:	f242 0300 	movw	r3, #8192	; 0x2000
20001082:	f2ce 0304 	movt	r3, #57348	; 0xe004
20001086:	f242 0200 	movw	r2, #8192	; 0x2000
2000108a:	f2ce 0204 	movt	r2, #57348	; 0xe004
2000108e:	6b12      	ldr	r2, [r2, #48]	; 0x30
20001090:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
20001094:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended SPI1 interrupt */
        NVIC_ClearPendingIRQ(SPI1_IRQn);
20001096:	f04f 000d 	mov.w	r0, #13
2000109a:	f7ff ff61 	bl	20000f60 <NVIC_ClearPendingIRQ>
        /* Take SPI1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI1_SOFTRESET_MASK;
2000109e:	f242 0300 	movw	r3, #8192	; 0x2000
200010a2:	f2ce 0304 	movt	r3, #57348	; 0xe004
200010a6:	f242 0200 	movw	r2, #8192	; 0x2000
200010aa:	f2ce 0204 	movt	r2, #57348	; 0xe004
200010ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
200010b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
200010b4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* De-assert reset bit. */
    this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
200010b6:	687b      	ldr	r3, [r7, #4]
200010b8:	681b      	ldr	r3, [r3, #0]
200010ba:	687a      	ldr	r2, [r7, #4]
200010bc:	6812      	ldr	r2, [r2, #0]
200010be:	6812      	ldr	r2, [r2, #0]
200010c0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
200010c4:	601a      	str	r2, [r3, #0]
}
200010c6:	f107 0710 	add.w	r7, r7, #16
200010ca:	46bd      	mov	sp, r7
200010cc:	bd80      	pop	{r7, pc}
200010ce:	bf00      	nop

200010d0 <recover_from_rx_overflow>:
 */
static void recover_from_rx_overflow
(
    mss_spi_instance_t * this_spi
)
{
200010d0:	b580      	push	{r7, lr}
200010d2:	b08a      	sub	sp, #40	; 0x28
200010d4:	af00      	add	r7, sp, #0
200010d6:	6078      	str	r0, [r7, #4]
    uint32_t slave_select;
    
    /*
     * Read current SPI hardware block configuration.
     */
    control_reg = this_spi->hw_reg->CONTROL;
200010d8:	687b      	ldr	r3, [r7, #4]
200010da:	681b      	ldr	r3, [r3, #0]
200010dc:	681b      	ldr	r3, [r3, #0]
200010de:	60fb      	str	r3, [r7, #12]
    clk_gen = this_spi->hw_reg->CLK_GEN;
200010e0:	687b      	ldr	r3, [r7, #4]
200010e2:	681b      	ldr	r3, [r3, #0]
200010e4:	699b      	ldr	r3, [r3, #24]
200010e6:	613b      	str	r3, [r7, #16]
    frame_size = this_spi->hw_reg->TXRXDF_SIZE;
200010e8:	687b      	ldr	r3, [r7, #4]
200010ea:	681b      	ldr	r3, [r3, #0]
200010ec:	685b      	ldr	r3, [r3, #4]
200010ee:	617b      	str	r3, [r7, #20]
    control2 = this_spi->hw_reg->CONTROL2;
200010f0:	687b      	ldr	r3, [r7, #4]
200010f2:	681b      	ldr	r3, [r3, #0]
200010f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
200010f6:	61bb      	str	r3, [r7, #24]
    packet_size = this_spi->hw_reg->PKTSIZE;
200010f8:	687b      	ldr	r3, [r7, #4]
200010fa:	681b      	ldr	r3, [r3, #0]
200010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200010fe:	61fb      	str	r3, [r7, #28]
    cmd_size = this_spi->hw_reg->CMDSIZE;
20001100:	687b      	ldr	r3, [r7, #4]
20001102:	681b      	ldr	r3, [r3, #0]
20001104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20001106:	623b      	str	r3, [r7, #32]
    slave_select = this_spi->hw_reg->SLAVE_SELECT;
20001108:	687b      	ldr	r3, [r7, #4]
2000110a:	681b      	ldr	r3, [r3, #0]
2000110c:	69db      	ldr	r3, [r3, #28]
2000110e:	627b      	str	r3, [r7, #36]	; 0x24
     
    /*
     * Reset the SPI hardware block.
     */
    if(this_spi == &g_mss_spi0)
20001110:	687a      	ldr	r2, [r7, #4]
20001112:	f642 5348 	movw	r3, #11592	; 0x2d48
20001116:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000111a:	429a      	cmp	r2, r3
2000111c:	d12e      	bne.n	2000117c <recover_from_rx_overflow+0xac>
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI0_BASE);
2000111e:	687a      	ldr	r2, [r7, #4]
20001120:	f241 0300 	movw	r3, #4096	; 0x1000
20001124:	f2c4 0300 	movt	r3, #16384	; 0x4000
20001128:	6013      	str	r3, [r2, #0]
        this_spi->irqn = SPI0_IRQn;
2000112a:	687b      	ldr	r3, [r7, #4]
2000112c:	f04f 020c 	mov.w	r2, #12
20001130:	809a      	strh	r2, [r3, #4]

        /* reset SPI0 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI0_SOFTRESET_MASK;
20001132:	f242 0300 	movw	r3, #8192	; 0x2000
20001136:	f2ce 0304 	movt	r3, #57348	; 0xe004
2000113a:	f242 0200 	movw	r2, #8192	; 0x2000
2000113e:	f2ce 0204 	movt	r2, #57348	; 0xe004
20001142:	6b12      	ldr	r2, [r2, #48]	; 0x30
20001144:	f442 7200 	orr.w	r2, r2, #512	; 0x200
20001148:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended SPI0 interrupt */
        NVIC_ClearPendingIRQ(SPI0_IRQn);
2000114a:	f04f 000c 	mov.w	r0, #12
2000114e:	f7ff ff07 	bl	20000f60 <NVIC_ClearPendingIRQ>
        /* Take SPI0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI0_SOFTRESET_MASK;
20001152:	f242 0300 	movw	r3, #8192	; 0x2000
20001156:	f2ce 0304 	movt	r3, #57348	; 0xe004
2000115a:	f242 0200 	movw	r2, #8192	; 0x2000
2000115e:	f2ce 0204 	movt	r2, #57348	; 0xe004
20001162:	6b12      	ldr	r2, [r2, #48]	; 0x30
20001164:	f422 7200 	bic.w	r2, r2, #512	; 0x200
20001168:	631a      	str	r2, [r3, #48]	; 0x30

        this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
2000116a:	687b      	ldr	r3, [r7, #4]
2000116c:	681b      	ldr	r3, [r3, #0]
2000116e:	687a      	ldr	r2, [r7, #4]
20001170:	6812      	ldr	r2, [r2, #0]
20001172:	6812      	ldr	r2, [r2, #0]
20001174:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
20001178:	601a      	str	r2, [r3, #0]
2000117a:	e02d      	b.n	200011d8 <recover_from_rx_overflow+0x108>
    }
    else
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI1_BASE);
2000117c:	687a      	ldr	r2, [r7, #4]
2000117e:	f241 0300 	movw	r3, #4096	; 0x1000
20001182:	f2c4 0301 	movt	r3, #16385	; 0x4001
20001186:	6013      	str	r3, [r2, #0]
        this_spi->irqn = SPI1_IRQn;
20001188:	687b      	ldr	r3, [r7, #4]
2000118a:	f04f 020d 	mov.w	r2, #13
2000118e:	809a      	strh	r2, [r3, #4]
        
        /* reset SPI1 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI1_SOFTRESET_MASK;
20001190:	f242 0300 	movw	r3, #8192	; 0x2000
20001194:	f2ce 0304 	movt	r3, #57348	; 0xe004
20001198:	f242 0200 	movw	r2, #8192	; 0x2000
2000119c:	f2ce 0204 	movt	r2, #57348	; 0xe004
200011a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
200011a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
200011a6:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended SPI1 interrupt */
        NVIC_ClearPendingIRQ(SPI1_IRQn);
200011a8:	f04f 000d 	mov.w	r0, #13
200011ac:	f7ff fed8 	bl	20000f60 <NVIC_ClearPendingIRQ>
        /* Take SPI1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI1_SOFTRESET_MASK;
200011b0:	f242 0300 	movw	r3, #8192	; 0x2000
200011b4:	f2ce 0304 	movt	r3, #57348	; 0xe004
200011b8:	f242 0200 	movw	r2, #8192	; 0x2000
200011bc:	f2ce 0204 	movt	r2, #57348	; 0xe004
200011c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
200011c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
200011c6:	631a      	str	r2, [r3, #48]	; 0x30
        
        this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
200011c8:	687b      	ldr	r3, [r7, #4]
200011ca:	681b      	ldr	r3, [r3, #0]
200011cc:	687a      	ldr	r2, [r7, #4]
200011ce:	6812      	ldr	r2, [r2, #0]
200011d0:	6812      	ldr	r2, [r2, #0]
200011d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
200011d6:	601a      	str	r2, [r3, #0]
    }
    
    /*
     * Restore SPI hardware block configuration.
     */
    control_reg &= ~(uint32_t)CTRL_ENABLE_MASK;
200011d8:	68fb      	ldr	r3, [r7, #12]
200011da:	f023 0301 	bic.w	r3, r3, #1
200011de:	60fb      	str	r3, [r7, #12]
    this_spi->hw_reg->CONTROL = control_reg;
200011e0:	687b      	ldr	r3, [r7, #4]
200011e2:	681b      	ldr	r3, [r3, #0]
200011e4:	68fa      	ldr	r2, [r7, #12]
200011e6:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CLK_GEN = clk_gen;
200011e8:	687b      	ldr	r3, [r7, #4]
200011ea:	681b      	ldr	r3, [r3, #0]
200011ec:	693a      	ldr	r2, [r7, #16]
200011ee:	619a      	str	r2, [r3, #24]
    this_spi->hw_reg->TXRXDF_SIZE = frame_size;
200011f0:	687b      	ldr	r3, [r7, #4]
200011f2:	681b      	ldr	r3, [r3, #0]
200011f4:	697a      	ldr	r2, [r7, #20]
200011f6:	605a      	str	r2, [r3, #4]
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
200011f8:	687b      	ldr	r3, [r7, #4]
200011fa:	681b      	ldr	r3, [r3, #0]
200011fc:	687a      	ldr	r2, [r7, #4]
200011fe:	6812      	ldr	r2, [r2, #0]
20001200:	6812      	ldr	r2, [r2, #0]
20001202:	f042 0201 	orr.w	r2, r2, #1
20001206:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CONTROL2 = control2;
20001208:	687b      	ldr	r3, [r7, #4]
2000120a:	681b      	ldr	r3, [r3, #0]
2000120c:	69ba      	ldr	r2, [r7, #24]
2000120e:	629a      	str	r2, [r3, #40]	; 0x28
    this_spi->hw_reg->PKTSIZE = packet_size;
20001210:	687b      	ldr	r3, [r7, #4]
20001212:	681b      	ldr	r3, [r3, #0]
20001214:	69fa      	ldr	r2, [r7, #28]
20001216:	631a      	str	r2, [r3, #48]	; 0x30
    this_spi->hw_reg->CMDSIZE = cmd_size;
20001218:	687b      	ldr	r3, [r7, #4]
2000121a:	681b      	ldr	r3, [r3, #0]
2000121c:	6a3a      	ldr	r2, [r7, #32]
2000121e:	635a      	str	r2, [r3, #52]	; 0x34
    this_spi->hw_reg->SLAVE_SELECT = slave_select;
20001220:	687b      	ldr	r3, [r7, #4]
20001222:	681b      	ldr	r3, [r3, #0]
20001224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001226:	61da      	str	r2, [r3, #28]
}
20001228:	f107 0728 	add.w	r7, r7, #40	; 0x28
2000122c:	46bd      	mov	sp, r7
2000122e:	bd80      	pop	{r7, pc}

20001230 <MSS_SPI_configure_master_mode>:
    mss_spi_slave_t         slave,
    mss_spi_protocol_mode_t protocol_mode,
    mss_spi_pclk_div_t      clk_rate,
    uint8_t                 frame_bit_length
)
{
20001230:	b580      	push	{r7, lr}
20001232:	b084      	sub	sp, #16
20001234:	af00      	add	r7, sp, #0
20001236:	60f8      	str	r0, [r7, #12]
20001238:	607a      	str	r2, [r7, #4]
2000123a:	460a      	mov	r2, r1
2000123c:	72fa      	strb	r2, [r7, #11]
2000123e:	70fb      	strb	r3, [r7, #3]
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20001240:	68fa      	ldr	r2, [r7, #12]
20001242:	f642 5348 	movw	r3, #11592	; 0x2d48
20001246:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000124a:	429a      	cmp	r2, r3
2000124c:	d007      	beq.n	2000125e <MSS_SPI_configure_master_mode+0x2e>
2000124e:	68fa      	ldr	r2, [r7, #12]
20001250:	f642 43c4 	movw	r3, #11460	; 0x2cc4
20001254:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001258:	429a      	cmp	r2, r3
2000125a:	d000      	beq.n	2000125e <MSS_SPI_configure_master_mode+0x2e>
2000125c:	be00      	bkpt	0x0000
    ASSERT(slave < MSS_SPI_MAX_NB_OF_SLAVES);
2000125e:	7afb      	ldrb	r3, [r7, #11]
20001260:	2b07      	cmp	r3, #7
20001262:	d900      	bls.n	20001266 <MSS_SPI_configure_master_mode+0x36>
20001264:	be00      	bkpt	0x0000
    ASSERT(frame_bit_length <= MAX_FRAME_LENGTH);
20001266:	7e3b      	ldrb	r3, [r7, #24]
20001268:	2b20      	cmp	r3, #32
2000126a:	d900      	bls.n	2000126e <MSS_SPI_configure_master_mode+0x3e>
2000126c:	be00      	bkpt	0x0000
    
    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
2000126e:	68fb      	ldr	r3, [r7, #12]
20001270:	889b      	ldrh	r3, [r3, #4]
20001272:	b21b      	sxth	r3, r3
20001274:	4618      	mov	r0, r3
20001276:	f7ff fe55 	bl	20000f24 <NVIC_DisableIRQ>

    /* Reset slave transfer mode to unknown to wipe slate clean */
    this_spi->slave_xfer_mode = MSS_SPI_SLAVE_XFER_NONE;
2000127a:	68fb      	ldr	r3, [r7, #12]
2000127c:	f04f 0200 	mov.w	r2, #0
20001280:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set the mode. */
    this_spi->hw_reg->CONTROL &= ~(uint32_t)CTRL_ENABLE_MASK;
20001284:	68fb      	ldr	r3, [r7, #12]
20001286:	681b      	ldr	r3, [r3, #0]
20001288:	68fa      	ldr	r2, [r7, #12]
2000128a:	6812      	ldr	r2, [r2, #0]
2000128c:	6812      	ldr	r2, [r2, #0]
2000128e:	f022 0201 	bic.w	r2, r2, #1
20001292:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CONTROL |= CTRL_MASTER_MASK;
20001294:	68fb      	ldr	r3, [r7, #12]
20001296:	681b      	ldr	r3, [r3, #0]
20001298:	68fa      	ldr	r2, [r7, #12]
2000129a:	6812      	ldr	r2, [r2, #0]
2000129c:	6812      	ldr	r2, [r2, #0]
2000129e:	f042 0202 	orr.w	r2, r2, #2
200012a2:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
200012a4:	68fb      	ldr	r3, [r7, #12]
200012a6:	681b      	ldr	r3, [r3, #0]
200012a8:	68fa      	ldr	r2, [r7, #12]
200012aa:	6812      	ldr	r2, [r2, #0]
200012ac:	6812      	ldr	r2, [r2, #0]
200012ae:	f042 0201 	orr.w	r2, r2, #1
200012b2:	601a      	str	r2, [r3, #0]
    /*
     * Keep track of the required register configuration for this slave. These
     * values will be used by the MSS_SPI_set_slave_select() function to configure
     * the master to match the slave being selected.
     */
    if(slave < MSS_SPI_MAX_NB_OF_SLAVES)     
200012b4:	7afb      	ldrb	r3, [r7, #11]
200012b6:	2b07      	cmp	r3, #7
200012b8:	d83f      	bhi.n	2000133a <MSS_SPI_configure_master_mode+0x10a>
         *
         * We only do it for Motorola modes and if you need the slave selected
         * deselected between frames in modes 0 or 2 then remove SPS_MASK from
         * below.
         */
        if((MSS_SPI_MODE0 == protocol_mode) || (MSS_SPI_MODE1 == protocol_mode) ||
200012ba:	687b      	ldr	r3, [r7, #4]
200012bc:	2b00      	cmp	r3, #0
200012be:	d00b      	beq.n	200012d8 <MSS_SPI_configure_master_mode+0xa8>
200012c0:	687b      	ldr	r3, [r7, #4]
200012c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
200012c6:	d007      	beq.n	200012d8 <MSS_SPI_configure_master_mode+0xa8>
200012c8:	687b      	ldr	r3, [r7, #4]
200012ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
200012ce:	d003      	beq.n	200012d8 <MSS_SPI_configure_master_mode+0xa8>
200012d0:	687b      	ldr	r3, [r7, #4]
200012d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
200012d6:	d10f      	bne.n	200012f8 <MSS_SPI_configure_master_mode+0xc8>
           (MSS_SPI_MODE2 == protocol_mode) || (MSS_SPI_MODE3 == protocol_mode))
        {
            this_spi->slaves_cfg[slave].ctrl_reg = MASTER_MODE_MASK | SPS_MASK |
200012d8:	7afa      	ldrb	r2, [r7, #11]
200012da:	6879      	ldr	r1, [r7, #4]
200012dc:	f240 1302 	movw	r3, #258	; 0x102
200012e0:	f2c2 4300 	movt	r3, #9216	; 0x2400
200012e4:	ea41 0303 	orr.w	r3, r1, r3
200012e8:	68f9      	ldr	r1, [r7, #12]
200012ea:	f102 0206 	add.w	r2, r2, #6
200012ee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
200012f2:	440a      	add	r2, r1
200012f4:	6053      	str	r3, [r2, #4]
         *
         * We only do it for Motorola modes and if you need the slave selected
         * deselected between frames in modes 0 or 2 then remove SPS_MASK from
         * below.
         */
        if((MSS_SPI_MODE0 == protocol_mode) || (MSS_SPI_MODE1 == protocol_mode) ||
200012f6:	e00e      	b.n	20001316 <MSS_SPI_configure_master_mode+0xe6>
                                                   (uint32_t)protocol_mode | 
                                                   ((uint32_t)1 << TXRXDFCOUNT_SHIFT);
        }
        else
        {
            this_spi->slaves_cfg[slave].ctrl_reg = MASTER_MODE_MASK |
200012f8:	7afa      	ldrb	r2, [r7, #11]
200012fa:	6879      	ldr	r1, [r7, #4]
200012fc:	f240 1302 	movw	r3, #258	; 0x102
20001300:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001304:	ea41 0303 	orr.w	r3, r1, r3
20001308:	68f9      	ldr	r1, [r7, #12]
2000130a:	f102 0206 	add.w	r2, r2, #6
2000130e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
20001312:	440a      	add	r2, r1
20001314:	6053      	str	r3, [r2, #4]
                                                   BIGFIFO_MASK |
                                                   (uint32_t)protocol_mode | 
                                                   ((uint32_t)1 << TXRXDFCOUNT_SHIFT);
        }
        
        this_spi->slaves_cfg[slave].txrxdf_size_reg = frame_bit_length;
20001316:	7afb      	ldrb	r3, [r7, #11]
20001318:	68fa      	ldr	r2, [r7, #12]
2000131a:	f103 0306 	add.w	r3, r3, #6
2000131e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20001322:	4413      	add	r3, r2
20001324:	7e3a      	ldrb	r2, [r7, #24]
20001326:	721a      	strb	r2, [r3, #8]
        this_spi->slaves_cfg[slave].clk_gen = (uint8_t)clk_rate;
20001328:	7afb      	ldrb	r3, [r7, #11]
2000132a:	68fa      	ldr	r2, [r7, #12]
2000132c:	f103 0306 	add.w	r3, r3, #6
20001330:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20001334:	4413      	add	r3, r2
20001336:	78fa      	ldrb	r2, [r7, #3]
20001338:	725a      	strb	r2, [r3, #9]
    }
    /* Reenable interrupts */
    NVIC_EnableIRQ( this_spi->irqn );
2000133a:	68fb      	ldr	r3, [r7, #12]
2000133c:	889b      	ldrh	r3, [r3, #4]
2000133e:	b21b      	sxth	r3, r3
20001340:	4618      	mov	r0, r3
20001342:	f7ff fdd3 	bl	20000eec <NVIC_EnableIRQ>
}
20001346:	f107 0710 	add.w	r7, r7, #16
2000134a:	46bd      	mov	sp, r7
2000134c:	bd80      	pop	{r7, pc}
2000134e:	bf00      	nop

20001350 <MSS_SPI_set_slave_select>:
void MSS_SPI_set_slave_select
(
    mss_spi_instance_t * this_spi,
    mss_spi_slave_t slave
)
{
20001350:	b580      	push	{r7, lr}
20001352:	b084      	sub	sp, #16
20001354:	af00      	add	r7, sp, #0
20001356:	6078      	str	r0, [r7, #4]
20001358:	460b      	mov	r3, r1
2000135a:	70fb      	strb	r3, [r7, #3]
    uint32_t rx_overflow;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
2000135c:	687a      	ldr	r2, [r7, #4]
2000135e:	f642 5348 	movw	r3, #11592	; 0x2d48
20001362:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001366:	429a      	cmp	r2, r3
20001368:	d007      	beq.n	2000137a <MSS_SPI_set_slave_select+0x2a>
2000136a:	687a      	ldr	r2, [r7, #4]
2000136c:	f642 43c4 	movw	r3, #11460	; 0x2cc4
20001370:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001374:	429a      	cmp	r2, r3
20001376:	d000      	beq.n	2000137a <MSS_SPI_set_slave_select+0x2a>
20001378:	be00      	bkpt	0x0000
    
    /* This function is only intended to be used with an SPI master. */
    ASSERT((this_spi->hw_reg->CONTROL & CTRL_MASTER_MASK) == CTRL_MASTER_MASK);
2000137a:	687b      	ldr	r3, [r7, #4]
2000137c:	681b      	ldr	r3, [r3, #0]
2000137e:	681b      	ldr	r3, [r3, #0]
20001380:	f003 0302 	and.w	r3, r3, #2
20001384:	2b00      	cmp	r3, #0
20001386:	d100      	bne.n	2000138a <MSS_SPI_set_slave_select+0x3a>
20001388:	be00      	bkpt	0x0000
    
    ASSERT(this_spi->slaves_cfg[slave].ctrl_reg != NOT_CONFIGURED);
2000138a:	78fb      	ldrb	r3, [r7, #3]
2000138c:	687a      	ldr	r2, [r7, #4]
2000138e:	f103 0306 	add.w	r3, r3, #6
20001392:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20001396:	4413      	add	r3, r2
20001398:	685b      	ldr	r3, [r3, #4]
2000139a:	f1b3 3fff 	cmp.w	r3, #4294967295
2000139e:	d100      	bne.n	200013a2 <MSS_SPI_set_slave_select+0x52>
200013a0:	be00      	bkpt	0x0000

    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
200013a2:	687b      	ldr	r3, [r7, #4]
200013a4:	889b      	ldrh	r3, [r3, #4]
200013a6:	b21b      	sxth	r3, r3
200013a8:	4618      	mov	r0, r3
200013aa:	f7ff fdbb 	bl	20000f24 <NVIC_DisableIRQ>

    /* Recover from receive overflow. */
    rx_overflow = this_spi->hw_reg->STATUS & RX_OVERFLOW_MASK;
200013ae:	687b      	ldr	r3, [r7, #4]
200013b0:	681b      	ldr	r3, [r3, #0]
200013b2:	689b      	ldr	r3, [r3, #8]
200013b4:	f003 0304 	and.w	r3, r3, #4
200013b8:	60fb      	str	r3, [r7, #12]
    if(rx_overflow)
200013ba:	68fb      	ldr	r3, [r7, #12]
200013bc:	2b00      	cmp	r3, #0
200013be:	d002      	beq.n	200013c6 <MSS_SPI_set_slave_select+0x76>
    {
         recover_from_rx_overflow(this_spi);
200013c0:	6878      	ldr	r0, [r7, #4]
200013c2:	f7ff fe85 	bl	200010d0 <recover_from_rx_overflow>
    }
    
    /* Set the clock rate. */
    this_spi->hw_reg->CONTROL &= ~(uint32_t)CTRL_ENABLE_MASK;
200013c6:	687b      	ldr	r3, [r7, #4]
200013c8:	681b      	ldr	r3, [r3, #0]
200013ca:	687a      	ldr	r2, [r7, #4]
200013cc:	6812      	ldr	r2, [r2, #0]
200013ce:	6812      	ldr	r2, [r2, #0]
200013d0:	f022 0201 	bic.w	r2, r2, #1
200013d4:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CONTROL = this_spi->slaves_cfg[slave].ctrl_reg;
200013d6:	687b      	ldr	r3, [r7, #4]
200013d8:	681a      	ldr	r2, [r3, #0]
200013da:	78fb      	ldrb	r3, [r7, #3]
200013dc:	6879      	ldr	r1, [r7, #4]
200013de:	f103 0306 	add.w	r3, r3, #6
200013e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
200013e6:	440b      	add	r3, r1
200013e8:	685b      	ldr	r3, [r3, #4]
200013ea:	6013      	str	r3, [r2, #0]
    this_spi->hw_reg->CLK_GEN = this_spi->slaves_cfg[slave].clk_gen;
200013ec:	687b      	ldr	r3, [r7, #4]
200013ee:	681a      	ldr	r2, [r3, #0]
200013f0:	78fb      	ldrb	r3, [r7, #3]
200013f2:	6879      	ldr	r1, [r7, #4]
200013f4:	f103 0306 	add.w	r3, r3, #6
200013f8:	ea4f 03c3 	mov.w	r3, r3, lsl #3
200013fc:	440b      	add	r3, r1
200013fe:	7a5b      	ldrb	r3, [r3, #9]
20001400:	6193      	str	r3, [r2, #24]
    this_spi->hw_reg->TXRXDF_SIZE = this_spi->slaves_cfg[slave].txrxdf_size_reg;
20001402:	687b      	ldr	r3, [r7, #4]
20001404:	681a      	ldr	r2, [r3, #0]
20001406:	78fb      	ldrb	r3, [r7, #3]
20001408:	6879      	ldr	r1, [r7, #4]
2000140a:	f103 0306 	add.w	r3, r3, #6
2000140e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20001412:	440b      	add	r3, r1
20001414:	7a1b      	ldrb	r3, [r3, #8]
20001416:	6053      	str	r3, [r2, #4]
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
20001418:	687b      	ldr	r3, [r7, #4]
2000141a:	681b      	ldr	r3, [r3, #0]
2000141c:	687a      	ldr	r2, [r7, #4]
2000141e:	6812      	ldr	r2, [r2, #0]
20001420:	6812      	ldr	r2, [r2, #0]
20001422:	f042 0201 	orr.w	r2, r2, #1
20001426:	601a      	str	r2, [r3, #0]
    
    /* Set slave select */
    this_spi->hw_reg->SLAVE_SELECT |= ((uint32_t)1 << (uint32_t)slave);
20001428:	687b      	ldr	r3, [r7, #4]
2000142a:	681b      	ldr	r3, [r3, #0]
2000142c:	687a      	ldr	r2, [r7, #4]
2000142e:	6812      	ldr	r2, [r2, #0]
20001430:	69d1      	ldr	r1, [r2, #28]
20001432:	78fa      	ldrb	r2, [r7, #3]
20001434:	f04f 0001 	mov.w	r0, #1
20001438:	fa00 f202 	lsl.w	r2, r0, r2
2000143c:	ea41 0202 	orr.w	r2, r1, r2
20001440:	61da      	str	r2, [r3, #28]
    /* Reenable interrupts */
    NVIC_EnableIRQ( this_spi->irqn );
20001442:	687b      	ldr	r3, [r7, #4]
20001444:	889b      	ldrh	r3, [r3, #4]
20001446:	b21b      	sxth	r3, r3
20001448:	4618      	mov	r0, r3
2000144a:	f7ff fd4f 	bl	20000eec <NVIC_EnableIRQ>
}
2000144e:	f107 0710 	add.w	r7, r7, #16
20001452:	46bd      	mov	sp, r7
20001454:	bd80      	pop	{r7, pc}
20001456:	bf00      	nop

20001458 <MSS_SPI_clear_slave_select>:
void MSS_SPI_clear_slave_select
(
    mss_spi_instance_t * this_spi,
    mss_spi_slave_t slave
)
{
20001458:	b580      	push	{r7, lr}
2000145a:	b084      	sub	sp, #16
2000145c:	af00      	add	r7, sp, #0
2000145e:	6078      	str	r0, [r7, #4]
20001460:	460b      	mov	r3, r1
20001462:	70fb      	strb	r3, [r7, #3]
    uint32_t rx_overflow;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20001464:	687a      	ldr	r2, [r7, #4]
20001466:	f642 5348 	movw	r3, #11592	; 0x2d48
2000146a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000146e:	429a      	cmp	r2, r3
20001470:	d007      	beq.n	20001482 <MSS_SPI_clear_slave_select+0x2a>
20001472:	687a      	ldr	r2, [r7, #4]
20001474:	f642 43c4 	movw	r3, #11460	; 0x2cc4
20001478:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000147c:	429a      	cmp	r2, r3
2000147e:	d000      	beq.n	20001482 <MSS_SPI_clear_slave_select+0x2a>
20001480:	be00      	bkpt	0x0000
    
    /* This function is only intended to be used with an SPI master. */
    ASSERT((this_spi->hw_reg->CONTROL & CTRL_MASTER_MASK) == CTRL_MASTER_MASK);
20001482:	687b      	ldr	r3, [r7, #4]
20001484:	681b      	ldr	r3, [r3, #0]
20001486:	681b      	ldr	r3, [r3, #0]
20001488:	f003 0302 	and.w	r3, r3, #2
2000148c:	2b00      	cmp	r3, #0
2000148e:	d100      	bne.n	20001492 <MSS_SPI_clear_slave_select+0x3a>
20001490:	be00      	bkpt	0x0000

    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
20001492:	687b      	ldr	r3, [r7, #4]
20001494:	889b      	ldrh	r3, [r3, #4]
20001496:	b21b      	sxth	r3, r3
20001498:	4618      	mov	r0, r3
2000149a:	f7ff fd43 	bl	20000f24 <NVIC_DisableIRQ>

    /* Recover from receive overflow. */
    rx_overflow = this_spi->hw_reg->STATUS & RX_OVERFLOW_MASK;
2000149e:	687b      	ldr	r3, [r7, #4]
200014a0:	681b      	ldr	r3, [r3, #0]
200014a2:	689b      	ldr	r3, [r3, #8]
200014a4:	f003 0304 	and.w	r3, r3, #4
200014a8:	60fb      	str	r3, [r7, #12]
    if(rx_overflow)
200014aa:	68fb      	ldr	r3, [r7, #12]
200014ac:	2b00      	cmp	r3, #0
200014ae:	d002      	beq.n	200014b6 <MSS_SPI_clear_slave_select+0x5e>
    {
         recover_from_rx_overflow(this_spi);
200014b0:	6878      	ldr	r0, [r7, #4]
200014b2:	f7ff fe0d 	bl	200010d0 <recover_from_rx_overflow>
    }
    
    this_spi->hw_reg->SLAVE_SELECT &= ~((uint32_t)1 << (uint32_t)slave);
200014b6:	687b      	ldr	r3, [r7, #4]
200014b8:	681b      	ldr	r3, [r3, #0]
200014ba:	687a      	ldr	r2, [r7, #4]
200014bc:	6812      	ldr	r2, [r2, #0]
200014be:	69d1      	ldr	r1, [r2, #28]
200014c0:	78fa      	ldrb	r2, [r7, #3]
200014c2:	f04f 0001 	mov.w	r0, #1
200014c6:	fa00 f202 	lsl.w	r2, r0, r2
200014ca:	ea6f 0202 	mvn.w	r2, r2
200014ce:	ea01 0202 	and.w	r2, r1, r2
200014d2:	61da      	str	r2, [r3, #28]
    /* Reenable interrupts */
    NVIC_EnableIRQ( this_spi->irqn );
200014d4:	687b      	ldr	r3, [r7, #4]
200014d6:	889b      	ldrh	r3, [r3, #4]
200014d8:	b21b      	sxth	r3, r3
200014da:	4618      	mov	r0, r3
200014dc:	f7ff fd06 	bl	20000eec <NVIC_EnableIRQ>
}
200014e0:	f107 0710 	add.w	r7, r7, #16
200014e4:	46bd      	mov	sp, r7
200014e6:	bd80      	pop	{r7, pc}

200014e8 <MSS_SPI_transfer_frame>:
uint32_t MSS_SPI_transfer_frame
(
    mss_spi_instance_t * this_spi,
    uint32_t tx_bits
)
{
200014e8:	b480      	push	{r7}
200014ea:	b087      	sub	sp, #28
200014ec:	af00      	add	r7, sp, #0
200014ee:	6078      	str	r0, [r7, #4]
200014f0:	6039      	str	r1, [r7, #0]
    volatile uint32_t dummy;
    uint32_t rx_fifo_empty;
    uint32_t rx_ready;
    uint32_t tx_done;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
200014f2:	687a      	ldr	r2, [r7, #4]
200014f4:	f642 5348 	movw	r3, #11592	; 0x2d48
200014f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200014fc:	429a      	cmp	r2, r3
200014fe:	d007      	beq.n	20001510 <MSS_SPI_transfer_frame+0x28>
20001500:	687a      	ldr	r2, [r7, #4]
20001502:	f642 43c4 	movw	r3, #11460	; 0x2cc4
20001506:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000150a:	429a      	cmp	r2, r3
2000150c:	d000      	beq.n	20001510 <MSS_SPI_transfer_frame+0x28>
2000150e:	be00      	bkpt	0x0000
    
    /* This function is only intended to be used with an SPI master. */
    ASSERT((this_spi->hw_reg->CONTROL & CTRL_MASTER_MASK) == CTRL_MASTER_MASK);
20001510:	687b      	ldr	r3, [r7, #4]
20001512:	681b      	ldr	r3, [r3, #0]
20001514:	681b      	ldr	r3, [r3, #0]
20001516:	f003 0302 	and.w	r3, r3, #2
2000151a:	2b00      	cmp	r3, #0
2000151c:	d100      	bne.n	20001520 <MSS_SPI_transfer_frame+0x38>
2000151e:	be00      	bkpt	0x0000
    
    /* Ensure single frame transfer selected so interrupts work correctly */
    this_spi->hw_reg->CONTROL = (this_spi->hw_reg->CONTROL & ~TXRXDFCOUNT_MASK)
20001520:	687b      	ldr	r3, [r7, #4]
20001522:	681a      	ldr	r2, [r3, #0]
20001524:	687b      	ldr	r3, [r7, #4]
20001526:	681b      	ldr	r3, [r3, #0]
20001528:	6819      	ldr	r1, [r3, #0]
2000152a:	f240 03ff 	movw	r3, #255	; 0xff
2000152e:	f6cf 7300 	movt	r3, #65280	; 0xff00
20001532:	ea01 0303 	and.w	r3, r1, r3
20001536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2000153a:	6013      	str	r3, [r2, #0]
                                | ((uint32_t)1u << TXRXDFCOUNT_SHIFT);

    /* Flush the Tx and Rx FIFOs. Please note this does not have any effect on A2F200. */
    this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
2000153c:	687b      	ldr	r3, [r7, #4]
2000153e:	681b      	ldr	r3, [r3, #0]
20001540:	687a      	ldr	r2, [r7, #4]
20001542:	6812      	ldr	r2, [r2, #0]
20001544:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
20001546:	f042 020c 	orr.w	r2, r2, #12
2000154a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Flush Rx FIFO in case we are executing on A2F200. */
    rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
2000154c:	687b      	ldr	r3, [r7, #4]
2000154e:	681b      	ldr	r3, [r3, #0]
20001550:	689b      	ldr	r3, [r3, #8]
20001552:	f003 0340 	and.w	r3, r3, #64	; 0x40
20001556:	60fb      	str	r3, [r7, #12]
    while(0u == rx_fifo_empty)
20001558:	e00b      	b.n	20001572 <MSS_SPI_transfer_frame+0x8a>
    {
        dummy = this_spi->hw_reg->RX_DATA;
2000155a:	687b      	ldr	r3, [r7, #4]
2000155c:	681b      	ldr	r3, [r3, #0]
2000155e:	691b      	ldr	r3, [r3, #16]
20001560:	60bb      	str	r3, [r7, #8]
        dummy = dummy;  /* Prevent Lint warning. */
20001562:	68bb      	ldr	r3, [r7, #8]
20001564:	60bb      	str	r3, [r7, #8]
        rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
20001566:	687b      	ldr	r3, [r7, #4]
20001568:	681b      	ldr	r3, [r3, #0]
2000156a:	689b      	ldr	r3, [r3, #8]
2000156c:	f003 0340 	and.w	r3, r3, #64	; 0x40
20001570:	60fb      	str	r3, [r7, #12]
    /* Flush the Tx and Rx FIFOs. Please note this does not have any effect on A2F200. */
    this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
    
    /* Flush Rx FIFO in case we are executing on A2F200. */
    rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
    while(0u == rx_fifo_empty)
20001572:	68fb      	ldr	r3, [r7, #12]
20001574:	2b00      	cmp	r3, #0
20001576:	d0f0      	beq.n	2000155a <MSS_SPI_transfer_frame+0x72>
        dummy = dummy;  /* Prevent Lint warning. */
        rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
    }
    
    /* Send frame. */
    this_spi->hw_reg->TX_DATA = tx_bits;
20001578:	687b      	ldr	r3, [r7, #4]
2000157a:	681b      	ldr	r3, [r3, #0]
2000157c:	683a      	ldr	r2, [r7, #0]
2000157e:	615a      	str	r2, [r3, #20]
    
    /* Wait for frame Tx to complete. */
    tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
20001580:	687b      	ldr	r3, [r7, #4]
20001582:	681b      	ldr	r3, [r3, #0]
20001584:	689b      	ldr	r3, [r3, #8]
20001586:	f003 0301 	and.w	r3, r3, #1
2000158a:	617b      	str	r3, [r7, #20]
    while(0u == tx_done)
2000158c:	e005      	b.n	2000159a <MSS_SPI_transfer_frame+0xb2>
    {
        tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
2000158e:	687b      	ldr	r3, [r7, #4]
20001590:	681b      	ldr	r3, [r3, #0]
20001592:	689b      	ldr	r3, [r3, #8]
20001594:	f003 0301 	and.w	r3, r3, #1
20001598:	617b      	str	r3, [r7, #20]
    /* Send frame. */
    this_spi->hw_reg->TX_DATA = tx_bits;
    
    /* Wait for frame Tx to complete. */
    tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
    while(0u == tx_done)
2000159a:	697b      	ldr	r3, [r7, #20]
2000159c:	2b00      	cmp	r3, #0
2000159e:	d0f6      	beq.n	2000158e <MSS_SPI_transfer_frame+0xa6>
        tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
    }
    
    /* Read received frame. */
    /* Wait for Rx complete. */
    rx_ready = this_spi->hw_reg->STATUS & RX_DATA_READY_MASK;
200015a0:	687b      	ldr	r3, [r7, #4]
200015a2:	681b      	ldr	r3, [r3, #0]
200015a4:	689b      	ldr	r3, [r3, #8]
200015a6:	f003 0302 	and.w	r3, r3, #2
200015aa:	613b      	str	r3, [r7, #16]
    while(0u == rx_ready)
200015ac:	e005      	b.n	200015ba <MSS_SPI_transfer_frame+0xd2>
    {
        rx_ready = this_spi->hw_reg->STATUS & RX_DATA_READY_MASK;
200015ae:	687b      	ldr	r3, [r7, #4]
200015b0:	681b      	ldr	r3, [r3, #0]
200015b2:	689b      	ldr	r3, [r3, #8]
200015b4:	f003 0302 	and.w	r3, r3, #2
200015b8:	613b      	str	r3, [r7, #16]
    }
    
    /* Read received frame. */
    /* Wait for Rx complete. */
    rx_ready = this_spi->hw_reg->STATUS & RX_DATA_READY_MASK;
    while(0u == rx_ready)
200015ba:	693b      	ldr	r3, [r7, #16]
200015bc:	2b00      	cmp	r3, #0
200015be:	d0f6      	beq.n	200015ae <MSS_SPI_transfer_frame+0xc6>
    {
        rx_ready = this_spi->hw_reg->STATUS & RX_DATA_READY_MASK;
    }
    /* Return Rx data. */
    return( this_spi->hw_reg->RX_DATA );
200015c0:	687b      	ldr	r3, [r7, #4]
200015c2:	681b      	ldr	r3, [r3, #0]
200015c4:	691b      	ldr	r3, [r3, #16]
}
200015c6:	4618      	mov	r0, r3
200015c8:	f107 071c 	add.w	r7, r7, #28
200015cc:	46bd      	mov	sp, r7
200015ce:	bc80      	pop	{r7}
200015d0:	4770      	bx	lr
200015d2:	bf00      	nop

200015d4 <fill_slave_tx_fifo>:
 */
static void fill_slave_tx_fifo
(
    mss_spi_instance_t * this_spi
)
{
200015d4:	b480      	push	{r7}
200015d6:	b085      	sub	sp, #20
200015d8:	af00      	add	r7, sp, #0
200015da:	6078      	str	r0, [r7, #4]
    uint32_t guard = 0u;
200015dc:	f04f 0300 	mov.w	r3, #0
200015e0:	60fb      	str	r3, [r7, #12]

    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
200015e2:	e00e      	b.n	20001602 <fill_slave_tx_fifo+0x2e>
          (this_spi->slave_tx_idx < this_spi->slave_tx_size))
    {
        /* Sending from primary slave transmit buffer */
        this_spi->hw_reg->TX_DATA = this_spi->slave_tx_buffer[this_spi->slave_tx_idx];
200015e4:	687b      	ldr	r3, [r7, #4]
200015e6:	681b      	ldr	r3, [r3, #0]
200015e8:	687a      	ldr	r2, [r7, #4]
200015ea:	6891      	ldr	r1, [r2, #8]
200015ec:	687a      	ldr	r2, [r7, #4]
200015ee:	6912      	ldr	r2, [r2, #16]
200015f0:	440a      	add	r2, r1
200015f2:	7812      	ldrb	r2, [r2, #0]
200015f4:	615a      	str	r2, [r3, #20]
        ++this_spi->slave_tx_idx;
200015f6:	687b      	ldr	r3, [r7, #4]
200015f8:	691b      	ldr	r3, [r3, #16]
200015fa:	f103 0201 	add.w	r2, r3, #1
200015fe:	687b      	ldr	r3, [r7, #4]
20001600:	611a      	str	r2, [r3, #16]
    mss_spi_instance_t * this_spi
)
{
    uint32_t guard = 0u;

    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20001602:	687b      	ldr	r3, [r7, #4]
20001604:	681b      	ldr	r3, [r3, #0]
20001606:	689b      	ldr	r3, [r3, #8]
20001608:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000160c:	2b00      	cmp	r3, #0
2000160e:	d105      	bne.n	2000161c <fill_slave_tx_fifo+0x48>
          (this_spi->slave_tx_idx < this_spi->slave_tx_size))
20001610:	687b      	ldr	r3, [r7, #4]
20001612:	691a      	ldr	r2, [r3, #16]
20001614:	687b      	ldr	r3, [r7, #4]
20001616:	68db      	ldr	r3, [r3, #12]
    mss_spi_instance_t * this_spi
)
{
    uint32_t guard = 0u;

    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20001618:	429a      	cmp	r2, r3
2000161a:	d3e3      	bcc.n	200015e4 <fill_slave_tx_fifo+0x10>
        /* Sending from primary slave transmit buffer */
        this_spi->hw_reg->TX_DATA = this_spi->slave_tx_buffer[this_spi->slave_tx_idx];
        ++this_spi->slave_tx_idx;
    }

    if(this_spi->slave_tx_idx >= this_spi->slave_tx_size)
2000161c:	687b      	ldr	r3, [r7, #4]
2000161e:	691a      	ldr	r2, [r3, #16]
20001620:	687b      	ldr	r3, [r7, #4]
20001622:	68db      	ldr	r3, [r3, #12]
20001624:	429a      	cmp	r2, r3
20001626:	d31c      	bcc.n	20001662 <fill_slave_tx_fifo+0x8e>
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20001628:	e00e      	b.n	20001648 <fill_slave_tx_fifo+0x74>
              (this_spi->resp_buff_tx_idx < this_spi->resp_buff_size))
        {
            /* Sending from command response buffer */
            this_spi->hw_reg->TX_DATA = this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx];
2000162a:	687b      	ldr	r3, [r7, #4]
2000162c:	681b      	ldr	r3, [r3, #0]
2000162e:	687a      	ldr	r2, [r7, #4]
20001630:	6951      	ldr	r1, [r2, #20]
20001632:	687a      	ldr	r2, [r7, #4]
20001634:	69d2      	ldr	r2, [r2, #28]
20001636:	440a      	add	r2, r1
20001638:	7812      	ldrb	r2, [r2, #0]
2000163a:	615a      	str	r2, [r3, #20]
            ++this_spi->resp_buff_tx_idx;
2000163c:	687b      	ldr	r3, [r7, #4]
2000163e:	69db      	ldr	r3, [r3, #28]
20001640:	f103 0201 	add.w	r2, r3, #1
20001644:	687b      	ldr	r3, [r7, #4]
20001646:	61da      	str	r2, [r3, #28]
        ++this_spi->slave_tx_idx;
    }

    if(this_spi->slave_tx_idx >= this_spi->slave_tx_size)
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20001648:	687b      	ldr	r3, [r7, #4]
2000164a:	681b      	ldr	r3, [r3, #0]
2000164c:	689b      	ldr	r3, [r3, #8]
2000164e:	f403 7380 	and.w	r3, r3, #256	; 0x100
20001652:	2b00      	cmp	r3, #0
20001654:	d105      	bne.n	20001662 <fill_slave_tx_fifo+0x8e>
              (this_spi->resp_buff_tx_idx < this_spi->resp_buff_size))
20001656:	687b      	ldr	r3, [r7, #4]
20001658:	69da      	ldr	r2, [r3, #28]
2000165a:	687b      	ldr	r3, [r7, #4]
2000165c:	699b      	ldr	r3, [r3, #24]
        ++this_spi->slave_tx_idx;
    }

    if(this_spi->slave_tx_idx >= this_spi->slave_tx_size)
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
2000165e:	429a      	cmp	r2, r3
20001660:	d3e3      	bcc.n	2000162a <fill_slave_tx_fifo+0x56>
            this_spi->hw_reg->TX_DATA = this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx];
            ++this_spi->resp_buff_tx_idx;
        }
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
20001662:	687b      	ldr	r3, [r7, #4]
20001664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001666:	2b00      	cmp	r3, #0
20001668:	d01f      	beq.n	200016aa <fill_slave_tx_fifo+0xd6>
2000166a:	687b      	ldr	r3, [r7, #4]
2000166c:	691a      	ldr	r2, [r3, #16]
2000166e:	687b      	ldr	r3, [r7, #4]
20001670:	68db      	ldr	r3, [r3, #12]
20001672:	429a      	cmp	r2, r3
20001674:	d319      	bcc.n	200016aa <fill_slave_tx_fifo+0xd6>
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
20001676:	687b      	ldr	r3, [r7, #4]
20001678:	69da      	ldr	r2, [r3, #28]
2000167a:	687b      	ldr	r3, [r7, #4]
2000167c:	699b      	ldr	r3, [r3, #24]
            this_spi->hw_reg->TX_DATA = this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx];
            ++this_spi->resp_buff_tx_idx;
        }
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
2000167e:	429a      	cmp	r2, r3
20001680:	d313      	bcc.n	200016aa <fill_slave_tx_fifo+0xd6>
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20001682:	e008      	b.n	20001696 <fill_slave_tx_fifo+0xc2>
              (guard < BIG_FIFO_SIZE))
        {
            /* Nothing left so pad with 0s for consistency */
            this_spi->hw_reg->TX_DATA = 0x00u;
20001684:	687b      	ldr	r3, [r7, #4]
20001686:	681b      	ldr	r3, [r3, #0]
20001688:	f04f 0200 	mov.w	r2, #0
2000168c:	615a      	str	r2, [r3, #20]
             * We use the guard count to cover the unlikely event that we are
             * never seeing the TX FIFO full because the data is being pulled
             * out as fast as we can stuff it in. In this event we never spend
             * more than a full FIFOs worth of time spinning here.
             */
            guard++;
2000168e:	68fb      	ldr	r3, [r7, #12]
20001690:	f103 0301 	add.w	r3, r3, #1
20001694:	60fb      	str	r3, [r7, #12]
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20001696:	687b      	ldr	r3, [r7, #4]
20001698:	681b      	ldr	r3, [r3, #0]
2000169a:	689b      	ldr	r3, [r3, #8]
2000169c:	f403 7380 	and.w	r3, r3, #256	; 0x100
200016a0:	2b00      	cmp	r3, #0
200016a2:	d102      	bne.n	200016aa <fill_slave_tx_fifo+0xd6>
200016a4:	68fb      	ldr	r3, [r7, #12]
200016a6:	2b1f      	cmp	r3, #31
200016a8:	d9ec      	bls.n	20001684 <fill_slave_tx_fifo+0xb0>
             */
            guard++;
        }
    }

}
200016aa:	f107 0714 	add.w	r7, r7, #20
200016ae:	46bd      	mov	sp, r7
200016b0:	bc80      	pop	{r7}
200016b2:	4770      	bx	lr

200016b4 <read_slave_rx_fifo>:
 */
static void read_slave_rx_fifo
(
    mss_spi_instance_t * this_spi
)
{
200016b4:	b580      	push	{r7, lr}
200016b6:	b084      	sub	sp, #16
200016b8:	af00      	add	r7, sp, #0
200016ba:	6078      	str	r0, [r7, #4]
    volatile uint32_t rx_frame;
    
    if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
200016bc:	687b      	ldr	r3, [r7, #4]
200016be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
200016c2:	2b02      	cmp	r3, #2
200016c4:	d115      	bne.n	200016f2 <read_slave_rx_fifo+0x3e>
    {
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
200016c6:	e00c      	b.n	200016e2 <read_slave_rx_fifo+0x2e>
        {
            /* Single frame handling mode. */
            rx_frame = this_spi->hw_reg->RX_DATA;
200016c8:	687b      	ldr	r3, [r7, #4]
200016ca:	681b      	ldr	r3, [r3, #0]
200016cc:	691b      	ldr	r3, [r3, #16]
200016ce:	60fb      	str	r3, [r7, #12]
            if(0u != this_spi->frame_rx_handler)
200016d0:	687b      	ldr	r3, [r7, #4]
200016d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
200016d4:	2b00      	cmp	r3, #0
200016d6:	d004      	beq.n	200016e2 <read_slave_rx_fifo+0x2e>
            {
                this_spi->frame_rx_handler( rx_frame );
200016d8:	687b      	ldr	r3, [r7, #4]
200016da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
200016dc:	68fa      	ldr	r2, [r7, #12]
200016de:	4610      	mov	r0, r2
200016e0:	4798      	blx	r3
{
    volatile uint32_t rx_frame;
    
    if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
    {
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
200016e2:	687b      	ldr	r3, [r7, #4]
200016e4:	681b      	ldr	r3, [r3, #0]
200016e6:	689b      	ldr	r3, [r3, #8]
200016e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
200016ec:	2b00      	cmp	r3, #0
200016ee:	d0eb      	beq.n	200016c8 <read_slave_rx_fifo+0x14>
200016f0:	e032      	b.n	20001758 <read_slave_rx_fifo+0xa4>
            {
                this_spi->frame_rx_handler( rx_frame );
            }
        }
    }
    else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
200016f2:	687b      	ldr	r3, [r7, #4]
200016f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
200016f8:	2b01      	cmp	r3, #1
200016fa:	d125      	bne.n	20001748 <read_slave_rx_fifo+0x94>
    {
        /* Block handling mode. */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
200016fc:	e017      	b.n	2000172e <read_slave_rx_fifo+0x7a>
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
200016fe:	687b      	ldr	r3, [r7, #4]
20001700:	681b      	ldr	r3, [r3, #0]
20001702:	691b      	ldr	r3, [r3, #16]
20001704:	60fb      	str	r3, [r7, #12]
            if(this_spi->slave_rx_idx < this_spi->slave_rx_size)
20001706:	687b      	ldr	r3, [r7, #4]
20001708:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2000170a:	687b      	ldr	r3, [r7, #4]
2000170c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000170e:	429a      	cmp	r2, r3
20001710:	d207      	bcs.n	20001722 <read_slave_rx_fifo+0x6e>
            {
                this_spi->slave_rx_buffer[this_spi->slave_rx_idx] = (uint8_t)rx_frame;
20001712:	687b      	ldr	r3, [r7, #4]
20001714:	6a9a      	ldr	r2, [r3, #40]	; 0x28
20001716:	687b      	ldr	r3, [r7, #4]
20001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000171a:	4413      	add	r3, r2
2000171c:	68fa      	ldr	r2, [r7, #12]
2000171e:	b2d2      	uxtb	r2, r2
20001720:	701a      	strb	r2, [r3, #0]
            }

            ++this_spi->slave_rx_idx;
20001722:	687b      	ldr	r3, [r7, #4]
20001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001726:	f103 0201 	add.w	r2, r3, #1
2000172a:	687b      	ldr	r3, [r7, #4]
2000172c:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
    else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
    {
        /* Block handling mode. */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
2000172e:	687b      	ldr	r3, [r7, #4]
20001730:	681b      	ldr	r3, [r3, #0]
20001732:	689b      	ldr	r3, [r3, #8]
20001734:	f003 0340 	and.w	r3, r3, #64	; 0x40
20001738:	2b00      	cmp	r3, #0
2000173a:	d0e0      	beq.n	200016fe <read_slave_rx_fifo+0x4a>
2000173c:	e00c      	b.n	20001758 <read_slave_rx_fifo+0xa4>
    else
    {
        /* Should not happen... Just purge FIFO */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
2000173e:	687b      	ldr	r3, [r7, #4]
20001740:	681b      	ldr	r3, [r3, #0]
20001742:	691b      	ldr	r3, [r3, #16]
20001744:	60fb      	str	r3, [r7, #12]
20001746:	e000      	b.n	2000174a <read_slave_rx_fifo+0x96>
        }
    }
    else
    {
        /* Should not happen... Just purge FIFO */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
20001748:	bf00      	nop
2000174a:	687b      	ldr	r3, [r7, #4]
2000174c:	681b      	ldr	r3, [r3, #0]
2000174e:	689b      	ldr	r3, [r3, #8]
20001750:	f003 0340 	and.w	r3, r3, #64	; 0x40
20001754:	2b00      	cmp	r3, #0
20001756:	d0f2      	beq.n	2000173e <read_slave_rx_fifo+0x8a>
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
        }
    }
}
20001758:	f107 0710 	add.w	r7, r7, #16
2000175c:	46bd      	mov	sp, r7
2000175e:	bd80      	pop	{r7, pc}

20001760 <mss_spi_isr>:
 */
static void mss_spi_isr
(
    mss_spi_instance_t * this_spi
)
{    
20001760:	b580      	push	{r7, lr}
20001762:	b086      	sub	sp, #24
20001764:	af00      	add	r7, sp, #0
20001766:	6078      	str	r0, [r7, #4]
    volatile uint32_t rx_frame;
    __I  uint32_t *this_mis = &this_spi->hw_reg->MIS;
20001768:	687b      	ldr	r3, [r7, #4]
2000176a:	681b      	ldr	r3, [r3, #0]
2000176c:	f103 0320 	add.w	r3, r3, #32
20001770:	613b      	str	r3, [r7, #16]

    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20001772:	687a      	ldr	r2, [r7, #4]
20001774:	f642 5348 	movw	r3, #11592	; 0x2d48
20001778:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000177c:	429a      	cmp	r2, r3
2000177e:	d007      	beq.n	20001790 <mss_spi_isr+0x30>
20001780:	687a      	ldr	r2, [r7, #4]
20001782:	f642 43c4 	movw	r3, #11460	; 0x2cc4
20001786:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000178a:	429a      	cmp	r2, r3
2000178c:	d000      	beq.n	20001790 <mss_spi_isr+0x30>
2000178e:	be00      	bkpt	0x0000
  
    if(0u != (*this_mis & RXDONE_IRQ_MASK))
20001790:	693b      	ldr	r3, [r7, #16]
20001792:	681b      	ldr	r3, [r3, #0]
20001794:	f003 0302 	and.w	r3, r3, #2
20001798:	2b00      	cmp	r3, #0
2000179a:	d052      	beq.n	20001842 <mss_spi_isr+0xe2>
    {
        if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
2000179c:	687b      	ldr	r3, [r7, #4]
2000179e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
200017a2:	2b02      	cmp	r3, #2
200017a4:	d115      	bne.n	200017d2 <mss_spi_isr+0x72>
        {
            /* Single frame handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
200017a6:	e00c      	b.n	200017c2 <mss_spi_isr+0x62>
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
200017a8:	687b      	ldr	r3, [r7, #4]
200017aa:	681b      	ldr	r3, [r3, #0]
200017ac:	691b      	ldr	r3, [r3, #16]
200017ae:	60fb      	str	r3, [r7, #12]
                if(0u != this_spi->frame_rx_handler)
200017b0:	687b      	ldr	r3, [r7, #4]
200017b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
200017b4:	2b00      	cmp	r3, #0
200017b6:	d004      	beq.n	200017c2 <mss_spi_isr+0x62>
                {
                    this_spi->frame_rx_handler( rx_frame );
200017b8:	687b      	ldr	r3, [r7, #4]
200017ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
200017bc:	68fa      	ldr	r2, [r7, #12]
200017be:	4610      	mov	r0, r2
200017c0:	4798      	blx	r3
    if(0u != (*this_mis & RXDONE_IRQ_MASK))
    {
        if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
        {
            /* Single frame handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
200017c2:	687b      	ldr	r3, [r7, #4]
200017c4:	681b      	ldr	r3, [r3, #0]
200017c6:	689b      	ldr	r3, [r3, #8]
200017c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
200017cc:	2b00      	cmp	r3, #0
200017ce:	d0eb      	beq.n	200017a8 <mss_spi_isr+0x48>
200017d0:	e032      	b.n	20001838 <mss_spi_isr+0xd8>
                {
                    this_spi->frame_rx_handler( rx_frame );
                }
            }
        }
        else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
200017d2:	687b      	ldr	r3, [r7, #4]
200017d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
200017d8:	2b01      	cmp	r3, #1
200017da:	d125      	bne.n	20001828 <mss_spi_isr+0xc8>
        {
            /* Block handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
200017dc:	e017      	b.n	2000180e <mss_spi_isr+0xae>
            {
                rx_frame = this_spi->hw_reg->RX_DATA;                /* Read from FIFO irrespective */
200017de:	687b      	ldr	r3, [r7, #4]
200017e0:	681b      	ldr	r3, [r3, #0]
200017e2:	691b      	ldr	r3, [r3, #16]
200017e4:	60fb      	str	r3, [r7, #12]
                if(this_spi->slave_rx_idx < this_spi->slave_rx_size) /* Write to array if required */
200017e6:	687b      	ldr	r3, [r7, #4]
200017e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200017ea:	687b      	ldr	r3, [r7, #4]
200017ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200017ee:	429a      	cmp	r2, r3
200017f0:	d207      	bcs.n	20001802 <mss_spi_isr+0xa2>
                {
                    this_spi->slave_rx_buffer[this_spi->slave_rx_idx] = (uint8_t)rx_frame;
200017f2:	687b      	ldr	r3, [r7, #4]
200017f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
200017f6:	687b      	ldr	r3, [r7, #4]
200017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200017fa:	4413      	add	r3, r2
200017fc:	68fa      	ldr	r2, [r7, #12]
200017fe:	b2d2      	uxtb	r2, r2
20001800:	701a      	strb	r2, [r3, #0]
                }

                ++this_spi->slave_rx_idx;            
20001802:	687b      	ldr	r3, [r7, #4]
20001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001806:	f103 0201 	add.w	r2, r3, #1
2000180a:	687b      	ldr	r3, [r7, #4]
2000180c:	631a      	str	r2, [r3, #48]	; 0x30
            }
        }
        else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
        {
            /* Block handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
2000180e:	687b      	ldr	r3, [r7, #4]
20001810:	681b      	ldr	r3, [r3, #0]
20001812:	689b      	ldr	r3, [r3, #8]
20001814:	f003 0340 	and.w	r3, r3, #64	; 0x40
20001818:	2b00      	cmp	r3, #0
2000181a:	d0e0      	beq.n	200017de <mss_spi_isr+0x7e>
2000181c:	e00c      	b.n	20001838 <mss_spi_isr+0xd8>
        else
        {
            /* No slave handling in place so just purge FIFO */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
2000181e:	687b      	ldr	r3, [r7, #4]
20001820:	681b      	ldr	r3, [r3, #0]
20001822:	691b      	ldr	r3, [r3, #16]
20001824:	60fb      	str	r3, [r7, #12]
20001826:	e000      	b.n	2000182a <mss_spi_isr+0xca>
            }
        }
        else
        {
            /* No slave handling in place so just purge FIFO */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
20001828:	bf00      	nop
2000182a:	687b      	ldr	r3, [r7, #4]
2000182c:	681b      	ldr	r3, [r3, #0]
2000182e:	689b      	ldr	r3, [r3, #8]
20001830:	f003 0340 	and.w	r3, r3, #64	; 0x40
20001834:	2b00      	cmp	r3, #0
20001836:	d0f2      	beq.n	2000181e <mss_spi_isr+0xbe>
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
            }
        }

        this_spi->hw_reg->INT_CLEAR = RXDONE_IRQ_MASK;
20001838:	687b      	ldr	r3, [r7, #4]
2000183a:	681b      	ldr	r3, [r3, #0]
2000183c:	f04f 0202 	mov.w	r2, #2
20001840:	60da      	str	r2, [r3, #12]
    }

   /* Handle transmit. */
    if(0u != (*this_mis & TXDONE_IRQ_MASK))
20001842:	693b      	ldr	r3, [r7, #16]
20001844:	681b      	ldr	r3, [r3, #0]
20001846:	f003 0301 	and.w	r3, r3, #1
2000184a:	b2db      	uxtb	r3, r3
2000184c:	2b00      	cmp	r3, #0
2000184e:	d012      	beq.n	20001876 <mss_spi_isr+0x116>
    {
        if( MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode )
20001850:	687b      	ldr	r3, [r7, #4]
20001852:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
20001856:	2b02      	cmp	r3, #2
20001858:	d105      	bne.n	20001866 <mss_spi_isr+0x106>
        {
           /* Reload slave tx frame into Tx data register. */
            this_spi->hw_reg->TX_DATA = this_spi->slave_tx_frame;
2000185a:	687b      	ldr	r3, [r7, #4]
2000185c:	681b      	ldr	r3, [r3, #0]
2000185e:	687a      	ldr	r2, [r7, #4]
20001860:	6f92      	ldr	r2, [r2, #120]	; 0x78
20001862:	615a      	str	r2, [r3, #20]
20001864:	e002      	b.n	2000186c <mss_spi_isr+0x10c>
        }
        else /* Must be block mode so load FIFO to the max */
        {
            fill_slave_tx_fifo(this_spi);
20001866:	6878      	ldr	r0, [r7, #4]
20001868:	f7ff feb4 	bl	200015d4 <fill_slave_tx_fifo>
        }

        this_spi->hw_reg->INT_CLEAR = TXDONE_IRQ_MASK;
2000186c:	687b      	ldr	r3, [r7, #4]
2000186e:	681b      	ldr	r3, [r3, #0]
20001870:	f04f 0201 	mov.w	r2, #1
20001874:	60da      	str	r2, [r3, #12]
    }
    
    /* Handle command interrupt. */
    if(0u != (*this_mis & CMD_IRQ_MASK))
20001876:	693b      	ldr	r3, [r7, #16]
20001878:	681b      	ldr	r3, [r3, #0]
2000187a:	f003 0310 	and.w	r3, r3, #16
2000187e:	2b00      	cmp	r3, #0
20001880:	d023      	beq.n	200018ca <mss_spi_isr+0x16a>
    {
        read_slave_rx_fifo(this_spi);
20001882:	6878      	ldr	r0, [r7, #4]
20001884:	f7ff ff16 	bl	200016b4 <read_slave_rx_fifo>
        
        /*
         * Call the command handler if one exists.
         */
        if(0u != this_spi->cmd_handler)
20001888:	687b      	ldr	r3, [r7, #4]
2000188a:	6a1b      	ldr	r3, [r3, #32]
2000188c:	2b00      	cmp	r3, #0
2000188e:	d00b      	beq.n	200018a8 <mss_spi_isr+0x148>
        {
            (*this_spi->cmd_handler)(this_spi->slave_rx_buffer, this_spi->slave_rx_idx);
20001890:	687b      	ldr	r3, [r7, #4]
20001892:	6a1b      	ldr	r3, [r3, #32]
20001894:	687a      	ldr	r2, [r7, #4]
20001896:	6a91      	ldr	r1, [r2, #40]	; 0x28
20001898:	687a      	ldr	r2, [r7, #4]
2000189a:	6b12      	ldr	r2, [r2, #48]	; 0x30
2000189c:	4608      	mov	r0, r1
2000189e:	4611      	mov	r1, r2
200018a0:	4798      	blx	r3
            fill_slave_tx_fifo(this_spi);
200018a2:	6878      	ldr	r0, [r7, #4]
200018a4:	f7ff fe96 	bl	200015d4 <fill_slave_tx_fifo>
        }
        /* Set cmd_done to indicate it is now safe to 0 fill TX FIFO */
        this_spi->cmd_done = 1u;
200018a8:	687b      	ldr	r3, [r7, #4]
200018aa:	f04f 0201 	mov.w	r2, #1
200018ae:	625a      	str	r2, [r3, #36]	; 0x24
        /* Disable command interrupt until slave select becomes de-asserted to avoid retriggering. */
        this_spi->hw_reg->CONTROL2 &= ~(uint32_t)C2_ENABLE_CMD_IRQ_MASK;
200018b0:	687b      	ldr	r3, [r7, #4]
200018b2:	681b      	ldr	r3, [r3, #0]
200018b4:	687a      	ldr	r2, [r7, #4]
200018b6:	6812      	ldr	r2, [r2, #0]
200018b8:	6a92      	ldr	r2, [r2, #40]	; 0x28
200018ba:	f022 0210 	bic.w	r2, r2, #16
200018be:	629a      	str	r2, [r3, #40]	; 0x28
        this_spi->hw_reg->INT_CLEAR = CMD_IRQ_MASK;
200018c0:	687b      	ldr	r3, [r7, #4]
200018c2:	681b      	ldr	r3, [r3, #0]
200018c4:	f04f 0210 	mov.w	r2, #16
200018c8:	60da      	str	r2, [r3, #12]
    }

    if(0u != (*this_mis & RXOVFLOW_IRQ_MASK))
200018ca:	693b      	ldr	r3, [r7, #16]
200018cc:	681b      	ldr	r3, [r3, #0]
200018ce:	f003 0304 	and.w	r3, r3, #4
200018d2:	2b00      	cmp	r3, #0
200018d4:	d00f      	beq.n	200018f6 <mss_spi_isr+0x196>
    {
        /*
         * Receive overflow, not a lot we can do for this. Reset the receive
         *  FIFO, clear the interrupt and hope it doesn't happen again...
         */
        this_spi->hw_reg->COMMAND |= RX_FIFO_RESET_MASK;
200018d6:	687b      	ldr	r3, [r7, #4]
200018d8:	681b      	ldr	r3, [r3, #0]
200018da:	687a      	ldr	r2, [r7, #4]
200018dc:	6812      	ldr	r2, [r2, #0]
200018de:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
200018e0:	f042 0204 	orr.w	r2, r2, #4
200018e4:	62da      	str	r2, [r3, #44]	; 0x2c
        recover_from_rx_overflow(this_spi);
200018e6:	6878      	ldr	r0, [r7, #4]
200018e8:	f7ff fbf2 	bl	200010d0 <recover_from_rx_overflow>
        this_spi->hw_reg->INT_CLEAR = RXOVFLOW_IRQ_MASK;
200018ec:	687b      	ldr	r3, [r7, #4]
200018ee:	681b      	ldr	r3, [r3, #0]
200018f0:	f04f 0204 	mov.w	r2, #4
200018f4:	60da      	str	r2, [r3, #12]
     * slave TX FIFO data setup (if there is one).
     * In block mode this will probably not be very successful as we will
     * be out of synch with the master but the reset on SSEND will hopefully
     * take care of that for the next transfer.
     */
    if(0u != (*this_mis & TXURUN_IRQ_MASK))
200018f6:	693b      	ldr	r3, [r7, #16]
200018f8:	681b      	ldr	r3, [r3, #0]
200018fa:	f003 0308 	and.w	r3, r3, #8
200018fe:	2b00      	cmp	r3, #0
20001900:	d031      	beq.n	20001966 <mss_spi_isr+0x206>
    {
        this_spi->hw_reg->COMMAND |= TX_FIFO_RESET_MASK;
20001902:	687b      	ldr	r3, [r7, #4]
20001904:	681b      	ldr	r3, [r3, #0]
20001906:	687a      	ldr	r2, [r7, #4]
20001908:	6812      	ldr	r2, [r2, #0]
2000190a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
2000190c:	f042 0208 	orr.w	r2, r2, #8
20001910:	62da      	str	r2, [r3, #44]	; 0x2c
        if( MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode )
20001912:	687b      	ldr	r3, [r7, #4]
20001914:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
20001918:	2b02      	cmp	r3, #2
2000191a:	d113      	bne.n	20001944 <mss_spi_isr+0x1e4>
        {
            this_spi->hw_reg->CONTROL = (this_spi->hw_reg->CONTROL & ~TXRXDFCOUNT_MASK)
2000191c:	687b      	ldr	r3, [r7, #4]
2000191e:	681a      	ldr	r2, [r3, #0]
20001920:	687b      	ldr	r3, [r7, #4]
20001922:	681b      	ldr	r3, [r3, #0]
20001924:	6819      	ldr	r1, [r3, #0]
20001926:	f240 03ff 	movw	r3, #255	; 0xff
2000192a:	f6cf 7300 	movt	r3, #65280	; 0xff00
2000192e:	ea01 0303 	and.w	r3, r1, r3
20001932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
20001936:	6013      	str	r3, [r2, #0]
                                        | ((uint32_t)1u << TXRXDFCOUNT_SHIFT);
           /* Reload slave tx frame into Tx data register. */
            this_spi->hw_reg->TX_DATA = this_spi->slave_tx_frame;
20001938:	687b      	ldr	r3, [r7, #4]
2000193a:	681b      	ldr	r3, [r3, #0]
2000193c:	687a      	ldr	r2, [r7, #4]
2000193e:	6f92      	ldr	r2, [r2, #120]	; 0x78
20001940:	615a      	str	r2, [r3, #20]
20001942:	e00b      	b.n	2000195c <mss_spi_isr+0x1fc>
        }
        else if( MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode )
20001944:	687b      	ldr	r3, [r7, #4]
20001946:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
2000194a:	2b01      	cmp	r3, #1
2000194c:	d106      	bne.n	2000195c <mss_spi_isr+0x1fc>
        {
            /* Block mode so reload FIFO to the max */
            this_spi->slave_tx_idx = 0u;
2000194e:	687b      	ldr	r3, [r7, #4]
20001950:	f04f 0200 	mov.w	r2, #0
20001954:	611a      	str	r2, [r3, #16]
            fill_slave_tx_fifo(this_spi);
20001956:	6878      	ldr	r0, [r7, #4]
20001958:	f7ff fe3c 	bl	200015d4 <fill_slave_tx_fifo>
        else
        {
            /* Not frame or block mode? Can't do anything here... */
        }

        this_spi->hw_reg->INT_CLEAR = TXURUN_IRQ_MASK;
2000195c:	687b      	ldr	r3, [r7, #4]
2000195e:	681b      	ldr	r3, [r3, #0]
20001960:	f04f 0208 	mov.w	r2, #8
20001964:	60da      	str	r2, [r3, #12]
    /*
     * Handle slave select becoming de-asserted. Only enables if
     * we are operating in block mode, in frame mode we do everything
     * in the receive and transmit interrupt handlers.
     */
    if(0u != (*this_mis & SSEND_IRQ_MASK))
20001966:	693b      	ldr	r3, [r7, #16]
20001968:	681b      	ldr	r3, [r3, #0]
2000196a:	f003 0320 	and.w	r3, r3, #32
2000196e:	2b00      	cmp	r3, #0
20001970:	d049      	beq.n	20001a06 <mss_spi_isr+0x2a6>
    {
        uint32_t rx_size;
        
        read_slave_rx_fifo(this_spi);
20001972:	6878      	ldr	r0, [r7, #4]
20001974:	f7ff fe9e 	bl	200016b4 <read_slave_rx_fifo>
        rx_size = this_spi->slave_rx_idx;
20001978:	687b      	ldr	r3, [r7, #4]
2000197a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000197c:	617b      	str	r3, [r7, #20]
        /*
         * Re-enable command interrupt if required and clear all the response
         * buffer state in readiness for next response. This must be done
         * before reloading the TX FIFO.
         */
        if(0u != this_spi->cmd_handler)
2000197e:	687b      	ldr	r3, [r7, #4]
20001980:	6a1b      	ldr	r3, [r3, #32]
20001982:	2b00      	cmp	r3, #0
20001984:	d01c      	beq.n	200019c0 <mss_spi_isr+0x260>
        {
            this_spi->cmd_done = 0u;
20001986:	687b      	ldr	r3, [r7, #4]
20001988:	f04f 0200 	mov.w	r2, #0
2000198c:	625a      	str	r2, [r3, #36]	; 0x24
            this_spi->resp_tx_buffer = 0u;
2000198e:	687b      	ldr	r3, [r7, #4]
20001990:	f04f 0200 	mov.w	r2, #0
20001994:	615a      	str	r2, [r3, #20]
            this_spi->resp_buff_size = 0u;
20001996:	687b      	ldr	r3, [r7, #4]
20001998:	f04f 0200 	mov.w	r2, #0
2000199c:	619a      	str	r2, [r3, #24]
            this_spi->resp_buff_tx_idx = 0u;
2000199e:	687b      	ldr	r3, [r7, #4]
200019a0:	f04f 0200 	mov.w	r2, #0
200019a4:	61da      	str	r2, [r3, #28]
            this_spi->hw_reg->INT_CLEAR = CMD_IRQ_MASK;
200019a6:	687b      	ldr	r3, [r7, #4]
200019a8:	681b      	ldr	r3, [r3, #0]
200019aa:	f04f 0210 	mov.w	r2, #16
200019ae:	60da      	str	r2, [r3, #12]
            this_spi->hw_reg->CONTROL2 |= C2_ENABLE_CMD_IRQ_MASK;
200019b0:	687b      	ldr	r3, [r7, #4]
200019b2:	681b      	ldr	r3, [r3, #0]
200019b4:	687a      	ldr	r2, [r7, #4]
200019b6:	6812      	ldr	r2, [r2, #0]
200019b8:	6a92      	ldr	r2, [r2, #40]	; 0x28
200019ba:	f042 0210 	orr.w	r2, r2, #16
200019be:	629a      	str	r2, [r3, #40]	; 0x28
        /* 
         * Reset the transmit index to 0 to restart transmit at the start of the
         * transmit buffer in the next transaction. This also requires flushing
         * the Tx FIFO and refilling it with the start of Tx data buffer.
         */
        this_spi->slave_tx_idx = 0u;
200019c0:	687b      	ldr	r3, [r7, #4]
200019c2:	f04f 0200 	mov.w	r2, #0
200019c6:	611a      	str	r2, [r3, #16]
        this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
200019c8:	687b      	ldr	r3, [r7, #4]
200019ca:	681b      	ldr	r3, [r3, #0]
200019cc:	687a      	ldr	r2, [r7, #4]
200019ce:	6812      	ldr	r2, [r2, #0]
200019d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
200019d2:	f042 020c 	orr.w	r2, r2, #12
200019d6:	62da      	str	r2, [r3, #44]	; 0x2c
        fill_slave_tx_fifo(this_spi);
200019d8:	6878      	ldr	r0, [r7, #4]
200019da:	f7ff fdfb 	bl	200015d4 <fill_slave_tx_fifo>
        
        /* Prepare to receive next packet. */
        this_spi->slave_rx_idx = 0u;
200019de:	687b      	ldr	r3, [r7, #4]
200019e0:	f04f 0200 	mov.w	r2, #0
200019e4:	631a      	str	r2, [r3, #48]	; 0x30
        /*
         * Call the receive handler if one exists.
         */
        if(0u != this_spi->block_rx_handler)
200019e6:	687b      	ldr	r3, [r7, #4]
200019e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
200019ea:	2b00      	cmp	r3, #0
200019ec:	d006      	beq.n	200019fc <mss_spi_isr+0x29c>
        {
            (*this_spi->block_rx_handler)(this_spi->slave_rx_buffer, rx_size);
200019ee:	687b      	ldr	r3, [r7, #4]
200019f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
200019f2:	687a      	ldr	r2, [r7, #4]
200019f4:	6a92      	ldr	r2, [r2, #40]	; 0x28
200019f6:	4610      	mov	r0, r2
200019f8:	6979      	ldr	r1, [r7, #20]
200019fa:	4798      	blx	r3
        }
        
        this_spi->hw_reg->INT_CLEAR = SSEND_IRQ_MASK;
200019fc:	687b      	ldr	r3, [r7, #4]
200019fe:	681b      	ldr	r3, [r3, #0]
20001a00:	f04f 0220 	mov.w	r2, #32
20001a04:	60da      	str	r2, [r3, #12]
    }
}
20001a06:	f107 0718 	add.w	r7, r7, #24
20001a0a:	46bd      	mov	sp, r7
20001a0c:	bd80      	pop	{r7, pc}
20001a0e:	bf00      	nop

20001a10 <SPI0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void SPI0_IRQHandler(void)
#else
void SPI0_IRQHandler( void )
#endif
{
20001a10:	4668      	mov	r0, sp
20001a12:	f020 0107 	bic.w	r1, r0, #7
20001a16:	468d      	mov	sp, r1
20001a18:	b589      	push	{r0, r3, r7, lr}
20001a1a:	af00      	add	r7, sp, #0
    mss_spi_isr(&g_mss_spi0);
20001a1c:	f642 5048 	movw	r0, #11592	; 0x2d48
20001a20:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001a24:	f7ff fe9c 	bl	20001760 <mss_spi_isr>
    NVIC_ClearPendingIRQ(SPI0_IRQn);
20001a28:	f04f 000c 	mov.w	r0, #12
20001a2c:	f7ff fa98 	bl	20000f60 <NVIC_ClearPendingIRQ>
}
20001a30:	46bd      	mov	sp, r7
20001a32:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001a36:	4685      	mov	sp, r0
20001a38:	4770      	bx	lr
20001a3a:	bf00      	nop

20001a3c <SPI1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void SPI1_IRQHandler(void)
#else
void SPI1_IRQHandler(void)
#endif
{
20001a3c:	4668      	mov	r0, sp
20001a3e:	f020 0107 	bic.w	r1, r0, #7
20001a42:	468d      	mov	sp, r1
20001a44:	b589      	push	{r0, r3, r7, lr}
20001a46:	af00      	add	r7, sp, #0
    mss_spi_isr(&g_mss_spi1);
20001a48:	f642 40c4 	movw	r0, #11460	; 0x2cc4
20001a4c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001a50:	f7ff fe86 	bl	20001760 <mss_spi_isr>
    NVIC_ClearPendingIRQ(SPI1_IRQn);
20001a54:	f04f 000d 	mov.w	r0, #13
20001a58:	f7ff fa82 	bl	20000f60 <NVIC_ClearPendingIRQ>
}
20001a5c:	46bd      	mov	sp, r7
20001a5e:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001a62:	4685      	mov	sp, r0
20001a64:	4770      	bx	lr
20001a66:	bf00      	nop

20001a68 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20001a68:	b480      	push	{r7}
20001a6a:	b083      	sub	sp, #12
20001a6c:	af00      	add	r7, sp, #0
20001a6e:	4603      	mov	r3, r0
20001a70:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20001a72:	f24e 1300 	movw	r3, #57600	; 0xe100
20001a76:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001a7a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20001a7e:	ea4f 1252 	mov.w	r2, r2, lsr #5
20001a82:	88f9      	ldrh	r1, [r7, #6]
20001a84:	f001 011f 	and.w	r1, r1, #31
20001a88:	f04f 0001 	mov.w	r0, #1
20001a8c:	fa00 f101 	lsl.w	r1, r0, r1
20001a90:	f102 0260 	add.w	r2, r2, #96	; 0x60
20001a94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20001a98:	f107 070c 	add.w	r7, r7, #12
20001a9c:	46bd      	mov	sp, r7
20001a9e:	bc80      	pop	{r7}
20001aa0:	4770      	bx	lr
20001aa2:	bf00      	nop

20001aa4 <MSS_GPIO_init>:
/*-------------------------------------------------------------------------*//**
 * MSS_GPIO_init
 * See "mss_gpio.h" for details of how to use this function.
 */
void MSS_GPIO_init( void )
{
20001aa4:	b580      	push	{r7, lr}
20001aa6:	b082      	sub	sp, #8
20001aa8:	af00      	add	r7, sp, #0
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
20001aaa:	f242 0300 	movw	r3, #8192	; 0x2000
20001aae:	f2ce 0304 	movt	r3, #57348	; 0xe004
20001ab2:	f242 0200 	movw	r2, #8192	; 0x2000
20001ab6:	f2ce 0204 	movt	r2, #57348	; 0xe004
20001aba:	6b12      	ldr	r2, [r2, #48]	; 0x30
20001abc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
20001ac0:	631a      	str	r2, [r3, #48]	; 0x30
    /* Clear any previously pended MSS GPIO interrupt */
    for ( i = 0U; i < NB_OF_GPIO; ++i )
20001ac2:	f04f 0300 	mov.w	r3, #0
20001ac6:	607b      	str	r3, [r7, #4]
20001ac8:	e00e      	b.n	20001ae8 <MSS_GPIO_init+0x44>
    {
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[i] );
20001aca:	687a      	ldr	r2, [r7, #4]
20001acc:	f642 336c 	movw	r3, #11116	; 0x2b6c
20001ad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001ad4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
20001ad8:	b21b      	sxth	r3, r3
20001ada:	4618      	mov	r0, r3
20001adc:	f7ff ffc4 	bl	20001a68 <NVIC_ClearPendingIRQ>
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
    /* Clear any previously pended MSS GPIO interrupt */
    for ( i = 0U; i < NB_OF_GPIO; ++i )
20001ae0:	687b      	ldr	r3, [r7, #4]
20001ae2:	f103 0301 	add.w	r3, r3, #1
20001ae6:	607b      	str	r3, [r7, #4]
20001ae8:	687b      	ldr	r3, [r7, #4]
20001aea:	2b1f      	cmp	r3, #31
20001aec:	d9ed      	bls.n	20001aca <MSS_GPIO_init+0x26>
    {
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[i] );
    }
    /* Take MSS GPIO hardware out of reset. */
    SYSREG->SOFT_RST_CR &= ~SYSREG_GPIO_SOFTRESET_MASK;
20001aee:	f242 0300 	movw	r3, #8192	; 0x2000
20001af2:	f2ce 0304 	movt	r3, #57348	; 0xe004
20001af6:	f242 0200 	movw	r2, #8192	; 0x2000
20001afa:	f2ce 0204 	movt	r2, #57348	; 0xe004
20001afe:	6b12      	ldr	r2, [r2, #48]	; 0x30
20001b00:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
20001b04:	631a      	str	r2, [r3, #48]	; 0x30
}
20001b06:	f107 0708 	add.w	r7, r7, #8
20001b0a:	46bd      	mov	sp, r7
20001b0c:	bd80      	pop	{r7, pc}
20001b0e:	bf00      	nop

20001b10 <MSS_GPIO_config>:
void MSS_GPIO_config
(
    mss_gpio_id_t port_id,
    uint32_t config
)
{
20001b10:	b480      	push	{r7}
20001b12:	b085      	sub	sp, #20
20001b14:	af00      	add	r7, sp, #0
20001b16:	4603      	mov	r3, r0
20001b18:	6039      	str	r1, [r7, #0]
20001b1a:	71fb      	strb	r3, [r7, #7]
    uint32_t gpio_idx = (uint32_t)port_id;
20001b1c:	79fb      	ldrb	r3, [r7, #7]
20001b1e:	60fb      	str	r3, [r7, #12]
    
    ASSERT( gpio_idx < NB_OF_GPIO );
20001b20:	68fb      	ldr	r3, [r7, #12]
20001b22:	2b1f      	cmp	r3, #31
20001b24:	d900      	bls.n	20001b28 <MSS_GPIO_config+0x18>
20001b26:	be00      	bkpt	0x0000

    if ( gpio_idx < NB_OF_GPIO )
20001b28:	68fb      	ldr	r3, [r7, #12]
20001b2a:	2b1f      	cmp	r3, #31
20001b2c:	d808      	bhi.n	20001b40 <MSS_GPIO_config+0x30>
    {
        *(g_config_reg_lut[gpio_idx]) = config;
20001b2e:	68fa      	ldr	r2, [r7, #12]
20001b30:	f642 23ec 	movw	r3, #10988	; 0x2aec
20001b34:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20001b3c:	683a      	ldr	r2, [r7, #0]
20001b3e:	601a      	str	r2, [r3, #0]
    }
}
20001b40:	f107 0714 	add.w	r7, r7, #20
20001b44:	46bd      	mov	sp, r7
20001b46:	bc80      	pop	{r7}
20001b48:	4770      	bx	lr
20001b4a:	bf00      	nop

20001b4c <MSS_GPIO_set_output>:
void MSS_GPIO_set_output
(
    mss_gpio_id_t       port_id,
    uint8_t             value
)
{
20001b4c:	b480      	push	{r7}
20001b4e:	b085      	sub	sp, #20
20001b50:	af00      	add	r7, sp, #0
20001b52:	4602      	mov	r2, r0
20001b54:	460b      	mov	r3, r1
20001b56:	71fa      	strb	r2, [r7, #7]
20001b58:	71bb      	strb	r3, [r7, #6]
    uint32_t gpio_idx = (uint32_t)port_id;
20001b5a:	79fb      	ldrb	r3, [r7, #7]
20001b5c:	60fb      	str	r3, [r7, #12]
    
    ASSERT( gpio_idx < NB_OF_GPIO );
20001b5e:	68fb      	ldr	r3, [r7, #12]
20001b60:	2b1f      	cmp	r3, #31
20001b62:	d900      	bls.n	20001b66 <MSS_GPIO_set_output+0x1a>
20001b64:	be00      	bkpt	0x0000
    
    if ( gpio_idx < NB_OF_GPIO )
20001b66:	68fb      	ldr	r3, [r7, #12]
20001b68:	2b1f      	cmp	r3, #31
20001b6a:	d809      	bhi.n	20001b80 <MSS_GPIO_set_output+0x34>
    {
        GPIO_BITBAND->GPIO_OUT[gpio_idx] = (uint32_t)value;
20001b6c:	f240 0300 	movw	r3, #0
20001b70:	f2c4 2326 	movt	r3, #16934	; 0x4226
20001b74:	68fa      	ldr	r2, [r7, #12]
20001b76:	79b9      	ldrb	r1, [r7, #6]
20001b78:	f502 6288 	add.w	r2, r2, #1088	; 0x440
20001b7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
}
20001b80:	f107 0714 	add.w	r7, r7, #20
20001b84:	46bd      	mov	sp, r7
20001b86:	bc80      	pop	{r7}
20001b88:	4770      	bx	lr
20001b8a:	bf00      	nop

20001b8c <ACE_init>:

/*-------------------------------------------------------------------------*//**
  See "mss_ace.h" for details of how to use this function.
 */
void ACE_init( void )
{
20001b8c:	b580      	push	{r7, lr}
20001b8e:	af00      	add	r7, sp, #0
    /* Initialize driver's internal data. */
    ace_init_flags();
20001b90:	f000 f966 	bl	20001e60 <ace_init_flags>
    
    /* Initialize the data structures used by conversion functions. */
    ace_init_convert();
20001b94:	f000 f86c 	bl	20001c70 <ace_init_convert>
}
20001b98:	bd80      	pop	{r7, pc}
20001b9a:	bf00      	nop

20001b9c <ACE_get_channel_handle>:
ace_channel_handle_t
ACE_get_channel_handle
(
    const uint8_t * p_sz_channel_name
)
{
20001b9c:	b580      	push	{r7, lr}
20001b9e:	b084      	sub	sp, #16
20001ba0:	af00      	add	r7, sp, #0
20001ba2:	6078      	str	r0, [r7, #4]
    uint16_t channel_idx;
    ace_channel_handle_t channel_handle = INVALID_CHANNEL_HANDLE;
20001ba4:	f04f 0304 	mov.w	r3, #4
20001ba8:	72fb      	strb	r3, [r7, #11]
    
    for ( channel_idx = 0u;  channel_idx < (uint16_t)ACE_NB_OF_INPUT_CHANNELS; ++channel_idx )
20001baa:	f04f 0300 	mov.w	r3, #0
20001bae:	813b      	strh	r3, [r7, #8]
20001bb0:	e025      	b.n	20001bfe <ACE_get_channel_handle+0x62>
    {
        if ( g_ace_channel_desc_table[channel_idx].p_sz_channel_name != 0 )
20001bb2:	893a      	ldrh	r2, [r7, #8]
20001bb4:	f642 4368 	movw	r3, #11368	; 0x2c68
20001bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001bbc:	ea4f 1202 	mov.w	r2, r2, lsl #4
20001bc0:	4413      	add	r3, r2
20001bc2:	681b      	ldr	r3, [r3, #0]
20001bc4:	2b00      	cmp	r3, #0
20001bc6:	d016      	beq.n	20001bf6 <ACE_get_channel_handle+0x5a>
        {
            int32_t diff;
            diff = strncmp( (const char*)p_sz_channel_name, (const char*)g_ace_channel_desc_table[channel_idx].p_sz_channel_name, (size_t)MAX_CHANNEL_NAME_LENGTH );
20001bc8:	893a      	ldrh	r2, [r7, #8]
20001bca:	f642 4368 	movw	r3, #11368	; 0x2c68
20001bce:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001bd2:	ea4f 1202 	mov.w	r2, r2, lsl #4
20001bd6:	4413      	add	r3, r2
20001bd8:	681b      	ldr	r3, [r3, #0]
20001bda:	6878      	ldr	r0, [r7, #4]
20001bdc:	4619      	mov	r1, r3
20001bde:	f04f 0210 	mov.w	r2, #16
20001be2:	f000 fee3 	bl	200029ac <strncmp>
20001be6:	4603      	mov	r3, r0
20001be8:	60fb      	str	r3, [r7, #12]
            if ( 0 == diff )
20001bea:	68fb      	ldr	r3, [r7, #12]
20001bec:	2b00      	cmp	r3, #0
20001bee:	d102      	bne.n	20001bf6 <ACE_get_channel_handle+0x5a>
            {
                /* channel name found. */
                channel_handle = (ace_channel_handle_t)channel_idx;
20001bf0:	893b      	ldrh	r3, [r7, #8]
20001bf2:	72fb      	strb	r3, [r7, #11]
                break;
20001bf4:	e006      	b.n	20001c04 <ACE_get_channel_handle+0x68>
)
{
    uint16_t channel_idx;
    ace_channel_handle_t channel_handle = INVALID_CHANNEL_HANDLE;
    
    for ( channel_idx = 0u;  channel_idx < (uint16_t)ACE_NB_OF_INPUT_CHANNELS; ++channel_idx )
20001bf6:	893b      	ldrh	r3, [r7, #8]
20001bf8:	f103 0301 	add.w	r3, r3, #1
20001bfc:	813b      	strh	r3, [r7, #8]
20001bfe:	893b      	ldrh	r3, [r7, #8]
20001c00:	2b03      	cmp	r3, #3
20001c02:	d9d6      	bls.n	20001bb2 <ACE_get_channel_handle+0x16>
                channel_handle = (ace_channel_handle_t)channel_idx;
                break;
            }
        }
    }
    return channel_handle;
20001c04:	7afb      	ldrb	r3, [r7, #11]
}
20001c06:	4618      	mov	r0, r3
20001c08:	f107 0710 	add.w	r7, r7, #16
20001c0c:	46bd      	mov	sp, r7
20001c0e:	bd80      	pop	{r7, pc}

20001c10 <ACE_get_ppe_sample>:
uint16_t
ACE_get_ppe_sample
(
    ace_channel_handle_t channel_handle
)
{
20001c10:	b480      	push	{r7}
20001c12:	b085      	sub	sp, #20
20001c14:	af00      	add	r7, sp, #0
20001c16:	4603      	mov	r3, r0
20001c18:	71fb      	strb	r3, [r7, #7]
    uint16_t sample;
    uint16_t ppe_offset;
    
    ppe_offset = g_ace_channel_desc_table[channel_handle].signal_ppe_offset;
20001c1a:	79fa      	ldrb	r2, [r7, #7]
20001c1c:	f642 4368 	movw	r3, #11368	; 0x2c68
20001c20:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001c24:	ea4f 1202 	mov.w	r2, r2, lsl #4
20001c28:	4413      	add	r3, r2
20001c2a:	88db      	ldrh	r3, [r3, #6]
20001c2c:	81fb      	strh	r3, [r7, #14]
    sample = (uint16_t)(ACE->PPE_RAM_DATA[ppe_offset] >> 16u);
20001c2e:	f240 0300 	movw	r3, #0
20001c32:	f2c4 0302 	movt	r3, #16386	; 0x4002
20001c36:	89fa      	ldrh	r2, [r7, #14]
20001c38:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
20001c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20001c40:	ea4f 4313 	mov.w	r3, r3, lsr #16
20001c44:	81bb      	strh	r3, [r7, #12]
    
    /* Check that the PPE processing did not result into a negative value.*/
    if((sample & 0x8000u) > 0u)
20001c46:	89bb      	ldrh	r3, [r7, #12]
20001c48:	b21b      	sxth	r3, r3
20001c4a:	2b00      	cmp	r3, #0
20001c4c:	da02      	bge.n	20001c54 <ACE_get_ppe_sample+0x44>
    {
        /* Normalize negative value to zero. */
        sample = 0u;
20001c4e:	f04f 0300 	mov.w	r3, #0
20001c52:	81bb      	strh	r3, [r7, #12]
    }
    
    return sample;
20001c54:	89bb      	ldrh	r3, [r7, #12]
}
20001c56:	4618      	mov	r0, r3
20001c58:	f107 0714 	add.w	r7, r7, #20
20001c5c:	46bd      	mov	sp, r7
20001c5e:	bc80      	pop	{r7}
20001c60:	4770      	bx	lr
20001c62:	bf00      	nop

20001c64 <SystemInit>:

/***************************************************************************//**
 * See system_a2fxxxm3f.h for details.
 */
void SystemInit(void)
{
20001c64:	b480      	push	{r7}
20001c66:	af00      	add	r7, sp, #0
    /*
     * Do not make use of global variables or make any asumptions regarding
     * memory content if modifying this function. The memory content has not been
     * initialised by the time this function is called by the start-up code.
     */
}
20001c68:	46bd      	mov	sp, r7
20001c6a:	bc80      	pop	{r7}
20001c6c:	4770      	bx	lr
20001c6e:	bf00      	nop

20001c70 <ace_init_convert>:

/*-------------------------------------------------------------------------*//**
 *
 */
void ace_init_convert(void)
{
20001c70:	b480      	push	{r7}
20001c72:	b087      	sub	sp, #28
20001c74:	af00      	add	r7, sp, #0
    uint8_t abps_idx;
    int32_t channel;
    uint32_t saved_pc2_ctrl;
    
    /* Pause the SSE PC2 while accesses to ACB from APB3 are taking place. */
    saved_pc2_ctrl = ACE->PC2_CTRL;
20001c76:	f240 0300 	movw	r3, #0
20001c7a:	f2c4 0302 	movt	r3, #16386	; 0x4002
20001c7e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
20001c82:	60fb      	str	r3, [r7, #12]
    ACE->PC2_CTRL = 0u;
20001c84:	f240 0300 	movw	r3, #0
20001c88:	f2c4 0302 	movt	r3, #16386	; 0x4002
20001c8c:	f04f 0200 	mov.w	r2, #0
20001c90:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    
    /* Populate the g_gdec_lut look-up table. */
    for(abps_idx = 0u; abps_idx < MAX_NB_OF_APBS; ++abps_idx)
20001c94:	f04f 0300 	mov.w	r3, #0
20001c98:	71fb      	strb	r3, [r7, #7]
20001c9a:	e039      	b.n	20001d10 <ace_init_convert+0xa0>
    {
        uint8_t quad_id;
        uint8_t acb_config_byte;
        uint8_t channel_is_abps2;
        
        quad_id = abps_idx / 2u;
20001c9c:	79fb      	ldrb	r3, [r7, #7]
20001c9e:	ea4f 0353 	mov.w	r3, r3, lsr #1
20001ca2:	747b      	strb	r3, [r7, #17]
        acb_config_byte = ACE->ACB_DATA[quad_id].b8;
20001ca4:	f240 0200 	movw	r2, #0
20001ca8:	f2c4 0202 	movt	r2, #16386	; 0x4002
20001cac:	7c79      	ldrb	r1, [r7, #17]
20001cae:	460b      	mov	r3, r1
20001cb0:	ea4f 0343 	mov.w	r3, r3, lsl #1
20001cb4:	440b      	add	r3, r1
20001cb6:	ea4f 1303 	mov.w	r3, r3, lsl #4
20001cba:	4413      	add	r3, r2
20001cbc:	f503 7308 	add.w	r3, r3, #544	; 0x220
20001cc0:	791b      	ldrb	r3, [r3, #4]
20001cc2:	74bb      	strb	r3, [r7, #18]
        channel_is_abps2 = abps_idx & 0x01u;
20001cc4:	79fb      	ldrb	r3, [r7, #7]
20001cc6:	f003 0301 	and.w	r3, r3, #1
20001cca:	74fb      	strb	r3, [r7, #19]
        if(channel_is_abps2)
20001ccc:	7cfb      	ldrb	r3, [r7, #19]
20001cce:	2b00      	cmp	r3, #0
20001cd0:	d00d      	beq.n	20001cee <ace_init_convert+0x7e>
        {
            /* ABPS2 */
            g_gdec_lut[abps_idx] = (acb_config_byte >> 5u) & 0x03u;
20001cd2:	79f9      	ldrb	r1, [r7, #7]
20001cd4:	7cbb      	ldrb	r3, [r7, #18]
20001cd6:	ea4f 1353 	mov.w	r3, r3, lsr #5
20001cda:	b2db      	uxtb	r3, r3
20001cdc:	461a      	mov	r2, r3
20001cde:	f002 0203 	and.w	r2, r2, #3
20001ce2:	f642 43ac 	movw	r3, #11436	; 0x2cac
20001ce6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001cea:	545a      	strb	r2, [r3, r1]
20001cec:	e00c      	b.n	20001d08 <ace_init_convert+0x98>
        }
        else
        {
            /* ABPS1 */
            g_gdec_lut[abps_idx] = (acb_config_byte >> 1u) & 0x03u;
20001cee:	79f9      	ldrb	r1, [r7, #7]
20001cf0:	7cbb      	ldrb	r3, [r7, #18]
20001cf2:	ea4f 0353 	mov.w	r3, r3, lsr #1
20001cf6:	b2db      	uxtb	r3, r3
20001cf8:	461a      	mov	r2, r3
20001cfa:	f002 0203 	and.w	r2, r2, #3
20001cfe:	f642 43ac 	movw	r3, #11436	; 0x2cac
20001d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001d06:	545a      	strb	r2, [r3, r1]
    /* Pause the SSE PC2 while accesses to ACB from APB3 are taking place. */
    saved_pc2_ctrl = ACE->PC2_CTRL;
    ACE->PC2_CTRL = 0u;
    
    /* Populate the g_gdec_lut look-up table. */
    for(abps_idx = 0u; abps_idx < MAX_NB_OF_APBS; ++abps_idx)
20001d08:	79fb      	ldrb	r3, [r7, #7]
20001d0a:	f103 0301 	add.w	r3, r3, #1
20001d0e:	71fb      	strb	r3, [r7, #7]
20001d10:	79fb      	ldrb	r3, [r7, #7]
20001d12:	2b09      	cmp	r3, #9
20001d14:	d9c2      	bls.n	20001c9c <ace_init_convert+0x2c>
            g_gdec_lut[abps_idx] = (acb_config_byte >> 1u) & 0x03u;
        }
    }
    
    /* Populate the channel_type_lut_h look-up table. */
    for(channel = 0; channel < ACE_NB_OF_INPUT_CHANNELS; ++channel)
20001d16:	f04f 0300 	mov.w	r3, #0
20001d1a:	60bb      	str	r3, [r7, #8]
20001d1c:	e073      	b.n	20001e06 <ace_init_convert+0x196>
        uint8_t quad_id;
        uint8_t acb_config_byte;
        adc_channel_id_t channel_id;
        channel_type_t channel_type;
    
        channel_id = g_ace_channel_desc_table[channel].signal_id;
20001d1e:	68ba      	ldr	r2, [r7, #8]
20001d20:	f642 4368 	movw	r3, #11368	; 0x2c68
20001d24:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001d28:	ea4f 1202 	mov.w	r2, r2, lsl #4
20001d2c:	4413      	add	r3, r2
20001d2e:	791b      	ldrb	r3, [r3, #4]
20001d30:	75bb      	strb	r3, [r7, #22]
        quad_id = channel_quad_lut[channel_id];
20001d32:	7dba      	ldrb	r2, [r7, #22]
20001d34:	f642 4314 	movw	r3, #11284	; 0x2c14
20001d38:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001d3c:	5c9b      	ldrb	r3, [r3, r2]
20001d3e:	753b      	strb	r3, [r7, #20]
        
        switch (channel_type_lut[channel_id])
20001d40:	7dba      	ldrb	r2, [r7, #22]
20001d42:	f642 33e4 	movw	r3, #11236	; 0x2be4
20001d46:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001d4a:	5c9b      	ldrb	r3, [r3, r2]
20001d4c:	2b01      	cmp	r3, #1
20001d4e:	d007      	beq.n	20001d60 <ace_init_convert+0xf0>
20001d50:	2b02      	cmp	r3, #2
20001d52:	d027      	beq.n	20001da4 <ace_init_convert+0x134>
20001d54:	2b00      	cmp	r3, #0
20001d56:	d147      	bne.n	20001de8 <ace_init_convert+0x178>
        {
            case VOLTAGE_CHANNEL:
                channel_type = VOLTAGE;
20001d58:	f04f 0300 	mov.w	r3, #0
20001d5c:	75fb      	strb	r3, [r7, #23]
                break;
20001d5e:	e047      	b.n	20001df0 <ace_init_convert+0x180>
                
            case CURRENT_CHANNEL:
                ASSERT( quad_id != INVALID_QUAD_ID );
20001d60:	7d3b      	ldrb	r3, [r7, #20]
20001d62:	2bff      	cmp	r3, #255	; 0xff
20001d64:	d100      	bne.n	20001d68 <ace_init_convert+0xf8>
20001d66:	be00      	bkpt	0x0000
                acb_config_byte = ACE->ACB_DATA[quad_id].b9;
20001d68:	f240 0200 	movw	r2, #0
20001d6c:	f2c4 0202 	movt	r2, #16386	; 0x4002
20001d70:	7d39      	ldrb	r1, [r7, #20]
20001d72:	460b      	mov	r3, r1
20001d74:	ea4f 0343 	mov.w	r3, r3, lsl #1
20001d78:	440b      	add	r3, r1
20001d7a:	ea4f 1303 	mov.w	r3, r3, lsl #4
20001d7e:	4413      	add	r3, r2
20001d80:	f503 7308 	add.w	r3, r3, #544	; 0x220
20001d84:	7a1b      	ldrb	r3, [r3, #8]
20001d86:	757b      	strb	r3, [r7, #21]
                if ( acb_config_byte & 0x01u )
20001d88:	7d7b      	ldrb	r3, [r7, #21]
20001d8a:	f003 0301 	and.w	r3, r3, #1
20001d8e:	b2db      	uxtb	r3, r3
20001d90:	2b00      	cmp	r3, #0
20001d92:	d003      	beq.n	20001d9c <ace_init_convert+0x12c>
                {
                    channel_type = VOLTAGE;
20001d94:	f04f 0300 	mov.w	r3, #0
20001d98:	75fb      	strb	r3, [r7, #23]
                }
                else
                {
                    channel_type = CURRENT;
                }
                break;
20001d9a:	e029      	b.n	20001df0 <ace_init_convert+0x180>
                {
                    channel_type = VOLTAGE;
                }
                else
                {
                    channel_type = CURRENT;
20001d9c:	f04f 0301 	mov.w	r3, #1
20001da0:	75fb      	strb	r3, [r7, #23]
                }
                break;
20001da2:	e025      	b.n	20001df0 <ace_init_convert+0x180>
            
            case TEMPERATURE_CHANNEL:
                ASSERT( quad_id != INVALID_QUAD_ID );
20001da4:	7d3b      	ldrb	r3, [r7, #20]
20001da6:	2bff      	cmp	r3, #255	; 0xff
20001da8:	d100      	bne.n	20001dac <ace_init_convert+0x13c>
20001daa:	be00      	bkpt	0x0000
                acb_config_byte = ACE->ACB_DATA[quad_id].b10;
20001dac:	f240 0200 	movw	r2, #0
20001db0:	f2c4 0202 	movt	r2, #16386	; 0x4002
20001db4:	7d39      	ldrb	r1, [r7, #20]
20001db6:	460b      	mov	r3, r1
20001db8:	ea4f 0343 	mov.w	r3, r3, lsl #1
20001dbc:	440b      	add	r3, r1
20001dbe:	ea4f 1303 	mov.w	r3, r3, lsl #4
20001dc2:	4413      	add	r3, r2
20001dc4:	f503 730a 	add.w	r3, r3, #552	; 0x228
20001dc8:	791b      	ldrb	r3, [r3, #4]
20001dca:	757b      	strb	r3, [r7, #21]
                if ( acb_config_byte & 0x01u )
20001dcc:	7d7b      	ldrb	r3, [r7, #21]
20001dce:	f003 0301 	and.w	r3, r3, #1
20001dd2:	b2db      	uxtb	r3, r3
20001dd4:	2b00      	cmp	r3, #0
20001dd6:	d003      	beq.n	20001de0 <ace_init_convert+0x170>
                {
                    channel_type = VOLTAGE;
20001dd8:	f04f 0300 	mov.w	r3, #0
20001ddc:	75fb      	strb	r3, [r7, #23]
                }
                else
                {
                    channel_type = TEMPERATURE;
                }
                break;
20001dde:	e007      	b.n	20001df0 <ace_init_convert+0x180>
                {
                    channel_type = VOLTAGE;
                }
                else
                {
                    channel_type = TEMPERATURE;
20001de0:	f04f 0302 	mov.w	r3, #2
20001de4:	75fb      	strb	r3, [r7, #23]
                }
                break;
20001de6:	e003      	b.n	20001df0 <ace_init_convert+0x180>
                
            default:
                ASSERT(0);
20001de8:	be00      	bkpt	0x0000
                channel_type = VOLTAGE;
20001dea:	f04f 0300 	mov.w	r3, #0
20001dee:	75fb      	strb	r3, [r7, #23]
                break;
        }
        
        channel_type_lut_h[channel] = channel_type;
20001df0:	68ba      	ldr	r2, [r7, #8]
20001df2:	f642 43b8 	movw	r3, #11448	; 0x2cb8
20001df6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001dfa:	7df9      	ldrb	r1, [r7, #23]
20001dfc:	5499      	strb	r1, [r3, r2]
            g_gdec_lut[abps_idx] = (acb_config_byte >> 1u) & 0x03u;
        }
    }
    
    /* Populate the channel_type_lut_h look-up table. */
    for(channel = 0; channel < ACE_NB_OF_INPUT_CHANNELS; ++channel)
20001dfe:	68bb      	ldr	r3, [r7, #8]
20001e00:	f103 0301 	add.w	r3, r3, #1
20001e04:	60bb      	str	r3, [r7, #8]
20001e06:	68bb      	ldr	r3, [r7, #8]
20001e08:	2b03      	cmp	r3, #3
20001e0a:	dd88      	ble.n	20001d1e <ace_init_convert+0xae>
        
        channel_type_lut_h[channel] = channel_type;
    }
    
    /* Restore SSE PC2 operations. */
    ACE->PC2_CTRL = saved_pc2_ctrl;
20001e0c:	f240 0300 	movw	r3, #0
20001e10:	f2c4 0302 	movt	r3, #16386	; 0x4002
20001e14:	68fa      	ldr	r2, [r7, #12]
20001e16:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
20001e1a:	f107 071c 	add.w	r7, r7, #28
20001e1e:	46bd      	mov	sp, r7
20001e20:	bc80      	pop	{r7}
20001e22:	4770      	bx	lr

20001e24 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20001e24:	b480      	push	{r7}
20001e26:	b083      	sub	sp, #12
20001e28:	af00      	add	r7, sp, #0
20001e2a:	4603      	mov	r3, r0
20001e2c:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20001e2e:	f24e 1300 	movw	r3, #57600	; 0xe100
20001e32:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001e36:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20001e3a:	ea4f 1252 	mov.w	r2, r2, lsr #5
20001e3e:	88f9      	ldrh	r1, [r7, #6]
20001e40:	f001 011f 	and.w	r1, r1, #31
20001e44:	f04f 0001 	mov.w	r0, #1
20001e48:	fa00 f101 	lsl.w	r1, r0, r1
20001e4c:	f102 0260 	add.w	r2, r2, #96	; 0x60
20001e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20001e54:	f107 070c 	add.w	r7, r7, #12
20001e58:	46bd      	mov	sp, r7
20001e5a:	bc80      	pop	{r7}
20001e5c:	4770      	bx	lr
20001e5e:	bf00      	nop

20001e60 <ace_init_flags>:
/*-------------------------------------------------------------------------*//**
  Intialise the ACE driver's internal data structures used by flag control
  functions.
 */
void ace_init_flags( void )
{
20001e60:	b480      	push	{r7}
20001e62:	af00      	add	r7, sp, #0
        }
        
        g_ppe_global_flags_isr = 0u;
    }
#endif
}
20001e64:	46bd      	mov	sp, r7
20001e66:	bc80      	pop	{r7}
20001e68:	4770      	bx	lr
20001e6a:	bf00      	nop

20001e6c <process_flag_irq>:
/*-------------------------------------------------------------------------*//**
 * Actual PPE flag interrupt service routines:
 */

static void process_flag_irq( uint8_t threshold_flag_id )
{
20001e6c:	b480      	push	{r7}
20001e6e:	b083      	sub	sp, #12
20001e70:	af00      	add	r7, sp, #0
20001e72:	4603      	mov	r3, r0
20001e74:	71fb      	strb	r3, [r7, #7]
            dummy_read = *(flags_irq_clear_regs_lut[flag_group]);
            ++dummy_read;
        }
    }
#endif
}
20001e76:	f107 070c 	add.w	r7, r7, #12
20001e7a:	46bd      	mov	sp, r7
20001e7c:	bc80      	pop	{r7}
20001e7e:	4770      	bx	lr

20001e80 <ACE_PPE_Flag0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag0_IRQHandler( void )
#else
void ACE_PPE_Flag0_IRQHandler( void )
#endif
{
20001e80:	4668      	mov	r0, sp
20001e82:	f020 0107 	bic.w	r1, r0, #7
20001e86:	468d      	mov	sp, r1
20001e88:	b589      	push	{r0, r3, r7, lr}
20001e8a:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG0 );
20001e8c:	f04f 0000 	mov.w	r0, #0
20001e90:	f7ff ffec 	bl	20001e6c <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag0_IRQn );
20001e94:	f04f 0076 	mov.w	r0, #118	; 0x76
20001e98:	f7ff ffc4 	bl	20001e24 <NVIC_ClearPendingIRQ>
}
20001e9c:	46bd      	mov	sp, r7
20001e9e:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001ea2:	4685      	mov	sp, r0
20001ea4:	4770      	bx	lr
20001ea6:	bf00      	nop

20001ea8 <ACE_PPE_Flag1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag1_IRQHandler( void )
#else
void ACE_PPE_Flag1_IRQHandler( void )
#endif
{
20001ea8:	4668      	mov	r0, sp
20001eaa:	f020 0107 	bic.w	r1, r0, #7
20001eae:	468d      	mov	sp, r1
20001eb0:	b589      	push	{r0, r3, r7, lr}
20001eb2:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG1 );
20001eb4:	f04f 0001 	mov.w	r0, #1
20001eb8:	f7ff ffd8 	bl	20001e6c <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag1_IRQn );
20001ebc:	f04f 0077 	mov.w	r0, #119	; 0x77
20001ec0:	f7ff ffb0 	bl	20001e24 <NVIC_ClearPendingIRQ>
}
20001ec4:	46bd      	mov	sp, r7
20001ec6:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001eca:	4685      	mov	sp, r0
20001ecc:	4770      	bx	lr
20001ece:	bf00      	nop

20001ed0 <ACE_PPE_Flag2_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag2_IRQHandler( void )
#else
void ACE_PPE_Flag2_IRQHandler( void )
#endif
{
20001ed0:	4668      	mov	r0, sp
20001ed2:	f020 0107 	bic.w	r1, r0, #7
20001ed6:	468d      	mov	sp, r1
20001ed8:	b589      	push	{r0, r3, r7, lr}
20001eda:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG2 );
20001edc:	f04f 0002 	mov.w	r0, #2
20001ee0:	f7ff ffc4 	bl	20001e6c <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag2_IRQn );
20001ee4:	f04f 0078 	mov.w	r0, #120	; 0x78
20001ee8:	f7ff ff9c 	bl	20001e24 <NVIC_ClearPendingIRQ>
}
20001eec:	46bd      	mov	sp, r7
20001eee:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001ef2:	4685      	mov	sp, r0
20001ef4:	4770      	bx	lr
20001ef6:	bf00      	nop

20001ef8 <ACE_PPE_Flag3_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag3_IRQHandler( void )
#else
void ACE_PPE_Flag3_IRQHandler( void )
#endif
{
20001ef8:	4668      	mov	r0, sp
20001efa:	f020 0107 	bic.w	r1, r0, #7
20001efe:	468d      	mov	sp, r1
20001f00:	b589      	push	{r0, r3, r7, lr}
20001f02:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG3 );
20001f04:	f04f 0003 	mov.w	r0, #3
20001f08:	f7ff ffb0 	bl	20001e6c <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag3_IRQn );
20001f0c:	f04f 0079 	mov.w	r0, #121	; 0x79
20001f10:	f7ff ff88 	bl	20001e24 <NVIC_ClearPendingIRQ>
}
20001f14:	46bd      	mov	sp, r7
20001f16:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001f1a:	4685      	mov	sp, r0
20001f1c:	4770      	bx	lr
20001f1e:	bf00      	nop

20001f20 <ACE_PPE_Flag4_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag4_IRQHandler( void )
#else
void ACE_PPE_Flag4_IRQHandler( void )
#endif
{
20001f20:	4668      	mov	r0, sp
20001f22:	f020 0107 	bic.w	r1, r0, #7
20001f26:	468d      	mov	sp, r1
20001f28:	b589      	push	{r0, r3, r7, lr}
20001f2a:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG4 );
20001f2c:	f04f 0004 	mov.w	r0, #4
20001f30:	f7ff ff9c 	bl	20001e6c <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag4_IRQn );
20001f34:	f04f 007a 	mov.w	r0, #122	; 0x7a
20001f38:	f7ff ff74 	bl	20001e24 <NVIC_ClearPendingIRQ>
}
20001f3c:	46bd      	mov	sp, r7
20001f3e:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001f42:	4685      	mov	sp, r0
20001f44:	4770      	bx	lr
20001f46:	bf00      	nop

20001f48 <ACE_PPE_Flag5_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag5_IRQHandler( void )
#else
void ACE_PPE_Flag5_IRQHandler( void )
#endif
{
20001f48:	4668      	mov	r0, sp
20001f4a:	f020 0107 	bic.w	r1, r0, #7
20001f4e:	468d      	mov	sp, r1
20001f50:	b589      	push	{r0, r3, r7, lr}
20001f52:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG5 );
20001f54:	f04f 0005 	mov.w	r0, #5
20001f58:	f7ff ff88 	bl	20001e6c <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag5_IRQn );
20001f5c:	f04f 007b 	mov.w	r0, #123	; 0x7b
20001f60:	f7ff ff60 	bl	20001e24 <NVIC_ClearPendingIRQ>
}
20001f64:	46bd      	mov	sp, r7
20001f66:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001f6a:	4685      	mov	sp, r0
20001f6c:	4770      	bx	lr
20001f6e:	bf00      	nop

20001f70 <ACE_PPE_Flag6_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag6_IRQHandler( void )
#else
void ACE_PPE_Flag6_IRQHandler( void )
#endif
{
20001f70:	4668      	mov	r0, sp
20001f72:	f020 0107 	bic.w	r1, r0, #7
20001f76:	468d      	mov	sp, r1
20001f78:	b589      	push	{r0, r3, r7, lr}
20001f7a:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG6 );
20001f7c:	f04f 0006 	mov.w	r0, #6
20001f80:	f7ff ff74 	bl	20001e6c <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag6_IRQn );
20001f84:	f04f 007c 	mov.w	r0, #124	; 0x7c
20001f88:	f7ff ff4c 	bl	20001e24 <NVIC_ClearPendingIRQ>
}
20001f8c:	46bd      	mov	sp, r7
20001f8e:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001f92:	4685      	mov	sp, r0
20001f94:	4770      	bx	lr
20001f96:	bf00      	nop

20001f98 <ACE_PPE_Flag7_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag7_IRQHandler( void )
#else
void ACE_PPE_Flag7_IRQHandler( void )
#endif
{
20001f98:	4668      	mov	r0, sp
20001f9a:	f020 0107 	bic.w	r1, r0, #7
20001f9e:	468d      	mov	sp, r1
20001fa0:	b589      	push	{r0, r3, r7, lr}
20001fa2:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG7 );
20001fa4:	f04f 0007 	mov.w	r0, #7
20001fa8:	f7ff ff60 	bl	20001e6c <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag7_IRQn );
20001fac:	f04f 007d 	mov.w	r0, #125	; 0x7d
20001fb0:	f7ff ff38 	bl	20001e24 <NVIC_ClearPendingIRQ>
}
20001fb4:	46bd      	mov	sp, r7
20001fb6:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001fba:	4685      	mov	sp, r0
20001fbc:	4770      	bx	lr
20001fbe:	bf00      	nop

20001fc0 <ACE_PPE_Flag8_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag8_IRQHandler( void )
#else
void ACE_PPE_Flag8_IRQHandler( void )
#endif
{
20001fc0:	4668      	mov	r0, sp
20001fc2:	f020 0107 	bic.w	r1, r0, #7
20001fc6:	468d      	mov	sp, r1
20001fc8:	b589      	push	{r0, r3, r7, lr}
20001fca:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG8 );
20001fcc:	f04f 0008 	mov.w	r0, #8
20001fd0:	f7ff ff4c 	bl	20001e6c <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag8_IRQn );
20001fd4:	f04f 007e 	mov.w	r0, #126	; 0x7e
20001fd8:	f7ff ff24 	bl	20001e24 <NVIC_ClearPendingIRQ>
}
20001fdc:	46bd      	mov	sp, r7
20001fde:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001fe2:	4685      	mov	sp, r0
20001fe4:	4770      	bx	lr
20001fe6:	bf00      	nop

20001fe8 <ACE_PPE_Flag9_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag9_IRQHandler( void )
#else
void ACE_PPE_Flag9_IRQHandler( void )
#endif
{
20001fe8:	4668      	mov	r0, sp
20001fea:	f020 0107 	bic.w	r1, r0, #7
20001fee:	468d      	mov	sp, r1
20001ff0:	b589      	push	{r0, r3, r7, lr}
20001ff2:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG9 );
20001ff4:	f04f 0009 	mov.w	r0, #9
20001ff8:	f7ff ff38 	bl	20001e6c <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag9_IRQn );
20001ffc:	f04f 007f 	mov.w	r0, #127	; 0x7f
20002000:	f7ff ff10 	bl	20001e24 <NVIC_ClearPendingIRQ>
}
20002004:	46bd      	mov	sp, r7
20002006:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000200a:	4685      	mov	sp, r0
2000200c:	4770      	bx	lr
2000200e:	bf00      	nop

20002010 <ACE_PPE_Flag10_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag10_IRQHandler( void )
#else
void ACE_PPE_Flag10_IRQHandler( void )
#endif
{
20002010:	4668      	mov	r0, sp
20002012:	f020 0107 	bic.w	r1, r0, #7
20002016:	468d      	mov	sp, r1
20002018:	b589      	push	{r0, r3, r7, lr}
2000201a:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG10 );
2000201c:	f04f 000a 	mov.w	r0, #10
20002020:	f7ff ff24 	bl	20001e6c <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag10_IRQn );
20002024:	f04f 0080 	mov.w	r0, #128	; 0x80
20002028:	f7ff fefc 	bl	20001e24 <NVIC_ClearPendingIRQ>
}
2000202c:	46bd      	mov	sp, r7
2000202e:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002032:	4685      	mov	sp, r0
20002034:	4770      	bx	lr
20002036:	bf00      	nop

20002038 <ACE_PPE_Flag11_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag11_IRQHandler( void )
#else
void ACE_PPE_Flag11_IRQHandler( void )
#endif
{
20002038:	4668      	mov	r0, sp
2000203a:	f020 0107 	bic.w	r1, r0, #7
2000203e:	468d      	mov	sp, r1
20002040:	b589      	push	{r0, r3, r7, lr}
20002042:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG11 );
20002044:	f04f 000b 	mov.w	r0, #11
20002048:	f7ff ff10 	bl	20001e6c <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag11_IRQn );
2000204c:	f04f 0081 	mov.w	r0, #129	; 0x81
20002050:	f7ff fee8 	bl	20001e24 <NVIC_ClearPendingIRQ>
}
20002054:	46bd      	mov	sp, r7
20002056:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000205a:	4685      	mov	sp, r0
2000205c:	4770      	bx	lr
2000205e:	bf00      	nop

20002060 <ACE_PPE_Flag12_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag12_IRQHandler( void )
#else
void ACE_PPE_Flag12_IRQHandler( void )
#endif
{
20002060:	4668      	mov	r0, sp
20002062:	f020 0107 	bic.w	r1, r0, #7
20002066:	468d      	mov	sp, r1
20002068:	b589      	push	{r0, r3, r7, lr}
2000206a:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG12 );
2000206c:	f04f 000c 	mov.w	r0, #12
20002070:	f7ff fefc 	bl	20001e6c <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag12_IRQn );
20002074:	f04f 0082 	mov.w	r0, #130	; 0x82
20002078:	f7ff fed4 	bl	20001e24 <NVIC_ClearPendingIRQ>
}
2000207c:	46bd      	mov	sp, r7
2000207e:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002082:	4685      	mov	sp, r0
20002084:	4770      	bx	lr
20002086:	bf00      	nop

20002088 <ACE_PPE_Flag13_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag13_IRQHandler( void )
#else
void ACE_PPE_Flag13_IRQHandler( void )
#endif
{
20002088:	4668      	mov	r0, sp
2000208a:	f020 0107 	bic.w	r1, r0, #7
2000208e:	468d      	mov	sp, r1
20002090:	b589      	push	{r0, r3, r7, lr}
20002092:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG13 );
20002094:	f04f 000d 	mov.w	r0, #13
20002098:	f7ff fee8 	bl	20001e6c <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag13_IRQn );
2000209c:	f04f 0083 	mov.w	r0, #131	; 0x83
200020a0:	f7ff fec0 	bl	20001e24 <NVIC_ClearPendingIRQ>
}
200020a4:	46bd      	mov	sp, r7
200020a6:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200020aa:	4685      	mov	sp, r0
200020ac:	4770      	bx	lr
200020ae:	bf00      	nop

200020b0 <ACE_PPE_Flag14_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag14_IRQHandler( void )
#else
void ACE_PPE_Flag14_IRQHandler( void )
#endif
{
200020b0:	4668      	mov	r0, sp
200020b2:	f020 0107 	bic.w	r1, r0, #7
200020b6:	468d      	mov	sp, r1
200020b8:	b589      	push	{r0, r3, r7, lr}
200020ba:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG14 );
200020bc:	f04f 000e 	mov.w	r0, #14
200020c0:	f7ff fed4 	bl	20001e6c <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag14_IRQn );
200020c4:	f04f 0084 	mov.w	r0, #132	; 0x84
200020c8:	f7ff feac 	bl	20001e24 <NVIC_ClearPendingIRQ>
}
200020cc:	46bd      	mov	sp, r7
200020ce:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200020d2:	4685      	mov	sp, r0
200020d4:	4770      	bx	lr
200020d6:	bf00      	nop

200020d8 <ACE_PPE_Flag15_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag15_IRQHandler( void )
#else
void ACE_PPE_Flag15_IRQHandler( void )
#endif
{
200020d8:	4668      	mov	r0, sp
200020da:	f020 0107 	bic.w	r1, r0, #7
200020de:	468d      	mov	sp, r1
200020e0:	b589      	push	{r0, r3, r7, lr}
200020e2:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG15 );
200020e4:	f04f 000f 	mov.w	r0, #15
200020e8:	f7ff fec0 	bl	20001e6c <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag15_IRQn );
200020ec:	f04f 0085 	mov.w	r0, #133	; 0x85
200020f0:	f7ff fe98 	bl	20001e24 <NVIC_ClearPendingIRQ>
}
200020f4:	46bd      	mov	sp, r7
200020f6:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200020fa:	4685      	mov	sp, r0
200020fc:	4770      	bx	lr
200020fe:	bf00      	nop

20002100 <ACE_PPE_Flag16_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag16_IRQHandler( void )
#else
void ACE_PPE_Flag16_IRQHandler( void )
#endif
{
20002100:	4668      	mov	r0, sp
20002102:	f020 0107 	bic.w	r1, r0, #7
20002106:	468d      	mov	sp, r1
20002108:	b589      	push	{r0, r3, r7, lr}
2000210a:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG16 );
2000210c:	f04f 0010 	mov.w	r0, #16
20002110:	f7ff feac 	bl	20001e6c <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag16_IRQn );
20002114:	f04f 0086 	mov.w	r0, #134	; 0x86
20002118:	f7ff fe84 	bl	20001e24 <NVIC_ClearPendingIRQ>
}
2000211c:	46bd      	mov	sp, r7
2000211e:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002122:	4685      	mov	sp, r0
20002124:	4770      	bx	lr
20002126:	bf00      	nop

20002128 <ACE_PPE_Flag17_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag17_IRQHandler( void )
#else
void ACE_PPE_Flag17_IRQHandler( void )
#endif
{
20002128:	4668      	mov	r0, sp
2000212a:	f020 0107 	bic.w	r1, r0, #7
2000212e:	468d      	mov	sp, r1
20002130:	b589      	push	{r0, r3, r7, lr}
20002132:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG17 );
20002134:	f04f 0011 	mov.w	r0, #17
20002138:	f7ff fe98 	bl	20001e6c <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag17_IRQn );
2000213c:	f04f 0087 	mov.w	r0, #135	; 0x87
20002140:	f7ff fe70 	bl	20001e24 <NVIC_ClearPendingIRQ>
}
20002144:	46bd      	mov	sp, r7
20002146:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000214a:	4685      	mov	sp, r0
2000214c:	4770      	bx	lr
2000214e:	bf00      	nop

20002150 <ACE_PPE_Flag18_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag18_IRQHandler( void )
#else
void ACE_PPE_Flag18_IRQHandler( void )
#endif
{
20002150:	4668      	mov	r0, sp
20002152:	f020 0107 	bic.w	r1, r0, #7
20002156:	468d      	mov	sp, r1
20002158:	b589      	push	{r0, r3, r7, lr}
2000215a:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG18 );
2000215c:	f04f 0012 	mov.w	r0, #18
20002160:	f7ff fe84 	bl	20001e6c <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag18_IRQn );
20002164:	f04f 0088 	mov.w	r0, #136	; 0x88
20002168:	f7ff fe5c 	bl	20001e24 <NVIC_ClearPendingIRQ>
}
2000216c:	46bd      	mov	sp, r7
2000216e:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002172:	4685      	mov	sp, r0
20002174:	4770      	bx	lr
20002176:	bf00      	nop

20002178 <ACE_PPE_Flag19_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag19_IRQHandler( void )
#else
void ACE_PPE_Flag19_IRQHandler( void )
#endif
{
20002178:	4668      	mov	r0, sp
2000217a:	f020 0107 	bic.w	r1, r0, #7
2000217e:	468d      	mov	sp, r1
20002180:	b589      	push	{r0, r3, r7, lr}
20002182:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG19 );
20002184:	f04f 0013 	mov.w	r0, #19
20002188:	f7ff fe70 	bl	20001e6c <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag19_IRQn );
2000218c:	f04f 0089 	mov.w	r0, #137	; 0x89
20002190:	f7ff fe48 	bl	20001e24 <NVIC_ClearPendingIRQ>
}
20002194:	46bd      	mov	sp, r7
20002196:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000219a:	4685      	mov	sp, r0
2000219c:	4770      	bx	lr
2000219e:	bf00      	nop

200021a0 <ACE_PPE_Flag20_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag20_IRQHandler( void )
#else
void ACE_PPE_Flag20_IRQHandler( void )
#endif
{
200021a0:	4668      	mov	r0, sp
200021a2:	f020 0107 	bic.w	r1, r0, #7
200021a6:	468d      	mov	sp, r1
200021a8:	b589      	push	{r0, r3, r7, lr}
200021aa:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG20 );
200021ac:	f04f 0014 	mov.w	r0, #20
200021b0:	f7ff fe5c 	bl	20001e6c <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag20_IRQn );
200021b4:	f04f 008a 	mov.w	r0, #138	; 0x8a
200021b8:	f7ff fe34 	bl	20001e24 <NVIC_ClearPendingIRQ>
}
200021bc:	46bd      	mov	sp, r7
200021be:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200021c2:	4685      	mov	sp, r0
200021c4:	4770      	bx	lr
200021c6:	bf00      	nop

200021c8 <ACE_PPE_Flag21_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag21_IRQHandler( void )
#else
void ACE_PPE_Flag21_IRQHandler( void )
#endif
{
200021c8:	4668      	mov	r0, sp
200021ca:	f020 0107 	bic.w	r1, r0, #7
200021ce:	468d      	mov	sp, r1
200021d0:	b589      	push	{r0, r3, r7, lr}
200021d2:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG21 );
200021d4:	f04f 0015 	mov.w	r0, #21
200021d8:	f7ff fe48 	bl	20001e6c <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag21_IRQn );
200021dc:	f04f 008b 	mov.w	r0, #139	; 0x8b
200021e0:	f7ff fe20 	bl	20001e24 <NVIC_ClearPendingIRQ>
}
200021e4:	46bd      	mov	sp, r7
200021e6:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200021ea:	4685      	mov	sp, r0
200021ec:	4770      	bx	lr
200021ee:	bf00      	nop

200021f0 <ACE_PPE_Flag22_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag22_IRQHandler( void )
#else
void ACE_PPE_Flag22_IRQHandler( void )
#endif
{
200021f0:	4668      	mov	r0, sp
200021f2:	f020 0107 	bic.w	r1, r0, #7
200021f6:	468d      	mov	sp, r1
200021f8:	b589      	push	{r0, r3, r7, lr}
200021fa:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG22 );
200021fc:	f04f 0016 	mov.w	r0, #22
20002200:	f7ff fe34 	bl	20001e6c <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag22_IRQn );
20002204:	f04f 008c 	mov.w	r0, #140	; 0x8c
20002208:	f7ff fe0c 	bl	20001e24 <NVIC_ClearPendingIRQ>
}
2000220c:	46bd      	mov	sp, r7
2000220e:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002212:	4685      	mov	sp, r0
20002214:	4770      	bx	lr
20002216:	bf00      	nop

20002218 <ACE_PPE_Flag23_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag23_IRQHandler( void )
#else
void ACE_PPE_Flag23_IRQHandler( void )
#endif
{
20002218:	4668      	mov	r0, sp
2000221a:	f020 0107 	bic.w	r1, r0, #7
2000221e:	468d      	mov	sp, r1
20002220:	b589      	push	{r0, r3, r7, lr}
20002222:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG23 );
20002224:	f04f 0017 	mov.w	r0, #23
20002228:	f7ff fe20 	bl	20001e6c <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag23_IRQn );
2000222c:	f04f 008d 	mov.w	r0, #141	; 0x8d
20002230:	f7ff fdf8 	bl	20001e24 <NVIC_ClearPendingIRQ>
}
20002234:	46bd      	mov	sp, r7
20002236:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000223a:	4685      	mov	sp, r0
2000223c:	4770      	bx	lr
2000223e:	bf00      	nop

20002240 <ACE_PPE_Flag24_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag24_IRQHandler( void )
#else
void ACE_PPE_Flag24_IRQHandler( void )
#endif
{
20002240:	4668      	mov	r0, sp
20002242:	f020 0107 	bic.w	r1, r0, #7
20002246:	468d      	mov	sp, r1
20002248:	b589      	push	{r0, r3, r7, lr}
2000224a:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG24 );
2000224c:	f04f 0018 	mov.w	r0, #24
20002250:	f7ff fe0c 	bl	20001e6c <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag24_IRQn );
20002254:	f04f 008e 	mov.w	r0, #142	; 0x8e
20002258:	f7ff fde4 	bl	20001e24 <NVIC_ClearPendingIRQ>
}
2000225c:	46bd      	mov	sp, r7
2000225e:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002262:	4685      	mov	sp, r0
20002264:	4770      	bx	lr
20002266:	bf00      	nop

20002268 <ACE_PPE_Flag25_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag25_IRQHandler( void )
#else
void ACE_PPE_Flag25_IRQHandler( void )
#endif
{
20002268:	4668      	mov	r0, sp
2000226a:	f020 0107 	bic.w	r1, r0, #7
2000226e:	468d      	mov	sp, r1
20002270:	b589      	push	{r0, r3, r7, lr}
20002272:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG25 );
20002274:	f04f 0019 	mov.w	r0, #25
20002278:	f7ff fdf8 	bl	20001e6c <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag25_IRQn );
2000227c:	f04f 008f 	mov.w	r0, #143	; 0x8f
20002280:	f7ff fdd0 	bl	20001e24 <NVIC_ClearPendingIRQ>
}
20002284:	46bd      	mov	sp, r7
20002286:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000228a:	4685      	mov	sp, r0
2000228c:	4770      	bx	lr
2000228e:	bf00      	nop

20002290 <ACE_PPE_Flag26_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag26_IRQHandler( void )
#else
void ACE_PPE_Flag26_IRQHandler( void )
#endif
{
20002290:	4668      	mov	r0, sp
20002292:	f020 0107 	bic.w	r1, r0, #7
20002296:	468d      	mov	sp, r1
20002298:	b589      	push	{r0, r3, r7, lr}
2000229a:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG26 );
2000229c:	f04f 001a 	mov.w	r0, #26
200022a0:	f7ff fde4 	bl	20001e6c <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag26_IRQn );
200022a4:	f04f 0090 	mov.w	r0, #144	; 0x90
200022a8:	f7ff fdbc 	bl	20001e24 <NVIC_ClearPendingIRQ>
}
200022ac:	46bd      	mov	sp, r7
200022ae:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200022b2:	4685      	mov	sp, r0
200022b4:	4770      	bx	lr
200022b6:	bf00      	nop

200022b8 <ACE_PPE_Flag27_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag27_IRQHandler( void )
#else
void ACE_PPE_Flag27_IRQHandler( void )
#endif
{
200022b8:	4668      	mov	r0, sp
200022ba:	f020 0107 	bic.w	r1, r0, #7
200022be:	468d      	mov	sp, r1
200022c0:	b589      	push	{r0, r3, r7, lr}
200022c2:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG27 );
200022c4:	f04f 001b 	mov.w	r0, #27
200022c8:	f7ff fdd0 	bl	20001e6c <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag27_IRQn );
200022cc:	f04f 0091 	mov.w	r0, #145	; 0x91
200022d0:	f7ff fda8 	bl	20001e24 <NVIC_ClearPendingIRQ>
}
200022d4:	46bd      	mov	sp, r7
200022d6:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200022da:	4685      	mov	sp, r0
200022dc:	4770      	bx	lr
200022de:	bf00      	nop

200022e0 <ACE_PPE_Flag28_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag28_IRQHandler( void )
#else
void ACE_PPE_Flag28_IRQHandler( void )
#endif
{
200022e0:	4668      	mov	r0, sp
200022e2:	f020 0107 	bic.w	r1, r0, #7
200022e6:	468d      	mov	sp, r1
200022e8:	b589      	push	{r0, r3, r7, lr}
200022ea:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG28 );
200022ec:	f04f 001c 	mov.w	r0, #28
200022f0:	f7ff fdbc 	bl	20001e6c <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag28_IRQn );
200022f4:	f04f 0092 	mov.w	r0, #146	; 0x92
200022f8:	f7ff fd94 	bl	20001e24 <NVIC_ClearPendingIRQ>
}
200022fc:	46bd      	mov	sp, r7
200022fe:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002302:	4685      	mov	sp, r0
20002304:	4770      	bx	lr
20002306:	bf00      	nop

20002308 <ACE_PPE_Flag29_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag29_IRQHandler( void )
#else
void ACE_PPE_Flag29_IRQHandler( void )
#endif
{
20002308:	4668      	mov	r0, sp
2000230a:	f020 0107 	bic.w	r1, r0, #7
2000230e:	468d      	mov	sp, r1
20002310:	b589      	push	{r0, r3, r7, lr}
20002312:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG29 );
20002314:	f04f 001d 	mov.w	r0, #29
20002318:	f7ff fda8 	bl	20001e6c <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag29_IRQn );
2000231c:	f04f 0093 	mov.w	r0, #147	; 0x93
20002320:	f7ff fd80 	bl	20001e24 <NVIC_ClearPendingIRQ>
}
20002324:	46bd      	mov	sp, r7
20002326:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000232a:	4685      	mov	sp, r0
2000232c:	4770      	bx	lr
2000232e:	bf00      	nop

20002330 <ACE_PPE_Flag30_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag30_IRQHandler( void )
#else
void ACE_PPE_Flag30_IRQHandler( void )
#endif
{
20002330:	4668      	mov	r0, sp
20002332:	f020 0107 	bic.w	r1, r0, #7
20002336:	468d      	mov	sp, r1
20002338:	b589      	push	{r0, r3, r7, lr}
2000233a:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG30 );
2000233c:	f04f 001e 	mov.w	r0, #30
20002340:	f7ff fd94 	bl	20001e6c <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag30_IRQn );
20002344:	f04f 0094 	mov.w	r0, #148	; 0x94
20002348:	f7ff fd6c 	bl	20001e24 <NVIC_ClearPendingIRQ>
}
2000234c:	46bd      	mov	sp, r7
2000234e:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002352:	4685      	mov	sp, r0
20002354:	4770      	bx	lr
20002356:	bf00      	nop

20002358 <ACE_PPE_Flag31_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag31_IRQHandler( void )
#else
void ACE_PPE_Flag31_IRQHandler( void )
#endif
{
20002358:	4668      	mov	r0, sp
2000235a:	f020 0107 	bic.w	r1, r0, #7
2000235e:	468d      	mov	sp, r1
20002360:	b589      	push	{r0, r3, r7, lr}
20002362:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG31 );
20002364:	f04f 001f 	mov.w	r0, #31
20002368:	f7ff fd80 	bl	20001e6c <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag31_IRQn );
2000236c:	f04f 0095 	mov.w	r0, #149	; 0x95
20002370:	f7ff fd58 	bl	20001e24 <NVIC_ClearPendingIRQ>
}
20002374:	46bd      	mov	sp, r7
20002376:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000237a:	4685      	mov	sp, r0
2000237c:	4770      	bx	lr
2000237e:	bf00      	nop

20002380 <__aeabi_frsub>:
20002380:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
20002384:	e002      	b.n	2000238c <__addsf3>
20002386:	bf00      	nop

20002388 <__aeabi_fsub>:
20002388:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

2000238c <__addsf3>:
2000238c:	0042      	lsls	r2, r0, #1
2000238e:	bf1f      	itttt	ne
20002390:	ea5f 0341 	movsne.w	r3, r1, lsl #1
20002394:	ea92 0f03 	teqne	r2, r3
20002398:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
2000239c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
200023a0:	d06a      	beq.n	20002478 <__addsf3+0xec>
200023a2:	ea4f 6212 	mov.w	r2, r2, lsr #24
200023a6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
200023aa:	bfc1      	itttt	gt
200023ac:	18d2      	addgt	r2, r2, r3
200023ae:	4041      	eorgt	r1, r0
200023b0:	4048      	eorgt	r0, r1
200023b2:	4041      	eorgt	r1, r0
200023b4:	bfb8      	it	lt
200023b6:	425b      	neglt	r3, r3
200023b8:	2b19      	cmp	r3, #25
200023ba:	bf88      	it	hi
200023bc:	4770      	bxhi	lr
200023be:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
200023c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
200023c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
200023ca:	bf18      	it	ne
200023cc:	4240      	negne	r0, r0
200023ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
200023d2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
200023d6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
200023da:	bf18      	it	ne
200023dc:	4249      	negne	r1, r1
200023de:	ea92 0f03 	teq	r2, r3
200023e2:	d03f      	beq.n	20002464 <__addsf3+0xd8>
200023e4:	f1a2 0201 	sub.w	r2, r2, #1
200023e8:	fa41 fc03 	asr.w	ip, r1, r3
200023ec:	eb10 000c 	adds.w	r0, r0, ip
200023f0:	f1c3 0320 	rsb	r3, r3, #32
200023f4:	fa01 f103 	lsl.w	r1, r1, r3
200023f8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
200023fc:	d502      	bpl.n	20002404 <__addsf3+0x78>
200023fe:	4249      	negs	r1, r1
20002400:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
20002404:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
20002408:	d313      	bcc.n	20002432 <__addsf3+0xa6>
2000240a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
2000240e:	d306      	bcc.n	2000241e <__addsf3+0x92>
20002410:	0840      	lsrs	r0, r0, #1
20002412:	ea4f 0131 	mov.w	r1, r1, rrx
20002416:	f102 0201 	add.w	r2, r2, #1
2000241a:	2afe      	cmp	r2, #254	; 0xfe
2000241c:	d251      	bcs.n	200024c2 <__addsf3+0x136>
2000241e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
20002422:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
20002426:	bf08      	it	eq
20002428:	f020 0001 	biceq.w	r0, r0, #1
2000242c:	ea40 0003 	orr.w	r0, r0, r3
20002430:	4770      	bx	lr
20002432:	0049      	lsls	r1, r1, #1
20002434:	eb40 0000 	adc.w	r0, r0, r0
20002438:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
2000243c:	f1a2 0201 	sub.w	r2, r2, #1
20002440:	d1ed      	bne.n	2000241e <__addsf3+0x92>
20002442:	fab0 fc80 	clz	ip, r0
20002446:	f1ac 0c08 	sub.w	ip, ip, #8
2000244a:	ebb2 020c 	subs.w	r2, r2, ip
2000244e:	fa00 f00c 	lsl.w	r0, r0, ip
20002452:	bfaa      	itet	ge
20002454:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
20002458:	4252      	neglt	r2, r2
2000245a:	4318      	orrge	r0, r3
2000245c:	bfbc      	itt	lt
2000245e:	40d0      	lsrlt	r0, r2
20002460:	4318      	orrlt	r0, r3
20002462:	4770      	bx	lr
20002464:	f092 0f00 	teq	r2, #0
20002468:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
2000246c:	bf06      	itte	eq
2000246e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
20002472:	3201      	addeq	r2, #1
20002474:	3b01      	subne	r3, #1
20002476:	e7b5      	b.n	200023e4 <__addsf3+0x58>
20002478:	ea4f 0341 	mov.w	r3, r1, lsl #1
2000247c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
20002480:	bf18      	it	ne
20002482:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
20002486:	d021      	beq.n	200024cc <__addsf3+0x140>
20002488:	ea92 0f03 	teq	r2, r3
2000248c:	d004      	beq.n	20002498 <__addsf3+0x10c>
2000248e:	f092 0f00 	teq	r2, #0
20002492:	bf08      	it	eq
20002494:	4608      	moveq	r0, r1
20002496:	4770      	bx	lr
20002498:	ea90 0f01 	teq	r0, r1
2000249c:	bf1c      	itt	ne
2000249e:	2000      	movne	r0, #0
200024a0:	4770      	bxne	lr
200024a2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
200024a6:	d104      	bne.n	200024b2 <__addsf3+0x126>
200024a8:	0040      	lsls	r0, r0, #1
200024aa:	bf28      	it	cs
200024ac:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
200024b0:	4770      	bx	lr
200024b2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
200024b6:	bf3c      	itt	cc
200024b8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
200024bc:	4770      	bxcc	lr
200024be:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
200024c2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
200024c6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
200024ca:	4770      	bx	lr
200024cc:	ea7f 6222 	mvns.w	r2, r2, asr #24
200024d0:	bf16      	itet	ne
200024d2:	4608      	movne	r0, r1
200024d4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
200024d8:	4601      	movne	r1, r0
200024da:	0242      	lsls	r2, r0, #9
200024dc:	bf06      	itte	eq
200024de:	ea5f 2341 	movseq.w	r3, r1, lsl #9
200024e2:	ea90 0f01 	teqeq	r0, r1
200024e6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
200024ea:	4770      	bx	lr

200024ec <__aeabi_ui2f>:
200024ec:	f04f 0300 	mov.w	r3, #0
200024f0:	e004      	b.n	200024fc <__aeabi_i2f+0x8>
200024f2:	bf00      	nop

200024f4 <__aeabi_i2f>:
200024f4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
200024f8:	bf48      	it	mi
200024fa:	4240      	negmi	r0, r0
200024fc:	ea5f 0c00 	movs.w	ip, r0
20002500:	bf08      	it	eq
20002502:	4770      	bxeq	lr
20002504:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
20002508:	4601      	mov	r1, r0
2000250a:	f04f 0000 	mov.w	r0, #0
2000250e:	e01c      	b.n	2000254a <__aeabi_l2f+0x2a>

20002510 <__aeabi_ul2f>:
20002510:	ea50 0201 	orrs.w	r2, r0, r1
20002514:	bf08      	it	eq
20002516:	4770      	bxeq	lr
20002518:	f04f 0300 	mov.w	r3, #0
2000251c:	e00a      	b.n	20002534 <__aeabi_l2f+0x14>
2000251e:	bf00      	nop

20002520 <__aeabi_l2f>:
20002520:	ea50 0201 	orrs.w	r2, r0, r1
20002524:	bf08      	it	eq
20002526:	4770      	bxeq	lr
20002528:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
2000252c:	d502      	bpl.n	20002534 <__aeabi_l2f+0x14>
2000252e:	4240      	negs	r0, r0
20002530:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
20002534:	ea5f 0c01 	movs.w	ip, r1
20002538:	bf02      	ittt	eq
2000253a:	4684      	moveq	ip, r0
2000253c:	4601      	moveq	r1, r0
2000253e:	2000      	moveq	r0, #0
20002540:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
20002544:	bf08      	it	eq
20002546:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
2000254a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
2000254e:	fabc f28c 	clz	r2, ip
20002552:	3a08      	subs	r2, #8
20002554:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
20002558:	db10      	blt.n	2000257c <__aeabi_l2f+0x5c>
2000255a:	fa01 fc02 	lsl.w	ip, r1, r2
2000255e:	4463      	add	r3, ip
20002560:	fa00 fc02 	lsl.w	ip, r0, r2
20002564:	f1c2 0220 	rsb	r2, r2, #32
20002568:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
2000256c:	fa20 f202 	lsr.w	r2, r0, r2
20002570:	eb43 0002 	adc.w	r0, r3, r2
20002574:	bf08      	it	eq
20002576:	f020 0001 	biceq.w	r0, r0, #1
2000257a:	4770      	bx	lr
2000257c:	f102 0220 	add.w	r2, r2, #32
20002580:	fa01 fc02 	lsl.w	ip, r1, r2
20002584:	f1c2 0220 	rsb	r2, r2, #32
20002588:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
2000258c:	fa21 f202 	lsr.w	r2, r1, r2
20002590:	eb43 0002 	adc.w	r0, r3, r2
20002594:	bf08      	it	eq
20002596:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
2000259a:	4770      	bx	lr

2000259c <__aeabi_fmul>:
2000259c:	f04f 0cff 	mov.w	ip, #255	; 0xff
200025a0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
200025a4:	bf1e      	ittt	ne
200025a6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
200025aa:	ea92 0f0c 	teqne	r2, ip
200025ae:	ea93 0f0c 	teqne	r3, ip
200025b2:	d06f      	beq.n	20002694 <__aeabi_fmul+0xf8>
200025b4:	441a      	add	r2, r3
200025b6:	ea80 0c01 	eor.w	ip, r0, r1
200025ba:	0240      	lsls	r0, r0, #9
200025bc:	bf18      	it	ne
200025be:	ea5f 2141 	movsne.w	r1, r1, lsl #9
200025c2:	d01e      	beq.n	20002602 <__aeabi_fmul+0x66>
200025c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
200025c8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
200025cc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
200025d0:	fba0 3101 	umull	r3, r1, r0, r1
200025d4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
200025d8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
200025dc:	bf3e      	ittt	cc
200025de:	0049      	lslcc	r1, r1, #1
200025e0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
200025e4:	005b      	lslcc	r3, r3, #1
200025e6:	ea40 0001 	orr.w	r0, r0, r1
200025ea:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
200025ee:	2afd      	cmp	r2, #253	; 0xfd
200025f0:	d81d      	bhi.n	2000262e <__aeabi_fmul+0x92>
200025f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
200025f6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
200025fa:	bf08      	it	eq
200025fc:	f020 0001 	biceq.w	r0, r0, #1
20002600:	4770      	bx	lr
20002602:	f090 0f00 	teq	r0, #0
20002606:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
2000260a:	bf08      	it	eq
2000260c:	0249      	lsleq	r1, r1, #9
2000260e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
20002612:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
20002616:	3a7f      	subs	r2, #127	; 0x7f
20002618:	bfc2      	ittt	gt
2000261a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
2000261e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
20002622:	4770      	bxgt	lr
20002624:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
20002628:	f04f 0300 	mov.w	r3, #0
2000262c:	3a01      	subs	r2, #1
2000262e:	dc5d      	bgt.n	200026ec <__aeabi_fmul+0x150>
20002630:	f112 0f19 	cmn.w	r2, #25
20002634:	bfdc      	itt	le
20002636:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
2000263a:	4770      	bxle	lr
2000263c:	f1c2 0200 	rsb	r2, r2, #0
20002640:	0041      	lsls	r1, r0, #1
20002642:	fa21 f102 	lsr.w	r1, r1, r2
20002646:	f1c2 0220 	rsb	r2, r2, #32
2000264a:	fa00 fc02 	lsl.w	ip, r0, r2
2000264e:	ea5f 0031 	movs.w	r0, r1, rrx
20002652:	f140 0000 	adc.w	r0, r0, #0
20002656:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
2000265a:	bf08      	it	eq
2000265c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
20002660:	4770      	bx	lr
20002662:	f092 0f00 	teq	r2, #0
20002666:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
2000266a:	bf02      	ittt	eq
2000266c:	0040      	lsleq	r0, r0, #1
2000266e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
20002672:	3a01      	subeq	r2, #1
20002674:	d0f9      	beq.n	2000266a <__aeabi_fmul+0xce>
20002676:	ea40 000c 	orr.w	r0, r0, ip
2000267a:	f093 0f00 	teq	r3, #0
2000267e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
20002682:	bf02      	ittt	eq
20002684:	0049      	lsleq	r1, r1, #1
20002686:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
2000268a:	3b01      	subeq	r3, #1
2000268c:	d0f9      	beq.n	20002682 <__aeabi_fmul+0xe6>
2000268e:	ea41 010c 	orr.w	r1, r1, ip
20002692:	e78f      	b.n	200025b4 <__aeabi_fmul+0x18>
20002694:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
20002698:	ea92 0f0c 	teq	r2, ip
2000269c:	bf18      	it	ne
2000269e:	ea93 0f0c 	teqne	r3, ip
200026a2:	d00a      	beq.n	200026ba <__aeabi_fmul+0x11e>
200026a4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
200026a8:	bf18      	it	ne
200026aa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
200026ae:	d1d8      	bne.n	20002662 <__aeabi_fmul+0xc6>
200026b0:	ea80 0001 	eor.w	r0, r0, r1
200026b4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
200026b8:	4770      	bx	lr
200026ba:	f090 0f00 	teq	r0, #0
200026be:	bf17      	itett	ne
200026c0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
200026c4:	4608      	moveq	r0, r1
200026c6:	f091 0f00 	teqne	r1, #0
200026ca:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
200026ce:	d014      	beq.n	200026fa <__aeabi_fmul+0x15e>
200026d0:	ea92 0f0c 	teq	r2, ip
200026d4:	d101      	bne.n	200026da <__aeabi_fmul+0x13e>
200026d6:	0242      	lsls	r2, r0, #9
200026d8:	d10f      	bne.n	200026fa <__aeabi_fmul+0x15e>
200026da:	ea93 0f0c 	teq	r3, ip
200026de:	d103      	bne.n	200026e8 <__aeabi_fmul+0x14c>
200026e0:	024b      	lsls	r3, r1, #9
200026e2:	bf18      	it	ne
200026e4:	4608      	movne	r0, r1
200026e6:	d108      	bne.n	200026fa <__aeabi_fmul+0x15e>
200026e8:	ea80 0001 	eor.w	r0, r0, r1
200026ec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
200026f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
200026f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
200026f8:	4770      	bx	lr
200026fa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
200026fe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
20002702:	4770      	bx	lr

20002704 <__aeabi_fdiv>:
20002704:	f04f 0cff 	mov.w	ip, #255	; 0xff
20002708:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
2000270c:	bf1e      	ittt	ne
2000270e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
20002712:	ea92 0f0c 	teqne	r2, ip
20002716:	ea93 0f0c 	teqne	r3, ip
2000271a:	d069      	beq.n	200027f0 <__aeabi_fdiv+0xec>
2000271c:	eba2 0203 	sub.w	r2, r2, r3
20002720:	ea80 0c01 	eor.w	ip, r0, r1
20002724:	0249      	lsls	r1, r1, #9
20002726:	ea4f 2040 	mov.w	r0, r0, lsl #9
2000272a:	d037      	beq.n	2000279c <__aeabi_fdiv+0x98>
2000272c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
20002730:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
20002734:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
20002738:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
2000273c:	428b      	cmp	r3, r1
2000273e:	bf38      	it	cc
20002740:	005b      	lslcc	r3, r3, #1
20002742:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
20002746:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
2000274a:	428b      	cmp	r3, r1
2000274c:	bf24      	itt	cs
2000274e:	1a5b      	subcs	r3, r3, r1
20002750:	ea40 000c 	orrcs.w	r0, r0, ip
20002754:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
20002758:	bf24      	itt	cs
2000275a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
2000275e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
20002762:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
20002766:	bf24      	itt	cs
20002768:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
2000276c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
20002770:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
20002774:	bf24      	itt	cs
20002776:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
2000277a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
2000277e:	011b      	lsls	r3, r3, #4
20002780:	bf18      	it	ne
20002782:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
20002786:	d1e0      	bne.n	2000274a <__aeabi_fdiv+0x46>
20002788:	2afd      	cmp	r2, #253	; 0xfd
2000278a:	f63f af50 	bhi.w	2000262e <__aeabi_fmul+0x92>
2000278e:	428b      	cmp	r3, r1
20002790:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
20002794:	bf08      	it	eq
20002796:	f020 0001 	biceq.w	r0, r0, #1
2000279a:	4770      	bx	lr
2000279c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
200027a0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
200027a4:	327f      	adds	r2, #127	; 0x7f
200027a6:	bfc2      	ittt	gt
200027a8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
200027ac:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
200027b0:	4770      	bxgt	lr
200027b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
200027b6:	f04f 0300 	mov.w	r3, #0
200027ba:	3a01      	subs	r2, #1
200027bc:	e737      	b.n	2000262e <__aeabi_fmul+0x92>
200027be:	f092 0f00 	teq	r2, #0
200027c2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
200027c6:	bf02      	ittt	eq
200027c8:	0040      	lsleq	r0, r0, #1
200027ca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
200027ce:	3a01      	subeq	r2, #1
200027d0:	d0f9      	beq.n	200027c6 <__aeabi_fdiv+0xc2>
200027d2:	ea40 000c 	orr.w	r0, r0, ip
200027d6:	f093 0f00 	teq	r3, #0
200027da:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
200027de:	bf02      	ittt	eq
200027e0:	0049      	lsleq	r1, r1, #1
200027e2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
200027e6:	3b01      	subeq	r3, #1
200027e8:	d0f9      	beq.n	200027de <__aeabi_fdiv+0xda>
200027ea:	ea41 010c 	orr.w	r1, r1, ip
200027ee:	e795      	b.n	2000271c <__aeabi_fdiv+0x18>
200027f0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
200027f4:	ea92 0f0c 	teq	r2, ip
200027f8:	d108      	bne.n	2000280c <__aeabi_fdiv+0x108>
200027fa:	0242      	lsls	r2, r0, #9
200027fc:	f47f af7d 	bne.w	200026fa <__aeabi_fmul+0x15e>
20002800:	ea93 0f0c 	teq	r3, ip
20002804:	f47f af70 	bne.w	200026e8 <__aeabi_fmul+0x14c>
20002808:	4608      	mov	r0, r1
2000280a:	e776      	b.n	200026fa <__aeabi_fmul+0x15e>
2000280c:	ea93 0f0c 	teq	r3, ip
20002810:	d104      	bne.n	2000281c <__aeabi_fdiv+0x118>
20002812:	024b      	lsls	r3, r1, #9
20002814:	f43f af4c 	beq.w	200026b0 <__aeabi_fmul+0x114>
20002818:	4608      	mov	r0, r1
2000281a:	e76e      	b.n	200026fa <__aeabi_fmul+0x15e>
2000281c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
20002820:	bf18      	it	ne
20002822:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
20002826:	d1ca      	bne.n	200027be <__aeabi_fdiv+0xba>
20002828:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
2000282c:	f47f af5c 	bne.w	200026e8 <__aeabi_fmul+0x14c>
20002830:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
20002834:	f47f af3c 	bne.w	200026b0 <__aeabi_fmul+0x114>
20002838:	e75f      	b.n	200026fa <__aeabi_fmul+0x15e>
2000283a:	bf00      	nop

2000283c <__aeabi_f2iz>:
2000283c:	ea4f 0240 	mov.w	r2, r0, lsl #1
20002840:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
20002844:	d30f      	bcc.n	20002866 <__aeabi_f2iz+0x2a>
20002846:	f04f 039e 	mov.w	r3, #158	; 0x9e
2000284a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
2000284e:	d90d      	bls.n	2000286c <__aeabi_f2iz+0x30>
20002850:	ea4f 2300 	mov.w	r3, r0, lsl #8
20002854:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
20002858:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
2000285c:	fa23 f002 	lsr.w	r0, r3, r2
20002860:	bf18      	it	ne
20002862:	4240      	negne	r0, r0
20002864:	4770      	bx	lr
20002866:	f04f 0000 	mov.w	r0, #0
2000286a:	4770      	bx	lr
2000286c:	f112 0f61 	cmn.w	r2, #97	; 0x61
20002870:	d101      	bne.n	20002876 <__aeabi_f2iz+0x3a>
20002872:	0242      	lsls	r2, r0, #9
20002874:	d105      	bne.n	20002882 <__aeabi_f2iz+0x46>
20002876:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
2000287a:	bf08      	it	eq
2000287c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
20002880:	4770      	bx	lr
20002882:	f04f 0000 	mov.w	r0, #0
20002886:	4770      	bx	lr

20002888 <__libc_init_array>:
20002888:	b570      	push	{r4, r5, r6, lr}
2000288a:	f642 465c 	movw	r6, #11356	; 0x2c5c
2000288e:	f642 455c 	movw	r5, #11356	; 0x2c5c
20002892:	f2c2 0600 	movt	r6, #8192	; 0x2000
20002896:	f2c2 0500 	movt	r5, #8192	; 0x2000
2000289a:	1b76      	subs	r6, r6, r5
2000289c:	10b6      	asrs	r6, r6, #2
2000289e:	d006      	beq.n	200028ae <__libc_init_array+0x26>
200028a0:	2400      	movs	r4, #0
200028a2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
200028a6:	3401      	adds	r4, #1
200028a8:	4798      	blx	r3
200028aa:	42a6      	cmp	r6, r4
200028ac:	d8f9      	bhi.n	200028a2 <__libc_init_array+0x1a>
200028ae:	f642 455c 	movw	r5, #11356	; 0x2c5c
200028b2:	f642 4660 	movw	r6, #11360	; 0x2c60
200028b6:	f2c2 0500 	movt	r5, #8192	; 0x2000
200028ba:	f2c2 0600 	movt	r6, #8192	; 0x2000
200028be:	1b76      	subs	r6, r6, r5
200028c0:	f000 f9c0 	bl	20002c44 <_init>
200028c4:	10b6      	asrs	r6, r6, #2
200028c6:	d006      	beq.n	200028d6 <__libc_init_array+0x4e>
200028c8:	2400      	movs	r4, #0
200028ca:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
200028ce:	3401      	adds	r4, #1
200028d0:	4798      	blx	r3
200028d2:	42a6      	cmp	r6, r4
200028d4:	d8f9      	bhi.n	200028ca <__libc_init_array+0x42>
200028d6:	bd70      	pop	{r4, r5, r6, pc}

200028d8 <memset>:
200028d8:	2a03      	cmp	r2, #3
200028da:	b2c9      	uxtb	r1, r1
200028dc:	b430      	push	{r4, r5}
200028de:	d807      	bhi.n	200028f0 <memset+0x18>
200028e0:	b122      	cbz	r2, 200028ec <memset+0x14>
200028e2:	2300      	movs	r3, #0
200028e4:	54c1      	strb	r1, [r0, r3]
200028e6:	3301      	adds	r3, #1
200028e8:	4293      	cmp	r3, r2
200028ea:	d1fb      	bne.n	200028e4 <memset+0xc>
200028ec:	bc30      	pop	{r4, r5}
200028ee:	4770      	bx	lr
200028f0:	eb00 0c02 	add.w	ip, r0, r2
200028f4:	4603      	mov	r3, r0
200028f6:	e001      	b.n	200028fc <memset+0x24>
200028f8:	f803 1c01 	strb.w	r1, [r3, #-1]
200028fc:	f003 0403 	and.w	r4, r3, #3
20002900:	461a      	mov	r2, r3
20002902:	3301      	adds	r3, #1
20002904:	2c00      	cmp	r4, #0
20002906:	d1f7      	bne.n	200028f8 <memset+0x20>
20002908:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
2000290c:	ebc2 040c 	rsb	r4, r2, ip
20002910:	fb03 f301 	mul.w	r3, r3, r1
20002914:	e01f      	b.n	20002956 <memset+0x7e>
20002916:	f842 3c40 	str.w	r3, [r2, #-64]
2000291a:	f842 3c3c 	str.w	r3, [r2, #-60]
2000291e:	f842 3c38 	str.w	r3, [r2, #-56]
20002922:	f842 3c34 	str.w	r3, [r2, #-52]
20002926:	f842 3c30 	str.w	r3, [r2, #-48]
2000292a:	f842 3c2c 	str.w	r3, [r2, #-44]
2000292e:	f842 3c28 	str.w	r3, [r2, #-40]
20002932:	f842 3c24 	str.w	r3, [r2, #-36]
20002936:	f842 3c20 	str.w	r3, [r2, #-32]
2000293a:	f842 3c1c 	str.w	r3, [r2, #-28]
2000293e:	f842 3c18 	str.w	r3, [r2, #-24]
20002942:	f842 3c14 	str.w	r3, [r2, #-20]
20002946:	f842 3c10 	str.w	r3, [r2, #-16]
2000294a:	f842 3c0c 	str.w	r3, [r2, #-12]
2000294e:	f842 3c08 	str.w	r3, [r2, #-8]
20002952:	f842 3c04 	str.w	r3, [r2, #-4]
20002956:	4615      	mov	r5, r2
20002958:	3240      	adds	r2, #64	; 0x40
2000295a:	2c3f      	cmp	r4, #63	; 0x3f
2000295c:	f1a4 0440 	sub.w	r4, r4, #64	; 0x40
20002960:	dcd9      	bgt.n	20002916 <memset+0x3e>
20002962:	462a      	mov	r2, r5
20002964:	ebc5 040c 	rsb	r4, r5, ip
20002968:	e007      	b.n	2000297a <memset+0xa2>
2000296a:	f842 3c10 	str.w	r3, [r2, #-16]
2000296e:	f842 3c0c 	str.w	r3, [r2, #-12]
20002972:	f842 3c08 	str.w	r3, [r2, #-8]
20002976:	f842 3c04 	str.w	r3, [r2, #-4]
2000297a:	4615      	mov	r5, r2
2000297c:	3210      	adds	r2, #16
2000297e:	2c0f      	cmp	r4, #15
20002980:	f1a4 0410 	sub.w	r4, r4, #16
20002984:	dcf1      	bgt.n	2000296a <memset+0x92>
20002986:	462a      	mov	r2, r5
20002988:	ebc5 050c 	rsb	r5, r5, ip
2000298c:	e001      	b.n	20002992 <memset+0xba>
2000298e:	f842 3c04 	str.w	r3, [r2, #-4]
20002992:	4614      	mov	r4, r2
20002994:	3204      	adds	r2, #4
20002996:	2d03      	cmp	r5, #3
20002998:	f1a5 0504 	sub.w	r5, r5, #4
2000299c:	dcf7      	bgt.n	2000298e <memset+0xb6>
2000299e:	e001      	b.n	200029a4 <memset+0xcc>
200029a0:	f804 1b01 	strb.w	r1, [r4], #1
200029a4:	4564      	cmp	r4, ip
200029a6:	d3fb      	bcc.n	200029a0 <memset+0xc8>
200029a8:	e7a0      	b.n	200028ec <memset+0x14>
200029aa:	bf00      	nop

200029ac <strncmp>:
200029ac:	b430      	push	{r4, r5}
200029ae:	4613      	mov	r3, r2
200029b0:	2a00      	cmp	r2, #0
200029b2:	d043      	beq.n	20002a3c <strncmp+0x90>
200029b4:	ea41 0200 	orr.w	r2, r1, r0
200029b8:	f012 0f03 	tst.w	r2, #3
200029bc:	d125      	bne.n	20002a0a <strncmp+0x5e>
200029be:	2b03      	cmp	r3, #3
200029c0:	4604      	mov	r4, r0
200029c2:	460d      	mov	r5, r1
200029c4:	d93d      	bls.n	20002a42 <strncmp+0x96>
200029c6:	6802      	ldr	r2, [r0, #0]
200029c8:	6809      	ldr	r1, [r1, #0]
200029ca:	428a      	cmp	r2, r1
200029cc:	d139      	bne.n	20002a42 <strncmp+0x96>
200029ce:	3b04      	subs	r3, #4
200029d0:	d034      	beq.n	20002a3c <strncmp+0x90>
200029d2:	f1a2 3101 	sub.w	r1, r2, #16843009	; 0x1010101
200029d6:	ea21 0202 	bic.w	r2, r1, r2
200029da:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
200029de:	d00d      	beq.n	200029fc <strncmp+0x50>
200029e0:	e02c      	b.n	20002a3c <strncmp+0x90>
200029e2:	6822      	ldr	r2, [r4, #0]
200029e4:	6829      	ldr	r1, [r5, #0]
200029e6:	f1a2 3001 	sub.w	r0, r2, #16843009	; 0x1010101
200029ea:	428a      	cmp	r2, r1
200029ec:	ea20 0002 	bic.w	r0, r0, r2
200029f0:	d127      	bne.n	20002a42 <strncmp+0x96>
200029f2:	3b04      	subs	r3, #4
200029f4:	d022      	beq.n	20002a3c <strncmp+0x90>
200029f6:	f010 3f80 	tst.w	r0, #2155905152	; 0x80808080
200029fa:	d11f      	bne.n	20002a3c <strncmp+0x90>
200029fc:	3404      	adds	r4, #4
200029fe:	3504      	adds	r5, #4
20002a00:	2b03      	cmp	r3, #3
20002a02:	d8ee      	bhi.n	200029e2 <strncmp+0x36>
20002a04:	4620      	mov	r0, r4
20002a06:	4629      	mov	r1, r5
20002a08:	b1f3      	cbz	r3, 20002a48 <strncmp+0x9c>
20002a0a:	7804      	ldrb	r4, [r0, #0]
20002a0c:	3b01      	subs	r3, #1
20002a0e:	f891 c000 	ldrb.w	ip, [r1]
20002a12:	4564      	cmp	r4, ip
20002a14:	d10f      	bne.n	20002a36 <strncmp+0x8a>
20002a16:	b18b      	cbz	r3, 20002a3c <strncmp+0x90>
20002a18:	b184      	cbz	r4, 20002a3c <strncmp+0x90>
20002a1a:	3b01      	subs	r3, #1
20002a1c:	2200      	movs	r2, #0
20002a1e:	e002      	b.n	20002a26 <strncmp+0x7a>
20002a20:	b163      	cbz	r3, 20002a3c <strncmp+0x90>
20002a22:	b15c      	cbz	r4, 20002a3c <strncmp+0x90>
20002a24:	3b01      	subs	r3, #1
20002a26:	1884      	adds	r4, r0, r2
20002a28:	188d      	adds	r5, r1, r2
20002a2a:	3201      	adds	r2, #1
20002a2c:	7864      	ldrb	r4, [r4, #1]
20002a2e:	f895 c001 	ldrb.w	ip, [r5, #1]
20002a32:	4564      	cmp	r4, ip
20002a34:	d0f4      	beq.n	20002a20 <strncmp+0x74>
20002a36:	ebcc 0004 	rsb	r0, ip, r4
20002a3a:	e000      	b.n	20002a3e <strncmp+0x92>
20002a3c:	2000      	movs	r0, #0
20002a3e:	bc30      	pop	{r4, r5}
20002a40:	4770      	bx	lr
20002a42:	4620      	mov	r0, r4
20002a44:	4629      	mov	r1, r5
20002a46:	e7e0      	b.n	20002a0a <strncmp+0x5e>
20002a48:	7824      	ldrb	r4, [r4, #0]
20002a4a:	f895 c000 	ldrb.w	ip, [r5]
20002a4e:	ebcc 0004 	rsb	r0, ip, r4
20002a52:	e7f4      	b.n	20002a3e <strncmp+0x92>

20002a54 <initcmd>:
20002a54:	03ef 8003 cf02 0003 30c1 04ed 0364 8112     .........0..d...
20002a64:	03e8 0085 cb78 3905 002c 0234 01f7 ea20     ....x..9,.4... .
20002a74:	0002 c000 2301 01c1 c510 3e02 c728 8601     .....#.....>(...
20002a84:	0136 3748 0001 013a b155 0002 b618 0803     6.H7..:.U.......
20002a94:	2782 01f2 2600 0101 0fe0 310f 0c2b 080e     .'...&.....1+...
20002aa4:	f14e 0737 0310 090e e100 000f 140e 1103     N.7.............
20002ab4:	3107 48c1 0f08 310c 0f36 8011 8029 0000     .1.H...16...)...
20002ac4:	4441 4443 7269 6365 4974 706e 7475 305f     ADCDirectInput_0
20002ad4:	0000 0000 4441 4443 7269 6365 4974 706e     ....ADCDirectInp
20002ae4:	7475 315f 0000 0000                         ut_1....

20002aec <g_config_reg_lut>:
20002aec:	3000 4001 3004 4001 3008 4001 300c 4001     .0.@.0.@.0.@.0.@
20002afc:	3010 4001 3014 4001 3018 4001 301c 4001     .0.@.0.@.0.@.0.@
20002b0c:	3020 4001 3024 4001 3028 4001 302c 4001      0.@$0.@(0.@,0.@
20002b1c:	3030 4001 3034 4001 3038 4001 303c 4001     00.@40.@80.@<0.@
20002b2c:	3040 4001 3044 4001 3048 4001 304c 4001     @0.@D0.@H0.@L0.@
20002b3c:	3050 4001 3054 4001 3058 4001 305c 4001     P0.@T0.@X0.@\0.@
20002b4c:	3060 4001 3064 4001 3068 4001 306c 4001     `0.@d0.@h0.@l0.@
20002b5c:	3070 4001 3074 4001 3078 4001 307c 4001     p0.@t0.@x0.@|0.@

20002b6c <g_gpio_irqn_lut>:
20002b6c:	0020 0021 0022 0023 0024 0025 0026 0027      .!.".#.$.%.&.'.
20002b7c:	0028 0029 002a 002b 002c 002d 002e 002f     (.).*.+.,.-.../.
20002b8c:	0030 0031 0032 0033 0034 0035 0036 0037     0.1.2.3.4.5.6.7.
20002b9c:	0038 0039 003a 003b 003c 003d 003e 003f     8.9.:.;.<.=.>.?.

20002bac <g_ace_channel_0_name>:
20002bac:	4441 4443 7269 6365 4974 706e 7475 305f     ADCDirectInput_0
20002bbc:	0000 0000                                   ....

20002bc0 <g_ace_channel_1_name>:
20002bc0:	4453 5f44 0030 0000                         SDD_0...

20002bc8 <g_ace_channel_2_name>:
20002bc8:	4441 4443 7269 6365 4974 706e 7475 315f     ADCDirectInput_1
20002bd8:	0000 0000                                   ....

20002bdc <g_ace_channel_3_name>:
20002bdc:	4453 5f44 0031 0000                         SDD_1...

20002be4 <channel_type_lut>:
20002be4:	0000 0100 0002 0100 0002 0000 ff00 00ff     ................
20002bf4:	0000 0100 0002 0100 0002 0000 ff00 00ff     ................
20002c04:	0000 0100 ff02 ffff 00ff 0000 ff00 00ff     ................

20002c14 <channel_quad_lut>:
20002c14:	00ff 0000 0100 0101 ff01 ffff ffff ffff     ................
20002c24:	02ff 0202 0302 0303 ff03 ffff ffff ffff     ................
20002c34:	04ff 0404 ff04 ffff ffff ffff ffff ffff     ................

20002c44 <_init>:
20002c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20002c46:	bf00      	nop
20002c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
20002c4a:	bc08      	pop	{r3}
20002c4c:	469e      	mov	lr, r3
20002c4e:	4770      	bx	lr

20002c50 <_fini>:
20002c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20002c52:	bf00      	nop
20002c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
20002c56:	bc08      	pop	{r3}
20002c58:	469e      	mov	lr, r3
20002c5a:	4770      	bx	lr

20002c5c <__frame_dummy_init_array_entry>:
20002c5c:	0485 2000                                   ... 

20002c60 <__do_global_dtors_aux_fini_array_entry>:
20002c60:	0471 2000                                   q.. 
