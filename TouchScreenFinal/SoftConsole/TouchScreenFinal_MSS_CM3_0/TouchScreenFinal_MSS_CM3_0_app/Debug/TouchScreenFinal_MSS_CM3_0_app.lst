
TouchScreenFinal_MSS_CM3_0_app:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000441c  20000000  20000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  2000441c  2000441c  0000c41c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000298  20004438  20004438  0000c438  2**2
                  ALLOC
  3 .stack        00003000  200046d0  200046d0  0000c438  2**0
                  ALLOC
  4 .comment      0000025a  00000000  00000000  0000c438  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000009a0  00000000  00000000  0000c692  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001a0c  00000000  00000000  0000d032  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000f981  00000000  00000000  0000ea3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001cdf  00000000  00000000  0001e3bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005310  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000019c8  00000000  00000000  000253b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004de4  00000000  00000000  00026d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003af4  00000000  00000000  0002bb5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 0005d06b  00000000  00000000  0002f650  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000025  00000000  00000000  0008c6bb  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 000009c8  00000000  00000000  0008c6e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

20000000 <__text_start>:
20000000:	20010000 	.word	0x20010000
20000004:	20000299 	.word	0x20000299
20000008:	20000309 	.word	0x20000309
2000000c:	2000030b 	.word	0x2000030b
20000010:	2000030d 	.word	0x2000030d
20000014:	2000030f 	.word	0x2000030f
20000018:	20000311 	.word	0x20000311
	...
2000002c:	20000313 	.word	0x20000313
20000030:	20000315 	.word	0x20000315
20000034:	00000000 	.word	0x00000000
20000038:	20000317 	.word	0x20000317
2000003c:	20000319 	.word	0x20000319
20000040:	2000031b 	.word	0x2000031b
20000044:	2000031d 	.word	0x2000031d
20000048:	2000031f 	.word	0x2000031f
2000004c:	20000321 	.word	0x20000321
20000050:	20000323 	.word	0x20000323
20000054:	20000325 	.word	0x20000325
20000058:	20000327 	.word	0x20000327
2000005c:	20000329 	.word	0x20000329
20000060:	2000032b 	.word	0x2000032b
20000064:	2000032d 	.word	0x2000032d
20000068:	20001dcd 	.word	0x20001dcd
2000006c:	20001dfd 	.word	0x20001dfd
20000070:	20002631 	.word	0x20002631
20000074:	20002661 	.word	0x20002661
20000078:	20002d59 	.word	0x20002d59
2000007c:	20000339 	.word	0x20000339
20000080:	2000033b 	.word	0x2000033b
20000084:	20002d89 	.word	0x20002d89
20000088:	2000033f 	.word	0x2000033f
2000008c:	20000341 	.word	0x20000341
20000090:	20000343 	.word	0x20000343
20000094:	20000345 	.word	0x20000345
20000098:	20000347 	.word	0x20000347
2000009c:	20000349 	.word	0x20000349
200000a0:	2000034b 	.word	0x2000034b
	...
200000bc:	2000034d 	.word	0x2000034d
200000c0:	2000034f 	.word	0x2000034f
200000c4:	20000351 	.word	0x20000351
200000c8:	20000353 	.word	0x20000353
200000cc:	20000355 	.word	0x20000355
200000d0:	20000357 	.word	0x20000357
200000d4:	20000359 	.word	0x20000359
200000d8:	2000035b 	.word	0x2000035b
200000dc:	2000035d 	.word	0x2000035d
200000e0:	2000035f 	.word	0x2000035f
200000e4:	20000361 	.word	0x20000361
200000e8:	20000363 	.word	0x20000363
200000ec:	20000365 	.word	0x20000365
200000f0:	20000367 	.word	0x20000367
200000f4:	20000369 	.word	0x20000369
200000f8:	2000036b 	.word	0x2000036b
200000fc:	2000036d 	.word	0x2000036d
20000100:	2000036f 	.word	0x2000036f
20000104:	20000371 	.word	0x20000371
20000108:	20000373 	.word	0x20000373
2000010c:	20000375 	.word	0x20000375
20000110:	20000377 	.word	0x20000377
20000114:	20000379 	.word	0x20000379
20000118:	2000037b 	.word	0x2000037b
2000011c:	2000037d 	.word	0x2000037d
20000120:	2000037f 	.word	0x2000037f
20000124:	20000381 	.word	0x20000381
20000128:	20000383 	.word	0x20000383
2000012c:	20000385 	.word	0x20000385
20000130:	20000387 	.word	0x20000387
20000134:	20000389 	.word	0x20000389
20000138:	2000038b 	.word	0x2000038b
2000013c:	2000038d 	.word	0x2000038d
20000140:	2000038f 	.word	0x2000038f
20000144:	20000391 	.word	0x20000391
20000148:	20000393 	.word	0x20000393
2000014c:	20000395 	.word	0x20000395
20000150:	20000397 	.word	0x20000397
20000154:	20000399 	.word	0x20000399
20000158:	2000039b 	.word	0x2000039b
2000015c:	2000039d 	.word	0x2000039d
20000160:	2000039f 	.word	0x2000039f
20000164:	200003a1 	.word	0x200003a1
20000168:	200003a3 	.word	0x200003a3
2000016c:	200003a5 	.word	0x200003a5
20000170:	200003a7 	.word	0x200003a7
20000174:	200003a9 	.word	0x200003a9
20000178:	200003ab 	.word	0x200003ab
2000017c:	200003ad 	.word	0x200003ad
20000180:	200003af 	.word	0x200003af
20000184:	200003b1 	.word	0x200003b1
20000188:	200003b3 	.word	0x200003b3
2000018c:	200003b5 	.word	0x200003b5
20000190:	200003b7 	.word	0x200003b7
20000194:	200003b9 	.word	0x200003b9
20000198:	200003bb 	.word	0x200003bb
2000019c:	200003bd 	.word	0x200003bd
200001a0:	200003bf 	.word	0x200003bf
200001a4:	200003c1 	.word	0x200003c1
200001a8:	200003c3 	.word	0x200003c3
200001ac:	200003c5 	.word	0x200003c5
200001b0:	200003c7 	.word	0x200003c7
200001b4:	200003c9 	.word	0x200003c9
200001b8:	200003cb 	.word	0x200003cb
200001bc:	200003cd 	.word	0x200003cd
200001c0:	200003cf 	.word	0x200003cf
200001c4:	200003d1 	.word	0x200003d1
200001c8:	200003d3 	.word	0x200003d3
200001cc:	200003d5 	.word	0x200003d5
200001d0:	200003d7 	.word	0x200003d7
200001d4:	200003d9 	.word	0x200003d9
200001d8:	200003db 	.word	0x200003db
200001dc:	200003dd 	.word	0x200003dd
200001e0:	200003df 	.word	0x200003df
200001e4:	200003e1 	.word	0x200003e1
200001e8:	200003e3 	.word	0x200003e3
200001ec:	200003e5 	.word	0x200003e5
200001f0:	200003e7 	.word	0x200003e7
200001f4:	200003e9 	.word	0x200003e9
200001f8:	200003eb 	.word	0x200003eb
200001fc:	200003ed 	.word	0x200003ed
20000200:	200003ef 	.word	0x200003ef
20000204:	200003f1 	.word	0x200003f1
20000208:	200003f3 	.word	0x200003f3
2000020c:	200003f5 	.word	0x200003f5
20000210:	200003f7 	.word	0x200003f7
20000214:	200003f9 	.word	0x200003f9
20000218:	20003285 	.word	0x20003285
2000021c:	200032a5 	.word	0x200032a5
20000220:	200032c5 	.word	0x200032c5
20000224:	200032e5 	.word	0x200032e5
20000228:	20003305 	.word	0x20003305
2000022c:	20003325 	.word	0x20003325
20000230:	20003345 	.word	0x20003345
20000234:	20003365 	.word	0x20003365
20000238:	20003385 	.word	0x20003385
2000023c:	200033a5 	.word	0x200033a5
20000240:	200033c5 	.word	0x200033c5
20000244:	200033e5 	.word	0x200033e5
20000248:	20003405 	.word	0x20003405
2000024c:	20003425 	.word	0x20003425
20000250:	20003445 	.word	0x20003445
20000254:	20003465 	.word	0x20003465
20000258:	20003485 	.word	0x20003485
2000025c:	200034a5 	.word	0x200034a5
20000260:	200034c5 	.word	0x200034c5
20000264:	200034e5 	.word	0x200034e5
20000268:	20003505 	.word	0x20003505
2000026c:	20003525 	.word	0x20003525
20000270:	20003545 	.word	0x20003545
20000274:	20003565 	.word	0x20003565
20000278:	20003585 	.word	0x20003585
2000027c:	200035a5 	.word	0x200035a5
20000280:	200035c5 	.word	0x200035c5
20000284:	200035e5 	.word	0x200035e5
20000288:	20003605 	.word	0x20003605
2000028c:	20003625 	.word	0x20003625
20000290:	20003645 	.word	0x20003645
20000294:	20003665 	.word	0x20003665

20000298 <Reset_Handler>:
20000298:	4868      	ldr	r0, [pc, #416]	; (2000043c <ACE_ADC2_FifoEmpty_IRQHandler+0x44>)
2000029a:	4780      	blx	r0
2000029c:	4868      	ldr	r0, [pc, #416]	; (20000440 <ACE_ADC2_FifoEmpty_IRQHandler+0x48>)
2000029e:	2800      	cmp	r0, #0
200002a0:	d10b      	bne.n	200002ba <copy_data>
200002a2:	4868      	ldr	r0, [pc, #416]	; (20000444 <ACE_ADC2_FifoEmpty_IRQHandler+0x4c>)
200002a4:	4968      	ldr	r1, [pc, #416]	; (20000448 <ACE_ADC2_FifoEmpty_IRQHandler+0x50>)
200002a6:	4a69      	ldr	r2, [pc, #420]	; (2000044c <ACE_ADC2_FifoEmpty_IRQHandler+0x54>)
200002a8:	4288      	cmp	r0, r1
200002aa:	d006      	beq.n	200002ba <copy_data>

200002ac <copy_code_loop>:
200002ac:	4291      	cmp	r1, r2
200002ae:	bf1c      	itt	ne
200002b0:	f850 3b04 	ldrne.w	r3, [r0], #4
200002b4:	f841 3b04 	strne.w	r3, [r1], #4
200002b8:	d1f8      	bne.n	200002ac <copy_code_loop>

200002ba <copy_data>:
200002ba:	4865      	ldr	r0, [pc, #404]	; (20000450 <ACE_ADC2_FifoEmpty_IRQHandler+0x58>)
200002bc:	4965      	ldr	r1, [pc, #404]	; (20000454 <ACE_ADC2_FifoEmpty_IRQHandler+0x5c>)
200002be:	4a66      	ldr	r2, [pc, #408]	; (20000458 <ACE_ADC2_FifoEmpty_IRQHandler+0x60>)
200002c0:	4288      	cmp	r0, r1
200002c2:	d006      	beq.n	200002d2 <clear_bss>

200002c4 <copy_data_loop>:
200002c4:	4291      	cmp	r1, r2
200002c6:	bf1c      	itt	ne
200002c8:	f850 3b04 	ldrne.w	r3, [r0], #4
200002cc:	f841 3b04 	strne.w	r3, [r1], #4
200002d0:	d1f8      	bne.n	200002c4 <copy_data_loop>

200002d2 <clear_bss>:
200002d2:	4862      	ldr	r0, [pc, #392]	; (2000045c <ACE_ADC2_FifoEmpty_IRQHandler+0x64>)
200002d4:	4962      	ldr	r1, [pc, #392]	; (20000460 <ACE_ADC2_FifoEmpty_IRQHandler+0x68>)
200002d6:	4a63      	ldr	r2, [pc, #396]	; (20000464 <ACE_ADC2_FifoEmpty_IRQHandler+0x6c>)

200002d8 <clear_bss_loop>:
200002d8:	4291      	cmp	r1, r2
200002da:	bf18      	it	ne
200002dc:	f841 0b04 	strne.w	r0, [r1], #4
200002e0:	d1fa      	bne.n	200002d8 <clear_bss_loop>
	...

200002f0 <call_glob_ctor>:
200002f0:	f8df 0174 	ldr.w	r0, [pc, #372]	; 20000468 <ACE_ADC2_FifoEmpty_IRQHandler+0x70>
200002f4:	f20f 0e03 	addw	lr, pc, #3
200002f8:	4700      	bx	r0

200002fa <branch_to_main>:
200002fa:	f04f 0000 	mov.w	r0, #0
200002fe:	f04f 0100 	mov.w	r1, #0
20000302:	f8df f168 	ldr.w	pc, [pc, #360]	; 2000046c <ACE_ADC2_FifoEmpty_IRQHandler+0x74>

20000306 <ExitLoop>:
20000306:	e7fe      	b.n	20000306 <ExitLoop>

20000308 <NMI_Handler>:
20000308:	e7fe      	b.n	20000308 <NMI_Handler>

2000030a <HardFault_Handler>:
2000030a:	e7fe      	b.n	2000030a <HardFault_Handler>

2000030c <MemManage_Handler>:
2000030c:	e7fe      	b.n	2000030c <MemManage_Handler>

2000030e <BusFault_Handler>:
2000030e:	e7fe      	b.n	2000030e <BusFault_Handler>

20000310 <UsageFault_Handler>:
20000310:	e7fe      	b.n	20000310 <UsageFault_Handler>

20000312 <SVC_Handler>:
20000312:	e7fe      	b.n	20000312 <SVC_Handler>

20000314 <DebugMon_Handler>:
20000314:	e7fe      	b.n	20000314 <DebugMon_Handler>

20000316 <PendSV_Handler>:
20000316:	e7fe      	b.n	20000316 <PendSV_Handler>

20000318 <SysTick_Handler>:
20000318:	e7fe      	b.n	20000318 <SysTick_Handler>

2000031a <WdogWakeup_IRQHandler>:
2000031a:	e7fe      	b.n	2000031a <WdogWakeup_IRQHandler>

2000031c <BrownOut_1_5V_IRQHandler>:
2000031c:	e7fe      	b.n	2000031c <BrownOut_1_5V_IRQHandler>

2000031e <BrownOut_3_3V_IRQHandler>:
2000031e:	e7fe      	b.n	2000031e <BrownOut_3_3V_IRQHandler>

20000320 <RTC_Match_IRQHandler>:
20000320:	e7fe      	b.n	20000320 <RTC_Match_IRQHandler>

20000322 <RTCIF_Pub_IRQHandler>:
20000322:	e7fe      	b.n	20000322 <RTCIF_Pub_IRQHandler>

20000324 <EthernetMAC_IRQHandler>:
20000324:	e7fe      	b.n	20000324 <EthernetMAC_IRQHandler>

20000326 <IAP_IRQHandler>:
20000326:	e7fe      	b.n	20000326 <IAP_IRQHandler>

20000328 <ENVM0_IRQHandler>:
20000328:	e7fe      	b.n	20000328 <ENVM0_IRQHandler>

2000032a <ENVM1_IRQHandler>:
2000032a:	e7fe      	b.n	2000032a <ENVM1_IRQHandler>

2000032c <DMA_IRQHandler>:
2000032c:	e7fe      	b.n	2000032c <DMA_IRQHandler>
2000032e:	e7fe      	b.n	2000032e <DMA_IRQHandler+0x2>
20000330:	e7fe      	b.n	20000330 <DMA_IRQHandler+0x4>
20000332:	e7fe      	b.n	20000332 <DMA_IRQHandler+0x6>
20000334:	e7fe      	b.n	20000334 <DMA_IRQHandler+0x8>
20000336:	e7fe      	b.n	20000336 <DMA_IRQHandler+0xa>

20000338 <I2C0_SMBAlert_IRQHandler>:
20000338:	e7fe      	b.n	20000338 <I2C0_SMBAlert_IRQHandler>

2000033a <I2C0_SMBus_IRQHandler>:
2000033a:	e7fe      	b.n	2000033a <I2C0_SMBus_IRQHandler>
2000033c:	e7fe      	b.n	2000033c <I2C0_SMBus_IRQHandler+0x2>

2000033e <I2C1_SMBAlert_IRQHandler>:
2000033e:	e7fe      	b.n	2000033e <I2C1_SMBAlert_IRQHandler>

20000340 <I2C1_SMBus_IRQHandler>:
20000340:	e7fe      	b.n	20000340 <I2C1_SMBus_IRQHandler>

20000342 <Timer1_IRQHandler>:
20000342:	e7fe      	b.n	20000342 <Timer1_IRQHandler>

20000344 <Timer2_IRQHandler>:
20000344:	e7fe      	b.n	20000344 <Timer2_IRQHandler>

20000346 <PLL_Lock_IRQHandler>:
20000346:	e7fe      	b.n	20000346 <PLL_Lock_IRQHandler>

20000348 <PLL_LockLost_IRQHandler>:
20000348:	e7fe      	b.n	20000348 <PLL_LockLost_IRQHandler>

2000034a <CommError_IRQHandler>:
2000034a:	e7fe      	b.n	2000034a <CommError_IRQHandler>

2000034c <Fabric_IRQHandler>:
2000034c:	e7fe      	b.n	2000034c <Fabric_IRQHandler>

2000034e <GPIO0_IRQHandler>:
2000034e:	e7fe      	b.n	2000034e <GPIO0_IRQHandler>

20000350 <GPIO1_IRQHandler>:
20000350:	e7fe      	b.n	20000350 <GPIO1_IRQHandler>

20000352 <GPIO2_IRQHandler>:
20000352:	e7fe      	b.n	20000352 <GPIO2_IRQHandler>

20000354 <GPIO3_IRQHandler>:
20000354:	e7fe      	b.n	20000354 <GPIO3_IRQHandler>

20000356 <GPIO4_IRQHandler>:
20000356:	e7fe      	b.n	20000356 <GPIO4_IRQHandler>

20000358 <GPIO5_IRQHandler>:
20000358:	e7fe      	b.n	20000358 <GPIO5_IRQHandler>

2000035a <GPIO6_IRQHandler>:
2000035a:	e7fe      	b.n	2000035a <GPIO6_IRQHandler>

2000035c <GPIO7_IRQHandler>:
2000035c:	e7fe      	b.n	2000035c <GPIO7_IRQHandler>

2000035e <GPIO8_IRQHandler>:
2000035e:	e7fe      	b.n	2000035e <GPIO8_IRQHandler>

20000360 <GPIO9_IRQHandler>:
20000360:	e7fe      	b.n	20000360 <GPIO9_IRQHandler>

20000362 <GPIO10_IRQHandler>:
20000362:	e7fe      	b.n	20000362 <GPIO10_IRQHandler>

20000364 <GPIO11_IRQHandler>:
20000364:	e7fe      	b.n	20000364 <GPIO11_IRQHandler>

20000366 <GPIO12_IRQHandler>:
20000366:	e7fe      	b.n	20000366 <GPIO12_IRQHandler>

20000368 <GPIO13_IRQHandler>:
20000368:	e7fe      	b.n	20000368 <GPIO13_IRQHandler>

2000036a <GPIO14_IRQHandler>:
2000036a:	e7fe      	b.n	2000036a <GPIO14_IRQHandler>

2000036c <GPIO15_IRQHandler>:
2000036c:	e7fe      	b.n	2000036c <GPIO15_IRQHandler>

2000036e <GPIO16_IRQHandler>:
2000036e:	e7fe      	b.n	2000036e <GPIO16_IRQHandler>

20000370 <GPIO17_IRQHandler>:
20000370:	e7fe      	b.n	20000370 <GPIO17_IRQHandler>

20000372 <GPIO18_IRQHandler>:
20000372:	e7fe      	b.n	20000372 <GPIO18_IRQHandler>

20000374 <GPIO19_IRQHandler>:
20000374:	e7fe      	b.n	20000374 <GPIO19_IRQHandler>

20000376 <GPIO20_IRQHandler>:
20000376:	e7fe      	b.n	20000376 <GPIO20_IRQHandler>

20000378 <GPIO21_IRQHandler>:
20000378:	e7fe      	b.n	20000378 <GPIO21_IRQHandler>

2000037a <GPIO22_IRQHandler>:
2000037a:	e7fe      	b.n	2000037a <GPIO22_IRQHandler>

2000037c <GPIO23_IRQHandler>:
2000037c:	e7fe      	b.n	2000037c <GPIO23_IRQHandler>

2000037e <GPIO24_IRQHandler>:
2000037e:	e7fe      	b.n	2000037e <GPIO24_IRQHandler>

20000380 <GPIO25_IRQHandler>:
20000380:	e7fe      	b.n	20000380 <GPIO25_IRQHandler>

20000382 <GPIO26_IRQHandler>:
20000382:	e7fe      	b.n	20000382 <GPIO26_IRQHandler>

20000384 <GPIO27_IRQHandler>:
20000384:	e7fe      	b.n	20000384 <GPIO27_IRQHandler>

20000386 <GPIO28_IRQHandler>:
20000386:	e7fe      	b.n	20000386 <GPIO28_IRQHandler>

20000388 <GPIO29_IRQHandler>:
20000388:	e7fe      	b.n	20000388 <GPIO29_IRQHandler>

2000038a <GPIO30_IRQHandler>:
2000038a:	e7fe      	b.n	2000038a <GPIO30_IRQHandler>

2000038c <GPIO31_IRQHandler>:
2000038c:	e7fe      	b.n	2000038c <GPIO31_IRQHandler>

2000038e <ACE_PC0_Flag0_IRQHandler>:
2000038e:	e7fe      	b.n	2000038e <ACE_PC0_Flag0_IRQHandler>

20000390 <ACE_PC0_Flag1_IRQHandler>:
20000390:	e7fe      	b.n	20000390 <ACE_PC0_Flag1_IRQHandler>

20000392 <ACE_PC0_Flag2_IRQHandler>:
20000392:	e7fe      	b.n	20000392 <ACE_PC0_Flag2_IRQHandler>

20000394 <ACE_PC0_Flag3_IRQHandler>:
20000394:	e7fe      	b.n	20000394 <ACE_PC0_Flag3_IRQHandler>

20000396 <ACE_PC1_Flag0_IRQHandler>:
20000396:	e7fe      	b.n	20000396 <ACE_PC1_Flag0_IRQHandler>

20000398 <ACE_PC1_Flag1_IRQHandler>:
20000398:	e7fe      	b.n	20000398 <ACE_PC1_Flag1_IRQHandler>

2000039a <ACE_PC1_Flag2_IRQHandler>:
2000039a:	e7fe      	b.n	2000039a <ACE_PC1_Flag2_IRQHandler>

2000039c <ACE_PC1_Flag3_IRQHandler>:
2000039c:	e7fe      	b.n	2000039c <ACE_PC1_Flag3_IRQHandler>

2000039e <ACE_PC2_Flag0_IRQHandler>:
2000039e:	e7fe      	b.n	2000039e <ACE_PC2_Flag0_IRQHandler>

200003a0 <ACE_PC2_Flag1_IRQHandler>:
200003a0:	e7fe      	b.n	200003a0 <ACE_PC2_Flag1_IRQHandler>

200003a2 <ACE_PC2_Flag2_IRQHandler>:
200003a2:	e7fe      	b.n	200003a2 <ACE_PC2_Flag2_IRQHandler>

200003a4 <ACE_PC2_Flag3_IRQHandler>:
200003a4:	e7fe      	b.n	200003a4 <ACE_PC2_Flag3_IRQHandler>

200003a6 <ACE_ADC0_DataValid_IRQHandler>:
200003a6:	e7fe      	b.n	200003a6 <ACE_ADC0_DataValid_IRQHandler>

200003a8 <ACE_ADC1_DataValid_IRQHandler>:
200003a8:	e7fe      	b.n	200003a8 <ACE_ADC1_DataValid_IRQHandler>

200003aa <ACE_ADC2_DataValid_IRQHandler>:
200003aa:	e7fe      	b.n	200003aa <ACE_ADC2_DataValid_IRQHandler>

200003ac <ACE_ADC0_CalDone_IRQHandler>:
200003ac:	e7fe      	b.n	200003ac <ACE_ADC0_CalDone_IRQHandler>

200003ae <ACE_ADC1_CalDone_IRQHandler>:
200003ae:	e7fe      	b.n	200003ae <ACE_ADC1_CalDone_IRQHandler>

200003b0 <ACE_ADC2_CalDone_IRQHandler>:
200003b0:	e7fe      	b.n	200003b0 <ACE_ADC2_CalDone_IRQHandler>

200003b2 <ACE_ADC0_CalStart_IRQHandler>:
200003b2:	e7fe      	b.n	200003b2 <ACE_ADC0_CalStart_IRQHandler>

200003b4 <ACE_ADC1_CalStart_IRQHandler>:
200003b4:	e7fe      	b.n	200003b4 <ACE_ADC1_CalStart_IRQHandler>

200003b6 <ACE_ADC2_CalStart_IRQHandler>:
200003b6:	e7fe      	b.n	200003b6 <ACE_ADC2_CalStart_IRQHandler>

200003b8 <ACE_Comp0_Fall_IRQHandler>:
200003b8:	e7fe      	b.n	200003b8 <ACE_Comp0_Fall_IRQHandler>

200003ba <ACE_Comp1_Fall_IRQHandler>:
200003ba:	e7fe      	b.n	200003ba <ACE_Comp1_Fall_IRQHandler>

200003bc <ACE_Comp2_Fall_IRQHandler>:
200003bc:	e7fe      	b.n	200003bc <ACE_Comp2_Fall_IRQHandler>

200003be <ACE_Comp3_Fall_IRQHandler>:
200003be:	e7fe      	b.n	200003be <ACE_Comp3_Fall_IRQHandler>

200003c0 <ACE_Comp4_Fall_IRQHandler>:
200003c0:	e7fe      	b.n	200003c0 <ACE_Comp4_Fall_IRQHandler>

200003c2 <ACE_Comp5_Fall_IRQHandler>:
200003c2:	e7fe      	b.n	200003c2 <ACE_Comp5_Fall_IRQHandler>

200003c4 <ACE_Comp6_Fall_IRQHandler>:
200003c4:	e7fe      	b.n	200003c4 <ACE_Comp6_Fall_IRQHandler>

200003c6 <ACE_Comp7_Fall_IRQHandler>:
200003c6:	e7fe      	b.n	200003c6 <ACE_Comp7_Fall_IRQHandler>

200003c8 <ACE_Comp8_Fall_IRQHandler>:
200003c8:	e7fe      	b.n	200003c8 <ACE_Comp8_Fall_IRQHandler>

200003ca <ACE_Comp9_Fall_IRQHandler>:
200003ca:	e7fe      	b.n	200003ca <ACE_Comp9_Fall_IRQHandler>

200003cc <ACE_Comp10_Fall_IRQHandler>:
200003cc:	e7fe      	b.n	200003cc <ACE_Comp10_Fall_IRQHandler>

200003ce <ACE_Comp11_Fall_IRQHandler>:
200003ce:	e7fe      	b.n	200003ce <ACE_Comp11_Fall_IRQHandler>

200003d0 <ACE_Comp0_Rise_IRQHandler>:
200003d0:	e7fe      	b.n	200003d0 <ACE_Comp0_Rise_IRQHandler>

200003d2 <ACE_Comp1_Rise_IRQHandler>:
200003d2:	e7fe      	b.n	200003d2 <ACE_Comp1_Rise_IRQHandler>

200003d4 <ACE_Comp2_Rise_IRQHandler>:
200003d4:	e7fe      	b.n	200003d4 <ACE_Comp2_Rise_IRQHandler>

200003d6 <ACE_Comp3_Rise_IRQHandler>:
200003d6:	e7fe      	b.n	200003d6 <ACE_Comp3_Rise_IRQHandler>

200003d8 <ACE_Comp4_Rise_IRQHandler>:
200003d8:	e7fe      	b.n	200003d8 <ACE_Comp4_Rise_IRQHandler>

200003da <ACE_Comp5_Rise_IRQHandler>:
200003da:	e7fe      	b.n	200003da <ACE_Comp5_Rise_IRQHandler>

200003dc <ACE_Comp6_Rise_IRQHandler>:
200003dc:	e7fe      	b.n	200003dc <ACE_Comp6_Rise_IRQHandler>

200003de <ACE_Comp7_Rise_IRQHandler>:
200003de:	e7fe      	b.n	200003de <ACE_Comp7_Rise_IRQHandler>

200003e0 <ACE_Comp8_Rise_IRQHandler>:
200003e0:	e7fe      	b.n	200003e0 <ACE_Comp8_Rise_IRQHandler>

200003e2 <ACE_Comp9_Rise_IRQHandler>:
200003e2:	e7fe      	b.n	200003e2 <ACE_Comp9_Rise_IRQHandler>

200003e4 <ACE_Comp10_Rise_IRQHandler>:
200003e4:	e7fe      	b.n	200003e4 <ACE_Comp10_Rise_IRQHandler>

200003e6 <ACE_Comp11_Rise_IRQHandler>:
200003e6:	e7fe      	b.n	200003e6 <ACE_Comp11_Rise_IRQHandler>

200003e8 <ACE_ADC0_FifoFull_IRQHandler>:
200003e8:	e7fe      	b.n	200003e8 <ACE_ADC0_FifoFull_IRQHandler>

200003ea <ACE_ADC0_FifoAFull_IRQHandler>:
200003ea:	e7fe      	b.n	200003ea <ACE_ADC0_FifoAFull_IRQHandler>

200003ec <ACE_ADC0_FifoEmpty_IRQHandler>:
200003ec:	e7fe      	b.n	200003ec <ACE_ADC0_FifoEmpty_IRQHandler>

200003ee <ACE_ADC1_FifoFull_IRQHandler>:
200003ee:	e7fe      	b.n	200003ee <ACE_ADC1_FifoFull_IRQHandler>

200003f0 <ACE_ADC1_FifoAFull_IRQHandler>:
200003f0:	e7fe      	b.n	200003f0 <ACE_ADC1_FifoAFull_IRQHandler>

200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>:
200003f2:	e7fe      	b.n	200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>

200003f4 <ACE_ADC2_FifoFull_IRQHandler>:
200003f4:	e7fe      	b.n	200003f4 <ACE_ADC2_FifoFull_IRQHandler>

200003f6 <ACE_ADC2_FifoAFull_IRQHandler>:
200003f6:	e7fe      	b.n	200003f6 <ACE_ADC2_FifoAFull_IRQHandler>

200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>:
200003f8:	e7fe      	b.n	200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>
200003fa:	e7fe      	b.n	200003fa <ACE_ADC2_FifoEmpty_IRQHandler+0x2>
200003fc:	e7fe      	b.n	200003fc <ACE_ADC2_FifoEmpty_IRQHandler+0x4>
200003fe:	e7fe      	b.n	200003fe <ACE_ADC2_FifoEmpty_IRQHandler+0x6>
20000400:	e7fe      	b.n	20000400 <ACE_ADC2_FifoEmpty_IRQHandler+0x8>
20000402:	e7fe      	b.n	20000402 <ACE_ADC2_FifoEmpty_IRQHandler+0xa>
20000404:	e7fe      	b.n	20000404 <ACE_ADC2_FifoEmpty_IRQHandler+0xc>
20000406:	e7fe      	b.n	20000406 <ACE_ADC2_FifoEmpty_IRQHandler+0xe>
20000408:	e7fe      	b.n	20000408 <ACE_ADC2_FifoEmpty_IRQHandler+0x10>
2000040a:	e7fe      	b.n	2000040a <ACE_ADC2_FifoEmpty_IRQHandler+0x12>
2000040c:	e7fe      	b.n	2000040c <ACE_ADC2_FifoEmpty_IRQHandler+0x14>
2000040e:	e7fe      	b.n	2000040e <ACE_ADC2_FifoEmpty_IRQHandler+0x16>
20000410:	e7fe      	b.n	20000410 <ACE_ADC2_FifoEmpty_IRQHandler+0x18>
20000412:	e7fe      	b.n	20000412 <ACE_ADC2_FifoEmpty_IRQHandler+0x1a>
20000414:	e7fe      	b.n	20000414 <ACE_ADC2_FifoEmpty_IRQHandler+0x1c>
20000416:	e7fe      	b.n	20000416 <ACE_ADC2_FifoEmpty_IRQHandler+0x1e>
20000418:	e7fe      	b.n	20000418 <ACE_ADC2_FifoEmpty_IRQHandler+0x20>
2000041a:	e7fe      	b.n	2000041a <ACE_ADC2_FifoEmpty_IRQHandler+0x22>
2000041c:	e7fe      	b.n	2000041c <ACE_ADC2_FifoEmpty_IRQHandler+0x24>
2000041e:	e7fe      	b.n	2000041e <ACE_ADC2_FifoEmpty_IRQHandler+0x26>
20000420:	e7fe      	b.n	20000420 <ACE_ADC2_FifoEmpty_IRQHandler+0x28>
20000422:	e7fe      	b.n	20000422 <ACE_ADC2_FifoEmpty_IRQHandler+0x2a>
20000424:	e7fe      	b.n	20000424 <ACE_ADC2_FifoEmpty_IRQHandler+0x2c>
20000426:	e7fe      	b.n	20000426 <ACE_ADC2_FifoEmpty_IRQHandler+0x2e>
20000428:	e7fe      	b.n	20000428 <ACE_ADC2_FifoEmpty_IRQHandler+0x30>
2000042a:	e7fe      	b.n	2000042a <ACE_ADC2_FifoEmpty_IRQHandler+0x32>
2000042c:	e7fe      	b.n	2000042c <ACE_ADC2_FifoEmpty_IRQHandler+0x34>
2000042e:	e7fe      	b.n	2000042e <ACE_ADC2_FifoEmpty_IRQHandler+0x36>
20000430:	e7fe      	b.n	20000430 <ACE_ADC2_FifoEmpty_IRQHandler+0x38>
20000432:	e7fe      	b.n	20000432 <ACE_ADC2_FifoEmpty_IRQHandler+0x3a>
20000434:	e7fe      	b.n	20000434 <ACE_ADC2_FifoEmpty_IRQHandler+0x3c>
20000436:	e7fe      	b.n	20000436 <ACE_ADC2_FifoEmpty_IRQHandler+0x3e>
20000438:	e7fe      	b.n	20000438 <ACE_ADC2_FifoEmpty_IRQHandler+0x40>
2000043a:	0000      	.short	0x0000
2000043c:	20003151 	.word	0x20003151
20000440:	00000000 	.word	0x00000000
20000444:	20000000 	.word	0x20000000
20000448:	20000000 	.word	0x20000000
2000044c:	2000441c 	.word	0x2000441c
20000450:	2000441c 	.word	0x2000441c
20000454:	2000441c 	.word	0x2000441c
20000458:	20004438 	.word	0x20004438
2000045c:	00000000 	.word	0x00000000
20000460:	20004438 	.word	0x20004438
20000464:	200046d0 	.word	0x200046d0
20000468:	20004199 	.word	0x20004199
2000046c:	200004a1 	.word	0x200004a1

20000470 <__do_global_dtors_aux>:
20000470:	f244 4338 	movw	r3, #17464	; 0x4438
20000474:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000478:	781a      	ldrb	r2, [r3, #0]
2000047a:	b90a      	cbnz	r2, 20000480 <__do_global_dtors_aux+0x10>
2000047c:	2001      	movs	r0, #1
2000047e:	7018      	strb	r0, [r3, #0]
20000480:	4770      	bx	lr
20000482:	bf00      	nop

20000484 <frame_dummy>:
20000484:	f244 401c 	movw	r0, #17436	; 0x441c
20000488:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000048c:	b508      	push	{r3, lr}
2000048e:	6803      	ldr	r3, [r0, #0]
20000490:	b12b      	cbz	r3, 2000049e <frame_dummy+0x1a>
20000492:	f240 0300 	movw	r3, #0
20000496:	f2c0 0300 	movt	r3, #0
2000049a:	b103      	cbz	r3, 2000049e <frame_dummy+0x1a>
2000049c:	4798      	blx	r3
2000049e:	bd08      	pop	{r3, pc}

200004a0 <main>:
uint8_t message[5] = "hello";
uint16_t x, y;
uint8_t z;

int main()
{
200004a0:	b590      	push	{r4, r7, lr}
200004a2:	b093      	sub	sp, #76	; 0x4c
200004a4:	af02      	add	r7, sp, #8
	int menu = -1, t= 0;
200004a6:	f04f 33ff 	mov.w	r3, #4294967295
200004aa:	60fb      	str	r3, [r7, #12]
200004ac:	f04f 0300 	mov.w	r3, #0
200004b0:	613b      	str	r3, [r7, #16]
	int count = 0;
200004b2:	f04f 0300 	mov.w	r3, #0
200004b6:	617b      	str	r3, [r7, #20]
	int maxX = 0, maxY =0, minX = 5000, minY = 5000;
200004b8:	f04f 0300 	mov.w	r3, #0
200004bc:	61bb      	str	r3, [r7, #24]
200004be:	f04f 0300 	mov.w	r3, #0
200004c2:	61fb      	str	r3, [r7, #28]
200004c4:	f241 3388 	movw	r3, #5000	; 0x1388
200004c8:	623b      	str	r3, [r7, #32]
200004ca:	f241 3388 	movw	r3, #5000	; 0x1388
200004ce:	627b      	str	r3, [r7, #36]	; 0x24
	MSS_UART_init(&g_mss_uart1, MSS_UART_57600_BAUD, MSS_UART_DATA_8_BITS | MSS_UART_NO_PARITY | MSS_UART_ONE_STOP_BIT);
200004d0:	f244 408c 	movw	r0, #17548	; 0x448c
200004d4:	f2c2 0000 	movt	r0, #8192	; 0x2000
200004d8:	f44f 4161 	mov.w	r1, #57600	; 0xe100
200004dc:	f04f 0203 	mov.w	r2, #3
200004e0:	f001 fca4 	bl	20001e2c <MSS_UART_init>
	MSS_UART_set_rx_handler( &g_mss_uart1, uart1_rx_handler, MSS_UART_FIFO_SINGLE_BYTE);
200004e4:	f244 408c 	movw	r0, #17548	; 0x448c
200004e8:	f2c2 0000 	movt	r0, #8192	; 0x2000
200004ec:	f641 21a5 	movw	r1, #6821	; 0x1aa5
200004f0:	f2c2 0100 	movt	r1, #8192	; 0x2000
200004f4:	f04f 0200 	mov.w	r2, #0
200004f8:	f001 fc16 	bl	20001d28 <MSS_UART_set_rx_handler>
	touchscreen_begin();
200004fc:	f000 fd66 	bl	20000fcc <touchscreen_begin>

	drawFillScreen(ILI9341_BLUE);
20000500:	f04f 001f 	mov.w	r0, #31
20000504:	f000 ff2a 	bl	2000135c <drawFillScreen>
	drawRectangle(5, 5, 110, 152, ILI9341_YELLOW);
20000508:	f64f 73e0 	movw	r3, #65504	; 0xffe0
2000050c:	9300      	str	r3, [sp, #0]
2000050e:	f04f 0005 	mov.w	r0, #5
20000512:	f04f 0105 	mov.w	r1, #5
20000516:	f04f 026e 	mov.w	r2, #110	; 0x6e
2000051a:	f04f 0398 	mov.w	r3, #152	; 0x98
2000051e:	f000 feaf 	bl	20001280 <drawRectangle>
	drawRectangle(5, 165, 110, 152, ILI9341_YELLOW);
20000522:	f64f 73e0 	movw	r3, #65504	; 0xffe0
20000526:	9300      	str	r3, [sp, #0]
20000528:	f04f 0005 	mov.w	r0, #5
2000052c:	f04f 01a5 	mov.w	r1, #165	; 0xa5
20000530:	f04f 026e 	mov.w	r2, #110	; 0x6e
20000534:	f04f 0398 	mov.w	r3, #152	; 0x98
20000538:	f000 fea2 	bl	20001280 <drawRectangle>
	drawRectangle(120, 5, 115, 312, ILI9341_YELLOW);
2000053c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
20000540:	9300      	str	r3, [sp, #0]
20000542:	f04f 0078 	mov.w	r0, #120	; 0x78
20000546:	f04f 0105 	mov.w	r1, #5
2000054a:	f04f 0273 	mov.w	r2, #115	; 0x73
2000054e:	f44f 739c 	mov.w	r3, #312	; 0x138
20000552:	f000 fe95 	bl	20001280 <drawRectangle>

	drawText1(ILI9341_BLACK);
20000556:	f04f 0000 	mov.w	r0, #0
2000055a:	f000 ff39 	bl	200013d0 <drawText1>
	drawText2(ILI9341_BLACK);
2000055e:	f04f 0000 	mov.w	r0, #0
20000562:	f000 ff57 	bl	20001414 <drawText2>
	drawText3(ILI9341_BLACK);
20000566:	f04f 0000 	mov.w	r0, #0
2000056a:	f000 ff81 	bl	20001470 <drawText3>

	while(1){

		while(menu == -1){
2000056e:	e0d6      	b.n	2000071e <main+0x27e>
				while (touched()) {
					// read x & y & z;
					if (! bufferEmpty()) {
20000570:	f001 f9ae 	bl	200018d0 <bufferEmpty>
20000574:	4603      	mov	r3, r0
20000576:	2b00      	cmp	r3, #0
20000578:	f040 80cb 	bne.w	20000712 <main+0x272>

					  readTouch(&x, &y, &z);
2000057c:	f244 403c 	movw	r0, #17468	; 0x443c
20000580:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000584:	f244 4146 	movw	r1, #17478	; 0x4446
20000588:	f2c2 0100 	movt	r1, #8192	; 0x2000
2000058c:	f244 4244 	movw	r2, #17476	; 0x4444
20000590:	f2c2 0200 	movt	r2, #8192	; 0x2000
20000594:	f000 fdf2 	bl	2000117c <readTouch>
					 //printf("x: %d   y: %d \n\r", x, y);
					  x -= 200;
20000598:	f244 433c 	movw	r3, #17468	; 0x443c
2000059c:	f2c2 0300 	movt	r3, #8192	; 0x2000
200005a0:	881b      	ldrh	r3, [r3, #0]
200005a2:	f1a3 03c8 	sub.w	r3, r3, #200	; 0xc8
200005a6:	b29a      	uxth	r2, r3
200005a8:	f244 433c 	movw	r3, #17468	; 0x443c
200005ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
200005b0:	801a      	strh	r2, [r3, #0]
					  y -= 320;
200005b2:	f244 4346 	movw	r3, #17478	; 0x4446
200005b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200005ba:	881b      	ldrh	r3, [r3, #0]
200005bc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
200005c0:	b29a      	uxth	r2, r3
200005c2:	f244 4346 	movw	r3, #17478	; 0x4446
200005c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200005ca:	801a      	strh	r2, [r3, #0]

					  float temp = x/3730.0;
200005cc:	f244 433c 	movw	r3, #17468	; 0x443c
200005d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200005d4:	881b      	ldrh	r3, [r3, #0]
200005d6:	4618      	mov	r0, r3
200005d8:	f003 f9a6 	bl	20003928 <__aeabi_i2d>
200005dc:	4602      	mov	r2, r0
200005de:	460b      	mov	r3, r1
200005e0:	4610      	mov	r0, r2
200005e2:	4619      	mov	r1, r3
200005e4:	f60f 0360 	addw	r3, pc, #2144	; 0x860
200005e8:	e9d3 2300 	ldrd	r2, r3, [r3]
200005ec:	f003 fb2c 	bl	20003c48 <__aeabi_ddiv>
200005f0:	4602      	mov	r2, r0
200005f2:	460b      	mov	r3, r1
200005f4:	4610      	mov	r0, r2
200005f6:	4619      	mov	r1, r3
200005f8:	f003 fc0e 	bl	20003e18 <__aeabi_d2f>
200005fc:	4603      	mov	r3, r0
200005fe:	62bb      	str	r3, [r7, #40]	; 0x28
					  temp *= 240;
20000600:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20000602:	f8df 1854 	ldr.w	r1, [pc, #2132]	; 20000e58 <main+0x9b8>
20000606:	f003 fc57 	bl	20003eb8 <__aeabi_fmul>
2000060a:	4603      	mov	r3, r0
2000060c:	62bb      	str	r3, [r7, #40]	; 0x28
					  x = temp;
2000060e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20000610:	f003 fda2 	bl	20004158 <__aeabi_f2uiz>
20000614:	4603      	mov	r3, r0
20000616:	b29a      	uxth	r2, r3
20000618:	f244 433c 	movw	r3, #17468	; 0x443c
2000061c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000620:	801a      	strh	r2, [r3, #0]

					  temp = y/3605.0;
20000622:	f244 4346 	movw	r3, #17478	; 0x4446
20000626:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000062a:	881b      	ldrh	r3, [r3, #0]
2000062c:	4618      	mov	r0, r3
2000062e:	f003 f97b 	bl	20003928 <__aeabi_i2d>
20000632:	4602      	mov	r2, r0
20000634:	460b      	mov	r3, r1
20000636:	4610      	mov	r0, r2
20000638:	4619      	mov	r1, r3
2000063a:	f60f 0314 	addw	r3, pc, #2068	; 0x814
2000063e:	e9d3 2300 	ldrd	r2, r3, [r3]
20000642:	f003 fb01 	bl	20003c48 <__aeabi_ddiv>
20000646:	4602      	mov	r2, r0
20000648:	460b      	mov	r3, r1
2000064a:	4610      	mov	r0, r2
2000064c:	4619      	mov	r1, r3
2000064e:	f003 fbe3 	bl	20003e18 <__aeabi_d2f>
20000652:	4603      	mov	r3, r0
20000654:	62bb      	str	r3, [r7, #40]	; 0x28
					  temp *= 320;
20000656:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20000658:	f8df 1800 	ldr.w	r1, [pc, #2048]	; 20000e5c <main+0x9bc>
2000065c:	f003 fc2c 	bl	20003eb8 <__aeabi_fmul>
20000660:	4603      	mov	r3, r0
20000662:	62bb      	str	r3, [r7, #40]	; 0x28
					  y = temp;
20000664:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20000666:	f003 fd77 	bl	20004158 <__aeabi_f2uiz>
2000066a:	4603      	mov	r3, r0
2000066c:	b29a      	uxth	r2, r3
2000066e:	f244 4346 	movw	r3, #17478	; 0x4446
20000672:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000676:	801a      	strh	r2, [r3, #0]

					  x = 240 - x;
20000678:	f244 433c 	movw	r3, #17468	; 0x443c
2000067c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000680:	881b      	ldrh	r3, [r3, #0]
20000682:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
20000686:	b29a      	uxth	r2, r3
20000688:	f244 433c 	movw	r3, #17468	; 0x443c
2000068c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000690:	801a      	strh	r2, [r3, #0]
					  y = 320 - y;
20000692:	f244 4346 	movw	r3, #17478	; 0x4446
20000696:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000069a:	881b      	ldrh	r3, [r3, #0]
2000069c:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
200006a0:	b29a      	uxth	r2, r3
200006a2:	f244 4346 	movw	r3, #17478	; 0x4446
200006a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200006aa:	801a      	strh	r2, [r3, #0]

					  //printf("x: %d   y: %d \n\r", x, y);
					  if(x>120){
200006ac:	f244 433c 	movw	r3, #17468	; 0x443c
200006b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200006b4:	881b      	ldrh	r3, [r3, #0]
200006b6:	2b78      	cmp	r3, #120	; 0x78
200006b8:	d90b      	bls.n	200006d2 <main+0x232>
						  menu = 0;
200006ba:	f04f 0300 	mov.w	r3, #0
200006be:	60fb      	str	r3, [r7, #12]
						  sendMessage('~', 1, 0x000);
200006c0:	f04f 007e 	mov.w	r0, #126	; 0x7e
200006c4:	f04f 0101 	mov.w	r1, #1
200006c8:	f04f 0200 	mov.w	r2, #0
200006cc:	f001 f96c 	bl	200019a8 <sendMessage>
200006d0:	e01f      	b.n	20000712 <main+0x272>

					  }
					  else if(y> 160){
200006d2:	f244 4346 	movw	r3, #17478	; 0x4446
200006d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200006da:	881b      	ldrh	r3, [r3, #0]
200006dc:	2ba0      	cmp	r3, #160	; 0xa0
200006de:	d90b      	bls.n	200006f8 <main+0x258>
						  menu = 1;
200006e0:	f04f 0301 	mov.w	r3, #1
200006e4:	60fb      	str	r3, [r7, #12]
						  sendMessage('%', 1, 0x000);
200006e6:	f04f 0025 	mov.w	r0, #37	; 0x25
200006ea:	f04f 0101 	mov.w	r1, #1
200006ee:	f04f 0200 	mov.w	r2, #0
200006f2:	f001 f959 	bl	200019a8 <sendMessage>
200006f6:	e00c      	b.n	20000712 <main+0x272>
					  }
					  else{
						  menu = 2;
200006f8:	f04f 0302 	mov.w	r3, #2
200006fc:	60fb      	str	r3, [r7, #12]
						  sendMessage('_', 1, 0x000);
200006fe:	f04f 005f 	mov.w	r0, #95	; 0x5f
20000702:	f04f 0101 	mov.w	r1, #1
20000706:	f04f 0200 	mov.w	r2, #0
2000070a:	f001 f94d 	bl	200019a8 <sendMessage>
2000070e:	e000      	b.n	20000712 <main+0x272>
	drawText3(ILI9341_BLACK);

	while(1){

		while(menu == -1){
				while (touched()) {
20000710:	bf00      	nop
20000712:	f000 fd85 	bl	20001220 <touched>
20000716:	4603      	mov	r3, r0
20000718:	2b00      	cmp	r3, #0
2000071a:	f47f af29 	bne.w	20000570 <main+0xd0>
	drawText2(ILI9341_BLACK);
	drawText3(ILI9341_BLACK);

	while(1){

		while(menu == -1){
2000071e:	68fb      	ldr	r3, [r7, #12]
20000720:	f1b3 3fff 	cmp.w	r3, #4294967295
20000724:	d0f4      	beq.n	20000710 <main+0x270>
				}

			}


			while (!bufferEmpty()){
20000726:	e00d      	b.n	20000744 <main+0x2a4>
				readTouch(&x, &y, &z);
20000728:	f244 403c 	movw	r0, #17468	; 0x443c
2000072c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000730:	f244 4146 	movw	r1, #17478	; 0x4446
20000734:	f2c2 0100 	movt	r1, #8192	; 0x2000
20000738:	f244 4244 	movw	r2, #17476	; 0x4444
2000073c:	f2c2 0200 	movt	r2, #8192	; 0x2000
20000740:	f000 fd1c 	bl	2000117c <readTouch>
				}

			}


			while (!bufferEmpty()){
20000744:	f001 f8c4 	bl	200018d0 <bufferEmpty>
20000748:	4603      	mov	r3, r0
2000074a:	2b00      	cmp	r3, #0
2000074c:	d0ec      	beq.n	20000728 <main+0x288>
				readTouch(&x, &y, &z);
			}

			if(menu == 0){
2000074e:	68fb      	ldr	r3, [r7, #12]
20000750:	2b00      	cmp	r3, #0
20000752:	d104      	bne.n	2000075e <main+0x2be>
					drawFillScreen(ILI9341_WHITE);
20000754:	f64f 70ff 	movw	r0, #65535	; 0xffff
20000758:	f000 fe00 	bl	2000135c <drawFillScreen>
				drawRectangle(40, 60, 35, 5, ILI9341_BLACK);
				drawRectangle(70, 60, 5, 35, ILI9341_BLACK);

			}

			while(menu == 2){
2000075c:	e199      	b.n	20000a92 <main+0x5f2>
			}

			if(menu == 0){
					drawFillScreen(ILI9341_WHITE);
			}
			else if(menu == 1){
2000075e:	68fb      	ldr	r3, [r7, #12]
20000760:	2b01      	cmp	r3, #1
20000762:	d104      	bne.n	2000076e <main+0x2ce>
				drawFillScreen(ILI9341_BLACK);
20000764:	f04f 0000 	mov.w	r0, #0
20000768:	f000 fdf8 	bl	2000135c <drawFillScreen>
				drawRectangle(40, 60, 35, 5, ILI9341_BLACK);
				drawRectangle(70, 60, 5, 35, ILI9341_BLACK);

			}

			while(menu == 2){
2000076c:	e191      	b.n	20000a92 <main+0x5f2>
			}
			else if(menu == 1){
				drawFillScreen(ILI9341_BLACK);
			}
			else{
				drawFillScreen(ILI9341_GREEN);
2000076e:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
20000772:	f000 fdf3 	bl	2000135c <drawFillScreen>
				drawRectangle(5, 5, 110, 152, ILI9341_WHITE);
20000776:	f64f 73ff 	movw	r3, #65535	; 0xffff
2000077a:	9300      	str	r3, [sp, #0]
2000077c:	f04f 0005 	mov.w	r0, #5
20000780:	f04f 0105 	mov.w	r1, #5
20000784:	f04f 026e 	mov.w	r2, #110	; 0x6e
20000788:	f04f 0398 	mov.w	r3, #152	; 0x98
2000078c:	f000 fd78 	bl	20001280 <drawRectangle>
				drawRectangle(5, 165, 110, 152, ILI9341_WHITE);
20000790:	f64f 73ff 	movw	r3, #65535	; 0xffff
20000794:	9300      	str	r3, [sp, #0]
20000796:	f04f 0005 	mov.w	r0, #5
2000079a:	f04f 01a5 	mov.w	r1, #165	; 0xa5
2000079e:	f04f 026e 	mov.w	r2, #110	; 0x6e
200007a2:	f04f 0398 	mov.w	r3, #152	; 0x98
200007a6:	f000 fd6b 	bl	20001280 <drawRectangle>
				drawRectangle(120, 5, 115, 152, ILI9341_WHITE);
200007aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
200007ae:	9300      	str	r3, [sp, #0]
200007b0:	f04f 0078 	mov.w	r0, #120	; 0x78
200007b4:	f04f 0105 	mov.w	r1, #5
200007b8:	f04f 0273 	mov.w	r2, #115	; 0x73
200007bc:	f04f 0398 	mov.w	r3, #152	; 0x98
200007c0:	f000 fd5e 	bl	20001280 <drawRectangle>
				drawRectangle(120, 165, 115, 152, ILI9341_WHITE);
200007c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
200007c8:	9300      	str	r3, [sp, #0]
200007ca:	f04f 0078 	mov.w	r0, #120	; 0x78
200007ce:	f04f 01a5 	mov.w	r1, #165	; 0xa5
200007d2:	f04f 0273 	mov.w	r2, #115	; 0x73
200007d6:	f04f 0398 	mov.w	r3, #152	; 0x98
200007da:	f000 fd51 	bl	20001280 <drawRectangle>

				//draw box
				drawRectangle(40, 60, 5, 35, ILI9341_BLACK);
200007de:	f04f 0300 	mov.w	r3, #0
200007e2:	9300      	str	r3, [sp, #0]
200007e4:	f04f 0028 	mov.w	r0, #40	; 0x28
200007e8:	f04f 013c 	mov.w	r1, #60	; 0x3c
200007ec:	f04f 0205 	mov.w	r2, #5
200007f0:	f04f 0323 	mov.w	r3, #35	; 0x23
200007f4:	f000 fd44 	bl	20001280 <drawRectangle>
				drawRectangle(40, 90, 35, 5, ILI9341_BLACK);
200007f8:	f04f 0300 	mov.w	r3, #0
200007fc:	9300      	str	r3, [sp, #0]
200007fe:	f04f 0028 	mov.w	r0, #40	; 0x28
20000802:	f04f 015a 	mov.w	r1, #90	; 0x5a
20000806:	f04f 0223 	mov.w	r2, #35	; 0x23
2000080a:	f04f 0305 	mov.w	r3, #5
2000080e:	f000 fd37 	bl	20001280 <drawRectangle>
				drawRectangle(40, 60, 35, 5, ILI9341_BLACK);
20000812:	f04f 0300 	mov.w	r3, #0
20000816:	9300      	str	r3, [sp, #0]
20000818:	f04f 0028 	mov.w	r0, #40	; 0x28
2000081c:	f04f 013c 	mov.w	r1, #60	; 0x3c
20000820:	f04f 0223 	mov.w	r2, #35	; 0x23
20000824:	f04f 0305 	mov.w	r3, #5
20000828:	f000 fd2a 	bl	20001280 <drawRectangle>
				drawRectangle(70, 60, 5, 35, ILI9341_BLACK);
2000082c:	f04f 0300 	mov.w	r3, #0
20000830:	9300      	str	r3, [sp, #0]
20000832:	f04f 0046 	mov.w	r0, #70	; 0x46
20000836:	f04f 013c 	mov.w	r1, #60	; 0x3c
2000083a:	f04f 0205 	mov.w	r2, #5
2000083e:	f04f 0323 	mov.w	r3, #35	; 0x23
20000842:	f000 fd1d 	bl	20001280 <drawRectangle>

			}

			while(menu == 2){
20000846:	e124      	b.n	20000a92 <main+0x5f2>
				while (touched()) {
								// read x & y & z;
								if (! bufferEmpty()) {
20000848:	f001 f842 	bl	200018d0 <bufferEmpty>
2000084c:	4603      	mov	r3, r0
2000084e:	2b00      	cmp	r3, #0
20000850:	f040 8119 	bne.w	20000a86 <main+0x5e6>

								  readTouch(&x, &y, &z);
20000854:	f244 403c 	movw	r0, #17468	; 0x443c
20000858:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000085c:	f244 4146 	movw	r1, #17478	; 0x4446
20000860:	f2c2 0100 	movt	r1, #8192	; 0x2000
20000864:	f244 4244 	movw	r2, #17476	; 0x4444
20000868:	f2c2 0200 	movt	r2, #8192	; 0x2000
2000086c:	f000 fc86 	bl	2000117c <readTouch>
								 //printf("x: %d   y: %d \n\r", x, y);
								  x -= 200;
20000870:	f244 433c 	movw	r3, #17468	; 0x443c
20000874:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000878:	881b      	ldrh	r3, [r3, #0]
2000087a:	f1a3 03c8 	sub.w	r3, r3, #200	; 0xc8
2000087e:	b29a      	uxth	r2, r3
20000880:	f244 433c 	movw	r3, #17468	; 0x443c
20000884:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000888:	801a      	strh	r2, [r3, #0]
								  y -= 320;
2000088a:	f244 4346 	movw	r3, #17478	; 0x4446
2000088e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000892:	881b      	ldrh	r3, [r3, #0]
20000894:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
20000898:	b29a      	uxth	r2, r3
2000089a:	f244 4346 	movw	r3, #17478	; 0x4446
2000089e:	f2c2 0300 	movt	r3, #8192	; 0x2000
200008a2:	801a      	strh	r2, [r3, #0]

								  float temp = x/3730.0;
200008a4:	f244 433c 	movw	r3, #17468	; 0x443c
200008a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200008ac:	881b      	ldrh	r3, [r3, #0]
200008ae:	4618      	mov	r0, r3
200008b0:	f003 f83a 	bl	20003928 <__aeabi_i2d>
200008b4:	4602      	mov	r2, r0
200008b6:	460b      	mov	r3, r1
200008b8:	4610      	mov	r0, r2
200008ba:	4619      	mov	r1, r3
200008bc:	f20f 5388 	addw	r3, pc, #1416	; 0x588
200008c0:	e9d3 2300 	ldrd	r2, r3, [r3]
200008c4:	f003 f9c0 	bl	20003c48 <__aeabi_ddiv>
200008c8:	4602      	mov	r2, r0
200008ca:	460b      	mov	r3, r1
200008cc:	4610      	mov	r0, r2
200008ce:	4619      	mov	r1, r3
200008d0:	f003 faa2 	bl	20003e18 <__aeabi_d2f>
200008d4:	4603      	mov	r3, r0
200008d6:	62fb      	str	r3, [r7, #44]	; 0x2c
								  temp *= 240;
200008d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
200008da:	f8df 157c 	ldr.w	r1, [pc, #1404]	; 20000e58 <main+0x9b8>
200008de:	f003 faeb 	bl	20003eb8 <__aeabi_fmul>
200008e2:	4603      	mov	r3, r0
200008e4:	62fb      	str	r3, [r7, #44]	; 0x2c
								  x = temp;
200008e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
200008e8:	f003 fc36 	bl	20004158 <__aeabi_f2uiz>
200008ec:	4603      	mov	r3, r0
200008ee:	b29a      	uxth	r2, r3
200008f0:	f244 433c 	movw	r3, #17468	; 0x443c
200008f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200008f8:	801a      	strh	r2, [r3, #0]

								  temp = y/3605.0;
200008fa:	f244 4346 	movw	r3, #17478	; 0x4446
200008fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000902:	881b      	ldrh	r3, [r3, #0]
20000904:	4618      	mov	r0, r3
20000906:	f003 f80f 	bl	20003928 <__aeabi_i2d>
2000090a:	4602      	mov	r2, r0
2000090c:	460b      	mov	r3, r1
2000090e:	4610      	mov	r0, r2
20000910:	4619      	mov	r1, r3
20000912:	f20f 533c 	addw	r3, pc, #1340	; 0x53c
20000916:	e9d3 2300 	ldrd	r2, r3, [r3]
2000091a:	f003 f995 	bl	20003c48 <__aeabi_ddiv>
2000091e:	4602      	mov	r2, r0
20000920:	460b      	mov	r3, r1
20000922:	4610      	mov	r0, r2
20000924:	4619      	mov	r1, r3
20000926:	f003 fa77 	bl	20003e18 <__aeabi_d2f>
2000092a:	4603      	mov	r3, r0
2000092c:	62fb      	str	r3, [r7, #44]	; 0x2c
								  temp *= 320;
2000092e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
20000930:	f8df 1528 	ldr.w	r1, [pc, #1320]	; 20000e5c <main+0x9bc>
20000934:	f003 fac0 	bl	20003eb8 <__aeabi_fmul>
20000938:	4603      	mov	r3, r0
2000093a:	62fb      	str	r3, [r7, #44]	; 0x2c
								  y = temp;
2000093c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
2000093e:	f003 fc0b 	bl	20004158 <__aeabi_f2uiz>
20000942:	4603      	mov	r3, r0
20000944:	b29a      	uxth	r2, r3
20000946:	f244 4346 	movw	r3, #17478	; 0x4446
2000094a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000094e:	801a      	strh	r2, [r3, #0]

								  x = 240 - x;
20000950:	f244 433c 	movw	r3, #17468	; 0x443c
20000954:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000958:	881b      	ldrh	r3, [r3, #0]
2000095a:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
2000095e:	b29a      	uxth	r2, r3
20000960:	f244 433c 	movw	r3, #17468	; 0x443c
20000964:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000968:	801a      	strh	r2, [r3, #0]
								  y = 320 - y;
2000096a:	f244 4346 	movw	r3, #17478	; 0x4446
2000096e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000972:	881b      	ldrh	r3, [r3, #0]
20000974:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
20000978:	b29a      	uxth	r2, r3
2000097a:	f244 4346 	movw	r3, #17478	; 0x4446
2000097e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000982:	801a      	strh	r2, [r3, #0]

								  //printf("x: %d   y: %d \n\r", x, y);
								  if(x>120){
20000984:	f244 433c 	movw	r3, #17468	; 0x443c
20000988:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000098c:	881b      	ldrh	r3, [r3, #0]
2000098e:	2b78      	cmp	r3, #120	; 0x78
20000990:	d918      	bls.n	200009c4 <main+0x524>
									  if(y>165){
20000992:	f244 4346 	movw	r3, #17478	; 0x4446
20000996:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000099a:	881b      	ldrh	r3, [r3, #0]
2000099c:	2ba5      	cmp	r3, #165	; 0xa5
2000099e:	d908      	bls.n	200009b2 <main+0x512>
										  //send box
										  sendMessage('[', 1, 0x000);
200009a0:	f04f 005b 	mov.w	r0, #91	; 0x5b
200009a4:	f04f 0101 	mov.w	r1, #1
200009a8:	f04f 0200 	mov.w	r2, #0
200009ac:	f000 fffc 	bl	200019a8 <sendMessage>
									  }
									  else{
										  //send tri
										  sendMessage('<', 1, 0x000);
200009b0:	e069      	b.n	20000a86 <main+0x5e6>
200009b2:	f04f 003c 	mov.w	r0, #60	; 0x3c
200009b6:	f04f 0101 	mov.w	r1, #1
200009ba:	f04f 0200 	mov.w	r2, #0
200009be:	f000 fff3 	bl	200019a8 <sendMessage>
200009c2:	e060      	b.n	20000a86 <main+0x5e6>
									  }

								  }
								  else{
									  if(y>165){
200009c4:	f244 4346 	movw	r3, #17478	; 0x4446
200009c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200009cc:	881b      	ldrh	r3, [r3, #0]
200009ce:	2ba5      	cmp	r3, #165	; 0xa5
200009d0:	d917      	bls.n	20000a02 <main+0x562>
										  //send Circle
										  sendMessage('(', 1, 0x000);
200009d2:	f04f 0028 	mov.w	r0, #40	; 0x28
200009d6:	f04f 0101 	mov.w	r1, #1
200009da:	f04f 0200 	mov.w	r2, #0
200009de:	f000 ffe3 	bl	200019a8 <sendMessage>
200009e2:	e050      	b.n	20000a86 <main+0x5e6>
									  }
									  else{
										  while (!bufferEmpty()){
										  				readTouch(&x, &y, &z);
200009e4:	f244 403c 	movw	r0, #17468	; 0x443c
200009e8:	f2c2 0000 	movt	r0, #8192	; 0x2000
200009ec:	f244 4146 	movw	r1, #17478	; 0x4446
200009f0:	f2c2 0100 	movt	r1, #8192	; 0x2000
200009f4:	f244 4244 	movw	r2, #17476	; 0x4444
200009f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
200009fc:	f000 fbbe 	bl	2000117c <readTouch>
20000a00:	e000      	b.n	20000a04 <main+0x564>
									  if(y>165){
										  //send Circle
										  sendMessage('(', 1, 0x000);
									  }
									  else{
										  while (!bufferEmpty()){
20000a02:	bf00      	nop
20000a04:	f000 ff64 	bl	200018d0 <bufferEmpty>
20000a08:	4603      	mov	r3, r0
20000a0a:	2b00      	cmp	r3, #0
20000a0c:	d0ea      	beq.n	200009e4 <main+0x544>
										  				readTouch(&x, &y, &z);
										  			}
										  menu = -1;
20000a0e:	f04f 33ff 	mov.w	r3, #4294967295
20000a12:	60fb      	str	r3, [r7, #12]
										  drawFillScreen(ILI9341_BLUE);
20000a14:	f04f 001f 	mov.w	r0, #31
20000a18:	f000 fca0 	bl	2000135c <drawFillScreen>
										  	drawRectangle(5, 5, 110, 152, ILI9341_YELLOW);
20000a1c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
20000a20:	9300      	str	r3, [sp, #0]
20000a22:	f04f 0005 	mov.w	r0, #5
20000a26:	f04f 0105 	mov.w	r1, #5
20000a2a:	f04f 026e 	mov.w	r2, #110	; 0x6e
20000a2e:	f04f 0398 	mov.w	r3, #152	; 0x98
20000a32:	f000 fc25 	bl	20001280 <drawRectangle>
										  	drawRectangle(5, 165, 110, 152, ILI9341_YELLOW);
20000a36:	f64f 73e0 	movw	r3, #65504	; 0xffe0
20000a3a:	9300      	str	r3, [sp, #0]
20000a3c:	f04f 0005 	mov.w	r0, #5
20000a40:	f04f 01a5 	mov.w	r1, #165	; 0xa5
20000a44:	f04f 026e 	mov.w	r2, #110	; 0x6e
20000a48:	f04f 0398 	mov.w	r3, #152	; 0x98
20000a4c:	f000 fc18 	bl	20001280 <drawRectangle>
										  	drawRectangle(120, 5, 115, 312, ILI9341_YELLOW);
20000a50:	f64f 73e0 	movw	r3, #65504	; 0xffe0
20000a54:	9300      	str	r3, [sp, #0]
20000a56:	f04f 0078 	mov.w	r0, #120	; 0x78
20000a5a:	f04f 0105 	mov.w	r1, #5
20000a5e:	f04f 0273 	mov.w	r2, #115	; 0x73
20000a62:	f44f 739c 	mov.w	r3, #312	; 0x138
20000a66:	f000 fc0b 	bl	20001280 <drawRectangle>

										  	drawText1(ILI9341_BLACK);
20000a6a:	f04f 0000 	mov.w	r0, #0
20000a6e:	f000 fcaf 	bl	200013d0 <drawText1>
										  	drawText2(ILI9341_BLACK);
20000a72:	f04f 0000 	mov.w	r0, #0
20000a76:	f000 fccd 	bl	20001414 <drawText2>
										  	drawText3(ILI9341_BLACK);
20000a7a:	f04f 0000 	mov.w	r0, #0
20000a7e:	f000 fcf7 	bl	20001470 <drawText3>
20000a82:	e000      	b.n	20000a86 <main+0x5e6>
				drawRectangle(70, 60, 5, 35, ILI9341_BLACK);

			}

			while(menu == 2){
				while (touched()) {
20000a84:	bf00      	nop
20000a86:	f000 fbcb 	bl	20001220 <touched>
20000a8a:	4603      	mov	r3, r0
20000a8c:	2b00      	cmp	r3, #0
20000a8e:	f47f aedb 	bne.w	20000848 <main+0x3a8>
				drawRectangle(40, 60, 35, 5, ILI9341_BLACK);
				drawRectangle(70, 60, 5, 35, ILI9341_BLACK);

			}

			while(menu == 2){
20000a92:	68fb      	ldr	r3, [r7, #12]
20000a94:	2b02      	cmp	r3, #2
20000a96:	d0f5      	beq.n	20000a84 <main+0x5e4>

								}
							}
			}

			while( menu == 0 )
20000a98:	e1cf      	b.n	20000e3a <main+0x99a>
		{  			while (touched()) {
						// read x & y & z;
						while (! bufferEmpty()) {

							readTouch(&x, &y, &z);
20000a9a:	f244 403c 	movw	r0, #17468	; 0x443c
20000a9e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000aa2:	f244 4146 	movw	r1, #17478	; 0x4446
20000aa6:	f2c2 0100 	movt	r1, #8192	; 0x2000
20000aaa:	f244 4244 	movw	r2, #17476	; 0x4444
20000aae:	f2c2 0200 	movt	r2, #8192	; 0x2000
20000ab2:	f000 fb63 	bl	2000117c <readTouch>
							 //printf("x: %d   y: %d \n\r", x, y);
							  x -= 200;
20000ab6:	f244 433c 	movw	r3, #17468	; 0x443c
20000aba:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000abe:	881b      	ldrh	r3, [r3, #0]
20000ac0:	f1a3 03c8 	sub.w	r3, r3, #200	; 0xc8
20000ac4:	b29a      	uxth	r2, r3
20000ac6:	f244 433c 	movw	r3, #17468	; 0x443c
20000aca:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ace:	801a      	strh	r2, [r3, #0]
							  y -= 320;
20000ad0:	f244 4346 	movw	r3, #17478	; 0x4446
20000ad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ad8:	881b      	ldrh	r3, [r3, #0]
20000ada:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
20000ade:	b29a      	uxth	r2, r3
20000ae0:	f244 4346 	movw	r3, #17478	; 0x4446
20000ae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ae8:	801a      	strh	r2, [r3, #0]

							  float temp = x/3730.0;
20000aea:	f244 433c 	movw	r3, #17468	; 0x443c
20000aee:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000af2:	881b      	ldrh	r3, [r3, #0]
20000af4:	4618      	mov	r0, r3
20000af6:	f002 ff17 	bl	20003928 <__aeabi_i2d>
20000afa:	4602      	mov	r2, r0
20000afc:	460b      	mov	r3, r1
20000afe:	4610      	mov	r0, r2
20000b00:	4619      	mov	r1, r3
20000b02:	a3d1      	add	r3, pc, #836	; (adr r3, 20000e48 <main+0x9a8>)
20000b04:	e9d3 2300 	ldrd	r2, r3, [r3]
20000b08:	f003 f89e 	bl	20003c48 <__aeabi_ddiv>
20000b0c:	4602      	mov	r2, r0
20000b0e:	460b      	mov	r3, r1
20000b10:	4610      	mov	r0, r2
20000b12:	4619      	mov	r1, r3
20000b14:	f003 f980 	bl	20003e18 <__aeabi_d2f>
20000b18:	4603      	mov	r3, r0
20000b1a:	633b      	str	r3, [r7, #48]	; 0x30
							  temp *= 240;
20000b1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
20000b1e:	49ce      	ldr	r1, [pc, #824]	; (20000e58 <main+0x9b8>)
20000b20:	f003 f9ca 	bl	20003eb8 <__aeabi_fmul>
20000b24:	4603      	mov	r3, r0
20000b26:	633b      	str	r3, [r7, #48]	; 0x30
							  x = temp;
20000b28:	6b38      	ldr	r0, [r7, #48]	; 0x30
20000b2a:	f003 fb15 	bl	20004158 <__aeabi_f2uiz>
20000b2e:	4603      	mov	r3, r0
20000b30:	b29a      	uxth	r2, r3
20000b32:	f244 433c 	movw	r3, #17468	; 0x443c
20000b36:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b3a:	801a      	strh	r2, [r3, #0]

							  temp = y/3605.0;
20000b3c:	f244 4346 	movw	r3, #17478	; 0x4446
20000b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b44:	881b      	ldrh	r3, [r3, #0]
20000b46:	4618      	mov	r0, r3
20000b48:	f002 feee 	bl	20003928 <__aeabi_i2d>
20000b4c:	4602      	mov	r2, r0
20000b4e:	460b      	mov	r3, r1
20000b50:	4610      	mov	r0, r2
20000b52:	4619      	mov	r1, r3
20000b54:	a3be      	add	r3, pc, #760	; (adr r3, 20000e50 <main+0x9b0>)
20000b56:	e9d3 2300 	ldrd	r2, r3, [r3]
20000b5a:	f003 f875 	bl	20003c48 <__aeabi_ddiv>
20000b5e:	4602      	mov	r2, r0
20000b60:	460b      	mov	r3, r1
20000b62:	4610      	mov	r0, r2
20000b64:	4619      	mov	r1, r3
20000b66:	f003 f957 	bl	20003e18 <__aeabi_d2f>
20000b6a:	4603      	mov	r3, r0
20000b6c:	633b      	str	r3, [r7, #48]	; 0x30
							  temp *= 320;
20000b6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
20000b70:	49ba      	ldr	r1, [pc, #744]	; (20000e5c <main+0x9bc>)
20000b72:	f003 f9a1 	bl	20003eb8 <__aeabi_fmul>
20000b76:	4603      	mov	r3, r0
20000b78:	633b      	str	r3, [r7, #48]	; 0x30
							  y = temp;
20000b7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
20000b7c:	f003 faec 	bl	20004158 <__aeabi_f2uiz>
20000b80:	4603      	mov	r3, r0
20000b82:	b29a      	uxth	r2, r3
20000b84:	f244 4346 	movw	r3, #17478	; 0x4446
20000b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b8c:	801a      	strh	r2, [r3, #0]

							  x = 240 - x;
20000b8e:	f244 433c 	movw	r3, #17468	; 0x443c
20000b92:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b96:	881b      	ldrh	r3, [r3, #0]
20000b98:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
20000b9c:	b29a      	uxth	r2, r3
20000b9e:	f244 433c 	movw	r3, #17468	; 0x443c
20000ba2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ba6:	801a      	strh	r2, [r3, #0]
							  y = 320 - y;
20000ba8:	f244 4346 	movw	r3, #17478	; 0x4446
20000bac:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000bb0:	881b      	ldrh	r3, [r3, #0]
20000bb2:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
20000bb6:	b29a      	uxth	r2, r3
20000bb8:	f244 4346 	movw	r3, #17478	; 0x4446
20000bbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000bc0:	801a      	strh	r2, [r3, #0]

							  //printf("x: %d   y: %d \n\r", x, y);
						  if(!t){
20000bc2:	693b      	ldr	r3, [r7, #16]
20000bc4:	2b00      	cmp	r3, #0
20000bc6:	f040 810b 	bne.w	20000de0 <main+0x940>
							  if(count < 250){
20000bca:	697b      	ldr	r3, [r7, #20]
20000bcc:	2bf9      	cmp	r3, #249	; 0xf9
20000bce:	f300 810c 	bgt.w	20000dea <main+0x94a>
								  int tempX = 255 - scaleX(x);
20000bd2:	f244 433c 	movw	r3, #17468	; 0x443c
20000bd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000bda:	881b      	ldrh	r3, [r3, #0]
20000bdc:	4618      	mov	r0, r3
20000bde:	f000 fe83 	bl	200018e8 <scaleX>
20000be2:	4603      	mov	r3, r0
20000be4:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
20000be8:	637b      	str	r3, [r7, #52]	; 0x34
								  int tempY = scaleY(y);
20000bea:	f244 4346 	movw	r3, #17478	; 0x4446
20000bee:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000bf2:	881b      	ldrh	r3, [r3, #0]
20000bf4:	4618      	mov	r0, r3
20000bf6:	f000 fea7 	bl	20001948 <scaleY>
20000bfa:	4603      	mov	r3, r0
20000bfc:	63bb      	str	r3, [r7, #56]	; 0x38
								  drawRectanglePixel(x, y, 6, 6, ILI9341_BLUE);
20000bfe:	f244 433c 	movw	r3, #17468	; 0x443c
20000c02:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c06:	881a      	ldrh	r2, [r3, #0]
20000c08:	f244 4346 	movw	r3, #17478	; 0x4446
20000c0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c10:	881b      	ldrh	r3, [r3, #0]
20000c12:	f04f 011f 	mov.w	r1, #31
20000c16:	9100      	str	r1, [sp, #0]
20000c18:	4610      	mov	r0, r2
20000c1a:	4619      	mov	r1, r3
20000c1c:	f04f 0206 	mov.w	r2, #6
20000c20:	f04f 0306 	mov.w	r3, #6
20000c24:	f000 fb6c 	bl	20001300 <drawRectanglePixel>

								  readTouch(&x, &y, &z);
20000c28:	f244 403c 	movw	r0, #17468	; 0x443c
20000c2c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000c30:	f244 4146 	movw	r1, #17478	; 0x4446
20000c34:	f2c2 0100 	movt	r1, #8192	; 0x2000
20000c38:	f244 4244 	movw	r2, #17476	; 0x4444
20000c3c:	f2c2 0200 	movt	r2, #8192	; 0x2000
20000c40:	f000 fa9c 	bl	2000117c <readTouch>
								 //printf("x: %d   y: %d \n\r", x, y);
								  x -= 200;
20000c44:	f244 433c 	movw	r3, #17468	; 0x443c
20000c48:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c4c:	881b      	ldrh	r3, [r3, #0]
20000c4e:	f1a3 03c8 	sub.w	r3, r3, #200	; 0xc8
20000c52:	b29a      	uxth	r2, r3
20000c54:	f244 433c 	movw	r3, #17468	; 0x443c
20000c58:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c5c:	801a      	strh	r2, [r3, #0]
								  y -= 320;
20000c5e:	f244 4346 	movw	r3, #17478	; 0x4446
20000c62:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c66:	881b      	ldrh	r3, [r3, #0]
20000c68:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
20000c6c:	b29a      	uxth	r2, r3
20000c6e:	f244 4346 	movw	r3, #17478	; 0x4446
20000c72:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c76:	801a      	strh	r2, [r3, #0]

								  float temp = x/3730.0;
20000c78:	f244 433c 	movw	r3, #17468	; 0x443c
20000c7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c80:	881b      	ldrh	r3, [r3, #0]
20000c82:	4618      	mov	r0, r3
20000c84:	f002 fe50 	bl	20003928 <__aeabi_i2d>
20000c88:	4602      	mov	r2, r0
20000c8a:	460b      	mov	r3, r1
20000c8c:	4610      	mov	r0, r2
20000c8e:	4619      	mov	r1, r3
20000c90:	a36d      	add	r3, pc, #436	; (adr r3, 20000e48 <main+0x9a8>)
20000c92:	e9d3 2300 	ldrd	r2, r3, [r3]
20000c96:	f002 ffd7 	bl	20003c48 <__aeabi_ddiv>
20000c9a:	4602      	mov	r2, r0
20000c9c:	460b      	mov	r3, r1
20000c9e:	4610      	mov	r0, r2
20000ca0:	4619      	mov	r1, r3
20000ca2:	f003 f8b9 	bl	20003e18 <__aeabi_d2f>
20000ca6:	4603      	mov	r3, r0
20000ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
								  temp *= 240;
20000caa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
20000cac:	496a      	ldr	r1, [pc, #424]	; (20000e58 <main+0x9b8>)
20000cae:	f003 f903 	bl	20003eb8 <__aeabi_fmul>
20000cb2:	4603      	mov	r3, r0
20000cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
								  x = temp;
20000cb6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
20000cb8:	f003 fa4e 	bl	20004158 <__aeabi_f2uiz>
20000cbc:	4603      	mov	r3, r0
20000cbe:	b29a      	uxth	r2, r3
20000cc0:	f244 433c 	movw	r3, #17468	; 0x443c
20000cc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000cc8:	801a      	strh	r2, [r3, #0]

								  temp = y/3605.0;
20000cca:	f244 4346 	movw	r3, #17478	; 0x4446
20000cce:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000cd2:	881b      	ldrh	r3, [r3, #0]
20000cd4:	4618      	mov	r0, r3
20000cd6:	f002 fe27 	bl	20003928 <__aeabi_i2d>
20000cda:	4602      	mov	r2, r0
20000cdc:	460b      	mov	r3, r1
20000cde:	4610      	mov	r0, r2
20000ce0:	4619      	mov	r1, r3
20000ce2:	a35b      	add	r3, pc, #364	; (adr r3, 20000e50 <main+0x9b0>)
20000ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
20000ce8:	f002 ffae 	bl	20003c48 <__aeabi_ddiv>
20000cec:	4602      	mov	r2, r0
20000cee:	460b      	mov	r3, r1
20000cf0:	4610      	mov	r0, r2
20000cf2:	4619      	mov	r1, r3
20000cf4:	f003 f890 	bl	20003e18 <__aeabi_d2f>
20000cf8:	4603      	mov	r3, r0
20000cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
								  temp *= 320;
20000cfc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
20000cfe:	4957      	ldr	r1, [pc, #348]	; (20000e5c <main+0x9bc>)
20000d00:	f003 f8da 	bl	20003eb8 <__aeabi_fmul>
20000d04:	4603      	mov	r3, r0
20000d06:	63fb      	str	r3, [r7, #60]	; 0x3c
								  y = temp;
20000d08:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
20000d0a:	f003 fa25 	bl	20004158 <__aeabi_f2uiz>
20000d0e:	4603      	mov	r3, r0
20000d10:	b29a      	uxth	r2, r3
20000d12:	f244 4346 	movw	r3, #17478	; 0x4446
20000d16:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d1a:	801a      	strh	r2, [r3, #0]

								  x = 240 - x;
20000d1c:	f244 433c 	movw	r3, #17468	; 0x443c
20000d20:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d24:	881b      	ldrh	r3, [r3, #0]
20000d26:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
20000d2a:	b29a      	uxth	r2, r3
20000d2c:	f244 433c 	movw	r3, #17468	; 0x443c
20000d30:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d34:	801a      	strh	r2, [r3, #0]
								  y = 320 - y;
20000d36:	f244 4346 	movw	r3, #17478	; 0x4446
20000d3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d3e:	881b      	ldrh	r3, [r3, #0]
20000d40:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
20000d44:	b29a      	uxth	r2, r3
20000d46:	f244 4346 	movw	r3, #17478	; 0x4446
20000d4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d4e:	801a      	strh	r2, [r3, #0]

								  drawRectanglePixel(x, y, 6, 6, ILI9341_BLUE);
20000d50:	f244 433c 	movw	r3, #17468	; 0x443c
20000d54:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d58:	881a      	ldrh	r2, [r3, #0]
20000d5a:	f244 4346 	movw	r3, #17478	; 0x4446
20000d5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d62:	881b      	ldrh	r3, [r3, #0]
20000d64:	f04f 011f 	mov.w	r1, #31
20000d68:	9100      	str	r1, [sp, #0]
20000d6a:	4610      	mov	r0, r2
20000d6c:	4619      	mov	r1, r3
20000d6e:	f04f 0206 	mov.w	r2, #6
20000d72:	f04f 0306 	mov.w	r3, #6
20000d76:	f000 fac3 	bl	20001300 <drawRectanglePixel>
								  uint8_t buf[5] = {0,255-scaleX(x),scaleY(y),tempX, tempY};
20000d7a:	f244 433c 	movw	r3, #17468	; 0x443c
20000d7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d82:	881b      	ldrh	r3, [r3, #0]
20000d84:	4618      	mov	r0, r3
20000d86:	f000 fdaf 	bl	200018e8 <scaleX>
20000d8a:	4603      	mov	r3, r0
20000d8c:	ea6f 0303 	mvn.w	r3, r3
20000d90:	b2dc      	uxtb	r4, r3
20000d92:	f244 4346 	movw	r3, #17478	; 0x4446
20000d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d9a:	881b      	ldrh	r3, [r3, #0]
20000d9c:	4618      	mov	r0, r3
20000d9e:	f000 fdd3 	bl	20001948 <scaleY>
20000da2:	4603      	mov	r3, r0
20000da4:	4619      	mov	r1, r3
20000da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20000da8:	b2da      	uxtb	r2, r3
20000daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20000dac:	b2db      	uxtb	r3, r3
20000dae:	f04f 0000 	mov.w	r0, #0
20000db2:	7138      	strb	r0, [r7, #4]
20000db4:	4620      	mov	r0, r4
20000db6:	7178      	strb	r0, [r7, #5]
20000db8:	71b9      	strb	r1, [r7, #6]
20000dba:	71fa      	strb	r2, [r7, #7]
20000dbc:	723b      	strb	r3, [r7, #8]
								  sendMessage(buf, 5, 0x000);
20000dbe:	f107 0304 	add.w	r3, r7, #4
20000dc2:	4618      	mov	r0, r3
20000dc4:	f04f 0105 	mov.w	r1, #5
20000dc8:	f04f 0200 	mov.w	r2, #0
20000dcc:	f000 fdec 	bl	200019a8 <sendMessage>

								  count++;
20000dd0:	697b      	ldr	r3, [r7, #20]
20000dd2:	f103 0301 	add.w	r3, r3, #1
20000dd6:	617b      	str	r3, [r7, #20]
								  t = 0;
20000dd8:	f04f 0300 	mov.w	r3, #0
20000ddc:	613b      	str	r3, [r7, #16]
20000dde:	e007      	b.n	20000df0 <main+0x950>



								  }
								  else{
									  t++;
20000de0:	693b      	ldr	r3, [r7, #16]
20000de2:	f103 0301 	add.w	r3, r3, #1
20000de6:	613b      	str	r3, [r7, #16]
20000de8:	e002      	b.n	20000df0 <main+0x950>
								  drawRectanglePixel(x, y, 6, 6, ILI9341_BLUE);
								  uint8_t buf[5] = {0,255-scaleX(x),scaleY(y),tempX, tempY};
								  sendMessage(buf, 5, 0x000);

								  count++;
								  t = 0;
20000dea:	bf00      	nop
20000dec:	e000      	b.n	20000df0 <main+0x950>
			}

			while( menu == 0 )
		{  			while (touched()) {
						// read x & y & z;
						while (! bufferEmpty()) {
20000dee:	bf00      	nop
20000df0:	f000 fd6e 	bl	200018d0 <bufferEmpty>
20000df4:	4603      	mov	r3, r0
20000df6:	2b00      	cmp	r3, #0
20000df8:	f43f ae4f 	beq.w	20000a9a <main+0x5fa>
20000dfc:	e000      	b.n	20000e00 <main+0x960>
								}
							}
			}

			while( menu == 0 )
		{  			while (touched()) {
20000dfe:	bf00      	nop
20000e00:	f000 fa0e 	bl	20001220 <touched>
20000e04:	4603      	mov	r3, r0
20000e06:	2b00      	cmp	r3, #0
20000e08:	d1f1      	bne.n	20000dee <main+0x94e>


								}
								//writeRegister8(STMPE_INT_STA, 0xFF); // reset all ints, in this example unneeded depending in use
							  }
							while (!bufferEmpty()){
20000e0a:	e00d      	b.n	20000e28 <main+0x988>
									readTouch(&x, &y, &z);
20000e0c:	f244 403c 	movw	r0, #17468	; 0x443c
20000e10:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000e14:	f244 4146 	movw	r1, #17478	; 0x4446
20000e18:	f2c2 0100 	movt	r1, #8192	; 0x2000
20000e1c:	f244 4244 	movw	r2, #17476	; 0x4444
20000e20:	f2c2 0200 	movt	r2, #8192	; 0x2000
20000e24:	f000 f9aa 	bl	2000117c <readTouch>


								}
								//writeRegister8(STMPE_INT_STA, 0xFF); // reset all ints, in this example unneeded depending in use
							  }
							while (!bufferEmpty()){
20000e28:	f000 fd52 	bl	200018d0 <bufferEmpty>
20000e2c:	4603      	mov	r3, r0
20000e2e:	2b00      	cmp	r3, #0
20000e30:	d0ec      	beq.n	20000e0c <main+0x96c>
									readTouch(&x, &y, &z);
								}
							  delay(1);
20000e32:	f04f 0001 	mov.w	r0, #1
20000e36:	f000 fba1 	bl	2000157c <delay>

								}
							}
			}

			while( menu == 0 )
20000e3a:	68fb      	ldr	r3, [r7, #12]
20000e3c:	2b00      	cmp	r3, #0
20000e3e:	d0de      	beq.n	20000dfe <main+0x95e>




				}
	}
20000e40:	bf00      	nop
	drawText2(ILI9341_BLACK);
	drawText3(ILI9341_BLACK);

	while(1){

		while(menu == -1){
20000e42:	e46c      	b.n	2000071e <main+0x27e>
20000e44:	f3af 8000 	nop.w
20000e48:	00000000 	.word	0x00000000
20000e4c:	40ad2400 	.word	0x40ad2400
20000e50:	00000000 	.word	0x00000000
20000e54:	40ac2a00 	.word	0x40ac2a00
20000e58:	43700000 	.word	0x43700000
20000e5c:	43a00000 	.word	0x43a00000

20000e60 <NVIC_DisableIRQ>:
 * 
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
20000e60:	b480      	push	{r7}
20000e62:	b083      	sub	sp, #12
20000e64:	af00      	add	r7, sp, #0
20000e66:	4603      	mov	r3, r0
20000e68:	80fb      	strh	r3, [r7, #6]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
20000e6a:	f24e 1300 	movw	r3, #57600	; 0xe100
20000e6e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000e72:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20000e76:	ea4f 1252 	mov.w	r2, r2, lsr #5
20000e7a:	88f9      	ldrh	r1, [r7, #6]
20000e7c:	f001 011f 	and.w	r1, r1, #31
20000e80:	f04f 0001 	mov.w	r0, #1
20000e84:	fa00 f101 	lsl.w	r1, r0, r1
20000e88:	f102 0220 	add.w	r2, r2, #32
20000e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000e90:	f107 070c 	add.w	r7, r7, #12
20000e94:	46bd      	mov	sp, r7
20000e96:	bc80      	pop	{r7}
20000e98:	4770      	bx	lr
20000e9a:	bf00      	nop

20000e9c <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20000e9c:	b480      	push	{r7}
20000e9e:	b083      	sub	sp, #12
20000ea0:	af00      	add	r7, sp, #0
20000ea2:	4603      	mov	r3, r0
20000ea4:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20000ea6:	f24e 1300 	movw	r3, #57600	; 0xe100
20000eaa:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000eae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20000eb2:	ea4f 1252 	mov.w	r2, r2, lsr #5
20000eb6:	88f9      	ldrh	r1, [r7, #6]
20000eb8:	f001 011f 	and.w	r1, r1, #31
20000ebc:	f04f 0001 	mov.w	r0, #1
20000ec0:	fa00 f101 	lsl.w	r1, r0, r1
20000ec4:	f102 0260 	add.w	r2, r2, #96	; 0x60
20000ec8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000ecc:	f107 070c 	add.w	r7, r7, #12
20000ed0:	46bd      	mov	sp, r7
20000ed2:	bc80      	pop	{r7}
20000ed4:	4770      	bx	lr
20000ed6:	bf00      	nop

20000ed8 <MSS_TIM1_init>:
    one-shot mode. Allowed values for this parameter are:
        - MSS_TIMER_PERIODIC_MODE
        - MSS_TIMER_ONE_SHOT_MODE
 */
static __INLINE void MSS_TIM1_init( mss_timer_mode_t mode )
{
20000ed8:	b580      	push	{r7, lr}
20000eda:	b082      	sub	sp, #8
20000edc:	af00      	add	r7, sp, #0
20000ede:	4603      	mov	r3, r0
20000ee0:	71fb      	strb	r3, [r7, #7]
    NVIC_DisableIRQ( Timer1_IRQn );             /* Disable timer 1 irq in the Cortex-M3 NVIC */  
20000ee2:	f04f 0014 	mov.w	r0, #20
20000ee6:	f7ff ffbb 	bl	20000e60 <NVIC_DisableIRQ>
    
    SYSREG->SOFT_RST_CR &= ~SYSREG_TIMER_SOFTRESET_MASK; /* Take timer block out of reset */
20000eea:	f242 0300 	movw	r3, #8192	; 0x2000
20000eee:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000ef2:	f242 0200 	movw	r2, #8192	; 0x2000
20000ef6:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000efa:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000efc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20000f00:	631a      	str	r2, [r3, #48]	; 0x30
    
    TIMER->TIM64_MODE = 0U;                     /* switch to 32 bits mode */
20000f02:	f245 0300 	movw	r3, #20480	; 0x5000
20000f06:	f2c4 0300 	movt	r3, #16384	; 0x4000
20000f0a:	f04f 0200 	mov.w	r2, #0
20000f0e:	655a      	str	r2, [r3, #84]	; 0x54
    
    TIMER_BITBAND->TIM1ENABLE = 0U;             /* disable timer */
20000f10:	f240 0300 	movw	r3, #0
20000f14:	f2c4 230a 	movt	r3, #16906	; 0x420a
20000f18:	f04f 0200 	mov.w	r2, #0
20000f1c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    TIMER_BITBAND->TIM1INTEN = 0U;              /* disable interrupt */
20000f20:	f240 0300 	movw	r3, #0
20000f24:	f2c4 230a 	movt	r3, #16906	; 0x420a
20000f28:	f04f 0200 	mov.w	r2, #0
20000f2c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    TIMER_BITBAND->TIM1MODE = (uint32_t)mode;   /* set mode (continuous/one-shot) */
20000f30:	f240 0300 	movw	r3, #0
20000f34:	f2c4 230a 	movt	r3, #16906	; 0x420a
20000f38:	79fa      	ldrb	r2, [r7, #7]
20000f3a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    
    TIMER->TIM1_RIS = 1U;                       /* clear timer 1 interrupt */
20000f3e:	f245 0300 	movw	r3, #20480	; 0x5000
20000f42:	f2c4 0300 	movt	r3, #16384	; 0x4000
20000f46:	f04f 0201 	mov.w	r2, #1
20000f4a:	611a      	str	r2, [r3, #16]
    NVIC_ClearPendingIRQ( Timer1_IRQn );        /* clear timer 1 interrupt within NVIC */
20000f4c:	f04f 0014 	mov.w	r0, #20
20000f50:	f7ff ffa4 	bl	20000e9c <NVIC_ClearPendingIRQ>
}
20000f54:	f107 0708 	add.w	r7, r7, #8
20000f58:	46bd      	mov	sp, r7
20000f5a:	bd80      	pop	{r7, pc}

20000f5c <MSS_TIM1_start>:
  MSS_TIM1_load_immediate() or MSS_TIM1_load_background() functions. 
  Note: The MSS_TIM1_start() function is also used to resume the down-counter
        if previously stopped using MSS_TIM1_stop() function.
 */
static __INLINE void MSS_TIM1_start( void )
{
20000f5c:	b480      	push	{r7}
20000f5e:	af00      	add	r7, sp, #0
    TIMER_BITBAND->TIM1ENABLE = 1U;    /* enable timer */
20000f60:	f240 0300 	movw	r3, #0
20000f64:	f2c4 230a 	movt	r3, #16906	; 0x420a
20000f68:	f04f 0201 	mov.w	r2, #1
20000f6c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
20000f70:	46bd      	mov	sp, r7
20000f72:	bc80      	pop	{r7}
20000f74:	4770      	bx	lr
20000f76:	bf00      	nop

20000f78 <MSS_TIM1_stop>:
/*-------------------------------------------------------------------------*//**
  The MSS_TIM1_stop() function disables Timer 1 and stops its down-counter
  decrementing.
 */
static __INLINE void MSS_TIM1_stop( void )
{
20000f78:	b480      	push	{r7}
20000f7a:	af00      	add	r7, sp, #0
    TIMER_BITBAND->TIM1ENABLE = 0U;    /* disable timer */
20000f7c:	f240 0300 	movw	r3, #0
20000f80:	f2c4 230a 	movt	r3, #16906	; 0x420a
20000f84:	f04f 0200 	mov.w	r2, #0
20000f88:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
20000f8c:	46bd      	mov	sp, r7
20000f8e:	bc80      	pop	{r7}
20000f90:	4770      	bx	lr
20000f92:	bf00      	nop

20000f94 <MSS_TIM1_get_current_value>:
  
  @return
    This function returns the 32-bits current value of the Timer 1 down-counter.
 */
static __INLINE uint32_t MSS_TIM1_get_current_value( void )
{
20000f94:	b480      	push	{r7}
20000f96:	af00      	add	r7, sp, #0
    return TIMER->TIM1_VAL;
20000f98:	f245 0300 	movw	r3, #20480	; 0x5000
20000f9c:	f2c4 0300 	movt	r3, #16384	; 0x4000
20000fa0:	681b      	ldr	r3, [r3, #0]
}
20000fa2:	4618      	mov	r0, r3
20000fa4:	46bd      	mov	sp, r7
20000fa6:	bc80      	pop	{r7}
20000fa8:	4770      	bx	lr
20000faa:	bf00      	nop

20000fac <MSS_TIM1_load_immediate>:
  @param load_value
    The load_value parameter specifies the value from which the Timer 1 
    down-counter will start decrementing.
 */
static __INLINE void MSS_TIM1_load_immediate( uint32_t load_value )
{
20000fac:	b480      	push	{r7}
20000fae:	b083      	sub	sp, #12
20000fb0:	af00      	add	r7, sp, #0
20000fb2:	6078      	str	r0, [r7, #4]
    TIMER->TIM1_LOADVAL = load_value;
20000fb4:	f245 0300 	movw	r3, #20480	; 0x5000
20000fb8:	f2c4 0300 	movt	r3, #16384	; 0x4000
20000fbc:	687a      	ldr	r2, [r7, #4]
20000fbe:	605a      	str	r2, [r3, #4]
}
20000fc0:	f107 070c 	add.w	r7, r7, #12
20000fc4:	46bd      	mov	sp, r7
20000fc6:	bc80      	pop	{r7}
20000fc8:	4770      	bx	lr
20000fca:	bf00      	nop

20000fcc <touchscreen_begin>:
    0x31, 0xC1, 0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F,
  ILI9341_SLPOUT  , 0x80,                // Exit Sleep
  ILI9341_DISPON  , 0x80,                // Display on
  0x00                                   // End of list
};
void touchscreen_begin(){
20000fcc:	b580      	push	{r7, lr}
20000fce:	b094      	sub	sp, #80	; 0x50
20000fd0:	af00      	add	r7, sp, #0

	uint8_t cmd, x, numArgs;
	uint8_t i;
	uint8_t temp[65];
	const uint8_t *addr = initcmd;
20000fd2:	f244 23bc 	movw	r3, #17084	; 0x42bc
20000fd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000fda:	64fb      	str	r3, [r7, #76]	; 0x4c

	MSS_SPI_init(&g_mss_spi1);
20000fdc:	f244 40dc 	movw	r0, #17628	; 0x44dc
20000fe0:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000fe4:	f001 fb54 	bl	20002690 <MSS_SPI_init>
	MSS_I2C_init(&g_mss_i2c1 , TOUCH_ADDR, MSS_I2C_PCLK_DIV_256 );
20000fe8:	f244 6058 	movw	r0, #18008	; 0x4658
20000fec:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000ff0:	f04f 0141 	mov.w	r1, #65	; 0x41
20000ff4:	f04f 0200 	mov.w	r2, #0
20000ff8:	f001 ffca 	bl	20002f90 <MSS_I2C_init>
	MSS_GPIO_init();
20000ffc:	f002 f856 	bl	200030ac <MSS_GPIO_init>

	MSS_GPIO_config(DC, MSS_GPIO_OUTPUT_MODE);
20001000:	f04f 0000 	mov.w	r0, #0
20001004:	f04f 0105 	mov.w	r1, #5
20001008:	f002 f880 	bl	2000310c <MSS_GPIO_config>
	
	configureSPI(8);
2000100c:	f04f 0008 	mov.w	r0, #8
20001010:	f000 fb88 	bl	20001724 <configureSPI>
	set_SPI_CS();
20001014:	f000 fbcc 	bl	200017b0 <set_SPI_CS>
	sendCommandOnly(ILI9341_SWRESET);
20001018:	f04f 0001 	mov.w	r0, #1
2000101c:	f000 face 	bl	200015bc <sendCommandOnly>
	delay(150);
20001020:	f04f 0096 	mov.w	r0, #150	; 0x96
20001024:	f000 faaa 	bl	2000157c <delay>

	while((cmd = pgm_read_byte(addr++)) > 0) {
20001028:	e024      	b.n	20001074 <touchscreen_begin+0xa8>
		x = pgm_read_byte(addr++);
2000102a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
2000102c:	781b      	ldrb	r3, [r3, #0]
2000102e:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
20001032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
20001034:	f103 0301 	add.w	r3, r3, #1
20001038:	64fb      	str	r3, [r7, #76]	; 0x4c
		numArgs = x & 0x7F;
2000103a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
2000103e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
20001042:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
		sendCommand(cmd, addr, numArgs);
20001046:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
2000104a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
2000104e:	4610      	mov	r0, r2
20001050:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
20001052:	461a      	mov	r2, r3
20001054:	f000 fa62 	bl	2000151c <sendCommand>
		addr += numArgs;
20001058:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
2000105c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
2000105e:	4413      	add	r3, r2
20001060:	64fb      	str	r3, [r7, #76]	; 0x4c
		if(x & 0x80) delay(150);
20001062:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
20001066:	b25b      	sxtb	r3, r3
20001068:	2b00      	cmp	r3, #0
2000106a:	da03      	bge.n	20001074 <touchscreen_begin+0xa8>
2000106c:	f04f 0096 	mov.w	r0, #150	; 0x96
20001070:	f000 fa84 	bl	2000157c <delay>
	configureSPI(8);
	set_SPI_CS();
	sendCommandOnly(ILI9341_SWRESET);
	delay(150);

	while((cmd = pgm_read_byte(addr++)) > 0) {
20001074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
20001076:	781b      	ldrb	r3, [r3, #0]
20001078:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
2000107c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
20001080:	2b00      	cmp	r3, #0
20001082:	bf0c      	ite	eq
20001084:	2300      	moveq	r3, #0
20001086:	2301      	movne	r3, #1
20001088:	b2db      	uxtb	r3, r3
2000108a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
2000108c:	f102 0201 	add.w	r2, r2, #1
20001090:	64fa      	str	r2, [r7, #76]	; 0x4c
20001092:	2b00      	cmp	r3, #0
20001094:	d1c9      	bne.n	2000102a <touchscreen_begin+0x5e>
		numArgs = x & 0x7F;
		sendCommand(cmd, addr, numArgs);
		addr += numArgs;
		if(x & 0x80) delay(150);
	}
	clear_SPI_CS();
20001096:	f000 fb97 	bl	200017c8 <clear_SPI_CS>

	writeRegister8(STMPE_SYS_CTRL1, STMPE_SYS_CTRL1_RESET);
2000109a:	f04f 0003 	mov.w	r0, #3
2000109e:	f04f 0102 	mov.w	r1, #2
200010a2:	f000 fbb1 	bl	20001808 <writeRegister8>
	  delay(10);
200010a6:	f04f 000a 	mov.w	r0, #10
200010aa:	f000 fa67 	bl	2000157c <delay>

	  for ( i = 0; i < 65; i++) {
200010ae:	f04f 0300 	mov.w	r3, #0
200010b2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
200010b6:	e00a      	b.n	200010ce <touchscreen_begin+0x102>
	    readRegister8(i);
200010b8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
200010bc:	4618      	mov	r0, r3
200010be:	f000 fbcb 	bl	20001858 <readRegister8>
	clear_SPI_CS();

	writeRegister8(STMPE_SYS_CTRL1, STMPE_SYS_CTRL1_RESET);
	  delay(10);

	  for ( i = 0; i < 65; i++) {
200010c2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
200010c6:	f103 0301 	add.w	r3, r3, #1
200010ca:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
200010ce:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
200010d2:	2b40      	cmp	r3, #64	; 0x40
200010d4:	d9f0      	bls.n	200010b8 <touchscreen_begin+0xec>
	    readRegister8(i);
	  }

	  writeRegister8(STMPE_SYS_CTRL2, 0x0); // turn on clocks!
200010d6:	f04f 0004 	mov.w	r0, #4
200010da:	f04f 0100 	mov.w	r1, #0
200010de:	f000 fb93 	bl	20001808 <writeRegister8>
	  writeRegister8(STMPE_TSC_CTRL,
200010e2:	f04f 0040 	mov.w	r0, #64	; 0x40
200010e6:	f04f 0101 	mov.w	r1, #1
200010ea:	f000 fb8d 	bl	20001808 <writeRegister8>
	                 STMPE_TSC_CTRL_XYZ | STMPE_TSC_CTRL_EN); // XYZ and enable!
	  // Serial.println(readRegister8(STMPE_TSC_CTRL), HEX);
	  writeRegister8(STMPE_INT_EN, STMPE_INT_EN_TOUCHDET);
200010ee:	f04f 000a 	mov.w	r0, #10
200010f2:	f04f 0101 	mov.w	r1, #1
200010f6:	f000 fb87 	bl	20001808 <writeRegister8>
	  writeRegister8(STMPE_ADC_CTRL1, STMPE_ADC_CTRL1_10BIT |
200010fa:	f04f 0020 	mov.w	r0, #32
200010fe:	f04f 0160 	mov.w	r1, #96	; 0x60
20001102:	f000 fb81 	bl	20001808 <writeRegister8>
	                                      (0x6 << 4)); // 96 clocks per conversion
	  writeRegister8(STMPE_ADC_CTRL2, STMPE_ADC_CTRL2_6_5MHZ);
20001106:	f04f 0021 	mov.w	r0, #33	; 0x21
2000110a:	f04f 0102 	mov.w	r1, #2
2000110e:	f000 fb7b 	bl	20001808 <writeRegister8>
	  writeRegister8(STMPE_TSC_CFG, STMPE_TSC_CFG_4SAMPLE |
20001112:	f04f 0041 	mov.w	r0, #65	; 0x41
20001116:	f04f 01a4 	mov.w	r1, #164	; 0xa4
2000111a:	f000 fb75 	bl	20001808 <writeRegister8>
	                                    STMPE_TSC_CFG_DELAY_1MS |
	                                    STMPE_TSC_CFG_SETTLE_5MS);
	  writeRegister8(STMPE_TSC_FRACTION_Z, 0x6);
2000111e:	f04f 0056 	mov.w	r0, #86	; 0x56
20001122:	f04f 0106 	mov.w	r1, #6
20001126:	f000 fb6f 	bl	20001808 <writeRegister8>
	  writeRegister8(STMPE_FIFO_TH, 1);
2000112a:	f04f 004a 	mov.w	r0, #74	; 0x4a
2000112e:	f04f 0101 	mov.w	r1, #1
20001132:	f000 fb69 	bl	20001808 <writeRegister8>
	  writeRegister8(STMPE_FIFO_STA, STMPE_FIFO_STA_RESET);
20001136:	f04f 004b 	mov.w	r0, #75	; 0x4b
2000113a:	f04f 0101 	mov.w	r1, #1
2000113e:	f000 fb63 	bl	20001808 <writeRegister8>
	  writeRegister8(STMPE_FIFO_STA, 0); // unreset
20001142:	f04f 004b 	mov.w	r0, #75	; 0x4b
20001146:	f04f 0100 	mov.w	r1, #0
2000114a:	f000 fb5d 	bl	20001808 <writeRegister8>
	  writeRegister8(STMPE_TSC_I_DRIVE, STMPE_TSC_I_DRIVE_50MA);
2000114e:	f04f 0058 	mov.w	r0, #88	; 0x58
20001152:	f04f 0101 	mov.w	r1, #1
20001156:	f000 fb57 	bl	20001808 <writeRegister8>
	  writeRegister8(STMPE_INT_STA, 0xFF); // reset all ints
2000115a:	f04f 000b 	mov.w	r0, #11
2000115e:	f04f 01ff 	mov.w	r1, #255	; 0xff
20001162:	f000 fb51 	bl	20001808 <writeRegister8>
	  writeRegister8(STMPE_INT_CTRL,
20001166:	f04f 0009 	mov.w	r0, #9
2000116a:	f04f 0105 	mov.w	r1, #5
2000116e:	f000 fb4b 	bl	20001808 <writeRegister8>
	                 STMPE_INT_CTRL_POL_HIGH | STMPE_INT_CTRL_ENABLE);


}
20001172:	f107 0750 	add.w	r7, r7, #80	; 0x50
20001176:	46bd      	mov	sp, r7
20001178:	bd80      	pop	{r7, pc}
2000117a:	bf00      	nop

2000117c <readTouch>:
	MSS_GPIO_set_output(yn, 0);

   return z;
}

void readTouch(uint16_t *x, uint16_t *y, uint8_t* z){
2000117c:	b590      	push	{r4, r7, lr}
2000117e:	b087      	sub	sp, #28
20001180:	af00      	add	r7, sp, #0
20001182:	60f8      	str	r0, [r7, #12]
20001184:	60b9      	str	r1, [r7, #8]
20001186:	607a      	str	r2, [r7, #4]
	uint8_t data[4];
	uint8_t i = 0;
20001188:	f04f 0300 	mov.w	r3, #0
2000118c:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i < 4; i++) {
2000118e:	f04f 0300 	mov.w	r3, #0
20001192:	75fb      	strb	r3, [r7, #23]
20001194:	e010      	b.n	200011b8 <readTouch+0x3c>
	    data[i] = readRegister8(0xD7); // _spi->transfer(0x00);
20001196:	7dfc      	ldrb	r4, [r7, #23]
20001198:	f04f 00d7 	mov.w	r0, #215	; 0xd7
2000119c:	f000 fb5c 	bl	20001858 <readRegister8>
200011a0:	4603      	mov	r3, r0
200011a2:	461a      	mov	r2, r3
200011a4:	f107 0118 	add.w	r1, r7, #24
200011a8:	eb01 0304 	add.w	r3, r1, r4
200011ac:	f803 2c08 	strb.w	r2, [r3, #-8]
}

void readTouch(uint16_t *x, uint16_t *y, uint8_t* z){
	uint8_t data[4];
	uint8_t i = 0;
	for (i = 0; i < 4; i++) {
200011b0:	7dfb      	ldrb	r3, [r7, #23]
200011b2:	f103 0301 	add.w	r3, r3, #1
200011b6:	75fb      	strb	r3, [r7, #23]
200011b8:	7dfb      	ldrb	r3, [r7, #23]
200011ba:	2b03      	cmp	r3, #3
200011bc:	d9eb      	bls.n	20001196 <readTouch+0x1a>
	    data[i] = readRegister8(0xD7); // _spi->transfer(0x00);
	    // Serial.print("0x"); Serial.print(data[i], HEX); Serial.print(" / ");
	  }
	  *x = data[0];
200011be:	7c3b      	ldrb	r3, [r7, #16]
200011c0:	461a      	mov	r2, r3
200011c2:	68fb      	ldr	r3, [r7, #12]
200011c4:	801a      	strh	r2, [r3, #0]
	  *x <<= 4;
200011c6:	68fb      	ldr	r3, [r7, #12]
200011c8:	881b      	ldrh	r3, [r3, #0]
200011ca:	ea4f 1303 	mov.w	r3, r3, lsl #4
200011ce:	b29a      	uxth	r2, r3
200011d0:	68fb      	ldr	r3, [r7, #12]
200011d2:	801a      	strh	r2, [r3, #0]
	  *x |= (data[1] >> 4);
200011d4:	68fb      	ldr	r3, [r7, #12]
200011d6:	881a      	ldrh	r2, [r3, #0]
200011d8:	7c7b      	ldrb	r3, [r7, #17]
200011da:	ea4f 1313 	mov.w	r3, r3, lsr #4
200011de:	b2db      	uxtb	r3, r3
200011e0:	ea42 0303 	orr.w	r3, r2, r3
200011e4:	b29a      	uxth	r2, r3
200011e6:	68fb      	ldr	r3, [r7, #12]
200011e8:	801a      	strh	r2, [r3, #0]
	  *y = data[1] & 0x0F;
200011ea:	7c7b      	ldrb	r3, [r7, #17]
200011ec:	f003 030f 	and.w	r3, r3, #15
200011f0:	68ba      	ldr	r2, [r7, #8]
200011f2:	8013      	strh	r3, [r2, #0]
	  *y <<= 8;
200011f4:	68bb      	ldr	r3, [r7, #8]
200011f6:	881b      	ldrh	r3, [r3, #0]
200011f8:	ea4f 2303 	mov.w	r3, r3, lsl #8
200011fc:	b29a      	uxth	r2, r3
200011fe:	68bb      	ldr	r3, [r7, #8]
20001200:	801a      	strh	r2, [r3, #0]
	  *y |= data[2];
20001202:	68bb      	ldr	r3, [r7, #8]
20001204:	881a      	ldrh	r2, [r3, #0]
20001206:	7cbb      	ldrb	r3, [r7, #18]
20001208:	ea42 0303 	orr.w	r3, r2, r3
2000120c:	b29a      	uxth	r2, r3
2000120e:	68bb      	ldr	r3, [r7, #8]
20001210:	801a      	strh	r2, [r3, #0]
	  *z = data[3];
20001212:	7cfa      	ldrb	r2, [r7, #19]
20001214:	687b      	ldr	r3, [r7, #4]
20001216:	701a      	strb	r2, [r3, #0]
}
20001218:	f107 071c 	add.w	r7, r7, #28
2000121c:	46bd      	mov	sp, r7
2000121e:	bd90      	pop	{r4, r7, pc}

20001220 <touched>:
int touched(){
20001220:	b580      	push	{r7, lr}
20001222:	af00      	add	r7, sp, #0

	return (readRegister8(STMPE_TSC_CTRL) & 0x80);
20001224:	f04f 0040 	mov.w	r0, #64	; 0x40
20001228:	f000 fb16 	bl	20001858 <readRegister8>
2000122c:	4603      	mov	r3, r0
2000122e:	f003 0380 	and.w	r3, r3, #128	; 0x80
}
20001232:	4618      	mov	r0, r3
20001234:	bd80      	pop	{r7, pc}
20001236:	bf00      	nop

20001238 <drawPixel>:

void drawPixel(uint16_t x, uint16_t y, uint16_t color){
20001238:	b580      	push	{r7, lr}
2000123a:	b082      	sub	sp, #8
2000123c:	af00      	add	r7, sp, #0
2000123e:	4613      	mov	r3, r2
20001240:	4602      	mov	r2, r0
20001242:	80fa      	strh	r2, [r7, #6]
20001244:	460a      	mov	r2, r1
20001246:	80ba      	strh	r2, [r7, #4]
20001248:	807b      	strh	r3, [r7, #2]

	set_SPI_CS();
2000124a:	f000 fab1 	bl	200017b0 <set_SPI_CS>
	setAddr(x, y, x+1, y+1);
2000124e:	88fb      	ldrh	r3, [r7, #6]
20001250:	f103 0301 	add.w	r3, r3, #1
20001254:	b29a      	uxth	r2, r3
20001256:	88bb      	ldrh	r3, [r7, #4]
20001258:	f103 0301 	add.w	r3, r3, #1
2000125c:	b29b      	uxth	r3, r3
2000125e:	88f8      	ldrh	r0, [r7, #6]
20001260:	88b9      	ldrh	r1, [r7, #4]
20001262:	f000 f933 	bl	200014cc <setAddr>
	set_DC_HIGH();
20001266:	f000 fabb 	bl	200017e0 <set_DC_HIGH>
	sendSPI16(color);
2000126a:	887b      	ldrh	r3, [r7, #2]
2000126c:	4618      	mov	r0, r3
2000126e:	f000 fa83 	bl	20001778 <sendSPI16>
	clear_SPI_CS();
20001272:	f000 faa9 	bl	200017c8 <clear_SPI_CS>
}
20001276:	f107 0708 	add.w	r7, r7, #8
2000127a:	46bd      	mov	sp, r7
2000127c:	bd80      	pop	{r7, pc}
2000127e:	bf00      	nop

20001280 <drawRectangle>:


void drawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color){
20001280:	b580      	push	{r7, lr}
20001282:	b084      	sub	sp, #16
20001284:	af00      	add	r7, sp, #0
20001286:	80f8      	strh	r0, [r7, #6]
20001288:	80b9      	strh	r1, [r7, #4]
2000128a:	807a      	strh	r2, [r7, #2]
2000128c:	803b      	strh	r3, [r7, #0]
	int i, j;

		set_SPI_CS();
2000128e:	f000 fa8f 	bl	200017b0 <set_SPI_CS>
		setAddr(x,y, x+w, y+h);
20001292:	88fa      	ldrh	r2, [r7, #6]
20001294:	887b      	ldrh	r3, [r7, #2]
20001296:	4413      	add	r3, r2
20001298:	b29a      	uxth	r2, r3
2000129a:	88b9      	ldrh	r1, [r7, #4]
2000129c:	883b      	ldrh	r3, [r7, #0]
2000129e:	440b      	add	r3, r1
200012a0:	b29b      	uxth	r3, r3
200012a2:	88f8      	ldrh	r0, [r7, #6]
200012a4:	88b9      	ldrh	r1, [r7, #4]
200012a6:	f000 f911 	bl	200014cc <setAddr>
		set_DC_HIGH();
200012aa:	f000 fa99 	bl	200017e0 <set_DC_HIGH>
		for(i = x; i<x+w; i++){
200012ae:	88fb      	ldrh	r3, [r7, #6]
200012b0:	60bb      	str	r3, [r7, #8]
200012b2:	e018      	b.n	200012e6 <drawRectangle+0x66>
			for (j =y; j<y+h; j++){
200012b4:	88bb      	ldrh	r3, [r7, #4]
200012b6:	60fb      	str	r3, [r7, #12]
200012b8:	e007      	b.n	200012ca <drawRectangle+0x4a>
				sendSPI16(color);
200012ba:	8b3b      	ldrh	r3, [r7, #24]
200012bc:	4618      	mov	r0, r3
200012be:	f000 fa5b 	bl	20001778 <sendSPI16>

		set_SPI_CS();
		setAddr(x,y, x+w, y+h);
		set_DC_HIGH();
		for(i = x; i<x+w; i++){
			for (j =y; j<y+h; j++){
200012c2:	68fb      	ldr	r3, [r7, #12]
200012c4:	f103 0301 	add.w	r3, r3, #1
200012c8:	60fb      	str	r3, [r7, #12]
200012ca:	88ba      	ldrh	r2, [r7, #4]
200012cc:	883b      	ldrh	r3, [r7, #0]
200012ce:	441a      	add	r2, r3
200012d0:	68fb      	ldr	r3, [r7, #12]
200012d2:	429a      	cmp	r2, r3
200012d4:	dcf1      	bgt.n	200012ba <drawRectangle+0x3a>
				sendSPI16(color);
			}
			sendSPI16(color);
200012d6:	8b3b      	ldrh	r3, [r7, #24]
200012d8:	4618      	mov	r0, r3
200012da:	f000 fa4d 	bl	20001778 <sendSPI16>
	int i, j;

		set_SPI_CS();
		setAddr(x,y, x+w, y+h);
		set_DC_HIGH();
		for(i = x; i<x+w; i++){
200012de:	68bb      	ldr	r3, [r7, #8]
200012e0:	f103 0301 	add.w	r3, r3, #1
200012e4:	60bb      	str	r3, [r7, #8]
200012e6:	88fa      	ldrh	r2, [r7, #6]
200012e8:	887b      	ldrh	r3, [r7, #2]
200012ea:	441a      	add	r2, r3
200012ec:	68bb      	ldr	r3, [r7, #8]
200012ee:	429a      	cmp	r2, r3
200012f0:	dce0      	bgt.n	200012b4 <drawRectangle+0x34>
				sendSPI16(color);
			}
			sendSPI16(color);
		}

		clear_SPI_CS();
200012f2:	f000 fa69 	bl	200017c8 <clear_SPI_CS>
}
200012f6:	f107 0710 	add.w	r7, r7, #16
200012fa:	46bd      	mov	sp, r7
200012fc:	bd80      	pop	{r7, pc}
200012fe:	bf00      	nop

20001300 <drawRectanglePixel>:
void drawRectanglePixel(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color){
20001300:	b580      	push	{r7, lr}
20001302:	b086      	sub	sp, #24
20001304:	af02      	add	r7, sp, #8
20001306:	80f8      	strh	r0, [r7, #6]
20001308:	80b9      	strh	r1, [r7, #4]
2000130a:	807a      	strh	r2, [r7, #2]
2000130c:	803b      	strh	r3, [r7, #0]
	uint16_t i;

	 for (i=x; i<x+w; i++) {
2000130e:	88fb      	ldrh	r3, [r7, #6]
20001310:	81fb      	strh	r3, [r7, #14]
20001312:	e018      	b.n	20001346 <drawRectanglePixel+0x46>
	        writeLine(i, y, i, y+h-1, color);
20001314:	89f8      	ldrh	r0, [r7, #14]
20001316:	88b9      	ldrh	r1, [r7, #4]
20001318:	89fa      	ldrh	r2, [r7, #14]
2000131a:	f8b7 c004 	ldrh.w	ip, [r7, #4]
2000131e:	883b      	ldrh	r3, [r7, #0]
20001320:	4463      	add	r3, ip
20001322:	b29b      	uxth	r3, r3
20001324:	f103 33ff 	add.w	r3, r3, #4294967295
20001328:	b29b      	uxth	r3, r3
2000132a:	b200      	sxth	r0, r0
2000132c:	b209      	sxth	r1, r1
2000132e:	b212      	sxth	r2, r2
20001330:	b21b      	sxth	r3, r3
20001332:	f8b7 c018 	ldrh.w	ip, [r7, #24]
20001336:	f8cd c000 	str.w	ip, [sp]
2000133a:	f000 f955 	bl	200015e8 <writeLine>
		clear_SPI_CS();
}
void drawRectanglePixel(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color){
	uint16_t i;

	 for (i=x; i<x+w; i++) {
2000133e:	89fb      	ldrh	r3, [r7, #14]
20001340:	f103 0301 	add.w	r3, r3, #1
20001344:	81fb      	strh	r3, [r7, #14]
20001346:	89fa      	ldrh	r2, [r7, #14]
20001348:	88f9      	ldrh	r1, [r7, #6]
2000134a:	887b      	ldrh	r3, [r7, #2]
2000134c:	440b      	add	r3, r1
2000134e:	429a      	cmp	r2, r3
20001350:	dbe0      	blt.n	20001314 <drawRectanglePixel+0x14>
	        writeLine(i, y, i, y+h-1, color);
	    }
}		
20001352:	f107 0710 	add.w	r7, r7, #16
20001356:	46bd      	mov	sp, r7
20001358:	bd80      	pop	{r7, pc}
2000135a:	bf00      	nop

2000135c <drawFillScreen>:

void drawFillScreen(uint16_t color){
2000135c:	b580      	push	{r7, lr}
2000135e:	b084      	sub	sp, #16
20001360:	af00      	add	r7, sp, #0
20001362:	4603      	mov	r3, r0
20001364:	80fb      	strh	r3, [r7, #6]
	int i, j;
	//drawRectanglePixel(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT, color);
	set_SPI_CS();
20001366:	f000 fa23 	bl	200017b0 <set_SPI_CS>
	setAddr(0, 0, ILI9341_TFTWIDTH-1, ILI9341_TFTHEIGHT-1);
2000136a:	f04f 0000 	mov.w	r0, #0
2000136e:	f04f 0100 	mov.w	r1, #0
20001372:	f04f 02ef 	mov.w	r2, #239	; 0xef
20001376:	f240 133f 	movw	r3, #319	; 0x13f
2000137a:	f000 f8a7 	bl	200014cc <setAddr>
	set_DC_HIGH();
2000137e:	f000 fa2f 	bl	200017e0 <set_DC_HIGH>
	for(i = 0; i<ILI9341_TFTWIDTH; i++){
20001382:	f04f 0300 	mov.w	r3, #0
20001386:	60bb      	str	r3, [r7, #8]
20001388:	e018      	b.n	200013bc <drawFillScreen+0x60>
		for (j =0; j<ILI9341_TFTHEIGHT; j++){
2000138a:	f04f 0300 	mov.w	r3, #0
2000138e:	60fb      	str	r3, [r7, #12]
20001390:	e007      	b.n	200013a2 <drawFillScreen+0x46>
			sendSPI16(color);
20001392:	88fb      	ldrh	r3, [r7, #6]
20001394:	4618      	mov	r0, r3
20001396:	f000 f9ef 	bl	20001778 <sendSPI16>
	//drawRectanglePixel(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT, color);
	set_SPI_CS();
	setAddr(0, 0, ILI9341_TFTWIDTH-1, ILI9341_TFTHEIGHT-1);
	set_DC_HIGH();
	for(i = 0; i<ILI9341_TFTWIDTH; i++){
		for (j =0; j<ILI9341_TFTHEIGHT; j++){
2000139a:	68fb      	ldr	r3, [r7, #12]
2000139c:	f103 0301 	add.w	r3, r3, #1
200013a0:	60fb      	str	r3, [r7, #12]
200013a2:	68fa      	ldr	r2, [r7, #12]
200013a4:	f240 133f 	movw	r3, #319	; 0x13f
200013a8:	429a      	cmp	r2, r3
200013aa:	ddf2      	ble.n	20001392 <drawFillScreen+0x36>
			sendSPI16(color);
		}
		sendSPI16(color);
200013ac:	88fb      	ldrh	r3, [r7, #6]
200013ae:	4618      	mov	r0, r3
200013b0:	f000 f9e2 	bl	20001778 <sendSPI16>
	int i, j;
	//drawRectanglePixel(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT, color);
	set_SPI_CS();
	setAddr(0, 0, ILI9341_TFTWIDTH-1, ILI9341_TFTHEIGHT-1);
	set_DC_HIGH();
	for(i = 0; i<ILI9341_TFTWIDTH; i++){
200013b4:	68bb      	ldr	r3, [r7, #8]
200013b6:	f103 0301 	add.w	r3, r3, #1
200013ba:	60bb      	str	r3, [r7, #8]
200013bc:	68bb      	ldr	r3, [r7, #8]
200013be:	2bef      	cmp	r3, #239	; 0xef
200013c0:	dde3      	ble.n	2000138a <drawFillScreen+0x2e>
			sendSPI16(color);
		}
		sendSPI16(color);
	}

	clear_SPI_CS();
200013c2:	f000 fa01 	bl	200017c8 <clear_SPI_CS>
}
200013c6:	f107 0710 	add.w	r7, r7, #16
200013ca:	46bd      	mov	sp, r7
200013cc:	bd80      	pop	{r7, pc}
200013ce:	bf00      	nop

200013d0 <drawText1>:

void drawText1(uint16_t color){
200013d0:	b580      	push	{r7, lr}
200013d2:	b084      	sub	sp, #16
200013d4:	af02      	add	r7, sp, #8
200013d6:	4603      	mov	r3, r0
200013d8:	80fb      	strh	r3, [r7, #6]
	//T
	drawRectanglePixel(70, 220, 5, 25, color);
200013da:	88fb      	ldrh	r3, [r7, #6]
200013dc:	9300      	str	r3, [sp, #0]
200013de:	f04f 0046 	mov.w	r0, #70	; 0x46
200013e2:	f04f 01dc 	mov.w	r1, #220	; 0xdc
200013e6:	f04f 0205 	mov.w	r2, #5
200013ea:	f04f 0319 	mov.w	r3, #25
200013ee:	f7ff ff87 	bl	20001300 <drawRectanglePixel>
	drawRectanglePixel(40, 230, 30, 5, color);
200013f2:	88fb      	ldrh	r3, [r7, #6]
200013f4:	9300      	str	r3, [sp, #0]
200013f6:	f04f 0028 	mov.w	r0, #40	; 0x28
200013fa:	f04f 01e6 	mov.w	r1, #230	; 0xe6
200013fe:	f04f 021e 	mov.w	r2, #30
20001402:	f04f 0305 	mov.w	r3, #5
20001406:	f7ff ff7b 	bl	20001300 <drawRectanglePixel>


}
2000140a:	f107 0708 	add.w	r7, r7, #8
2000140e:	46bd      	mov	sp, r7
20001410:	bd80      	pop	{r7, pc}
20001412:	bf00      	nop

20001414 <drawText2>:

void drawText2(uint16_t color){
20001414:	b580      	push	{r7, lr}
20001416:	b084      	sub	sp, #16
20001418:	af02      	add	r7, sp, #8
2000141a:	4603      	mov	r3, r0
2000141c:	80fb      	strh	r3, [r7, #6]
	//C
	drawRectanglePixel(40, 70, 5, 20, color);
2000141e:	88fb      	ldrh	r3, [r7, #6]
20001420:	9300      	str	r3, [sp, #0]
20001422:	f04f 0028 	mov.w	r0, #40	; 0x28
20001426:	f04f 0146 	mov.w	r1, #70	; 0x46
2000142a:	f04f 0205 	mov.w	r2, #5
2000142e:	f04f 0314 	mov.w	r3, #20
20001432:	f7ff ff65 	bl	20001300 <drawRectanglePixel>
	drawRectanglePixel(40, 70, 30, 5, color);
20001436:	88fb      	ldrh	r3, [r7, #6]
20001438:	9300      	str	r3, [sp, #0]
2000143a:	f04f 0028 	mov.w	r0, #40	; 0x28
2000143e:	f04f 0146 	mov.w	r1, #70	; 0x46
20001442:	f04f 021e 	mov.w	r2, #30
20001446:	f04f 0305 	mov.w	r3, #5
2000144a:	f7ff ff59 	bl	20001300 <drawRectanglePixel>
	drawRectanglePixel(65, 70, 5, 20, color);
2000144e:	88fb      	ldrh	r3, [r7, #6]
20001450:	9300      	str	r3, [sp, #0]
20001452:	f04f 0041 	mov.w	r0, #65	; 0x41
20001456:	f04f 0146 	mov.w	r1, #70	; 0x46
2000145a:	f04f 0205 	mov.w	r2, #5
2000145e:	f04f 0314 	mov.w	r3, #20
20001462:	f7ff ff4d 	bl	20001300 <drawRectanglePixel>

}
20001466:	f107 0708 	add.w	r7, r7, #8
2000146a:	46bd      	mov	sp, r7
2000146c:	bd80      	pop	{r7, pc}
2000146e:	bf00      	nop

20001470 <drawText3>:

void drawText3(uint16_t color){
20001470:	b580      	push	{r7, lr}
20001472:	b084      	sub	sp, #16
20001474:	af02      	add	r7, sp, #8
20001476:	4603      	mov	r3, r0
20001478:	80fb      	strh	r3, [r7, #6]
	//F
	drawRectanglePixel(160, 160, 30, 5, color);
2000147a:	88fb      	ldrh	r3, [r7, #6]
2000147c:	9300      	str	r3, [sp, #0]
2000147e:	f04f 00a0 	mov.w	r0, #160	; 0xa0
20001482:	f04f 01a0 	mov.w	r1, #160	; 0xa0
20001486:	f04f 021e 	mov.w	r2, #30
2000148a:	f04f 0305 	mov.w	r3, #5
2000148e:	f7ff ff37 	bl	20001300 <drawRectanglePixel>
	drawRectanglePixel(190, 160, 5, 20, color);
20001492:	88fb      	ldrh	r3, [r7, #6]
20001494:	9300      	str	r3, [sp, #0]
20001496:	f04f 00be 	mov.w	r0, #190	; 0xbe
2000149a:	f04f 01a0 	mov.w	r1, #160	; 0xa0
2000149e:	f04f 0205 	mov.w	r2, #5
200014a2:	f04f 0314 	mov.w	r3, #20
200014a6:	f7ff ff2b 	bl	20001300 <drawRectanglePixel>
	drawRectanglePixel(175, 160, 5, 20, color);
200014aa:	88fb      	ldrh	r3, [r7, #6]
200014ac:	9300      	str	r3, [sp, #0]
200014ae:	f04f 00af 	mov.w	r0, #175	; 0xaf
200014b2:	f04f 01a0 	mov.w	r1, #160	; 0xa0
200014b6:	f04f 0205 	mov.w	r2, #5
200014ba:	f04f 0314 	mov.w	r3, #20
200014be:	f7ff ff1f 	bl	20001300 <drawRectanglePixel>
}
200014c2:	f107 0708 	add.w	r7, r7, #8
200014c6:	46bd      	mov	sp, r7
200014c8:	bd80      	pop	{r7, pc}
200014ca:	bf00      	nop

200014cc <setAddr>:

void setAddr(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1){
200014cc:	b580      	push	{r7, lr}
200014ce:	b082      	sub	sp, #8
200014d0:	af00      	add	r7, sp, #0
200014d2:	80f8      	strh	r0, [r7, #6]
200014d4:	80b9      	strh	r1, [r7, #4]
200014d6:	807a      	strh	r2, [r7, #2]
200014d8:	803b      	strh	r3, [r7, #0]
	
	sendCommandOnly(ILI9341_CASET);
200014da:	f04f 002a 	mov.w	r0, #42	; 0x2a
200014de:	f000 f86d 	bl	200015bc <sendCommandOnly>
	sendSPI16(x0);
200014e2:	88fb      	ldrh	r3, [r7, #6]
200014e4:	4618      	mov	r0, r3
200014e6:	f000 f947 	bl	20001778 <sendSPI16>
	sendSPI16(x1);
200014ea:	887b      	ldrh	r3, [r7, #2]
200014ec:	4618      	mov	r0, r3
200014ee:	f000 f943 	bl	20001778 <sendSPI16>
	sendCommandOnly(ILI9341_PASET);
200014f2:	f04f 002b 	mov.w	r0, #43	; 0x2b
200014f6:	f000 f861 	bl	200015bc <sendCommandOnly>
	sendSPI16(y0);
200014fa:	88bb      	ldrh	r3, [r7, #4]
200014fc:	4618      	mov	r0, r3
200014fe:	f000 f93b 	bl	20001778 <sendSPI16>
	sendSPI16(y1);
20001502:	883b      	ldrh	r3, [r7, #0]
20001504:	4618      	mov	r0, r3
20001506:	f000 f937 	bl	20001778 <sendSPI16>
	sendCommandOnly(ILI9341_RAMWR);
2000150a:	f04f 002c 	mov.w	r0, #44	; 0x2c
2000150e:	f000 f855 	bl	200015bc <sendCommandOnly>
}
20001512:	f107 0708 	add.w	r7, r7, #8
20001516:	46bd      	mov	sp, r7
20001518:	bd80      	pop	{r7, pc}
2000151a:	bf00      	nop

2000151c <sendCommand>:

void sendCommand(uint8_t commandByte, uint8_t *dataBytes, uint8_t numDataBytes){
2000151c:	b580      	push	{r7, lr}
2000151e:	b086      	sub	sp, #24
20001520:	af00      	add	r7, sp, #0
20001522:	60b9      	str	r1, [r7, #8]
20001524:	4613      	mov	r3, r2
20001526:	4602      	mov	r2, r0
20001528:	73fa      	strb	r2, [r7, #15]
2000152a:	71fb      	strb	r3, [r7, #7]
		int i=0;
2000152c:	f04f 0300 	mov.w	r3, #0
20001530:	617b      	str	r3, [r7, #20]
		configureSPI(8);
20001532:	f04f 0008 	mov.w	r0, #8
20001536:	f000 f8f5 	bl	20001724 <configureSPI>

	    set_DC_LOW(); // Command mode
2000153a:	f000 f95b 	bl	200017f4 <set_DC_LOW>
	    sendSPI(commandByte); // Send the command byte
2000153e:	7bfb      	ldrb	r3, [r7, #15]
20001540:	4618      	mov	r0, r3
20001542:	f000 f907 	bl	20001754 <sendSPI>

	    set_DC_HIGH();
20001546:	f000 f94b 	bl	200017e0 <set_DC_HIGH>
	    for (i=0; i<numDataBytes; i++) {
2000154a:	f04f 0300 	mov.w	r3, #0
2000154e:	617b      	str	r3, [r7, #20]
20001550:	e00c      	b.n	2000156c <sendCommand+0x50>
	      sendSPI(*dataBytes); // Send the data bytes
20001552:	68bb      	ldr	r3, [r7, #8]
20001554:	781b      	ldrb	r3, [r3, #0]
20001556:	4618      	mov	r0, r3
20001558:	f000 f8fc 	bl	20001754 <sendSPI>
	      dataBytes++;
2000155c:	68bb      	ldr	r3, [r7, #8]
2000155e:	f103 0301 	add.w	r3, r3, #1
20001562:	60bb      	str	r3, [r7, #8]

	    set_DC_LOW(); // Command mode
	    sendSPI(commandByte); // Send the command byte

	    set_DC_HIGH();
	    for (i=0; i<numDataBytes; i++) {
20001564:	697b      	ldr	r3, [r7, #20]
20001566:	f103 0301 	add.w	r3, r3, #1
2000156a:	617b      	str	r3, [r7, #20]
2000156c:	79fa      	ldrb	r2, [r7, #7]
2000156e:	697b      	ldr	r3, [r7, #20]
20001570:	429a      	cmp	r2, r3
20001572:	dcee      	bgt.n	20001552 <sendCommand+0x36>
	      sendSPI(*dataBytes); // Send the data bytes
	      dataBytes++;
	    }
}
20001574:	f107 0718 	add.w	r7, r7, #24
20001578:	46bd      	mov	sp, r7
2000157a:	bd80      	pop	{r7, pc}

2000157c <delay>:
		dataBytes++;
	}
	clear_SPI_CS();
}

void delay(uint32_t time){
2000157c:	b580      	push	{r7, lr}
2000157e:	b082      	sub	sp, #8
20001580:	af00      	add	r7, sp, #0
20001582:	6078      	str	r0, [r7, #4]

	MSS_TIM1_init(MSS_TIMER_ONE_SHOT_MODE);
20001584:	f04f 0001 	mov.w	r0, #1
20001588:	f7ff fca6 	bl	20000ed8 <MSS_TIM1_init>
	MSS_TIM1_load_immediate(time*100000);
2000158c:	687a      	ldr	r2, [r7, #4]
2000158e:	f248 63a0 	movw	r3, #34464	; 0x86a0
20001592:	f2c0 0301 	movt	r3, #1
20001596:	fb03 f302 	mul.w	r3, r3, r2
2000159a:	4618      	mov	r0, r3
2000159c:	f7ff fd06 	bl	20000fac <MSS_TIM1_load_immediate>
	MSS_TIM1_start();
200015a0:	f7ff fcdc 	bl	20000f5c <MSS_TIM1_start>

	while(MSS_TIM1_get_current_value()>0){
200015a4:	f7ff fcf6 	bl	20000f94 <MSS_TIM1_get_current_value>
200015a8:	4603      	mov	r3, r0
200015aa:	2b00      	cmp	r3, #0
200015ac:	d1fa      	bne.n	200015a4 <delay+0x28>
		//do nothing

	}
	MSS_TIM1_stop();
200015ae:	f7ff fce3 	bl	20000f78 <MSS_TIM1_stop>
}
200015b2:	f107 0708 	add.w	r7, r7, #8
200015b6:	46bd      	mov	sp, r7
200015b8:	bd80      	pop	{r7, pc}
200015ba:	bf00      	nop

200015bc <sendCommandOnly>:
	}
	MSS_TIM1_stop();
}


void sendCommandOnly(uint8_t commandByte){
200015bc:	b580      	push	{r7, lr}
200015be:	b082      	sub	sp, #8
200015c0:	af00      	add	r7, sp, #0
200015c2:	4603      	mov	r3, r0
200015c4:	71fb      	strb	r3, [r7, #7]

	set_DC_LOW();
200015c6:	f000 f915 	bl	200017f4 <set_DC_LOW>
	configureSPI(8);
200015ca:	f04f 0008 	mov.w	r0, #8
200015ce:	f000 f8a9 	bl	20001724 <configureSPI>
	sendSPI(commandByte);
200015d2:	79fb      	ldrb	r3, [r7, #7]
200015d4:	4618      	mov	r0, r3
200015d6:	f000 f8bd 	bl	20001754 <sendSPI>
	set_DC_HIGH();
200015da:	f000 f901 	bl	200017e0 <set_DC_HIGH>
}
200015de:	f107 0708 	add.w	r7, r7, #8
200015e2:	46bd      	mov	sp, r7
200015e4:	bd80      	pop	{r7, pc}
200015e6:	bf00      	nop

200015e8 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color){
200015e8:	b580      	push	{r7, lr}
200015ea:	b088      	sub	sp, #32
200015ec:	af00      	add	r7, sp, #0
200015ee:	80f8      	strh	r0, [r7, #6]
200015f0:	80b9      	strh	r1, [r7, #4]
200015f2:	807a      	strh	r2, [r7, #2]
200015f4:	803b      	strh	r3, [r7, #0]

    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
200015f6:	f9b7 2000 	ldrsh.w	r2, [r7]
200015fa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
200015fe:	ebc3 0302 	rsb	r3, r3, r2
20001602:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
20001606:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
2000160a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
2000160e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
20001612:	ebc3 0301 	rsb	r3, r3, r1
20001616:	2b00      	cmp	r3, #0
20001618:	bfb8      	it	lt
2000161a:	425b      	neglt	r3, r3
2000161c:	429a      	cmp	r2, r3
2000161e:	bfd4      	ite	le
20001620:	2300      	movle	r3, #0
20001622:	2301      	movgt	r3, #1
20001624:	81fb      	strh	r3, [r7, #14]
    if (steep) {
20001626:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
2000162a:	2b00      	cmp	r3, #0
2000162c:	d00b      	beq.n	20001646 <writeLine+0x5e>
        _swap_int16_t(x0, y0);
2000162e:	88fb      	ldrh	r3, [r7, #6]
20001630:	833b      	strh	r3, [r7, #24]
20001632:	88bb      	ldrh	r3, [r7, #4]
20001634:	80fb      	strh	r3, [r7, #6]
20001636:	8b3b      	ldrh	r3, [r7, #24]
20001638:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
2000163a:	887b      	ldrh	r3, [r7, #2]
2000163c:	837b      	strh	r3, [r7, #26]
2000163e:	883b      	ldrh	r3, [r7, #0]
20001640:	807b      	strh	r3, [r7, #2]
20001642:	8b7b      	ldrh	r3, [r7, #26]
20001644:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
20001646:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
2000164a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
2000164e:	429a      	cmp	r2, r3
20001650:	dd0b      	ble.n	2000166a <writeLine+0x82>
        _swap_int16_t(x0, x1);
20001652:	88fb      	ldrh	r3, [r7, #6]
20001654:	83bb      	strh	r3, [r7, #28]
20001656:	887b      	ldrh	r3, [r7, #2]
20001658:	80fb      	strh	r3, [r7, #6]
2000165a:	8bbb      	ldrh	r3, [r7, #28]
2000165c:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
2000165e:	88bb      	ldrh	r3, [r7, #4]
20001660:	83fb      	strh	r3, [r7, #30]
20001662:	883b      	ldrh	r3, [r7, #0]
20001664:	80bb      	strh	r3, [r7, #4]
20001666:	8bfb      	ldrh	r3, [r7, #30]
20001668:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
2000166a:	887a      	ldrh	r2, [r7, #2]
2000166c:	88fb      	ldrh	r3, [r7, #6]
2000166e:	ebc3 0302 	rsb	r3, r3, r2
20001672:	b29b      	uxth	r3, r3
20001674:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
20001676:	f9b7 2000 	ldrsh.w	r2, [r7]
2000167a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
2000167e:	ebc3 0302 	rsb	r3, r3, r2
20001682:	2b00      	cmp	r3, #0
20001684:	bfb8      	it	lt
20001686:	425b      	neglt	r3, r3
20001688:	827b      	strh	r3, [r7, #18]

    int16_t err = dx / 2;
2000168a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
2000168e:	ea4f 72d3 	mov.w	r2, r3, lsr #31
20001692:	4413      	add	r3, r2
20001694:	ea4f 0363 	mov.w	r3, r3, asr #1
20001698:	82bb      	strh	r3, [r7, #20]
    int16_t ystep;

    if (y0 < y1) {
2000169a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
2000169e:	f9b7 3000 	ldrsh.w	r3, [r7]
200016a2:	429a      	cmp	r2, r3
200016a4:	da03      	bge.n	200016ae <writeLine+0xc6>
        ystep = 1;
200016a6:	f04f 0301 	mov.w	r3, #1
200016aa:	82fb      	strh	r3, [r7, #22]
    } else {
        ystep = -1;
    }

    for (; x0<=x1; x0++) {
200016ac:	e030      	b.n	20001710 <writeLine+0x128>
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
200016ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
200016b2:	82fb      	strh	r3, [r7, #22]
    }

    for (; x0<=x1; x0++) {
200016b4:	e02c      	b.n	20001710 <writeLine+0x128>
        if (steep) {
200016b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
200016ba:	2b00      	cmp	r3, #0
200016bc:	d008      	beq.n	200016d0 <writeLine+0xe8>
            drawPixel(y0, x0, color);
200016be:	88b9      	ldrh	r1, [r7, #4]
200016c0:	88fa      	ldrh	r2, [r7, #6]
200016c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
200016c4:	4608      	mov	r0, r1
200016c6:	4611      	mov	r1, r2
200016c8:	461a      	mov	r2, r3
200016ca:	f7ff fdb5 	bl	20001238 <drawPixel>
200016ce:	e007      	b.n	200016e0 <writeLine+0xf8>
        } else {
            drawPixel(x0, y0, color);
200016d0:	88f9      	ldrh	r1, [r7, #6]
200016d2:	88ba      	ldrh	r2, [r7, #4]
200016d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
200016d6:	4608      	mov	r0, r1
200016d8:	4611      	mov	r1, r2
200016da:	461a      	mov	r2, r3
200016dc:	f7ff fdac 	bl	20001238 <drawPixel>
        }
        err -= dy;
200016e0:	8aba      	ldrh	r2, [r7, #20]
200016e2:	8a7b      	ldrh	r3, [r7, #18]
200016e4:	ebc3 0302 	rsb	r3, r3, r2
200016e8:	b29b      	uxth	r3, r3
200016ea:	82bb      	strh	r3, [r7, #20]
        if (err < 0) {
200016ec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
200016f0:	2b00      	cmp	r3, #0
200016f2:	da09      	bge.n	20001708 <writeLine+0x120>
            y0 += ystep;
200016f4:	88ba      	ldrh	r2, [r7, #4]
200016f6:	8afb      	ldrh	r3, [r7, #22]
200016f8:	4413      	add	r3, r2
200016fa:	b29b      	uxth	r3, r3
200016fc:	80bb      	strh	r3, [r7, #4]
            err += dx;
200016fe:	8aba      	ldrh	r2, [r7, #20]
20001700:	8a3b      	ldrh	r3, [r7, #16]
20001702:	4413      	add	r3, r2
20001704:	b29b      	uxth	r3, r3
20001706:	82bb      	strh	r3, [r7, #20]
        ystep = 1;
    } else {
        ystep = -1;
    }

    for (; x0<=x1; x0++) {
20001708:	88fb      	ldrh	r3, [r7, #6]
2000170a:	f103 0301 	add.w	r3, r3, #1
2000170e:	80fb      	strh	r3, [r7, #6]
20001710:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20001714:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
20001718:	429a      	cmp	r2, r3
2000171a:	ddcc      	ble.n	200016b6 <writeLine+0xce>
        if (err < 0) {
            y0 += ystep;
            err += dx;
        }
    }
}
2000171c:	f107 0720 	add.w	r7, r7, #32
20001720:	46bd      	mov	sp, r7
20001722:	bd80      	pop	{r7, pc}

20001724 <configureSPI>:


void configureSPI(uint8_t frameSize){
20001724:	b580      	push	{r7, lr}
20001726:	b084      	sub	sp, #16
20001728:	af02      	add	r7, sp, #8
2000172a:	4603      	mov	r3, r0
2000172c:	71fb      	strb	r3, [r7, #7]
	MSS_SPI_configure_master_mode(
2000172e:	79fb      	ldrb	r3, [r7, #7]
20001730:	9300      	str	r3, [sp, #0]
20001732:	f244 40dc 	movw	r0, #17628	; 0x44dc
20001736:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000173a:	f04f 0100 	mov.w	r1, #0
2000173e:	f04f 0200 	mov.w	r2, #0
20001742:	f04f 0302 	mov.w	r3, #2
20001746:	f000 fc8b 	bl	20002060 <MSS_SPI_configure_master_mode>
		MSS_SPI_SLAVE_0,
		MSS_SPI_MODE0,
		MSS_SPI_PCLK_DIV_8,
		frameSize
	);
}
2000174a:	f107 0708 	add.w	r7, r7, #8
2000174e:	46bd      	mov	sp, r7
20001750:	bd80      	pop	{r7, pc}
20001752:	bf00      	nop

20001754 <sendSPI>:

void sendSPI(uint8_t data){
20001754:	b580      	push	{r7, lr}
20001756:	b082      	sub	sp, #8
20001758:	af00      	add	r7, sp, #0
2000175a:	4603      	mov	r3, r0
2000175c:	71fb      	strb	r3, [r7, #7]
	
	MSS_SPI_transfer_frame( &g_mss_spi1, data);
2000175e:	79fb      	ldrb	r3, [r7, #7]
20001760:	f244 40dc 	movw	r0, #17628	; 0x44dc
20001764:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001768:	4619      	mov	r1, r3
2000176a:	f000 fda7 	bl	200022bc <MSS_SPI_transfer_frame>
	
}
2000176e:	f107 0708 	add.w	r7, r7, #8
20001772:	46bd      	mov	sp, r7
20001774:	bd80      	pop	{r7, pc}
20001776:	bf00      	nop

20001778 <sendSPI16>:

void sendSPI16(uint16_t data){
20001778:	b580      	push	{r7, lr}
2000177a:	b082      	sub	sp, #8
2000177c:	af00      	add	r7, sp, #0
2000177e:	4603      	mov	r3, r0
20001780:	80fb      	strh	r3, [r7, #6]
	MSS_SPI_transfer_frame(&g_mss_spi1, data>>8);
20001782:	88fb      	ldrh	r3, [r7, #6]
20001784:	ea4f 2313 	mov.w	r3, r3, lsr #8
20001788:	b29b      	uxth	r3, r3
2000178a:	f244 40dc 	movw	r0, #17628	; 0x44dc
2000178e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001792:	4619      	mov	r1, r3
20001794:	f000 fd92 	bl	200022bc <MSS_SPI_transfer_frame>
	MSS_SPI_transfer_frame(&g_mss_spi1, data);
20001798:	88fb      	ldrh	r3, [r7, #6]
2000179a:	f244 40dc 	movw	r0, #17628	; 0x44dc
2000179e:	f2c2 0000 	movt	r0, #8192	; 0x2000
200017a2:	4619      	mov	r1, r3
200017a4:	f000 fd8a 	bl	200022bc <MSS_SPI_transfer_frame>
}
200017a8:	f107 0708 	add.w	r7, r7, #8
200017ac:	46bd      	mov	sp, r7
200017ae:	bd80      	pop	{r7, pc}

200017b0 <set_SPI_CS>:

void set_SPI_CS(){
200017b0:	b580      	push	{r7, lr}
200017b2:	af00      	add	r7, sp, #0
	MSS_SPI_set_slave_select(&g_mss_spi1, MSS_SPI_SLAVE_0);
200017b4:	f244 40dc 	movw	r0, #17628	; 0x44dc
200017b8:	f2c2 0000 	movt	r0, #8192	; 0x2000
200017bc:	f04f 0100 	mov.w	r1, #0
200017c0:	f000 fcce 	bl	20002160 <MSS_SPI_set_slave_select>
}
200017c4:	bd80      	pop	{r7, pc}
200017c6:	bf00      	nop

200017c8 <clear_SPI_CS>:

void clear_SPI_CS(){
200017c8:	b580      	push	{r7, lr}
200017ca:	af00      	add	r7, sp, #0
	MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
200017cc:	f244 40dc 	movw	r0, #17628	; 0x44dc
200017d0:	f2c2 0000 	movt	r0, #8192	; 0x2000
200017d4:	f04f 0100 	mov.w	r1, #0
200017d8:	f000 fd28 	bl	2000222c <MSS_SPI_clear_slave_select>
}
200017dc:	bd80      	pop	{r7, pc}
200017de:	bf00      	nop

200017e0 <set_DC_HIGH>:

void set_DC_HIGH(){
200017e0:	b580      	push	{r7, lr}
200017e2:	af00      	add	r7, sp, #0
	MSS_GPIO_set_output(DC, 1);
200017e4:	f04f 0000 	mov.w	r0, #0
200017e8:	f04f 0101 	mov.w	r1, #1
200017ec:	f001 fc9a 	bl	20003124 <MSS_GPIO_set_output>
}
200017f0:	bd80      	pop	{r7, pc}
200017f2:	bf00      	nop

200017f4 <set_DC_LOW>:

void set_DC_LOW(){
200017f4:	b580      	push	{r7, lr}
200017f6:	af00      	add	r7, sp, #0
	MSS_GPIO_set_output(DC, 0);
200017f8:	f04f 0000 	mov.w	r0, #0
200017fc:	f04f 0100 	mov.w	r1, #0
20001800:	f001 fc90 	bl	20003124 <MSS_GPIO_set_output>
}
20001804:	bd80      	pop	{r7, pc}
20001806:	bf00      	nop

20001808 <writeRegister8>:
	else{
		ACE_set_sdd_value(SDD1_OUT, 0x00);
	}
}

void writeRegister8(uint8_t reg, uint8_t val){
20001808:	b580      	push	{r7, lr}
2000180a:	b086      	sub	sp, #24
2000180c:	af02      	add	r7, sp, #8
2000180e:	4602      	mov	r2, r0
20001810:	460b      	mov	r3, r1
20001812:	71fa      	strb	r2, [r7, #7]
20001814:	71bb      	strb	r3, [r7, #6]
	uint8_t transmit_buf[2] = {reg, val};
20001816:	79fb      	ldrb	r3, [r7, #7]
20001818:	733b      	strb	r3, [r7, #12]
2000181a:	79bb      	ldrb	r3, [r7, #6]
2000181c:	737b      	strb	r3, [r7, #13]
	MSS_I2C_write
2000181e:	f107 030c 	add.w	r3, r7, #12
20001822:	f04f 0200 	mov.w	r2, #0
20001826:	9200      	str	r2, [sp, #0]
20001828:	f244 6058 	movw	r0, #18008	; 0x4658
2000182c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001830:	f04f 0141 	mov.w	r1, #65	; 0x41
20001834:	461a      	mov	r2, r3
20001836:	f04f 0302 	mov.w	r3, #2
2000183a:	f001 fb3b 	bl	20002eb4 <MSS_I2C_write>
		transmit_buf,
		sizeof(transmit_buf),
		MSS_I2C_RELEASE_BUS
	);

	MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_NO_TIMEOUT);
2000183e:	f244 6058 	movw	r0, #18008	; 0x4658
20001842:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001846:	f04f 0100 	mov.w	r1, #0
2000184a:	f000 ff9f 	bl	2000278c <MSS_I2C_wait_complete>
	return;
}
2000184e:	f107 0710 	add.w	r7, r7, #16
20001852:	46bd      	mov	sp, r7
20001854:	bd80      	pop	{r7, pc}
20001856:	bf00      	nop

20001858 <readRegister8>:

uint8_t readRegister8(uint8_t reg){
20001858:	b580      	push	{r7, lr}
2000185a:	b086      	sub	sp, #24
2000185c:	af02      	add	r7, sp, #8
2000185e:	4603      	mov	r3, r0
20001860:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	MSS_I2C_write
20001862:	f107 0307 	add.w	r3, r7, #7
20001866:	f04f 0200 	mov.w	r2, #0
2000186a:	9200      	str	r2, [sp, #0]
2000186c:	f244 6058 	movw	r0, #18008	; 0x4658
20001870:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001874:	f04f 0141 	mov.w	r1, #65	; 0x41
20001878:	461a      	mov	r2, r3
2000187a:	f04f 0301 	mov.w	r3, #1
2000187e:	f001 fb19 	bl	20002eb4 <MSS_I2C_write>
		TOUCH_ADDR,
		&reg,
		1,
		MSS_I2C_RELEASE_BUS
	);
	MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_NO_TIMEOUT);
20001882:	f244 6058 	movw	r0, #18008	; 0x4658
20001886:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000188a:	f04f 0100 	mov.w	r1, #0
2000188e:	f000 ff7d 	bl	2000278c <MSS_I2C_wait_complete>

	MSS_I2C_read
20001892:	f107 030f 	add.w	r3, r7, #15
20001896:	f04f 0200 	mov.w	r2, #0
2000189a:	9200      	str	r2, [sp, #0]
2000189c:	f244 6058 	movw	r0, #18008	; 0x4658
200018a0:	f2c2 0000 	movt	r0, #8192	; 0x2000
200018a4:	f04f 0141 	mov.w	r1, #65	; 0x41
200018a8:	461a      	mov	r2, r3
200018aa:	f04f 0301 	mov.w	r3, #1
200018ae:	f001 fa91 	bl	20002dd4 <MSS_I2C_read>
			TOUCH_ADDR,
			&data,
			1,
			MSS_I2C_RELEASE_BUS
	 );
	MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_NO_TIMEOUT);
200018b2:	f244 6058 	movw	r0, #18008	; 0x4658
200018b6:	f2c2 0000 	movt	r0, #8192	; 0x2000
200018ba:	f04f 0100 	mov.w	r1, #0
200018be:	f000 ff65 	bl	2000278c <MSS_I2C_wait_complete>
	return data;
200018c2:	7bfb      	ldrb	r3, [r7, #15]
}
200018c4:	4618      	mov	r0, r3
200018c6:	f107 0710 	add.w	r7, r7, #16
200018ca:	46bd      	mov	sp, r7
200018cc:	bd80      	pop	{r7, pc}
200018ce:	bf00      	nop

200018d0 <bufferEmpty>:

int bufferEmpty(){
200018d0:	b580      	push	{r7, lr}
200018d2:	af00      	add	r7, sp, #0
	return (readRegister8(STMPE_FIFO_STA) & STMPE_FIFO_STA_EMPTY);
200018d4:	f04f 004b 	mov.w	r0, #75	; 0x4b
200018d8:	f7ff ffbe 	bl	20001858 <readRegister8>
200018dc:	4603      	mov	r3, r0
200018de:	f003 0320 	and.w	r3, r3, #32
}
200018e2:	4618      	mov	r0, r3
200018e4:	bd80      	pop	{r7, pc}
200018e6:	bf00      	nop

200018e8 <scaleX>:

uint8_t scaleX(uint16_t x){
200018e8:	b580      	push	{r7, lr}
200018ea:	b084      	sub	sp, #16
200018ec:	af00      	add	r7, sp, #0
200018ee:	4603      	mov	r3, r0
200018f0:	80fb      	strh	r3, [r7, #6]
	float temp = x/240.0;
200018f2:	88fb      	ldrh	r3, [r7, #6]
200018f4:	4618      	mov	r0, r3
200018f6:	f002 f817 	bl	20003928 <__aeabi_i2d>
200018fa:	4602      	mov	r2, r0
200018fc:	460b      	mov	r3, r1
200018fe:	4610      	mov	r0, r2
20001900:	4619      	mov	r1, r3
20001902:	f04f 0200 	mov.w	r2, #0
20001906:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
2000190a:	f503 03dc 	add.w	r3, r3, #7208960	; 0x6e0000
2000190e:	f002 f99b 	bl	20003c48 <__aeabi_ddiv>
20001912:	4602      	mov	r2, r0
20001914:	460b      	mov	r3, r1
20001916:	4610      	mov	r0, r2
20001918:	4619      	mov	r1, r3
2000191a:	f002 fa7d 	bl	20003e18 <__aeabi_d2f>
2000191e:	4603      	mov	r3, r0
20001920:	60fb      	str	r3, [r7, #12]
	temp *= 255;
20001922:	68f8      	ldr	r0, [r7, #12]
20001924:	4907      	ldr	r1, [pc, #28]	; (20001944 <scaleX+0x5c>)
20001926:	f002 fac7 	bl	20003eb8 <__aeabi_fmul>
2000192a:	4603      	mov	r3, r0
2000192c:	60fb      	str	r3, [r7, #12]
	return (uint8_t) temp;
2000192e:	68f8      	ldr	r0, [r7, #12]
20001930:	f002 fc12 	bl	20004158 <__aeabi_f2uiz>
20001934:	4603      	mov	r3, r0
20001936:	b2db      	uxtb	r3, r3
}
20001938:	4618      	mov	r0, r3
2000193a:	f107 0710 	add.w	r7, r7, #16
2000193e:	46bd      	mov	sp, r7
20001940:	bd80      	pop	{r7, pc}
20001942:	bf00      	nop
20001944:	437f0000 	.word	0x437f0000

20001948 <scaleY>:

uint8_t scaleY(uint16_t y){
20001948:	b580      	push	{r7, lr}
2000194a:	b084      	sub	sp, #16
2000194c:	af00      	add	r7, sp, #0
2000194e:	4603      	mov	r3, r0
20001950:	80fb      	strh	r3, [r7, #6]
	float temp = y/320.0;
20001952:	88fb      	ldrh	r3, [r7, #6]
20001954:	4618      	mov	r0, r3
20001956:	f001 ffe7 	bl	20003928 <__aeabi_i2d>
2000195a:	4602      	mov	r2, r0
2000195c:	460b      	mov	r3, r1
2000195e:	4610      	mov	r0, r2
20001960:	4619      	mov	r1, r3
20001962:	f04f 0200 	mov.w	r2, #0
20001966:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
2000196a:	f503 03e8 	add.w	r3, r3, #7602176	; 0x740000
2000196e:	f002 f96b 	bl	20003c48 <__aeabi_ddiv>
20001972:	4602      	mov	r2, r0
20001974:	460b      	mov	r3, r1
20001976:	4610      	mov	r0, r2
20001978:	4619      	mov	r1, r3
2000197a:	f002 fa4d 	bl	20003e18 <__aeabi_d2f>
2000197e:	4603      	mov	r3, r0
20001980:	60fb      	str	r3, [r7, #12]
	temp *= 255;
20001982:	68f8      	ldr	r0, [r7, #12]
20001984:	4907      	ldr	r1, [pc, #28]	; (200019a4 <scaleY+0x5c>)
20001986:	f002 fa97 	bl	20003eb8 <__aeabi_fmul>
2000198a:	4603      	mov	r3, r0
2000198c:	60fb      	str	r3, [r7, #12]
	return (uint8_t) temp;
2000198e:	68f8      	ldr	r0, [r7, #12]
20001990:	f002 fbe2 	bl	20004158 <__aeabi_f2uiz>
20001994:	4603      	mov	r3, r0
20001996:	b2db      	uxtb	r3, r3
}
20001998:	4618      	mov	r0, r3
2000199a:	f107 0710 	add.w	r7, r7, #16
2000199e:	46bd      	mov	sp, r7
200019a0:	bd80      	pop	{r7, pc}
200019a2:	bf00      	nop
200019a4:	437f0000 	.word	0x437f0000

200019a8 <sendMessage>:

uint8_t g_rx_buff[RX_BUFF_SIZE];

//Takes in an array of uint8_t containing address and destination address
//Constructs frame appropriately and sends it out
void sendMessage(uint8_t* inputMessage, uint8_t inputMessageLength, uint16_t destAddr) {
200019a8:	b580      	push	{r7, lr}
200019aa:	b08a      	sub	sp, #40	; 0x28
200019ac:	af00      	add	r7, sp, #0
200019ae:	6078      	str	r0, [r7, #4]
200019b0:	4613      	mov	r3, r2
200019b2:	460a      	mov	r2, r1
200019b4:	70fa      	strb	r2, [r7, #3]
200019b6:	803b      	strh	r3, [r7, #0]
	int i;
	uint8_t message[messageLength];
	message[0] = 0x7E;	//Delimiter, does not change
200019b8:	f04f 037e 	mov.w	r3, #126	; 0x7e
200019bc:	733b      	strb	r3, [r7, #12]
	message[1] = (messageLength - 4) >> 8;	//Length MSB
200019be:	f04f 0300 	mov.w	r3, #0
200019c2:	737b      	strb	r3, [r7, #13]
	message[2] = (messageLength - 4) & 0xFF;	//Length LSB
200019c4:	f04f 0310 	mov.w	r3, #16
200019c8:	73bb      	strb	r3, [r7, #14]
	message[3] = 0;	//Frame type: 0 = TX Request 64 bit addr
200019ca:	f04f 0300 	mov.w	r3, #0
200019ce:	73fb      	strb	r3, [r7, #15]
	message[4] = 1;	//Frame ID
200019d0:	f04f 0301 	mov.w	r3, #1
200019d4:	743b      	strb	r3, [r7, #16]
	//5-12: Destination addresses
	for(i = 5; i < 11; ++i) {
200019d6:	f04f 0305 	mov.w	r3, #5
200019da:	623b      	str	r3, [r7, #32]
200019dc:	e00b      	b.n	200019f6 <sendMessage+0x4e>
		message[i] = 0;
200019de:	6a3b      	ldr	r3, [r7, #32]
200019e0:	f107 0128 	add.w	r1, r7, #40	; 0x28
200019e4:	440b      	add	r3, r1
200019e6:	f04f 0200 	mov.w	r2, #0
200019ea:	f803 2c1c 	strb.w	r2, [r3, #-28]
	message[1] = (messageLength - 4) >> 8;	//Length MSB
	message[2] = (messageLength - 4) & 0xFF;	//Length LSB
	message[3] = 0;	//Frame type: 0 = TX Request 64 bit addr
	message[4] = 1;	//Frame ID
	//5-12: Destination addresses
	for(i = 5; i < 11; ++i) {
200019ee:	6a3b      	ldr	r3, [r7, #32]
200019f0:	f103 0301 	add.w	r3, r3, #1
200019f4:	623b      	str	r3, [r7, #32]
200019f6:	6a3b      	ldr	r3, [r7, #32]
200019f8:	2b0a      	cmp	r3, #10
200019fa:	ddf0      	ble.n	200019de <sendMessage+0x36>
		message[i] = 0;
	}
	message[11] = (destAddr >> 8) & 0xFF;
200019fc:	883b      	ldrh	r3, [r7, #0]
200019fe:	ea4f 2313 	mov.w	r3, r3, lsr #8
20001a02:	b29b      	uxth	r3, r3
20001a04:	b2db      	uxtb	r3, r3
20001a06:	75fb      	strb	r3, [r7, #23]
	message[12] = destAddr & 0xFF;
20001a08:	883b      	ldrh	r3, [r7, #0]
20001a0a:	b2db      	uxtb	r3, r3
20001a0c:	763b      	strb	r3, [r7, #24]
	message[13] = 0;	//Options
20001a0e:	f04f 0300 	mov.w	r3, #0
20001a12:	767b      	strb	r3, [r7, #25]
	for(i = 0; i < inputMessageLength; ++i) {
20001a14:	f04f 0300 	mov.w	r3, #0
20001a18:	623b      	str	r3, [r7, #32]
20001a1a:	e00f      	b.n	20001a3c <sendMessage+0x94>
		message[i + 14] = *(inputMessage + i * sizeof(uint8_t));
20001a1c:	6a3b      	ldr	r3, [r7, #32]
20001a1e:	f103 030e 	add.w	r3, r3, #14
20001a22:	6a39      	ldr	r1, [r7, #32]
20001a24:	687a      	ldr	r2, [r7, #4]
20001a26:	440a      	add	r2, r1
20001a28:	7812      	ldrb	r2, [r2, #0]
20001a2a:	f107 0128 	add.w	r1, r7, #40	; 0x28
20001a2e:	440b      	add	r3, r1
20001a30:	f803 2c1c 	strb.w	r2, [r3, #-28]
		message[i] = 0;
	}
	message[11] = (destAddr >> 8) & 0xFF;
	message[12] = destAddr & 0xFF;
	message[13] = 0;	//Options
	for(i = 0; i < inputMessageLength; ++i) {
20001a34:	6a3b      	ldr	r3, [r7, #32]
20001a36:	f103 0301 	add.w	r3, r3, #1
20001a3a:	623b      	str	r3, [r7, #32]
20001a3c:	78fa      	ldrb	r2, [r7, #3]
20001a3e:	6a3b      	ldr	r3, [r7, #32]
20001a40:	429a      	cmp	r2, r3
20001a42:	dceb      	bgt.n	20001a1c <sendMessage+0x74>
		message[i + 14] = *(inputMessage + i * sizeof(uint8_t));
	}
	uint8_t sum = 0;
20001a44:	f04f 0300 	mov.w	r3, #0
20001a48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for(i = 3; i < messageLength - 1; ++i) {
20001a4c:	f04f 0303 	mov.w	r3, #3
20001a50:	623b      	str	r3, [r7, #32]
20001a52:	e00e      	b.n	20001a72 <sendMessage+0xca>
		sum += message[i];
20001a54:	6a3b      	ldr	r3, [r7, #32]
20001a56:	f107 0228 	add.w	r2, r7, #40	; 0x28
20001a5a:	4413      	add	r3, r2
20001a5c:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
20001a60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
20001a64:	4413      	add	r3, r2
20001a66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	message[13] = 0;	//Options
	for(i = 0; i < inputMessageLength; ++i) {
		message[i + 14] = *(inputMessage + i * sizeof(uint8_t));
	}
	uint8_t sum = 0;
	for(i = 3; i < messageLength - 1; ++i) {
20001a6a:	6a3b      	ldr	r3, [r7, #32]
20001a6c:	f103 0301 	add.w	r3, r3, #1
20001a70:	623b      	str	r3, [r7, #32]
20001a72:	6a3b      	ldr	r3, [r7, #32]
20001a74:	2b12      	cmp	r3, #18
20001a76:	dded      	ble.n	20001a54 <sendMessage+0xac>
		sum += message[i];
	}
	message[messageLength - 1] = (0xFF - sum) & 0xFF;
20001a78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
20001a7c:	ea6f 0303 	mvn.w	r3, r3
20001a80:	b2db      	uxtb	r3, r3
20001a82:	77fb      	strb	r3, [r7, #31]
	MSS_UART_polled_tx(&g_mss_uart1, message, sizeof(message));
20001a84:	f107 030c 	add.w	r3, r7, #12
20001a88:	f244 408c 	movw	r0, #17548	; 0x448c
20001a8c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001a90:	4619      	mov	r1, r3
20001a92:	f04f 0214 	mov.w	r2, #20
20001a96:	f000 f817 	bl	20001ac8 <MSS_UART_polled_tx>
}
20001a9a:	f107 0728 	add.w	r7, r7, #40	; 0x28
20001a9e:	46bd      	mov	sp, r7
20001aa0:	bd80      	pop	{r7, pc}
20001aa2:	bf00      	nop

20001aa4 <uart1_rx_handler>:

//When something is received, trigger an interrupt that fills g_rx_buff with the received data
void uart1_rx_handler( mss_uart_instance_t * this_uart ) {
20001aa4:	b580      	push	{r7, lr}
20001aa6:	b082      	sub	sp, #8
20001aa8:	af00      	add	r7, sp, #0
20001aaa:	6078      	str	r0, [r7, #4]
      MSS_UART_get_rx( this_uart, &g_rx_buff, sizeof(g_rx_buff) );
20001aac:	6878      	ldr	r0, [r7, #4]
20001aae:	f244 414c 	movw	r1, #17484	; 0x444c
20001ab2:	f2c2 0100 	movt	r1, #8192	; 0x2000
20001ab6:	f04f 0240 	mov.w	r2, #64	; 0x40
20001aba:	f000 f85b 	bl	20001b74 <MSS_UART_get_rx>
}
20001abe:	f107 0708 	add.w	r7, r7, #8
20001ac2:	46bd      	mov	sp, r7
20001ac4:	bd80      	pop	{r7, pc}
20001ac6:	bf00      	nop

20001ac8 <MSS_UART_polled_tx>:
(
    mss_uart_instance_t * this_uart,
    const uint8_t * pbuff,
    uint32_t tx_size
)
{
20001ac8:	e92d 05f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl}
    uint32_t char_idx = 0U;
    uint32_t size_sent;
    uint8_t status;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20001acc:	f244 43b4 	movw	r3, #17588	; 0x44b4
20001ad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001ad4:	4298      	cmp	r0, r3
20001ad6:	d006      	beq.n	20001ae6 <MSS_UART_polled_tx+0x1e>
20001ad8:	f244 438c 	movw	r3, #17548	; 0x448c
20001adc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001ae0:	4298      	cmp	r0, r3
20001ae2:	d000      	beq.n	20001ae6 <MSS_UART_polled_tx+0x1e>
20001ae4:	be00      	bkpt	0x0000
    ASSERT( pbuff != ( (uint8_t *)0 ) );
20001ae6:	b901      	cbnz	r1, 20001aea <MSS_UART_polled_tx+0x22>
20001ae8:	be00      	bkpt	0x0000
    ASSERT( tx_size > 0U );
20001aea:	b902      	cbnz	r2, 20001aee <MSS_UART_polled_tx+0x26>
20001aec:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20001aee:	f244 43b4 	movw	r3, #17588	; 0x44b4
20001af2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001af6:	4298      	cmp	r0, r3
20001af8:	d005      	beq.n	20001b06 <MSS_UART_polled_tx+0x3e>
20001afa:	f244 438c 	movw	r3, #17548	; 0x448c
20001afe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001b02:	4298      	cmp	r0, r3
20001b04:	d133      	bne.n	20001b6e <MSS_UART_polled_tx+0xa6>
20001b06:	1e13      	subs	r3, r2, #0
20001b08:	bf18      	it	ne
20001b0a:	2301      	movne	r3, #1
20001b0c:	2900      	cmp	r1, #0
20001b0e:	bf0c      	ite	eq
20001b10:	2300      	moveq	r3, #0
20001b12:	f003 0301 	andne.w	r3, r3, #1
20001b16:	2b00      	cmp	r3, #0
20001b18:	d029      	beq.n	20001b6e <MSS_UART_polled_tx+0xa6>
20001b1a:	f04f 0700 	mov.w	r7, #0
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
20001b1e:	46b8      	mov	r8, r7
            if( status & MSS_UART_THRE )
            {
                uint32_t fill_size = TX_FIFO_SIZE;

                /* Calculate the number of bytes to transmit. */
                if ( tx_size < TX_FIFO_SIZE )
20001b20:	f04f 0a10 	mov.w	sl, #16
         /* Remain in this loop until the entire input buffer
          * has been transferred to the UART.
          */
        do {
            /* Read the Line Status Register and update the sticky record */
            status = this_uart->hw_reg->LSR;
20001b24:	6803      	ldr	r3, [r0, #0]
20001b26:	7d1b      	ldrb	r3, [r3, #20]
            this_uart->status |= status;
20001b28:	f890 c00a 	ldrb.w	ip, [r0, #10]
20001b2c:	ea43 0c0c 	orr.w	ip, r3, ip
20001b30:	f880 c00a 	strb.w	ip, [r0, #10]

            /* Check if TX FIFO is empty. */
            if( status & MSS_UART_THRE )
20001b34:	f013 0f20 	tst.w	r3, #32
20001b38:	d017      	beq.n	20001b6a <MSS_UART_polled_tx+0xa2>
            {
                uint32_t fill_size = TX_FIFO_SIZE;

                /* Calculate the number of bytes to transmit. */
                if ( tx_size < TX_FIFO_SIZE )
20001b3a:	2a0f      	cmp	r2, #15
20001b3c:	d904      	bls.n	20001b48 <MSS_UART_polled_tx+0x80>
20001b3e:	4656      	mov	r6, sl
20001b40:	46bc      	mov	ip, r7
20001b42:	4643      	mov	r3, r8

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
                {
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx++];
20001b44:	440f      	add	r7, r1
20001b46:	e004      	b.n	20001b52 <MSS_UART_polled_tx+0x8a>
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
20001b48:	b90a      	cbnz	r2, 20001b4e <MSS_UART_polled_tx+0x86>
20001b4a:	4643      	mov	r3, r8
20001b4c:	e00b      	b.n	20001b66 <MSS_UART_polled_tx+0x9e>
20001b4e:	4616      	mov	r6, r2
20001b50:	e7f6      	b.n	20001b40 <MSS_UART_polled_tx+0x78>
                {
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx++];
20001b52:	6804      	ldr	r4, [r0, #0]
20001b54:	5cfd      	ldrb	r5, [r7, r3]
20001b56:	7025      	strb	r5, [r4, #0]
20001b58:	f10c 0c01 	add.w	ip, ip, #1
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
20001b5c:	f103 0301 	add.w	r3, r3, #1
20001b60:	429e      	cmp	r6, r3
20001b62:	d8f6      	bhi.n	20001b52 <MSS_UART_polled_tx+0x8a>
20001b64:	4667      	mov	r7, ip
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx++];
                }

                /* Calculate the number of untransmitted bytes remaining. */
                tx_size -= size_sent;
20001b66:	ebc3 0202 	rsb	r2, r3, r2
            }
        }while( tx_size );
20001b6a:	2a00      	cmp	r2, #0
20001b6c:	d1da      	bne.n	20001b24 <MSS_UART_polled_tx+0x5c>
    }
}
20001b6e:	e8bd 05f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl}
20001b72:	4770      	bx	lr

20001b74 <MSS_UART_get_rx>:
(
    mss_uart_instance_t * this_uart,
    uint8_t * rx_buff,
    size_t buff_size
)
{
20001b74:	b410      	push	{r4}
20001b76:	4603      	mov	r3, r0
    size_t rx_size = 0U;
    uint8_t status = 0U;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20001b78:	f244 40b4 	movw	r0, #17588	; 0x44b4
20001b7c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001b80:	4283      	cmp	r3, r0
20001b82:	d006      	beq.n	20001b92 <MSS_UART_get_rx+0x1e>
20001b84:	f244 408c 	movw	r0, #17548	; 0x448c
20001b88:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001b8c:	4283      	cmp	r3, r0
20001b8e:	d000      	beq.n	20001b92 <MSS_UART_get_rx+0x1e>
20001b90:	be00      	bkpt	0x0000
    ASSERT( rx_buff != ((uint8_t *)0) );
20001b92:	b901      	cbnz	r1, 20001b96 <MSS_UART_get_rx+0x22>
20001b94:	be00      	bkpt	0x0000
    ASSERT( buff_size > 0U );
20001b96:	b902      	cbnz	r2, 20001b9a <MSS_UART_get_rx+0x26>
20001b98:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20001b9a:	f244 40b4 	movw	r0, #17588	; 0x44b4
20001b9e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001ba2:	4283      	cmp	r3, r0
20001ba4:	d005      	beq.n	20001bb2 <MSS_UART_get_rx+0x3e>
20001ba6:	f244 408c 	movw	r0, #17548	; 0x448c
20001baa:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001bae:	4283      	cmp	r3, r0
20001bb0:	d12a      	bne.n	20001c08 <MSS_UART_get_rx+0x94>
          ( rx_buff != ((uint8_t *)0) ) && ( buff_size > 0U ) )
20001bb2:	1e10      	subs	r0, r2, #0
20001bb4:	bf18      	it	ne
20001bb6:	2001      	movne	r0, #1

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
    ASSERT( rx_buff != ((uint8_t *)0) );
    ASSERT( buff_size > 0U );

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20001bb8:	2900      	cmp	r1, #0
20001bba:	bf0c      	ite	eq
20001bbc:	2400      	moveq	r4, #0
20001bbe:	f000 0401 	andne.w	r4, r0, #1
20001bc2:	b30c      	cbz	r4, 20001c08 <MSS_UART_get_rx+0x94>
          ( rx_buff != ((uint8_t *)0) ) && ( buff_size > 0U ) )
    {
        status = this_uart->hw_reg->LSR;
20001bc4:	681c      	ldr	r4, [r3, #0]
20001bc6:	f894 c014 	ldrb.w	ip, [r4, #20]
        this_uart->status |= status;
20001bca:	7a9c      	ldrb	r4, [r3, #10]
20001bcc:	ea4c 0404 	orr.w	r4, ip, r4
20001bd0:	729c      	strb	r4, [r3, #10]

        while (( (status & MSS_UART_DATA_READY) != 0U) &&
20001bd2:	ea1c 0f00 	tst.w	ip, r0
20001bd6:	d017      	beq.n	20001c08 <MSS_UART_get_rx+0x94>
20001bd8:	f04f 0000 	mov.w	r0, #0
               ( rx_size < buff_size ) )
        {
            rx_buff[rx_size] = this_uart->hw_reg->RBR;
20001bdc:	681c      	ldr	r4, [r3, #0]
20001bde:	f894 c000 	ldrb.w	ip, [r4]
20001be2:	f801 c000 	strb.w	ip, [r1, r0]
            ++rx_size;
20001be6:	f100 0001 	add.w	r0, r0, #1
            status = this_uart->hw_reg->LSR;
20001bea:	681c      	ldr	r4, [r3, #0]
20001bec:	f894 c014 	ldrb.w	ip, [r4, #20]
            this_uart->status |= status;
20001bf0:	7a9c      	ldrb	r4, [r3, #10]
20001bf2:	ea4c 0404 	orr.w	r4, ip, r4
20001bf6:	729c      	strb	r4, [r3, #10]
          ( rx_buff != ((uint8_t *)0) ) && ( buff_size > 0U ) )
    {
        status = this_uart->hw_reg->LSR;
        this_uart->status |= status;

        while (( (status & MSS_UART_DATA_READY) != 0U) &&
20001bf8:	4282      	cmp	r2, r0
20001bfa:	bf94      	ite	ls
20001bfc:	2400      	movls	r4, #0
20001bfe:	f00c 0401 	andhi.w	r4, ip, #1
20001c02:	2c00      	cmp	r4, #0
20001c04:	d1ea      	bne.n	20001bdc <MSS_UART_get_rx+0x68>
20001c06:	e001      	b.n	20001c0c <MSS_UART_get_rx+0x98>
20001c08:	f04f 0000 	mov.w	r0, #0
            status = this_uart->hw_reg->LSR;
            this_uart->status |= status;
        }
    }
    return rx_size;
}
20001c0c:	bc10      	pop	{r4}
20001c0e:	4770      	bx	lr

20001c10 <MSS_UART_isr>:
static void
MSS_UART_isr
(
    mss_uart_instance_t * this_uart
)
{
20001c10:	b508      	push	{r3, lr}
    uint8_t iirf;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20001c12:	f244 43b4 	movw	r3, #17588	; 0x44b4
20001c16:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001c1a:	4298      	cmp	r0, r3
20001c1c:	d007      	beq.n	20001c2e <MSS_UART_isr+0x1e>
20001c1e:	f244 438c 	movw	r3, #17548	; 0x448c
20001c22:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001c26:	4298      	cmp	r0, r3
20001c28:	d001      	beq.n	20001c2e <MSS_UART_isr+0x1e>
20001c2a:	be00      	bkpt	0x0000
20001c2c:	bd08      	pop	{r3, pc}

    if ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) )
    {
        iirf = this_uart->hw_reg->IIR & IIRF_MASK;
20001c2e:	6803      	ldr	r3, [r0, #0]
20001c30:	7a1b      	ldrb	r3, [r3, #8]

        switch ( iirf )
20001c32:	f003 030f 	and.w	r3, r3, #15
20001c36:	2b0c      	cmp	r3, #12
20001c38:	d820      	bhi.n	20001c7c <MSS_UART_isr+0x6c>
20001c3a:	e8df f003 	tbb	[pc, r3]
20001c3e:	1f07      	.short	0x1f07
20001c40:	1f131f0d 	.word	0x1f131f0d
20001c44:	1f1f1f19 	.word	0x1f1f1f19
20001c48:	1f1f      	.short	0x1f1f
20001c4a:	13          	.byte	0x13
20001c4b:	00          	.byte	0x00
        {
            case IIRF_MODEM_STATUS:  /* Modem status interrupt */
            {
                ASSERT( NULL_HANDLER != this_uart->modemsts_handler );
20001c4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
20001c4e:	b90b      	cbnz	r3, 20001c54 <MSS_UART_isr+0x44>
20001c50:	be00      	bkpt	0x0000
20001c52:	bd08      	pop	{r3, pc}
                if( NULL_HANDLER != this_uart->modemsts_handler )
                {
                   (*(this_uart->modemsts_handler))( this_uart );
20001c54:	4798      	blx	r3
20001c56:	bd08      	pop	{r3, pc}
            }
            break;

            case IIRF_THRE: /* Transmitter Holding Register Empty */
            {
                ASSERT( NULL_HANDLER != this_uart->tx_handler );
20001c58:	6a03      	ldr	r3, [r0, #32]
20001c5a:	b90b      	cbnz	r3, 20001c60 <MSS_UART_isr+0x50>
20001c5c:	be00      	bkpt	0x0000
20001c5e:	bd08      	pop	{r3, pc}
                if ( NULL_HANDLER != this_uart->tx_handler )
                {
                    (*(this_uart->tx_handler))( this_uart );
20001c60:	4798      	blx	r3
20001c62:	bd08      	pop	{r3, pc}
            break;

            case IIRF_RX_DATA:      /* Received Data Available */
            case IIRF_DATA_TIMEOUT: /* Received Data Timed-out */
            {
                ASSERT( NULL_HANDLER != this_uart->rx_handler );
20001c64:	69c3      	ldr	r3, [r0, #28]
20001c66:	b90b      	cbnz	r3, 20001c6c <MSS_UART_isr+0x5c>
20001c68:	be00      	bkpt	0x0000
20001c6a:	bd08      	pop	{r3, pc}
                if ( NULL_HANDLER != this_uart->rx_handler )
                {
                    (*(this_uart->rx_handler))( this_uart );
20001c6c:	4798      	blx	r3
20001c6e:	bd08      	pop	{r3, pc}
            }
            break;

            case IIRF_RX_LINE_STATUS:  /* Line Status Interrupt */
            {
                ASSERT( NULL_HANDLER != this_uart->linests_handler );
20001c70:	6983      	ldr	r3, [r0, #24]
20001c72:	b90b      	cbnz	r3, 20001c78 <MSS_UART_isr+0x68>
20001c74:	be00      	bkpt	0x0000
20001c76:	bd08      	pop	{r3, pc}
                if ( NULL_HANDLER != this_uart->linests_handler )
                {
                   (*(this_uart->linests_handler))( this_uart );
20001c78:	4798      	blx	r3
20001c7a:	bd08      	pop	{r3, pc}
            }
            break;

            default:
            {
                ASSERT( INVALID_INTERRUPT );
20001c7c:	be00      	bkpt	0x0000
20001c7e:	bd08      	pop	{r3, pc}

20001c80 <default_tx_handler>:
static void
default_tx_handler
(
    mss_uart_instance_t * this_uart
)
{
20001c80:	b410      	push	{r4}
    uint8_t status;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20001c82:	f244 43b4 	movw	r3, #17588	; 0x44b4
20001c86:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001c8a:	4298      	cmp	r0, r3
20001c8c:	d006      	beq.n	20001c9c <default_tx_handler+0x1c>
20001c8e:	f244 438c 	movw	r3, #17548	; 0x448c
20001c92:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001c96:	4298      	cmp	r0, r3
20001c98:	d000      	beq.n	20001c9c <default_tx_handler+0x1c>
20001c9a:	be00      	bkpt	0x0000
    ASSERT( ( (uint8_t *)0 ) != this_uart->tx_buffer );
20001c9c:	68c2      	ldr	r2, [r0, #12]
20001c9e:	b902      	cbnz	r2, 20001ca2 <default_tx_handler+0x22>
20001ca0:	be00      	bkpt	0x0000
    ASSERT( 0U < this_uart->tx_buff_size );
20001ca2:	6901      	ldr	r1, [r0, #16]
20001ca4:	b901      	cbnz	r1, 20001ca8 <default_tx_handler+0x28>
20001ca6:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20001ca8:	f244 43b4 	movw	r3, #17588	; 0x44b4
20001cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001cb0:	4298      	cmp	r0, r3
20001cb2:	d005      	beq.n	20001cc0 <default_tx_handler+0x40>
20001cb4:	f244 438c 	movw	r3, #17548	; 0x448c
20001cb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001cbc:	4298      	cmp	r0, r3
20001cbe:	d130      	bne.n	20001d22 <default_tx_handler+0xa2>
20001cc0:	2a00      	cmp	r2, #0
20001cc2:	d02e      	beq.n	20001d22 <default_tx_handler+0xa2>
20001cc4:	2900      	cmp	r1, #0
20001cc6:	d02c      	beq.n	20001d22 <default_tx_handler+0xa2>
        ( ( (uint8_t *)0 ) != this_uart->tx_buffer ) &&
        ( 0U < this_uart->tx_buff_size ) )
    {
        /* Read the Line Status Register and update the sticky record. */
        status = this_uart->hw_reg->LSR;
20001cc8:	6803      	ldr	r3, [r0, #0]
20001cca:	7d1b      	ldrb	r3, [r3, #20]
        this_uart->status |= status;
20001ccc:	7a82      	ldrb	r2, [r0, #10]
20001cce:	ea43 0202 	orr.w	r2, r3, r2
20001cd2:	7282      	strb	r2, [r0, #10]

        /*
         * This function should only be called as a result of a THRE interrupt.
         * Verify that this is true before proceeding to transmit data.
         */
        if ( status & MSS_UART_THRE )
20001cd4:	f013 0f20 	tst.w	r3, #32
20001cd8:	d01a      	beq.n	20001d10 <default_tx_handler+0x90>
        {
            uint32_t i;
            uint32_t fill_size = TX_FIFO_SIZE;
            uint32_t tx_remain = this_uart->tx_buff_size - this_uart->tx_idx;
20001cda:	6902      	ldr	r2, [r0, #16]
20001cdc:	6943      	ldr	r3, [r0, #20]
20001cde:	ebc3 0302 	rsb	r3, r3, r2

            /* Calculate the number of bytes to transmit. */
            if ( tx_remain < TX_FIFO_SIZE )
20001ce2:	2b0f      	cmp	r3, #15
20001ce4:	d904      	bls.n	20001cf0 <default_tx_handler+0x70>
20001ce6:	f04f 0c10 	mov.w	ip, #16
20001cea:	f04f 0300 	mov.w	r3, #0
20001cee:	e002      	b.n	20001cf6 <default_tx_handler+0x76>
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for ( i = 0U; i < fill_size; ++i )
20001cf0:	b173      	cbz	r3, 20001d10 <default_tx_handler+0x90>
20001cf2:	469c      	mov	ip, r3
20001cf4:	e7f9      	b.n	20001cea <default_tx_handler+0x6a>
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
20001cf6:	6802      	ldr	r2, [r0, #0]
20001cf8:	68c4      	ldr	r4, [r0, #12]
20001cfa:	6941      	ldr	r1, [r0, #20]
20001cfc:	5c61      	ldrb	r1, [r4, r1]
20001cfe:	7011      	strb	r1, [r2, #0]
                ++this_uart->tx_idx;
20001d00:	6942      	ldr	r2, [r0, #20]
20001d02:	f102 0201 	add.w	r2, r2, #1
20001d06:	6142      	str	r2, [r0, #20]
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for ( i = 0U; i < fill_size; ++i )
20001d08:	f103 0301 	add.w	r3, r3, #1
20001d0c:	4563      	cmp	r3, ip
20001d0e:	d3f2      	bcc.n	20001cf6 <default_tx_handler+0x76>
                ++this_uart->tx_idx;
            }
        }

        /* Flag Tx as complete if all data has been pushed into the Tx FIFO. */
        if ( this_uart->tx_idx == this_uart->tx_buff_size )
20001d10:	6942      	ldr	r2, [r0, #20]
20001d12:	6903      	ldr	r3, [r0, #16]
20001d14:	429a      	cmp	r2, r3
        {
            this_uart->tx_buff_size = TX_COMPLETE;
20001d16:	bf01      	itttt	eq
20001d18:	2300      	moveq	r3, #0
20001d1a:	6103      	streq	r3, [r0, #16]
            /* disables TX interrupt */
            this_uart->hw_reg_bit->IER_ETBEI = 0U;
20001d1c:	6842      	ldreq	r2, [r0, #4]
20001d1e:	f8c2 3084 	streq.w	r3, [r2, #132]	; 0x84
        }
    }
}
20001d22:	bc10      	pop	{r4}
20001d24:	4770      	bx	lr
20001d26:	bf00      	nop

20001d28 <MSS_UART_set_rx_handler>:
(
    mss_uart_instance_t *       this_uart,
    mss_uart_irq_handler_t      handler,
    mss_uart_rx_trig_level_t    trigger_level
)
{
20001d28:	b410      	push	{r4}
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20001d2a:	f244 43b4 	movw	r3, #17588	; 0x44b4
20001d2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001d32:	4298      	cmp	r0, r3
20001d34:	d006      	beq.n	20001d44 <MSS_UART_set_rx_handler+0x1c>
20001d36:	f244 438c 	movw	r3, #17548	; 0x448c
20001d3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001d3e:	4298      	cmp	r0, r3
20001d40:	d000      	beq.n	20001d44 <MSS_UART_set_rx_handler+0x1c>
20001d42:	be00      	bkpt	0x0000
    ASSERT( handler != INVALID_IRQ_HANDLER );
20001d44:	b901      	cbnz	r1, 20001d48 <MSS_UART_set_rx_handler+0x20>
20001d46:	be00      	bkpt	0x0000
    ASSERT( trigger_level < MSS_UART_FIFO_INVALID_TRIG_LEVEL );
20001d48:	2ac0      	cmp	r2, #192	; 0xc0
20001d4a:	d900      	bls.n	20001d4e <MSS_UART_set_rx_handler+0x26>
20001d4c:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20001d4e:	f244 43b4 	movw	r3, #17588	; 0x44b4
20001d52:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001d56:	4298      	cmp	r0, r3
20001d58:	d005      	beq.n	20001d66 <MSS_UART_set_rx_handler+0x3e>
20001d5a:	f244 438c 	movw	r3, #17548	; 0x448c
20001d5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001d62:	4298      	cmp	r0, r3
20001d64:	d12f      	bne.n	20001dc6 <MSS_UART_set_rx_handler+0x9e>
20001d66:	2ac0      	cmp	r2, #192	; 0xc0
20001d68:	bf8c      	ite	hi
20001d6a:	2300      	movhi	r3, #0
20001d6c:	2301      	movls	r3, #1
20001d6e:	2900      	cmp	r1, #0
20001d70:	bf0c      	ite	eq
20001d72:	2300      	moveq	r3, #0
20001d74:	f003 0301 	andne.w	r3, r3, #1
20001d78:	b32b      	cbz	r3, 20001dc6 <MSS_UART_set_rx_handler+0x9e>
        ( handler != INVALID_IRQ_HANDLER) &&
        ( trigger_level < MSS_UART_FIFO_INVALID_TRIG_LEVEL) )
    {
        this_uart->rx_handler = handler;
20001d7a:	61c1      	str	r1, [r0, #28]

        /* Set the receive interrupt trigger level. */
        /* Clear RX FIFO; Enable TXRDY and RXRDY for PDMA */
        this_uart->hw_reg->FCR = (uint8_t)(FCR_TRIG_LEVEL_MASK & (uint8_t)trigger_level) |
20001d7c:	6803      	ldr	r3, [r0, #0]
20001d7e:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
20001d82:	f042 020a 	orr.w	r2, r2, #10
20001d86:	721a      	strb	r2, [r3, #8]
                              FCR_CLEAR_RX_FIFO_MASK | FCR_ENABLE_TXRDY_RXRDY_MASK;

        /* Clear any previously pended interrupts */
        NVIC_ClearPendingIRQ( this_uart->irqn );
20001d88:	8903      	ldrh	r3, [r0, #8]
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20001d8a:	b219      	sxth	r1, r3
20001d8c:	ea4f 1151 	mov.w	r1, r1, lsr #5
20001d90:	f003 031f 	and.w	r3, r3, #31
20001d94:	f04f 0201 	mov.w	r2, #1
20001d98:	fa02 f403 	lsl.w	r4, r2, r3
20001d9c:	f24e 1300 	movw	r3, #57600	; 0xe100
20001da0:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001da4:	f101 0160 	add.w	r1, r1, #96	; 0x60
20001da8:	f843 4021 	str.w	r4, [r3, r1, lsl #2]

        /* Enable receive interrupt. */
        this_uart->hw_reg_bit->IER_ERBFI = 1U;
20001dac:	6841      	ldr	r1, [r0, #4]
20001dae:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80

        /* Enable UART instance interrupt in Cortex-M3 NVIC. */
        NVIC_EnableIRQ( this_uart->irqn );
20001db2:	8901      	ldrh	r1, [r0, #8]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20001db4:	b208      	sxth	r0, r1
20001db6:	ea4f 1050 	mov.w	r0, r0, lsr #5
20001dba:	f001 011f 	and.w	r1, r1, #31
20001dbe:	fa02 f201 	lsl.w	r2, r2, r1
20001dc2:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    }
}
20001dc6:	bc10      	pop	{r4}
20001dc8:	4770      	bx	lr
20001dca:	bf00      	nop

20001dcc <UART0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART0_IRQHandler( void )
#else
void UART0_IRQHandler( void )
#endif
{
20001dcc:	4668      	mov	r0, sp
20001dce:	f020 0107 	bic.w	r1, r0, #7
20001dd2:	468d      	mov	sp, r1
20001dd4:	b501      	push	{r0, lr}
    MSS_UART_isr( &g_mss_uart0 );
20001dd6:	f244 40b4 	movw	r0, #17588	; 0x44b4
20001dda:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001dde:	f7ff ff17 	bl	20001c10 <MSS_UART_isr>
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20001de2:	f24e 1300 	movw	r3, #57600	; 0xe100
20001de6:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001dea:	f44f 6280 	mov.w	r2, #1024	; 0x400
20001dee:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC_ClearPendingIRQ( UART0_IRQn );
}
20001df2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
20001df6:	4685      	mov	sp, r0
20001df8:	4770      	bx	lr
20001dfa:	bf00      	nop

20001dfc <UART1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART1_IRQHandler( void )
#else
void UART1_IRQHandler( void )
#endif
{
20001dfc:	4668      	mov	r0, sp
20001dfe:	f020 0107 	bic.w	r1, r0, #7
20001e02:	468d      	mov	sp, r1
20001e04:	b501      	push	{r0, lr}
    MSS_UART_isr( &g_mss_uart1 );
20001e06:	f244 408c 	movw	r0, #17548	; 0x448c
20001e0a:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001e0e:	f7ff feff 	bl	20001c10 <MSS_UART_isr>
20001e12:	f24e 1300 	movw	r3, #57600	; 0xe100
20001e16:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001e1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
20001e1e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC_ClearPendingIRQ( UART1_IRQn );
}
20001e22:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
20001e26:	4685      	mov	sp, r0
20001e28:	4770      	bx	lr
20001e2a:	bf00      	nop

20001e2c <MSS_UART_init>:
(
    mss_uart_instance_t* this_uart,
    uint32_t baud_rate,
    uint8_t line_config
)
{
20001e2c:	b570      	push	{r4, r5, r6, lr}
20001e2e:	4604      	mov	r4, r0
20001e30:	460d      	mov	r5, r1
20001e32:	4616      	mov	r6, r2
    uint32_t pclk_freq = 0U;
    uint32_t baud_value_l;

    /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
     * mss_uart_instance_t instances used to identify UART0 and UART1. */
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20001e34:	f244 43b4 	movw	r3, #17588	; 0x44b4
20001e38:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001e3c:	4298      	cmp	r0, r3
20001e3e:	d006      	beq.n	20001e4e <MSS_UART_init+0x22>
20001e40:	f244 438c 	movw	r3, #17548	; 0x448c
20001e44:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001e48:	4298      	cmp	r0, r3
20001e4a:	d000      	beq.n	20001e4e <MSS_UART_init+0x22>
20001e4c:	be00      	bkpt	0x0000

    /* baud_rate should be greater than 0 */
    ASSERT( 0U < baud_rate );
20001e4e:	b905      	cbnz	r5, 20001e52 <MSS_UART_init+0x26>
20001e50:	be00      	bkpt	0x0000

    /* Force the value of the CMSIS global variables holding the various system
     * clock frequencies to be updated. */
    SystemCoreClockUpdate();
20001e52:	f001 f97f 	bl	20003154 <SystemCoreClockUpdate>

    if ( this_uart == &g_mss_uart0 )
20001e56:	f244 43b4 	movw	r3, #17588	; 0x44b4
20001e5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001e5e:	429c      	cmp	r4, r3
20001e60:	d126      	bne.n	20001eb0 <MSS_UART_init+0x84>
    {
        this_uart->hw_reg = UART0;
20001e62:	f244 43b4 	movw	r3, #17588	; 0x44b4
20001e66:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001e6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
20001e6e:	601a      	str	r2, [r3, #0]
        this_uart->hw_reg_bit = UART0_BITBAND;
20001e70:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
20001e74:	605a      	str	r2, [r3, #4]
        this_uart->irqn = UART0_IRQn;
20001e76:	f04f 020a 	mov.w	r2, #10
20001e7a:	811a      	strh	r2, [r3, #8]

        pclk_freq = g_FrequencyPCLK0;
20001e7c:	f244 4328 	movw	r3, #17448	; 0x4428
20001e80:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001e84:	6818      	ldr	r0, [r3, #0]

        /* reset UART0 */
        SYSREG->SOFT_RST_CR |= SYSREG_UART0_SOFTRESET_MASK;
20001e86:	f242 0300 	movw	r3, #8192	; 0x2000
20001e8a:	f2ce 0304 	movt	r3, #57348	; 0xe004
20001e8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20001e90:	f042 0280 	orr.w	r2, r2, #128	; 0x80
20001e94:	631a      	str	r2, [r3, #48]	; 0x30
20001e96:	f24e 1200 	movw	r2, #57600	; 0xe100
20001e9a:	f2ce 0200 	movt	r2, #57344	; 0xe000
20001e9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
20001ea2:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
        /* Clear any previously pended UART0 interrupt */
        NVIC_ClearPendingIRQ( UART0_IRQn );
        /* Take UART0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_UART0_SOFTRESET_MASK;
20001ea6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20001ea8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
20001eac:	631a      	str	r2, [r3, #48]	; 0x30
20001eae:	e025      	b.n	20001efc <MSS_UART_init+0xd0>
    }
    else
    {
        this_uart->hw_reg = UART1;
20001eb0:	f240 0300 	movw	r3, #0
20001eb4:	f2c4 0301 	movt	r3, #16385	; 0x4001
20001eb8:	6023      	str	r3, [r4, #0]
        this_uart->hw_reg_bit = UART1_BITBAND;
20001eba:	f240 0300 	movw	r3, #0
20001ebe:	f2c4 2320 	movt	r3, #16928	; 0x4220
20001ec2:	6063      	str	r3, [r4, #4]
        this_uart->irqn = UART1_IRQn;
20001ec4:	f04f 030b 	mov.w	r3, #11
20001ec8:	8123      	strh	r3, [r4, #8]

        pclk_freq = g_FrequencyPCLK1;
20001eca:	f244 432c 	movw	r3, #17452	; 0x442c
20001ece:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001ed2:	6818      	ldr	r0, [r3, #0]

        /* Reset UART1 */
        SYSREG->SOFT_RST_CR |= SYSREG_UART1_SOFTRESET_MASK;
20001ed4:	f242 0300 	movw	r3, #8192	; 0x2000
20001ed8:	f2ce 0304 	movt	r3, #57348	; 0xe004
20001edc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20001ede:	f442 7280 	orr.w	r2, r2, #256	; 0x100
20001ee2:	631a      	str	r2, [r3, #48]	; 0x30
20001ee4:	f24e 1200 	movw	r2, #57600	; 0xe100
20001ee8:	f2ce 0200 	movt	r2, #57344	; 0xe000
20001eec:	f44f 6100 	mov.w	r1, #2048	; 0x800
20001ef0:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
        /* Clear any previously pended UART1 interrupt */
        NVIC_ClearPendingIRQ( UART1_IRQn );
        /* Take UART1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_UART1_SOFTRESET_MASK;
20001ef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20001ef6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
20001efa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* disable interrupts */
    this_uart->hw_reg->IER = 0U;
20001efc:	6823      	ldr	r3, [r4, #0]
20001efe:	f04f 0200 	mov.w	r2, #0
20001f02:	711a      	strb	r2, [r3, #4]
     * The baud value is computed using the following equation:
     *      baud_value_l = PCLK_Frequency / (baud_rate * 16)
     * The baud value is rounded up or down depending on what would be the remainder
     * of the divide by 16 operation.
     */
    if( 0U < baud_rate )
20001f04:	b915      	cbnz	r5, 20001f0c <MSS_UART_init+0xe0>
20001f06:	f04f 0501 	mov.w	r5, #1
20001f0a:	e00f      	b.n	20001f2c <MSS_UART_init+0x100>
    {
        baud_value_l = (uint32_t)(pclk_freq / baud_rate);
20001f0c:	fbb0 f5f5 	udiv	r5, r0, r5
        if( baud_value_l & 0x00000008U )
20001f10:	f015 0f08 	tst.w	r5, #8
        {
            /* remainder above 0.5 */
            baud_value_l = (baud_value_l >> 4U) + 1U;        
20001f14:	ea4f 1515 	mov.w	r5, r5, lsr #4
20001f18:	bf18      	it	ne
20001f1a:	3501      	addne	r5, #1
            /* remainder below 0.5 */
            baud_value_l = (baud_value_l >> 4U);
        }
    
        /* Check if the baud rate is supported by the PCLK */
        ASSERT( baud_value_l <= UINT16_MAX);
20001f1c:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
        if( baud_value_l <= (uint32_t)UINT16_MAX)
        {
            baud_value = (uint16_t)baud_value_l;
20001f20:	bf38      	it	cc
20001f22:	b2ad      	uxthcc	r5, r5
            /* remainder below 0.5 */
            baud_value_l = (baud_value_l >> 4U);
        }
    
        /* Check if the baud rate is supported by the PCLK */
        ASSERT( baud_value_l <= UINT16_MAX);
20001f24:	d302      	bcc.n	20001f2c <MSS_UART_init+0x100>
20001f26:	be00      	bkpt	0x0000
20001f28:	f04f 0501 	mov.w	r5, #1
            baud_value = (uint16_t)baud_value_l;
        }
    }
    
    /* set divisor latch */
    this_uart->hw_reg_bit->LCR_DLAB = (uint32_t)1;
20001f2c:	6863      	ldr	r3, [r4, #4]
20001f2e:	f04f 0201 	mov.w	r2, #1
20001f32:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

    /* msb of baud value */
    this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8);
20001f36:	6823      	ldr	r3, [r4, #0]
20001f38:	ea4f 2215 	mov.w	r2, r5, lsr #8
20001f3c:	711a      	strb	r2, [r3, #4]
    /* lsb of baud value */
    this_uart->hw_reg->DLR = (uint8_t)baud_value;
20001f3e:	6823      	ldr	r3, [r4, #0]
20001f40:	b2ed      	uxtb	r5, r5
20001f42:	701d      	strb	r5, [r3, #0]

    /* reset divisor latch */
    this_uart->hw_reg_bit->LCR_DLAB = (uint32_t)0;
20001f44:	6862      	ldr	r2, [r4, #4]
20001f46:	f04f 0300 	mov.w	r3, #0
20001f4a:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c

    /* set the line control register (bit length, stop bits, parity) */
    this_uart->hw_reg->LCR = line_config;
20001f4e:	6822      	ldr	r2, [r4, #0]
20001f50:	7316      	strb	r6, [r2, #12]

    /* FIFO configuration */
    /* RX FIFO length = 1 byte, clear receiver FIFO, 
       clear transmitter FIFO, enable RXRDYN and TXRDYN pins. */
    this_uart->hw_reg->FCR = (uint8_t)MSS_UART_FIFO_SINGLE_BYTE | 
20001f52:	6822      	ldr	r2, [r4, #0]
20001f54:	f04f 010e 	mov.w	r1, #14
20001f58:	7211      	strb	r1, [r2, #8]
                              FCR_CLEAR_RX_FIFO_MASK | FCR_CLEAR_TX_FIFO_MASK | 
                              FCR_ENABLE_TXRDY_RXRDY_MASK;
    /* disable loopback */
    this_uart->hw_reg_bit->MCR_LOOP = (uint32_t)0;
20001f5a:	6862      	ldr	r2, [r4, #4]
20001f5c:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210

    /* Instance setup */
    this_uart->tx_buff_size = TX_COMPLETE;
20001f60:	6123      	str	r3, [r4, #16]
    this_uart->tx_buffer = (const uint8_t *)0;
20001f62:	60e3      	str	r3, [r4, #12]
    this_uart->tx_idx = 0U;
20001f64:	6163      	str	r3, [r4, #20]

    /* Default handlers for MSS UART interrupts */
    this_uart->rx_handler       = NULL_HANDLER;
20001f66:	61e3      	str	r3, [r4, #28]
    this_uart->tx_handler       = default_tx_handler;
20001f68:	f641 4281 	movw	r2, #7297	; 0x1c81
20001f6c:	f2c2 0200 	movt	r2, #8192	; 0x2000
20001f70:	6222      	str	r2, [r4, #32]
    this_uart->linests_handler  = NULL_HANDLER;
20001f72:	61a3      	str	r3, [r4, #24]
    this_uart->modemsts_handler = NULL_HANDLER;
20001f74:	6263      	str	r3, [r4, #36]	; 0x24

    /* Initialize the sticky status */
    this_uart->status = 0U;
20001f76:	72a3      	strb	r3, [r4, #10]
}
20001f78:	bd70      	pop	{r4, r5, r6, pc}
20001f7a:	bf00      	nop

20001f7c <recover_from_rx_overflow>:
 */
static void recover_from_rx_overflow
(
    mss_spi_instance_t * this_spi
)
{
20001f7c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    uint32_t slave_select;
    
    /*
     * Read current SPI hardware block configuration.
     */
    control_reg = this_spi->hw_reg->CONTROL;
20001f80:	6803      	ldr	r3, [r0, #0]
20001f82:	f8d3 8000 	ldr.w	r8, [r3]
    clk_gen = this_spi->hw_reg->CLK_GEN;
20001f86:	f8d3 c018 	ldr.w	ip, [r3, #24]
    frame_size = this_spi->hw_reg->TXRXDF_SIZE;
20001f8a:	685f      	ldr	r7, [r3, #4]
    control2 = this_spi->hw_reg->CONTROL2;
20001f8c:	6a9e      	ldr	r6, [r3, #40]	; 0x28
    packet_size = this_spi->hw_reg->PKTSIZE;
20001f8e:	6b1d      	ldr	r5, [r3, #48]	; 0x30
    cmd_size = this_spi->hw_reg->CMDSIZE;
20001f90:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    slave_select = this_spi->hw_reg->SLAVE_SELECT;
20001f92:	f8d3 a01c 	ldr.w	sl, [r3, #28]
     
    /*
     * Reset the SPI hardware block.
     */
    if(this_spi == &g_mss_spi0)
20001f96:	f244 5360 	movw	r3, #17760	; 0x4560
20001f9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001f9e:	4298      	cmp	r0, r3
20001fa0:	d124      	bne.n	20001fec <recover_from_rx_overflow+0x70>
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI0_BASE);
20001fa2:	f244 5360 	movw	r3, #17760	; 0x4560
20001fa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001faa:	f241 0200 	movw	r2, #4096	; 0x1000
20001fae:	f2c4 0200 	movt	r2, #16384	; 0x4000
20001fb2:	601a      	str	r2, [r3, #0]
        this_spi->irqn = SPI0_IRQn;
20001fb4:	f04f 010c 	mov.w	r1, #12
20001fb8:	8099      	strh	r1, [r3, #4]

        /* reset SPI0 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI0_SOFTRESET_MASK;
20001fba:	f242 0300 	movw	r3, #8192	; 0x2000
20001fbe:	f2ce 0304 	movt	r3, #57348	; 0xe004
20001fc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
20001fc4:	f441 7100 	orr.w	r1, r1, #512	; 0x200
20001fc8:	6319      	str	r1, [r3, #48]	; 0x30
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20001fca:	f24e 1100 	movw	r1, #57600	; 0xe100
20001fce:	f2ce 0100 	movt	r1, #57344	; 0xe000
20001fd2:	f44f 5980 	mov.w	r9, #4096	; 0x1000
20001fd6:	f8c1 9180 	str.w	r9, [r1, #384]	; 0x180
        /* Clear any previously pended SPI0 interrupt */
        NVIC_ClearPendingIRQ(SPI0_IRQn);
        /* Take SPI0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI0_SOFTRESET_MASK;
20001fda:	6b19      	ldr	r1, [r3, #48]	; 0x30
20001fdc:	f421 7100 	bic.w	r1, r1, #512	; 0x200
20001fe0:	6319      	str	r1, [r3, #48]	; 0x30

        this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
20001fe2:	6813      	ldr	r3, [r2, #0]
20001fe4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
20001fe8:	6013      	str	r3, [r2, #0]
20001fea:	e01f      	b.n	2000202c <recover_from_rx_overflow+0xb0>
    }
    else
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI1_BASE);
20001fec:	f241 0200 	movw	r2, #4096	; 0x1000
20001ff0:	f2c4 0201 	movt	r2, #16385	; 0x4001
20001ff4:	6002      	str	r2, [r0, #0]
        this_spi->irqn = SPI1_IRQn;
20001ff6:	f04f 030d 	mov.w	r3, #13
20001ffa:	8083      	strh	r3, [r0, #4]
        
        /* reset SPI1 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI1_SOFTRESET_MASK;
20001ffc:	f242 0300 	movw	r3, #8192	; 0x2000
20002000:	f2ce 0304 	movt	r3, #57348	; 0xe004
20002004:	6b19      	ldr	r1, [r3, #48]	; 0x30
20002006:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
2000200a:	6319      	str	r1, [r3, #48]	; 0x30
2000200c:	f24e 1100 	movw	r1, #57600	; 0xe100
20002010:	f2ce 0100 	movt	r1, #57344	; 0xe000
20002014:	f44f 5900 	mov.w	r9, #8192	; 0x2000
20002018:	f8c1 9180 	str.w	r9, [r1, #384]	; 0x180
        /* Clear any previously pended SPI1 interrupt */
        NVIC_ClearPendingIRQ(SPI1_IRQn);
        /* Take SPI1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI1_SOFTRESET_MASK;
2000201c:	6b19      	ldr	r1, [r3, #48]	; 0x30
2000201e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
20002022:	6319      	str	r1, [r3, #48]	; 0x30
        
        this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
20002024:	6813      	ldr	r3, [r2, #0]
20002026:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
2000202a:	6013      	str	r3, [r2, #0]
    }
    
    /*
     * Restore SPI hardware block configuration.
     */
    control_reg &= ~(uint32_t)CTRL_ENABLE_MASK;
2000202c:	f028 0201 	bic.w	r2, r8, #1
    this_spi->hw_reg->CONTROL = control_reg;
20002030:	6803      	ldr	r3, [r0, #0]
20002032:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CLK_GEN = clk_gen;
20002034:	6803      	ldr	r3, [r0, #0]
20002036:	f8c3 c018 	str.w	ip, [r3, #24]
    this_spi->hw_reg->TXRXDF_SIZE = frame_size;
2000203a:	6803      	ldr	r3, [r0, #0]
2000203c:	605f      	str	r7, [r3, #4]
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
2000203e:	6803      	ldr	r3, [r0, #0]
20002040:	681a      	ldr	r2, [r3, #0]
20002042:	f042 0201 	orr.w	r2, r2, #1
20002046:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CONTROL2 = control2;
20002048:	6803      	ldr	r3, [r0, #0]
2000204a:	629e      	str	r6, [r3, #40]	; 0x28
    this_spi->hw_reg->PKTSIZE = packet_size;
2000204c:	6803      	ldr	r3, [r0, #0]
2000204e:	631d      	str	r5, [r3, #48]	; 0x30
    this_spi->hw_reg->CMDSIZE = cmd_size;
20002050:	6803      	ldr	r3, [r0, #0]
20002052:	635c      	str	r4, [r3, #52]	; 0x34
    this_spi->hw_reg->SLAVE_SELECT = slave_select;
20002054:	6803      	ldr	r3, [r0, #0]
20002056:	f8c3 a01c 	str.w	sl, [r3, #28]
}
2000205a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
2000205e:	4770      	bx	lr

20002060 <MSS_SPI_configure_master_mode>:
    mss_spi_slave_t         slave,
    mss_spi_protocol_mode_t protocol_mode,
    mss_spi_pclk_div_t      clk_rate,
    uint8_t                 frame_bit_length
)
{
20002060:	b4f0      	push	{r4, r5, r6, r7}
20002062:	f89d 5010 	ldrb.w	r5, [sp, #16]
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20002066:	f244 5c60 	movw	ip, #17760	; 0x4560
2000206a:	f2c2 0c00 	movt	ip, #8192	; 0x2000
2000206e:	4560      	cmp	r0, ip
20002070:	d006      	beq.n	20002080 <MSS_SPI_configure_master_mode+0x20>
20002072:	f244 4cdc 	movw	ip, #17628	; 0x44dc
20002076:	f2c2 0c00 	movt	ip, #8192	; 0x2000
2000207a:	4560      	cmp	r0, ip
2000207c:	d000      	beq.n	20002080 <MSS_SPI_configure_master_mode+0x20>
2000207e:	be00      	bkpt	0x0000
    ASSERT(slave < MSS_SPI_MAX_NB_OF_SLAVES);
20002080:	2907      	cmp	r1, #7
20002082:	d900      	bls.n	20002086 <MSS_SPI_configure_master_mode+0x26>
20002084:	be00      	bkpt	0x0000
    ASSERT(frame_bit_length <= MAX_FRAME_LENGTH);
20002086:	2d20      	cmp	r5, #32
20002088:	d900      	bls.n	2000208c <MSS_SPI_configure_master_mode+0x2c>
2000208a:	be00      	bkpt	0x0000
    
    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
2000208c:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
20002090:	fa0f f68c 	sxth.w	r6, ip
20002094:	ea4f 1656 	mov.w	r6, r6, lsr #5
20002098:	f00c 0c1f 	and.w	ip, ip, #31
2000209c:	f04f 0701 	mov.w	r7, #1
200020a0:	fa07 f70c 	lsl.w	r7, r7, ip
200020a4:	f24e 1400 	movw	r4, #57600	; 0xe100
200020a8:	f2ce 0400 	movt	r4, #57344	; 0xe000
200020ac:	f106 0620 	add.w	r6, r6, #32
200020b0:	f844 7026 	str.w	r7, [r4, r6, lsl #2]

    /* Reset slave transfer mode to unknown to wipe slate clean */
    this_spi->slave_xfer_mode = MSS_SPI_SLAVE_XFER_NONE;
200020b4:	f04f 0c00 	mov.w	ip, #0
200020b8:	f880 c080 	strb.w	ip, [r0, #128]	; 0x80

    /* Set the mode. */
    this_spi->hw_reg->CONTROL &= ~(uint32_t)CTRL_ENABLE_MASK;
200020bc:	6804      	ldr	r4, [r0, #0]
200020be:	6826      	ldr	r6, [r4, #0]
200020c0:	f026 0601 	bic.w	r6, r6, #1
200020c4:	6026      	str	r6, [r4, #0]
    this_spi->hw_reg->CONTROL |= CTRL_MASTER_MASK;
200020c6:	6804      	ldr	r4, [r0, #0]
200020c8:	6826      	ldr	r6, [r4, #0]
200020ca:	f046 0602 	orr.w	r6, r6, #2
200020ce:	6026      	str	r6, [r4, #0]
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
200020d0:	6804      	ldr	r4, [r0, #0]
200020d2:	6826      	ldr	r6, [r4, #0]
200020d4:	f046 0601 	orr.w	r6, r6, #1
200020d8:	6026      	str	r6, [r4, #0]
    /*
     * Keep track of the required register configuration for this slave. These
     * values will be used by the MSS_SPI_set_slave_select() function to configure
     * the master to match the slave being selected.
     */
    if(slave < MSS_SPI_MAX_NB_OF_SLAVES)     
200020da:	2907      	cmp	r1, #7
200020dc:	d82d      	bhi.n	2000213a <MSS_SPI_configure_master_mode+0xda>
         *
         * We only do it for Motorola modes and if you need the slave selected
         * deselected between frames in modes 0 or 2 then remove SPS_MASK from
         * below.
         */
        if((MSS_SPI_MODE0 == protocol_mode) || (MSS_SPI_MODE1 == protocol_mode) ||
200020de:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
200020e2:	bf14      	ite	ne
200020e4:	2400      	movne	r4, #0
200020e6:	2401      	moveq	r4, #1
200020e8:	4562      	cmp	r2, ip
200020ea:	bf08      	it	eq
200020ec:	f044 0401 	orreq.w	r4, r4, #1
200020f0:	b954      	cbnz	r4, 20002108 <MSS_SPI_configure_master_mode+0xa8>
200020f2:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
200020f6:	bf14      	ite	ne
200020f8:	2400      	movne	r4, #0
200020fa:	2401      	moveq	r4, #1
200020fc:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
20002100:	bf08      	it	eq
20002102:	f044 0401 	orreq.w	r4, r4, #1
20002106:	b14c      	cbz	r4, 2000211c <MSS_SPI_configure_master_mode+0xbc>
           (MSS_SPI_MODE2 == protocol_mode) || (MSS_SPI_MODE3 == protocol_mode))
        {
            this_spi->slaves_cfg[slave].ctrl_reg = MASTER_MODE_MASK | SPS_MASK |
20002108:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
2000210c:	f240 1c02 	movw	ip, #258	; 0x102
20002110:	f2c2 4c00 	movt	ip, #9216	; 0x2400
20002114:	ea42 020c 	orr.w	r2, r2, ip
20002118:	6362      	str	r2, [r4, #52]	; 0x34
         *
         * We only do it for Motorola modes and if you need the slave selected
         * deselected between frames in modes 0 or 2 then remove SPS_MASK from
         * below.
         */
        if((MSS_SPI_MODE0 == protocol_mode) || (MSS_SPI_MODE1 == protocol_mode) ||
2000211a:	e008      	b.n	2000212e <MSS_SPI_configure_master_mode+0xce>
                                                   (uint32_t)protocol_mode | 
                                                   ((uint32_t)1 << TXRXDFCOUNT_SHIFT);
        }
        else
        {
            this_spi->slaves_cfg[slave].ctrl_reg = MASTER_MODE_MASK |
2000211c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
20002120:	f240 1c02 	movw	ip, #258	; 0x102
20002124:	f2c2 0c00 	movt	ip, #8192	; 0x2000
20002128:	ea42 020c 	orr.w	r2, r2, ip
2000212c:	6362      	str	r2, [r4, #52]	; 0x34
                                                   BIGFIFO_MASK |
                                                   (uint32_t)protocol_mode | 
                                                   ((uint32_t)1 << TXRXDFCOUNT_SHIFT);
        }
        
        this_spi->slaves_cfg[slave].txrxdf_size_reg = frame_bit_length;
2000212e:	f101 0106 	add.w	r1, r1, #6
20002132:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
20002136:	720d      	strb	r5, [r1, #8]
        this_spi->slaves_cfg[slave].clk_gen = (uint8_t)clk_rate;
20002138:	724b      	strb	r3, [r1, #9]
    }
    /* Reenable interrupts */
    NVIC_EnableIRQ( this_spi->irqn );
2000213a:	8883      	ldrh	r3, [r0, #4]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
2000213c:	b21a      	sxth	r2, r3
2000213e:	ea4f 1252 	mov.w	r2, r2, lsr #5
20002142:	f003 031f 	and.w	r3, r3, #31
20002146:	f04f 0101 	mov.w	r1, #1
2000214a:	fa01 f103 	lsl.w	r1, r1, r3
2000214e:	f24e 1300 	movw	r3, #57600	; 0xe100
20002152:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002156:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
2000215a:	bcf0      	pop	{r4, r5, r6, r7}
2000215c:	4770      	bx	lr
2000215e:	bf00      	nop

20002160 <MSS_SPI_set_slave_select>:
void MSS_SPI_set_slave_select
(
    mss_spi_instance_t * this_spi,
    mss_spi_slave_t slave
)
{
20002160:	b538      	push	{r3, r4, r5, lr}
20002162:	4604      	mov	r4, r0
    uint32_t rx_overflow;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20002164:	f244 5360 	movw	r3, #17760	; 0x4560
20002168:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000216c:	4298      	cmp	r0, r3
2000216e:	d006      	beq.n	2000217e <MSS_SPI_set_slave_select+0x1e>
20002170:	f244 43dc 	movw	r3, #17628	; 0x44dc
20002174:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002178:	4298      	cmp	r0, r3
2000217a:	d000      	beq.n	2000217e <MSS_SPI_set_slave_select+0x1e>
2000217c:	be00      	bkpt	0x0000
    
    /* This function is only intended to be used with an SPI master. */
    ASSERT((this_spi->hw_reg->CONTROL & CTRL_MASTER_MASK) == CTRL_MASTER_MASK);
2000217e:	6822      	ldr	r2, [r4, #0]
20002180:	6813      	ldr	r3, [r2, #0]
20002182:	f013 0f02 	tst.w	r3, #2
20002186:	d100      	bne.n	2000218a <MSS_SPI_set_slave_select+0x2a>
20002188:	be00      	bkpt	0x0000
    
    ASSERT(this_spi->slaves_cfg[slave].ctrl_reg != NOT_CONFIGURED);
2000218a:	460d      	mov	r5, r1
2000218c:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
20002190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20002192:	f1b3 3fff 	cmp.w	r3, #4294967295
20002196:	d100      	bne.n	2000219a <MSS_SPI_set_slave_select+0x3a>
20002198:	be00      	bkpt	0x0000

    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
2000219a:	88a3      	ldrh	r3, [r4, #4]
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
2000219c:	b219      	sxth	r1, r3
2000219e:	ea4f 1151 	mov.w	r1, r1, lsr #5
200021a2:	f003 031f 	and.w	r3, r3, #31
200021a6:	f04f 0001 	mov.w	r0, #1
200021aa:	fa00 f003 	lsl.w	r0, r0, r3
200021ae:	f24e 1300 	movw	r3, #57600	; 0xe100
200021b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
200021b6:	f101 0120 	add.w	r1, r1, #32
200021ba:	f843 0021 	str.w	r0, [r3, r1, lsl #2]

    /* Recover from receive overflow. */
    rx_overflow = this_spi->hw_reg->STATUS & RX_OVERFLOW_MASK;
200021be:	6893      	ldr	r3, [r2, #8]
    if(rx_overflow)
200021c0:	f013 0f04 	tst.w	r3, #4
200021c4:	d002      	beq.n	200021cc <MSS_SPI_set_slave_select+0x6c>
    {
         recover_from_rx_overflow(this_spi);
200021c6:	4620      	mov	r0, r4
200021c8:	f7ff fed8 	bl	20001f7c <recover_from_rx_overflow>
    }
    
    /* Set the clock rate. */
    this_spi->hw_reg->CONTROL &= ~(uint32_t)CTRL_ENABLE_MASK;
200021cc:	6823      	ldr	r3, [r4, #0]
200021ce:	681a      	ldr	r2, [r3, #0]
200021d0:	f022 0201 	bic.w	r2, r2, #1
200021d4:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CONTROL = this_spi->slaves_cfg[slave].ctrl_reg;
200021d6:	6822      	ldr	r2, [r4, #0]
200021d8:	f105 0306 	add.w	r3, r5, #6
200021dc:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
200021e0:	6859      	ldr	r1, [r3, #4]
200021e2:	6011      	str	r1, [r2, #0]
    this_spi->hw_reg->CLK_GEN = this_spi->slaves_cfg[slave].clk_gen;
200021e4:	6822      	ldr	r2, [r4, #0]
200021e6:	7a59      	ldrb	r1, [r3, #9]
200021e8:	6191      	str	r1, [r2, #24]
    this_spi->hw_reg->TXRXDF_SIZE = this_spi->slaves_cfg[slave].txrxdf_size_reg;
200021ea:	6822      	ldr	r2, [r4, #0]
200021ec:	7a1b      	ldrb	r3, [r3, #8]
200021ee:	6053      	str	r3, [r2, #4]
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
200021f0:	6823      	ldr	r3, [r4, #0]
200021f2:	681a      	ldr	r2, [r3, #0]
200021f4:	f042 0201 	orr.w	r2, r2, #1
200021f8:	601a      	str	r2, [r3, #0]
    
    /* Set slave select */
    this_spi->hw_reg->SLAVE_SELECT |= ((uint32_t)1 << (uint32_t)slave);
200021fa:	6822      	ldr	r2, [r4, #0]
200021fc:	69d1      	ldr	r1, [r2, #28]
200021fe:	f04f 0301 	mov.w	r3, #1
20002202:	fa03 f505 	lsl.w	r5, r3, r5
20002206:	ea45 0501 	orr.w	r5, r5, r1
2000220a:	61d5      	str	r5, [r2, #28]
    /* Reenable interrupts */
    NVIC_EnableIRQ( this_spi->irqn );
2000220c:	88a2      	ldrh	r2, [r4, #4]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
2000220e:	b211      	sxth	r1, r2
20002210:	ea4f 1151 	mov.w	r1, r1, lsr #5
20002214:	f002 021f 	and.w	r2, r2, #31
20002218:	fa03 f202 	lsl.w	r2, r3, r2
2000221c:	f24e 1300 	movw	r3, #57600	; 0xe100
20002220:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002224:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
20002228:	bd38      	pop	{r3, r4, r5, pc}
2000222a:	bf00      	nop

2000222c <MSS_SPI_clear_slave_select>:
void MSS_SPI_clear_slave_select
(
    mss_spi_instance_t * this_spi,
    mss_spi_slave_t slave
)
{
2000222c:	b538      	push	{r3, r4, r5, lr}
2000222e:	4604      	mov	r4, r0
20002230:	460d      	mov	r5, r1
    uint32_t rx_overflow;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20002232:	f244 5360 	movw	r3, #17760	; 0x4560
20002236:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000223a:	4298      	cmp	r0, r3
2000223c:	d006      	beq.n	2000224c <MSS_SPI_clear_slave_select+0x20>
2000223e:	f244 43dc 	movw	r3, #17628	; 0x44dc
20002242:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002246:	4298      	cmp	r0, r3
20002248:	d000      	beq.n	2000224c <MSS_SPI_clear_slave_select+0x20>
2000224a:	be00      	bkpt	0x0000
    
    /* This function is only intended to be used with an SPI master. */
    ASSERT((this_spi->hw_reg->CONTROL & CTRL_MASTER_MASK) == CTRL_MASTER_MASK);
2000224c:	6822      	ldr	r2, [r4, #0]
2000224e:	6813      	ldr	r3, [r2, #0]
20002250:	f013 0f02 	tst.w	r3, #2
20002254:	d100      	bne.n	20002258 <MSS_SPI_clear_slave_select+0x2c>
20002256:	be00      	bkpt	0x0000

    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
20002258:	88a3      	ldrh	r3, [r4, #4]
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
2000225a:	b219      	sxth	r1, r3
2000225c:	ea4f 1151 	mov.w	r1, r1, lsr #5
20002260:	f003 031f 	and.w	r3, r3, #31
20002264:	f04f 0001 	mov.w	r0, #1
20002268:	fa00 f003 	lsl.w	r0, r0, r3
2000226c:	f24e 1300 	movw	r3, #57600	; 0xe100
20002270:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002274:	f101 0120 	add.w	r1, r1, #32
20002278:	f843 0021 	str.w	r0, [r3, r1, lsl #2]

    /* Recover from receive overflow. */
    rx_overflow = this_spi->hw_reg->STATUS & RX_OVERFLOW_MASK;
2000227c:	6893      	ldr	r3, [r2, #8]
    if(rx_overflow)
2000227e:	f013 0f04 	tst.w	r3, #4
20002282:	d002      	beq.n	2000228a <MSS_SPI_clear_slave_select+0x5e>
    {
         recover_from_rx_overflow(this_spi);
20002284:	4620      	mov	r0, r4
20002286:	f7ff fe79 	bl	20001f7c <recover_from_rx_overflow>
    }
    
    this_spi->hw_reg->SLAVE_SELECT &= ~((uint32_t)1 << (uint32_t)slave);
2000228a:	6822      	ldr	r2, [r4, #0]
2000228c:	69d1      	ldr	r1, [r2, #28]
2000228e:	f04f 0301 	mov.w	r3, #1
20002292:	fa03 f505 	lsl.w	r5, r3, r5
20002296:	ea21 0505 	bic.w	r5, r1, r5
2000229a:	61d5      	str	r5, [r2, #28]
    /* Reenable interrupts */
    NVIC_EnableIRQ( this_spi->irqn );
2000229c:	88a2      	ldrh	r2, [r4, #4]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
2000229e:	b211      	sxth	r1, r2
200022a0:	ea4f 1151 	mov.w	r1, r1, lsr #5
200022a4:	f002 021f 	and.w	r2, r2, #31
200022a8:	fa03 f202 	lsl.w	r2, r3, r2
200022ac:	f24e 1300 	movw	r3, #57600	; 0xe100
200022b0:	f2ce 0300 	movt	r3, #57344	; 0xe000
200022b4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
200022b8:	bd38      	pop	{r3, r4, r5, pc}
200022ba:	bf00      	nop

200022bc <MSS_SPI_transfer_frame>:
uint32_t MSS_SPI_transfer_frame
(
    mss_spi_instance_t * this_spi,
    uint32_t tx_bits
)
{
200022bc:	b410      	push	{r4}
200022be:	b083      	sub	sp, #12
    volatile uint32_t dummy;
    uint32_t rx_fifo_empty;
    uint32_t rx_ready;
    uint32_t tx_done;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
200022c0:	f244 5360 	movw	r3, #17760	; 0x4560
200022c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200022c8:	4298      	cmp	r0, r3
200022ca:	d006      	beq.n	200022da <MSS_SPI_transfer_frame+0x1e>
200022cc:	f244 43dc 	movw	r3, #17628	; 0x44dc
200022d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200022d4:	4298      	cmp	r0, r3
200022d6:	d000      	beq.n	200022da <MSS_SPI_transfer_frame+0x1e>
200022d8:	be00      	bkpt	0x0000
    
    /* This function is only intended to be used with an SPI master. */
    ASSERT((this_spi->hw_reg->CONTROL & CTRL_MASTER_MASK) == CTRL_MASTER_MASK);
200022da:	6803      	ldr	r3, [r0, #0]
200022dc:	681a      	ldr	r2, [r3, #0]
200022de:	f012 0f02 	tst.w	r2, #2
200022e2:	d100      	bne.n	200022e6 <MSS_SPI_transfer_frame+0x2a>
200022e4:	be00      	bkpt	0x0000
    
    /* Ensure single frame transfer selected so interrupts work correctly */
    this_spi->hw_reg->CONTROL = (this_spi->hw_reg->CONTROL & ~TXRXDFCOUNT_MASK)
200022e6:	681c      	ldr	r4, [r3, #0]
200022e8:	f240 02ff 	movw	r2, #255	; 0xff
200022ec:	f6cf 7200 	movt	r2, #65280	; 0xff00
200022f0:	ea04 0202 	and.w	r2, r4, r2
200022f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
200022f8:	601a      	str	r2, [r3, #0]
                                | ((uint32_t)1u << TXRXDFCOUNT_SHIFT);

    /* Flush the Tx and Rx FIFOs. Please note this does not have any effect on A2F200. */
    this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
200022fa:	6803      	ldr	r3, [r0, #0]
200022fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200022fe:	f042 020c 	orr.w	r2, r2, #12
20002302:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Flush Rx FIFO in case we are executing on A2F200. */
    rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
20002304:	6803      	ldr	r3, [r0, #0]
20002306:	689a      	ldr	r2, [r3, #8]
    while(0u == rx_fifo_empty)
20002308:	f012 0f40 	tst.w	r2, #64	; 0x40
2000230c:	d107      	bne.n	2000231e <MSS_SPI_transfer_frame+0x62>
    {
        dummy = this_spi->hw_reg->RX_DATA;
2000230e:	691a      	ldr	r2, [r3, #16]
20002310:	9201      	str	r2, [sp, #4]
        dummy = dummy;  /* Prevent Lint warning. */
20002312:	9a01      	ldr	r2, [sp, #4]
20002314:	9201      	str	r2, [sp, #4]
        rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
20002316:	689a      	ldr	r2, [r3, #8]
    /* Flush the Tx and Rx FIFOs. Please note this does not have any effect on A2F200. */
    this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
    
    /* Flush Rx FIFO in case we are executing on A2F200. */
    rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
    while(0u == rx_fifo_empty)
20002318:	f012 0f40 	tst.w	r2, #64	; 0x40
2000231c:	d0f7      	beq.n	2000230e <MSS_SPI_transfer_frame+0x52>
        dummy = dummy;  /* Prevent Lint warning. */
        rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
    }
    
    /* Send frame. */
    this_spi->hw_reg->TX_DATA = tx_bits;
2000231e:	6159      	str	r1, [r3, #20]
    
    /* Wait for frame Tx to complete. */
    tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
20002320:	6803      	ldr	r3, [r0, #0]
20002322:	689a      	ldr	r2, [r3, #8]
    while(0u == tx_done)
20002324:	f012 0f01 	tst.w	r2, #1
20002328:	d103      	bne.n	20002332 <MSS_SPI_transfer_frame+0x76>
    {
        tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
2000232a:	689a      	ldr	r2, [r3, #8]
    /* Send frame. */
    this_spi->hw_reg->TX_DATA = tx_bits;
    
    /* Wait for frame Tx to complete. */
    tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
    while(0u == tx_done)
2000232c:	f012 0f01 	tst.w	r2, #1
20002330:	d0fb      	beq.n	2000232a <MSS_SPI_transfer_frame+0x6e>
        tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
    }
    
    /* Read received frame. */
    /* Wait for Rx complete. */
    rx_ready = this_spi->hw_reg->STATUS & RX_DATA_READY_MASK;
20002332:	689a      	ldr	r2, [r3, #8]
    while(0u == rx_ready)
20002334:	f012 0f02 	tst.w	r2, #2
20002338:	d103      	bne.n	20002342 <MSS_SPI_transfer_frame+0x86>
    {
        rx_ready = this_spi->hw_reg->STATUS & RX_DATA_READY_MASK;
2000233a:	689a      	ldr	r2, [r3, #8]
    }
    
    /* Read received frame. */
    /* Wait for Rx complete. */
    rx_ready = this_spi->hw_reg->STATUS & RX_DATA_READY_MASK;
    while(0u == rx_ready)
2000233c:	f012 0f02 	tst.w	r2, #2
20002340:	d0fb      	beq.n	2000233a <MSS_SPI_transfer_frame+0x7e>
    {
        rx_ready = this_spi->hw_reg->STATUS & RX_DATA_READY_MASK;
    }
    /* Return Rx data. */
    return( this_spi->hw_reg->RX_DATA );
20002342:	6918      	ldr	r0, [r3, #16]
}
20002344:	b003      	add	sp, #12
20002346:	bc10      	pop	{r4}
20002348:	4770      	bx	lr
2000234a:	bf00      	nop

2000234c <fill_slave_tx_fifo>:
 */
static void fill_slave_tx_fifo
(
    mss_spi_instance_t * this_spi
)
{
2000234c:	b410      	push	{r4}
    uint32_t guard = 0u;

    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
2000234e:	6802      	ldr	r2, [r0, #0]
20002350:	6893      	ldr	r3, [r2, #8]
20002352:	f413 7f80 	tst.w	r3, #256	; 0x100
20002356:	d113      	bne.n	20002380 <fill_slave_tx_fifo+0x34>
          (this_spi->slave_tx_idx < this_spi->slave_tx_size))
20002358:	6903      	ldr	r3, [r0, #16]
2000235a:	68c1      	ldr	r1, [r0, #12]
2000235c:	428b      	cmp	r3, r1
2000235e:	d213      	bcs.n	20002388 <fill_slave_tx_fifo+0x3c>
    {
        /* Sending from primary slave transmit buffer */
        this_spi->hw_reg->TX_DATA = this_spi->slave_tx_buffer[this_spi->slave_tx_idx];
20002360:	6881      	ldr	r1, [r0, #8]
20002362:	5ccb      	ldrb	r3, [r1, r3]
20002364:	6153      	str	r3, [r2, #20]
        ++this_spi->slave_tx_idx;
20002366:	6903      	ldr	r3, [r0, #16]
20002368:	f103 0301 	add.w	r3, r3, #1
2000236c:	6103      	str	r3, [r0, #16]
    mss_spi_instance_t * this_spi
)
{
    uint32_t guard = 0u;

    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
2000236e:	6802      	ldr	r2, [r0, #0]
20002370:	6891      	ldr	r1, [r2, #8]
20002372:	f411 7f80 	tst.w	r1, #256	; 0x100
20002376:	d103      	bne.n	20002380 <fill_slave_tx_fifo+0x34>
          (this_spi->slave_tx_idx < this_spi->slave_tx_size))
20002378:	68c1      	ldr	r1, [r0, #12]
2000237a:	4299      	cmp	r1, r3
2000237c:	d8f0      	bhi.n	20002360 <fill_slave_tx_fifo+0x14>
2000237e:	e003      	b.n	20002388 <fill_slave_tx_fifo+0x3c>
        /* Sending from primary slave transmit buffer */
        this_spi->hw_reg->TX_DATA = this_spi->slave_tx_buffer[this_spi->slave_tx_idx];
        ++this_spi->slave_tx_idx;
    }

    if(this_spi->slave_tx_idx >= this_spi->slave_tx_size)
20002380:	6902      	ldr	r2, [r0, #16]
20002382:	68c3      	ldr	r3, [r0, #12]
20002384:	429a      	cmp	r2, r3
20002386:	d317      	bcc.n	200023b8 <fill_slave_tx_fifo+0x6c>
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20002388:	6802      	ldr	r2, [r0, #0]
2000238a:	6893      	ldr	r3, [r2, #8]
2000238c:	f413 7f80 	tst.w	r3, #256	; 0x100
20002390:	d112      	bne.n	200023b8 <fill_slave_tx_fifo+0x6c>
              (this_spi->resp_buff_tx_idx < this_spi->resp_buff_size))
20002392:	69c3      	ldr	r3, [r0, #28]
20002394:	6981      	ldr	r1, [r0, #24]
20002396:	428b      	cmp	r3, r1
20002398:	d20e      	bcs.n	200023b8 <fill_slave_tx_fifo+0x6c>
        {
            /* Sending from command response buffer */
            this_spi->hw_reg->TX_DATA = this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx];
2000239a:	6941      	ldr	r1, [r0, #20]
2000239c:	5ccb      	ldrb	r3, [r1, r3]
2000239e:	6153      	str	r3, [r2, #20]
            ++this_spi->resp_buff_tx_idx;
200023a0:	69c3      	ldr	r3, [r0, #28]
200023a2:	f103 0301 	add.w	r3, r3, #1
200023a6:	61c3      	str	r3, [r0, #28]
        ++this_spi->slave_tx_idx;
    }

    if(this_spi->slave_tx_idx >= this_spi->slave_tx_size)
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
200023a8:	6802      	ldr	r2, [r0, #0]
200023aa:	6891      	ldr	r1, [r2, #8]
200023ac:	f411 7f80 	tst.w	r1, #256	; 0x100
200023b0:	d102      	bne.n	200023b8 <fill_slave_tx_fifo+0x6c>
              (this_spi->resp_buff_tx_idx < this_spi->resp_buff_size))
200023b2:	6981      	ldr	r1, [r0, #24]
200023b4:	4299      	cmp	r1, r3
200023b6:	d8f0      	bhi.n	2000239a <fill_slave_tx_fifo+0x4e>
            this_spi->hw_reg->TX_DATA = this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx];
            ++this_spi->resp_buff_tx_idx;
        }
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
200023b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
200023ba:	b1cb      	cbz	r3, 200023f0 <fill_slave_tx_fifo+0xa4>
200023bc:	6902      	ldr	r2, [r0, #16]
200023be:	68c3      	ldr	r3, [r0, #12]
200023c0:	429a      	cmp	r2, r3
200023c2:	d315      	bcc.n	200023f0 <fill_slave_tx_fifo+0xa4>
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
200023c4:	69c2      	ldr	r2, [r0, #28]
200023c6:	6983      	ldr	r3, [r0, #24]
200023c8:	429a      	cmp	r2, r3
200023ca:	d311      	bcc.n	200023f0 <fill_slave_tx_fifo+0xa4>
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
200023cc:	6803      	ldr	r3, [r0, #0]
200023ce:	689a      	ldr	r2, [r3, #8]
200023d0:	f412 7f80 	tst.w	r2, #256	; 0x100
200023d4:	d10c      	bne.n	200023f0 <fill_slave_tx_fifo+0xa4>
200023d6:	f04f 0200 	mov.w	r2, #0
              (guard < BIG_FIFO_SIZE))
        {
            /* Nothing left so pad with 0s for consistency */
            this_spi->hw_reg->TX_DATA = 0x00u;
200023da:	4614      	mov	r4, r2
200023dc:	615c      	str	r4, [r3, #20]
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
200023de:	6803      	ldr	r3, [r0, #0]
200023e0:	6899      	ldr	r1, [r3, #8]
200023e2:	f411 7f80 	tst.w	r1, #256	; 0x100
200023e6:	d103      	bne.n	200023f0 <fill_slave_tx_fifo+0xa4>
             * We use the guard count to cover the unlikely event that we are
             * never seeing the TX FIFO full because the data is being pulled
             * out as fast as we can stuff it in. In this event we never spend
             * more than a full FIFOs worth of time spinning here.
             */
            guard++;
200023e8:	f102 0201 	add.w	r2, r2, #1
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
200023ec:	2a20      	cmp	r2, #32
200023ee:	d1f5      	bne.n	200023dc <fill_slave_tx_fifo+0x90>
             */
            guard++;
        }
    }

}
200023f0:	bc10      	pop	{r4}
200023f2:	4770      	bx	lr

200023f4 <read_slave_rx_fifo>:
 */
static void read_slave_rx_fifo
(
    mss_spi_instance_t * this_spi
)
{
200023f4:	b510      	push	{r4, lr}
200023f6:	b082      	sub	sp, #8
200023f8:	4604      	mov	r4, r0
    volatile uint32_t rx_frame;
    
    if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
200023fa:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
200023fe:	2b02      	cmp	r3, #2
20002400:	d10c      	bne.n	2000241c <read_slave_rx_fifo+0x28>
20002402:	e005      	b.n	20002410 <read_slave_rx_fifo+0x1c>
    {
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
        {
            /* Single frame handling mode. */
            rx_frame = this_spi->hw_reg->RX_DATA;
20002404:	6913      	ldr	r3, [r2, #16]
20002406:	9301      	str	r3, [sp, #4]
            if(0u != this_spi->frame_rx_handler)
20002408:	6f63      	ldr	r3, [r4, #116]	; 0x74
2000240a:	b113      	cbz	r3, 20002412 <read_slave_rx_fifo+0x1e>
            {
                this_spi->frame_rx_handler( rx_frame );
2000240c:	9801      	ldr	r0, [sp, #4]
2000240e:	4798      	blx	r3
{
    volatile uint32_t rx_frame;
    
    if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
    {
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
20002410:	6822      	ldr	r2, [r4, #0]
20002412:	6893      	ldr	r3, [r2, #8]
20002414:	f013 0f40 	tst.w	r3, #64	; 0x40
20002418:	d0f4      	beq.n	20002404 <read_slave_rx_fifo+0x10>
2000241a:	e023      	b.n	20002464 <read_slave_rx_fifo+0x70>
            {
                this_spi->frame_rx_handler( rx_frame );
            }
        }
    }
    else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
2000241c:	2b01      	cmp	r3, #1
        }
    }
    else
    {
        /* Should not happen... Just purge FIFO */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
2000241e:	6803      	ldr	r3, [r0, #0]
20002420:	689a      	ldr	r2, [r3, #8]
            {
                this_spi->frame_rx_handler( rx_frame );
            }
        }
    }
    else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
20002422:	d003      	beq.n	2000242c <read_slave_rx_fifo+0x38>
        }
    }
    else
    {
        /* Should not happen... Just purge FIFO */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
20002424:	f012 0f40 	tst.w	r2, #64	; 0x40
20002428:	d016      	beq.n	20002458 <read_slave_rx_fifo+0x64>
2000242a:	e01b      	b.n	20002464 <read_slave_rx_fifo+0x70>
        }
    }
    else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
    {
        /* Block handling mode. */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
2000242c:	f012 0f40 	tst.w	r2, #64	; 0x40
20002430:	d118      	bne.n	20002464 <read_slave_rx_fifo+0x70>
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
20002432:	691b      	ldr	r3, [r3, #16]
20002434:	9301      	str	r3, [sp, #4]
            if(this_spi->slave_rx_idx < this_spi->slave_rx_size)
20002436:	6b23      	ldr	r3, [r4, #48]	; 0x30
20002438:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
2000243a:	4293      	cmp	r3, r2
            {
                this_spi->slave_rx_buffer[this_spi->slave_rx_idx] = (uint8_t)rx_frame;
2000243c:	bf3e      	ittt	cc
2000243e:	9901      	ldrcc	r1, [sp, #4]
20002440:	6aa2      	ldrcc	r2, [r4, #40]	; 0x28
20002442:	54d1      	strbcc	r1, [r2, r3]
            }

            ++this_spi->slave_rx_idx;
20002444:	6b23      	ldr	r3, [r4, #48]	; 0x30
20002446:	f103 0301 	add.w	r3, r3, #1
2000244a:	6323      	str	r3, [r4, #48]	; 0x30
        }
    }
    else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
    {
        /* Block handling mode. */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
2000244c:	6823      	ldr	r3, [r4, #0]
2000244e:	689a      	ldr	r2, [r3, #8]
20002450:	f012 0f40 	tst.w	r2, #64	; 0x40
20002454:	d0ed      	beq.n	20002432 <read_slave_rx_fifo+0x3e>
20002456:	e005      	b.n	20002464 <read_slave_rx_fifo+0x70>
    else
    {
        /* Should not happen... Just purge FIFO */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
20002458:	691a      	ldr	r2, [r3, #16]
2000245a:	9201      	str	r2, [sp, #4]
        }
    }
    else
    {
        /* Should not happen... Just purge FIFO */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
2000245c:	689a      	ldr	r2, [r3, #8]
2000245e:	f012 0f40 	tst.w	r2, #64	; 0x40
20002462:	d0f9      	beq.n	20002458 <read_slave_rx_fifo+0x64>
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
        }
    }
}
20002464:	b002      	add	sp, #8
20002466:	bd10      	pop	{r4, pc}

20002468 <mss_spi_isr>:
 */
static void mss_spi_isr
(
    mss_spi_instance_t * this_spi
)
{    
20002468:	b570      	push	{r4, r5, r6, lr}
2000246a:	b082      	sub	sp, #8
2000246c:	4604      	mov	r4, r0
    volatile uint32_t rx_frame;
    __I  uint32_t *this_mis = &this_spi->hw_reg->MIS;
2000246e:	6805      	ldr	r5, [r0, #0]

    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20002470:	f244 5360 	movw	r3, #17760	; 0x4560
20002474:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002478:	4298      	cmp	r0, r3
2000247a:	d006      	beq.n	2000248a <mss_spi_isr+0x22>
2000247c:	f244 43dc 	movw	r3, #17628	; 0x44dc
20002480:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002484:	4298      	cmp	r0, r3
20002486:	d000      	beq.n	2000248a <mss_spi_isr+0x22>
20002488:	be00      	bkpt	0x0000
  
    if(0u != (*this_mis & RXDONE_IRQ_MASK))
2000248a:	6a2b      	ldr	r3, [r5, #32]
2000248c:	f013 0f02 	tst.w	r3, #2
20002490:	d038      	beq.n	20002504 <mss_spi_isr+0x9c>
    {
        if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
20002492:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
20002496:	2b02      	cmp	r3, #2
20002498:	d10c      	bne.n	200024b4 <mss_spi_isr+0x4c>
2000249a:	e005      	b.n	200024a8 <mss_spi_isr+0x40>
        {
            /* Single frame handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
2000249c:	6913      	ldr	r3, [r2, #16]
2000249e:	9301      	str	r3, [sp, #4]
                if(0u != this_spi->frame_rx_handler)
200024a0:	6f63      	ldr	r3, [r4, #116]	; 0x74
200024a2:	b113      	cbz	r3, 200024aa <mss_spi_isr+0x42>
                {
                    this_spi->frame_rx_handler( rx_frame );
200024a4:	9801      	ldr	r0, [sp, #4]
200024a6:	4798      	blx	r3
    if(0u != (*this_mis & RXDONE_IRQ_MASK))
    {
        if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
        {
            /* Single frame handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
200024a8:	6822      	ldr	r2, [r4, #0]
200024aa:	6893      	ldr	r3, [r2, #8]
200024ac:	f013 0f40 	tst.w	r3, #64	; 0x40
200024b0:	d0f4      	beq.n	2000249c <mss_spi_isr+0x34>
200024b2:	e023      	b.n	200024fc <mss_spi_isr+0x94>
                {
                    this_spi->frame_rx_handler( rx_frame );
                }
            }
        }
        else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
200024b4:	2b01      	cmp	r3, #1
            }
        }
        else
        {
            /* No slave handling in place so just purge FIFO */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
200024b6:	68ab      	ldr	r3, [r5, #8]
                {
                    this_spi->frame_rx_handler( rx_frame );
                }
            }
        }
        else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
200024b8:	d003      	beq.n	200024c2 <mss_spi_isr+0x5a>
            }
        }
        else
        {
            /* No slave handling in place so just purge FIFO */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
200024ba:	f013 0f40 	tst.w	r3, #64	; 0x40
200024be:	d017      	beq.n	200024f0 <mss_spi_isr+0x88>
200024c0:	e01c      	b.n	200024fc <mss_spi_isr+0x94>
            }
        }
        else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
        {
            /* Block handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
200024c2:	f013 0f40 	tst.w	r3, #64	; 0x40
200024c6:	d119      	bne.n	200024fc <mss_spi_isr+0x94>
200024c8:	462b      	mov	r3, r5
            {
                rx_frame = this_spi->hw_reg->RX_DATA;                /* Read from FIFO irrespective */
200024ca:	691b      	ldr	r3, [r3, #16]
200024cc:	9301      	str	r3, [sp, #4]
                if(this_spi->slave_rx_idx < this_spi->slave_rx_size) /* Write to array if required */
200024ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
200024d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
200024d2:	4293      	cmp	r3, r2
                {
                    this_spi->slave_rx_buffer[this_spi->slave_rx_idx] = (uint8_t)rx_frame;
200024d4:	bf3e      	ittt	cc
200024d6:	9901      	ldrcc	r1, [sp, #4]
200024d8:	6aa2      	ldrcc	r2, [r4, #40]	; 0x28
200024da:	54d1      	strbcc	r1, [r2, r3]
                }

                ++this_spi->slave_rx_idx;            
200024dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
200024de:	f103 0301 	add.w	r3, r3, #1
200024e2:	6323      	str	r3, [r4, #48]	; 0x30
            }
        }
        else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
        {
            /* Block handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
200024e4:	6823      	ldr	r3, [r4, #0]
200024e6:	689a      	ldr	r2, [r3, #8]
200024e8:	f012 0f40 	tst.w	r2, #64	; 0x40
200024ec:	d0ed      	beq.n	200024ca <mss_spi_isr+0x62>
200024ee:	e005      	b.n	200024fc <mss_spi_isr+0x94>
        else
        {
            /* No slave handling in place so just purge FIFO */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
200024f0:	692b      	ldr	r3, [r5, #16]
200024f2:	9301      	str	r3, [sp, #4]
            }
        }
        else
        {
            /* No slave handling in place so just purge FIFO */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
200024f4:	68ab      	ldr	r3, [r5, #8]
200024f6:	f013 0f40 	tst.w	r3, #64	; 0x40
200024fa:	d0f9      	beq.n	200024f0 <mss_spi_isr+0x88>
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
            }
        }

        this_spi->hw_reg->INT_CLEAR = RXDONE_IRQ_MASK;
200024fc:	6823      	ldr	r3, [r4, #0]
200024fe:	f04f 0202 	mov.w	r2, #2
20002502:	60da      	str	r2, [r3, #12]
    }

   /* Handle transmit. */
    if(0u != (*this_mis & TXDONE_IRQ_MASK))
20002504:	6a2b      	ldr	r3, [r5, #32]
20002506:	f013 0f01 	tst.w	r3, #1
2000250a:	d00e      	beq.n	2000252a <mss_spi_isr+0xc2>
    {
        if( MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode )
2000250c:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
20002510:	2b02      	cmp	r3, #2
20002512:	d103      	bne.n	2000251c <mss_spi_isr+0xb4>
        {
           /* Reload slave tx frame into Tx data register. */
            this_spi->hw_reg->TX_DATA = this_spi->slave_tx_frame;
20002514:	6823      	ldr	r3, [r4, #0]
20002516:	6fa2      	ldr	r2, [r4, #120]	; 0x78
20002518:	615a      	str	r2, [r3, #20]
2000251a:	e002      	b.n	20002522 <mss_spi_isr+0xba>
        }
        else /* Must be block mode so load FIFO to the max */
        {
            fill_slave_tx_fifo(this_spi);
2000251c:	4620      	mov	r0, r4
2000251e:	f7ff ff15 	bl	2000234c <fill_slave_tx_fifo>
        }

        this_spi->hw_reg->INT_CLEAR = TXDONE_IRQ_MASK;
20002522:	6823      	ldr	r3, [r4, #0]
20002524:	f04f 0201 	mov.w	r2, #1
20002528:	60da      	str	r2, [r3, #12]
    }
    
    /* Handle command interrupt. */
    if(0u != (*this_mis & CMD_IRQ_MASK))
2000252a:	6a2b      	ldr	r3, [r5, #32]
2000252c:	f013 0f10 	tst.w	r3, #16
20002530:	d016      	beq.n	20002560 <mss_spi_isr+0xf8>
    {
        read_slave_rx_fifo(this_spi);
20002532:	4620      	mov	r0, r4
20002534:	f7ff ff5e 	bl	200023f4 <read_slave_rx_fifo>
        
        /*
         * Call the command handler if one exists.
         */
        if(0u != this_spi->cmd_handler)
20002538:	6a23      	ldr	r3, [r4, #32]
2000253a:	b12b      	cbz	r3, 20002548 <mss_spi_isr+0xe0>
        {
            (*this_spi->cmd_handler)(this_spi->slave_rx_buffer, this_spi->slave_rx_idx);
2000253c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
2000253e:	6b21      	ldr	r1, [r4, #48]	; 0x30
20002540:	4798      	blx	r3
            fill_slave_tx_fifo(this_spi);
20002542:	4620      	mov	r0, r4
20002544:	f7ff ff02 	bl	2000234c <fill_slave_tx_fifo>
        }
        /* Set cmd_done to indicate it is now safe to 0 fill TX FIFO */
        this_spi->cmd_done = 1u;
20002548:	f04f 0301 	mov.w	r3, #1
2000254c:	6263      	str	r3, [r4, #36]	; 0x24
        /* Disable command interrupt until slave select becomes de-asserted to avoid retriggering. */
        this_spi->hw_reg->CONTROL2 &= ~(uint32_t)C2_ENABLE_CMD_IRQ_MASK;
2000254e:	6823      	ldr	r3, [r4, #0]
20002550:	6a9a      	ldr	r2, [r3, #40]	; 0x28
20002552:	f022 0210 	bic.w	r2, r2, #16
20002556:	629a      	str	r2, [r3, #40]	; 0x28
        this_spi->hw_reg->INT_CLEAR = CMD_IRQ_MASK;
20002558:	6823      	ldr	r3, [r4, #0]
2000255a:	f04f 0210 	mov.w	r2, #16
2000255e:	60da      	str	r2, [r3, #12]
    }

    if(0u != (*this_mis & RXOVFLOW_IRQ_MASK))
20002560:	6a2b      	ldr	r3, [r5, #32]
20002562:	f013 0f04 	tst.w	r3, #4
20002566:	d00b      	beq.n	20002580 <mss_spi_isr+0x118>
    {
        /*
         * Receive overflow, not a lot we can do for this. Reset the receive
         *  FIFO, clear the interrupt and hope it doesn't happen again...
         */
        this_spi->hw_reg->COMMAND |= RX_FIFO_RESET_MASK;
20002568:	6823      	ldr	r3, [r4, #0]
2000256a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000256c:	f042 0204 	orr.w	r2, r2, #4
20002570:	62da      	str	r2, [r3, #44]	; 0x2c
        recover_from_rx_overflow(this_spi);
20002572:	4620      	mov	r0, r4
20002574:	f7ff fd02 	bl	20001f7c <recover_from_rx_overflow>
        this_spi->hw_reg->INT_CLEAR = RXOVFLOW_IRQ_MASK;
20002578:	6823      	ldr	r3, [r4, #0]
2000257a:	f04f 0204 	mov.w	r2, #4
2000257e:	60da      	str	r2, [r3, #12]
     * slave TX FIFO data setup (if there is one).
     * In block mode this will probably not be very successful as we will
     * be out of synch with the master but the reset on SSEND will hopefully
     * take care of that for the next transfer.
     */
    if(0u != (*this_mis & TXURUN_IRQ_MASK))
20002580:	6a2b      	ldr	r3, [r5, #32]
20002582:	f013 0f08 	tst.w	r3, #8
20002586:	d023      	beq.n	200025d0 <mss_spi_isr+0x168>
    {
        this_spi->hw_reg->COMMAND |= TX_FIFO_RESET_MASK;
20002588:	6823      	ldr	r3, [r4, #0]
2000258a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000258c:	f042 0208 	orr.w	r2, r2, #8
20002590:	62da      	str	r2, [r3, #44]	; 0x2c
        if( MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode )
20002592:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
20002596:	2b02      	cmp	r3, #2
20002598:	d10e      	bne.n	200025b8 <mss_spi_isr+0x150>
        {
            this_spi->hw_reg->CONTROL = (this_spi->hw_reg->CONTROL & ~TXRXDFCOUNT_MASK)
2000259a:	6822      	ldr	r2, [r4, #0]
2000259c:	6811      	ldr	r1, [r2, #0]
2000259e:	f240 03ff 	movw	r3, #255	; 0xff
200025a2:	f6cf 7300 	movt	r3, #65280	; 0xff00
200025a6:	ea01 0303 	and.w	r3, r1, r3
200025aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
200025ae:	6013      	str	r3, [r2, #0]
                                        | ((uint32_t)1u << TXRXDFCOUNT_SHIFT);
           /* Reload slave tx frame into Tx data register. */
            this_spi->hw_reg->TX_DATA = this_spi->slave_tx_frame;
200025b0:	6823      	ldr	r3, [r4, #0]
200025b2:	6fa2      	ldr	r2, [r4, #120]	; 0x78
200025b4:	615a      	str	r2, [r3, #20]
200025b6:	e007      	b.n	200025c8 <mss_spi_isr+0x160>
        }
        else if( MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode )
200025b8:	2b01      	cmp	r3, #1
200025ba:	d105      	bne.n	200025c8 <mss_spi_isr+0x160>
        {
            /* Block mode so reload FIFO to the max */
            this_spi->slave_tx_idx = 0u;
200025bc:	f04f 0300 	mov.w	r3, #0
200025c0:	6123      	str	r3, [r4, #16]
            fill_slave_tx_fifo(this_spi);
200025c2:	4620      	mov	r0, r4
200025c4:	f7ff fec2 	bl	2000234c <fill_slave_tx_fifo>
        else
        {
            /* Not frame or block mode? Can't do anything here... */
        }

        this_spi->hw_reg->INT_CLEAR = TXURUN_IRQ_MASK;
200025c8:	6823      	ldr	r3, [r4, #0]
200025ca:	f04f 0208 	mov.w	r2, #8
200025ce:	60da      	str	r2, [r3, #12]
    /*
     * Handle slave select becoming de-asserted. Only enables if
     * we are operating in block mode, in frame mode we do everything
     * in the receive and transmit interrupt handlers.
     */
    if(0u != (*this_mis & SSEND_IRQ_MASK))
200025d0:	6a2b      	ldr	r3, [r5, #32]
200025d2:	f013 0f20 	tst.w	r3, #32
200025d6:	d029      	beq.n	2000262c <mss_spi_isr+0x1c4>
    {
        uint32_t rx_size;
        
        read_slave_rx_fifo(this_spi);
200025d8:	4620      	mov	r0, r4
200025da:	f7ff ff0b 	bl	200023f4 <read_slave_rx_fifo>
        rx_size = this_spi->slave_rx_idx;
200025de:	6b26      	ldr	r6, [r4, #48]	; 0x30
        /*
         * Re-enable command interrupt if required and clear all the response
         * buffer state in readiness for next response. This must be done
         * before reloading the TX FIFO.
         */
        if(0u != this_spi->cmd_handler)
200025e0:	6a23      	ldr	r3, [r4, #32]
200025e2:	b173      	cbz	r3, 20002602 <mss_spi_isr+0x19a>
        {
            this_spi->cmd_done = 0u;
200025e4:	f04f 0300 	mov.w	r3, #0
200025e8:	6263      	str	r3, [r4, #36]	; 0x24
            this_spi->resp_tx_buffer = 0u;
200025ea:	6163      	str	r3, [r4, #20]
            this_spi->resp_buff_size = 0u;
200025ec:	61a3      	str	r3, [r4, #24]
            this_spi->resp_buff_tx_idx = 0u;
200025ee:	61e3      	str	r3, [r4, #28]
            this_spi->hw_reg->INT_CLEAR = CMD_IRQ_MASK;
200025f0:	6823      	ldr	r3, [r4, #0]
200025f2:	f04f 0210 	mov.w	r2, #16
200025f6:	60da      	str	r2, [r3, #12]
            this_spi->hw_reg->CONTROL2 |= C2_ENABLE_CMD_IRQ_MASK;
200025f8:	6823      	ldr	r3, [r4, #0]
200025fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
200025fc:	f042 0210 	orr.w	r2, r2, #16
20002600:	629a      	str	r2, [r3, #40]	; 0x28
        /* 
         * Reset the transmit index to 0 to restart transmit at the start of the
         * transmit buffer in the next transaction. This also requires flushing
         * the Tx FIFO and refilling it with the start of Tx data buffer.
         */
        this_spi->slave_tx_idx = 0u;
20002602:	f04f 0500 	mov.w	r5, #0
20002606:	6125      	str	r5, [r4, #16]
        this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
20002608:	6823      	ldr	r3, [r4, #0]
2000260a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000260c:	f042 020c 	orr.w	r2, r2, #12
20002610:	62da      	str	r2, [r3, #44]	; 0x2c
        fill_slave_tx_fifo(this_spi);
20002612:	4620      	mov	r0, r4
20002614:	f7ff fe9a 	bl	2000234c <fill_slave_tx_fifo>
        
        /* Prepare to receive next packet. */
        this_spi->slave_rx_idx = 0u;
20002618:	6325      	str	r5, [r4, #48]	; 0x30
        /*
         * Call the receive handler if one exists.
         */
        if(0u != this_spi->block_rx_handler)
2000261a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2000261c:	b113      	cbz	r3, 20002624 <mss_spi_isr+0x1bc>
        {
            (*this_spi->block_rx_handler)(this_spi->slave_rx_buffer, rx_size);
2000261e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
20002620:	4631      	mov	r1, r6
20002622:	4798      	blx	r3
        }
        
        this_spi->hw_reg->INT_CLEAR = SSEND_IRQ_MASK;
20002624:	6823      	ldr	r3, [r4, #0]
20002626:	f04f 0220 	mov.w	r2, #32
2000262a:	60da      	str	r2, [r3, #12]
    }
}
2000262c:	b002      	add	sp, #8
2000262e:	bd70      	pop	{r4, r5, r6, pc}

20002630 <SPI0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void SPI0_IRQHandler(void)
#else
void SPI0_IRQHandler( void )
#endif
{
20002630:	4668      	mov	r0, sp
20002632:	f020 0107 	bic.w	r1, r0, #7
20002636:	468d      	mov	sp, r1
20002638:	b501      	push	{r0, lr}
    mss_spi_isr(&g_mss_spi0);
2000263a:	f244 5060 	movw	r0, #17760	; 0x4560
2000263e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002642:	f7ff ff11 	bl	20002468 <mss_spi_isr>
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20002646:	f24e 1300 	movw	r3, #57600	; 0xe100
2000264a:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000264e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
20002652:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC_ClearPendingIRQ(SPI0_IRQn);
}
20002656:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
2000265a:	4685      	mov	sp, r0
2000265c:	4770      	bx	lr
2000265e:	bf00      	nop

20002660 <SPI1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void SPI1_IRQHandler(void)
#else
void SPI1_IRQHandler(void)
#endif
{
20002660:	4668      	mov	r0, sp
20002662:	f020 0107 	bic.w	r1, r0, #7
20002666:	468d      	mov	sp, r1
20002668:	b501      	push	{r0, lr}
    mss_spi_isr(&g_mss_spi1);
2000266a:	f244 40dc 	movw	r0, #17628	; 0x44dc
2000266e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002672:	f7ff fef9 	bl	20002468 <mss_spi_isr>
20002676:	f24e 1300 	movw	r3, #57600	; 0xe100
2000267a:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000267e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
20002682:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC_ClearPendingIRQ(SPI1_IRQn);
}
20002686:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
2000268a:	4685      	mov	sp, r0
2000268c:	4770      	bx	lr
2000268e:	bf00      	nop

20002690 <MSS_SPI_init>:
 */
void MSS_SPI_init
(
    mss_spi_instance_t * this_spi
)
{
20002690:	b538      	push	{r3, r4, r5, lr}
20002692:	4604      	mov	r4, r0
    uint16_t slave;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20002694:	f244 5360 	movw	r3, #17760	; 0x4560
20002698:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000269c:	4298      	cmp	r0, r3
2000269e:	d006      	beq.n	200026ae <MSS_SPI_init+0x1e>
200026a0:	f244 43dc 	movw	r3, #17628	; 0x44dc
200026a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200026a8:	4298      	cmp	r0, r3
200026aa:	d000      	beq.n	200026ae <MSS_SPI_init+0x1e>
200026ac:	be00      	bkpt	0x0000
     * Initialize SPI driver instance data. Relies on the majority
     * of data requiring 0 for initial state so we just need to fill
     * with 0s and finish off with a small number of non zero values.
     */
    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
200026ae:	88a3      	ldrh	r3, [r4, #4]
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
200026b0:	b21a      	sxth	r2, r3
200026b2:	ea4f 1252 	mov.w	r2, r2, lsr #5
200026b6:	f003 031f 	and.w	r3, r3, #31
200026ba:	f04f 0501 	mov.w	r5, #1
200026be:	fa05 f103 	lsl.w	r1, r5, r3
200026c2:	f24e 1300 	movw	r3, #57600	; 0xe100
200026c6:	f2ce 0300 	movt	r3, #57344	; 0xe000
200026ca:	f102 0220 	add.w	r2, r2, #32
200026ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    memset(this_spi, 0, sizeof(mss_spi_instance_t));
200026d2:	4620      	mov	r0, r4
200026d4:	f04f 0100 	mov.w	r1, #0
200026d8:	f04f 0284 	mov.w	r2, #132	; 0x84
200026dc:	f001 fd84 	bl	200041e8 <memset>
    
    this_spi->cmd_done = 1u;
200026e0:	6265      	str	r5, [r4, #36]	; 0x24
200026e2:	f04f 0300 	mov.w	r3, #0

    for(slave = 0u; slave < (uint16_t)MSS_SPI_MAX_NB_OF_SLAVES; ++slave)
    {
        this_spi->slaves_cfg[slave].ctrl_reg = NOT_CONFIGURED;
200026e6:	f04f 31ff 	mov.w	r1, #4294967295
200026ea:	eb04 0203 	add.w	r2, r4, r3
200026ee:	6351      	str	r1, [r2, #52]	; 0x34
200026f0:	f103 0308 	add.w	r3, r3, #8

    memset(this_spi, 0, sizeof(mss_spi_instance_t));
    
    this_spi->cmd_done = 1u;

    for(slave = 0u; slave < (uint16_t)MSS_SPI_MAX_NB_OF_SLAVES; ++slave)
200026f4:	2b40      	cmp	r3, #64	; 0x40
200026f6:	d1f8      	bne.n	200026ea <MSS_SPI_init+0x5a>
    {
        this_spi->slaves_cfg[slave].ctrl_reg = NOT_CONFIGURED;
    }

    if(this_spi == &g_mss_spi0)
200026f8:	f244 5360 	movw	r3, #17760	; 0x4560
200026fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002700:	429c      	cmp	r4, r3
20002702:	d120      	bne.n	20002746 <MSS_SPI_init+0xb6>
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI0_BASE);
20002704:	f244 5360 	movw	r3, #17760	; 0x4560
20002708:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000270c:	f241 0200 	movw	r2, #4096	; 0x1000
20002710:	f2c4 0200 	movt	r2, #16384	; 0x4000
20002714:	601a      	str	r2, [r3, #0]
        this_spi->irqn = SPI0_IRQn;
20002716:	f04f 020c 	mov.w	r2, #12
2000271a:	809a      	strh	r2, [r3, #4]

        /* reset SPI0 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI0_SOFTRESET_MASK;
2000271c:	f242 0300 	movw	r3, #8192	; 0x2000
20002720:	f2ce 0304 	movt	r3, #57348	; 0xe004
20002724:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20002726:	f442 7200 	orr.w	r2, r2, #512	; 0x200
2000272a:	631a      	str	r2, [r3, #48]	; 0x30
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
2000272c:	f24e 1200 	movw	r2, #57600	; 0xe100
20002730:	f2ce 0200 	movt	r2, #57344	; 0xe000
20002734:	f44f 5180 	mov.w	r1, #4096	; 0x1000
20002738:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
        /* Clear any previously pended SPI0 interrupt */
        NVIC_ClearPendingIRQ(SPI0_IRQn);
        /* Take SPI0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI0_SOFTRESET_MASK;
2000273c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2000273e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
20002742:	631a      	str	r2, [r3, #48]	; 0x30
20002744:	e01b      	b.n	2000277e <MSS_SPI_init+0xee>
    }
    else
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI1_BASE);
20002746:	f241 0300 	movw	r3, #4096	; 0x1000
2000274a:	f2c4 0301 	movt	r3, #16385	; 0x4001
2000274e:	6023      	str	r3, [r4, #0]
        this_spi->irqn = SPI1_IRQn;
20002750:	f04f 030d 	mov.w	r3, #13
20002754:	80a3      	strh	r3, [r4, #4]
        
        /* reset SPI1 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI1_SOFTRESET_MASK;
20002756:	f242 0300 	movw	r3, #8192	; 0x2000
2000275a:	f2ce 0304 	movt	r3, #57348	; 0xe004
2000275e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20002760:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
20002764:	631a      	str	r2, [r3, #48]	; 0x30
20002766:	f24e 1200 	movw	r2, #57600	; 0xe100
2000276a:	f2ce 0200 	movt	r2, #57344	; 0xe000
2000276e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
20002772:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
        /* Clear any previously pended SPI1 interrupt */
        NVIC_ClearPendingIRQ(SPI1_IRQn);
        /* Take SPI1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI1_SOFTRESET_MASK;
20002776:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20002778:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
2000277c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* De-assert reset bit. */
    this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
2000277e:	6823      	ldr	r3, [r4, #0]
20002780:	681a      	ldr	r2, [r3, #0]
20002782:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
20002786:	601a      	str	r2, [r3, #0]
}
20002788:	bd38      	pop	{r3, r4, r5, pc}
2000278a:	bf00      	nop

2000278c <MSS_I2C_wait_complete>:
mss_i2c_status_t MSS_I2C_wait_complete
(
    mss_i2c_instance_t * this_i2c,
    uint32_t timeout_ms
)
{
2000278c:	4603      	mov	r3, r0
	mss_i2c_status_t i2c_status;
    
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
2000278e:	f244 52e4 	movw	r2, #17892	; 0x45e4
20002792:	f2c2 0200 	movt	r2, #8192	; 0x2000
20002796:	4290      	cmp	r0, r2
20002798:	d006      	beq.n	200027a8 <MSS_I2C_wait_complete+0x1c>
2000279a:	f244 6258 	movw	r2, #18008	; 0x4658
2000279e:	f2c2 0200 	movt	r2, #8192	; 0x2000
200027a2:	4290      	cmp	r0, r2
200027a4:	d000      	beq.n	200027a8 <MSS_I2C_wait_complete+0x1c>
200027a6:	be00      	bkpt	0x0000
    
    this_i2c->master_timeout_ms = timeout_ms;
200027a8:	6419      	str	r1, [r3, #64]	; 0x40

    /* Run the loop until state returns I2C_FAILED  or I2C_SUCESS*/
    do {
        i2c_status = this_i2c->master_status;
200027aa:	f893 003c 	ldrb.w	r0, [r3, #60]	; 0x3c
    } while(MSS_I2C_IN_PROGRESS == i2c_status);
200027ae:	2801      	cmp	r0, #1
200027b0:	d0fb      	beq.n	200027aa <MSS_I2C_wait_complete+0x1e>

    return i2c_status;
}
200027b2:	4770      	bx	lr

200027b4 <enable_slave_if_required>:
static void enable_slave_if_required
(
    mss_i2c_instance_t * this_i2c
)
{
    if( this_i2c->is_slave_enabled )
200027b4:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
200027b8:	b11b      	cbz	r3, 200027c2 <enable_slave_if_required+0xe>
    {
        this_i2c->hw_reg_bit->CTRL_AA = 1u;
200027ba:	6983      	ldr	r3, [r0, #24]
200027bc:	f04f 0201 	mov.w	r2, #1
200027c0:	609a      	str	r2, [r3, #8]
200027c2:	4770      	bx	lr

200027c4 <mss_i2c_isr>:
 */
static void mss_i2c_isr
(
    mss_i2c_instance_t * this_i2c
)
{
200027c4:	b530      	push	{r4, r5, lr}
200027c6:	b083      	sub	sp, #12
200027c8:	4604      	mov	r4, r0
    volatile uint8_t status;
    uint8_t data;
    uint8_t hold_bus;
    uint8_t clear_irq = 1u;
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
200027ca:	f244 53e4 	movw	r3, #17892	; 0x45e4
200027ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
200027d2:	4298      	cmp	r0, r3
200027d4:	d006      	beq.n	200027e4 <mss_i2c_isr+0x20>
200027d6:	f244 6358 	movw	r3, #18008	; 0x4658
200027da:	f2c2 0300 	movt	r3, #8192	; 0x2000
200027de:	4298      	cmp	r0, r3
200027e0:	d000      	beq.n	200027e4 <mss_i2c_isr+0x20>
200027e2:	be00      	bkpt	0x0000

    status = this_i2c->hw_reg->STATUS;
200027e4:	6962      	ldr	r2, [r4, #20]
200027e6:	7913      	ldrb	r3, [r2, #4]
200027e8:	f88d 3007 	strb.w	r3, [sp, #7]

    switch( status )
200027ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
200027f0:	f1a3 0308 	sub.w	r3, r3, #8
200027f4:	2bd0      	cmp	r3, #208	; 0xd0
200027f6:	f200 828e 	bhi.w	20002d16 <mss_i2c_isr+0x552>
200027fa:	e8df f013 	tbh	[pc, r3, lsl #1]
200027fe:	00d1      	.short	0x00d1
20002800:	028c028c 	.word	0x028c028c
20002804:	028c028c 	.word	0x028c028c
20002808:	028c028c 	.word	0x028c028c
2000280c:	00d1028c 	.word	0x00d1028c
20002810:	028c028c 	.word	0x028c028c
20002814:	028c028c 	.word	0x028c028c
20002818:	028c028c 	.word	0x028c028c
2000281c:	0106028c 	.word	0x0106028c
20002820:	028c028c 	.word	0x028c028c
20002824:	028c028c 	.word	0x028c028c
20002828:	028c028c 	.word	0x028c028c
2000282c:	00f7028c 	.word	0x00f7028c
20002830:	028c028c 	.word	0x028c028c
20002834:	028c028c 	.word	0x028c028c
20002838:	028c028c 	.word	0x028c028c
2000283c:	0106028c 	.word	0x0106028c
20002840:	028c028c 	.word	0x028c028c
20002844:	028c028c 	.word	0x028c028c
20002848:	028c028c 	.word	0x028c028c
2000284c:	0144028c 	.word	0x0144028c
20002850:	028c028c 	.word	0x028c028c
20002854:	028c028c 	.word	0x028c028c
20002858:	028c028c 	.word	0x028c028c
2000285c:	00f2028c 	.word	0x00f2028c
20002860:	028c028c 	.word	0x028c028c
20002864:	028c028c 	.word	0x028c028c
20002868:	028c028c 	.word	0x028c028c
2000286c:	0153028c 	.word	0x0153028c
20002870:	028c028c 	.word	0x028c028c
20002874:	028c028c 	.word	0x028c028c
20002878:	028c028c 	.word	0x028c028c
2000287c:	016e028c 	.word	0x016e028c
20002880:	028c028c 	.word	0x028c028c
20002884:	028c028c 	.word	0x028c028c
20002888:	028c028c 	.word	0x028c028c
2000288c:	017d028c 	.word	0x017d028c
20002890:	028c028c 	.word	0x028c028c
20002894:	028c028c 	.word	0x028c028c
20002898:	028c028c 	.word	0x028c028c
2000289c:	018f028c 	.word	0x018f028c
200028a0:	028c028c 	.word	0x028c028c
200028a4:	028c028c 	.word	0x028c028c
200028a8:	028c028c 	.word	0x028c028c
200028ac:	01d0028c 	.word	0x01d0028c
200028b0:	028c028c 	.word	0x028c028c
200028b4:	028c028c 	.word	0x028c028c
200028b8:	028c028c 	.word	0x028c028c
200028bc:	01cc028c 	.word	0x01cc028c
200028c0:	028c028c 	.word	0x028c028c
200028c4:	028c028c 	.word	0x028c028c
200028c8:	028c028c 	.word	0x028c028c
200028cc:	01d0028c 	.word	0x01d0028c
200028d0:	028c028c 	.word	0x028c028c
200028d4:	028c028c 	.word	0x028c028c
200028d8:	028c028c 	.word	0x028c028c
200028dc:	01cc028c 	.word	0x01cc028c
200028e0:	028c028c 	.word	0x028c028c
200028e4:	028c028c 	.word	0x028c028c
200028e8:	028c028c 	.word	0x028c028c
200028ec:	01e6028c 	.word	0x01e6028c
200028f0:	028c028c 	.word	0x028c028c
200028f4:	028c028c 	.word	0x028c028c
200028f8:	028c028c 	.word	0x028c028c
200028fc:	01bb028c 	.word	0x01bb028c
20002900:	028c028c 	.word	0x028c028c
20002904:	028c028c 	.word	0x028c028c
20002908:	028c028c 	.word	0x028c028c
2000290c:	01e6028c 	.word	0x01e6028c
20002910:	028c028c 	.word	0x028c028c
20002914:	028c028c 	.word	0x028c028c
20002918:	028c028c 	.word	0x028c028c
2000291c:	01bb028c 	.word	0x01bb028c
20002920:	028c028c 	.word	0x028c028c
20002924:	028c028c 	.word	0x028c028c
20002928:	028c028c 	.word	0x028c028c
2000292c:	01ff028c 	.word	0x01ff028c
20002930:	028c028c 	.word	0x028c028c
20002934:	028c028c 	.word	0x028c028c
20002938:	028c028c 	.word	0x028c028c
2000293c:	0248028c 	.word	0x0248028c
20002940:	028c028c 	.word	0x028c028c
20002944:	028c028c 	.word	0x028c028c
20002948:	028c028c 	.word	0x028c028c
2000294c:	0248028c 	.word	0x0248028c
20002950:	028c028c 	.word	0x028c028c
20002954:	028c028c 	.word	0x028c028c
20002958:	028c028c 	.word	0x028c028c
2000295c:	0248028c 	.word	0x0248028c
20002960:	028c028c 	.word	0x028c028c
20002964:	028c028c 	.word	0x028c028c
20002968:	028c028c 	.word	0x028c028c
2000296c:	027a028c 	.word	0x027a028c
20002970:	028c028c 	.word	0x028c028c
20002974:	028c028c 	.word	0x028c028c
20002978:	028c028c 	.word	0x028c028c
2000297c:	027a028c 	.word	0x027a028c
20002980:	028c028c 	.word	0x028c028c
20002984:	028c028c 	.word	0x028c028c
20002988:	028c028c 	.word	0x028c028c
2000298c:	028c028c 	.word	0x028c028c
20002990:	028c028c 	.word	0x028c028c
20002994:	028c028c 	.word	0x028c028c
20002998:	028c028c 	.word	0x028c028c
2000299c:	0239028c 	.word	0x0239028c
    {
        /************** MASTER TRANSMITTER / RECEIVER *******************/
      
        case ST_START: /* start has been xmt'd */
        case ST_RESTART: /* repeated start has been xmt'd */
            this_i2c->hw_reg_bit->CTRL_STA = 0u;
200029a0:	69a3      	ldr	r3, [r4, #24]
200029a2:	f04f 0200 	mov.w	r2, #0
200029a6:	615a      	str	r2, [r3, #20]
            this_i2c->hw_reg->DATA = (uint8_t)this_i2c->target_addr;
200029a8:	6963      	ldr	r3, [r4, #20]
200029aa:	7922      	ldrb	r2, [r4, #4]
200029ac:	721a      	strb	r2, [r3, #8]
            this_i2c->hw_reg_bit->DATA_DIR = this_i2c->dir;
200029ae:	69a3      	ldr	r3, [r4, #24]
200029b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
200029b2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
            if ( this_i2c->dir == WRITE_DIR )
200029b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
200029b8:	b90b      	cbnz	r3, 200029be <mss_i2c_isr+0x1fa>
            {
                this_i2c->master_tx_idx = 0u;
200029ba:	62a3      	str	r3, [r4, #40]	; 0x28
200029bc:	e003      	b.n	200029c6 <mss_i2c_isr+0x202>
            }
            else if ( this_i2c->dir == READ_DIR)
200029be:	2b01      	cmp	r3, #1
            {
                this_i2c->master_rx_idx = 0u;
200029c0:	bf04      	itt	eq
200029c2:	2300      	moveq	r3, #0
200029c4:	63a3      	streq	r3, [r4, #56]	; 0x38
            /*
             * Clear the pending transaction. This condition will be true if the slave 
             * has acquired the bus to carry out pending master transaction which 
             * it had received during its slave transmission or reception mode. 
             */
            if(this_i2c->is_transaction_pending)
200029c6:	f894 3071 	ldrb.w	r3, [r4, #113]	; 0x71
200029ca:	b11b      	cbz	r3, 200029d4 <mss_i2c_isr+0x210>
            {
                this_i2c->is_transaction_pending = 0u;
200029cc:	f04f 0300 	mov.w	r3, #0
200029d0:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71

            /*
             * Make sure to update proper transaction after master START
             * or RESTART
             */
            if(this_i2c->transaction != this_i2c->pending_transaction)
200029d4:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
200029d8:	7a22      	ldrb	r2, [r4, #8]
200029da:	429a      	cmp	r2, r3
            {
                this_i2c->transaction = this_i2c->pending_transaction;
200029dc:	bf18      	it	ne
200029de:	7223      	strbne	r3, [r4, #8]
200029e0:	e1af      	b.n	20002d42 <mss_i2c_isr+0x57e>
            }
            break;
            
        case ST_LOST_ARB:
            /* Set start bit.  Let's keep trying!  Don't give up! */
            this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
200029e2:	69a3      	ldr	r3, [r4, #24]
200029e4:	f04f 0201 	mov.w	r2, #1
200029e8:	615a      	str	r2, [r3, #20]
            break;
200029ea:	e1aa      	b.n	20002d42 <mss_i2c_isr+0x57e>
            
        /******************* MASTER TRANSMITTER *************************/
        case ST_SLAW_NACK:
            /* SLA+W has been transmitted; not ACK has been received - let's stop. */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
200029ec:	69a3      	ldr	r3, [r4, #24]
200029ee:	f04f 0201 	mov.w	r2, #1
200029f2:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
200029f4:	f04f 0302 	mov.w	r3, #2
200029f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
            this_i2c->transaction = NO_TRANSACTION;
200029fc:	f04f 0300 	mov.w	r3, #0
20002a00:	7223      	strb	r3, [r4, #8]
            enable_slave_if_required(this_i2c);
20002a02:	4620      	mov	r0, r4
20002a04:	f7ff fed6 	bl	200027b4 <enable_slave_if_required>
            break;
20002a08:	e19b      	b.n	20002d42 <mss_i2c_isr+0x57e>
            
        case ST_SLAW_ACK:
        case ST_TX_DATA_ACK:
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
20002a0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
20002a0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
20002a0e:	428b      	cmp	r3, r1
20002a10:	d206      	bcs.n	20002a20 <mss_i2c_isr+0x25c>
            {    
                this_i2c->hw_reg->DATA = this_i2c->master_tx_buffer[this_i2c->master_tx_idx++];
20002a12:	6a21      	ldr	r1, [r4, #32]
20002a14:	5cc9      	ldrb	r1, [r1, r3]
20002a16:	7211      	strb	r1, [r2, #8]
20002a18:	f103 0301 	add.w	r3, r3, #1
20002a1c:	62a3      	str	r3, [r4, #40]	; 0x28
20002a1e:	e190      	b.n	20002d42 <mss_i2c_isr+0x57e>
            }
            else if ( this_i2c->transaction == MASTER_RANDOM_READ_TRANSACTION )
20002a20:	7a23      	ldrb	r3, [r4, #8]
20002a22:	2b03      	cmp	r3, #3
20002a24:	d105      	bne.n	20002a32 <mss_i2c_isr+0x26e>
            {
                /* We are finished sending the address offset part of a random read transaction.
                 * It is is time to send a restart in order to change direction. */
                 this_i2c->dir = READ_DIR;
20002a26:	f04f 0301 	mov.w	r3, #1
20002a2a:	62e3      	str	r3, [r4, #44]	; 0x2c
                 this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
20002a2c:	69a2      	ldr	r2, [r4, #24]
20002a2e:	6153      	str	r3, [r2, #20]
20002a30:	e187      	b.n	20002d42 <mss_i2c_isr+0x57e>
            {
                /*
                 * Set the transaction back to NO_TRANSACTION to allow user to do further
                 * transaction
                 */
                this_i2c->transaction = NO_TRANSACTION;
20002a32:	f04f 0300 	mov.w	r3, #0
20002a36:	7223      	strb	r3, [r4, #8]
                hold_bus = this_i2c->options & MSS_I2C_HOLD_BUS;
20002a38:	7c23      	ldrb	r3, [r4, #16]
20002a3a:	f003 0301 	and.w	r3, r3, #1

                /* Store the information of current I2C bus status in the bus_status*/
                this_i2c->bus_status  = hold_bus;
20002a3e:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
                if ( hold_bus == 0u )
20002a42:	b93b      	cbnz	r3, 20002a54 <mss_i2c_isr+0x290>
                { 
                    this_i2c->hw_reg_bit->CTRL_STO = 0x01u; /*xmt stop condition */
20002a44:	69a3      	ldr	r3, [r4, #24]
20002a46:	f04f 0501 	mov.w	r5, #1
20002a4a:	611d      	str	r5, [r3, #16]
                    enable_slave_if_required(this_i2c);
20002a4c:	4620      	mov	r0, r4
20002a4e:	f7ff feb1 	bl	200027b4 <enable_slave_if_required>
20002a52:	e013      	b.n	20002a7c <mss_i2c_isr+0x2b8>
                }
                else
                {
                    NVIC_DisableIRQ( this_i2c->irqn );
20002a54:	8a63      	ldrh	r3, [r4, #18]
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
20002a56:	b21a      	sxth	r2, r3
20002a58:	ea4f 1252 	mov.w	r2, r2, lsr #5
20002a5c:	f003 031f 	and.w	r3, r3, #31
20002a60:	f04f 0101 	mov.w	r1, #1
20002a64:	fa01 f103 	lsl.w	r1, r1, r3
20002a68:	f24e 1300 	movw	r3, #57600	; 0xe100
20002a6c:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002a70:	f102 0220 	add.w	r2, r2, #32
20002a74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
20002a78:	f04f 0500 	mov.w	r5, #0
                    clear_irq = 0u;
                }
                this_i2c->master_status = MSS_I2C_SUCCESS;
20002a7c:	f04f 0300 	mov.w	r3, #0
20002a80:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
20002a84:	e15c      	b.n	20002d40 <mss_i2c_isr+0x57c>
            /* data byte SENT, ACK to be received
             * In fact, this means we've received a NACK (This may not be 
             * obvious, but if we've rec'd an ACK then we would be in state 
             * 0x28!) hence, let's send a stop bit
             */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
20002a86:	69a3      	ldr	r3, [r4, #24]
20002a88:	f04f 0201 	mov.w	r2, #1
20002a8c:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
20002a8e:	f04f 0302 	mov.w	r3, #2
20002a92:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20002a96:	f04f 0300 	mov.w	r3, #0
20002a9a:	7223      	strb	r3, [r4, #8]
            enable_slave_if_required(this_i2c);
20002a9c:	4620      	mov	r0, r4
20002a9e:	f7ff fe89 	bl	200027b4 <enable_slave_if_required>

            break;
20002aa2:	e14e      	b.n	20002d42 <mss_i2c_isr+0x57e>
      /* STATUS codes 08H, 10H, 38H are all covered in MTX mode */
        case ST_SLAR_ACK: /* SLA+R tx'ed. */
            /* Let's make sure we ACK the first data byte received (set AA bit in CTRL) unless
             * the next byte is the last byte of the read transaction.
             */
            if(this_i2c->master_rx_size > 1u)
20002aa4:	6b63      	ldr	r3, [r4, #52]	; 0x34
20002aa6:	2b01      	cmp	r3, #1
20002aa8:	d904      	bls.n	20002ab4 <mss_i2c_isr+0x2f0>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20002aaa:	69a3      	ldr	r3, [r4, #24]
20002aac:	f04f 0201 	mov.w	r2, #1
20002ab0:	609a      	str	r2, [r3, #8]
20002ab2:	e146      	b.n	20002d42 <mss_i2c_isr+0x57e>
            }
            else if(1u == this_i2c->master_rx_size)
20002ab4:	2b01      	cmp	r3, #1
20002ab6:	d104      	bne.n	20002ac2 <mss_i2c_isr+0x2fe>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
20002ab8:	69a3      	ldr	r3, [r4, #24]
20002aba:	f04f 0200 	mov.w	r2, #0
20002abe:	609a      	str	r2, [r3, #8]
20002ac0:	e13f      	b.n	20002d42 <mss_i2c_isr+0x57e>
            }
            else /* this_i2c->master_rx_size == 0u */
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20002ac2:	69a2      	ldr	r2, [r4, #24]
20002ac4:	f04f 0301 	mov.w	r3, #1
20002ac8:	6093      	str	r3, [r2, #8]
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
20002aca:	69a2      	ldr	r2, [r4, #24]
20002acc:	6113      	str	r3, [r2, #16]
                this_i2c->master_status = MSS_I2C_SUCCESS;
20002ace:	f04f 0300 	mov.w	r3, #0
20002ad2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
                this_i2c->transaction = NO_TRANSACTION;
20002ad6:	7223      	strb	r3, [r4, #8]
20002ad8:	e133      	b.n	20002d42 <mss_i2c_isr+0x57e>
            }
            break;
            
        case ST_SLAR_NACK: /* SLA+R tx'ed; let's release the bus (send a stop condition) */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
20002ada:	69a3      	ldr	r3, [r4, #24]
20002adc:	f04f 0201 	mov.w	r2, #1
20002ae0:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
20002ae2:	f04f 0302 	mov.w	r3, #2
20002ae6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20002aea:	f04f 0300 	mov.w	r3, #0
20002aee:	7223      	strb	r3, [r4, #8]
            enable_slave_if_required(this_i2c);
20002af0:	4620      	mov	r0, r4
20002af2:	f7ff fe5f 	bl	200027b4 <enable_slave_if_required>
            break;
20002af6:	e124      	b.n	20002d42 <mss_i2c_isr+0x57e>
          
        case ST_RX_DATA_ACK: /* Data byte received, ACK returned */
            /* First, get the data */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx++] = this_i2c->hw_reg->DATA;
20002af8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
20002afa:	7a11      	ldrb	r1, [r2, #8]
20002afc:	6b22      	ldr	r2, [r4, #48]	; 0x30
20002afe:	54d1      	strb	r1, [r2, r3]
20002b00:	f103 0301 	add.w	r3, r3, #1
20002b04:	63a3      	str	r3, [r4, #56]	; 0x38

            if( this_i2c->master_rx_idx >= (this_i2c->master_rx_size - 1u))
20002b06:	6b62      	ldr	r2, [r4, #52]	; 0x34
20002b08:	f102 32ff 	add.w	r2, r2, #4294967295
20002b0c:	4293      	cmp	r3, r2
20002b0e:	f0c0 8118 	bcc.w	20002d42 <mss_i2c_isr+0x57e>
            {
                /* If we're at the second last byte, let's set AA to 0 so
                 * we return a NACK at the last byte. */
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
20002b12:	69a3      	ldr	r3, [r4, #24]
20002b14:	f04f 0200 	mov.w	r2, #0
20002b18:	609a      	str	r2, [r3, #8]
20002b1a:	e112      	b.n	20002d42 <mss_i2c_isr+0x57e>
            }
            break;
            
        case ST_RX_DATA_NACK: /* Data byte received, NACK returned */
            /* Get the data, then send a stop condition */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx] = this_i2c->hw_reg->DATA;
20002b1c:	7a11      	ldrb	r1, [r2, #8]
20002b1e:	6b22      	ldr	r2, [r4, #48]	; 0x30
20002b20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
20002b22:	54d1      	strb	r1, [r2, r3]
          
            hold_bus = this_i2c->options &  MSS_I2C_HOLD_BUS; 
20002b24:	7c23      	ldrb	r3, [r4, #16]
20002b26:	f003 0301 	and.w	r3, r3, #1

            /* Store the information of current I2C bus status in the bus_status*/
            this_i2c->bus_status  = hold_bus;
20002b2a:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
            if ( hold_bus == 0u )
20002b2e:	b93b      	cbnz	r3, 20002b40 <mss_i2c_isr+0x37c>
            { 
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;  /*xmt stop condition */
20002b30:	69a3      	ldr	r3, [r4, #24]
20002b32:	f04f 0501 	mov.w	r5, #1
20002b36:	611d      	str	r5, [r3, #16]

                /* Bus is released, now we can start listening to bus, if it is slave */
                   enable_slave_if_required(this_i2c);
20002b38:	4620      	mov	r0, r4
20002b3a:	f7ff fe3b 	bl	200027b4 <enable_slave_if_required>
20002b3e:	e013      	b.n	20002b68 <mss_i2c_isr+0x3a4>
            }
            else
            {
                NVIC_DisableIRQ( this_i2c->irqn );
20002b40:	8a63      	ldrh	r3, [r4, #18]
20002b42:	b21a      	sxth	r2, r3
20002b44:	ea4f 1252 	mov.w	r2, r2, lsr #5
20002b48:	f003 031f 	and.w	r3, r3, #31
20002b4c:	f04f 0101 	mov.w	r1, #1
20002b50:	fa01 f103 	lsl.w	r1, r1, r3
20002b54:	f24e 1300 	movw	r3, #57600	; 0xe100
20002b58:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002b5c:	f102 0220 	add.w	r2, r2, #32
20002b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
20002b64:	f04f 0500 	mov.w	r5, #0

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20002b68:	f04f 0300 	mov.w	r3, #0
20002b6c:	7223      	strb	r3, [r4, #8]
            this_i2c->master_status = MSS_I2C_SUCCESS;
20002b6e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
            break;
20002b72:	e0e5      	b.n	20002d40 <mss_i2c_isr+0x57c>
        
        /******************** SLAVE RECEIVER **************************/
        case ST_GCA_NACK: /* NACK after, GCA addressing */
        case ST_SLA_NACK: /* Re-enable AA (assert ack) bit for future transmissions */
            this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20002b74:	69a3      	ldr	r3, [r4, #24]
20002b76:	f04f 0201 	mov.w	r2, #1
20002b7a:	609a      	str	r2, [r3, #8]
            
            this_i2c->transaction = NO_TRANSACTION;
20002b7c:	f04f 0300 	mov.w	r3, #0
20002b80:	7223      	strb	r3, [r4, #8]
            this_i2c->slave_status = MSS_I2C_SUCCESS;
20002b82:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
            
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
20002b86:	f894 3071 	ldrb.w	r3, [r4, #113]	; 0x71
20002b8a:	2b00      	cmp	r3, #0
20002b8c:	f000 80d9 	beq.w	20002d42 <mss_i2c_isr+0x57e>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
20002b90:	69a3      	ldr	r3, [r4, #24]
20002b92:	615a      	str	r2, [r3, #20]
20002b94:	e0d5      	b.n	20002d42 <mss_i2c_isr+0x57e>
        case ST_SLV_LA: /* Arbitr. lost (SLA rec'd) */
            /*
             *  We lost arbitration and either the GCE or our address was the
             *  one received so pend the master operation we were starting.
             */
            this_i2c->is_transaction_pending = 1u;
20002b96:	f04f 0301 	mov.w	r3, #1
20002b9a:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
            /* Fall through to normal ST processing as we are now in slave mode */

        case ST_GCA: /* General call address received, ACK returned */
        case ST_SLAVE_SLAW: /* SLA+W received, ACK returned */

            this_i2c->transaction = WRITE_SLAVE_TRANSACTION;
20002b9e:	f04f 0304 	mov.w	r3, #4
20002ba2:	7223      	strb	r3, [r4, #8]
            this_i2c->slave_rx_idx = 0u;
20002ba4:	f04f 0300 	mov.w	r3, #0
20002ba8:	65a3      	str	r3, [r4, #88]	; 0x58
            this_i2c->random_read_addr = 0u;
20002baa:	60e3      	str	r3, [r4, #12]

             /* If Start Bit is set, clear it, but store that information since it is because of
              * pending transaction
              */
            if(this_i2c->hw_reg_bit->CTRL_STA)
20002bac:	69a3      	ldr	r3, [r4, #24]
20002bae:	695a      	ldr	r2, [r3, #20]
20002bb0:	b132      	cbz	r2, 20002bc0 <mss_i2c_isr+0x3fc>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 0u ;
20002bb2:	f04f 0200 	mov.w	r2, #0
20002bb6:	615a      	str	r2, [r3, #20]
                this_i2c->is_transaction_pending = 1u;
20002bb8:	f04f 0301 	mov.w	r3, #1
20002bbc:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
            }
            this_i2c->slave_status = MSS_I2C_IN_PROGRESS;
20002bc0:	f04f 0301 	mov.w	r3, #1
20002bc4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
#ifdef MSS_I2C_INCLUDE_SLA_IN_RX_PAYLOAD
            /* Fall through to put address as first byte in payload buffer */
#else
            /* Only break from this case if the slave address must NOT be included at the
             * beginning of the received write data. */
            break;
20002bc8:	e0bb      	b.n	20002d42 <mss_i2c_isr+0x57e>
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
20002bca:	6d21      	ldr	r1, [r4, #80]	; 0x50
20002bcc:	b161      	cbz	r1, 20002be8 <mss_i2c_isr+0x424>
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
20002bce:	6da3      	ldr	r3, [r4, #88]	; 0x58
20002bd0:	6d60      	ldr	r0, [r4, #84]	; 0x54
20002bd2:	4283      	cmp	r3, r0
20002bd4:	d20d      	bcs.n	20002bf2 <mss_i2c_isr+0x42e>
            {
                data = this_i2c->hw_reg->DATA;
20002bd6:	7a12      	ldrb	r2, [r2, #8]
                this_i2c->slave_rx_buffer[this_i2c->slave_rx_idx++] = data;
20002bd8:	54ca      	strb	r2, [r1, r3]
20002bda:	f103 0301 	add.w	r3, r3, #1
20002bde:	65a3      	str	r3, [r4, #88]	; 0x58
                {
                    /* Ignore the slave address byte in the random read address
                       computation in the case where INCLUDE_SLA_IN_RX_PAYLOAD
                       is defined. */
#endif
                    this_i2c->random_read_addr = (this_i2c->random_read_addr << 8) + data;
20002be0:	68e3      	ldr	r3, [r4, #12]
20002be2:	eb02 2203 	add.w	r2, r2, r3, lsl #8
20002be6:	60e2      	str	r2, [r4, #12]
#ifdef MSS_I2C_INCLUDE_SLA_IN_RX_PAYLOAD
                }
#endif
            }
            
            if (this_i2c->slave_rx_idx >= this_i2c->slave_rx_size)
20002be8:	6da2      	ldr	r2, [r4, #88]	; 0x58
20002bea:	6d63      	ldr	r3, [r4, #84]	; 0x54
20002bec:	429a      	cmp	r2, r3
20002bee:	f0c0 80a8 	bcc.w	20002d42 <mss_i2c_isr+0x57e>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;   /* send a NACK when done (next reception) */
20002bf2:	69a3      	ldr	r3, [r4, #24]
20002bf4:	f04f 0200 	mov.w	r2, #0
20002bf8:	609a      	str	r2, [r3, #8]
20002bfa:	e0a2      	b.n	20002d42 <mss_i2c_isr+0x57e>
            /* STOP or repeated START occurred. */
            /* We cannot be sure if the transaction has actually completed as
             * this hardware state reports that either a STOP or repeated START
             * condition has occurred. We assume that this is a repeated START
             * if the transaction was a write from the master to this point.*/
            if ( this_i2c->transaction == WRITE_SLAVE_TRANSACTION )
20002bfc:	7a23      	ldrb	r3, [r4, #8]
20002bfe:	2b04      	cmp	r3, #4
20002c00:	d121      	bne.n	20002c46 <mss_i2c_isr+0x482>
            {
                if ( this_i2c->slave_rx_idx == this_i2c->slave_mem_offset_length )
20002c02:	6da2      	ldr	r2, [r4, #88]	; 0x58
20002c04:	6e23      	ldr	r3, [r4, #96]	; 0x60
20002c06:	429a      	cmp	r2, r3
                {
                    this_i2c->slave_tx_idx = this_i2c->random_read_addr;
20002c08:	bf04      	itt	eq
20002c0a:	68e3      	ldreq	r3, [r4, #12]
20002c0c:	64e3      	streq	r3, [r4, #76]	; 0x4c
                }
                {
                    /* Call the slave's write transaction handler if it exists. */
                    if ( this_i2c->slave_write_handler != 0u )
20002c0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
20002c10:	b1a3      	cbz	r3, 20002c3c <mss_i2c_isr+0x478>
                    {
                        mss_i2c_slave_handler_ret_t h_ret;
                        h_ret = this_i2c->slave_write_handler( this_i2c, this_i2c->slave_rx_buffer, (uint16_t)this_i2c->slave_rx_idx );
20002c12:	4620      	mov	r0, r4
20002c14:	6d21      	ldr	r1, [r4, #80]	; 0x50
20002c16:	f8b4 2058 	ldrh.w	r2, [r4, #88]	; 0x58
20002c1a:	4798      	blx	r3
                        if ( MSS_I2C_REENABLE_SLAVE_RX == h_ret )
20002c1c:	b938      	cbnz	r0, 20002c2e <mss_i2c_isr+0x46a>
                        {
                            /* There is a small risk that the write handler could
                             * call MSS_I2C_disable_slave() but return
                             * MSS_I2C_REENABLE_SLAVE_RX in error so we only
                             * enable ACKs if still in slave mode. */
                             enable_slave_if_required(this_i2c);
20002c1e:	4620      	mov	r0, r4
20002c20:	f7ff fdc8 	bl	200027b4 <enable_slave_if_required>
                             this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20002c24:	69a3      	ldr	r3, [r4, #24]
20002c26:	f04f 0201 	mov.w	r2, #1
20002c2a:	609a      	str	r2, [r3, #8]
20002c2c:	e011      	b.n	20002c52 <mss_i2c_isr+0x48e>
                        }
                        else
                        {
                            this_i2c->hw_reg_bit->CTRL_AA = 0u;
20002c2e:	69a2      	ldr	r2, [r4, #24]
20002c30:	f04f 0300 	mov.w	r3, #0
20002c34:	6093      	str	r3, [r2, #8]
                            /* Clear slave mode flag as well otherwise in mixed
                             * master/slave applications, the AA bit will get set by
                             * subsequent master operations. */
                            this_i2c->is_slave_enabled = 0u;
20002c36:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
20002c3a:	e00a      	b.n	20002c52 <mss_i2c_isr+0x48e>
                        }
                    }
                    else
                    {
                        /* Re-enable address acknowledge in case we were ready to nack the next received byte. */
                        this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20002c3c:	69a3      	ldr	r3, [r4, #24]
20002c3e:	f04f 0201 	mov.w	r2, #1
20002c42:	609a      	str	r2, [r3, #8]
20002c44:	e005      	b.n	20002c52 <mss_i2c_isr+0x48e>
            {
                /*
                 * Reset slave_tx_idx so that a subsequent read will result in the slave's
                 * transmit buffer being sent from the first byte.
                 */
                this_i2c->slave_tx_idx = 0u;
20002c46:	f04f 0300 	mov.w	r3, #0
20002c4a:	64e3      	str	r3, [r4, #76]	; 0x4c
                /*
                 * See if we need to re-enable acknowledgement as some error conditions, such
                 * as a master prematurely ending a transfer, can see us get here with AA set
                 * to 0 which will disable slave operation if we are not careful.
                 */
                enable_slave_if_required(this_i2c);
20002c4c:	4620      	mov	r0, r4
20002c4e:	f7ff fdb1 	bl	200027b4 <enable_slave_if_required>
            }

            /* Mark any previous master write transaction as complete. */
            this_i2c->slave_status = MSS_I2C_SUCCESS;
20002c52:	f04f 0300 	mov.w	r3, #0
20002c56:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c

            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
20002c5a:	f894 3071 	ldrb.w	r3, [r4, #113]	; 0x71
20002c5e:	b11b      	cbz	r3, 20002c68 <mss_i2c_isr+0x4a4>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
20002c60:	69a3      	ldr	r3, [r4, #24]
20002c62:	f04f 0201 	mov.w	r2, #1
20002c66:	615a      	str	r2, [r3, #20]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20002c68:	f04f 0300 	mov.w	r3, #0
20002c6c:	7223      	strb	r3, [r4, #8]
            break;
20002c6e:	e068      	b.n	20002d42 <mss_i2c_isr+0x57e>
        case ST_SLV_RST: /* SMBUS ONLY: timeout state. must clear interrupt */
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction.
             */
            this_i2c->transaction = NO_TRANSACTION;
20002c70:	f04f 0300 	mov.w	r3, #0
20002c74:	7223      	strb	r3, [r4, #8]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
20002c76:	64e3      	str	r3, [r4, #76]	; 0x4c
            /*
             * Clear status to I2C_FAILED only if there was an operation in progress.
             */
            if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
20002c78:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
20002c7c:	2b01      	cmp	r3, #1
            {
                this_i2c->slave_status = MSS_I2C_FAILED;
20002c7e:	bf04      	itt	eq
20002c80:	2302      	moveq	r3, #2
20002c82:	f884 305c 	strbeq.w	r3, [r4, #92]	; 0x5c
            }

            enable_slave_if_required(this_i2c); /* Make sure AA is set correctly */
20002c86:	4620      	mov	r0, r4
20002c88:	f7ff fd94 	bl	200027b4 <enable_slave_if_required>

            break;
20002c8c:	e059      	b.n	20002d42 <mss_i2c_isr+0x57e>
            
        /****************** SLAVE TRANSMITTER **************************/
        case ST_SLAVE_SLAR_ACK: /* SLA+R received, ACK returned */
        case ST_SLARW_LA:   /* Arbitration lost, SLA+R received, ACK returned */
        case ST_RACK: /* Data tx'ed, ACK received */
            if ( status == ST_SLAVE_SLAR_ACK )
20002c8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
20002c92:	2ba8      	cmp	r3, #168	; 0xa8
20002c94:	d113      	bne.n	20002cbe <mss_i2c_isr+0x4fa>
            {
                this_i2c->transaction = READ_SLAVE_TRANSACTION;
20002c96:	f04f 0305 	mov.w	r3, #5
20002c9a:	7223      	strb	r3, [r4, #8]
                this_i2c->random_read_addr = 0u;
20002c9c:	f04f 0300 	mov.w	r3, #0
20002ca0:	60e3      	str	r3, [r4, #12]

                this_i2c->slave_status = MSS_I2C_IN_PROGRESS;
20002ca2:	f04f 0301 	mov.w	r3, #1
20002ca6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c

                /* If Start Bit is set, clear it, but store that information since it is because of
                 * pending transaction
                 */
                if(this_i2c->hw_reg_bit->CTRL_STA)
20002caa:	69a3      	ldr	r3, [r4, #24]
20002cac:	695a      	ldr	r2, [r3, #20]
20002cae:	b132      	cbz	r2, 20002cbe <mss_i2c_isr+0x4fa>
                {
                    this_i2c->hw_reg_bit->CTRL_STA = 0u ;
20002cb0:	f04f 0200 	mov.w	r2, #0
20002cb4:	615a      	str	r2, [r3, #20]
                    this_i2c->is_transaction_pending = 1u;
20002cb6:	f04f 0301 	mov.w	r3, #1
20002cba:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
                }
            }
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size)
20002cbe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
20002cc0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
20002cc2:	4293      	cmp	r3, r2
            {
                /* Ensure 0xFF is returned to the master when the slave specifies
                 * an empty transmit buffer. */
                this_i2c->hw_reg->DATA = 0xFFu;
20002cc4:	bf23      	ittte	cs
20002cc6:	6963      	ldrcs	r3, [r4, #20]
20002cc8:	f04f 32ff 	movcs.w	r2, #4294967295
20002ccc:	721a      	strbcs	r2, [r3, #8]
            }
            else
            {
                /* Load the data the data byte to be sent to the master. */
                this_i2c->hw_reg->DATA = this_i2c->slave_tx_buffer[this_i2c->slave_tx_idx++];
20002cce:	6962      	ldrcc	r2, [r4, #20]
20002cd0:	bf3f      	itttt	cc
20002cd2:	6c61      	ldrcc	r1, [r4, #68]	; 0x44
20002cd4:	5cc9      	ldrbcc	r1, [r1, r3]
20002cd6:	7211      	strbcc	r1, [r2, #8]
20002cd8:	3301      	addcc	r3, #1
20002cda:	bf38      	it	cc
20002cdc:	64e3      	strcc	r3, [r4, #76]	; 0x4c
            }
            /* Determine if this is the last data byte to send to the master. */
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size) /* last byte? */
20002cde:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
20002ce0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
20002ce2:	429a      	cmp	r2, r3
20002ce4:	d32d      	bcc.n	20002d42 <mss_i2c_isr+0x57e>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
20002ce6:	69a2      	ldr	r2, [r4, #24]
20002ce8:	f04f 0300 	mov.w	r3, #0
20002cec:	6093      	str	r3, [r2, #8]
                /* Next read transaction will result in slave's transmit buffer
                 * being sent from the first byte. */
                this_i2c->slave_tx_idx = 0u;
20002cee:	64e3      	str	r3, [r4, #76]	; 0x4c
20002cf0:	e027      	b.n	20002d42 <mss_i2c_isr+0x57e>
        case ST_SLAVE_RNACK:    /* Data byte has been transmitted; not-ACK has been received. */
        case ST_FINAL: /* Last Data byte tx'ed, ACK received */
            /* We assume that the transaction will be stopped by the master.
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte. */
            this_i2c->slave_tx_idx = 0u;
20002cf2:	f04f 0300 	mov.w	r3, #0
20002cf6:	64e3      	str	r3, [r4, #76]	; 0x4c
            this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20002cf8:	69a2      	ldr	r2, [r4, #24]
20002cfa:	f04f 0101 	mov.w	r1, #1
20002cfe:	6091      	str	r1, [r2, #8]

            /*  Mark previous state as complete */
            this_i2c->slave_status = MSS_I2C_SUCCESS;
20002d00:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c

            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
20002d04:	f894 3071 	ldrb.w	r3, [r4, #113]	; 0x71
20002d08:	b10b      	cbz	r3, 20002d0e <mss_i2c_isr+0x54a>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
20002d0a:	69a3      	ldr	r3, [r4, #24]
20002d0c:	6159      	str	r1, [r3, #20]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20002d0e:	f04f 0300 	mov.w	r3, #0
20002d12:	7223      	strb	r3, [r4, #8]
            break;
20002d14:	e015      	b.n	20002d42 <mss_i2c_isr+0x57e>
        case ST_RESET_ACTIVATED:
        case ST_BUS_ERROR: /* Bus error during MST or selected slave modes */
        default:
            /* Some undefined state has encountered. Clear Start bit to make
             * sure, next good transaction happen */
            this_i2c->hw_reg_bit->CTRL_STA = 0x00u;
20002d16:	69a2      	ldr	r2, [r4, #24]
20002d18:	f04f 0300 	mov.w	r3, #0
20002d1c:	6153      	str	r3, [r2, #20]
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20002d1e:	7223      	strb	r3, [r4, #8]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
20002d20:	64e3      	str	r3, [r4, #76]	; 0x4c
            /*
             * Clear statuses to I2C_FAILED only if there was an operation in progress.
             */
            if(MSS_I2C_IN_PROGRESS == this_i2c->master_status)
20002d22:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
20002d26:	2b01      	cmp	r3, #1
            {
                this_i2c->master_status = MSS_I2C_FAILED;
20002d28:	bf04      	itt	eq
20002d2a:	2302      	moveq	r3, #2
20002d2c:	f884 303c 	strbeq.w	r3, [r4, #60]	; 0x3c
            }

            if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
20002d30:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
20002d34:	2b01      	cmp	r3, #1
            {
                this_i2c->slave_status = MSS_I2C_FAILED;
20002d36:	bf04      	itt	eq
20002d38:	2302      	moveq	r3, #2
20002d3a:	f884 305c 	strbeq.w	r3, [r4, #92]	; 0x5c
20002d3e:	e000      	b.n	20002d42 <mss_i2c_isr+0x57e>


            break;
    }
    
    if ( clear_irq )
20002d40:	b11d      	cbz	r5, 20002d4a <mss_i2c_isr+0x586>
    {
        /* clear interrupt. */
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
20002d42:	69a3      	ldr	r3, [r4, #24]
20002d44:	f04f 0200 	mov.w	r2, #0
20002d48:	60da      	str	r2, [r3, #12]
    }
    
    /* Read the status register to ensure the last I2C registers write took place
     * in a system built around a bus making use of posted writes. */
    status = this_i2c->hw_reg->STATUS;
20002d4a:	6963      	ldr	r3, [r4, #20]
20002d4c:	791b      	ldrb	r3, [r3, #4]
20002d4e:	f88d 3007 	strb.w	r3, [sp, #7]
}
20002d52:	b003      	add	sp, #12
20002d54:	bd30      	pop	{r4, r5, pc}
20002d56:	bf00      	nop

20002d58 <I2C0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void I2C0_IRQHandler( void )
#else
void I2C0_IRQHandler( void )
#endif
{
20002d58:	4668      	mov	r0, sp
20002d5a:	f020 0107 	bic.w	r1, r0, #7
20002d5e:	468d      	mov	sp, r1
20002d60:	b501      	push	{r0, lr}
    mss_i2c_isr( &g_mss_i2c0 );
20002d62:	f244 50e4 	movw	r0, #17892	; 0x45e4
20002d66:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002d6a:	f7ff fd2b 	bl	200027c4 <mss_i2c_isr>
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20002d6e:	f24e 1300 	movw	r3, #57600	; 0xe100
20002d72:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002d76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
20002d7a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC_ClearPendingIRQ( I2C0_IRQn );
}
20002d7e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
20002d82:	4685      	mov	sp, r0
20002d84:	4770      	bx	lr
20002d86:	bf00      	nop

20002d88 <I2C1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void I2C1_IRQHandler( void )
#else
void I2C1_IRQHandler( void )
#endif
{
20002d88:	4668      	mov	r0, sp
20002d8a:	f020 0107 	bic.w	r1, r0, #7
20002d8e:	468d      	mov	sp, r1
20002d90:	b501      	push	{r0, lr}
    mss_i2c_isr( &g_mss_i2c1 );
20002d92:	f244 6058 	movw	r0, #18008	; 0x4658
20002d96:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002d9a:	f7ff fd13 	bl	200027c4 <mss_i2c_isr>
20002d9e:	f24e 1300 	movw	r3, #57600	; 0xe100
20002da2:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002da6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
20002daa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC_ClearPendingIRQ( I2C1_IRQn );
}
20002dae:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
20002db2:	4685      	mov	sp, r0
20002db4:	4770      	bx	lr
20002db6:	bf00      	nop

20002db8 <disable_interrupts>:
}
/*------------------------------------------------------------------------------
 *
 */
static uint32_t disable_interrupts( void )
{
20002db8:	b510      	push	{r4, lr}
    uint32_t primask;
    primask = __get_PRIMASK();
20002dba:	f000 f9c1 	bl	20003140 <__get_PRIMASK>
20002dbe:	4604      	mov	r4, r0
    __set_PRIMASK(1u);
20002dc0:	f04f 0001 	mov.w	r0, #1
20002dc4:	f000 f9c0 	bl	20003148 <__set_PRIMASK>
    return primask;
}
20002dc8:	4620      	mov	r0, r4
20002dca:	bd10      	pop	{r4, pc}

20002dcc <restore_interrupts>:

/*------------------------------------------------------------------------------
 *
 */
static void restore_interrupts( uint32_t primask )
{
20002dcc:	b508      	push	{r3, lr}
    __set_PRIMASK( primask );
20002dce:	f000 f9bb 	bl	20003148 <__set_PRIMASK>
}
20002dd2:	bd08      	pop	{r3, pc}

20002dd4 <MSS_I2C_read>:
    uint8_t serial_addr,
    uint8_t * read_buffer,
    uint16_t read_size,
    uint8_t options
)
{
20002dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
20002dd8:	b082      	sub	sp, #8
20002dda:	4604      	mov	r4, r0
20002ddc:	460d      	mov	r5, r1
20002dde:	4616      	mov	r6, r2
20002de0:	461f      	mov	r7, r3
20002de2:	f89d 8020 	ldrb.w	r8, [sp, #32]
    uint32_t primask;
    volatile uint8_t stat_ctrl;

    ASSERT((this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1));
20002de6:	f244 53e4 	movw	r3, #17892	; 0x45e4
20002dea:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002dee:	4298      	cmp	r0, r3
20002df0:	d006      	beq.n	20002e00 <MSS_I2C_read+0x2c>
20002df2:	f244 6358 	movw	r3, #18008	; 0x4658
20002df6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002dfa:	4298      	cmp	r0, r3
20002dfc:	d000      	beq.n	20002e00 <MSS_I2C_read+0x2c>
20002dfe:	be00      	bkpt	0x0000

    primask = disable_interrupts();
20002e00:	f7ff ffda 	bl	20002db8 <disable_interrupts>
    
    /* Update the transaction only when there is no transaction going on I2C */
    if( this_i2c->transaction == NO_TRANSACTION)
20002e04:	7a23      	ldrb	r3, [r4, #8]
20002e06:	b913      	cbnz	r3, 20002e0e <MSS_I2C_read+0x3a>
    {
      this_i2c->transaction = MASTER_READ_TRANSACTION;
20002e08:	f04f 0302 	mov.w	r3, #2
20002e0c:	7223      	strb	r3, [r4, #8]
    }

    /* Update the Pending transaction information so that transaction can restarted */
    this_i2c->pending_transaction = MASTER_READ_TRANSACTION ;
20002e0e:	f04f 0302 	mov.w	r3, #2
20002e12:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
20002e16:	ea4f 0545 	mov.w	r5, r5, lsl #1
20002e1a:	6065      	str	r5, [r4, #4]

    this_i2c->dir = READ_DIR;
20002e1c:	f04f 0301 	mov.w	r3, #1
20002e20:	62e3      	str	r3, [r4, #44]	; 0x2c

    this_i2c->master_rx_buffer = read_buffer;
20002e22:	6326      	str	r6, [r4, #48]	; 0x30
    this_i2c->master_rx_size = read_size;
20002e24:	6367      	str	r7, [r4, #52]	; 0x34
    this_i2c->master_rx_idx = 0u;
20002e26:	f04f 0200 	mov.w	r2, #0
20002e2a:	63a2      	str	r2, [r4, #56]	; 0x38
    
    /* Set I2C status in progress */
    this_i2c->master_status = MSS_I2C_IN_PROGRESS;
20002e2c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    this_i2c->options = options;
20002e30:	f884 8010 	strb.w	r8, [r4, #16]

    if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
20002e34:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
20002e38:	2b01      	cmp	r3, #1
    {
        this_i2c->is_transaction_pending = 1u;
20002e3a:	bf0f      	iteee	eq
20002e3c:	f884 3071 	strbeq.w	r3, [r4, #113]	; 0x71
    }
    else
    {
        this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
20002e40:	69a3      	ldrne	r3, [r4, #24]
20002e42:	2201      	movne	r2, #1
20002e44:	615a      	strne	r2, [r3, #20]
    /*
     * Clear interrupts if required (depends on repeated starts).
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( MSS_I2C_HOLD_BUS == this_i2c->bus_status )
20002e46:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
20002e4a:	2b01      	cmp	r3, #1
20002e4c:	d11d      	bne.n	20002e8a <MSS_I2C_read+0xb6>
    {
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
20002e4e:	69a3      	ldr	r3, [r4, #24]
20002e50:	f04f 0200 	mov.w	r2, #0
20002e54:	60da      	str	r2, [r3, #12]
        stat_ctrl = this_i2c->hw_reg->STATUS;
20002e56:	6963      	ldr	r3, [r4, #20]
20002e58:	791b      	ldrb	r3, [r3, #4]
20002e5a:	f88d 3007 	strb.w	r3, [sp, #7]
        stat_ctrl = stat_ctrl;  /* Avoids Lint warning */
20002e5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
20002e62:	f88d 3007 	strb.w	r3, [sp, #7]
        NVIC_ClearPendingIRQ( this_i2c->irqn );
20002e66:	8a63      	ldrh	r3, [r4, #18]
20002e68:	b21a      	sxth	r2, r3
20002e6a:	ea4f 1252 	mov.w	r2, r2, lsr #5
20002e6e:	f003 031f 	and.w	r3, r3, #31
20002e72:	f04f 0101 	mov.w	r1, #1
20002e76:	fa01 f103 	lsl.w	r1, r1, r3
20002e7a:	f24e 1300 	movw	r3, #57600	; 0xe100
20002e7e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002e82:	f102 0260 	add.w	r2, r2, #96	; 0x60
20002e86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
    
    /* Enable the interrupt. ( Re-enable) */
    NVIC_EnableIRQ( this_i2c->irqn );
20002e8a:	8a63      	ldrh	r3, [r4, #18]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20002e8c:	b21a      	sxth	r2, r3
20002e8e:	ea4f 1252 	mov.w	r2, r2, lsr #5
20002e92:	f003 031f 	and.w	r3, r3, #31
20002e96:	f04f 0101 	mov.w	r1, #1
20002e9a:	fa01 f103 	lsl.w	r1, r1, r3
20002e9e:	f24e 1300 	movw	r3, #57600	; 0xe100
20002ea2:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002ea6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    restore_interrupts( primask );
20002eaa:	f7ff ff8f 	bl	20002dcc <restore_interrupts>
}
20002eae:	b002      	add	sp, #8
20002eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

20002eb4 <MSS_I2C_write>:
    uint8_t serial_addr,
    const uint8_t * write_buffer,
    uint16_t write_size,
    uint8_t options
)
{
20002eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
20002eb8:	b082      	sub	sp, #8
20002eba:	4604      	mov	r4, r0
20002ebc:	460d      	mov	r5, r1
20002ebe:	4616      	mov	r6, r2
20002ec0:	461f      	mov	r7, r3
20002ec2:	f89d 8020 	ldrb.w	r8, [sp, #32]
    uint32_t primask;
    volatile uint8_t stat_ctrl;

    ASSERT((this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1));
20002ec6:	f244 53e4 	movw	r3, #17892	; 0x45e4
20002eca:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002ece:	4298      	cmp	r0, r3
20002ed0:	d006      	beq.n	20002ee0 <MSS_I2C_write+0x2c>
20002ed2:	f244 6358 	movw	r3, #18008	; 0x4658
20002ed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002eda:	4298      	cmp	r0, r3
20002edc:	d000      	beq.n	20002ee0 <MSS_I2C_write+0x2c>
20002ede:	be00      	bkpt	0x0000

    primask = disable_interrupts();
20002ee0:	f7ff ff6a 	bl	20002db8 <disable_interrupts>

    /* Update the transaction only when there is no transaction going on I2C */
    if( this_i2c->transaction == NO_TRANSACTION)
20002ee4:	7a23      	ldrb	r3, [r4, #8]
20002ee6:	b913      	cbnz	r3, 20002eee <MSS_I2C_write+0x3a>
    {
      this_i2c->transaction = MASTER_WRITE_TRANSACTION;
20002ee8:	f04f 0301 	mov.w	r3, #1
20002eec:	7223      	strb	r3, [r4, #8]
    }

    /* Update the Pending transaction information so that transaction can restarted */
    this_i2c->pending_transaction = MASTER_WRITE_TRANSACTION ;
20002eee:	f04f 0301 	mov.w	r3, #1
20002ef2:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
20002ef6:	fa05 f503 	lsl.w	r5, r5, r3
20002efa:	6065      	str	r5, [r4, #4]

    this_i2c->dir = WRITE_DIR;
20002efc:	f04f 0200 	mov.w	r2, #0
20002f00:	62e2      	str	r2, [r4, #44]	; 0x2c

    this_i2c->master_tx_buffer = write_buffer;
20002f02:	6226      	str	r6, [r4, #32]
    this_i2c->master_tx_size = write_size;
20002f04:	6267      	str	r7, [r4, #36]	; 0x24
    this_i2c->master_tx_idx = 0u;
20002f06:	62a2      	str	r2, [r4, #40]	; 0x28

    /* Set I2C status in progress */
    this_i2c->master_status = MSS_I2C_IN_PROGRESS;
20002f08:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    this_i2c->options = options;
20002f0c:	f884 8010 	strb.w	r8, [r4, #16]

    if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
20002f10:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
20002f14:	2b01      	cmp	r3, #1
    {
        this_i2c->is_transaction_pending = 1u;
20002f16:	bf0f      	iteee	eq
20002f18:	f884 3071 	strbeq.w	r3, [r4, #113]	; 0x71
    }
    else
    {
        this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
20002f1c:	69a3      	ldrne	r3, [r4, #24]
20002f1e:	2201      	movne	r2, #1
20002f20:	615a      	strne	r2, [r3, #20]
    /*
     * Clear interrupts if required (depends on repeated starts).
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( MSS_I2C_HOLD_BUS == this_i2c->bus_status )
20002f22:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
20002f26:	2b01      	cmp	r3, #1
20002f28:	d11d      	bne.n	20002f66 <MSS_I2C_write+0xb2>
    {
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
20002f2a:	69a3      	ldr	r3, [r4, #24]
20002f2c:	f04f 0200 	mov.w	r2, #0
20002f30:	60da      	str	r2, [r3, #12]
        stat_ctrl = this_i2c->hw_reg->STATUS;
20002f32:	6963      	ldr	r3, [r4, #20]
20002f34:	791b      	ldrb	r3, [r3, #4]
20002f36:	f88d 3007 	strb.w	r3, [sp, #7]
        stat_ctrl = stat_ctrl;  /* Avoids Lint warning */
20002f3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
20002f3e:	f88d 3007 	strb.w	r3, [sp, #7]
        NVIC_ClearPendingIRQ( this_i2c->irqn );
20002f42:	8a63      	ldrh	r3, [r4, #18]
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20002f44:	b21a      	sxth	r2, r3
20002f46:	ea4f 1252 	mov.w	r2, r2, lsr #5
20002f4a:	f003 031f 	and.w	r3, r3, #31
20002f4e:	f04f 0101 	mov.w	r1, #1
20002f52:	fa01 f103 	lsl.w	r1, r1, r3
20002f56:	f24e 1300 	movw	r3, #57600	; 0xe100
20002f5a:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002f5e:	f102 0260 	add.w	r2, r2, #96	; 0x60
20002f62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    /* Enable the interrupt. ( Re-enable) */
    NVIC_EnableIRQ( this_i2c->irqn );
20002f66:	8a63      	ldrh	r3, [r4, #18]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20002f68:	b21a      	sxth	r2, r3
20002f6a:	ea4f 1252 	mov.w	r2, r2, lsr #5
20002f6e:	f003 031f 	and.w	r3, r3, #31
20002f72:	f04f 0101 	mov.w	r1, #1
20002f76:	fa01 f103 	lsl.w	r1, r1, r3
20002f7a:	f24e 1300 	movw	r3, #57600	; 0xe100
20002f7e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002f82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    restore_interrupts( primask );
20002f86:	f7ff ff21 	bl	20002dcc <restore_interrupts>
}
20002f8a:	b002      	add	sp, #8
20002f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

20002f90 <MSS_I2C_init>:
(
    mss_i2c_instance_t * this_i2c,
    uint8_t ser_address,
    mss_i2c_clock_divider_t ser_clock_speed
)
{
20002f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
20002f94:	4604      	mov	r4, r0
20002f96:	460e      	mov	r6, r1
20002f98:	4615      	mov	r5, r2
    uint32_t primask;
    uint_fast16_t clock_speed = (uint_fast16_t)ser_clock_speed;
    
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
20002f9a:	f244 53e4 	movw	r3, #17892	; 0x45e4
20002f9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002fa2:	4298      	cmp	r0, r3
20002fa4:	d007      	beq.n	20002fb6 <MSS_I2C_init+0x26>
20002fa6:	f244 6358 	movw	r3, #18008	; 0x4658
20002faa:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002fae:	4298      	cmp	r0, r3
20002fb0:	d04f      	beq.n	20003052 <MSS_I2C_init+0xc2>
20002fb2:	be00      	bkpt	0x0000
20002fb4:	e04d      	b.n	20003052 <MSS_I2C_init+0xc2>
     * Initialize all items of the this_i2c data structure to zero. This
     * initializes all state variables to their init value. It relies on
     * the fact that NO_TRANSACTION, I2C_SUCCESS and I2C_RELEASE_BUS all
     * have an actual value of zero.
     */
    primask = disable_interrupts();
20002fb6:	f7ff feff 	bl	20002db8 <disable_interrupts>
20002fba:	4607      	mov	r7, r0
    memset(this_i2c, 0, sizeof(mss_i2c_instance_t));
20002fbc:	f244 58e4 	movw	r8, #17892	; 0x45e4
20002fc0:	f2c2 0800 	movt	r8, #8192	; 0x2000
20002fc4:	4640      	mov	r0, r8
20002fc6:	f04f 0100 	mov.w	r1, #0
20002fca:	f04f 0274 	mov.w	r2, #116	; 0x74
20002fce:	f001 f90b 	bl	200041e8 <memset>
    
    if ( this_i2c == &g_mss_i2c0 )
    {
        this_i2c->irqn = I2C0_IRQn;
20002fd2:	f04f 030e 	mov.w	r3, #14
20002fd6:	f8a8 3012 	strh.w	r3, [r8, #18]
        this_i2c->hw_reg = I2C0;
20002fda:	f242 0300 	movw	r3, #8192	; 0x2000
20002fde:	f2c4 0300 	movt	r3, #16384	; 0x4000
20002fe2:	f8c8 3014 	str.w	r3, [r8, #20]
        this_i2c->hw_reg_bit = I2C0_BITBAND;
20002fe6:	f240 0300 	movw	r3, #0
20002fea:	f2c4 2304 	movt	r3, #16900	; 0x4204
20002fee:	f8c8 3018 	str.w	r3, [r8, #24]
        
        /* reset I2C0 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C0_SOFTRESET_MASK;
20002ff2:	f242 0300 	movw	r3, #8192	; 0x2000
20002ff6:	f2ce 0304 	movt	r3, #57348	; 0xe004
20002ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20002ffc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
20003000:	631a      	str	r2, [r3, #48]	; 0x30
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20003002:	f24e 1200 	movw	r2, #57600	; 0xe100
20003006:	f2ce 0200 	movt	r2, #57344	; 0xe000
2000300a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
2000300e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
        /* Clear any previously pended I2C0 interrupt */
        NVIC_ClearPendingIRQ( I2C0_IRQn );
        /* Take I2C0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C0_SOFTRESET_MASK;
20003012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20003014:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
20003018:	631a      	str	r2, [r3, #48]	; 0x30
        /* Take I2C1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C1_SOFTRESET_MASK;
    }
    
    /* Use same base address for SMBus bitband access */
    this_i2c->hw_smb_reg_bit = (I2C_SMBus_BitBand_TypeDef *)this_i2c->hw_reg_bit;
2000301a:	69a3      	ldr	r3, [r4, #24]
2000301c:	61e3      	str	r3, [r4, #28]

    /* Update Serial address of the device */
    this_i2c->ser_address = (uint_fast8_t)ser_address << 1u;
2000301e:	ea4f 0646 	mov.w	r6, r6, lsl #1
20003022:	6026      	str	r6, [r4, #0]

    this_i2c->hw_reg_bit->CTRL_CR2 = (uint32_t)((clock_speed >> 2u) & 0x01u);
20003024:	f3c5 0280 	ubfx	r2, r5, #2, #1
20003028:	61da      	str	r2, [r3, #28]
    this_i2c->hw_reg_bit->CTRL_CR1 = (uint32_t)((clock_speed >> 1u) & 0x01u);
2000302a:	69a3      	ldr	r3, [r4, #24]
2000302c:	f3c5 0240 	ubfx	r2, r5, #1, #1
20003030:	605a      	str	r2, [r3, #4]
    this_i2c->hw_reg_bit->CTRL_CR0 = (uint32_t)(clock_speed & 0x01u);
20003032:	69a3      	ldr	r3, [r4, #24]
20003034:	f005 0501 	and.w	r5, r5, #1
20003038:	601d      	str	r5, [r3, #0]
    this_i2c->hw_reg->ADDR = (uint8_t)this_i2c->ser_address;
2000303a:	6963      	ldr	r3, [r4, #20]
2000303c:	7822      	ldrb	r2, [r4, #0]
2000303e:	731a      	strb	r2, [r3, #12]
    this_i2c->hw_reg_bit->CTRL_ENS1 = 0x01u; /* set enable bit */
20003040:	69a3      	ldr	r3, [r4, #24]
20003042:	f04f 0201 	mov.w	r2, #1
20003046:	619a      	str	r2, [r3, #24]
    restore_interrupts( primask );
20003048:	4638      	mov	r0, r7
2000304a:	f7ff febf 	bl	20002dcc <restore_interrupts>
}
2000304e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     * Initialize all items of the this_i2c data structure to zero. This
     * initializes all state variables to their init value. It relies on
     * the fact that NO_TRANSACTION, I2C_SUCCESS and I2C_RELEASE_BUS all
     * have an actual value of zero.
     */
    primask = disable_interrupts();
20003052:	f7ff feb1 	bl	20002db8 <disable_interrupts>
20003056:	4607      	mov	r7, r0
    memset(this_i2c, 0, sizeof(mss_i2c_instance_t));
20003058:	4620      	mov	r0, r4
2000305a:	f04f 0100 	mov.w	r1, #0
2000305e:	f04f 0274 	mov.w	r2, #116	; 0x74
20003062:	f001 f8c1 	bl	200041e8 <memset>
        /* Take I2C0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C0_SOFTRESET_MASK;
    }
    else
    {
        this_i2c->irqn = I2C1_IRQn;
20003066:	f04f 0311 	mov.w	r3, #17
2000306a:	8263      	strh	r3, [r4, #18]
        this_i2c->hw_reg = I2C1;
2000306c:	f242 0300 	movw	r3, #8192	; 0x2000
20003070:	f2c4 0301 	movt	r3, #16385	; 0x4001
20003074:	6163      	str	r3, [r4, #20]
        this_i2c->hw_reg_bit = I2C1_BITBAND;
20003076:	f240 0300 	movw	r3, #0
2000307a:	f2c4 2324 	movt	r3, #16932	; 0x4224
2000307e:	61a3      	str	r3, [r4, #24]
        
        /* reset I2C1 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C1_SOFTRESET_MASK;
20003080:	f242 0300 	movw	r3, #8192	; 0x2000
20003084:	f2ce 0304 	movt	r3, #57348	; 0xe004
20003088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2000308a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
2000308e:	631a      	str	r2, [r3, #48]	; 0x30
20003090:	f24e 1200 	movw	r2, #57600	; 0xe100
20003094:	f2ce 0200 	movt	r2, #57344	; 0xe000
20003098:	f44f 3100 	mov.w	r1, #131072	; 0x20000
2000309c:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
        /* Clear any previously pended I2C1 interrupt */
        NVIC_ClearPendingIRQ( I2C1_IRQn );
        /* Take I2C1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C1_SOFTRESET_MASK;
200030a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200030a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
200030a6:	631a      	str	r2, [r3, #48]	; 0x30
200030a8:	e7b7      	b.n	2000301a <MSS_I2C_init+0x8a>
200030aa:	bf00      	nop

200030ac <MSS_GPIO_init>:
/*-------------------------------------------------------------------------*//**
 * MSS_GPIO_init
 * See "mss_gpio.h" for details of how to use this function.
 */
void MSS_GPIO_init( void )
{
200030ac:	b410      	push	{r4}
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
200030ae:	f242 0300 	movw	r3, #8192	; 0x2000
200030b2:	f2ce 0304 	movt	r3, #57348	; 0xe004
200030b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200030b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
200030bc:	631a      	str	r2, [r3, #48]	; 0x30
200030be:	f04f 0300 	mov.w	r3, #0
    /* Clear any previously pended MSS GPIO interrupt */
    for ( i = 0U; i < NB_OF_GPIO; ++i )
    {
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[i] );
200030c2:	f244 302c 	movw	r0, #17196	; 0x432c
200030c6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
200030ca:	f04f 0c01 	mov.w	ip, #1
200030ce:	f24e 1400 	movw	r4, #57600	; 0xe100
200030d2:	f2ce 0400 	movt	r4, #57344	; 0xe000
200030d6:	5ac2      	ldrh	r2, [r0, r3]
200030d8:	b211      	sxth	r1, r2
200030da:	ea4f 1151 	mov.w	r1, r1, lsr #5
200030de:	f002 021f 	and.w	r2, r2, #31
200030e2:	fa0c f202 	lsl.w	r2, ip, r2
200030e6:	f101 0160 	add.w	r1, r1, #96	; 0x60
200030ea:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
200030ee:	f103 0302 	add.w	r3, r3, #2
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
    /* Clear any previously pended MSS GPIO interrupt */
    for ( i = 0U; i < NB_OF_GPIO; ++i )
200030f2:	2b40      	cmp	r3, #64	; 0x40
200030f4:	d1ef      	bne.n	200030d6 <MSS_GPIO_init+0x2a>
    {
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[i] );
    }
    /* Take MSS GPIO hardware out of reset. */
    SYSREG->SOFT_RST_CR &= ~SYSREG_GPIO_SOFTRESET_MASK;
200030f6:	f242 0300 	movw	r3, #8192	; 0x2000
200030fa:	f2ce 0304 	movt	r3, #57348	; 0xe004
200030fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20003100:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
20003104:	631a      	str	r2, [r3, #48]	; 0x30
}
20003106:	bc10      	pop	{r4}
20003108:	4770      	bx	lr
2000310a:	bf00      	nop

2000310c <MSS_GPIO_config>:
    uint32_t config
)
{
    uint32_t gpio_idx = (uint32_t)port_id;
    
    ASSERT( gpio_idx < NB_OF_GPIO );
2000310c:	281f      	cmp	r0, #31
2000310e:	d901      	bls.n	20003114 <MSS_GPIO_config+0x8>
20003110:	be00      	bkpt	0x0000
20003112:	4770      	bx	lr

    if ( gpio_idx < NB_OF_GPIO )
    {
        *(g_config_reg_lut[gpio_idx]) = config;
20003114:	f244 336c 	movw	r3, #17260	; 0x436c
20003118:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000311c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
20003120:	6019      	str	r1, [r3, #0]
20003122:	4770      	bx	lr

20003124 <MSS_GPIO_set_output>:
    uint8_t             value
)
{
    uint32_t gpio_idx = (uint32_t)port_id;
    
    ASSERT( gpio_idx < NB_OF_GPIO );
20003124:	281f      	cmp	r0, #31
20003126:	d901      	bls.n	2000312c <MSS_GPIO_set_output+0x8>
20003128:	be00      	bkpt	0x0000
2000312a:	4770      	bx	lr
    
    if ( gpio_idx < NB_OF_GPIO )
    {
        GPIO_BITBAND->GPIO_OUT[gpio_idx] = (uint32_t)value;
2000312c:	f240 0300 	movw	r3, #0
20003130:	f2c4 2326 	movt	r3, #16934	; 0x4226
20003134:	f500 6088 	add.w	r0, r0, #1088	; 0x440
20003138:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
2000313c:	4770      	bx	lr
2000313e:	bf00      	nop

20003140 <__get_PRIMASK>:
 */
uint32_t __get_PRIMASK(void)
{
  uint32_t result=0;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
20003140:	f3ef 8010 	mrs	r0, PRIMASK
  return(result);
}
20003144:	4770      	bx	lr
20003146:	bf00      	nop

20003148 <__set_PRIMASK>:
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
20003148:	f380 8810 	msr	PRIMASK, r0
}
2000314c:	4770      	bx	lr
2000314e:	bf00      	nop

20003150 <SystemInit>:
    /*
     * Do not make use of global variables or make any asumptions regarding
     * memory content if modifying this function. The memory content has not been
     * initialised by the time this function is called by the start-up code.
     */
}
20003150:	4770      	bx	lr
20003152:	bf00      	nop

20003154 <SystemCoreClockUpdate>:

/***************************************************************************//**
 *
 */
void SystemCoreClockUpdate (void)
{
20003154:	b430      	push	{r4, r5}
20003156:	b084      	sub	sp, #16
    uint32_t PclkDiv0;
    uint32_t PclkDiv1;
    uint32_t AceDiv;
    uint32_t FabDiv;

    const uint32_t pclk_div_lut[4] = { 1uL, 2uL, 4uL, 1uL };
20003158:	f244 33ec 	movw	r3, #17388	; 0x43ec
2000315c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003160:	46ec      	mov	ip, sp
20003162:	cb0f      	ldmia	r3!, {r0, r1, r2, r3}
20003164:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    /* Read PCLK dividers from system registers. Multiply the value read from
     * system register by two to get actual divider value. */
    PclkDiv0 = pclk_div_lut[((SYSREG->MSS_CLK_CR >> PCLK0_DIV_SHIFT) & PCLK_DIV_MASK)];
20003168:	f242 0300 	movw	r3, #8192	; 0x2000
2000316c:	f2ce 0304 	movt	r3, #57348	; 0xe004
20003170:	6c9a      	ldr	r2, [r3, #72]	; 0x48
20003172:	f002 020c 	and.w	r2, r2, #12
20003176:	a904      	add	r1, sp, #16
20003178:	440a      	add	r2, r1
2000317a:	f852 5c10 	ldr.w	r5, [r2, #-16]
    PclkDiv1 = pclk_div_lut[((SYSREG->MSS_CLK_CR >> PCLK1_DIV_SHIFT) & PCLK_DIV_MASK)];
2000317e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
20003180:	f3c2 1201 	ubfx	r2, r2, #4, #2
20003184:	eb01 0282 	add.w	r2, r1, r2, lsl #2
20003188:	f852 4c10 	ldr.w	r4, [r2, #-16]
    AceDiv = pclk_div_lut[((SYSREG->MSS_CLK_CR >> ACE_DIV_SHIFT) & PCLK_DIV_MASK)];
2000318c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
2000318e:	f3c2 1281 	ubfx	r2, r2, #6, #2
20003192:	eb01 0282 	add.w	r2, r1, r2, lsl #2
20003196:	f852 0c10 	ldr.w	r0, [r2, #-16]
    {
        /* Compute the FPGA fabric frequency divider. */
        uint32_t obdiv;
        uint32_t obdivhalf;
        
        obdiv = (SYSREG->MSS_CCC_DIV_CR >> OBDIV_SHIFT) & OBDIV_MASK;
2000319a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
        obdivhalf = (SYSREG->MSS_CCC_DIV_CR >> OBDIVHALF_SHIFT) & OBDIVHALF_MASK;
2000319c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        FabDiv = obdiv + 1uL;
2000319e:	f3c1 2104 	ubfx	r1, r1, #8, #5
200031a2:	f101 0101 	add.w	r1, r1, #1
        if ( obdivhalf != 0uL )
200031a6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
        {
            FabDiv = FabDiv * 2uL;
200031aa:	bf18      	it	ne
200031ac:	0049      	lslne	r1, r1, #1
    
    uint32_t * p_sysboot_key = SYSBOOT_KEY_ADDR;
    uint32_t * p_idcode = IDCODE_LOCATION;
    uint32_t idcode;
	
    idcode = *p_idcode & ~IDCODE_DEV_REV_MASK;
200031ae:	f240 2330 	movw	r3, #560	; 0x230
200031b2:	f2c6 0308 	movt	r3, #24584	; 0x6008
200031b6:	681a      	ldr	r2, [r3, #0]
	
    if ( A2F060IFX_ID == idcode )
200031b8:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
200031bc:	f241 13cf 	movw	r3, #4559	; 0x11cf
200031c0:	f2c0 53a1 	movt	r3, #1441	; 0x5a1
200031c4:	429a      	cmp	r2, r3
200031c6:	d105      	bne.n	200031d4 <SystemCoreClockUpdate+0x80>
    {
        uint32_t *p_fclk = SYSBOOT_A2F060_FCLK_ADDR;
        fclk = *p_fclk;
200031c8:	f64e 732c 	movw	r3, #61228	; 0xef2c
200031cc:	f2c6 0301 	movt	r3, #24577	; 0x6001
200031d0:	681b      	ldr	r3, [r3, #0]
200031d2:	e028      	b.n	20003226 <SystemCoreClockUpdate+0xd2>
    }
    else if ( SYSBOOT_KEY_VALUE == *p_sysboot_key )
200031d4:	f640 031c 	movw	r3, #2076	; 0x81c
200031d8:	f2c6 0308 	movt	r3, #24584	; 0x6008
200031dc:	681a      	ldr	r2, [r3, #0]
200031de:	f244 3341 	movw	r3, #17217	; 0x4341
200031e2:	f6c4 4354 	movt	r3, #19540	; 0x4c54
200031e6:	429a      	cmp	r2, r3
200031e8:	d11e      	bne.n	20003228 <SystemCoreClockUpdate+0xd4>
    {
        /* Actel system boot programmed, check if it has the FCLK value stored. */
        uint32_t *p_sysboot_version = SYSBOOT_VERSION_ADDR;
        uint32_t sysboot_version = *p_sysboot_version;
200031ea:	f640 0340 	movw	r3, #2112	; 0x840
200031ee:	f2c6 0308 	movt	r3, #24584	; 0x6008
200031f2:	681a      	ldr	r2, [r3, #0]
        
        sysboot_version &= SYSBOOT_VERSION_MASK;
200031f4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
        
        if ( sysboot_version >= MIN_SYSBOOT_VERSION )
200031f8:	f240 3300 	movw	r3, #768	; 0x300
200031fc:	f2c0 0301 	movt	r3, #1
20003200:	429a      	cmp	r2, r3
20003202:	d911      	bls.n	20003228 <SystemCoreClockUpdate+0xd4>
        {
            /* Handle change of eNVM location of FCLK between 1.3.x and 2.x.x versions of the system boot. */
            if ( sysboot_version < SYSBOOT_VERSION_2_X )
20003204:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
20003208:	d205      	bcs.n	20003216 <SystemCoreClockUpdate+0xc2>
            {
                /* Read FCLK value from MSS configurator generated configuration
                 * data stored in eNVM spare pages as part of system boot version 1.3.x
                 * configuration tables. */
                uint32_t *p_fclk = SYSBOOT_1_3_FCLK_ADDR;
                fclk = *p_fclk;
2000320a:	f241 632c 	movw	r3, #5676	; 0x162c
2000320e:	f2c6 0308 	movt	r3, #24584	; 0x6008
20003212:	681b      	ldr	r3, [r3, #0]
20003214:	e007      	b.n	20003226 <SystemCoreClockUpdate+0xd2>
            }
            else if ( sysboot_version < MAX_SYSBOOT_VERSION )
20003216:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
2000321a:	d205      	bcs.n	20003228 <SystemCoreClockUpdate+0xd4>
            {
                /* Read FCLK value from MSS configurator generated configuration
                 * data stored in eNVM spare pages as part of system boot version 2.x.x
                 * configuration tables. */
                uint32_t *p_fclk = SYSBOOT_2_x_FCLK_ADDR;
                fclk = *p_fclk;
2000321c:	f641 63ac 	movw	r3, #7852	; 0x1eac
20003220:	f2c6 0308 	movt	r3, #24584	; 0x6008
20003224:	681b      	ldr	r3, [r3, #0]
                fclk = 0uL;
            }
        }
    }
    
    if ( 0uL == fclk )
20003226:	b923      	cbnz	r3, 20003232 <SystemCoreClockUpdate+0xde>
        /* 
         * Could not retrieve FCLK from system boot configuration data. Fall back
         * to using SMARTFUSION_FCLK_FREQ which must then be defined as part of
         * project settings.
         */
        ASSERT( SMARTFUSION_FCLK_FREQ_DEFINED );
20003228:	be00      	bkpt	0x0000
2000322a:	f647 0340 	movw	r3, #30784	; 0x7840
2000322e:	f2c0 137d 	movt	r3, #381	; 0x17d
    }
    
    /* Retrieve FCLK from eNVM spare pages if Actel system boot programmed as part of the system. */
    
    /* Read system clock from eNVM spare pages. */
    SystemCoreClock = GetSystemClock();
20003232:	f244 4230 	movw	r2, #17456	; 0x4430
20003236:	f2c2 0200 	movt	r2, #8192	; 0x2000
2000323a:	6013      	str	r3, [r2, #0]
    g_FrequencyPCLK0 = SystemCoreClock / PclkDiv0;
2000323c:	f244 4228 	movw	r2, #17448	; 0x4428
20003240:	f2c2 0200 	movt	r2, #8192	; 0x2000
20003244:	fbb3 f5f5 	udiv	r5, r3, r5
20003248:	6015      	str	r5, [r2, #0]
    g_FrequencyPCLK1 = SystemCoreClock / PclkDiv1;
2000324a:	f244 422c 	movw	r2, #17452	; 0x442c
2000324e:	f2c2 0200 	movt	r2, #8192	; 0x2000
20003252:	fbb3 f4f4 	udiv	r4, r3, r4
20003256:	6014      	str	r4, [r2, #0]
    g_FrequencyACE = SystemCoreClock / AceDiv;
20003258:	f244 4220 	movw	r2, #17440	; 0x4420
2000325c:	f2c2 0200 	movt	r2, #8192	; 0x2000
20003260:	fbb3 f0f0 	udiv	r0, r3, r0
20003264:	6010      	str	r0, [r2, #0]
    g_FrequencyFPGA = SystemCoreClock / FabDiv;
20003266:	f244 4224 	movw	r2, #17444	; 0x4424
2000326a:	f2c2 0200 	movt	r2, #8192	; 0x2000
2000326e:	fbb3 f1f1 	udiv	r1, r3, r1
20003272:	6011      	str	r1, [r2, #0]
    
    /* Keep SystemFrequency as well as SystemCoreClock for legacy reasons. */
    SystemFrequency = SystemCoreClock;
20003274:	f244 4234 	movw	r2, #17460	; 0x4434
20003278:	f2c2 0200 	movt	r2, #8192	; 0x2000
2000327c:	6013      	str	r3, [r2, #0]
}
2000327e:	b004      	add	sp, #16
20003280:	bc30      	pop	{r4, r5}
20003282:	4770      	bx	lr

20003284 <ACE_PPE_Flag0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag0_IRQHandler( void )
#else
void ACE_PPE_Flag0_IRQHandler( void )
#endif
{
20003284:	4668      	mov	r0, sp
20003286:	f020 0107 	bic.w	r1, r0, #7
2000328a:	468d      	mov	sp, r1
2000328c:	b401      	push	{r0}
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
2000328e:	f24e 1300 	movw	r3, #57600	; 0xe100
20003292:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003296:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
2000329a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG0 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag0_IRQn );
}
2000329e:	bc01      	pop	{r0}
200032a0:	4685      	mov	sp, r0
200032a2:	4770      	bx	lr

200032a4 <ACE_PPE_Flag1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag1_IRQHandler( void )
#else
void ACE_PPE_Flag1_IRQHandler( void )
#endif
{
200032a4:	4668      	mov	r0, sp
200032a6:	f020 0107 	bic.w	r1, r0, #7
200032aa:	468d      	mov	sp, r1
200032ac:	b401      	push	{r0}
200032ae:	f24e 1300 	movw	r3, #57600	; 0xe100
200032b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
200032b6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
200032ba:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG1 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag1_IRQn );
}
200032be:	bc01      	pop	{r0}
200032c0:	4685      	mov	sp, r0
200032c2:	4770      	bx	lr

200032c4 <ACE_PPE_Flag2_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag2_IRQHandler( void )
#else
void ACE_PPE_Flag2_IRQHandler( void )
#endif
{
200032c4:	4668      	mov	r0, sp
200032c6:	f020 0107 	bic.w	r1, r0, #7
200032ca:	468d      	mov	sp, r1
200032cc:	b401      	push	{r0}
200032ce:	f24e 1300 	movw	r3, #57600	; 0xe100
200032d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
200032d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
200032da:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG2 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag2_IRQn );
}
200032de:	bc01      	pop	{r0}
200032e0:	4685      	mov	sp, r0
200032e2:	4770      	bx	lr

200032e4 <ACE_PPE_Flag3_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag3_IRQHandler( void )
#else
void ACE_PPE_Flag3_IRQHandler( void )
#endif
{
200032e4:	4668      	mov	r0, sp
200032e6:	f020 0107 	bic.w	r1, r0, #7
200032ea:	468d      	mov	sp, r1
200032ec:	b401      	push	{r0}
200032ee:	f24e 1300 	movw	r3, #57600	; 0xe100
200032f2:	f2ce 0300 	movt	r3, #57344	; 0xe000
200032f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
200032fa:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG3 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag3_IRQn );
}
200032fe:	bc01      	pop	{r0}
20003300:	4685      	mov	sp, r0
20003302:	4770      	bx	lr

20003304 <ACE_PPE_Flag4_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag4_IRQHandler( void )
#else
void ACE_PPE_Flag4_IRQHandler( void )
#endif
{
20003304:	4668      	mov	r0, sp
20003306:	f020 0107 	bic.w	r1, r0, #7
2000330a:	468d      	mov	sp, r1
2000330c:	b401      	push	{r0}
2000330e:	f24e 1300 	movw	r3, #57600	; 0xe100
20003312:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003316:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
2000331a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG4 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag4_IRQn );
}
2000331e:	bc01      	pop	{r0}
20003320:	4685      	mov	sp, r0
20003322:	4770      	bx	lr

20003324 <ACE_PPE_Flag5_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag5_IRQHandler( void )
#else
void ACE_PPE_Flag5_IRQHandler( void )
#endif
{
20003324:	4668      	mov	r0, sp
20003326:	f020 0107 	bic.w	r1, r0, #7
2000332a:	468d      	mov	sp, r1
2000332c:	b401      	push	{r0}
2000332e:	f24e 1300 	movw	r3, #57600	; 0xe100
20003332:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003336:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
2000333a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG5 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag5_IRQn );
}
2000333e:	bc01      	pop	{r0}
20003340:	4685      	mov	sp, r0
20003342:	4770      	bx	lr

20003344 <ACE_PPE_Flag6_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag6_IRQHandler( void )
#else
void ACE_PPE_Flag6_IRQHandler( void )
#endif
{
20003344:	4668      	mov	r0, sp
20003346:	f020 0107 	bic.w	r1, r0, #7
2000334a:	468d      	mov	sp, r1
2000334c:	b401      	push	{r0}
2000334e:	f24e 1300 	movw	r3, #57600	; 0xe100
20003352:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
2000335a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG6 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag6_IRQn );
}
2000335e:	bc01      	pop	{r0}
20003360:	4685      	mov	sp, r0
20003362:	4770      	bx	lr

20003364 <ACE_PPE_Flag7_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag7_IRQHandler( void )
#else
void ACE_PPE_Flag7_IRQHandler( void )
#endif
{
20003364:	4668      	mov	r0, sp
20003366:	f020 0107 	bic.w	r1, r0, #7
2000336a:	468d      	mov	sp, r1
2000336c:	b401      	push	{r0}
2000336e:	f24e 1300 	movw	r3, #57600	; 0xe100
20003372:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003376:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
2000337a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG7 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag7_IRQn );
}
2000337e:	bc01      	pop	{r0}
20003380:	4685      	mov	sp, r0
20003382:	4770      	bx	lr

20003384 <ACE_PPE_Flag8_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag8_IRQHandler( void )
#else
void ACE_PPE_Flag8_IRQHandler( void )
#endif
{
20003384:	4668      	mov	r0, sp
20003386:	f020 0107 	bic.w	r1, r0, #7
2000338a:	468d      	mov	sp, r1
2000338c:	b401      	push	{r0}
2000338e:	f24e 1300 	movw	r3, #57600	; 0xe100
20003392:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003396:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
2000339a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG8 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag8_IRQn );
}
2000339e:	bc01      	pop	{r0}
200033a0:	4685      	mov	sp, r0
200033a2:	4770      	bx	lr

200033a4 <ACE_PPE_Flag9_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag9_IRQHandler( void )
#else
void ACE_PPE_Flag9_IRQHandler( void )
#endif
{
200033a4:	4668      	mov	r0, sp
200033a6:	f020 0107 	bic.w	r1, r0, #7
200033aa:	468d      	mov	sp, r1
200033ac:	b401      	push	{r0}
200033ae:	f24e 1300 	movw	r3, #57600	; 0xe100
200033b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
200033b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
200033ba:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    process_flag_irq( THRESHOLD_FLAG9 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag9_IRQn );
}
200033be:	bc01      	pop	{r0}
200033c0:	4685      	mov	sp, r0
200033c2:	4770      	bx	lr

200033c4 <ACE_PPE_Flag10_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag10_IRQHandler( void )
#else
void ACE_PPE_Flag10_IRQHandler( void )
#endif
{
200033c4:	4668      	mov	r0, sp
200033c6:	f020 0107 	bic.w	r1, r0, #7
200033ca:	468d      	mov	sp, r1
200033cc:	b401      	push	{r0}
200033ce:	f24e 1300 	movw	r3, #57600	; 0xe100
200033d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
200033d6:	f04f 0201 	mov.w	r2, #1
200033da:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG10 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag10_IRQn );
}
200033de:	bc01      	pop	{r0}
200033e0:	4685      	mov	sp, r0
200033e2:	4770      	bx	lr

200033e4 <ACE_PPE_Flag11_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag11_IRQHandler( void )
#else
void ACE_PPE_Flag11_IRQHandler( void )
#endif
{
200033e4:	4668      	mov	r0, sp
200033e6:	f020 0107 	bic.w	r1, r0, #7
200033ea:	468d      	mov	sp, r1
200033ec:	b401      	push	{r0}
200033ee:	f24e 1300 	movw	r3, #57600	; 0xe100
200033f2:	f2ce 0300 	movt	r3, #57344	; 0xe000
200033f6:	f04f 0202 	mov.w	r2, #2
200033fa:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG11 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag11_IRQn );
}
200033fe:	bc01      	pop	{r0}
20003400:	4685      	mov	sp, r0
20003402:	4770      	bx	lr

20003404 <ACE_PPE_Flag12_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag12_IRQHandler( void )
#else
void ACE_PPE_Flag12_IRQHandler( void )
#endif
{
20003404:	4668      	mov	r0, sp
20003406:	f020 0107 	bic.w	r1, r0, #7
2000340a:	468d      	mov	sp, r1
2000340c:	b401      	push	{r0}
2000340e:	f24e 1300 	movw	r3, #57600	; 0xe100
20003412:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003416:	f04f 0204 	mov.w	r2, #4
2000341a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG12 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag12_IRQn );
}
2000341e:	bc01      	pop	{r0}
20003420:	4685      	mov	sp, r0
20003422:	4770      	bx	lr

20003424 <ACE_PPE_Flag13_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag13_IRQHandler( void )
#else
void ACE_PPE_Flag13_IRQHandler( void )
#endif
{
20003424:	4668      	mov	r0, sp
20003426:	f020 0107 	bic.w	r1, r0, #7
2000342a:	468d      	mov	sp, r1
2000342c:	b401      	push	{r0}
2000342e:	f24e 1300 	movw	r3, #57600	; 0xe100
20003432:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003436:	f04f 0208 	mov.w	r2, #8
2000343a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG13 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag13_IRQn );
}
2000343e:	bc01      	pop	{r0}
20003440:	4685      	mov	sp, r0
20003442:	4770      	bx	lr

20003444 <ACE_PPE_Flag14_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag14_IRQHandler( void )
#else
void ACE_PPE_Flag14_IRQHandler( void )
#endif
{
20003444:	4668      	mov	r0, sp
20003446:	f020 0107 	bic.w	r1, r0, #7
2000344a:	468d      	mov	sp, r1
2000344c:	b401      	push	{r0}
2000344e:	f24e 1300 	movw	r3, #57600	; 0xe100
20003452:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003456:	f04f 0210 	mov.w	r2, #16
2000345a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG14 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag14_IRQn );
}
2000345e:	bc01      	pop	{r0}
20003460:	4685      	mov	sp, r0
20003462:	4770      	bx	lr

20003464 <ACE_PPE_Flag15_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag15_IRQHandler( void )
#else
void ACE_PPE_Flag15_IRQHandler( void )
#endif
{
20003464:	4668      	mov	r0, sp
20003466:	f020 0107 	bic.w	r1, r0, #7
2000346a:	468d      	mov	sp, r1
2000346c:	b401      	push	{r0}
2000346e:	f24e 1300 	movw	r3, #57600	; 0xe100
20003472:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003476:	f04f 0220 	mov.w	r2, #32
2000347a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG15 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag15_IRQn );
}
2000347e:	bc01      	pop	{r0}
20003480:	4685      	mov	sp, r0
20003482:	4770      	bx	lr

20003484 <ACE_PPE_Flag16_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag16_IRQHandler( void )
#else
void ACE_PPE_Flag16_IRQHandler( void )
#endif
{
20003484:	4668      	mov	r0, sp
20003486:	f020 0107 	bic.w	r1, r0, #7
2000348a:	468d      	mov	sp, r1
2000348c:	b401      	push	{r0}
2000348e:	f24e 1300 	movw	r3, #57600	; 0xe100
20003492:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003496:	f04f 0240 	mov.w	r2, #64	; 0x40
2000349a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG16 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag16_IRQn );
}
2000349e:	bc01      	pop	{r0}
200034a0:	4685      	mov	sp, r0
200034a2:	4770      	bx	lr

200034a4 <ACE_PPE_Flag17_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag17_IRQHandler( void )
#else
void ACE_PPE_Flag17_IRQHandler( void )
#endif
{
200034a4:	4668      	mov	r0, sp
200034a6:	f020 0107 	bic.w	r1, r0, #7
200034aa:	468d      	mov	sp, r1
200034ac:	b401      	push	{r0}
200034ae:	f24e 1300 	movw	r3, #57600	; 0xe100
200034b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
200034b6:	f04f 0280 	mov.w	r2, #128	; 0x80
200034ba:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG17 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag17_IRQn );
}
200034be:	bc01      	pop	{r0}
200034c0:	4685      	mov	sp, r0
200034c2:	4770      	bx	lr

200034c4 <ACE_PPE_Flag18_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag18_IRQHandler( void )
#else
void ACE_PPE_Flag18_IRQHandler( void )
#endif
{
200034c4:	4668      	mov	r0, sp
200034c6:	f020 0107 	bic.w	r1, r0, #7
200034ca:	468d      	mov	sp, r1
200034cc:	b401      	push	{r0}
200034ce:	f24e 1300 	movw	r3, #57600	; 0xe100
200034d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
200034d6:	f44f 7280 	mov.w	r2, #256	; 0x100
200034da:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG18 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag18_IRQn );
}
200034de:	bc01      	pop	{r0}
200034e0:	4685      	mov	sp, r0
200034e2:	4770      	bx	lr

200034e4 <ACE_PPE_Flag19_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag19_IRQHandler( void )
#else
void ACE_PPE_Flag19_IRQHandler( void )
#endif
{
200034e4:	4668      	mov	r0, sp
200034e6:	f020 0107 	bic.w	r1, r0, #7
200034ea:	468d      	mov	sp, r1
200034ec:	b401      	push	{r0}
200034ee:	f24e 1300 	movw	r3, #57600	; 0xe100
200034f2:	f2ce 0300 	movt	r3, #57344	; 0xe000
200034f6:	f44f 7200 	mov.w	r2, #512	; 0x200
200034fa:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG19 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag19_IRQn );
}
200034fe:	bc01      	pop	{r0}
20003500:	4685      	mov	sp, r0
20003502:	4770      	bx	lr

20003504 <ACE_PPE_Flag20_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag20_IRQHandler( void )
#else
void ACE_PPE_Flag20_IRQHandler( void )
#endif
{
20003504:	4668      	mov	r0, sp
20003506:	f020 0107 	bic.w	r1, r0, #7
2000350a:	468d      	mov	sp, r1
2000350c:	b401      	push	{r0}
2000350e:	f24e 1300 	movw	r3, #57600	; 0xe100
20003512:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003516:	f44f 6280 	mov.w	r2, #1024	; 0x400
2000351a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG20 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag20_IRQn );
}
2000351e:	bc01      	pop	{r0}
20003520:	4685      	mov	sp, r0
20003522:	4770      	bx	lr

20003524 <ACE_PPE_Flag21_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag21_IRQHandler( void )
#else
void ACE_PPE_Flag21_IRQHandler( void )
#endif
{
20003524:	4668      	mov	r0, sp
20003526:	f020 0107 	bic.w	r1, r0, #7
2000352a:	468d      	mov	sp, r1
2000352c:	b401      	push	{r0}
2000352e:	f24e 1300 	movw	r3, #57600	; 0xe100
20003532:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003536:	f44f 6200 	mov.w	r2, #2048	; 0x800
2000353a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG21 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag21_IRQn );
}
2000353e:	bc01      	pop	{r0}
20003540:	4685      	mov	sp, r0
20003542:	4770      	bx	lr

20003544 <ACE_PPE_Flag22_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag22_IRQHandler( void )
#else
void ACE_PPE_Flag22_IRQHandler( void )
#endif
{
20003544:	4668      	mov	r0, sp
20003546:	f020 0107 	bic.w	r1, r0, #7
2000354a:	468d      	mov	sp, r1
2000354c:	b401      	push	{r0}
2000354e:	f24e 1300 	movw	r3, #57600	; 0xe100
20003552:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003556:	f44f 5280 	mov.w	r2, #4096	; 0x1000
2000355a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG22 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag22_IRQn );
}
2000355e:	bc01      	pop	{r0}
20003560:	4685      	mov	sp, r0
20003562:	4770      	bx	lr

20003564 <ACE_PPE_Flag23_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag23_IRQHandler( void )
#else
void ACE_PPE_Flag23_IRQHandler( void )
#endif
{
20003564:	4668      	mov	r0, sp
20003566:	f020 0107 	bic.w	r1, r0, #7
2000356a:	468d      	mov	sp, r1
2000356c:	b401      	push	{r0}
2000356e:	f24e 1300 	movw	r3, #57600	; 0xe100
20003572:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003576:	f44f 5200 	mov.w	r2, #8192	; 0x2000
2000357a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG23 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag23_IRQn );
}
2000357e:	bc01      	pop	{r0}
20003580:	4685      	mov	sp, r0
20003582:	4770      	bx	lr

20003584 <ACE_PPE_Flag24_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag24_IRQHandler( void )
#else
void ACE_PPE_Flag24_IRQHandler( void )
#endif
{
20003584:	4668      	mov	r0, sp
20003586:	f020 0107 	bic.w	r1, r0, #7
2000358a:	468d      	mov	sp, r1
2000358c:	b401      	push	{r0}
2000358e:	f24e 1300 	movw	r3, #57600	; 0xe100
20003592:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003596:	f44f 4280 	mov.w	r2, #16384	; 0x4000
2000359a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG24 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag24_IRQn );
}
2000359e:	bc01      	pop	{r0}
200035a0:	4685      	mov	sp, r0
200035a2:	4770      	bx	lr

200035a4 <ACE_PPE_Flag25_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag25_IRQHandler( void )
#else
void ACE_PPE_Flag25_IRQHandler( void )
#endif
{
200035a4:	4668      	mov	r0, sp
200035a6:	f020 0107 	bic.w	r1, r0, #7
200035aa:	468d      	mov	sp, r1
200035ac:	b401      	push	{r0}
200035ae:	f24e 1300 	movw	r3, #57600	; 0xe100
200035b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
200035b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
200035ba:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG25 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag25_IRQn );
}
200035be:	bc01      	pop	{r0}
200035c0:	4685      	mov	sp, r0
200035c2:	4770      	bx	lr

200035c4 <ACE_PPE_Flag26_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag26_IRQHandler( void )
#else
void ACE_PPE_Flag26_IRQHandler( void )
#endif
{
200035c4:	4668      	mov	r0, sp
200035c6:	f020 0107 	bic.w	r1, r0, #7
200035ca:	468d      	mov	sp, r1
200035cc:	b401      	push	{r0}
200035ce:	f24e 1300 	movw	r3, #57600	; 0xe100
200035d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
200035d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
200035da:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG26 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag26_IRQn );
}
200035de:	bc01      	pop	{r0}
200035e0:	4685      	mov	sp, r0
200035e2:	4770      	bx	lr

200035e4 <ACE_PPE_Flag27_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag27_IRQHandler( void )
#else
void ACE_PPE_Flag27_IRQHandler( void )
#endif
{
200035e4:	4668      	mov	r0, sp
200035e6:	f020 0107 	bic.w	r1, r0, #7
200035ea:	468d      	mov	sp, r1
200035ec:	b401      	push	{r0}
200035ee:	f24e 1300 	movw	r3, #57600	; 0xe100
200035f2:	f2ce 0300 	movt	r3, #57344	; 0xe000
200035f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
200035fa:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG27 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag27_IRQn );
}
200035fe:	bc01      	pop	{r0}
20003600:	4685      	mov	sp, r0
20003602:	4770      	bx	lr

20003604 <ACE_PPE_Flag28_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag28_IRQHandler( void )
#else
void ACE_PPE_Flag28_IRQHandler( void )
#endif
{
20003604:	4668      	mov	r0, sp
20003606:	f020 0107 	bic.w	r1, r0, #7
2000360a:	468d      	mov	sp, r1
2000360c:	b401      	push	{r0}
2000360e:	f24e 1300 	movw	r3, #57600	; 0xe100
20003612:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003616:	f44f 2280 	mov.w	r2, #262144	; 0x40000
2000361a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG28 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag28_IRQn );
}
2000361e:	bc01      	pop	{r0}
20003620:	4685      	mov	sp, r0
20003622:	4770      	bx	lr

20003624 <ACE_PPE_Flag29_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag29_IRQHandler( void )
#else
void ACE_PPE_Flag29_IRQHandler( void )
#endif
{
20003624:	4668      	mov	r0, sp
20003626:	f020 0107 	bic.w	r1, r0, #7
2000362a:	468d      	mov	sp, r1
2000362c:	b401      	push	{r0}
2000362e:	f24e 1300 	movw	r3, #57600	; 0xe100
20003632:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003636:	f44f 2200 	mov.w	r2, #524288	; 0x80000
2000363a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG29 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag29_IRQn );
}
2000363e:	bc01      	pop	{r0}
20003640:	4685      	mov	sp, r0
20003642:	4770      	bx	lr

20003644 <ACE_PPE_Flag30_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag30_IRQHandler( void )
#else
void ACE_PPE_Flag30_IRQHandler( void )
#endif
{
20003644:	4668      	mov	r0, sp
20003646:	f020 0107 	bic.w	r1, r0, #7
2000364a:	468d      	mov	sp, r1
2000364c:	b401      	push	{r0}
2000364e:	f24e 1300 	movw	r3, #57600	; 0xe100
20003652:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003656:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
2000365a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG30 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag30_IRQn );
}
2000365e:	bc01      	pop	{r0}
20003660:	4685      	mov	sp, r0
20003662:	4770      	bx	lr

20003664 <ACE_PPE_Flag31_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag31_IRQHandler( void )
#else
void ACE_PPE_Flag31_IRQHandler( void )
#endif
{
20003664:	4668      	mov	r0, sp
20003666:	f020 0107 	bic.w	r1, r0, #7
2000366a:	468d      	mov	sp, r1
2000366c:	b401      	push	{r0}
2000366e:	f24e 1300 	movw	r3, #57600	; 0xe100
20003672:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003676:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
2000367a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    process_flag_irq( THRESHOLD_FLAG31 );
    NVIC_ClearPendingIRQ( ACE_PPE_Flag31_IRQn );
}
2000367e:	bc01      	pop	{r0}
20003680:	4685      	mov	sp, r0
20003682:	4770      	bx	lr

20003684 <__aeabi_drsub>:
20003684:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
20003688:	e002      	b.n	20003690 <__adddf3>
2000368a:	bf00      	nop

2000368c <__aeabi_dsub>:
2000368c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

20003690 <__adddf3>:
20003690:	b530      	push	{r4, r5, lr}
20003692:	ea4f 0441 	mov.w	r4, r1, lsl #1
20003696:	ea4f 0543 	mov.w	r5, r3, lsl #1
2000369a:	ea94 0f05 	teq	r4, r5
2000369e:	bf08      	it	eq
200036a0:	ea90 0f02 	teqeq	r0, r2
200036a4:	bf1f      	itttt	ne
200036a6:	ea54 0c00 	orrsne.w	ip, r4, r0
200036aa:	ea55 0c02 	orrsne.w	ip, r5, r2
200036ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
200036b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
200036b6:	f000 80e2 	beq.w	2000387e <__adddf3+0x1ee>
200036ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
200036be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
200036c2:	bfb8      	it	lt
200036c4:	426d      	neglt	r5, r5
200036c6:	dd0c      	ble.n	200036e2 <__adddf3+0x52>
200036c8:	442c      	add	r4, r5
200036ca:	ea80 0202 	eor.w	r2, r0, r2
200036ce:	ea81 0303 	eor.w	r3, r1, r3
200036d2:	ea82 0000 	eor.w	r0, r2, r0
200036d6:	ea83 0101 	eor.w	r1, r3, r1
200036da:	ea80 0202 	eor.w	r2, r0, r2
200036de:	ea81 0303 	eor.w	r3, r1, r3
200036e2:	2d36      	cmp	r5, #54	; 0x36
200036e4:	bf88      	it	hi
200036e6:	bd30      	pophi	{r4, r5, pc}
200036e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
200036ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
200036f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
200036f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
200036f8:	d002      	beq.n	20003700 <__adddf3+0x70>
200036fa:	4240      	negs	r0, r0
200036fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
20003700:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
20003704:	ea4f 3303 	mov.w	r3, r3, lsl #12
20003708:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
2000370c:	d002      	beq.n	20003714 <__adddf3+0x84>
2000370e:	4252      	negs	r2, r2
20003710:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
20003714:	ea94 0f05 	teq	r4, r5
20003718:	f000 80a7 	beq.w	2000386a <__adddf3+0x1da>
2000371c:	f1a4 0401 	sub.w	r4, r4, #1
20003720:	f1d5 0e20 	rsbs	lr, r5, #32
20003724:	db0d      	blt.n	20003742 <__adddf3+0xb2>
20003726:	fa02 fc0e 	lsl.w	ip, r2, lr
2000372a:	fa22 f205 	lsr.w	r2, r2, r5
2000372e:	1880      	adds	r0, r0, r2
20003730:	f141 0100 	adc.w	r1, r1, #0
20003734:	fa03 f20e 	lsl.w	r2, r3, lr
20003738:	1880      	adds	r0, r0, r2
2000373a:	fa43 f305 	asr.w	r3, r3, r5
2000373e:	4159      	adcs	r1, r3
20003740:	e00e      	b.n	20003760 <__adddf3+0xd0>
20003742:	f1a5 0520 	sub.w	r5, r5, #32
20003746:	f10e 0e20 	add.w	lr, lr, #32
2000374a:	2a01      	cmp	r2, #1
2000374c:	fa03 fc0e 	lsl.w	ip, r3, lr
20003750:	bf28      	it	cs
20003752:	f04c 0c02 	orrcs.w	ip, ip, #2
20003756:	fa43 f305 	asr.w	r3, r3, r5
2000375a:	18c0      	adds	r0, r0, r3
2000375c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
20003760:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
20003764:	d507      	bpl.n	20003776 <__adddf3+0xe6>
20003766:	f04f 0e00 	mov.w	lr, #0
2000376a:	f1dc 0c00 	rsbs	ip, ip, #0
2000376e:	eb7e 0000 	sbcs.w	r0, lr, r0
20003772:	eb6e 0101 	sbc.w	r1, lr, r1
20003776:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
2000377a:	d31b      	bcc.n	200037b4 <__adddf3+0x124>
2000377c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
20003780:	d30c      	bcc.n	2000379c <__adddf3+0x10c>
20003782:	0849      	lsrs	r1, r1, #1
20003784:	ea5f 0030 	movs.w	r0, r0, rrx
20003788:	ea4f 0c3c 	mov.w	ip, ip, rrx
2000378c:	f104 0401 	add.w	r4, r4, #1
20003790:	ea4f 5244 	mov.w	r2, r4, lsl #21
20003794:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
20003798:	f080 809a 	bcs.w	200038d0 <__adddf3+0x240>
2000379c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
200037a0:	bf08      	it	eq
200037a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
200037a6:	f150 0000 	adcs.w	r0, r0, #0
200037aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
200037ae:	ea41 0105 	orr.w	r1, r1, r5
200037b2:	bd30      	pop	{r4, r5, pc}
200037b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
200037b8:	4140      	adcs	r0, r0
200037ba:	eb41 0101 	adc.w	r1, r1, r1
200037be:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
200037c2:	f1a4 0401 	sub.w	r4, r4, #1
200037c6:	d1e9      	bne.n	2000379c <__adddf3+0x10c>
200037c8:	f091 0f00 	teq	r1, #0
200037cc:	bf04      	itt	eq
200037ce:	4601      	moveq	r1, r0
200037d0:	2000      	moveq	r0, #0
200037d2:	fab1 f381 	clz	r3, r1
200037d6:	bf08      	it	eq
200037d8:	3320      	addeq	r3, #32
200037da:	f1a3 030b 	sub.w	r3, r3, #11
200037de:	f1b3 0220 	subs.w	r2, r3, #32
200037e2:	da0c      	bge.n	200037fe <__adddf3+0x16e>
200037e4:	320c      	adds	r2, #12
200037e6:	dd08      	ble.n	200037fa <__adddf3+0x16a>
200037e8:	f102 0c14 	add.w	ip, r2, #20
200037ec:	f1c2 020c 	rsb	r2, r2, #12
200037f0:	fa01 f00c 	lsl.w	r0, r1, ip
200037f4:	fa21 f102 	lsr.w	r1, r1, r2
200037f8:	e00c      	b.n	20003814 <__adddf3+0x184>
200037fa:	f102 0214 	add.w	r2, r2, #20
200037fe:	bfd8      	it	le
20003800:	f1c2 0c20 	rsble	ip, r2, #32
20003804:	fa01 f102 	lsl.w	r1, r1, r2
20003808:	fa20 fc0c 	lsr.w	ip, r0, ip
2000380c:	bfdc      	itt	le
2000380e:	ea41 010c 	orrle.w	r1, r1, ip
20003812:	4090      	lslle	r0, r2
20003814:	1ae4      	subs	r4, r4, r3
20003816:	bfa2      	ittt	ge
20003818:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
2000381c:	4329      	orrge	r1, r5
2000381e:	bd30      	popge	{r4, r5, pc}
20003820:	ea6f 0404 	mvn.w	r4, r4
20003824:	3c1f      	subs	r4, #31
20003826:	da1c      	bge.n	20003862 <__adddf3+0x1d2>
20003828:	340c      	adds	r4, #12
2000382a:	dc0e      	bgt.n	2000384a <__adddf3+0x1ba>
2000382c:	f104 0414 	add.w	r4, r4, #20
20003830:	f1c4 0220 	rsb	r2, r4, #32
20003834:	fa20 f004 	lsr.w	r0, r0, r4
20003838:	fa01 f302 	lsl.w	r3, r1, r2
2000383c:	ea40 0003 	orr.w	r0, r0, r3
20003840:	fa21 f304 	lsr.w	r3, r1, r4
20003844:	ea45 0103 	orr.w	r1, r5, r3
20003848:	bd30      	pop	{r4, r5, pc}
2000384a:	f1c4 040c 	rsb	r4, r4, #12
2000384e:	f1c4 0220 	rsb	r2, r4, #32
20003852:	fa20 f002 	lsr.w	r0, r0, r2
20003856:	fa01 f304 	lsl.w	r3, r1, r4
2000385a:	ea40 0003 	orr.w	r0, r0, r3
2000385e:	4629      	mov	r1, r5
20003860:	bd30      	pop	{r4, r5, pc}
20003862:	fa21 f004 	lsr.w	r0, r1, r4
20003866:	4629      	mov	r1, r5
20003868:	bd30      	pop	{r4, r5, pc}
2000386a:	f094 0f00 	teq	r4, #0
2000386e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
20003872:	bf06      	itte	eq
20003874:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
20003878:	3401      	addeq	r4, #1
2000387a:	3d01      	subne	r5, #1
2000387c:	e74e      	b.n	2000371c <__adddf3+0x8c>
2000387e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
20003882:	bf18      	it	ne
20003884:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
20003888:	d029      	beq.n	200038de <__adddf3+0x24e>
2000388a:	ea94 0f05 	teq	r4, r5
2000388e:	bf08      	it	eq
20003890:	ea90 0f02 	teqeq	r0, r2
20003894:	d005      	beq.n	200038a2 <__adddf3+0x212>
20003896:	ea54 0c00 	orrs.w	ip, r4, r0
2000389a:	bf04      	itt	eq
2000389c:	4619      	moveq	r1, r3
2000389e:	4610      	moveq	r0, r2
200038a0:	bd30      	pop	{r4, r5, pc}
200038a2:	ea91 0f03 	teq	r1, r3
200038a6:	bf1e      	ittt	ne
200038a8:	2100      	movne	r1, #0
200038aa:	2000      	movne	r0, #0
200038ac:	bd30      	popne	{r4, r5, pc}
200038ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
200038b2:	d105      	bne.n	200038c0 <__adddf3+0x230>
200038b4:	0040      	lsls	r0, r0, #1
200038b6:	4149      	adcs	r1, r1
200038b8:	bf28      	it	cs
200038ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
200038be:	bd30      	pop	{r4, r5, pc}
200038c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
200038c4:	bf3c      	itt	cc
200038c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
200038ca:	bd30      	popcc	{r4, r5, pc}
200038cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
200038d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
200038d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
200038d8:	f04f 0000 	mov.w	r0, #0
200038dc:	bd30      	pop	{r4, r5, pc}
200038de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
200038e2:	bf1a      	itte	ne
200038e4:	4619      	movne	r1, r3
200038e6:	4610      	movne	r0, r2
200038e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
200038ec:	bf1c      	itt	ne
200038ee:	460b      	movne	r3, r1
200038f0:	4602      	movne	r2, r0
200038f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
200038f6:	bf06      	itte	eq
200038f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
200038fc:	ea91 0f03 	teqeq	r1, r3
20003900:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
20003904:	bd30      	pop	{r4, r5, pc}
20003906:	bf00      	nop

20003908 <__aeabi_ui2d>:
20003908:	f090 0f00 	teq	r0, #0
2000390c:	bf04      	itt	eq
2000390e:	2100      	moveq	r1, #0
20003910:	4770      	bxeq	lr
20003912:	b530      	push	{r4, r5, lr}
20003914:	f44f 6480 	mov.w	r4, #1024	; 0x400
20003918:	f104 0432 	add.w	r4, r4, #50	; 0x32
2000391c:	f04f 0500 	mov.w	r5, #0
20003920:	f04f 0100 	mov.w	r1, #0
20003924:	e750      	b.n	200037c8 <__adddf3+0x138>
20003926:	bf00      	nop

20003928 <__aeabi_i2d>:
20003928:	f090 0f00 	teq	r0, #0
2000392c:	bf04      	itt	eq
2000392e:	2100      	moveq	r1, #0
20003930:	4770      	bxeq	lr
20003932:	b530      	push	{r4, r5, lr}
20003934:	f44f 6480 	mov.w	r4, #1024	; 0x400
20003938:	f104 0432 	add.w	r4, r4, #50	; 0x32
2000393c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
20003940:	bf48      	it	mi
20003942:	4240      	negmi	r0, r0
20003944:	f04f 0100 	mov.w	r1, #0
20003948:	e73e      	b.n	200037c8 <__adddf3+0x138>
2000394a:	bf00      	nop

2000394c <__aeabi_f2d>:
2000394c:	0042      	lsls	r2, r0, #1
2000394e:	ea4f 01e2 	mov.w	r1, r2, asr #3
20003952:	ea4f 0131 	mov.w	r1, r1, rrx
20003956:	ea4f 7002 	mov.w	r0, r2, lsl #28
2000395a:	bf1f      	itttt	ne
2000395c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
20003960:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
20003964:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
20003968:	4770      	bxne	lr
2000396a:	f092 0f00 	teq	r2, #0
2000396e:	bf14      	ite	ne
20003970:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
20003974:	4770      	bxeq	lr
20003976:	b530      	push	{r4, r5, lr}
20003978:	f44f 7460 	mov.w	r4, #896	; 0x380
2000397c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
20003980:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
20003984:	e720      	b.n	200037c8 <__adddf3+0x138>
20003986:	bf00      	nop

20003988 <__aeabi_ul2d>:
20003988:	ea50 0201 	orrs.w	r2, r0, r1
2000398c:	bf08      	it	eq
2000398e:	4770      	bxeq	lr
20003990:	b530      	push	{r4, r5, lr}
20003992:	f04f 0500 	mov.w	r5, #0
20003996:	e00a      	b.n	200039ae <__aeabi_l2d+0x16>

20003998 <__aeabi_l2d>:
20003998:	ea50 0201 	orrs.w	r2, r0, r1
2000399c:	bf08      	it	eq
2000399e:	4770      	bxeq	lr
200039a0:	b530      	push	{r4, r5, lr}
200039a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
200039a6:	d502      	bpl.n	200039ae <__aeabi_l2d+0x16>
200039a8:	4240      	negs	r0, r0
200039aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
200039ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
200039b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
200039b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
200039ba:	f43f aedc 	beq.w	20003776 <__adddf3+0xe6>
200039be:	f04f 0203 	mov.w	r2, #3
200039c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
200039c6:	bf18      	it	ne
200039c8:	3203      	addne	r2, #3
200039ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
200039ce:	bf18      	it	ne
200039d0:	3203      	addne	r2, #3
200039d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
200039d6:	f1c2 0320 	rsb	r3, r2, #32
200039da:	fa00 fc03 	lsl.w	ip, r0, r3
200039de:	fa20 f002 	lsr.w	r0, r0, r2
200039e2:	fa01 fe03 	lsl.w	lr, r1, r3
200039e6:	ea40 000e 	orr.w	r0, r0, lr
200039ea:	fa21 f102 	lsr.w	r1, r1, r2
200039ee:	4414      	add	r4, r2
200039f0:	e6c1      	b.n	20003776 <__adddf3+0xe6>
200039f2:	bf00      	nop

200039f4 <__aeabi_dmul>:
200039f4:	b570      	push	{r4, r5, r6, lr}
200039f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
200039fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
200039fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
20003a02:	bf1d      	ittte	ne
20003a04:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
20003a08:	ea94 0f0c 	teqne	r4, ip
20003a0c:	ea95 0f0c 	teqne	r5, ip
20003a10:	f000 f8de 	bleq	20003bd0 <__aeabi_dmul+0x1dc>
20003a14:	442c      	add	r4, r5
20003a16:	ea81 0603 	eor.w	r6, r1, r3
20003a1a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
20003a1e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
20003a22:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
20003a26:	bf18      	it	ne
20003a28:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
20003a2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
20003a30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
20003a34:	d038      	beq.n	20003aa8 <__aeabi_dmul+0xb4>
20003a36:	fba0 ce02 	umull	ip, lr, r0, r2
20003a3a:	f04f 0500 	mov.w	r5, #0
20003a3e:	fbe1 e502 	umlal	lr, r5, r1, r2
20003a42:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
20003a46:	fbe0 e503 	umlal	lr, r5, r0, r3
20003a4a:	f04f 0600 	mov.w	r6, #0
20003a4e:	fbe1 5603 	umlal	r5, r6, r1, r3
20003a52:	f09c 0f00 	teq	ip, #0
20003a56:	bf18      	it	ne
20003a58:	f04e 0e01 	orrne.w	lr, lr, #1
20003a5c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
20003a60:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
20003a64:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
20003a68:	d204      	bcs.n	20003a74 <__aeabi_dmul+0x80>
20003a6a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
20003a6e:	416d      	adcs	r5, r5
20003a70:	eb46 0606 	adc.w	r6, r6, r6
20003a74:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
20003a78:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
20003a7c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
20003a80:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
20003a84:	ea4f 2ece 	mov.w	lr, lr, lsl #11
20003a88:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
20003a8c:	bf88      	it	hi
20003a8e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
20003a92:	d81e      	bhi.n	20003ad2 <__aeabi_dmul+0xde>
20003a94:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
20003a98:	bf08      	it	eq
20003a9a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
20003a9e:	f150 0000 	adcs.w	r0, r0, #0
20003aa2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
20003aa6:	bd70      	pop	{r4, r5, r6, pc}
20003aa8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
20003aac:	ea46 0101 	orr.w	r1, r6, r1
20003ab0:	ea40 0002 	orr.w	r0, r0, r2
20003ab4:	ea81 0103 	eor.w	r1, r1, r3
20003ab8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
20003abc:	bfc2      	ittt	gt
20003abe:	ebd4 050c 	rsbsgt	r5, r4, ip
20003ac2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
20003ac6:	bd70      	popgt	{r4, r5, r6, pc}
20003ac8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
20003acc:	f04f 0e00 	mov.w	lr, #0
20003ad0:	3c01      	subs	r4, #1
20003ad2:	f300 80ab 	bgt.w	20003c2c <__aeabi_dmul+0x238>
20003ad6:	f114 0f36 	cmn.w	r4, #54	; 0x36
20003ada:	bfde      	ittt	le
20003adc:	2000      	movle	r0, #0
20003ade:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
20003ae2:	bd70      	pople	{r4, r5, r6, pc}
20003ae4:	f1c4 0400 	rsb	r4, r4, #0
20003ae8:	3c20      	subs	r4, #32
20003aea:	da35      	bge.n	20003b58 <__aeabi_dmul+0x164>
20003aec:	340c      	adds	r4, #12
20003aee:	dc1b      	bgt.n	20003b28 <__aeabi_dmul+0x134>
20003af0:	f104 0414 	add.w	r4, r4, #20
20003af4:	f1c4 0520 	rsb	r5, r4, #32
20003af8:	fa00 f305 	lsl.w	r3, r0, r5
20003afc:	fa20 f004 	lsr.w	r0, r0, r4
20003b00:	fa01 f205 	lsl.w	r2, r1, r5
20003b04:	ea40 0002 	orr.w	r0, r0, r2
20003b08:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
20003b0c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
20003b10:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
20003b14:	fa21 f604 	lsr.w	r6, r1, r4
20003b18:	eb42 0106 	adc.w	r1, r2, r6
20003b1c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
20003b20:	bf08      	it	eq
20003b22:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
20003b26:	bd70      	pop	{r4, r5, r6, pc}
20003b28:	f1c4 040c 	rsb	r4, r4, #12
20003b2c:	f1c4 0520 	rsb	r5, r4, #32
20003b30:	fa00 f304 	lsl.w	r3, r0, r4
20003b34:	fa20 f005 	lsr.w	r0, r0, r5
20003b38:	fa01 f204 	lsl.w	r2, r1, r4
20003b3c:	ea40 0002 	orr.w	r0, r0, r2
20003b40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
20003b44:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
20003b48:	f141 0100 	adc.w	r1, r1, #0
20003b4c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
20003b50:	bf08      	it	eq
20003b52:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
20003b56:	bd70      	pop	{r4, r5, r6, pc}
20003b58:	f1c4 0520 	rsb	r5, r4, #32
20003b5c:	fa00 f205 	lsl.w	r2, r0, r5
20003b60:	ea4e 0e02 	orr.w	lr, lr, r2
20003b64:	fa20 f304 	lsr.w	r3, r0, r4
20003b68:	fa01 f205 	lsl.w	r2, r1, r5
20003b6c:	ea43 0302 	orr.w	r3, r3, r2
20003b70:	fa21 f004 	lsr.w	r0, r1, r4
20003b74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
20003b78:	fa21 f204 	lsr.w	r2, r1, r4
20003b7c:	ea20 0002 	bic.w	r0, r0, r2
20003b80:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
20003b84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
20003b88:	bf08      	it	eq
20003b8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
20003b8e:	bd70      	pop	{r4, r5, r6, pc}
20003b90:	f094 0f00 	teq	r4, #0
20003b94:	d10f      	bne.n	20003bb6 <__aeabi_dmul+0x1c2>
20003b96:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
20003b9a:	0040      	lsls	r0, r0, #1
20003b9c:	eb41 0101 	adc.w	r1, r1, r1
20003ba0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
20003ba4:	bf08      	it	eq
20003ba6:	3c01      	subeq	r4, #1
20003ba8:	d0f7      	beq.n	20003b9a <__aeabi_dmul+0x1a6>
20003baa:	ea41 0106 	orr.w	r1, r1, r6
20003bae:	f095 0f00 	teq	r5, #0
20003bb2:	bf18      	it	ne
20003bb4:	4770      	bxne	lr
20003bb6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
20003bba:	0052      	lsls	r2, r2, #1
20003bbc:	eb43 0303 	adc.w	r3, r3, r3
20003bc0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
20003bc4:	bf08      	it	eq
20003bc6:	3d01      	subeq	r5, #1
20003bc8:	d0f7      	beq.n	20003bba <__aeabi_dmul+0x1c6>
20003bca:	ea43 0306 	orr.w	r3, r3, r6
20003bce:	4770      	bx	lr
20003bd0:	ea94 0f0c 	teq	r4, ip
20003bd4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
20003bd8:	bf18      	it	ne
20003bda:	ea95 0f0c 	teqne	r5, ip
20003bde:	d00c      	beq.n	20003bfa <__aeabi_dmul+0x206>
20003be0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
20003be4:	bf18      	it	ne
20003be6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
20003bea:	d1d1      	bne.n	20003b90 <__aeabi_dmul+0x19c>
20003bec:	ea81 0103 	eor.w	r1, r1, r3
20003bf0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
20003bf4:	f04f 0000 	mov.w	r0, #0
20003bf8:	bd70      	pop	{r4, r5, r6, pc}
20003bfa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
20003bfe:	bf06      	itte	eq
20003c00:	4610      	moveq	r0, r2
20003c02:	4619      	moveq	r1, r3
20003c04:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
20003c08:	d019      	beq.n	20003c3e <__aeabi_dmul+0x24a>
20003c0a:	ea94 0f0c 	teq	r4, ip
20003c0e:	d102      	bne.n	20003c16 <__aeabi_dmul+0x222>
20003c10:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
20003c14:	d113      	bne.n	20003c3e <__aeabi_dmul+0x24a>
20003c16:	ea95 0f0c 	teq	r5, ip
20003c1a:	d105      	bne.n	20003c28 <__aeabi_dmul+0x234>
20003c1c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
20003c20:	bf1c      	itt	ne
20003c22:	4610      	movne	r0, r2
20003c24:	4619      	movne	r1, r3
20003c26:	d10a      	bne.n	20003c3e <__aeabi_dmul+0x24a>
20003c28:	ea81 0103 	eor.w	r1, r1, r3
20003c2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
20003c30:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
20003c34:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
20003c38:	f04f 0000 	mov.w	r0, #0
20003c3c:	bd70      	pop	{r4, r5, r6, pc}
20003c3e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
20003c42:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
20003c46:	bd70      	pop	{r4, r5, r6, pc}

20003c48 <__aeabi_ddiv>:
20003c48:	b570      	push	{r4, r5, r6, lr}
20003c4a:	f04f 0cff 	mov.w	ip, #255	; 0xff
20003c4e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
20003c52:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
20003c56:	bf1d      	ittte	ne
20003c58:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
20003c5c:	ea94 0f0c 	teqne	r4, ip
20003c60:	ea95 0f0c 	teqne	r5, ip
20003c64:	f000 f8a7 	bleq	20003db6 <__aeabi_ddiv+0x16e>
20003c68:	eba4 0405 	sub.w	r4, r4, r5
20003c6c:	ea81 0e03 	eor.w	lr, r1, r3
20003c70:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
20003c74:	ea4f 3101 	mov.w	r1, r1, lsl #12
20003c78:	f000 8088 	beq.w	20003d8c <__aeabi_ddiv+0x144>
20003c7c:	ea4f 3303 	mov.w	r3, r3, lsl #12
20003c80:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
20003c84:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
20003c88:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
20003c8c:	ea4f 2202 	mov.w	r2, r2, lsl #8
20003c90:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
20003c94:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
20003c98:	ea4f 2600 	mov.w	r6, r0, lsl #8
20003c9c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
20003ca0:	429d      	cmp	r5, r3
20003ca2:	bf08      	it	eq
20003ca4:	4296      	cmpeq	r6, r2
20003ca6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
20003caa:	f504 7440 	add.w	r4, r4, #768	; 0x300
20003cae:	d202      	bcs.n	20003cb6 <__aeabi_ddiv+0x6e>
20003cb0:	085b      	lsrs	r3, r3, #1
20003cb2:	ea4f 0232 	mov.w	r2, r2, rrx
20003cb6:	1ab6      	subs	r6, r6, r2
20003cb8:	eb65 0503 	sbc.w	r5, r5, r3
20003cbc:	085b      	lsrs	r3, r3, #1
20003cbe:	ea4f 0232 	mov.w	r2, r2, rrx
20003cc2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
20003cc6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
20003cca:	ebb6 0e02 	subs.w	lr, r6, r2
20003cce:	eb75 0e03 	sbcs.w	lr, r5, r3
20003cd2:	bf22      	ittt	cs
20003cd4:	1ab6      	subcs	r6, r6, r2
20003cd6:	4675      	movcs	r5, lr
20003cd8:	ea40 000c 	orrcs.w	r0, r0, ip
20003cdc:	085b      	lsrs	r3, r3, #1
20003cde:	ea4f 0232 	mov.w	r2, r2, rrx
20003ce2:	ebb6 0e02 	subs.w	lr, r6, r2
20003ce6:	eb75 0e03 	sbcs.w	lr, r5, r3
20003cea:	bf22      	ittt	cs
20003cec:	1ab6      	subcs	r6, r6, r2
20003cee:	4675      	movcs	r5, lr
20003cf0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
20003cf4:	085b      	lsrs	r3, r3, #1
20003cf6:	ea4f 0232 	mov.w	r2, r2, rrx
20003cfa:	ebb6 0e02 	subs.w	lr, r6, r2
20003cfe:	eb75 0e03 	sbcs.w	lr, r5, r3
20003d02:	bf22      	ittt	cs
20003d04:	1ab6      	subcs	r6, r6, r2
20003d06:	4675      	movcs	r5, lr
20003d08:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
20003d0c:	085b      	lsrs	r3, r3, #1
20003d0e:	ea4f 0232 	mov.w	r2, r2, rrx
20003d12:	ebb6 0e02 	subs.w	lr, r6, r2
20003d16:	eb75 0e03 	sbcs.w	lr, r5, r3
20003d1a:	bf22      	ittt	cs
20003d1c:	1ab6      	subcs	r6, r6, r2
20003d1e:	4675      	movcs	r5, lr
20003d20:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
20003d24:	ea55 0e06 	orrs.w	lr, r5, r6
20003d28:	d018      	beq.n	20003d5c <__aeabi_ddiv+0x114>
20003d2a:	ea4f 1505 	mov.w	r5, r5, lsl #4
20003d2e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
20003d32:	ea4f 1606 	mov.w	r6, r6, lsl #4
20003d36:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20003d3a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
20003d3e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
20003d42:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
20003d46:	d1c0      	bne.n	20003cca <__aeabi_ddiv+0x82>
20003d48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
20003d4c:	d10b      	bne.n	20003d66 <__aeabi_ddiv+0x11e>
20003d4e:	ea41 0100 	orr.w	r1, r1, r0
20003d52:	f04f 0000 	mov.w	r0, #0
20003d56:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
20003d5a:	e7b6      	b.n	20003cca <__aeabi_ddiv+0x82>
20003d5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
20003d60:	bf04      	itt	eq
20003d62:	4301      	orreq	r1, r0
20003d64:	2000      	moveq	r0, #0
20003d66:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
20003d6a:	bf88      	it	hi
20003d6c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
20003d70:	f63f aeaf 	bhi.w	20003ad2 <__aeabi_dmul+0xde>
20003d74:	ebb5 0c03 	subs.w	ip, r5, r3
20003d78:	bf04      	itt	eq
20003d7a:	ebb6 0c02 	subseq.w	ip, r6, r2
20003d7e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
20003d82:	f150 0000 	adcs.w	r0, r0, #0
20003d86:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
20003d8a:	bd70      	pop	{r4, r5, r6, pc}
20003d8c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
20003d90:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
20003d94:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
20003d98:	bfc2      	ittt	gt
20003d9a:	ebd4 050c 	rsbsgt	r5, r4, ip
20003d9e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
20003da2:	bd70      	popgt	{r4, r5, r6, pc}
20003da4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
20003da8:	f04f 0e00 	mov.w	lr, #0
20003dac:	3c01      	subs	r4, #1
20003dae:	e690      	b.n	20003ad2 <__aeabi_dmul+0xde>
20003db0:	ea45 0e06 	orr.w	lr, r5, r6
20003db4:	e68d      	b.n	20003ad2 <__aeabi_dmul+0xde>
20003db6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
20003dba:	ea94 0f0c 	teq	r4, ip
20003dbe:	bf08      	it	eq
20003dc0:	ea95 0f0c 	teqeq	r5, ip
20003dc4:	f43f af3b 	beq.w	20003c3e <__aeabi_dmul+0x24a>
20003dc8:	ea94 0f0c 	teq	r4, ip
20003dcc:	d10a      	bne.n	20003de4 <__aeabi_ddiv+0x19c>
20003dce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
20003dd2:	f47f af34 	bne.w	20003c3e <__aeabi_dmul+0x24a>
20003dd6:	ea95 0f0c 	teq	r5, ip
20003dda:	f47f af25 	bne.w	20003c28 <__aeabi_dmul+0x234>
20003dde:	4610      	mov	r0, r2
20003de0:	4619      	mov	r1, r3
20003de2:	e72c      	b.n	20003c3e <__aeabi_dmul+0x24a>
20003de4:	ea95 0f0c 	teq	r5, ip
20003de8:	d106      	bne.n	20003df8 <__aeabi_ddiv+0x1b0>
20003dea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
20003dee:	f43f aefd 	beq.w	20003bec <__aeabi_dmul+0x1f8>
20003df2:	4610      	mov	r0, r2
20003df4:	4619      	mov	r1, r3
20003df6:	e722      	b.n	20003c3e <__aeabi_dmul+0x24a>
20003df8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
20003dfc:	bf18      	it	ne
20003dfe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
20003e02:	f47f aec5 	bne.w	20003b90 <__aeabi_dmul+0x19c>
20003e06:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
20003e0a:	f47f af0d 	bne.w	20003c28 <__aeabi_dmul+0x234>
20003e0e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
20003e12:	f47f aeeb 	bne.w	20003bec <__aeabi_dmul+0x1f8>
20003e16:	e712      	b.n	20003c3e <__aeabi_dmul+0x24a>

20003e18 <__aeabi_d2f>:
20003e18:	ea4f 0241 	mov.w	r2, r1, lsl #1
20003e1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
20003e20:	bf24      	itt	cs
20003e22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
20003e26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
20003e2a:	d90d      	bls.n	20003e48 <__aeabi_d2f+0x30>
20003e2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
20003e30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
20003e34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
20003e38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
20003e3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
20003e40:	bf08      	it	eq
20003e42:	f020 0001 	biceq.w	r0, r0, #1
20003e46:	4770      	bx	lr
20003e48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
20003e4c:	d121      	bne.n	20003e92 <__aeabi_d2f+0x7a>
20003e4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
20003e52:	bfbc      	itt	lt
20003e54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
20003e58:	4770      	bxlt	lr
20003e5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
20003e5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
20003e62:	f1c2 0218 	rsb	r2, r2, #24
20003e66:	f1c2 0c20 	rsb	ip, r2, #32
20003e6a:	fa10 f30c 	lsls.w	r3, r0, ip
20003e6e:	fa20 f002 	lsr.w	r0, r0, r2
20003e72:	bf18      	it	ne
20003e74:	f040 0001 	orrne.w	r0, r0, #1
20003e78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
20003e7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
20003e80:	fa03 fc0c 	lsl.w	ip, r3, ip
20003e84:	ea40 000c 	orr.w	r0, r0, ip
20003e88:	fa23 f302 	lsr.w	r3, r3, r2
20003e8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
20003e90:	e7cc      	b.n	20003e2c <__aeabi_d2f+0x14>
20003e92:	ea7f 5362 	mvns.w	r3, r2, asr #21
20003e96:	d107      	bne.n	20003ea8 <__aeabi_d2f+0x90>
20003e98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
20003e9c:	bf1e      	ittt	ne
20003e9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
20003ea2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
20003ea6:	4770      	bxne	lr
20003ea8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
20003eac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
20003eb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
20003eb4:	4770      	bx	lr
20003eb6:	bf00      	nop

20003eb8 <__aeabi_fmul>:
20003eb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
20003ebc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
20003ec0:	bf1e      	ittt	ne
20003ec2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
20003ec6:	ea92 0f0c 	teqne	r2, ip
20003eca:	ea93 0f0c 	teqne	r3, ip
20003ece:	d06f      	beq.n	20003fb0 <__aeabi_fmul+0xf8>
20003ed0:	441a      	add	r2, r3
20003ed2:	ea80 0c01 	eor.w	ip, r0, r1
20003ed6:	0240      	lsls	r0, r0, #9
20003ed8:	bf18      	it	ne
20003eda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
20003ede:	d01e      	beq.n	20003f1e <__aeabi_fmul+0x66>
20003ee0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
20003ee4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
20003ee8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
20003eec:	fba0 3101 	umull	r3, r1, r0, r1
20003ef0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
20003ef4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
20003ef8:	bf3e      	ittt	cc
20003efa:	0049      	lslcc	r1, r1, #1
20003efc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
20003f00:	005b      	lslcc	r3, r3, #1
20003f02:	ea40 0001 	orr.w	r0, r0, r1
20003f06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
20003f0a:	2afd      	cmp	r2, #253	; 0xfd
20003f0c:	d81d      	bhi.n	20003f4a <__aeabi_fmul+0x92>
20003f0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
20003f12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
20003f16:	bf08      	it	eq
20003f18:	f020 0001 	biceq.w	r0, r0, #1
20003f1c:	4770      	bx	lr
20003f1e:	f090 0f00 	teq	r0, #0
20003f22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
20003f26:	bf08      	it	eq
20003f28:	0249      	lsleq	r1, r1, #9
20003f2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
20003f2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
20003f32:	3a7f      	subs	r2, #127	; 0x7f
20003f34:	bfc2      	ittt	gt
20003f36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
20003f3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
20003f3e:	4770      	bxgt	lr
20003f40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
20003f44:	f04f 0300 	mov.w	r3, #0
20003f48:	3a01      	subs	r2, #1
20003f4a:	dc5d      	bgt.n	20004008 <__aeabi_fmul+0x150>
20003f4c:	f112 0f19 	cmn.w	r2, #25
20003f50:	bfdc      	itt	le
20003f52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
20003f56:	4770      	bxle	lr
20003f58:	f1c2 0200 	rsb	r2, r2, #0
20003f5c:	0041      	lsls	r1, r0, #1
20003f5e:	fa21 f102 	lsr.w	r1, r1, r2
20003f62:	f1c2 0220 	rsb	r2, r2, #32
20003f66:	fa00 fc02 	lsl.w	ip, r0, r2
20003f6a:	ea5f 0031 	movs.w	r0, r1, rrx
20003f6e:	f140 0000 	adc.w	r0, r0, #0
20003f72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
20003f76:	bf08      	it	eq
20003f78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
20003f7c:	4770      	bx	lr
20003f7e:	f092 0f00 	teq	r2, #0
20003f82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
20003f86:	bf02      	ittt	eq
20003f88:	0040      	lsleq	r0, r0, #1
20003f8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
20003f8e:	3a01      	subeq	r2, #1
20003f90:	d0f9      	beq.n	20003f86 <__aeabi_fmul+0xce>
20003f92:	ea40 000c 	orr.w	r0, r0, ip
20003f96:	f093 0f00 	teq	r3, #0
20003f9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
20003f9e:	bf02      	ittt	eq
20003fa0:	0049      	lsleq	r1, r1, #1
20003fa2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
20003fa6:	3b01      	subeq	r3, #1
20003fa8:	d0f9      	beq.n	20003f9e <__aeabi_fmul+0xe6>
20003faa:	ea41 010c 	orr.w	r1, r1, ip
20003fae:	e78f      	b.n	20003ed0 <__aeabi_fmul+0x18>
20003fb0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
20003fb4:	ea92 0f0c 	teq	r2, ip
20003fb8:	bf18      	it	ne
20003fba:	ea93 0f0c 	teqne	r3, ip
20003fbe:	d00a      	beq.n	20003fd6 <__aeabi_fmul+0x11e>
20003fc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
20003fc4:	bf18      	it	ne
20003fc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
20003fca:	d1d8      	bne.n	20003f7e <__aeabi_fmul+0xc6>
20003fcc:	ea80 0001 	eor.w	r0, r0, r1
20003fd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
20003fd4:	4770      	bx	lr
20003fd6:	f090 0f00 	teq	r0, #0
20003fda:	bf17      	itett	ne
20003fdc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
20003fe0:	4608      	moveq	r0, r1
20003fe2:	f091 0f00 	teqne	r1, #0
20003fe6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
20003fea:	d014      	beq.n	20004016 <__aeabi_fmul+0x15e>
20003fec:	ea92 0f0c 	teq	r2, ip
20003ff0:	d101      	bne.n	20003ff6 <__aeabi_fmul+0x13e>
20003ff2:	0242      	lsls	r2, r0, #9
20003ff4:	d10f      	bne.n	20004016 <__aeabi_fmul+0x15e>
20003ff6:	ea93 0f0c 	teq	r3, ip
20003ffa:	d103      	bne.n	20004004 <__aeabi_fmul+0x14c>
20003ffc:	024b      	lsls	r3, r1, #9
20003ffe:	bf18      	it	ne
20004000:	4608      	movne	r0, r1
20004002:	d108      	bne.n	20004016 <__aeabi_fmul+0x15e>
20004004:	ea80 0001 	eor.w	r0, r0, r1
20004008:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
2000400c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
20004010:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
20004014:	4770      	bx	lr
20004016:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
2000401a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
2000401e:	4770      	bx	lr

20004020 <__aeabi_fdiv>:
20004020:	f04f 0cff 	mov.w	ip, #255	; 0xff
20004024:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
20004028:	bf1e      	ittt	ne
2000402a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
2000402e:	ea92 0f0c 	teqne	r2, ip
20004032:	ea93 0f0c 	teqne	r3, ip
20004036:	d069      	beq.n	2000410c <__aeabi_fdiv+0xec>
20004038:	eba2 0203 	sub.w	r2, r2, r3
2000403c:	ea80 0c01 	eor.w	ip, r0, r1
20004040:	0249      	lsls	r1, r1, #9
20004042:	ea4f 2040 	mov.w	r0, r0, lsl #9
20004046:	d037      	beq.n	200040b8 <__aeabi_fdiv+0x98>
20004048:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
2000404c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
20004050:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
20004054:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
20004058:	428b      	cmp	r3, r1
2000405a:	bf38      	it	cc
2000405c:	005b      	lslcc	r3, r3, #1
2000405e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
20004062:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
20004066:	428b      	cmp	r3, r1
20004068:	bf24      	itt	cs
2000406a:	1a5b      	subcs	r3, r3, r1
2000406c:	ea40 000c 	orrcs.w	r0, r0, ip
20004070:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
20004074:	bf24      	itt	cs
20004076:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
2000407a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
2000407e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
20004082:	bf24      	itt	cs
20004084:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
20004088:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
2000408c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
20004090:	bf24      	itt	cs
20004092:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
20004096:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
2000409a:	011b      	lsls	r3, r3, #4
2000409c:	bf18      	it	ne
2000409e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
200040a2:	d1e0      	bne.n	20004066 <__aeabi_fdiv+0x46>
200040a4:	2afd      	cmp	r2, #253	; 0xfd
200040a6:	f63f af50 	bhi.w	20003f4a <__aeabi_fmul+0x92>
200040aa:	428b      	cmp	r3, r1
200040ac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
200040b0:	bf08      	it	eq
200040b2:	f020 0001 	biceq.w	r0, r0, #1
200040b6:	4770      	bx	lr
200040b8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
200040bc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
200040c0:	327f      	adds	r2, #127	; 0x7f
200040c2:	bfc2      	ittt	gt
200040c4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
200040c8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
200040cc:	4770      	bxgt	lr
200040ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
200040d2:	f04f 0300 	mov.w	r3, #0
200040d6:	3a01      	subs	r2, #1
200040d8:	e737      	b.n	20003f4a <__aeabi_fmul+0x92>
200040da:	f092 0f00 	teq	r2, #0
200040de:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
200040e2:	bf02      	ittt	eq
200040e4:	0040      	lsleq	r0, r0, #1
200040e6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
200040ea:	3a01      	subeq	r2, #1
200040ec:	d0f9      	beq.n	200040e2 <__aeabi_fdiv+0xc2>
200040ee:	ea40 000c 	orr.w	r0, r0, ip
200040f2:	f093 0f00 	teq	r3, #0
200040f6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
200040fa:	bf02      	ittt	eq
200040fc:	0049      	lsleq	r1, r1, #1
200040fe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
20004102:	3b01      	subeq	r3, #1
20004104:	d0f9      	beq.n	200040fa <__aeabi_fdiv+0xda>
20004106:	ea41 010c 	orr.w	r1, r1, ip
2000410a:	e795      	b.n	20004038 <__aeabi_fdiv+0x18>
2000410c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
20004110:	ea92 0f0c 	teq	r2, ip
20004114:	d108      	bne.n	20004128 <__aeabi_fdiv+0x108>
20004116:	0242      	lsls	r2, r0, #9
20004118:	f47f af7d 	bne.w	20004016 <__aeabi_fmul+0x15e>
2000411c:	ea93 0f0c 	teq	r3, ip
20004120:	f47f af70 	bne.w	20004004 <__aeabi_fmul+0x14c>
20004124:	4608      	mov	r0, r1
20004126:	e776      	b.n	20004016 <__aeabi_fmul+0x15e>
20004128:	ea93 0f0c 	teq	r3, ip
2000412c:	d104      	bne.n	20004138 <__aeabi_fdiv+0x118>
2000412e:	024b      	lsls	r3, r1, #9
20004130:	f43f af4c 	beq.w	20003fcc <__aeabi_fmul+0x114>
20004134:	4608      	mov	r0, r1
20004136:	e76e      	b.n	20004016 <__aeabi_fmul+0x15e>
20004138:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
2000413c:	bf18      	it	ne
2000413e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
20004142:	d1ca      	bne.n	200040da <__aeabi_fdiv+0xba>
20004144:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
20004148:	f47f af5c 	bne.w	20004004 <__aeabi_fmul+0x14c>
2000414c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
20004150:	f47f af3c 	bne.w	20003fcc <__aeabi_fmul+0x114>
20004154:	e75f      	b.n	20004016 <__aeabi_fmul+0x15e>
20004156:	bf00      	nop

20004158 <__aeabi_f2uiz>:
20004158:	0042      	lsls	r2, r0, #1
2000415a:	d20e      	bcs.n	2000417a <__aeabi_f2uiz+0x22>
2000415c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
20004160:	d30b      	bcc.n	2000417a <__aeabi_f2uiz+0x22>
20004162:	f04f 039e 	mov.w	r3, #158	; 0x9e
20004166:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
2000416a:	d409      	bmi.n	20004180 <__aeabi_f2uiz+0x28>
2000416c:	ea4f 2300 	mov.w	r3, r0, lsl #8
20004170:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
20004174:	fa23 f002 	lsr.w	r0, r3, r2
20004178:	4770      	bx	lr
2000417a:	f04f 0000 	mov.w	r0, #0
2000417e:	4770      	bx	lr
20004180:	f112 0f61 	cmn.w	r2, #97	; 0x61
20004184:	d101      	bne.n	2000418a <__aeabi_f2uiz+0x32>
20004186:	0242      	lsls	r2, r0, #9
20004188:	d102      	bne.n	20004190 <__aeabi_f2uiz+0x38>
2000418a:	f04f 30ff 	mov.w	r0, #4294967295
2000418e:	4770      	bx	lr
20004190:	f04f 0000 	mov.w	r0, #0
20004194:	4770      	bx	lr
20004196:	bf00      	nop

20004198 <__libc_init_array>:
20004198:	b570      	push	{r4, r5, r6, lr}
2000419a:	f244 4614 	movw	r6, #17428	; 0x4414
2000419e:	f244 4514 	movw	r5, #17428	; 0x4414
200041a2:	f2c2 0600 	movt	r6, #8192	; 0x2000
200041a6:	f2c2 0500 	movt	r5, #8192	; 0x2000
200041aa:	1b76      	subs	r6, r6, r5
200041ac:	10b6      	asrs	r6, r6, #2
200041ae:	d006      	beq.n	200041be <__libc_init_array+0x26>
200041b0:	2400      	movs	r4, #0
200041b2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
200041b6:	3401      	adds	r4, #1
200041b8:	4798      	blx	r3
200041ba:	42a6      	cmp	r6, r4
200041bc:	d8f9      	bhi.n	200041b2 <__libc_init_array+0x1a>
200041be:	f244 4514 	movw	r5, #17428	; 0x4414
200041c2:	f244 4618 	movw	r6, #17432	; 0x4418
200041c6:	f2c2 0500 	movt	r5, #8192	; 0x2000
200041ca:	f2c2 0600 	movt	r6, #8192	; 0x2000
200041ce:	1b76      	subs	r6, r6, r5
200041d0:	f000 f914 	bl	200043fc <_init>
200041d4:	10b6      	asrs	r6, r6, #2
200041d6:	d006      	beq.n	200041e6 <__libc_init_array+0x4e>
200041d8:	2400      	movs	r4, #0
200041da:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
200041de:	3401      	adds	r4, #1
200041e0:	4798      	blx	r3
200041e2:	42a6      	cmp	r6, r4
200041e4:	d8f9      	bhi.n	200041da <__libc_init_array+0x42>
200041e6:	bd70      	pop	{r4, r5, r6, pc}

200041e8 <memset>:
200041e8:	2a03      	cmp	r2, #3
200041ea:	b2c9      	uxtb	r1, r1
200041ec:	b430      	push	{r4, r5}
200041ee:	d807      	bhi.n	20004200 <memset+0x18>
200041f0:	b122      	cbz	r2, 200041fc <memset+0x14>
200041f2:	2300      	movs	r3, #0
200041f4:	54c1      	strb	r1, [r0, r3]
200041f6:	3301      	adds	r3, #1
200041f8:	4293      	cmp	r3, r2
200041fa:	d1fb      	bne.n	200041f4 <memset+0xc>
200041fc:	bc30      	pop	{r4, r5}
200041fe:	4770      	bx	lr
20004200:	eb00 0c02 	add.w	ip, r0, r2
20004204:	4603      	mov	r3, r0
20004206:	e001      	b.n	2000420c <memset+0x24>
20004208:	f803 1c01 	strb.w	r1, [r3, #-1]
2000420c:	f003 0403 	and.w	r4, r3, #3
20004210:	461a      	mov	r2, r3
20004212:	3301      	adds	r3, #1
20004214:	2c00      	cmp	r4, #0
20004216:	d1f7      	bne.n	20004208 <memset+0x20>
20004218:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
2000421c:	ebc2 040c 	rsb	r4, r2, ip
20004220:	fb03 f301 	mul.w	r3, r3, r1
20004224:	e01f      	b.n	20004266 <memset+0x7e>
20004226:	f842 3c40 	str.w	r3, [r2, #-64]
2000422a:	f842 3c3c 	str.w	r3, [r2, #-60]
2000422e:	f842 3c38 	str.w	r3, [r2, #-56]
20004232:	f842 3c34 	str.w	r3, [r2, #-52]
20004236:	f842 3c30 	str.w	r3, [r2, #-48]
2000423a:	f842 3c2c 	str.w	r3, [r2, #-44]
2000423e:	f842 3c28 	str.w	r3, [r2, #-40]
20004242:	f842 3c24 	str.w	r3, [r2, #-36]
20004246:	f842 3c20 	str.w	r3, [r2, #-32]
2000424a:	f842 3c1c 	str.w	r3, [r2, #-28]
2000424e:	f842 3c18 	str.w	r3, [r2, #-24]
20004252:	f842 3c14 	str.w	r3, [r2, #-20]
20004256:	f842 3c10 	str.w	r3, [r2, #-16]
2000425a:	f842 3c0c 	str.w	r3, [r2, #-12]
2000425e:	f842 3c08 	str.w	r3, [r2, #-8]
20004262:	f842 3c04 	str.w	r3, [r2, #-4]
20004266:	4615      	mov	r5, r2
20004268:	3240      	adds	r2, #64	; 0x40
2000426a:	2c3f      	cmp	r4, #63	; 0x3f
2000426c:	f1a4 0440 	sub.w	r4, r4, #64	; 0x40
20004270:	dcd9      	bgt.n	20004226 <memset+0x3e>
20004272:	462a      	mov	r2, r5
20004274:	ebc5 040c 	rsb	r4, r5, ip
20004278:	e007      	b.n	2000428a <memset+0xa2>
2000427a:	f842 3c10 	str.w	r3, [r2, #-16]
2000427e:	f842 3c0c 	str.w	r3, [r2, #-12]
20004282:	f842 3c08 	str.w	r3, [r2, #-8]
20004286:	f842 3c04 	str.w	r3, [r2, #-4]
2000428a:	4615      	mov	r5, r2
2000428c:	3210      	adds	r2, #16
2000428e:	2c0f      	cmp	r4, #15
20004290:	f1a4 0410 	sub.w	r4, r4, #16
20004294:	dcf1      	bgt.n	2000427a <memset+0x92>
20004296:	462a      	mov	r2, r5
20004298:	ebc5 050c 	rsb	r5, r5, ip
2000429c:	e001      	b.n	200042a2 <memset+0xba>
2000429e:	f842 3c04 	str.w	r3, [r2, #-4]
200042a2:	4614      	mov	r4, r2
200042a4:	3204      	adds	r2, #4
200042a6:	2d03      	cmp	r5, #3
200042a8:	f1a5 0504 	sub.w	r5, r5, #4
200042ac:	dcf7      	bgt.n	2000429e <memset+0xb6>
200042ae:	e001      	b.n	200042b4 <memset+0xcc>
200042b0:	f804 1b01 	strb.w	r1, [r4], #1
200042b4:	4564      	cmp	r4, ip
200042b6:	d3fb      	bcc.n	200042b0 <memset+0xc8>
200042b8:	e7a0      	b.n	200041fc <memset+0x14>
200042ba:	bf00      	nop

200042bc <initcmd>:
200042bc:	03ef 8003 cf02 0003 30c1 04ed 0364 8112     .........0..d...
200042cc:	03e8 0085 cb78 3905 002c 0234 01f7 ea20     ....x..9,.4... .
200042dc:	0002 c000 2301 01c1 c510 3e02 c728 8601     .....#.....>(...
200042ec:	0136 3748 0001 013a b155 0002 b618 0803     6.H7..:.U.......
200042fc:	2782 01f2 2600 0101 0fe0 310f 0c2b 080e     .'...&.....1+...
2000430c:	f14e 0737 0310 090e e100 000f 140e 1103     N.7.............
2000431c:	3107 48c1 0f08 310c 0f36 8011 8029 0000     .1.H...16...)...

2000432c <g_gpio_irqn_lut>:
2000432c:	0020 0021 0022 0023 0024 0025 0026 0027      .!.".#.$.%.&.'.
2000433c:	0028 0029 002a 002b 002c 002d 002e 002f     (.).*.+.,.-.../.
2000434c:	0030 0031 0032 0033 0034 0035 0036 0037     0.1.2.3.4.5.6.7.
2000435c:	0038 0039 003a 003b 003c 003d 003e 003f     8.9.:.;.<.=.>.?.

2000436c <g_config_reg_lut>:
2000436c:	3000 4001 3004 4001 3008 4001 300c 4001     .0.@.0.@.0.@.0.@
2000437c:	3010 4001 3014 4001 3018 4001 301c 4001     .0.@.0.@.0.@.0.@
2000438c:	3020 4001 3024 4001 3028 4001 302c 4001      0.@$0.@(0.@,0.@
2000439c:	3030 4001 3034 4001 3038 4001 303c 4001     00.@40.@80.@<0.@
200043ac:	3040 4001 3044 4001 3048 4001 304c 4001     @0.@D0.@H0.@L0.@
200043bc:	3050 4001 3054 4001 3058 4001 305c 4001     P0.@T0.@X0.@\0.@
200043cc:	3060 4001 3064 4001 3068 4001 306c 4001     `0.@d0.@h0.@l0.@
200043dc:	3070 4001 3074 4001 3078 4001 307c 4001     p0.@t0.@x0.@|0.@

200043ec <C.16.2565>:
200043ec:	0001 0000 0002 0000 0004 0000 0001 0000     ................

200043fc <_init>:
200043fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200043fe:	bf00      	nop
20004400:	bcf8      	pop	{r3, r4, r5, r6, r7}
20004402:	bc08      	pop	{r3}
20004404:	469e      	mov	lr, r3
20004406:	4770      	bx	lr

20004408 <_fini>:
20004408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000440a:	bf00      	nop
2000440c:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000440e:	bc08      	pop	{r3}
20004410:	469e      	mov	lr, r3
20004412:	4770      	bx	lr

20004414 <__frame_dummy_init_array_entry>:
20004414:	0485 2000                                   ... 

20004418 <__do_global_dtors_aux_fini_array_entry>:
20004418:	0471 2000                                   q.. 
